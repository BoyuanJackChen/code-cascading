[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    a = test_tup1\n    b = test_tup2\n    list_a = set(a)\n    list_b = set(b)\n    c = list(list_a.intersection(list_b))\n    return c\n",
        "num_ids": 61
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # for element in test_tup1:\n    #     if element in test_tup2:\n    #         common_el.append(element)\n    #     else:\n    #         pass\n    # return common_el\n    return set(test_tup1) & set(test_tup2)\n",
        "num_ids": 77
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    from collections import Counter\n    new_list = list(set(test_tup1) & set(test_tup2))\n    return Counter(new_list)\n",
        "num_ids": 42
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n",
        "num_ids": 22
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n    common_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            common_elements.append(item)\n    return common_elements\n",
        "num_ids": 148
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                result.append(i)\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    intersection = list(set(test_tup1) & set(test_tup2))\n    return intersection\n",
        "num_ids": 30
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        return all(n%i for i in range(4,int(math.ceil(math.sqrt(n)))+1,2))\ndef count_prime_number(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    count = 0\n    if num < 1:\n        return count\n    elif num == 1:\n        return count\n    elif is_not_prime(num):\n        count += 1\n    else:\n        count += 1\n        return count + count_prime_number(num-1)\ndef count_prime_number_new(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    elif is_not_prime(num):\n        return 0\n    else:\n        return 1 + count_prime_number_new(num-1)\ndef count_prime_number_2(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return (count_prime_number_2(num-1) + 1 if is_not_prime(num) else 0)\ndef count_prime_number_3(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return (count_prime_number_3(num-1) + 1 if is_not_prime(num) else 0)\ndef count_prime_number_4(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_4(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_5(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_5(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_6(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_6(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_7(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_7(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_8(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_8(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_9(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_9(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_10(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_10(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_11(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_11(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_12(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_12(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_13(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_13(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_14(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_14(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_15(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_15(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_16(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_16(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_17(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_17(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_18(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_18(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_19(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return count_prime_number_19(num-1) + 1 if is_not_prime(num) else 0\ndef count_prime_number_20(num):\n    '''\n    Write a python function to count the number of prime numbers among the given range.\n    '''\n    if num < 1:\n        return 0\n    eli",
        "num_ids": 15
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                return False\n        return True\n",
        "num_ids": 67
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        return True\n    sq = int(math.sqrt(n))+1\n    for i in range(3,sq,2):\n        if n%i==0:\n            return True\n    return False\n",
        "num_ids": 83
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return False\n    elif n > 2 and n%2 == 0:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2 and n%2 == 0:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                return False\n    return True\ndef is_perfect_square(n):\n    '''\n    Write a python function to identify perfect square numbers.\n    '''\n    if n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        for i in range(1, int(math.sqrt(n))+1):\n            if i**2 == n:\n                return True\n        return False\ndef is_perfect_square_recursion(n):\n    '''\n    Write a python function to identify perfect square numbers.\n    '''\n    if n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        if n == int(math.sqrt(n))**2:\n            return True\n        else:\n            return is_perfect_square_recursion(int(math.sqrt(n))**2)\ndef is_perfect_square_iteration(n):\n    '''\n    Write a python function to identify perfect square numbers.\n    '''\n    if n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        for i in range(1, int(math.sqrt(n))+1):\n            if i**2 == n:\n                return True\n            elif i**2 > n:\n                return False\ndef factorial(n):\n    '''\n    Write a python function to compute factorial.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to compute fibonacci.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef fibonacci_recursion(n):\n    '''\n    Write a python function to compute fibonacci.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci_recursion(n-1) + fibonacci_recursion(n-2)\ndef power(n,p):\n    '''\n    Write a python function to compute n to the power of p.\n    '''\n    if p == 1:\n        return n\n    else:\n        return n*power(n,p-1)\ndef power_recursion(n,p):\n    '''\n    Write a python function to compute n to the power of p.\n    '''\n    if p == 1:\n        return n\n    elif p == 0:\n        return 1\n    else:\n        return n*power_recursion(n,p-1)\ndef factorial_recursion(n):\n    '''\n    Write a python function to compute factorial.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        return n*factorial_recursion(n-1)\ndef power_iteration(n,p):\n    '''\n    Write a python function to compute n to the power of p.\n    '''\n    product = 1\n    while p > 0:\n        if p % 2 == 1:\n            product = product * n\n        n = n * n\n        p = p/2\n    return product\ndef power_iteration_recursion(n,p):\n    '''\n    Write a python function to compute n to the power of p.\n    '''\n    if p == 1:\n        return n\n    elif p == 0:\n        return 1\n    else:\n        return n*power_iteration_recursion(n,p-1)\ndef factorial_iteration(n):\n    '''\n    Write a python function to compute factorial.\n    '''\n    product = 1\n    while n > 0:\n        product = product * n\n        n = n - 1\n    return product\ndef to_bin(n):\n    '''\n    Write a python function to convert a number to binary.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return to_bin(n/2) + n%2\ndef to_bin_recursion(n):\n    '''\n    Write a python function to convert a number to binary.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return to_bin_recursion(n/2) + n%2\ndef to_bin_iteration(n):\n    '''\n    Write a python function to convert a number to binary.\n    '''\n    product = 0\n    while n > 0:\n        product = product + n%2\n        n = n/2\n    return product\ndef to_oct(n):\n    '''\n    Write a python function to convert a number to octal.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return to_oct(n/8) + n%8\ndef to_oct_recursion(n):\n    '''\n    Write a python function to convert a number to octal.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return to_oct_recursion(n/8) + n%8\ndef to_oct_iteration(n):\n    '''\n    Write a python function to convert a number to octal.\n    '''\n    product = 0\n    while n > 0:\n        product = product + n%8\n        n = n/8\n    return product\ndef to_hex(n):\n    '''\n    Write a python function to convert a number to hexadecimal.\n    '''\n    if n == 0:\n        return 0\n    elif n > 15:\n        return to_hex(n/16) + n%16\n    else:\n        return n\ndef to_hex_recursion(n):\n    '''\n    Write a python function to convert a number to hexadecimal.\n    '''\n    if n == 0:\n        return 0\n    elif n > 15:\n        return to_hex_recursion(n/16) + n%16\n    else:\n        return n\ndef to_hex_iteration(n):\n    '''\n    Write a python function to convert a number to hexadecimal.\n    '''\n    product = 0\n    while n > 0:\n        product = product + n%16\n        n = n/16\n    return product\ndef sum_digits(n):\n    '''\n    Write a python function to compute sum of digits of a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_digits(int(n/10))\ndef sum_digits_recursion(n):\n    '''\n    Write a python function to compute sum of digits of a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_digits_recursion(int(n/10))\ndef sum_digits_iteration(n):\n    '''\n    Write a python function to compute sum of digits of a number.\n    '''\n    product = 0\n    while n > 0:\n        product = product + n%10\n        n = n/10\n    return product\ndef is_palindrome(n):\n    '''\n    Write a python function to identify palindrome.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    elif n < 10:\n        return True\n    else:\n        return n%10 == n/10%10",
        "num_ids": 52
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # If n is not a perfect square\n    if n%2 == 0 and n!= 2:\n        return True\n    # If n is a perfect square\n    if n%2 == 0 and n == 2:\n        return False\n    # If n is not a perfect square and not 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n%i == 0:\n            return True\n    return False\ndef prime_generator(n):\n    '''\n    Write a python generator to find the prime numbers less than n.\n    '''\n    # Initialize a list of integers from 2 to n\n    l = range(2, n+1)\n    # Filter out all the composite numbers from the list\n    for i in l:\n        if is_not_prime(i):\n            l.remove(i)\n    # Yield each number from the list\n    for i in l:\n        yield i\ndef smallest_prime_factor(n):\n    '''\n    Write a python function to find the smallest prime factor of a given number.\n    '''\n    # Initialize an empty list of factors\n    l = []\n    # If n is less than 1, return None\n    if n < 1:\n        return None\n    # If n is 1, return 1\n    if n == 1:\n        return 1\n    # If n is prime, return n\n    if is_not_prime(n):\n        return n\n    # Initialize a generator to find all the prime numbers less than n\n    for i in prime_generator(n):\n        # If i is a factor of n, add i to the list\n        if n % i == 0:\n            l.append(i)\n    # Return the smallest factor of n\n    return min(l)\ndef sum_of_primes(n):\n    '''\n    Write a python function to find the sum of all the primes less than n.\n    '''\n    # Initialize a generator to find all the prime numbers less than n\n    for i in prime_generator(n):\n        # If i is a factor of n, add i to the sum\n        if n%i == 0:\n            s = s + i\n    # Return the sum of all the primes less than n\n    return s\ndef fibonacci_numbers_generator(n):\n    '''\n    Write a python generator to find the fibonacci numbers less than n.\n    '''\n    # Initialize two fibonacci numbers\n    a = 0\n    b = 1\n    # If n is 0 or 1, yield a single number and return\n    if n < 2:\n        yield a\n    # Yield the two numbers\n    for i in range(2, n + 1):\n        yield a + b\n        a = b\n        b = a + b\ndef fibonacci_numbers(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    # Initialize two fibonacci numbers\n    a = 0\n    b = 1\n    # If n is 0 or 1, return a single number\n    if n < 2:\n        return a\n    # Return the nth fibonacci number\n    for i in range(2, n + 1):\n        a = b\n        b = a + b\n    return a\ndef sum_of_even_fibonacci_numbers(n):\n    '''\n    Write a python function to find the sum of all the even fibonacci numbers less than n.\n    '''\n    # Initialize a generator to find all the fibonacci numbers less than n\n    for i in fibonacci_numbers_generator(n):\n        # If i is even, add i to the sum\n        if i%2 == 0:\n            s = s + i\n    # Return the sum of all the even fibonacci numbers less than n\n    return s\ndef sum_of_odd_fibonacci_numbers(n):\n    '''\n    Write a python function to find the sum of all the odd fibonacci numbers less than n.\n    '''\n    # Initialize a generator to find all the fibonacci numbers less than n\n    for i in fibonacci_numbers_generator(n):\n        # If i is an odd number, add i to the sum\n        if i%2!= 0:\n            s = s + i\n    # Return the sum of all the odd fibonacci numbers less than n\n    return s\ndef sum_of_perfect_square_numbers_generator(n):\n    '''\n    Write a python generator to find all the perfect square numbers less than n.\n    '''\n    # Initialize a generator to find all the perfect square numbers less than n\n    for i in range(0, n+1):\n        # If i is a perfect square, add i to the sum\n        if i**0.5 % 1 == 0:\n            s = s + i\n    # Return the sum of all the perfect square numbers less than n\n    return s\ndef sum_of_perfect_square_numbers(n):\n    '''\n    Write a python function to find the sum of all the perfect square numbers less than n.\n    '''\n    # Initialize a generator to find all the perfect square numbers less than n\n    for i in range(0, n+1):\n        # If i is a perfect square, add i to the sum\n        if i**0.5 % 1 == 0:\n            s = s + i\n    # Return the sum of all the perfect square numbers less than n\n    return s\ndef sum_of_perfect_square_numbers_prime_generator(n):\n    '''\n    Write a python generator to find all the perfect square numbers less than n, and only the prime numbers.\n    '''\n    # Initialize a generator to find all the perfect square numbers less than n\n    for i in range(0, n+1):\n        # If i is a perfect square, add i to the sum\n        if i**0.5 % 1 == 0:\n            s = s + i\n        # If i is a prime, add i to the sum\n        if is_not_prime(i):\n            s = s + i\n    # Return the sum of all the perfect square numbers less than n\n    return s\ndef sum_of_perfect_square_numbers_prime(n):\n    '''\n    Write a python function to find the sum of all the perfect square numbers less than n, and only the prime numbers.\n    '''\n    # Initialize a generator to find all the perfect square numbers less than n\n    for i in range(0, n+1):\n        # If i is a perfect square, add i to the sum\n        if i**0.5 % 1 == 0:\n            s = s + i\n        # If i is a prime, add i to the sum\n        if is_not_prime(i):\n            s = s + i\n    # Return the sum of all the perfect square numbers less than n\n    return s\ndef sum_of_square_numbers_generator(n):\n    '''\n    Write a python generator to find all the square numbers less than n.\n    '''\n    # Initialize a generator to find all the square numbers less than n\n    for i in range(0, n+1):\n        # If i is a square, add i to the sum\n        if i**0.5 % 1 == 0:\n            s = s + i**2\n    # Return the sum of all the square numbers less than n\n    return s\ndef sum_of_square_numbers(n):\n    '''\n    Write a python function to find the sum of all the square numbers less than n.\n    '''\n    # Initialize a generator to find all the square numbers less than n\n    for i in range(0, n+1):\n        # If i is a square, add i to the sum\n        if i**0.5 % 1 == 0:\n            s = s + i**2\n    # Return the sum of all the square numbers less than n\n    return s\ndef sum_of_squares_numbers_prime_generator(n):\n    '''\n    Write a python generator to find all the square numbers less than n, and only the prime numbers.\n    '''\n    # Initialize a generator to find all the square numbers less than n\n    for i in range(0, n+1):\n        # If i is a square, add i to the sum\n        if i**0.5 % 1 == 0:\n            s = s + i**2\n        # If i is a prime, add i to the sum\n        i",
        "num_ids": 83
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    if n==1:\n        return 0\n    else:\n        if n>=2:\n            for i in range(2,n):\n                if n%i==0:\n                    return 1\n                    break\n            else:\n                return 0\n        else:\n            return 1\ndef primes(n):\n    '''\n    Write a python function to find all the primes less than a given number.\n    '''\n    \n    primes_list=[]\n    for i in range(2,n):\n        if is_not_prime(i):\n            primes_list.append(i)\n    return primes_list\ndef factors(n):\n    '''\n    Write a python function to find all the prime factors of a given number.\n    '''\n    factors_list=[]\n    for i in range(1,n+1):\n        if n%i==0 and is_not_prime(i):\n            factors_list.append(i)\n    return factors_list\ndef sum_of_factors(n):\n    '''\n    Write a python function to find the sum of the factors of a given number.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if n%i==0 and is_not_prime(i):\n            sum+=i\n    return sum\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    sum=1\n    for i in range(1,n+1):\n        sum=sum*i\n    return sum\ndef sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if n%i==0:\n            sum+=i\n    return sum\ndef factorial_divisors(n):\n    '''\n    Write a python function to find the factorial of the divisors of a given number.\n    '''\n    factorial_divisors_list=[]\n    for i in range(1,n+1):\n        if n%i==0 and is_not_prime(i):\n            factorial_divisors_list.append(i)\n    return factorial_divisors_list\ndef sum_of_divisors_divisors(n):\n    '''\n    Write a python function to find the sum of the divisors of a given number.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if n%i==0 and is_not_prime(i):\n            sum+=i\n    return sum\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if a==0:\n        return b\n    else:\n        return gcd(b%a,a)\ndef lcm(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    return a*b/gcd(a,b)\ndef is_perfect(n):\n    '''\n    Write a python function to identify a perfect number.\n    '''\n    if sum_of_divisors(n)==n:\n        return 1\n    else:\n        return 0\ndef is_abundant(n):\n    '''\n    Write a python function to identify an abundant number.\n    '''\n    if sum_of_divisors(n)>n:\n        return 1\n    else:\n        return 0\ndef is_deficient(n):\n    '''\n    Write a python function to identify a deficient number.\n    '''\n    if sum_of_divisors(n)<n:\n        return 1\n    else:\n        return 0\ndef is_triangular(n):\n    '''\n    Write a python function to identify a triangular number.\n    '''\n    return n*(n+1)/2\ndef is_pentagonal(n):\n    '''\n    Write a python function to identify a pentagonal number.\n    '''\n    return n*(3*n-1)/2\ndef is_hexagonal(n):\n    '''\n    Write a python function to identify a hexagonal number.\n    '''\n    return n*(2*n-1)\ndef is_heptagonal(n):\n    '''\n    Write a python function to identify a heptagonal number.\n    '''\n    return n*(5*n-3)/2\ndef is_octagonal(n):\n    '''\n    Write a python function to identify an octagonal number.\n    '''\n    return n*(3*n-2)\ndef is_nonagonal(n):\n    '''\n    Write a python function to identify a nonagonal number.\n    '''\n    return n*(n-2)\ndef is_decagonal(n):\n    '''\n    Write a python function to identify a decagonal number.\n    '''\n    return n*(n-4)\ndef is_undecagonal(n):\n    '''\n    Write a python function to identify an undecagonal number.\n    '''\n    return n*(n+2)\ndef is_dodecagonal(n):\n    '''\n    Write a python function to identify a dodecagonal number.\n    '''\n    return n*(n+6)\ndef is_tetragonal(n):\n    '''\n    Write a python function to identify a tetragonal number.\n    '''\n    return n*(n+1)\ndef is_square(n):\n    '''\n    Write a python function to identify a square number.\n    '''\n    return n*n\ndef is_isosceles(n):\n    '''\n    Write a python function to identify an isosceles number.\n    '''\n    if is_triangular(n) or is_pentagonal(n) or is_hexagonal(n) or is_heptagonal(n) or is_octagonal(n) or is_nonagonal(n):\n        return 1\n    else:\n        return 0\ndef is_right_triangle(a,b,c):\n    '''\n    Write a python function to identify a right triangle.\n    '''\n    if a**2+b**2==c**2:\n        return 1\n    else:\n        return 0\ndef is_right_triangle_variant(a,b,c):\n    '''\n    Write a python function to identify a right triangle.\n    '''\n    if a**2+b**2>c**2:\n        return 1\n    else:\n        return 0\ndef is_square_variant(n):\n    '''\n    Write a python function to identify a square number.\n    '''\n    if n**0.5==int(n**0.5):\n        return 1\n    else:\n        return 0\ndef is_right_triangle_variant_1(a,b,c):\n    '''\n    Write a python function to identify a right triangle.\n    '''\n    if a**2+b**2>c**2 and a**2+c**2>b**2 and b**2+c**2>a**2:\n        return 1\n    else:\n        return 0\ndef is_right_triangle_variant_2(a,b,c):\n    '''\n    Write a python function to identify a right triangle.\n    '''\n    if a**2+b**2>c**2 and a**2+c**2>b**2 and a**2+b**2>c**2:\n        return 1\n    else:\n        return 0\ndef is_triangle_variant_1(a,b,c):\n    '''\n    Write a python function to identify a triangle.\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        return 1\n    else:\n        return 0\ndef is_triangle_variant_2(a,b,c):\n    '''\n    Write a python function to identify a triangle.\n    '''\n    if a+b>c and a+c>b and a+b>c:\n        return 1\n    else:\n        return 0\ndef is_triangle_variant_3(a,b,c):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    if n < 9:\n        return False\n    if n % 3 == 0 or n % 5 == 0:\n        return True\n    for i in range(5, int(math.sqrt(n) + 1), 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0 or n % 5 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n) + 1), 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\ndef reverse(n):\n    '''\n    Write a python function to reverse a number.\n    '''\n    if n < 0:\n        return (-1)*(abs(n)%10)*10**int(math.log10(abs(n)))\n    return n%10**int(math.log10(n))*10+reverse(n/10**int(math.log10(n)))\ndef rotate(n):\n    '''\n    Write a python function to rotate a number to the left by a given number of places.\n    '''\n    s = str(n)\n    if len(s) < 2:\n        return n\n    t = s[len(s)-2] + s[:len(s)-2]\n    return int(t)\ndef is_palindrome(n):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    s = str(n)\n    if s[::-1] == s:\n        return True\n    else:\n        return False\ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)\ndef fibonacci(n):\n    '''\n    Write a python function to calculate nth fibonacci number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\ndef count_digits(n):\n    '''\n    Write a python function to count the number of digits in a given number.\n    '''\n    s = str(n)\n    return len(s)\ndef is_power(n):\n    '''\n    Write a python function to check if a given number is a power of another number.\n    '''\n    return n == pow(n,2)\ndef is_equal(n):\n    '''\n    Write a python function to check if a given number is equal to another number.\n    '''\n    return n == n*2\ndef num_digits(n):\n    '''\n    Write a python function to calculate the number of digits in a given number.\n    '''\n    s = str(n)\n    return len(s)\ndef largest_factor(n):\n    '''\n    Write a python function to calculate the largest factor of a given number.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\ndef smallest_factor(n):\n    '''\n    Write a python function to calculate the smallest factor of a given number.\n    '''\n    for i in range(1, n + 1):\n        if n % i == 0:\n            return i\n    return n\ndef is_perfect(n):\n    '''\n    Write a python function to check if a given number is perfect.\n    '''\n    s = str(n)\n    if n == sum(map(int,s)):\n        return True\n    else:\n        return False\ndef is_abundant(n):\n    '''\n    Write a python function to check if a given number is abundant.\n    '''\n    s = str(n)\n    if n < sum(map(int,s)):\n        return True\n    else:\n        return False\ndef is_divisible(n):\n    '''\n    Write a python function to check if a given number is divisible by another number.\n    '''\n    if n % 5 == 0:\n        return True\n    else:\n        return False\ndef is_divisible_by_5(n):\n    '''\n    Write a python function to check if a given number is divisible by another number.\n    '''\n    if n % 5 == 0:\n        return True\n    else:\n        return False\ndef is_prime_alternate(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_palindrome_alternate(n):\n    '''\n    Write a python function to check if a given number is palindrome or not.\n    '''\n    s = str(n)\n    if s[::-1] == s:\n        return True\n    else:\n        return False\ndef is_pandigital(n):\n    '''\n    Write a python function to check if a given number is pandigital or not.\n    '''\n    s = str(n)\n    if len(s) == 9 and '0' not in s:\n        return True\n    else:\n        return False\ndef is_transparent(n):\n    '''\n    Write a python function to check if a given number is transparent or not.\n    '''\n    s = str(n)\n    if len(s) < 4:\n        return False\n    else:\n        t = s[0] + s[1] + s[2] + s[3]\n        return int(t) == n\ndef is_super_reduced_string(s):\n    '''\n    Write a python function to check if a given string is super reduced string or not.\n    '''\n    for i in range(1, len(s)):\n        if s[i] < s[i - 1]:\n            return False\n    return True\ndef is_super_reduced_string_alternate(s):\n    '''\n    Write a python function to check if a given string is super reduced string or not.\n    '''\n    s = list(s)\n    for i in range(1, len(s)):\n        if s[i] < s[i - 1]:\n            j = i\n            while j < len(s) and s[j] < s[j - 1]:\n                j += 1\n            s[i], s[j - 1] = s[j - 1], s[i]\n            s[i + 1:] = sorted(s[i + 1:])\n            return ''.join(s) == s\n    return True\ndef is_super_reduced_string_alternate2(s):\n    '''\n    Write a python function to check if a given string is super reduced string or not.\n    '''\n    s = list(s)\n    for i in range(1, len(s)):\n        if s[i] < s[i - 1]:\n            j = i\n            while j < len(s) and s[j] < s[j - 1]:\n                j += 1\n            s[i], s[j - 1] = s[j - 1], s[i]\n            s[i + 1:] = sorted(s[i + 1:])\n            return ''.join(s) == s\n    return True\ndef is_super_reduced_string_alternate3(s):\n    '''\n    Write a python function to check if a given string is super reduced string or not.\n    '''\n    s = list(s)\n    for i in rang",
        "num_ids": 15
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    else:\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return True\n            i += 6\n        return False\n",
        "num_ids": 95
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        if n == 2:\n            return False\n        for j in range(2, n):\n            if n % j == 0:\n                return False\n        return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n > 1:\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for j in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % j == 0:\n                return False\n        return True\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result=[]\n    for i in range(n):\n        hq.heappush(result, -hq.heappop(nums))\n    return result\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    result=[]\n    for i in range(n):\n        hq.heappush(result, -hq.heappop(nums))\n    return result\ndef max_heap_insert(nums,ele):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and returns a new array of the same length with the greatest value at the end of the array.\n    The function should return the array in ascending order of the values in the array.\n    '''\n    temp=[]\n    for i in range(len(nums)):\n        hq.heappush(temp,ele-nums[i])\n    return temp\ndef max_heap_extract(nums):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and returns a new array of the same length with the greatest value at the beginning of the array.\n    The function should return the array in ascending order of the values in the array.\n    '''\n    temp=[]\n    hq.heapify(nums)\n    return nums\ndef max_heap_increase_key(nums,i,ele):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and an index, i, and an integer, ele, that is a number between 1 and 100, inclusive.\n    The function should modify the array nums so that the ith element of nums is now equal to ele.\n    The function should return the array in ascending order of the values in the array.\n    '''\n    hq.heappush(nums,ele-nums[i])\n    return nums\ndef max_heap_decrease_key(nums,i,ele):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and an index, i, and an integer, ele, that is a number between 1 and 100, inclusive.\n    The function should modify the array nums so that the ith element of nums is now equal to ele.\n    The function should return the array in ascending order of the values in the array.\n    '''\n    hq.heappush(nums,ele-nums[i])\n    return nums\ndef max_heap_delete(nums,i):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and an index, i, and removes the ith element from nums.\n    The function should return the array in ascending order of the values in the array.\n    '''\n    nums.pop(i)\n    return nums\ndef heapsort(nums):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and returns a new array of the same length with the values sorted in descending order.\n    The function should return the array in ascending order of the values in the array.\n    '''\n    result=[]\n    hq.heapify(nums)\n    while len(nums)>0:\n        result.append(hq.heappop(nums))\n    return result\ndef heapsort_smallest(nums):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and returns a new array of the same length with the values sorted in ascending order.\n    The function should return the array in ascending order of the values in the array.\n    '''\n    result=[]\n    hq.heapify(nums)\n    while len(nums)>0:\n        result.append(hq.heappop(nums))\n    return result\ndef heapsort_largest(nums):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and returns a new array of the same length with the values sorted in descending order.\n    The function should return the array in descending order of the values in the array.\n    '''\n    result=[]\n    hq.heapify(nums)\n    while len(nums)>0:\n        result.append(hq.heappop(nums))\n    return result\ndef inplace_heap_sort(nums):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and returns a new array of the same length with the values sorted in descending order.\n    The function should return the array in descending order of the values in the array.\n    '''\n    hq.heapify(nums)\n    for i in range(len(nums)-1):\n        hq.heappush(nums,hq.heappop(nums))\n    return nums\ndef iterative_heap_sort(nums):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and returns a new array of the same length with the values sorted in descending order.\n    The function should return the array in descending order of the values in the array.\n    '''\n    result=[]\n    for i in range(len(nums)):\n        hq.heappush(result,hq.heappop(nums))\n    return result\ndef min_heap_insert(nums,ele):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and returns a new array of the same length with the greatest value at the end of the array.\n    The function should return the array in ascending order of the values in the array.\n    '''\n    temp=[]\n    for i in range(len(nums)):\n        hq.heappush(temp,ele-nums[i])\n    return temp\ndef min_heap_extract(nums):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and returns a new array of the same length with the greatest value at the beginning of the array.\n    The function should return the array in ascending order of the values in the array.\n    '''\n    temp=[]\n    hq.heapify(nums)\n    return nums\ndef min_heap_increase_key(nums,i,ele):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and an index, i, and an integer, ele, that is a number between 1 and 100, inclusive.\n    The function should modify the array nums so that the ith element of nums is now equal to ele.\n    The function should return the array in ascending order of the values in the array.\n    '''\n    hq.heappush(nums,ele-nums[i])\n    return nums\ndef min_heap_decrease_key(nums,i,ele):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and an index, i, and an integer, ele, that is a number between 1 and 100, inclusive.\n    The function should modify the array nums so that the ith element of nums is now equal to ele.\n    The function should return the array in ascending order of the values in the array.\n    '''\n    hq.heappush(nums,ele-nums[i])\n    return nums\ndef min_heap_delete(nums,i):\n    '''\n    Write a function that takes in a non-empty array of integers that are between 1 and 100, inclusive, and an index, i, and removes the ith element from nums.\n    The function should return the array in ascending order of the values in the array.\n    '''\n    nums.pop(i)\n    return nums\ndef heapsort(nums):\n    '''\n    Write a function that takes in a non-empty array of integer",
        "num_ids": 16
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n        if len(heap)>n:\n            hq.heappop(heap)\n    return heap\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n        if len(heap)>n:\n            hq.heappop(heap)\n    return -heap\ndef heap_queue_median(nums,n):\n    '''\n    Write a function to find the median of the given numbers in a new list.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n        if len(heap)>n:\n            hq.heappop(heap)\n    return heap[0]\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,-i)\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a given list of numbers in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap",
        "num_ids": 33
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    print 'nlargest',n\n    hq.heapify(nums)\n    for i in range(n):\n        print hq.heappop(nums)\n    \n",
        "num_ids": 46
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    for num in nums:\n        hq.heappush(h,(-num,num))\n    return [hq.heappop(h)[1] for i in range(n)]\n",
        "num_ids": 53
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    for i in nums:\n        hq.append([i,nums.index(i)])\n    res=[]\n    while n>0:\n        res.append(hq[0])\n        hq[0][1]-=1\n        n-=1\n        hq.sort(key=lambda x:x[0])\n    return res[::-1]\n",
        "num_ids": 98
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap=[]\n    for num in nums:\n        if len(max_heap)<n:\n            hq.heappush(max_heap,(-num,num))\n        else:\n            hq.heappushpop(max_heap,(-num,num))\n    return [x[1] for x in max_heap]\n",
        "num_ids": 90
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # h = []\n    # for i in nums:\n    #     h.append(i)\n    #     h.sort(reverse=True)\n    #     if len(h) > n:\n    #         h.pop()\n    #     return h\n    return hq.nlargest(n,nums)\n",
        "num_ids": 79
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    a=[]\n    for i in range(n):\n        hq.heappush(a,-nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<a[0]:\n            hq.heappop(a)\n            hq.heappush(a,-nums[i])\n    for i in range(n):\n        print -a[0]\n        hq.heappop(a)\n",
        "num_ids": 115
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in nums:\n        hq.heappush(heap,i)\n    return [hq.heappop(heap) for i in range(n)]\n",
        "num_ids": 51
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    for i in range(n,len(nums)):\n        if nums[i] > h[0]:\n            hq.heapreplace(h, nums[i])\n    return h\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    for i in range(n,len(nums)):\n        if nums[i] < h[0]:\n            hq.heapreplace(h, nums[i])\n    return h\n",
        "num_ids": 80
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x&(x-1)) == 0\n",
        "num_ids": 15
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n",
        "num_ids": 15
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((x & (x - 1)) == 0) and x > 0\ndef power_of_two(x):\n    while x:\n        if is_Power_Of_Two(x):\n            return True\n        x &= x - 1\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)): \n        return False\n    else: \n        return True\n",
        "num_ids": 28
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n",
        "num_ids": 15
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    bin_x = bin(x)[2:]\n    return True if (len(bin_x) - 1) & 1 else False\n",
        "num_ids": 33
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1) == 0)\n    \ndef Two_Complement(x): \n    '''\n    Write a python function to convert a signed binary number to its Two Complement.\n    '''\n    if x < 0: \n        return (2**32 + x)\n    else: \n        return x\n        \ndef Two_Binary_Digits(x): \n    '''\n    Write a python function to convert a 2's complement binary number to its decimal equivalent.\n    '''\n    if x < 0: \n        return 2**32 + x\n    else: \n        return x\n        \ndef Div_Rem(a,b,c,d): \n    '''\n    Write a python function to calculate the integer division a/b and remainder a%b. \n    '''\n    if b == 0: \n        raise ZeroDivisionError\n    if a < 0: \n        b = -b\n        if b < 0: \n            a = -a\n            c = -c\n    return (a//b, a%b)\n    \ndef to_ascii(msg): \n    '''\n    Write a python function to convert the given ASCII string to the binary equivalent.\n    '''\n    res = \"\" \n    for i in msg: \n        res += chr(ord(i) + 1)\n    return res\n    \ndef from_ascii(msg): \n    '''\n    Write a python function to convert the given ASCII string to the binary equivalent.\n    '''\n    res = \"\" \n    for i in msg: \n        res += chr(ord(i) - 1)\n    return res\n    \ndef Sub_Mod(a,b): \n    '''\n    Write a python function to calculate the modular subtraction of a/b. \n    '''\n    if a < 0: \n        b = -b\n        if b < 0: \n            a = -a\n    return a - b*(a//b)\n    \ndef Add_Mod(a,b): \n    '''\n    Write a python function to calculate the modular addition of a/b. \n    '''\n    if a < 0: \n        b = -b\n        if b < 0: \n            a = -a\n    return a + b*(a//b)\n    \ndef Modulo(a,b): \n    '''\n    Write a python function to calculate the modular division of a/b. \n    '''\n    if a < 0: \n        b = -b\n        if b < 0: \n            a = -a\n    return a * (b // a)\n    \ndef Mod_Inv(a,b): \n    '''\n    Write a python function to calculate the modular inverse of a/b. \n    '''\n    c,d = Div_Rem(a,b,0,1)\n    if d < 0: \n        return (d + b)\n    return d\n    \ndef Sqrt(x): \n    '''\n    Write a python function to calculate the integer square root of x.\n    '''\n    if x < 0: \n        return -1\n    if x < 1: \n        return 0\n    if x == 1: \n        return 1\n    if x == 0: \n        return 0\n    y,c = 1,x\n    while y < c: \n        y = y + 1\n        c = c + c\n    return y\n    \ndef LCM(x,y): \n    '''\n    Write a python function to calculate the least common multiple of x/y. \n    '''\n    if x > y: \n        if x % y == 0: \n            return y\n        else: \n            return x*(Sqrt(x//y) + 1)\n    else: \n        if y % x == 0: \n            return x\n        else: \n            return y*(Sqrt(y//x) + 1)\n    \ndef GCD(x,y): \n    '''\n    Write a python function to calculate the greatest common divisor of x/y. \n    '''\n    if x > y: \n        if x % y == 0: \n            return y\n        else: \n            return GCD(y, x % y)\n    else: \n        if y % x == 0: \n            return x\n        else: \n            return GCD(x, y % x)\n    \ndef Fact(x): \n    '''\n    Write a python function to calculate the factorial of x.\n    '''\n    if x < 0: \n        return -1\n    if x == 0 or x == 1: \n        return 1\n    else: \n        return Fact(x - 1)*x\n    \ndef Fib(x): \n    '''\n    Write a python function to calculate the fibonacci number at x.\n    '''\n    if x < 0: \n        return -1\n    if x == 0 or x == 1: \n        return 1\n    else: \n        return Fib(x - 1) + Fib(x - 2)\n    \ndef Exp(x,n): \n    '''\n    Write a python function to calculate the exponential of x to the nth power.\n    '''\n    if x < 0: \n        return -1\n    if n < 0: \n        return -1\n    if n == 0: \n        return 1\n    else: \n        return x*Exp(x, n - 1)\n    \ndef power(x, n): \n    '''\n    Write a python function to calculate the x power n.\n    '''\n    if x < 0: \n        return -1\n    if n < 0: \n        return -1\n    if n == 0: \n        return 1\n    else: \n        return x*power(x, n - 1)\n    \ndef Log(x,b): \n    '''\n    Write a python function to calculate the logarithm of x to base b.\n    '''\n    if x == 0: \n        return -1\n    if b == 1: \n        return 0\n    if x < 0: \n        return -1\n    if b < 1: \n        return -1\n    if b == 0: \n        return -1\n    if b == 1: \n        return 0\n    if x == 1: \n        return 0\n    c,d = Div_Rem(b,x,0,1)\n    return Log(c,d) + Log(x,b)\n    \ndef Log_Inv(x,b): \n    '''\n    Write a python function to calculate the inverse of the logarithm of x to base b.\n    '''\n    if x == 0: \n        return -1\n    if b == 1: \n        return 0\n    if x < 0: \n        return -1\n    if b < 1: \n        return -1\n    if b == 0: \n        return -1\n    if b == 1: \n        return 0\n    c,d = Div_Rem(b,x,0,1)\n    return Log_Inv(c,d) + Log_Inv(x,b)\n    \ndef Log_E(n): \n    '''\n    Write a python function to calculate the nth base e to the power of the natural logarithm of n.\n    '''\n    if n < 0: \n        return -1\n    if n == 0: \n        return 1\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 3\n    if n == 4: \n        return 4\n    if n == 5: \n        return 5\n    if n == 6: \n        return 6\n    if n == 7: \n        return 7\n    if n == 8: \n        return 8\n    if n == 9: \n        return 9\n    if n == 10: \n        return 10\n    if n == 11: \n        return 11\n    if n == 12: \n        return 12\n    if n == 13: \n        return 13\n    if n == 14: \n        return 14\n    if n == 15: \n        return 15\n    if n == 16: \n        return 16\n    if n == 17: \n        return 17\n    if n == 18: \n        return 18\n    if n == 19:",
        "num_ids": 249
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    #Return True if both numbers are power of two. \n    return (x & (x-1) == 0) and x!= 0\n    \ndef has_overlap(str1, str2): \n    '''\n    Write a python function to check whether the two strings have any characters in common.\n    '''\n    \n    #Counts the number of common characters between the two strings.\n    return len(str1) < len(str2) and len(str2) < len(str1) and len(str1.intersection(str2)) > 0\n    \ndef hamming_distance(str1, str2): \n    '''\n    Write a python function to compute the Hamming distance between the two strings.\n    '''\n    \n    #Computes the Hamming distance between two strings.\n    return len(str1)!= len(str2) and len(str1) == len(str2) and sum([str1[i]!= str2[i] for i in range(len(str1))])\n    \ndef count_vowels(string): \n    '''\n    Write a python function to compute the count of vowels in a string.\n    '''\n    \n    #Counts the number of vowels in a string.\n    return len(re.findall(\"a|e|i|o|u\", string, re.IGNORECASE))\n    \ndef reverse(string): \n    '''\n    Write a python function to reverse a string.\n    '''\n    \n    #Reverses the characters in a string.\n    return string[::-1]\n    \ndef reverse_string(string): \n    '''\n    Write a python function to reverse the string using recursion.\n    '''\n    \n    #Reverse a string using recursion.\n    if len(string) == 0:\n        return string\n    else:\n        return reverse_string(string[1:]) + string[0]\n    \ndef is_palindrome(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Check if the string is a palindrome.\n    return string == string[::-1]\n    \ndef is_palindrome_2(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Iterate over the string and check if each character is a palindrome.\n    for i in range(0, len(string)):\n        if string[i]!= string[len(string)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_3(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Iterate over the string and check if each character is a palindrome.\n    for i in range(0, len(string)//2):\n        if string[i]!= string[len(string)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_4(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Iterate over the string and check if each character is a palindrome.\n    for i in range(0, len(string)//2):\n        if string[i]!= string[len(string)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_5(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Iterate over the string and check if each character is a palindrome.\n    for i in range(0, len(string)//2):\n        if string[i]!= string[len(string)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_6(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Iterate over the string and check if each character is a palindrome.\n    for i in range(0, len(string)//2):\n        if string[i]!= string[len(string)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_7(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Iterate over the string and check if each character is a palindrome.\n    for i in range(0, len(string)//2):\n        if string[i]!= string[len(string)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_8(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Iterate over the string and check if each character is a palindrome.\n    for i in range(0, len(string)//2):\n        if string[i]!= string[len(string)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_9(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Iterate over the string and check if each character is a palindrome.\n    for i in range(0, len(string)//2):\n        if string[i]!= string[len(string)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_10(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Iterate over the string and check if each character is a palindrome.\n    for i in range(0, len(string)//2):\n        if string[i]!= string[len(string)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_11(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Iterate over the string and check if each character is a palindrome.\n    for i in range(0, len(string)//2):\n        if string[i]!= string[len(string)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_12(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Iterate over the string and check if each character is a palindrome.\n    for i in range(0, len(string)//2):\n        if string[i]!= string[len(string)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_13(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Iterate over the string and check if each character is a palindrome.\n    for i in range(0, len(string)//2):\n        if string[i]!= string[len(string)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_14(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Iterate over the string and check if each character is a palindrome.\n    for i in range(0, len(string)//2):\n        if string[i]!= string[len(string)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_15(string): \n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    #Iterate over the string and check if each character is a palindrome.\n    for i in range(0, len(string)//2):\n        if string[i]!= string[len(string)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_16(string): \n",
        "num_ids": 81
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return not (x&(x-1))\n",
        "num_ids": 14
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # result = []\n    # for word in text.split(' '):\n    #     if len(word) > 3:\n    #         result.append(word)\n    # return''.join(result)\n    return [word for word in text.split(' ') if len(word) > 3]\n",
        "num_ids": 73
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w+',text)\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}', text)\n    for item in result:\n        print item\n",
        "num_ids": 33
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_3(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_4(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_5(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_6(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_7(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_8(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_9(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_10(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_11(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_12(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_13(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_14(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_15(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_16(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_17(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_18(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_19(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_20(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_21(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_22(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_23(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_24(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_25(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_26(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_27(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_28(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_29(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = [word for word in text.split() if len(word)>=4]\n    return char_long\ndef find_char_long_30(text):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    results = []\n    for word in re.findall('[\\w]+', text):\n        if len(word) >= 4:\n            results.append(word)\n    return results\n",
        "num_ids": 46
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    return re.findall(r'\\b\\w{4,}\\b',text)\n",
        "num_ids": 26
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    m = re.findall(r'\\b[A-Za-z]+\\b', text)\n    l = [word for word in m if len(word) >= 4]\n    return l\n",
        "num_ids": 50
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # return re.findall('[\\w]{4,}',text)\n    return re.findall(r'\\b\\w{4,}\\b', text)\n    ",
        "num_ids": 45
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a = re.findall(r'\\w{4,}', text)\n    print(a)\n",
        "num_ids": 28
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # To find all words which are at least 4 characters long,\n    # we need to match:\n    # (?i)    Ignore case\n    # [\\w]+    [A-Za-z0-9]+\n    # \\s    Match white space\n    # +    Match one or more, the regular expression will match 0 or more times\n    #.*?    Match 0 or more repetitions of any character\n    return re.findall(r\"(?i)\\w+\\s{4,}\", text)\n",
        "num_ids": 122
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sq_nums = []\n    for i in nums:\n        sq_nums.append(i ** 2)\n    return sq_nums\n",
        "num_ids": 38
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n",
        "num_ids": 19
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num * num)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def is_palindrome(str):\n        if len(str) == 0:\n            return True\n        if str[0] == str[-1]:\n            return is_palindrome(str[1:-1])\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    str = 'abcdcba'\n    rotations = 0\n    \n    while(rotations!= len(str)):\n        \n        if(str == str[-1:]+str[:-1]):\n            rotations+=1\n        else:\n            str = str[-1:]+str[:-1]\n    \n    return rotations\n    \nprint(find_Rotations('abc'))",
        "num_ids": 99
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    p = str\n    temp = str[0]\n    count = 0\n    for i in range(n):\n        p = p + p[0]\n        p = p[1:]\n        \n    if p == str:\n        return 0\n    else:\n        return 1\n    \nprint find_Rotations('123')",
        "num_ids": 86
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotate_count = 0\n    str_len = len(str)\n    if(str_len==1):\n        return 0\n    for i in range(str_len):\n        flag = False\n        for j in range(str_len):\n            if(str[j:]+str[:j]==str):\n                rotate_count+=1\n                flag = True\n                break\n        if(flag==False):\n            return -1\n    return rotate_count\ndef palindrome(str):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    str_len = len(str)\n    if(str_len==1):\n        return True\n    for i in range(str_len//2):\n        if(str[i]!=str[str_len-i-1]):\n            return False\n    return True\ndef is_Anagram(str1,str2):\n    '''\n    Write a python function to check if two strings are Anagram or not.\n    '''\n    str1_len = len(str1)\n    str2_len = len(str2)\n    if(str1_len!=str2_len):\n        return False\n    str_len = str1_len\n    str1_dict = {}\n    str2_dict = {}\n    for i in range(str_len):\n        if(str1[i] in str1_dict):\n            str1_dict[str1[i]]+=1\n        else:\n            str1_dict[str1[i]]=1\n        if(str2[i] in str2_dict):\n            str2_dict[str2[i]]+=1\n        else:\n            str2_dict[str2[i]]=1\n    for i in str1_dict:\n        if(str1_dict[i]!=str2_dict[i]):\n            return False\n    return True\ndef longest_common_substr(str1,str2):\n    '''\n    Write a python function to find the longest common substring of two strings.\n    '''\n    str1_len = len(str1)\n    str2_len = len(str2)\n    max_len = 0\n    str_len = min(str1_len,str2_len)\n    for i in range(str_len):\n        substr = \"\"\n        for j in range(i,str_len):\n            if(str1[j]==str2[j]):\n                substr+=str1[j]\n            else:\n                break\n        if(len(substr)>max_len):\n            max_len = len(substr)\n    return max_len\ndef num_subarray_with_0_sum(arr):\n    '''\n    Write a python function to find the number of subarray with 0 sum.\n    '''\n    sum_count = 0\n    for i in range(len(arr)):\n        sum_count+=arr[i]\n        if(sum_count==0):\n            sum_count+=1\n        if(sum_count<0):\n            sum_count=0\n    return sum_count\ndef partition_array(arr,start,end):\n    '''\n    Write a python function to partition an array around a given index such that all elements in the left subarray are less than the pivot element and all elements in the right subarray are greater than or equal to the pivot element.\n    '''\n    pivot = arr[end]\n    i=start-1\n    for j in range(start,end):\n        if(arr[j]<pivot):\n            i+=1\n            arr[i],arr[j]=arr[j],arr[i]\n    arr[i+1],arr[end]=arr[end],arr[i+1]\n    return i+1\ndef largest_subarray(arr):\n    '''\n    Write a python function to find the largest subarray with sum atleast k.\n    '''\n    start = 0\n    end = 0\n    max_sum = 0\n    sum_arr = 0\n    for i in range(len(arr)):\n        if(arr[i]>0):\n            end=i\n        if(end-start>max_sum):\n            max_sum = end-start\n            sum_arr = arr[start:end+1]\n        if(arr[i]<0):\n            start=i\n    return sum_arr\ndef rotated_array_search(arr,num):\n    '''\n    Write a python function to find the index of the smallest element in an array after sorting the array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while(start<=end):\n        mid = (start+end)//2\n        if(arr[mid]>arr[end]):\n            start = mid+1\n        elif(arr[mid]<arr[start]):\n            end = mid\n        else:\n            return mid\n    return -1\ndef majority_element_rec(arr,start,end):\n    '''\n    Write a python function to find the majority element in an array.\n    '''\n    if(start>=end):\n        return -1\n    mid = (start+end)//2\n    left = majority_element_rec(arr,start,mid)\n    if(left==-1):\n        return majority_element_rec(arr,mid+1,end)\n    right = majority_element_rec(arr,mid+1,end)\n    if(left==right):\n        return left\n    left_count = 0\n    right_count = 0\n    for i in range(mid-start+1):\n        if(arr[i+start]==left):\n            left_count+=1\n        elif(arr[i+start]==right):\n            right_count+=1\n    if(left_count>right_count):\n        return left\n    else:\n        return right\ndef majority_element(arr):\n    '''\n    Write a python function to find the majority element in an array.\n    '''\n    start = 0\n    end = len(arr)-1\n    return majority_element_rec(arr,start,end)\ndef check_permutation(str1,str2):\n    '''\n    Write a python function to check if the first string is a permutation of the second string.\n    '''\n    str1_len = len(str1)\n    str2_len = len(str2)\n    if(str1_len!=str2_len):\n        return False\n    str_len = str1_len\n    str1_dict = {}\n    str2_dict = {}\n    for i in range(str_len):\n        if(str1[i] in str1_dict):\n            str1_dict[str1[i]]+=1\n        else:\n            str1_dict[str1[i]]=1\n        if(str2[i] in str2_dict):\n            str2_dict[str2[i]]+=1\n        else:\n            str2_dict[str2[i]]=1\n    for i in str1_dict:\n        if(str1_dict[i]!=str2_dict[i]):\n            return False\n    return True\ndef check_all_rotations(str):\n    '''\n    Write a python function to check if all rotations of a string are same or not.\n    '''\n    str_len = len(str)\n    for i in range(str_len):\n        flag = False\n        for j in range(str_len):\n            if(str[j:]+str[:j]!=str):\n                flag = True\n                break\n        if(flag==True):\n            return False\n    return True\ndef maximum_number_of_ones_subarray(arr):\n    '''\n    Write a python function to find the maximum number of 1s subarray in an array.\n    '''\n    start = 0\n    end = 0\n    max_ones = 0\n    ones_count = 0\n    for i in range(len(arr)):\n        if(arr[i]==0):\n            ones_count-=1\n        else:\n            ones_count+=1\n        if(ones_count>max_ones):\n            max_ones = ones_count\n            start = i-ones_count+1\n            end = i+1\n    return max_ones,start,en",
        "num_ids": 116
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n): \n        for j in range(n-1,i,-1): \n            if (str[i:] == str[j:]): \n                print(j-i)\n                return\n",
        "num_ids": 62
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def find(str,pattern):\n        p1 = 0\n        p2 = len(str)\n        p3 = 0\n        while p1 < p2:\n            if str[p1]!= pattern[p3]:\n                p3 = 0\n                p1 += 1\n            else:\n                if p3 == len(pattern)-1:\n                    return True\n                p1 += 1\n                p3 += 1\n",
        "num_ids": 100
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # str = \"xxyyxyxyxyxx\"\n    list_str = list(str)\n    list_str.sort()\n    rotations = 0\n    for i in range(0, len(str)):\n        if list_str[i]!= str[i]:\n            rotations += 1\n            if rotations > 1:\n                return -1\n    return rotations\n",
        "num_ids": 92
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    \n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            return i\n    return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2005
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str1 = str\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        for i in range(1,n):\n            if str[i]!= str[n-i]:\n                return (i-1)\n        return 0\n    \n    \n    \n    \ndef find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        for i in range(1,n):\n            if str[i]!= str[n-i]:\n                return (i-1)\n        return 0\n    \n    \ndef reverse(str, start, end):\n    '''\n    Write a python function to reverse a string.\n    '''\n    str = list(str)\n    for i in range(start,end+1):\n        str[i] = str[i-1]\n    return ''.join(str)\n    \ndef find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        for i in range(1,n):\n            if str[i]!= str[n-i]:\n                return (i-1)\n        return 0\n        \n        \ndef palindrome(str):\n    '''\n    Write a python function to check if the string is palindrome or not.\n    '''\n    n = len(str)\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        for i in range(n//2):\n            if str[i]!= str[n-i-1]:\n                return 0\n        return 1\n        \n        \n    \n    \ndef reverse(str, start, end):\n    '''\n    Write a python function to reverse a string.\n    '''\n    str = list(str)\n    for i in range(start,end+1):\n        str[i] = str[i-1]\n    return ''.join(str)\n    \ndef palindrome(str):\n    '''\n    Write a python function to check if the string is palindrome or not.\n    '''\n    n = len(str)\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        for i in range(n//2):\n            if str[i]!= str[n-i-1]:\n                return 0\n        return 1\n        \n        \n    \ndef string_rotation(str1, str2):\n    '''\n    Write a python function to check if the string is rotation of another string.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    if n1!= n2:\n        return 0\n    else:\n        str1 = list(str1)\n        str2 = list(str2)\n        for i in range(n1):\n            str1[i] = str1[i]\n        if str1 == str2:\n            return 1\n        else:\n            return 0\n    \n    \n    \ndef check_permutation(str1, str2):\n    '''\n    Write a python function to check if the string is permutation of another string.\n    '''\n    if len(str1)!= len(str2):\n        return 0\n    else:\n        str1 = list(str1)\n        str2 = list(str2)\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                return 0\n        return 1\n    \n    \ndef string_rotation(str1, str2):\n    '''\n    Write a python function to check if the string is rotation of another string.\n    '''\n    if len(str1)!= len(str2):\n        return 0\n    else:\n        str1 = list(str1)\n        str2 = list(str2)\n        for i in range(len(str1)):\n            str1[i] = str1[i]\n        if str1 == str2:\n            return 1\n        else:\n            return 0\n    \n    \n    \ndef palindrome(str):\n    '''\n    Write a python function to check if the string is palindrome or not.\n    '''\n    n = len(str)\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        for i in range(n//2):\n            if str[i]!= str[n-i-1]:\n                return 0\n        return 1\n    \n    \ndef first_recurring(arr):\n    '''\n    Write a python function to find the first recurring character in the string.\n    '''\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                return arr[i]\n                break\n    return 0\n    \ndef first_recurring(arr):\n    '''\n    Write a python function to find the first recurring character in the string.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n            break\n    return 0\n    \ndef first_recurring(arr):\n    '''\n    Write a python function to find the first recurring character in the string.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n            break\n    return 0\n    \ndef first_recurring(arr):\n    '''\n    Write a python function to find the first recurring character in the string.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n            break\n    return 0\n    \ndef first_recurring(arr):\n    '''\n    Write a python function to find the first recurring character in the string.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n            break\n    return 0\n    \ndef first_recurring(arr):\n    '''\n    Write a python function to find the first recurring character in the string.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n            break\n    return 0\n    \ndef first_recurring(arr):\n    '''\n    Write a python function to find the first recurring character in the string.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n            break\n    return 0\n    \ndef first_recurring(arr):\n    '''\n    Write a python function to find the first recurring character in the string.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n            break\n    return 0\n    \ndef first_recurring(arr):\n    '''\n    Write a python function to find the first recurring character in the string.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n            break\n    return 0\n    \ndef first_recurring(arr):\n    '''\n    Write a python function to find the first recurring character in the string.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i-1]:\n            return arr[i",
        "num_ids": 38
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 1:\n        return 0\n    i = 0\n    while i < n-1:\n        if str[i]!= str[n-1]:\n            return i\n        else:\n            i += 1\n    return n\n",
        "num_ids": 67
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    a = s.split(ch)\n    b = a[0] + a[1]\n    return b\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2010
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\").replace(ch,\"\")\n",
        "num_ids": 18
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,'',1)\n    s=s.replace(ch,'',1)\n    return s\n",
        "num_ids": 32
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n",
        "num_ids": 23
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_string = s.replace(ch, '')\n    new_string = new_string.replace(ch.lower(), '')\n    return new_string\n",
        "num_ids": 40
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        ind=s.index(ch)\n        s=s[:ind]+s[ind+1:]\n        return s\n    else:\n        return s\n",
        "num_ids": 46
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch)==0:\n        return s\n    else:\n        if s.count(ch)==1:\n            return s.replace(ch,'',1)\n        else:\n            for i in range(s.count(ch)):\n                s=s.replace(ch,'',1)\n            return s\n    \ndef remove_Occ_str(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch)==0:\n        return s\n    else:\n        if s.count(ch)==1:\n            return s.replace(ch,'',1)\n        else:\n            for i in range(s.count(ch)):\n                s=s.replace(ch,'',1)\n            return s\n    \ndef remove_Occ_dict(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch)==0:\n        return s\n    else:\n        if s.count(ch)==1:\n            return s.replace(ch,'',1)\n        else:\n            for i in range(s.count(ch)):\n                s=s.replace(ch,'',1)\n            return s\n    \ndef replace_char(s, old, new):\n    '''\n    Write a python function to replace first and last occurrence of a given character from the string.\n    '''\n    if s.count(old)==0:\n        return s\n    else:\n        if s.count(old)==1:\n            return s.replace(old,'',1)\n        else:\n            for i in range(s.count(old)):\n                s=s.replace(old,'',1)\n            return s\n            \ndef replace_char_str(s, old, new):\n    '''\n    Write a python function to replace first and last occurrence of a given character from the string.\n    '''\n    if s.count(old)==0:\n        return s\n    else:\n        if s.count(old)==1:\n            return s.replace(old,'',1)\n        else:\n            for i in range(s.count(old)):\n                s=s.replace(old,'',1)\n            return s\n    \ndef replace_char_dict(s, old, new):\n    '''\n    Write a python function to replace first and last occurrence of a given character from the string.\n    '''\n    if s.count(old)==0:\n        return s\n    else:\n        if s.count(old)==1:\n            return s.replace(old,'',1)\n        else:\n            for i in range(s.count(old)):\n                s=s.replace(old,'',1)\n            return s\n",
        "num_ids": 81
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ_1=s.index(ch)\n    occ_2=s.rindex(ch)\n    return s[:occ_1]+s[occ_2+1:]\n",
        "num_ids": 45
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) > 1:\n        return s.replace(ch, '', 1)\n    else:\n        return s\n",
        "num_ids": 35
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',1)\n",
        "num_ids": 21
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the min sum of row. Set it as the new min sum.\n    # The next row will be selected as the row with the min sum\n    for i in range(len(M)):\n        min_sum = min(M[i])\n        min_sum_index = M[i].index(min_sum)\n        for j in range(len(M[i])):\n            M[i][j], M[i][min_sum_index] = M[i][min_sum_index], M[i][j]\n    return M\n",
        "num_ids": 131
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate sum of rows\n    row_sum = []\n    for row in M:\n        row_sum.append(sum(row))\n    # sort matrix\n    i = 0\n    while i < len(M):\n        j = i + 1\n        while j < len(M):\n            if row_sum[i] < row_sum[j]:\n                temp = row_sum[i]\n                row_sum[i] = row_sum[j]\n                row_sum[j] = temp\n                temp = M[i]\n                M[i] = M[j]\n                M[j] = temp\n            j += 1\n        i += 1\n    return M\n",
        "num_ids": 162
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if not M:\n        return M\n    if not M[0]:\n        return M\n",
        "num_ids": 24
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n",
        "num_ids": 21
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            smallest = i\n            for k in range(i, len(M)):\n                if sum(M[smallest][0:j+1]) > sum(M[k][0:j+1]):\n                    smallest = k\n            M[smallest], M[i] = M[i], M[smallest]\n    return M\n",
        "num_ids": 109
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Sort the matrix according to the sum of the rows\n    M.sort(key = lambda row: row[0] + row[1] + row[2])\n    \n    return M\n",
        "num_ids": 48
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        sorted_row = sorted(M[i])\n        M[i] = sorted_row\n",
        "num_ids": 53
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(0, n):\n        # min_val = min(M[i])\n        min_val = min(M[i][0], M[i][1])\n        max_val = max(M[i][0], M[i][1])\n        for j in range(0, n):\n            if (M[i][j] > max_val):\n                M[i][j] = max_val\n            elif (M[i][j] < min_val):\n                M[i][j] = min_val\n    return M\n",
        "num_ids": 144
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    R = len(M)\n    C = len(M[0])\n    n = R*C\n    for i in range(n):\n        j = i\n        while j >= R:\n            j-=R\n            sum = 0\n            for k in range(C):\n                sum += M[i/C][k]\n            if j!= i and M[j/C][i%C] > sum:\n                M[i/C], M[j/C] = M[j/C], M[i/C]\n                i = j\n            else:\n                break\n    return M\n",
        "num_ids": 144
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n    #Top\n    if m == 1:\n        return M\n    #Bottom\n    elif m == n:\n        #Determine which is the biggest number\n        for i in range(m):\n            for j in range(n):\n                if M[i][j] > max(M[i+1][j], M[i][j+1]):\n                    if M[i][j] > M[i+1][j+1]:\n                        M[i][j], M[i+1][j+1] = M[i+1][j+1], M[i][j]\n                    else:\n                        M[i][j], M[i+1][j] = M[i+1][j], M[i][j]\n        return M\n    else:\n        #Left\n        for i in range(n):\n            for j in range(m):\n                if M[j][i] > max(M[j+1][i], M[j][i+1]):\n                    if M[j][i] > M[j+1][i+1]:\n                        M[j][i], M[j+1][i+1] = M[j+1][i+1], M[j][i]\n                    else:\n                        M[j][i], M[j][i+1] = M[j][i+1], M[j][i]\n        return M\n    \ndef diagonal_matrix(matrix):\n    '''\n    Write a function to generate a diagonal matrix of size n * n where n is the length of the given matrix.\n    The given matrix is a list of lists, each of which is a row of the matrix.\n    '''\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if j < i:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = matrix[j][i]\n    return matrix\n",
        "num_ids": 82
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n",
        "num_ids": 10
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = 0\n    Volume = l*b*h/3\n    return Volume\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3\n    return V\n",
        "num_ids": 18
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (b*h)/2\n    print(V)\n",
        "num_ids": 18
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    return l*b*h/6.0\n",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (h*b*l) / 3\n    \n",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 1/3*b*h\n    \nl=float(input(\"Enter the length of one side:\"))\nb=float(input(\"Enter the breadth of the base:\"))\nh=float(input(\"Enter the height of the prism:\"))\n",
        "num_ids": 59
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * b * h) / 6\n",
        "num_ids": 14
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return b*h/2\n    \n",
        "num_ids": 12
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/6.0\n    ",
        "num_ids": 15
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(text) <= 1:\n        return False\n    for i in range(len(text)-1):\n        if text[i].isalpha() and text[i+1].isalpha() and text[i].lower() == text[i+1].lower():\n            return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text)\n",
        "num_ids": 23
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lower = re.findall(r'[a-z]+_[a-z]+', text)\n    return len(lower) > 0\n    \ndef text_lowercase_underscore_m(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lower = re.findall(r'[a-z]+_[a-z]+', text)\n    return len(lower) > 0\n",
        "num_ids": 36
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text.lower() == text:\n        return False\n    else:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lower = text.lower()\n    if re.search(r'[a-z]{2,}_[a-z]{2,}',text_lower):\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]+', text))\ndef text_lowercase_underscore_remove(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_[a-z]+', text))\ndef text_lowercase_underscore_replace(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]+', text))\ndef text_lowercase_underscore_remove_replace(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_[a-z]+', text))\ndef text_lowercase_underscore_remove_replace_only_once(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'([a-z]+_[a-z]+)+', text))\ndef text_lowercase_underscore_remove_replace_multiply(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'([a-z]+_[a-z]+)+', text))\ndef text_lowercase_underscore_remove_replace_multiply_only_once(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'([a-z]+_[a-z]+)+', text))\ndef text_remove_all_lcase_and_underscore(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_replace(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_remove(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_replace_remove(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_replace_replace(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_replace_remove_replace(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_replace_replace_multiply(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_replace_replace_multiply_only_once(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_remove_replace_multiply(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_remove_replace_multiply_only_once(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_remove_replace_multiply_remove_once(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_remove_replace_multiply_remove_multiply(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_remove_replace_multiply_remove_multiply_only_once(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_remove_replace_multiply_remove_multiply_only_once_remove_once(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_remove_replace_multiply_remove_multiply_only_once_replace_once(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_remove_replace_multiply_remove_multiply_only_once_replace_multiply_once(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[^a-z]+_', text))\ndef text_remove_all_lcase_and_underscore_remove_replace_multiply_remove_multiply_only_once_replace_multiply_multiply_once(text):\n    '''\n    Write a function to that returns true if the input string does not contain sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(\"[a-z]\",text)\ndef text_lowercase_hyphen(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-z]\",text)\ndef text_lowercase_any(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]\",text)\ndef text_lowercase_punctuation(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]\",text)\ndef text_lowercase_punctuation_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters and numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters and numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-z]+\",text)\ndef text_lowercase_any_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_hyphen(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_punctuation(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_punctuation_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_punctuation(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_hyphen(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_punctuation(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_punctuation_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_hyphen_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_hyphen_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_hyphen_punctuation(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_hyphen_punctuation_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_hyphen_space_punctuation(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_hyphen_space_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_hyphen_space_hyphen(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_hyphen_space_hyphen_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_hyphen_space_hyphen_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined with hyphens and false otherwise.\n    '''\n    return re.search(\"[a-zA-Z0-9]+\",text)\ndef text_lowercase_any_space_hyphen_space_hyphen_punctuation(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters or numbers joined wit",
        "num_ids": 24
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+', text) is not None\n",
        "num_ids": 28
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]+',text))\n",
        "num_ids": 27
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = list(string) \n    str2 = list(string) \n    for i in str2: \n        if i in str1: \n            str1.remove(i)\n    return str1 \ndef search(pat,txt,m,n): \n    '''\n    Time Complexity: O(m+n)\n    Space Complexity: O(m)\n    '''\n    skip = [] \n    for k in range(m-1): \n        skip.append(0) \n    skip[0] = m-1\n    i = m-1\n    j = n-1\n    while i>=0 and j>=0: \n        if pat[i]==txt[j]: \n            i -= 1\n            j -= 1\n        elif pat[i]!=txt[j]: \n            if skip[i]==0: \n                j = j-1\n                skip[i] = skip[i]+1\n            else: \n                i = i-skip[i]-1\n    if j<0: \n        return i+1\n    else: \n        return -1\ndef KMP(pat,txt): \n    '''\n    Time Complexity: O(m+n)\n    Space Complexity: O(m)\n    '''\n    m = len(pat) \n    n = len(txt) \n    lps = [0]*m \n    j = 0 \n    computeLPSArray(pat, m, lps) \n    i = 0 \n    while i<n: \n        if pat[j] == txt[i]: \n            i += 1\n            j += 1\n        if j==m: \n            print \"Found at index \",(i-j) \n            j = lps[j-1] \n        elif i<n and pat[j]!=txt[i]: \n            if j!=0: \n                j = lps[j-1] \n            else: \n                i += 1\ndef computeLPSArray(pat, m, lps): \n    len = 0\n    i = 1\n    lps[0] = 0\n    while i<m: \n        if pat[i]==pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            if len!=0: \n                len = lps[len-1] \n            else: \n                lps[i] = 0\n                i += 1\n",
        "num_ids": 294
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Your code goes here\n    if len(string) <= 0:\n        return\n    n = len(string)\n    list1 = [0] * NO_OF_CHARS\n    list2 = [0] * NO_OF_CHARS\n    for i in range(0, n):\n        list1[ord(string[i])] += 1\n    for i in range(0, n):\n        list2[ord(string[i])] += 1\n    for i in range(0, NO_OF_CHARS):\n        if list1[i]!= list2[i]:\n            print(chr(i), end = '')\n",
        "num_ids": 154
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in string: \n        if i not in string: \n            list1.append(i)\n    return list1\ndef caesarCipher(string, key):\n    cipher = \"\"\n    for i in string:\n        if i =='':\n            cipher +=''\n        elif (ord(i) + key) > NO_OF_CHARS:\n            cipher += chr((ord(i) + key) - NO_OF_CHARS + ord('a'))\n        else:\n            cipher += chr(ord(i) + key)\n    return cipher\ndef ceasar_cipher(string, key):\n    cipher = \"\"\n    for i in string:\n        if i =='':\n            cipher +=''\n        elif (ord(i) - key) < ord('a'):\n            cipher += chr((ord(i) - key) + NO_OF_CHARS - ord('a'))\n        else:\n            cipher += chr(ord(i) - key)\n    return cipher\ndef listToString(s): \n    # initialize an empty string\n    str1 = \"\" \n    # traverse in the string  \n    for ele in s: \n        str1 += ele \n    # return string  \n    return str1\ndef listToStringWithoutSpaces(s): \n    # initialize an empty string\n    str1 = \"\" \n    # traverse in the string  \n    for ele in s: \n        if ele!='': \n            str1 += ele \n    # return string  \n    return str1\ndef reverse(string):\n    rev = \"\"\n    for i in string:\n        rev = i + rev\n    return rev\ndef swap(string):\n    return string[::-1]\ndef mxor(first_string, second_string):\n    xor_string = \"\"\n    for i in range(len(first_string)):\n        xor_string += chr(ord(first_string[i]) ^ ord(second_string[i]))\n    return xor_string\ndef xor(first_string, second_string):\n    xor_string = \"\"\n    for i in range(len(first_string)):\n        xor_string += chr(ord(first_string[i]) ^ ord(second_string[i]))\n    return xor_string\ndef hamming(first_string, second_string):\n    hamming_string = 0\n    for i in range(len(first_string)):\n        if first_string[i]!= second_string[i]:\n            hamming_string += 1\n    return hamming_string\ndef break_repeating_key_xor(ciphertext):\n    key_length = range(2, 41)\n    best_score = 100000000\n    best_key_length = 0\n    for k in key_length:\n        substrings = []\n        for i in range(0, len(ciphertext), k):\n            substrings.append(ciphertext[i:i+k])\n        current_score = 0\n        for i in range(len(substrings)):\n            for j in range(i+1, len(substrings)):\n                current_score += hamming(substrings[i], substrings[j])\n        if current_score < best_score:\n            best_score = current_score\n            best_key_length = k\n    return best_score\ndef break_single_char_xor(ciphertext):\n    best_score = 100000000\n    best_key = 0\n    for i in range(256):\n        current_score = 0\n        current_key = i\n        for byte in ciphertext:\n            current_score += hamming(chr(current_key), byte)\n            current_key = (current_key+1)%256\n        if current_score < best_score:\n            best_score = current_score\n            best_key = i\n    return (chr(best_key), best_score)\ndef repeating_xor(ciphertext, key):\n    output = \"\"\n    for i in range(len(ciphertext)):\n        output += chr(ord(ciphertext[i]) ^ ord(key[i%len(key)]))\n    return output\ndef crack_single_char_xor(ciphertext):\n    best_score = 100000000\n    best_key = 0\n    for i in range(256):\n        current_score = 0\n        current_key = i\n        current_output = repeating_xor(ciphertext, chr(current_key))\n        for byte in current_output:\n            current_score += hamming(chr(current_key), byte)\n        if current_score < best_score:\n            best_score = current_score\n            best_key = i\n    return (chr(best_key), best_score)\ndef break_repeating_xor(ciphertext):\n    best_score = 100000000\n    best_key_length = 0\n    for i in range(2, 41):\n        current_score = 0\n        current_key = \"\"\n        for j in range(i):\n            current_key += chr(0)\n        current_output = repeating_xor(ciphertext, current_key)\n        for k in range(len(current_output)):\n            current_score += hamming(current_output[k:k+i], current_output[k+1:k+i+1])\n        if current_score < best_score:\n            best_score = current_score\n            best_key_length = i\n    return best_score\ndef repeating_key_xor(plaintext, key):\n    output = \"\"\n    i = 0\n    j = 0\n    while i < len(plaintext):\n        output += chr(ord(plaintext[i]) ^ ord(key[j]))\n        i += 1\n        j += 1\n        if j == len(key):\n            j = 0\n    return output\ndef break_repeating_key_xor(ciphertext):\n    best_score = 100000000\n    best_key_length = 0\n    for i in range(2, 41):\n        current_score = 0\n        current_key_length = i\n        current_key = \"\"\n        for j in range(current_key_length):\n            current_key += chr(0)\n        current_output = repeating_key_xor(ciphertext, current_key)\n        for k in range(len(current_output)):\n            current_score += hamming(current_output[k:k+current_key_length], current_output[k+1:k+current_key_length+1])\n        if current_score < best_score:\n            best_score = current_score\n            best_key_length = i\n    return best_score\ndef repeating_key_xor_attack(ciphertext, key):\n    output = \"\"\n    i = 0\n    j = 0\n    while i < len(ciphertext):\n        output += chr(ord(ciphertext[i]) ^ ord(key[j]))\n        i += 1\n        j += 1\n        if j == len(key):\n            j = 0\n    return output\ndef break_repeating_key_xor_attack(ciphertext):\n    best_score = 100000000\n    best_key_length = 0\n    for i in range(2, 41):\n        current_score = 0\n        current_key_length = i\n        current_key = \"\"\n        for j in range(current_key_length):\n            current_key += chr(0)\n        current_output = repeating_key_xor_attack(ciphertext, current_key)\n        for k in range(len(current_output)):\n            current_score += hamming(current_output[k:k+current_key_length], current_output[k+1:k+current_key_length+1])\n        if current_score < best_score:\n            best_score = current_score\n            best_key_length = i\n    return best_score\ndef single_byte_xor(plaintext, key):\n    output = \"\"\n    for i in range(len(plaintext)):\n        output += chr(ord(plaintext[i]) ^ ord(key[i%len(key)]))\n    return output\ndef get_best_key_length",
        "num_ids": 1998
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = len(string)\n    l2 = len(string2)\n    a = [0]*l1\n    for i in range(l1):\n        for j in range(l2):\n            if string[i] == string2[j]:\n                a[i] = j\n                break\n    return a\ndef list_to_str(a):\n    l = len(a)\n    s = \"\"\n    for i in range(l):\n        s += str(a[i])\n    return s\ndef pattern_to_number(pattern):\n    '''\n    Write a function to convert a pattern string to the index in the table which corresponds to the pattern string\n    '''\n    p_len = len(pattern)\n    b = [0]*p_len\n    for i in range(p_len-1,-1,-1):\n        if pattern[i] == 'A':\n            b[i] = 0\n        elif pattern[i] == 'C':\n            b[i] = 1\n        elif pattern[i] == 'G':\n            b[i] = 2\n        elif pattern[i] == 'T':\n            b[i] = 3\n    return b\ndef number_to_pattern(index,length):\n    '''\n    Write a function to convert an index in the table to the corresponding pattern string.\n    '''\n    if length == 1:\n        return 'A'\n    if length == 2:\n        return 'AC'\n    if length == 3:\n        return 'AG'\n    if length == 4:\n        return 'AT'\n    if length == 5:\n        return 'ACG'\n    if length == 6:\n        return 'ACGT'\ndef encode_pattern(index, length):\n    '''\n    Write a function to convert an index in the table to the corresponding pattern string.\n    '''\n    if length == 1:\n        return 'A'\n    if length == 2:\n        return 'AC'\n    if length == 3:\n        return 'AG'\n    if length == 4:\n        return 'AT'\n    if length == 5:\n        return 'ACG'\n    if length == 6:\n        return 'ACGT'\n",
        "num_ids": 82
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if(len(string) == 0):\n        return []\n    if(len(string) == 1):\n        return [string]\n    l1 = []\n    for char in string:\n        if char not in l1:\n            l1.append(char)\n    l2 = []\n    for i in l1:\n        for char in string:\n            if char == i:\n                l2.append(char)\n                string = string.replace(char,'',1)\n    return l2\n    \ndef str_to_list_comprehension(string):\n    return [i for i in string]\n",
        "num_ids": 147
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    list3 = []\n    for i in range(len(string)):\n        list1.append(string[i])\n    for j in range(len(string)):\n        list2.append(string[j])\n    for k in range(len(string)):\n        if list1[k] not in list2:\n            list3.append(list1[k])\n    for l in range(len(list3)):\n        print(list3[l],end=\"\")\n",
        "num_ids": 128
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if not string:\n        return []\n    ls = []\n    for i in xrange(len(string)):\n        if string[i] not in ls:\n            ls.append(string[i])\n    return ls\n",
        "num_ids": 55
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    list2 = list(string2)\n    #str = str(string2)\n    \n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 63
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in range(len(string)):\n        if(string[i] not in list):\n            list.append(string[i])\n    return list\n",
        "num_ids": 45
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string)\n",
        "num_ids": 9
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # Time: O(n)\n    # Space: O(n)\n    nums = arraynums\n    \n    n = len(nums)\n    for i in range(n):\n        if nums[i]!= i:\n            if nums[nums[i]] == nums[i]:\n                return True\n            \n            #nums[nums[i]] = nums[i]\n            #nums[i] = nums[nums[i]]\n    \n    return False\n",
        "num_ids": 125
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))",
        "num_ids": 19
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = []\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            duplicates.append(num)\n    return duplicates\n",
        "num_ids": 47
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    elif len(arraynums) == 1:\n        return False\n    elif len(arraynums) == 2:\n        return arraynums[0]!= arraynums[1]\n    else:\n        for i in range(len(arraynums)-1):\n            if arraynums[i] == arraynums[i+1]:\n                return True\n        return False\n",
        "num_ids": 110
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    if len(arraynums) == 1:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass",
        "num_ids": 4
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    memo = {}\n    for num in arraynums:\n        if num in memo:\n            return True\n        memo[num] = True\n",
        "num_ids": 39
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    t = dict()\n    for num in arraynums:\n        if num in t:\n            return True\n        else:\n            t[num] = 1\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(x) > 0:\n        if x[0] == 'w' and x[1] == 'o':\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x%2 == 0)\ndef woodall_set(x):\n    '''\n    Write a function to check if the given number is woodall set or not.\n    '''\n    return (x%2!= 0)\ndef is_water(x): \n    '''\n    Write a function to check if the given number is water or not.\n    '''\n    return (x%3 == 0)\ndef water_set(x):\n    '''\n    Write a function to check if the given number is water set or not.\n    '''\n    return (x%3!= 0)\ndef is_card(x): \n    '''\n    Write a function to check if the given number is card or not.\n    '''\n    return (x%4 == 0)\ndef card_set(x):\n    '''\n    Write a function to check if the given number is card set or not.\n    '''\n    return (x%4!= 0)\ndef is_lam(x): \n    '''\n    Write a function to check if the given number is lam or not.\n    '''\n    return (x%5 == 0)\ndef lam_set(x):\n    '''\n    Write a function to check if the given number is lam set or not.\n    '''\n    return (x%5!= 0)\ndef is_ter(x): \n    '''\n    Write a function to check if the given number is ter or not.\n    '''\n    return (x%6 == 0)\ndef ter_set(x):\n    '''\n    Write a function to check if the given number is ter set or not.\n    '''\n    return (x%6!= 0)\ndef is_three(x): \n    '''\n    Write a function to check if the given number is three or not.\n    '''\n    return (x%7 == 0)\ndef three_set(x):\n    '''\n    Write a function to check if the given number is three set or not.\n    '''\n    return (x%7!= 0)\ndef is_five(x): \n    '''\n    Write a function to check if the given number is five or not.\n    '''\n    return (x%8 == 0)\ndef five_set(x):\n    '''\n    Write a function to check if the given number is five set or not.\n    '''\n    return (x%8!= 0)\ndef is_eight(x): \n    '''\n    Write a function to check if the given number is eight or not.\n    '''\n    return (x%9 == 0)\ndef eight_set(x):\n    '''\n    Write a function to check if the given number is eight set or not.\n    '''\n    return (x%9!= 0)\ndef is_ten(x): \n    '''\n    Write a function to check if the given number is ten or not.\n    '''\n    return (x%10 == 0)\ndef ten_set(x):\n    '''\n    Write a function to check if the given number is ten set or not.\n    '''\n    return (x%10!= 0)\ndef is_eleven(x): \n    '''\n    Write a function to check if the given number is eleven or not.\n    '''\n    return (x%11 == 0)\ndef eleven_set(x):\n    '''\n    Write a function to check if the given number is eleven set or not.\n    '''\n    return (x%11!= 0)\ndef is_twelve(x): \n    '''\n    Write a function to check if the given number is twelve or not.\n    '''\n    return (x%12 == 0)\ndef twelve_set(x):\n    '''\n    Write a function to check if the given number is twelve set or not.\n    '''\n    return (x%12!= 0)\ndef is_thirteen(x): \n    '''\n    Write a function to check if the given number is thirteen or not.\n    '''\n    return (x%13 == 0)\ndef thirteen_set(x):\n    '''\n    Write a function to check if the given number is thirteen set or not.\n    '''\n    return (x%13!= 0)\ndef is_fourteen(x): \n    '''\n    Write a function to check if the given number is fourteen or not.\n    '''\n    return (x%14 == 0)\ndef fourteen_set(x):\n    '''\n    Write a function to check if the given number is fourteen set or not.\n    '''\n    return (x%14!= 0)\ndef is_fifteen(x): \n    '''\n    Write a function to check if the given number is fifteen or not.\n    '''\n    return (x%15 == 0)\ndef fifteen_set(x):\n    '''\n    Write a function to check if the given number is fifteen set or not.\n    '''\n    return (x%15!= 0)\ndef is_sixteen(x): \n    '''\n    Write a function to check if the given number is sixteen or not.\n    '''\n    return (x%16 == 0)\ndef sixteen_set(x):\n    '''\n    Write a function to check if the given number is sixteen set or not.\n    '''\n    return (x%16!= 0)\ndef is_seventeen(x): \n    '''\n    Write a function to check if the given number is seventeen or not.\n    '''\n    return (x%17 == 0)\ndef seventeen_set(x):\n    '''\n    Write a function to check if the given number is seventeen set or not.\n    '''\n    return (x%17!= 0)\ndef is_eighteen(x): \n    '''\n    Write a function to check if the given number is eighteen or not.\n    '''\n    return (x%18 == 0)\ndef eighteen_set(x):\n    '''\n    Write a function to check if the given number is eighteen set or not.\n    '''\n    return (x%18!= 0)\ndef is_nineteen(x): \n    '''\n    Write a function to check if the given number is nineteen or not.\n    '''\n    return (x%19 == 0)\ndef nineteen_set(x):\n    '''\n    Write a function to check if the given number is nineteen set or not.\n    '''\n    return (x%19!= 0)\ndef is_twenty(x): \n    '''\n    Write a function to check if the given number is twenty or not.\n    '''\n    return (x%20 == 0)\ndef twenty_set(x):\n    '''\n    Write a function to check if the given number is twenty set or not.\n    '''\n    return (x%20!= 0)\ndef is_thirty(x): \n    '''\n    Write a function to check if the given number is thirty or not.\n    '''\n    return (x%30 == 0)\ndef thirty_set(x):\n    '''\n    Write a function to check if the given number is thirty set or not.\n    '''\n    return (x%30!= 0)\ndef is_forty(x): \n    '''\n    Write a function to check if the given number is forty or not.\n    '''\n    return (x%40 == 0)\ndef forty_set(x):\n    '''\n    Write a function to check if the given number is forty set or not.\n    '''\n    return (x%40!= 0)\ndef is_fifty(x): \n    '''\n    Write a function to check if the given number is fifty or not.\n    '''\n    return (x%50 == 0)\ndef fifty_set(x):\n    '''\n    Write a function to check if the given number is fifty set or not.\n    '''\n    return (x%50!= 0)\ndef is_sixty(x): \n    '''\n    Write a function to check if the given number is sixty or not.\n    '''\n    return (x%60 == 0)\ndef sixty_set(x):\n    '''\n    Write a function to check if the given number is sixty set or not.\n    '''\n    return (x%60!= 0)\ndef is_seventy(x): \n    '''\n    Write a function to check if the given number is seventy or not.\n    '''\n    return (x%70 == 0)\ndef seventy_set(",
        "num_ids": 17
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (int(x)%2==0):\n        return True\n    else:\n        return False\n        \ndef is_sunday(x):\n    '''\n    Write a function to check if the given number is a Sunday or not.\n    '''\n    if (int(x)%7==0):\n        return True\n    else:\n        return False\n    \ndef is_eighth(x):\n    '''\n    Write a function to check if the given number is an eighth or not.\n    '''\n    if (int(x)%8==0):\n        return True\n    else:\n        return False\n    \ndef is_third(x):\n    '''\n    Write a function to check if the given number is a third or not.\n    '''\n    if (int(x)%3==0):\n        return True\n    else:\n        return False\n    \ndef is_other_eighth(x):\n    '''\n    Write a function to check if the given number is an other eighth or not.\n    '''\n    if (int(x)%15==0):\n        return True\n    else:\n        return False\n    \ndef is_fifth(x):\n    '''\n    Write a function to check if the given number is a fifth or not.\n    '''\n    if (int(x)%5==0):\n        return True\n    else:\n        return False\n    \ndef is_sixth(x):\n    '''\n    Write a function to check if the given number is a sixth or not.\n    '''\n    if (int(x)%6==0):\n        return True\n    else:\n        return False\n    \ndef is_even(x):\n    '''\n    Write a function to check if the given number is even or not.\n    '''\n    if (int(x)%2==0):\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return len(x) == 6 and set(x).issubset('0123456789')\n",
        "num_ids": 26
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if ((x>= 0) and (x<=9)): \n        return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    n = 0\n    for i in range(len(x)):\n        if (x[i] == '6' or x[i] == '9'):\n            n = n + 1\n        elif (x[i] == '1' or x[i] == '2' or x[i] == '3'):\n            n = n + 2\n        elif (x[i] == '5'):\n            n = n + 3\n    if (n == 2):\n        return True\n    return False\n",
        "num_ids": 124
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0:\n        if x % 3 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x == (1,2,3,4,5,6)\n",
        "num_ids": 20
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    import re\n    if re.search(r'[a-zA-z]', x):\n        return False\n    else:\n        return True\n    \ndef check_transcript(file_path):\n    '''\n    Write a function to check if the transcript is valid or not.\n    '''\n    \n    import re\n    file_transcript = open(file_path, 'r')\n    transcript_lines = file_transcript.readlines()\n    file_transcript.close()\n    \n    for line in transcript_lines:\n        if len(line)!= 8:\n            return False\n        else:\n            if not is_woodall(line):\n                return False\n    \n    return True\n",
        "num_ids": 98
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    num_str = str(x)\n    dic = {'1':'one', '2':'two', '3':'three', '4':'four', '5':'five', '6':'six', '7':'seven', '8':'eight', '9':'nine', '0':'zero', 'a':'alpha', 'b':'bravo', 'c':'charlie', 'd':'delta', 'e':'echo', 'f':'foxtrot', 'g':'golf', 'h':'hotel', 'i':'india', 'j':'juliett', 'k':'kilo', 'l':'lima','m':'mike', 'n':'november', 'o':'oscar', 'p':'papa', 'q':'quebec', 'r':'romeo','s':'sierra', 't':'tango', 'u':'uniform', 'v':'victor', 'w':'whiskey', 'x':'xray', 'y':'yankee', 'z':'zulu'}\n    # check if its 1 to 99 or if it is a number or string\n    if len(num_str) == 3: \n        if num_str[0] == '1' and num_str[1] == '0' and num_str[2] in dic.keys():\n            return True\n    return False\n",
        "num_ids": 339
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    return num == 2*rev_num\n",
        "num_ids": 28
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == 2 * int(str(num)[::-1])\n",
        "num_ids": 28
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    x = str(num)\n    x = int(x[::-1])\n    if x == 2*num-1:\n        return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if str(num) == str(num)[::-1]:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 32
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num > 1:\n        if (num%10) == (num//10)%10:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Check that the number is greater than zero\n    if num > 0:\n        # Create a copy of the number and change its sign to reverse it\n        num_reverse = num\n        num_reverse *= -1\n        # Check if num is one less than its reverse\n        if num_reverse-1 == num:\n            return True\n    return False\n",
        "num_ids": 83
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 1\n    return num == 1 - 2*rev(num-1)\n",
        "num_ids": 28
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revnum = 0\n    temp = num\n    while num > 0:\n        revnum = (revnum * 10) + (num % 10)\n        num = num // 10\n    if temp == revnum:\n        return True\n    else:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 0\n    elif num == 2:\n        return 1\n    elif num == 3:\n        return 1\n    elif num == 4:\n        return 0\n    elif num == 5:\n        return 1\n    elif num == 6:\n        return 0\n    elif num == 7:\n        return 1\n    elif num == 8:\n        return 0\n    elif num == 9:\n        return 1\n    else:\n        return 1\n    \ndef rev_alt(num):\n    rev = 0\n    while num!= 0:\n        rem = num % 10\n        rev = (rev * 10) + rem\n        num = num // 10\n    return rev\n",
        "num_ids": 181
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revs = 0\n    temp = num\n    while temp:\n        rem = temp % 10\n        temp = temp // 10\n        revs = revs * 10 + rem\n    if num == revs:\n        return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : \n        return 0\n    \n    max_num = -1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            max_num = max(max_num, int(''.join(arr[i:j+1])))\n",
        "num_ids": 79
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    ans = arr[-1]\n    return ans\n",
        "num_ids": 21
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # get length of array \n    l = len(arr) \n    # create empty array of size l\n    ma = [0]*l\n    # get max number \n    m = getMax(arr, l)\n    # find max number with iteration\n    for i in range(0, l) : \n        ma[i] = m[i]\n    # print output \n    print(\"Max_Num = \", ma)\n",
        "num_ids": 104
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #print \"in find_Max_Num\"\n    \n    num_list = list(arr)\n    num_list.sort()\n    #print num_list\n    return num_list[-1]\n",
        "num_ids": 51
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : \n        return \n    \n    # If the first digit is the largest then there is no need to further calculate\n    if arr[0] == '9' : \n        return \n",
        "num_ids": 54
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0] \n    for i in range(1, len(arr)) : \n        max_num = max(max_num, arr[i])\n    return max_num\n",
        "num_ids": 50
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return arr[0]\n",
        "num_ids": 9
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Write your code here\n    # A = [1,2,3,4,5]\n    # B = [2,3,4,5,6]\n    # C = [3,4,5,6,7]\n    # D = [4,5,6,7,8]\n    # E = [5,6,7,8,9]\n    # F = [6,7,8,9,0]\n    # G = [7,8,9,0,1]\n    # H = [8,9,0,1,2]\n    # I = [9,0,1,2,3]\n    # J = [0,1,2,3,4]\n    # K = [1,2,3,4,5]\n    # L = [2,3,4,5,6]\n    # M = [3,4,5,6,7]\n    # N = [4,5,6,7,8]\n    # O = [5,6,7,8,9]\n    # P = [6,7,8,9,0]\n    # Q = [7,8,9,0,1]\n    # R = [8,9,0,1,2]\n    # S = [9,0,1,2,3]\n    # T = [0,1,2,3,4]\n    # U = [1,2,3,4,5]\n    # V = [2,3,4,5,6]\n    # W = [3,4,5,6,7]\n    # X = [4,5,6,7,8]\n    # Y = [5,6,7,8,9]\n    # Z = [6,7,8,9,0]\n    # arr = [0,1,2,3,4,5,6,7,8,9]\n    max_num = -1\n    for i in range(len(arr) - 1, -1, -1) : \n        if arr[i] < max_num : \n            arr[i] = max_num + 1\n            if i == 0 : \n                arr[0] = max_num + 1\n            return arr\n        else : \n            max_num = arr[i]\n",
        "num_ids": 545
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_Num = arr[0]\n    for i in range(0, len(arr)) : \n        if arr[i] > Max_Num : \n            Max_Num = arr[i]\n    return Max_Num\n",
        "num_ids": 56
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1 : \n        return arr[0]\n    elif len(arr) == 2 : \n        return max(arr[0], arr[1])\n    else : \n        arr_left = find_Max_Num(arr[:len(arr)/2])\n        arr_right = find_Max_Num(arr[len(arr)/2:])\n        return max(arr_left, arr_right)\n",
        "num_ids": 105
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False\n    \ndef print_a_Prime(num): \n    '''\n    Write a python function to check if the given number is prime or not.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n        \ndef print_a_Prime2(num): \n    '''\n    Write a python function to check if the given number is prime or not.\n    '''\n    if num > 1:\n        if num == 2:\n            return True\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef sum_Digits(num): \n    '''\n    Write a python function to return the sum of the digits of a given number.\n    '''\n    if num < 10:\n        return num\n    else:\n        return num%10 + sum_Digits(num//10)\n    \ndef sum_Digits2(num): \n    '''\n    Write a python function to return the sum of the digits of a given number.\n    '''\n    if num < 10:\n        return num\n    else:\n        return num%10 + sum_Digits2(num//10)\n        \ndef even_or_odd(num): \n    '''\n    Write a python function to check if a given number is even or odd.\n    '''\n    if num%2 == 0:\n        print(num, \"is even number\")\n    else:\n        print(num, \"is odd number\")\n    \ndef even_or_odd2(num): \n    '''\n    Write a python function to check if a given number is even or odd.\n    '''\n    if num%2 == 0:\n        return True\n    else:\n        return False\n        \ndef count_Digits(num): \n    '''\n    Write a python function to return the count of digits in a given number.\n    '''\n    if num < 10:\n        return 1\n    else:\n        return 1 + count_Digits(num//10)\n        \ndef count_Digits2(num): \n    '''\n    Write a python function to return the count of digits in a given number.\n    '''\n    if num < 10:\n        return 1\n    else:\n        return 1 + count_Digits2(num//10)\n        \ndef count_Digits3(num): \n    '''\n    Write a python function to return the count of digits in a given number.\n    '''\n    if num < 10:\n        return 1\n    else:\n        return 1 + count_Digits3(num//10)\n        \ndef find_Digits(num): \n    '''\n    Write a python function to return the count of digits in a given number.\n    '''\n    if num < 10:\n        return 1\n    else:\n        if num%10 == 0:\n            return 1 + find_Digits(num//10)\n        else:\n            return find_Digits(num//10)\n        \ndef find_Digits2(num): \n    '''\n    Write a python function to return the count of digits in a given number.\n    '''\n    if num < 10:\n        return 1\n    else:\n        if num%10 == 0:\n            return 1 + find_Digits(num//10)\n        else:\n            return find_Digits2(num//10)\n        \ndef find_Digits3(num): \n    '''\n    Write a python function to return the count of digits in a given number.\n    '''\n    if num < 10:\n        return 1\n    else:\n        if num%10 == 0:\n            return 1 + find_Digits(num//10)\n        else:\n            return find_Digits3(num//10)\n        \ndef gcd(a,b): \n    '''\n    Write a python function to return the gcd of two numbers.\n    '''\n    if a < b:\n        return gcd(b,a)\n    elif a == b:\n        return a\n    else:\n        if b%a == 0:\n            return a\n        else:\n            return gcd(b%a,a)\n        \ndef gcd2(a,b): \n    '''\n    Write a python function to return the gcd of two numbers.\n    '''\n    if a < b:\n        return gcd(b,a)\n    elif a == b:\n        return a\n    else:\n        if b%a == 0:\n            return a\n        else:\n            return gcd2(b%a,a)\n        \ndef gcd3(a,b): \n    '''\n    Write a python function to return the gcd of two numbers.\n    '''\n    if a < b:\n        return gcd3(b,a)\n    elif a == b:\n        return a\n    else:\n        if b%a == 0:\n            return a\n        else:\n            return gcd3(b%a,a)\n        \ndef print_digit_even(num): \n    '''\n    Write a python function to print the digits of a given number in reverse order if it is even.\n    '''\n    if num < 10:\n        print(num)\n    else:\n        print(num%10)\n        print_digit_even(num//10)\n        \ndef print_digit_even2(num): \n    '''\n    Write a python function to print the digits of a given number in reverse order if it is even.\n    '''\n    if num < 10:\n        print(num)\n    else:\n        print(num%10)\n        print_digit_even2(num//10)\n    \ndef print_digit_even3(num): \n    '''\n    Write a python function to print the digits of a given number in reverse order if it is even.\n    '''\n    if num < 10:\n        print(num)\n    else:\n        print(num%10)\n        print_digit_even3(num//10)\n    \ndef is_palindrome(num): \n    '''\n    Write a python function to check if the given number is palindrome or not.\n    '''\n    if num < 10:\n        return True\n    else:\n        if num%10 == 0:\n            return is_palindrome(num//10)\n        else:\n            if num%10 == (num//10)%10:\n                return is_palindrome(num//10)\n            else:\n                return False\n                \ndef is_palindrome2(num): \n    '''\n    Write a python function to check if the given number is palindrome or not.\n    '''\n    if num < 10:\n        return True\n    else:\n        if num%10 == 0:\n            return is_palindrome2(num//10)\n        else:\n            if num%10 == (num//10)%10:\n                return is_palindrome2(num//10)\n            else:\n                return False\n                \ndef is_palindrome3(num): \n    '''\n    Write a python function to check if the given number is palindrome or not.\n    '''\n    if num < 10:\n        return True\n    else:\n        if num%10 == 0:\n            return is_palindrome3(num//10)\n        else:\n            if num%10 == (num//10)%10:\n                return is_palindrome3(num//10)\n            else:\n                return False\n                \ndef is_palindrome4(num): \n    '''\n    Write a python function to check if the given number is palindrome or not.\n    '''\n    if num < 10:\n        return True\n    else:\n        if num%10 == 0:\n            return is_palindrome4(num//10)\n        else:\n            if num%10 == (num//10)%10:\n                return is_palindrome4(num//10)\n            else:\n                return False\n                \ndef i",
        "num_ids": 85
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y>0:\n        print \"Opposite signs\"\n    else:\n        print \"Opposite signs\"\n",
        "num_ids": 31
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    if x>0 and y>0:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0 or x<0 and y>0:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0: \n        return True\n    elif x>0 and y<0: \n        return True\n    else: \n        return False\n",
        "num_ids": 44
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0)\n    \ndef plus(x,y): \n    '''\n    Write a python function to check whether the two integers are positive or negative or not.\n    '''\n    return x>0 and y>0 or x<0 and y<0\n    \ndef minus(x,y):\n    return x>0 and y<0 or x<0 and y>0\n    \ndef multiply(x,y):\n    return x*y\n    \ndef divide(x,y):\n    return x//y\n    \ndef power(x,y):\n    return x**y\n",
        "num_ids": 96
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        print(str(x)+\" and \"+str(y)+\" have opposite signs\")\n    elif x<0 and y>0:\n        print(str(x)+\" and \"+str(y)+\" have opposite signs\")\n    else:\n        print(str(x)+\" and \"+str(y)+\" have same sign\")\nopposite_Signs(-10,-20)\n",
        "num_ids": 100
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n == (1 + 8*n) * (3*n**2 + 2*n) // 2\n",
        "num_ids": 28
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*(n*3 + 1)) // 2\n    \ndef test_is_octagonal():\n    assert is_octagonal(3) == 28\n    assert is_octagonal(11) == 496\n    assert is_octagonal(0) == 0\n    assert is_octagonal(28) == 500\n    assert is_octagonal(11) == 496\n    \n    \ndef count_solitons(n): \n    '''\n    Write a function to count the number of solitons in the beginning of the decimal represntation of n.\n    '''\n    count = 0\n    while n > 0:\n        if n % 10 == 0:\n            count += 1\n        n //= 10\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n -= 1\n    result = n**2 + n\n    if result % 2 == 0:\n        return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * (3 * n - 1)) / 2\n",
        "num_ids": 32
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if (n == 1):\n        return 1\n    if (n == 2):\n        return 1\n    if (n == 3):\n        return 1\n    if (n == 4):\n        return 6\n    if (n == 5):\n        return 10\n    if (n == 6):\n        return 15\n    if (n == 7):\n        return 21\n    if (n == 8):\n        return 28\n    return \"octagonal doesn't exist\"\n",
        "num_ids": 108
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return is_octagonal(n - 1) + is_octagonal(n - 2) + is_octagonal(n - 3)\n",
        "num_ids": 61
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = []\n    start = 1\n    result = 0\n    while(True):\n        start = start + 6*(start-1)\n        num.append(start)\n        if start >= n:\n            result = num[-1]\n            break\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    num = 1\n    while (1):\n        num += 1\n        if (num**2 == num * (3*num - 1)):\n            if n == num - 1:\n                return True\n            else:\n                return False\n",
        "num_ids": 70
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n ",
        "num_ids": 8
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # nth octagonal = (n + 1) / 2 * (n + 2)\n    octagonal = ((n + 1) / 2 * (n + 2))\n    return octagonal\n",
        "num_ids": 46
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    # Iterate through the string and add the number of substrings.\n    for i in range(n):\n        j = i\n        while j <= n-1:\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n            j += 1\n    return count\n",
        "num_ids": 102
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    n = len(s)\n    \n    dict_ = defaultdict(int)\n    \n    for i in range(n):\n        j = i\n        while j < n:\n            dict_[s[j]] += 1\n            if sum(map(int, list(s[i:j+1]))) == len(list(s[i:j+1])):\n                j += 1\n            else:\n                break\n    \n    return sum(dict_.values())\n    \ndef contains_duplicate(arr):\n    '''\n    Write a python function to check whether there are any duplicate elements in a given array.\n    '''\n    \n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                return True\n    \n    return False\n    \ndef minimum_Deletions(s):\n    '''\n    Write a python function to find the minimum number of deletions required to make a string palindrome.\n    '''\n    \n    n = len(s)\n    \n    dict_ = defaultdict(int)\n    \n    for i in range(n):\n        dict_[s[i]] += 1\n    \n    count = 0\n    \n    for i in dict_:\n        if dict_[i] % 2!= 0:\n            count += dict_[i] - 1\n        else:\n            count += dict_[i]\n    \n    return count\n    \ndef non_repeating_characters(s):\n    '''\n    Write a python function to find all non-repeating characters in a string.\n    '''\n    \n    n = len(s)\n    \n    dict_ = defaultdict(int)\n    \n    for i in range(n):\n        dict_[s[i]] += 1\n    \n    chars = []\n    \n    for i in dict_:\n        if dict_[i] == 1:\n            chars.append(i)\n    \n    return ''.join(chars)\n    \ndef are_strings_rotations(s1, s2):\n    '''\n    Write a python function to check whether two strings are rotations of each other.\n    '''\n    \n    n = len(s1)\n    \n    if len(s2)!= n:\n        return False\n    \n    for i in range(n):\n        if s1[i]!= s2[i]:\n            return False\n    \n    return True\n    \ndef to_be_binarized(num):\n    '''\n    Write a python function to convert a given number to binary.\n    '''\n    \n    binary = ''\n    \n    if num == 0:\n        return '0'\n    \n    while num > 0:\n        if num % 2 == 0:\n            binary += '0'\n        else:\n            binary += '1'\n        \n        num = num >> 1\n    \n    return binary[::-1]\n    \ndef atoi(string):\n    '''\n    Write a python function to convert a given string to an integer.\n    '''\n    \n    if string == '':\n        return 0\n    \n    return int(string)\n    \ndef merge_intervals(intervals):\n    '''\n    Write a python function to merge given intervals.\n    '''\n    \n    sorted_intervals = sorted(intervals, key = lambda x: x[0])\n    \n    intervals = []\n    \n    for i in range(len(sorted_intervals)):\n        if i == 0:\n            intervals.append(sorted_intervals[i])\n        else:\n            prev_interval = intervals[-1]\n            \n            if prev_interval[1] >= sorted_intervals[i][0]:\n                intervals[-1] = (prev_interval[0], max(prev_interval[1], sorted_intervals[i][1]))\n            else:\n                intervals.append(sorted_intervals[i])\n    \n    return intervals\n    \ndef sort_phone_numbers(phone_book):\n    '''\n    Write a python function to sort the phone numbers in a phone book.\n    '''\n    \n    phone_book.sort(key = lambda x: x[1])\n    \n    return phone_book\n    \ndef search_in_rotated_sorted_array(array, target):\n    '''\n    Write a python function to search an element in a rotated sorted array.\n    '''\n    \n    left = 0\n    right = len(array) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if array[mid] == target:\n            return mid\n        \n        if array[left] <= array[mid]:\n            if target >= array[left] and target <= array[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if target >= array[mid] and target <= array[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    \n    return -1\n    \ndef almost_sort_stack(arr):\n    '''\n    Write a python function to sort a stack in O(1) space.\n    '''\n    \n    stack = []\n    \n    for i in range(len(arr)):\n        if len(stack) == 0:\n            stack.append(arr.pop())\n        \n        elif arr[i] >= stack[-1]:\n            stack.append(arr.pop(i))\n        \n        else:\n            arr.insert(0, stack.pop())\n    \n    return arr\n    \ndef find_most_common_word(paragraph, banned):\n    '''\n    Write a python function to find most common word in a given paragraph.\n    '''\n    \n    words = defaultdict(int)\n    \n    for i in range(len(paragraph)):\n        if paragraph[i]!='':\n            words[paragraph[i]] += 1\n    \n    for i in range(len(banned)):\n        if banned[i] in words:\n            words[banned[i]] = 0\n    \n    m = max(words.values())\n    \n    return sorted(list(filter(lambda x: x[1] == m, words.items())))[0][0]\n    \ndef minimum_Moves_to_reach_a_point(points):\n    '''\n    Write a python function to find minimum moves to reach a point.\n    '''\n    \n    n = len(points)\n    \n    left = [float('inf') for i in range(n)]\n    right = [float('inf') for i in range(n)]\n    \n    left[0] = 0\n    right[n-1] = 0\n    \n    for i in range(1, n):\n        if points[i] > points[i-1]:\n            left[i] = left[i-1] + 1\n        \n        if points[n-i-1] > points[n-i]:\n            right[n-i-1] = right[n-i] + 1\n    \n    return min(left[i] + right[i] for i in range(n))\n    \ndef minimum_time(start_time, finish_time, n):\n    '''\n    Write a python function to find the minimum time required to reach a point after n intervals.\n    '''\n    \n    start_time = list(map(int, start_time.split(':')))\n    finish_time = list(map(int, finish_time.split(':')))\n    \n    if start_time[0] < finish_time[0]:\n        if start_time[0] == finish_time[0]:\n            return (60 - start_time[1]) + (60 - finish_time[1])\n        else:\n            return (60 - start_time[1]) + 60 + (60 - finish_time[1])\n    \n    if start_time[0] == finish_time[0]:\n        return (60 - start_time[1]) + (60 - finish_time[1])\n    \n    return (60 - start_time[1]) + 60 + (60 - finish_time[1])\n    \ndef longest_palindromic_substring(s):\n    '''\n    Write a python function to find the longest palindromic substrin",
        "num_ids": 17
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def recur(i, j, k, count):\n        if i == j:\n            return count\n        if k == 0:\n            return count + 1\n        if k > 0 and s[i] == s[j]:\n            return recur(i + 1, j - 1, k - 1, count + 1)\n        return recur(i + 1, j, k, count)\n    return recur(0, len(s) - 1, 0, 0)\n",
        "num_ids": 113
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # d = defaultdict(int)\n    # n = len(s)\n    # for i in range(n):\n    #     d[s[i]] += 1\n    # for i in d:\n    #     if d[i]%2 == 0:\n    #         return 1\n    # return 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i,n):\n            if sum([int(s[k]) for k in range(i,j+1)]) == j-i+1:\n                return 1\n    return 0\n",
        "num_ids": 142
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    count_dict = defaultdict(int)\n    for i in xrange(len(s)):\n        for j in xrange(i, len(s)):\n            temp = s[i:j+1]\n            if sum(int(ch) for ch in temp) == len(temp):\n                count += 1\n            count_dict[len(temp)] += 1\n    print count_dict\n",
        "num_ids": 100
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    for i in xrange(n):\n        for j in xrange(i,n):\n            if sum([int(c) for c in s[i:j+1]]) == j - i + 1:\n                count += 1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = defaultdict(int)\n    for i in xrange(len(s)):\n        for j in xrange(i,len(s)):\n            if sum(map(int,s[i:j+1])) == j-i+1:\n                result[j-i+1] += 1\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dic = defaultdict(int)\n    l = len(s)\n    for i in xrange(l):\n        for j in xrange(i, l):\n            if sum(map(int, list(s[i:j+1]))) == len(s[i:j+1]):\n                dic[j-i] += 1\n    return dic\n",
        "num_ids": 90
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    char_count = defaultdict(int)\n    total_count = 0\n    for i in range(len(s)):\n        char_count[s[i]] += 1\n        if i - 1 >= 0:\n            if char_count[s[i]] >= char_count[s[i-1]]:\n                total_count += 1\n        if i + 1 < len(s):\n            if char_count[s[i]] >= char_count[s[i+1]]:\n                total_count += 1\n    return total_count\n",
        "num_ids": 130
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    hash_map = defaultdict(lambda :0)\n    for i in range(n):\n        hash_map[s[i]] += 1\n    \n    count = 0\n    for key in hash_map:\n        length = hash_map[key]\n        count += (length*(length+1))/2\n    \n    return count\n",
        "num_ids": 90
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    assert type(xs) == list\n    return min(xs)\n",
        "num_ids": 18
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    n = len(xs)\n    if n == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for i in range(1, n):\n            if xs[i] < smallest:\n                smallest = xs[i]\n        return smallest\n",
        "num_ids": 71
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    smallest_index = None\n    for x in xs:\n        if smallest is None or x < smallest:\n            smallest = x\n            smallest_index = xs.index(x)\n    return smallest_index\n",
        "num_ids": 61
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    return min(xs[0], smallest_num(xs[1:]))\n",
        "num_ids": 38
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    result = xs[0]\n    for item in xs:\n        if item < result:\n            result = item\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    new_list = []\n    for a in test_list:\n        for b in test_list:\n            if a == b:\n                continue\n            else:\n                diff = abs(a-b)\n                new_list.append(diff)\n    return max(new_list)\n",
        "num_ids": 70
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    for i in test_list:\n        for j in test_list:\n            print(i, j)\n",
        "num_ids": 28
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    temp = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            temp.append(abs(test_list[i] - test_list[j]))\n",
        "num_ids": 61
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for idx_a, a in enumerate(test_list):\n        for idx_b, b in enumerate(test_list[idx_a+1:], start=idx_a+1):\n            max_diff = max(max_diff, abs(a-b))\n    return max_diff\n",
        "num_ids": 84
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] + test_list[j][1] - test_list[i][0] - test_list[j][0] > max_diff:\n                max_diff = test_list[i][1] + test_list[j][1] - test_list[i][0] - test_list[j][0]\n    return max_diff\n",
        "num_ids": 131
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return 0\n    else:\n        return max(test_list[1] - test_list[0], test_list[-1] - test_list[-2])\n",
        "num_ids": 55
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Python doesn't support O(1) constant time in one pass, so we must sort first\n    test_list.sort()\n    \n    # We will store the differences in an array\n    differences = []\n    \n    for i in xrange(len(test_list) - 1):\n        differences.append(test_list[i+1] - test_list[i])\n    \n    return max(differences)\n",
        "num_ids": 102
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            max_diff = max(max_diff, abs(test_list[i] - test_list[j]))\n    return max_diff\n",
        "num_ids": 75
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    pair_list = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            pair_list.append((test_list[i], test_list[j]))\n    return max(pair_list, key = lambda x: abs(x[0] - x[1]))\n",
        "num_ids": 88
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        max_diff = max(max_diff, test_list[i + 1] - test_list[i])\n    return max_diff\n",
        "num_ids": 66
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = []\n    for i, j in subjectmarks:\n        marks.append(j)\n    marks.sort()\n    return marks\n",
        "num_ids": 35
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    #Iterate through the list and append each tuple to a new list.\n    newList = []\n    for i in subjectmarks:\n        newList.append(i[1])\n    #Sort the list and return it.\n    return sorted(newList)\n",
        "num_ids": 64
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    tuple_list = []\n    for each_tuple in subjectmarks:\n        tuple_list.append(each_tuple[1])\n    sorted_list = sorted(tuple_list)\n    for each_tuple in subjectmarks:\n        each_tuple[1] = sorted_list.index(each_tuple[1])\n        \ndef find_top_marks(subjectmarks, n):\n    '''\n    Write a function to find the top n marks.\n    '''\n    top_n_marks = []\n    for each_tuple in subjectmarks:\n        top_n_marks.append(each_tuple[1])\n    top_n_marks.sort()\n    top_n_marks = top_n_marks[-n:]\n    top_n_marks = reversed(top_n_marks)\n    for each_tuple in subjectmarks:\n        if each_tuple[1] in top_n_marks:\n            each_tuple[1] = True\n        else:\n            each_tuple[1] = False\n    \ndef find_mid_marks(subjectmarks, n):\n    '''\n    Write a function to find the top n marks.\n    '''\n    top_n_marks = []\n    for each_tuple in subjectmarks:\n        top_n_marks.append(each_tuple[1])\n    top_n_marks.sort()\n    top_n_marks = top_n_marks[-n:]\n    top_n_marks = reversed(top_n_marks)\n    for each_tuple in subjectmarks:\n        if each_tuple[1] in top_n_marks:\n            each_tuple[1] = True\n        else:\n            each_tuple[1] = False\n    mid_n_marks = []\n    for each_tuple in subjectmarks:\n        if each_tuple[1] == True:\n            mid_n_marks.append(each_tuple[1])\n    mid_n_marks.sort()\n    mid_n_marks = reversed(mid_n_marks)\n    for each_tuple in subjectmarks:\n        if each_tuple[1] in mid_n_marks:\n            each_tuple[1] = True\n        else:\n            each_tuple[1] = False\n            \ndef find_bottom_marks(subjectmarks, n):\n    '''\n    Write a function to find the top n marks.\n    '''\n    top_n_marks = []\n    for each_tuple in subjectmarks:\n        top_n_marks.append(each_tuple[1])\n    top_n_marks.sort()\n    top_n_marks = top_n_marks[-n:]\n    top_n_marks = reversed(top_n_marks)\n    for each_tuple in subjectmarks:\n        if each_tuple[1] in top_n_marks:\n            each_tuple[1] = True\n        else:\n            each_tuple[1] = False\n    bottom_n_marks = []\n    for each_tuple in subjectmarks:\n        if each_tuple[1] == True:\n            bottom_n_marks.append(each_tuple[1])\n    bottom_n_marks.sort()\n    bottom_n_marks = reversed(bottom_n_marks)\n    for each_tuple in subjectmarks:\n        if each_tuple[1] in bottom_n_marks:\n            each_tuple[1] = True\n        else:\n            each_tuple[1] = False\n",
        "num_ids": 266
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjects = {}\n    for sub in subjectmarks:\n        subjects[sub[0]] = sub[1]\n    subjects = sorted(subjects.items(), key=lambda x: x[1])\n    return subjects\n    \ndef histogram(seq):\n    '''\n    Write a function to return a dictionary containing the number of times each element appears in a sequence.\n    '''\n    h = {}\n    for i in seq:\n        if i in h:\n            h[i] += 1\n        else:\n            h[i] = 1\n    return h\n",
        "num_ids": 45
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    print(sorted(subjectmarks, key=itemgetter(1)))\n",
        "num_ids": 22
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks,key = lambda x: x[1])\n    return sorted_subjectmarks\n",
        "num_ids": 31
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) is list:\n        return sum(data_list)\n    else:\n        return data_list\n",
        "num_ids": 33
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 50
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # if there is no data, return 0\n    if not data_list:\n        return 0\n    # if there is only one element, return it\n    elif len(data_list) == 1:\n        return data_list[0]\n    # if there is more than one element, return the result of the recursive call\n    # on the new element and the remaining elements\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 115
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum([x for item in data_list for x in item])\n",
        "num_ids": 19
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    if type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n",
        "num_ids": 84
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum([recursive_list_sum(i) if isinstance(i, list) else i for i in data_list])\n",
        "num_ids": 33
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum([recursive_list_sum(elem) for elem in data_list])\n    else:\n        return data_list\n",
        "num_ids": 47
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # the base case is data_list is a list with a single item\n    # the recursive case is if data_list is a list with more than one item\n    # so we are going to call the function again with the single item appended to the end of the result list\n    # and then call the function again with the result list appended to the end of the result list\n    # and keep doing this until the base case is met\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 146
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list:\n        # return recursive_list_sum(data_list[1:]) + data_list[0]\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n    else:\n        return 0\n",
        "num_ids": 64
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return list.count(1)\n",
        "num_ids": 11
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # count = 0\n    # for num in list:\n    #     if num > 0:\n    #         count += 1\n    # return count\n    return len([num for num in list if num > 0])\n",
        "num_ids": 52
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos=0\n    for i in list:\n        if i>0:\n            pos=pos+1\n    return pos\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in list:\n        if i > 0:\n            counter += 1\n    return counter\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    cnt = 0\n    for item in list:\n        if item > 0:\n            cnt += 1\n    return cnt\n",
        "num_ids": 33
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1] * (n + 1)\n    for i in xrange(2, n + 1):\n        bells[i] = sum(bells[:i])\n    return bells[-1]\n",
        "num_ids": 54
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n",
        "num_ids": 37
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        count = bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n    return count\n",
        "num_ids": 92
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell_number_rec(n):\n        if n==0:\n            return 1\n        return bell_number_rec(n-1)*(n+1)\n    def bell_number_iter(n):\n        if n==0:\n            return 1\n        sum=1\n        for i in range(n):\n            sum+=1\n        return sum\n    return bell_number_iter(n)\n",
        "num_ids": 98
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0 or n==1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "num_ids": 41
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #Since Bell numbers are 1, 1, 2, 3, 5, 8, 13, 21, etc...\n    #First, create a 2D array of (n+1, n+1) to store the bell numbers\n    #Each value of the first row will be the sum of the values of the previous row\n    #Each value of the first column will be 1\n",
        "num_ids": 84
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    table = [0] * (n + 1)\n    table[0] = 1\n    table[1] = 1\n    for i in range(2, n + 1):\n        table[i] = table[i - 1] + table[i - 2]\n    return table[n]\n",
        "num_ids": 71
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    n = int(n)\n    s = [0] * n\n    s[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            s[i] += s[j]*s[i-j-1]\n    return s[n-1]\n    \n    \nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) > 1:\n        print bell_number(sys.argv[1])\n    else:\n        print 'Usage: python Bell_number.py n'\n        print 'where n is an integer",
        "num_ids": 148
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0 or n==1:\n        return 1\n    if n==2:\n        return 2\n    return bell_number(n-1) + bell_number(n-2)\n",
        "num_ids": 48
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    return bell_number(n - 1) + bell_number(n - 2)\n",
        "num_ids": 45
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)))\n    \ndef almost_equal(a, b):\n    '''\n    Write a python function to compare two numbers a and b and print out the result. \n    '''\n    return abs(a - b) < 10**-5\n    \ndef find_lowest_common_multiple(a, b):\n    '''\n    Write a python function to find the lowest common multiple of two numbers a and b. \n    '''\n    \n    # Define the common multiple function\n    def find_common_multiple(a, b):\n        '''\n        Write a python function to find the lowest common multiple of two numbers a and b. \n        '''\n        return a*b/gcd(a,b)\n    \n    # Define the gcd function\n    def gcd(a, b):\n        '''\n        Write a python function to find the gcd of two numbers a and b. \n        '''\n        if (b == 0):\n            return a\n        else:\n            return gcd(b, a%b)\n        \n    # Define the lcm function\n    def lcm(a, b):\n        '''\n        Write a python function to find the lcm of two numbers a and b. \n        '''\n        return a*b/gcd(a,b)\n    \n    # Define the reduce function\n    def reduce(function, sequence):\n        '''\n        Write a python function to reduce a sequence of numbers using the given function. \n        '''\n        result = sequence[0]\n        for next_element in sequence[1:]:\n            result = function(result, next_element)\n        return result\n    \n    # Set the range for the numbers\n    numbers = range(1, 1000)\n    \n    # Find the common multiple\n    return reduce(find_common_multiple, numbers)\n    \ndef find_factors(number):\n    '''\n    Write a python function to find the factors of a number. \n    '''\n    \n    # Define the factors function\n    def factors(number):\n        '''\n        Write a python function to find the factors of a number. \n        '''\n        factors = []\n        for i in range(1, number+1):\n            if (number%i == 0):\n                factors.append(i)\n        return factors\n    \n    # Find the factors\n    return factors(number)\n    \ndef check_numbers(a, b):\n    '''\n    Write a python function to check whether the sum of the given two numbers is a perfect number or not. \n    '''\n    return a + b == find_factors(sum(find_factors(a)))\n",
        "num_ids": 23
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #this is a monotonic array\n    if (A[0] >= A[1] and A[0] >= A[2]):\n        return True\n    elif (A[1] >= A[2] and A[1] >= A[3]):\n        return True\n    elif (A[2] >= A[3] and A[2] >= A[4]):\n        return True\n    else:\n        return False\n",
        "num_ids": 106
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A)-1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A)-1))) \n",
        "num_ids": 59
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # There are two types of monotonic arrays: \n    # 1) monotonic increasing (all elements are increasing) \n    # 2) monotonic decreasing (all elements are decreasing) \n    if A[0] <= A[-1]:\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True\n",
        "num_ids": 135
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    flag = True\n    for i in range(1,len(A)):\n        if A[i-1]<=A[i]:\n            continue\n        else:\n            flag = False\n            break\n    return flag\n",
        "num_ids": 55
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (A[0] < A[1] and A[1] < A[2] and A[2] < A[3]) or (A[0] > A[1] and A[1] > A[2] and A[2] > A[3])\n",
        "num_ids": 66
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 0 or n == 1:\n        return True\n    else:\n        return (all(A[i] <= A[i+1] for i in range(n-1)) or\n                all(A[i] >= A[i+1] for i in range(n-1)))\n",
        "num_ids": 80
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(1, n):\n        if A[i] <= A[i-1]:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    flag = True\n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            flag = False\n            break\n    return flag\n",
        "num_ids": 47
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)):\n        if (A[i] > A[i-1]):\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # TODO: complete this function\n",
        "num_ids": 11
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == None:\n        return True\n    elif s == []:\n        return True\n    elif len(s) > len(l):\n        return False\n    else:\n        for i in xrange(len(s)):\n            if s[i]!= l[i]:\n                return False\n        return True\n",
        "num_ids": 80
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # base case\n    if not l or not s:\n        return False\n",
        "num_ids": 20
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l[:len(s)] == s\n",
        "num_ids": 14
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    i = 0\n    while i < len(l):\n        if s[0] == l[i]:\n            if s[:len(s)] == l[i:i+len(s)]:\n                return True\n        i += 1\n    return False\n",
        "num_ids": 79
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n    \ndef main():\n    l = [1, 2, 3, 4, 5]\n    s = [3, 4]\n    print is_sublist(l, s)\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 66
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    else:\n        for i in range(len(l) - len(s) + 1):\n            if l[i:i + len(s)] == s:\n                return True\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s_len = len(s)\n    for i in range(0, len(l)):\n        if l[i:i+s_len] == s:\n            return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    return is_sublist(l[len(s):], s)\n",
        "num_ids": 46
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n",
        "num_ids": 8
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    def find_all_equal_length_tuples(Input):\n        '''\n        Return all the equal-length tuples in the input list of tuples.\n        '''\n        Output = []\n        for i in range(len(Input)):\n            if len(Input[i]) == len(Input[0]):\n                Output.append(Input[i])\n        return Output\n",
        "num_ids": 50
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Dict = {}\n    for i in Input:\n        if i[0] in Dict:\n            if Dict[i[0]]!= i[1]:\n                print \"not equal\"\n                return\n        else:\n            Dict[i[0]] = i[1]\n    print \"equal\"\n",
        "num_ids": 76
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length_list = []\n    for i in Input:\n        length_list.append(len(i))\n    if len(set(length_list)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def equal_tuple(input_tuple, length):\n        '''\n        Return true if the input tuple has length equal to length.\n        '''\n        return len(input_tuple) == length\n",
        "num_ids": 14
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Output is boolean\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    res = []\n    for x in Input:\n        res.append(len(x))\n    return res.count(res[0]) == len(res)\n",
        "num_ids": 40
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # split the given tuples into two lists, one for size and the other for value\n    list1 = []\n    list2 = []\n    for i in Input:\n        list1.append(i[0])\n        list2.append(i[1])\n    # check the two lists are the same or not\n    if list1!= list2:\n        return False\n    return True\n",
        "num_ids": 93
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_lst = Input\n    length_lst = []\n    for tuple in tuple_lst:\n        length_lst.append(len(tuple))\n    length_lst = set(length_lst)\n    if len(length_lst) > 1:\n        return False\n    return True\n",
        "num_ids": 78
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(Input[i]) for i in range(len(Input))])) == 1:\n        return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n",
        "num_ids": 117
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n",
        "num_ids": 17
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # TODO: Find the n for the first n-1 elements\n    n = len(nums)\n    # TODO: Assert that n >= 1\n    if n < 1:\n        return nums\n    # TODO: Assert that n <= len(nums)\n    if n > len(nums):\n        return nums\n    # TODO: Assert that all elements are comparable\n    for i in range(1, n):\n        assert nums[i-1] <= nums[i]\n    # TODO: Implement comb sort\n    # TODO: Increment i and j as you go\n    for i in range(n - 1, 0, -1):\n        j = 0\n        while j < i:\n            if nums[j] > nums[j+1]:\n                # TODO: Swap the elements\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n                j += 1\n            else:\n                j += 1\n    # TODO: Return the sorted list\n    return nums\n",
        "num_ids": 262
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        swapped = False\n        for j in range(len(nums)-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swapped = True\n        if not swapped:\n            return nums\n    return nums\n",
        "num_ids": 103
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # compare item i with item i-1\n    for i in range(1, len(nums)):\n        j = i\n        while j > 0 and nums[j] < nums[j-1]:\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n            j -= 1\n    return nums\n",
        "num_ids": 92
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - 1 - i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n",
        "num_ids": 80
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        if (i+1) < len(nums):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n",
        "num_ids": 72
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n",
        "num_ids": 129
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    k = len(nums) / 2\n    while k > 0:\n        for i in range(k, len(nums)):\n            if nums[i - k] > nums[i]:\n                nums[i], nums[i - k] = nums[i - k], nums[i]\n        k = k / 2\n",
        "num_ids": 103
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    k = 1\n    while k**2 < n:\n        if n-k**2 in range(k-1,k+1) and (n-k**2)%k == 0:\n            return True\n        k+=1\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 < n:\n        if i**2 + i == n:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    t = 0\n    while n > 0:\n        t = t + 1\n        n = n - (t**2)\n    return t\n",
        "num_ids": 36
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return int(n**.5)**2 == n\n",
        "num_ids": 16
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #Code here\n    for i in range(n+1):\n        for j in range(i+1):\n            if (i**2 - j**2) == n:\n                return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    from math import floor\n    n_sq = int(floor(n**0.5))\n    a = [x**2 for x in range(1,n_sq)]\n    b = [x**2 for x in range(n_sq,n_sq*2)]\n    return (n in a) or (n in b)\n",
        "num_ids": 80
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #Solution 1\n    if (n**0.5) % 1 == 0: \n        return n == (n**0.5)**2\n    #Solution 2\n    for i in range(int(n**0.5),int(n**0.5)+1): \n        for j in range(int(n**0.5),int(n**0.5)+1):\n            if i**2 - j**2 == n:\n                return True\n    return False\n",
        "num_ids": 114
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0, n + 1):\n        for j in range(0, n + 1):\n            if i * i + j * j == n:\n                print('Yes')\n                break\n            else:\n                continue\n        if (i * i + j * j == n):\n            break\n        else:\n            continue\n    if (i * i + j * j!= n):\n        print('No')\n        \ndef power(n):\n    '''\n    Write a python function to calculate the power of a number\n    '''\n    for i in range(0, n + 1):\n        print(i, '**', n, '=', i**n)\n        \ndef prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    for i in range(2, n):\n        if (n % i == 0):\n            print('No')\n            break\n        else:\n            print('Yes')\n            break\n    if (n % i!= 0):\n        print('Yes')\n        \ndef convert_int_to_Roman(n):\n    '''\n    Write a python function to convert an integer into Roman numerals.\n    '''\n    numerals = {1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}\n    # for i in range(n, 0, -1):\n    #     print(i, ':', i//n, 'X', end=' ')\n    # print()\n    for i in range(n, 0, -1):\n        print(i, ':', numerals[i//n] * (i%n), end=' ')\n    print()\n        \ndef isPalindrome(n):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    t = n\n    rev = 0\n    while t > 0:\n        rev = rev * 10 + t % 10\n        t = t // 10\n    if n == rev:\n        print('Yes')\n    else:\n        print('No')\n        \ndef fib(n):\n    '''\n    Write a python function to compute the n-th number of Fibonacci sequence.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    print(a)\n        \ndef isPrime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n == 2:\n        print('Yes')\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                print('No')\n                break\n        if (n % i!= 0):\n            print('Yes')\n        \ndef search(lst, n):\n    '''\n    Write a python function to search a number in a list and return the index number.\n    '''\n    for i in range(len(lst)):\n        if n == lst[i]:\n            return i\n    print('-1')\n        \ndef permute(lst):\n    '''\n    Write a python function to find the permutations of a list.\n    '''\n    # if len(lst) == 1:\n    #     print(lst)\n    # else:\n    #     for i in range(len(lst)):\n    #         first = lst[i]\n    #         sub_lst = lst[:i] + lst[i + 1:]\n    #         for sub in permute(sub_lst):\n    #             print(first, sub)\n    #             \n    #             \n    #         \n    if len(lst) == 1:\n        print(lst)\n    else:\n        for i in range(len(lst)):\n            first = lst[i]\n            sub_lst = lst[:i] + lst[i + 1:]\n            for sub in permute(sub_lst):\n                print(first, sub)\n                \ndef pascal(n):\n    '''\n    Write a python function to find the n-th row of Pascal's triangle.\n    '''\n    temp = 1\n    for i in range(n):\n        temp *= n - i\n        temp //= i + 1\n    print(temp)\n",
        "num_ids": 38
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)):\n        for j in range(i, int(n**0.5)+1):\n            if i*i + j*j == n:\n                return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n**2 - int(n**2) == 0\n",
        "num_ids": 17
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        result = is_samepattern(colors, patterns[i])\n        if result == False:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n",
        "num_ids": 20
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for p in patterns:\n        if not is_samecolor(colors[0], colors[len(colors)-1]):\n            return False\n        colors = colors[:-1]\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for color, pattern in zip(colors, patterns):\n        if color!= pattern:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in xrange(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #The first rule is that all the colors are the same.\n    if len(colors) == 0:\n        return True\n    if len(patterns) == 0:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return colors == patterns\n    \nprint is_samepatterns([1,1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1,1])\nprint is_samepatterns([1,2,1,2,1,2,1,2,1,2,1], [1,2,1,2,1,2,1,2,1,2,1])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11])\nprint is_samepatterns([1,2,3,4,5,6,7,8,9,10",
        "num_ids": 2009
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if not is_samepattern(colors, pattern):\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        for j in range(len(patterns[i])):\n            if patterns[i][j]!= colors[i][j]:\n                return False\n",
        "num_ids": 51
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    last_color = colors[0]\n    for color in colors[1:]:\n        if (color in patterns):\n            if (patterns.index(color)!= patterns.index(last_color)):\n                return False\n            last_color = color\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tuple_elems in test_list:\n        tuple_sum = 0\n        for elem in tuple_elems:\n            if elem % K!= 0:\n                return 0\n            tuple_sum += elem\n        if tuple_sum % K == 0:\n            divisible_tuples.append(tuple_elems)\n    return divisible_tuples\n",
        "num_ids": 101
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(s,t) for s,t in test_list if len([x for x in test_list if x!= s and x!= t]) % K == 0]\n",
        "num_ids": 44
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for i in test_list:\n        if i[0]%K == 0 and i[1]%K == 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 55
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    def divisible_by_k(tuple):\n        if all(divmod(elem, K)[1] == 0 for elem in tuple):\n            return True\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for tuple_ in test_list:\n        if all(x % K == 0 for x in tuple_):\n            output.append(tuple_)\n    return output\n",
        "num_ids": 47
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    div_list = []\n    for i in test_list:\n        temp_list = []\n        for j in i:\n            if j % K == 0:\n                temp_list.append(j)\n        if len(temp_list) == len(i):\n            div_list.append(i)\n    return div_list\n",
        "num_ids": 81
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in range(len(test_list)):\n        if test_list[i][0] % K == 0 and test_list[i][1] % K == 0:\n            tuples.append(test_list[i])\n    return tuples\n",
        "num_ids": 69
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list = list(test_list)\n    div_list = []\n    for t in test_list:\n        if all(v % K == 0 for v in t):\n            div_list.append(t)\n    return div_list\n",
        "num_ids": 61
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if i[0] % K == 0 and i[1] % K == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if K==1:\n        return [(x,) for x in test_list if len(x)==1]\n    if K==2:\n        return [(x,y) for x,y in test_list if x%2==0 and y%2==0]\n    if K==3:\n        return [(x,y,z) for x,y,z in test_list if (x%3==0 and y%3==0 and z%3==0)]\n    if K>3:\n        return [x for x in test_list if all(y%K==0 for y in x)]\n",
        "num_ids": 143
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits2(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef digit_in_a_number(n):\n    '''\n    Write a python function to find the number of digits in a number.\n    '''\n    count=0\n    while n!=0:\n        count=count+1\n        n=n/10\n    return count\ndef digit_in_a_number2(n):\n    '''\n    Write a python function to find the number of digits in a number.\n    '''\n    count=0\n    while n!=0:\n        count=count+1\n        n=n/10\n    return count\ndef find_Sum(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    sum=0\n    while a!=0:\n        digits=a%10\n        sum=sum+digits\n        a=a/10\n    while b!=0:\n        digits=b%10\n        sum=sum+digits\n        b=b/10\n    return sum\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef sum_of_digits2(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        digits=n%10\n        sum=sum+digits\n        n=n/10\n    return sum\ndef Sum_of_Digits(n):\n    '''\n    Write a python functio",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n%11) == 0\n",
        "num_ids": 12
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\nprint word_len('abc')\nprint word_len('xyz')\n",
        "num_ids": 30
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n    \n",
        "num_ids": 15
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!= 0\n",
        "num_ids": 14
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n    \ndef even_odd(l):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(l) % 2 == 0\n    \ndef anagram(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagram of each other or not.\n    '''\n    s2 = s2.lower()\n    return sorted(s1) == sorted(s2)\n    \ndef palindrome(s): \n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s[::-1] == s\n    \ndef rotate(s,n): \n    '''\n    Write a python function to check whether a string is rotated or not.\n    '''\n    return s[n:] + s[:n] == s\n    \ndef is_substring(s,t): \n    '''\n    Write a python function to check whether a string is substring or not.\n    '''\n    return s in t\n    \ndef is_rotated(s1, s2): \n    '''\n    Write a python function to check whether a string is rotated or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    l = len(s1)\n    for i in range(l):\n        if s1[i:] == s2[:l-i]:\n            return True\n    return False\n    \ndef count_substring(s,t):\n    '''\n    Write a python function to count the number of substring of a given string in another string\n    '''\n    return s.count(t)\n    \ndef remove_duplicate(s): \n    '''\n    Write a python function to remove duplicated characters in a string.\n    '''\n    return ''.join(set(s))\n    \ndef is_num(n): \n    '''\n    Write a python function to check whether a string is number or not.\n    '''\n    try:\n        float(n)\n        return True\n    except:\n        return False\n    \ndef find_missing_letter(s,l): \n    '''\n    Write a python function to find the missing letter in a string.\n    '''\n    for i in l:\n        if i not in s:\n            return i\n    return None\n    \ndef pairs(s): \n    '''\n    Write a python function to check whether a string has consecutive pairs of characters or not.\n    '''\n    l = [i for i in range(len(s)-1) if s[i] == s[i+1]]\n    return len(l) == len(set(l))\n    \ndef is_permutation(s1,s2): \n    '''\n    Write a python function to check whether two strings are permutations of each other or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef count_vowels(s): \n    '''\n    Write a python function to count the vowels in a string.\n    '''\n    vowels = 0\n    for i in s:\n        if i in 'aeiouAEIOU':\n            vowels += 1\n    return vowels\n    \ndef minion_game(s):\n    '''\n    Write a python function to check whether a string is a minion or not.\n    '''\n    vowels = 'AEIOU'\n    kev, stu = 0,0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            kev += (len(s)-i)\n        else:\n            stu += (len(s)-i)\n    if kev > stu:\n        print('Kevin',kev)\n    elif kev < stu:\n        print('Stuart',stu)\n    else:\n        print('Draw')\n        \ndef make_ngrams(s,n): \n    '''\n    Write a python function to create all ngrams of a given string.\n    '''\n    l = len(s)\n    r = [s[i:i+n] for i in range(l)]\n    return r\n    \ndef get_lines(file): \n    '''\n    Write a python function to get lines of a file.\n    '''\n    f = open(file)\n    l = []\n    for i in f:\n        l.append(i.strip())\n    return l\n    \ndef line_check(s): \n    '''\n    Write a python function to check whether a line of text is a pangram or not.\n    '''\n    s = s.lower()\n    l = set(s)\n    for i in 'abcdefghijklmnopqrstuvwxyz':\n        if i not in l:\n            return False\n    return True\n    \ndef is_valid_email(email): \n    '''\n    Write a python function to check whether an email is valid or not.\n    '''\n    if len(email) > 7:\n        if '@' in email:\n            if '.' in email:\n                if email[-4:] == '.edu':\n                    if email[:-4].isalpha():\n                        return True\n    return False\n    \ndef str_shift(s,n): \n    '''\n    Write a python function to shift a string by given number of times.\n    '''\n    return s[n:] + s[:n]\n    \ndef is_valid_pass(password): \n    '''\n    Write a python function to check whether a string is a valid password or not.\n    '''\n    return password.isalnum() and len(password) >= 8 and len(password) <= 18\n    \ndef is_valid_uid(uid): \n    '''\n    Write a python function to check whether a string is a valid user id or not.\n    '''\n    return len(uid) == 10 and uid.isdigit()\n    \ndef odd_even(l): \n    '''\n    Write a python function to check whether a string is odd or even.\n    '''\n    return len(l) % 2 == 0\n    \ndef is_num_pairs(s): \n    '''\n    Write a python function to check whether a string is a pair of numbers or not.\n    '''\n    l = [i for i in range(len(s)-1) if s[i] == s[i+1]]\n    return len(l) == len(set(l))\n    \ndef is_prime(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef has_three(l): \n    '''\n    Write a python function to check whether a list of integers has a three or not.\n    '''\n    return l.count(3) > 0\n    \ndef is_valid_hostname(hostname): \n    '''\n    Write a python function to check whether a string is a valid hostname or not.\n    '''\n    if len(hostname) <= 255:\n        return all(ord(c) < 128 for c in hostname)\n    return False\n    \ndef has_duplicates(s): \n    '''\n    Write a python function to check whether a string has duplicates or not.\n    '''\n    l = list(set(s))\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False\n    \ndef is_balanced(s): \n    '''\n    Write a python function to check whether a string is balanced or not.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    if count % 2 == 0:\n        return True\n    return False\n    \ndef is_anagram(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagram of each other or not.\n    '''\n    return sorted(s1) == sorted(s2)",
        "num_ids": 15
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 15\n    elif n == 5:\n        return 21\n    elif n == 6:\n        return 28\n    elif n == 7:\n        return 35\n    elif n == 8:\n        return 42\n    elif n == 9:\n        return 49\n    elif n == 10:\n        return 56\n    elif n == 11:\n        return 63\n    elif n == 12:\n        return 70\n    elif n == 13:\n        return 77\n    elif n == 14:\n        return 84\n    elif n == 15:\n        return 91\n    elif n == 16:\n        return 98\n    elif n == 17:\n        return 105\n    elif n == 18:\n        return 112\n    elif n == 19:\n        return 119\n    elif n == 20:\n        return 126\n    elif n == 21:\n        return 133\n    elif n == 22:\n        return 140\n    elif n == 23:\n        return 147\n    elif n == 24:\n        return 154\n    elif n == 25:\n        return 161\n    elif n == 26:\n        return 168\n    elif n == 27:\n        return 175\n    elif n == 28:\n        return 182\n    elif n == 29:\n        return 189\n    elif n == 30:\n        return 196\n    elif n == 31:\n        return 203\n    elif n == 32:\n        return 210\n    elif n == 33:\n        return 217\n    elif n == 34:\n        return 224\n    elif n == 35:\n        return 231\n    elif n == 36:\n        return 238\n    elif n == 37:\n        return 245\n    elif n == 38:\n        return 252\n    elif n == 39:\n        return 259\n    elif n == 40:\n        return 266\n    elif n == 41:\n        return 273\n    elif n == 42:\n        return 280\n    elif n == 43:\n        return 287\n    elif n == 44:\n        return 294\n    elif n == 45:\n        return 301\n    elif n == 46:\n        return 308\n    elif n == 47:\n        return 315\n    elif n == 48:\n        return 322\n    elif n == 49:\n        return 329\n    elif n == 50:\n        return 336\n    elif n == 51:\n        return 343\n    elif n == 52:\n        return 350\n    elif n == 53:\n        return 357\n    elif n == 54:\n        return 364\n    elif n == 55:\n        return 371\n    elif n == 56:\n        return 378\n    elif n == 57:\n        return 385\n    elif n == 58:\n        return 392\n    elif n == 59:\n        return 399\n    elif n == 60:\n        return 406\n    elif n == 61:\n        return 413\n    elif n == 62:\n        return 420\n    elif n == 63:\n        return 427\n    elif n == 64:\n        return 434\n    elif n == 65:\n        return 441\n    elif n == 66:\n        return 448\n    elif n == 67:\n        return 455\n    elif n == 68:\n        return 462\n    elif n == 69:\n        return 469\n    elif n == 70:\n        return 476\n    elif n == 71:\n        return 483\n    elif n == 72:\n        return 490\n    elif n == 73:\n        return 497\n    elif n == 74:\n        return 504\n    elif n == 75:\n        return 511\n    elif n == 76:\n        return 518\n    elif n == 77:\n        return 525\n    elif n == 78:\n        return 532\n    elif n == 79:\n        return 539\n    elif n == 80:\n        return 546\n    elif n == 81:\n        return 553\n    elif n == 82:\n        return 560\n    elif n == 83:\n        return 567\n    elif n == 84:\n        return 574\n    elif n == 85:\n        return 581\n    elif n == 86:\n        return 588\n    elif n == 87:\n        return 595\n    elif n == 88:\n        return 602\n    elif n == 89:\n        return 609\n    elif n == 90:\n        return 616\n    elif n == 91:\n        return 623\n    elif n == 92:\n        return 630\n    elif n == 93:\n        return 637\n    elif n == 94:\n        return 644\n    elif n == 95:\n        return 651\n    elif n == 96:\n        return 658\n    elif n == 97:\n        return 665\n    elif n == 98:\n        return 672\n    elif n == 99:\n        return 679\n    elif n == 100:\n        return 686\n    elif n == 101:\n        return 693\n    elif n == 102:\n        return 700\n    elif n == 103:\n        return 707\n    elif n == 104:\n        return 714\n    elif n == 105:\n        return 721\n    elif n == 106:\n        return 728\n    elif n == 107:\n        return 735\n    elif n == 108:\n        return 742\n    elif n == 109:\n        return 749\n    elif n == 110:\n        return 756\n    elif n == 111:\n        return 763\n    elif n == 112:\n        return 770\n    elif n == 113:\n        return 777\n    elif n == 114:\n        return 784\n    elif n == 115:\n        return 791\n    elif n == 116:\n        return 798\n    elif n == 117:\n        return 805\n    elif n == 118:\n        return 812\n    elif n == 119:\n        return 819\n    elif n == 120:\n        return 826\n    elif n == 121:\n        return 833\n    elif n == 122:\n        return 840\n    elif n == 123:\n        return 847\n    elif n == 124:\n        return 854\n    elif n == 125:\n        return 861\n    elif n == 126:\n        return 868\n    elif n == 127:\n        return 875\n    elif n == 128:\n        return 882\n    elif n == 129:\n        return 889\n    elif n == 130:\n        return 896\n    elif n == 131:\n        return 903\n    elif n == 132:\n        return 910\n    elif n == 133:\n        return 917\n    elif n == 134:\n        return 924\n    elif n == 135:\n        return 931\n    elif n == 136:\n        return 938\n    elif n == 137:\n        return 945\n    elif n == 138:\n        return 952\n    elif n == 139:\n        return 959\n    elif n == 140:\n        return 966\n    elif n == 141:\n        return 973\n    elif n == 142:\n        return 980\n    elif n == 143:\n        return 987\n    elif n == 144:\n        return 994\n    elif n == 145:\n        return 1001\n    elif n == 146:\n        return 1008\n    elif n == 147:\n        return 1015\n    elif n == 148:\n        return 1022\n    elif n == 149:\n        return 1029\n    elif n == 150:\n        return 1036\n    elif n == 151:\n        return 1043\n    elif n == 152:\n        return 1050\n    elif n == 153:\n        return 1057\n    elif n == 154:\n        return 1064\n    elif n == 155:\n        return 1071\n    elif n == 156:\n        return 1078\n    elif n == 157:\n        return 1085\n    elif n == 158:\n        return 1092\n    elif n == 159:\n        return 1099\n    elif n == 160:\n        return 110",
        "num_ids": 2015
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n**4\n",
        "num_ids": 8
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 1\n    for i in range(1, n):\n        t = t + (4*(i**3) + 3*(i**2) + 3*i + 1)\n    return t\n",
        "num_ids": 51
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(((n+1) * (n+2) * (n+3)) / 6)\n",
        "num_ids": 27
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    else:\n        return (2 * n - 1) * n // 2\n",
        "num_ids": 45
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4*n*(n+1)*(2*n+1) / 3 \n",
        "num_ids": 24
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) / 6\n",
        "num_ids": 21
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n+1)/3 * n**3)\n",
        "num_ids": 17
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(n+2))/6\n",
        "num_ids": 20
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    return n*(n + 1)/2\n",
        "num_ids": 15
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * math.pow(r, 3)\n    return V\n",
        "num_ids": 29
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r**3\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r ** 3)\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0 * math.pi * r**3\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n    \ndef volume_rectangle(w,l):\n    '''\n    Write a function that finds the volume of a rectangular prism given the length\n    and width of the sides.\n    '''\n    return w*l\n    \ndef volume_cuboid(w,l,h):\n    '''\n    Write a function that finds the volume of a cuboid given the length, width,\n    and height of the cuboid.\n    '''\n    return w*l*h\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function that finds the volume of a cylinder given the radius and\n    height of the cylinder.\n    '''\n    return math.pi*(r**2)*h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function that finds the volume of a cone given the radius and height\n    of the cone.\n    '''\n    return 1/3*math.pi*r**2*h\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi=3.14\n    return (4.0/3.0)*pi*r**3.0\ndef volume_sphere_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r**3.0\ndef volume_sphere_square(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return r**2.0\ndef volume_sphere_tri(r):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (1.0/3.0)*r**2.0\ndef volume_sphere_rect(r):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return r**2.0\ndef volume_sphere_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return math.pi*r**2.0\ndef volume_sphere_para(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r**3.0\ndef volume_sphere_cuboid(r):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return r**3.0\ndef volume_sphere_pyramid(r):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 1.0/3.0*r**2.0\ndef volume_sphere_cylinder(r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r**2.0*math.pi\ndef volume_sphere_cone(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1.0/3.0)*r**2.0*math.pi\ndef volume_sphere_hemi(r):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    return (1.0/3.0)*r**2.0*math.pi\ndef volume_sphere_shell(r):\n    '''\n    Write a function to find the volume of a shell.\n    '''\n    return 2.0*r**2.0*math.pi\ndef volume_sphere_hollow(r):\n    '''\n    Write a function to find the volume of a hollow sphere.\n    '''\n    return 4.0/3.0*math.pi*r**3.0\ndef volume_sphere_bundle(r):\n    '''\n    Write a function to find the volume of a bundle.\n    '''\n    return r**3.0\ndef volume_sphere_hyper(r):\n    '''\n    Write a function to find the volume of a hyperbola.\n    '''\n    return (1.0/2.0)*r**2.0*math.pi\ndef volume_sphere_hyperbola(r):\n    '''\n    Write a function to find the volume of a hyperbola.\n    '''\n    return (1.0/2.0)*r**2.0*math.pi\ndef volume_sphere_torus(r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return (math.pi*r**2.0)*(1.0+math.sqrt(1.0-(4.0/3.0)*r**2.0))/2.0\ndef volume_sphere_tunnel(r):\n    '''\n    Write a function to find the volume of a tunnel.\n    '''\n    return (1.0/2.0)*r**2.0*math.pi\ndef volume_sphere_convex(r):\n    '''\n    Write a function to find the volume of a convex.\n    '''\n    return (2.0/3.0)*r**2.0*math.pi\ndef volume_sphere_para(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r**3.0\ndef volume_sphere_tri(r):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (1.0/3.0)*r**2.0\ndef volume_sphere_rect(r):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return r**2.0\ndef volume_sphere_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return math.pi*r**2.0\ndef volume_sphere_para(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r**3.0\ndef volume_sphere_cuboid(r):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return r**3.0\ndef volume_sphere_pyramid(r):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 1.0/3.0*r**2.0\ndef volume_sphere_cylinder(r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r**2.0*math.pi\ndef volume_sphere_cone(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1.0/3.0)*r**2.0*math.pi\ndef volume_sphere_hemi(r):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    return (1.0/3.0)*r**2.0*math.pi\ndef volume_sphere_shell(r):\n    '''\n    Write a function to find the volume of a shell.\n    '''\n    return 2.0*r**2.0*math.pi\ndef volume_sphere_hollow(r):\n    '''\n    Write a function to find the volume of a hollow sphere.\n    '''\n    return 4.0/3.0*math.pi*r**3.0\ndef volume_sphere_bundle(r):\n    '''\n    Write a function to find the volume of a bundle.\n    '''\n    return r**3.0\ndef volume_sphere_hyper(r):\n    '''\n    Write a function to find the volume of a hyperbola.\n    '''\n    return (1.0/2.0)*r**2.0*math.pi\ndef volume_sphere_hyperbola(r):\n    '''\n    Write a function to find the volume of a hyperbola.\n    '''\n    return (1.0/2.0)*r**2.0*math.pi\ndef volume_sphere_torus(r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return (math.pi*r**2.0)*(1.0+math.sqrt(1.0-(4.0/3.0)*r**2.0))/2.0\ndef volume_sphere_tunnel(r):\n    '''\n    Write a function to find the volume of a tunnel.\n    '''\n    return (1.0/2.0)*r**2.0*math.pi\ndef volume_sphere_convex(r):\n    '''\n    Write a function to find the volume of a convex.\n    '''\n    return (2.0/3.0)*r**2.0*math.pi\ndef volume_sphere_para(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*r**3.0\ndef volume_sphere_tri(r):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (1.0/3.0)*r**2.0",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4/3*pi*r**3\n    # 1/3*pi*r**3\ndef min_max(a):\n    '''\n    Write a function that takes an array and returns the maximum and minimum values.\n    '''\n    min_val = a[0]\n    max_val = a[0]\n    for i in range(1,len(a)):\n        if a[i] < min_val:\n            min_val = a[i]\n        elif a[i] > max_val:\n            max_val = a[i]\n    return [min_val,max_val]\ndef sort_by_length(a):\n    '''\n    Write a function that takes an array of words and returns a sorted array according to the length of the words.\n    '''\n    return sorted(a, key=len)\ndef count_odd(a):\n    '''\n    Write a function to count the number of odd numbers in an array.\n    '''\n    return sum(1 for i in a if i%2!=0)\ndef my_filter(x, func):\n    '''\n    Write a function to filter an array based on the given function\n    '''\n    return [x for x in a if func(x)]\ndef unique_list(a):\n    '''\n    Write a function to remove duplicates from an array.\n    '''\n    return list(set(a))\ndef middle(a):\n    '''\n    Write a function to find the middle value in an array.\n    '''\n    return sum(a)/len(a)\ndef distinct_values(a):\n    '''\n    Write a function to find the number of distinct values in an array.\n    '''\n    return len(set(a))\ndef max_duplicate(a):\n    '''\n    Write a function to find the maximum value that occurs more than once in an array.\n    '''\n    vals = {}\n    for i in a:\n        if i in vals.keys():\n            vals[i] += 1\n        else:\n            vals[i] = 1\n    max_val = 0\n    max_val_count = 0\n    for k,v in vals.items():\n        if v > max_val_count:\n            max_val = k\n            max_val_count = v\n    return max_val\ndef max_product(a):\n    '''\n    Write a function to find the maximum product of two integers in an array.\n    '''\n    min_val = a[0]\n    max_val = a[0]\n    max_val_prod = a[0]\n    for i in range(1,len(a)):\n        if a[i] < min_val:\n            min_val = a[i]\n        elif a[i] > max_val:\n            max_val = a[i]\n    for i in range(min_val,max_val+1):\n        for j in range(min_val,max_val+1):\n            prod = i*j\n            if prod > max_val_prod:\n                max_val_prod = prod\n    return max_val_prod\ndef find_max_in_product(a):\n    '''\n    Write a function to find the max number of the product of three integers in an array.\n    '''\n    prod = a[0]\n    max_prod = 0\n    for i in range(1,len(a)):\n        if a[i] * prod > max_prod:\n            max_prod = a[i] * prod\n        prod = prod * a[i]\n    return max_prod\ndef palindrome_permutation(a):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    a = a.lower()\n    d = dict()\n    for i in a:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    flag = 0\n    for i in d:\n        if d[i] % 2!= 0:\n            flag = 1\n    return flag == 0\ndef is_palindrome(a):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    a = a.lower()\n    if a == a[::-1]:\n        return True\n    else:\n        return False\ndef is_anagram(a, b):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    return sorted(a) == sorted(b)\ndef group_anagrams(a):\n    '''\n    Write a function to group anagrams together.\n    '''\n    vals = {}\n    for i in a:\n        sorted_val = ''.join(sorted(i))\n        if sorted_val in vals.keys():\n            vals[sorted_val].append(i)\n        else:\n            vals[sorted_val] = [i]\n    return vals\ndef group_anagrams_slow(a):\n    '''\n    Write a function to group anagrams together.\n    '''\n    vals = {}\n    for i in a:\n        sorted_val = ''.join(sorted(i))\n        for j in vals.keys():\n            if sorted_val == j:\n                vals[j].append(i)\n            else:\n                continue\n        if sorted_val not in vals.keys():\n            vals[sorted_val] = [i]\n    return vals\ndef is_rotation(a, b):\n    '''\n    Write a function to check if a string is a rotation of another string.\n    '''\n    return a in b + b\ndef is_rotation_slow(a, b):\n    '''\n    Write a function to check if a string is a rotation of another string.\n    '''\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False\ndef bsearch(a, x):\n    '''\n    Write a function to find the index of an item in a sorted array\n    '''\n    l = 0\n    r = len(a)-1\n    while l <= r:\n        mid = l + (r-l)/2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\ndef find_rotation(a, b):\n    '''\n    Write a function to find the rotation index of a string.\n    '''\n    if len(a)!= len(b):\n        return -1\n    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return i\n    return -1\ndef find_rotation_slow(a, b):\n    '''\n    Write a function to find the rotation index of a string.\n    '''\n    if len(a)!= len(b):\n        return -1\n    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return i\n    return -1\ndef find_rotation_reverse(a, b):\n    '''\n    Write a function to find the rotation index of a string.\n    '''\n    if len(a)!= len(b):\n        return -1\n    for i in range(len(a)):\n        if a[-i:] + a[:len(a)-i] == b:\n            return len(a)-i\n    return -1\ndef find_rotation_reverse_slow(a, b):\n    '''\n    Write a function to find the rotation index of a string.\n    '''\n    if len(a)!= len(b):\n        return -1\n    for i in range(len(a)):\n        if a[-i:] + a[:len(a)-i] == b:\n            return len(a)-i\n    return -1\ndef is_anagram_2(a, b):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    vals = {}\n    for i in a:\n        if i in val",
        "num_ids": 19
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef find_difference(arr1, arr2):\n    '''\n    Write a function to find the absolute difference between two arrays.\n    '''\n    return list(map(lambda x, y: abs(x-y), arr1, arr2))\ndef get_intersection(arr1, arr2):\n    '''\n    Write a function to find the intersection point of two lines, represented by line segments.\n    '''\n    if (arr1[0] == arr2[0]) and (arr1[1] == arr2[1]) or (arr1[1] == arr2[0]) and (arr1[0] == arr2[1]):\n        return arr1[1]\n    m1 = (arr1[1]-arr1[0])/(arr1[0]-arr1[1])\n    m2 = (arr2[1]-arr2[0])/(arr2[0]-arr2[1])\n    x = (m1 * arr1[1] - m2 * arr2[1]) / (m1 - m2)\n    y = m1*x + arr1[0]\n    return (x,y)\ndef get_circle_intersection(circ1, circ2):\n    '''\n    Write a function to find the intersection point between two circles.\n    '''\n    #Circle equation\n    def circle_eq(x, y):\n        return (x**2+y**2-circ1.r**2)**2+2*x*y*(circ1.r**2-circ2.r**2)\n    a = -2*(circ1.r**2*circ2.r**2 + (circ1.c.x-circ2.c.x)**2 + (circ1.c.y-circ2.c.y)**2)\n    b = 2*(circ1.r**2*(circ1.c.x**2 + circ1.c.y**2) - circ1.r**2*circ2.r**2 + circ1.c.x*circ2.c.x + circ1.c.y*circ2.c.y)\n    c = (circ1.r**2*circ2.r**2 + (circ1.c.x-circ2.c.x)**2 + (circ1.c.y-circ2.c.y)**2 - circ1.r**2*circ2.r**2)\n    d = math.sqrt(b**2-4*a*c)\n    x = (-b + d)/(2*a)\n    y = x * (circ1.r**2 - circ2.r**2)/(circ1.r**2 + circ2.r**2) + circ1.c.y\n    return (x,y)\ndef get_line_intersection(l1, l2):\n    '''\n    Write a function to find the intersection point of two lines, represented by line segments.\n    '''\n    #Line equation\n    def line_eq(x, y):\n        return (l1.start.x*x + l1.start.y*y - l1.start.z)**2 + (l1.end.x*x + l1.end.y*y - l1.end.z)**2 + (l2.start.x*x + l2.start.y*y - l2.start.z)**2 + (l2.end.x*x + l2.end.y*y - l2.end.z)**2\n    a = (l1.end.x - l1.start.x)**2 + (l1.end.y - l1.start.y)**2 + (l1.end.z - l1.start.z)**2\n    b = (l2.end.x - l2.start.x)**2 + (l2.end.y - l2.start.y)**2 + (l2.end.z - l2.start.z)**2\n    c = (l1.start.x - l2.start.x)**2 + (l1.start.y - l2.start.y)**2 + (l1.start.z - l2.start.z)**2\n    d = (l1.end.x - l2.start.x)**2 + (l1.end.y - l2.start.y)**2 + (l1.end.z - l2.start.z)**2\n    x = (b*l2.start.y - a*l2.start.x - c*l1.start.x) / (a*l1.start.x + b*l1.start.y - c*l2.start.x - d*l2.start.x)\n    y = (b*l1.start.x - a*l1.start.y - c*l2.start.y) / (a*l1.start.x + b*l1.start.y - c*l2.start.x - d*l2.start.y)\n    z = (b*l2.start.z - a*l2.start.z - c*l1.start.z) / (a*l1.start.x + b*l1.start.y - c*l2.start.x - d*l2.start.y)\n    return (x,y,z)\ndef get_line_plane_intersection(l1, plane):\n    '''\n    Write a function to find the intersection point between a line segment and a plane.\n    '''\n    #Line equation\n    def line_eq(x, y):\n        return (l1.start.x*x + l1.start.y*y - l1.start.z)**2 + (l1.end.x*x + l1.end.y*y - l1.end.z)**2 + (plane.n.x*x + plane.n.y*y - plane.n.z)**2 + (plane.c.x*x + plane.c.y*y - plane.c.z)**2\n    a = (l1.end.x - l1.start.x)**2 + (l1.end.y - l1.start.y)**2 + (l1.end.z - l1.start.z)**2\n    b = (plane.n.x*l1.start.x + plane.n.y*l1.start.y + plane.n.z*l1.start.z - plane.n.x*l1.start.x - plane.n.y*l1.start.y - plane.n.z*l1.start.z)**2\n    c = (plane.n.x*l1.start.x + plane.n.y*l1.start.y + plane.n.z*l1.start.z - plane.n.x*l1.start.x - plane.n.y*l1.start.y - plane.n.z*l1.start.z - plane.c.x*l1.start.x - plane.c.y*l1.start.y - plane.c.z*l1.start.z)**2\n    d = (l1.start.x - plane.c.x)**2 + (l1.start.y - plane.c.y)**2 + (l1.start.z - plane.c.z)**2\n    x = (b*plane.c.y - a*plane.c.x - c*l1.start.x) / (a*l1.start.x + b*l1.start.y - c*l2.start.x - d*plane.c.x)\n    y = (b*l1.start.x - a*l1.start.y - c*plane.c.x) / (a*l1.start.x + b*l1.start.y - c*l2.start.x - d*plane.c.x)\n    z = (b*plane.c.z - a*plane.c.z - c*l1.start.z) / (a*l1.start.x + b*l1.start.y - c*l2.start.x - d*plane.c.x)\n    return (x,y,z)\ndef point_on_line(line, point):\n    '''\n    Write a function to fin",
        "num_ids": 8
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef volume_cube(side):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return side**3\ndef area_cube(side):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*side**2\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*r**2+(r+h)**2\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return a*b\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2*(a+b)\ndef volume_rhombus(a,b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return a*b/2\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return a*b\ndef volume_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*c/3\ndef area_pyramid(a,b,c):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return a*b+b*c+c*a\ndef volume_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef area_cuboid(a,b,c):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return 2*(a*b+b*c+c*a)\ndef volume_parallelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    return a*b*c\ndef area_parallelepiped(a,b,c):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    return 2*(a*b+b*c+c*a)\ndef volume_conical_frustum(r,h,d):\n    '''\n    Write a function to find the volume of a conical frustum.\n    '''\n    return math.pi*r**2*h/3\ndef area_conical_frustum(r,h,d):\n    '''\n    Write a function to find the surface area of a conical frustum.\n    '''\n    return math.pi*r**2*(h+d)\ndef volume_tetrahedron(side):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return (3/4)*math.pi*side**3\ndef area_tetrahedron(side):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return math.pi*side**2\ndef volume_conic_cone(r1,r2):\n    '''\n    Write a function to find the volume of a conic cone.\n    '''\n    return math.pi*r1**2*r2/3\ndef area_conic_cone(r1,r2):\n    '''\n    Write a function to find the surface area of a conic cone.\n    '''\n    return math.pi*r1**2*(r1+r2)\ndef volume_cuboid_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid pyramid.\n    '''\n    return a*b*c/3\ndef area_cuboid_pyramid(a,b,c):\n    '''\n    Write a function to find the surface area of a cuboid pyramid.\n    '''\n    return 2*(a*b+b*c+c*a)\ndef volume_sphere_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a sphere pyramid.\n    '''\n    return a*b*c/3\ndef area_sphere_pyramid(a,b,c):\n    '''\n    Write a function to find the surface area of a sphere pyramid.\n    '''\n    return 2*(a*b+b*c+c*a)\ndef volume_cone_pyramid(r,h,d):\n    '''\n    Write a function to find the volume of a cone pyramid.\n    '''\n    return (3/4)*math.pi*r**2*h/3\ndef area_cone_pyramid(r,h,d):\n    '''\n    Write a function to find the surface area of a cone pyramid.\n    '''\n    return math.pi*r**2*(h+d)\ndef volume_octahedron(side):\n    '''\n    Write a function to find the volume of a octahedron.\n    '''\n    return (math.pi**3)/(6*side)\ndef area_octahedron(side):\n    '''\n    Write a function to find the surface area of a octahedron.\n    '''\n    return (math.pi**2)/2*side\ndef volume_dodecahedron(side):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return (math.pi**3)/(120*side)\ndef area_dodecahedron(side):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return (math.pi**2)/12*side\ndef volume_icosahedron(side):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    return (math.pi**3)/(720*side)\ndef area_icosahedron(side):\n    '''\n    Write a function to find the surface area of a icosahedron.\n    '''\n    return (math.pi**2)/12*side\ndef volume_hexahedron(side):\n    '''\n    Write a function to find the volume of a hexahedron.\n    '''\n    return (math.pi**3)/(360*side)\ndef area_hexahedron(side):\n    '''\n    Write a function to find the surface area of a hexahedron.\n    '''\n    return (math.pi**2)/12*side\ndef volume_tetrahedron_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a tetrahedron pyramid.\n    '''\n    return a*b*c/4\ndef area_tetrahedron_pyramid(a,b,c):\n    '''\n    Write a function to find the surface area of a tetrahedron pyramid.\n    '''\n    return 2*(a*b+b*c+c*a)\ndef volume_conic_frustum_pyramid(r1,r2,h):\n    '''\n    Write a function to find the volume of a conic frustum pyramid.\n    '''\n    return (3/4)*math.pi*r1**2*r2*h/3\ndef area",
        "num_ids": 27
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    l = list(strr)\n    for i in range(0, len(l)):\n        l[i] = ord(l[i])\n    return ((l[0] + l[1] + l[2] + l[3]) % 26)\ndef int_to_char(num):  \n    '''\n    Write a python function to convert an integer value into character using ASCII code\n    '''\n    return chr(num)\ndef caesar_cipher(strr, key):  \n    '''\n    Write a python function to apply the caesar cipher on the given string\n    '''\n    l = list(strr)\n    for i in range(0, len(l)):\n        l[i] = ord(l[i])\n    k = key % 26\n    for i in range(0, len(l)):\n        l[i] = (l[i] + k) % 26\n    return (int_to_char(l[0]) + int_to_char(l[1]) + int_to_char(l[2]) + int_to_char(l[3]))\ndef main():\n    # Get the string\n    strr = input(\"Enter a string: \")\n    # Get the key\n    key = int(input(\"Enter the key: \"))\n    # Get the Cipher text\n    cipher = caesar_cipher(strr, key)\n    # Print the Cipher text\n    print(cipher)\nif __name__ == \"__main__\":\n    main()",
        "num_ids": 218
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr=strr.lower()\n    z=0\n    for i in strr:\n        z+=ord(i)\n    return z%26\ndef affine_cipher(strr,a,b):\n    '''\n    Write a python function to encrypt the string using the affine cipher.\n    '''\n    strr=strr.lower()\n    z=[]\n    for i in strr:\n        if ord(i)>=97 and ord(i)<=122:\n            z.append(chr(((a*(ord(i)-97)+b)%26)+97))\n        else:\n            z.append(i)\n    return ''.join(z)\ndef affine_decipher(strr,a,b):\n    '''\n    Write a python function to decrypt the string using the affine cipher.\n    '''\n    strr=strr.lower()\n    z=[]\n    for i in strr:\n        if ord(i)>=97 and ord(i)<=122:\n            z.append(chr(((a*(ord(i)-97)-b)%26)+97))\n        else:\n            z.append(i)\n    return ''.join(z)\ndef vigenere_cipher(strr,key):\n    '''\n    Write a python function to encrypt the string using the vigenere cipher.\n    '''\n    strr=strr.lower()\n    key=key.lower()\n    z=[]\n    for i in range(len(strr)):\n        if ord(strr[i])>=97 and ord(strr[i])<=122:\n            if ord(key[i%len(key)])>=97 and ord(key[i%len(key)])<=122:\n                z.append(chr(((ord(strr[i])-97+ord(key[i%len(key)])-97)%26)+97))\n            else:\n                z.append(strr[i])\n        else:\n            z.append(strr[i])\n    return ''.join(z)\ndef vigenere_decipher(strr,key):\n    '''\n    Write a python function to decrypt the string using the vigenere cipher.\n    '''\n    strr=strr.lower()\n    key=key.lower()\n    z=[]\n    for i in range(len(strr)):\n        if ord(strr[i])>=97 and ord(strr[i])<=122:\n            if ord(key[i%len(key)])>=97 and ord(key[i%len(key)])<=122:\n                z.append(chr(((ord(strr[i])-97-ord(key[i%len(key)])-97)%26)+97))\n            else:\n                z.append(strr[i])\n        else:\n            z.append(strr[i])\n    return ''.join(z)\ndef atbash_cipher(strr):\n    '''\n    Write a python function to encrypt the string using the atbash cipher.\n    '''\n    strr=strr.lower()\n    z=[]\n    for i in strr:\n        if ord(i)>=97 and ord(i)<=122:\n            z.append(chr(219-ord(i)))\n        else:\n            z.append(i)\n    return ''.join(z)\ndef atbash_decipher(strr):\n    '''\n    Write a python function to decrypt the string using the atbash cipher.\n    '''\n    strr=strr.lower()\n    z=[]\n    for i in strr:\n        if ord(i)>=97 and ord(i)<=122:\n            z.append(chr(219-ord(i)))\n        else:\n            z.append(i)\n    return ''.join(z)\ndef playfair_cipher(strr):\n    '''\n    Write a python function to encrypt the string using the playfair cipher.\n    '''\n    strr=strr.lower()\n    z=[]\n    for i in range(0,len(strr),2):\n        if i==len(strr)-1:\n            z.append(strr[i]+strr[0])\n        else:\n            z.append(strr[i]+strr[i+1])\n        if ord(z[-1][0])>=97 and ord(z[-1][0])<=122:\n            if ord(z[-1][1])>=97 and ord(z[-1][1])<=122:\n                z.append(chr(219-ord(z[-1][0])-ord(z[-1][1])))\n            else:\n                z.append(z[-1][1])\n        else:\n            z.append(z[-1][0])\n    return ''.join(z)\ndef playfair_decipher(strr):\n    '''\n    Write a python function to decrypt the string using the playfair cipher.\n    '''\n    strr=strr.lower()\n    z=[]\n    for i in range(0,len(strr),2):\n        if i==len(strr)-1:\n            z.append(strr[i]+strr[0])\n        else:\n            z.append(strr[i]+strr[i+1])\n        if ord(z[-1][0])>=97 and ord(z[-1][0])<=122:\n            if ord(z[-1][1])>=97 and ord(z[-1][1])<=122:\n                z.append(chr(219-ord(z[-1][0])+ord(z[-1][1])))\n            else:\n                z.append(z[-1][1])\n        else:\n            z.append(z[-1][0])\n    return ''.join(z)\ndef bifid_cipher(strr,key):\n    '''\n    Write a python function to encrypt the string using the bifid cipher.\n    '''\n    strr=strr.lower()\n    key=key.lower()\n    z=[]\n    for i in range(0,len(strr),2):\n        if i==len(strr)-1:\n            z.append(strr[i]+strr[0])\n        else:\n            z.append(strr[i]+strr[i+1])\n    key=key.upper()\n    key_len=len(key)\n    new_key=''\n    for i in key:\n        if i not in new_key:\n            new_key+=i\n    z=[]\n    for i in z:\n        if ord(i[0])>=97 and ord(i[0])<=122:\n            if ord(i[1])>=97 and ord(i[1])<=122:\n                z.append(chr(219-ord(i[0])-ord(i[1])+97))\n            else:\n                z.append(i[1])\n        else:\n            z.append(i[0])\n    for i in range(len(new_key),len(z)):\n        if ord(z[i])>=97 and ord(z[i])<=122:\n            z.append(chr(219-ord(z[i])+97))\n    return ''.join(z)\ndef bifid_decipher(strr,key):\n    '''\n    Write a python function to decrypt the string using the bifid cipher.\n    '''\n    strr=strr.lower()\n    key=key.lower()\n    z=[]\n    for i in range(0,len(strr),2):\n        if i==len(strr)-1:\n            z.append(strr[i]+strr[0])\n        else:\n            z.append(strr[i]+strr[i+1])\n    key=key.upper()\n    key_len=len(key)\n    new_key=''\n    for i in key:\n        if i not in new_key:\n            new_key+=i\n    z=[]\n    for i in z:\n        if ord(i[0])>=97 and ord(i",
        "num_ids": 167
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = ''\n    for i in strr:\n        s += chr(ord(i)+1)\n    return s\n",
        "num_ids": 32
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    c=0\n    for i in strr:\n        c=c+(ord(i)%26)\n    return c%26\n",
        "num_ids": 34
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in strr:\n        res = res + ord(i)\n    return res%26\n",
        "num_ids": 31
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    i = 0\n    out = 0\n    for i in range(len(strr)):\n        out = out + (ord(strr[i]) - 97)\n    return out % 26\n",
        "num_ids": 48
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = 0\n    for i in strr:\n        ans = (ans+ord(i))%26\n    return chr(ans+ord('A'))\n",
        "num_ids": 41
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for i in strr:\n        char_sum += ord(i)\n    return (char_sum%26)\n",
        "num_ids": 37
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    print(chr(sum([ord(char) for char in strr])%26))\n",
        "num_ids": 24
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for x in strr:\n        res = (res + ord(x)) % 26\n    return chr(res + ord('a'))\n",
        "num_ids": 41
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return 1\n    else:\n        return sequence(n-1)+sequence(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0,1]\n    while len(seq) < n+1:\n        seq.append(seq[-1] + seq[-2])\n    return seq[n]\n",
        "num_ids": 47
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0,1,2]\n    for i in xrange(3,n+1):\n        sequence.append((sequence[i-1] + sequence[i-2]) % 3)\n    return sequence[n]\n",
        "num_ids": 56
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + 2*sequence(n-2)\n",
        "num_ids": 35
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def count(n,m): \n        if m == 0: \n            return 1\n        return count(n,m-1) + count(n-1,m-1)\n    return count(n, n)\n",
        "num_ids": 55
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return sequence(n-1) + (3*(sequence(n-1)))\n",
        "num_ids": 37
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return sequence(n-1) + sequence(n-2) + sequence(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    print('the first ten of the newman sequence is:\\n',newman_seq(n)[:10])\n",
        "num_ids": 28
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    c = 0\n    temp = 0\n    temp_i = 1\n    while c < n:\n        temp = temp_i\n        temp_i = temp_i * 2\n        c = c + 1\n    return temp\n",
        "num_ids": 55
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return sequence(n - 1) + n * (n - 1) // 2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2015
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4*math.pi*r**2\n    print s\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n    \ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)\n",
        "num_ids": 18
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4 * math.pi * (r**2)\n    print('surface area of the sphere = ',sa)\n",
        "num_ids": 30
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)\ndef surfacearea_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * a ** 2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 3\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r * r * h\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a ** 3\ndef volume_sphere_partial(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 2\ndef volume_cylinder_partial(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_cube_partial(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a ** 2\ndef surfacearea_sphere_partial(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r\ndef surfacearea_cylinder_partial(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)\ndef surfacearea_cube_partial(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * a\ndef volume_sphere_partial(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 2\ndef volume_cylinder_partial(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_cube_partial(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a ** 2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 3\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a ** 3\ndef volume_sphere_partial(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 2\ndef volume_cylinder_partial(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_cube_partial(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a ** 2\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)\ndef surfacearea_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * a ** 2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 3\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a ** 3\ndef volume_sphere_partial(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 2\ndef volume_cylinder_partial(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_cube_partial(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a ** 2\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)\ndef surfacearea_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * a ** 2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 3\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a ** 3\ndef volume_sphere_partial(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 2\ndef volume_cylinder_partial(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_cube_partial(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a ** 2\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)\ndef surfacearea_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * a ** 2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 3\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a ** 3\ndef volume_sphere_partial(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 2\ndef volume_cylinder_partial(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_cube_partial(a):\n    '''\n    Write a function to find the volume of a cube",
        "num_ids": 13
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4.0 * math.pi * r * r\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r**2\n    print(a)\n    return a\ndef surfacearea_sphere_demo():\n    '''\n    Call the surfacearea_sphere function with a value of 0.5, to test.\n    '''\n    r = 0.5\n    print('Surface area of sphere with radius 0.5:',surfacearea_sphere(r))\n",
        "num_ids": 33
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    return (n*(2*n-1))/2\n",
        "num_ids": 19
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return ((n * (n + 1) / 2) ** 2) + 1\n",
        "num_ids": 36
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Easy\n    if n <= 2:\n        return 1\n    else:\n        return 1 + 2*(3**0.5) - (2**0.5)\n",
        "num_ids": 43
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * n**2 - n + 1\n",
        "num_ids": 29
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**3 + n**2) // 2\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def get_center_nth_hexagonal_number(n):\n        return (3*n*n-1) / 2\n    # finding the 4th centered hexagonal number\n    # 4th centered hexagonal number = 3n*n - 1\n    nth_hexagonal_number = get_center_nth_hexagonal_number(n)\n    # converting the number to an integer\n    return int(nth_hexagonal_number)\n",
        "num_ids": 106
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return -((-1 + (1 + 8 * n) ** 0.5) / 2) ** 2\n",
        "num_ids": 27
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    x = 1\n    while True:\n        x += 1\n        yield x * (2 * x - 1)\n        if x == n:\n            break\n",
        "num_ids": 40
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 0:\n        return 0\n    return (n + 1) * (3 * n + 1) / 2\n",
        "num_ids": 33
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    dict_final = dict1\n    for key in dict2:\n        if key not in dict_final:\n            dict_final[key] = dict2[key]\n    for key in dict3:\n        if key not in dict_final:\n            dict_final[key] = dict3[key]\n    return dict_final\n",
        "num_ids": 82
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if len(dict3)==0:\n        return dict1.update(dict2)\n    else:\n        dictionaries={}\n        for key in dict1:\n            dictionaries[key]=dict1[key]\n        for key in dict2:\n            dictionaries[key]=dict2[key]\n        for key in dict3:\n            dictionaries[key]=dict3[key]\n        return dictionaries\ndict1={'name':'Bob','age':25}\ndict2={'city':'Washington','job':'Engineer'}\ndict3={'name':'Alice','job':'Doctor'}\nprint merge_dictionaries_three(dict1,dict2,dict3)\n",
        "num_ids": 169
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for i in dict1:\n        dictionary[i] = dict1[i]\n    for i in dict2:\n        dictionary[i] = dict2[i]\n    for i in dict3:\n        dictionary[i] = dict3[i]\n    return dictionary\n",
        "num_ids": 75
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    return dict_merged\ndef merge_dictionaries(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    return dict_merged\ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    dict_merged.update(dict4)\n    return dict_merged\ndef merge_dictionaries_five(dict1,dict2,dict3,dict4,dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    dict_merged.update(dict4)\n    dict_merged.update(dict5)\n    return dict_merged\ndef merge_dictionaries_six(dict1,dict2,dict3,dict4,dict5,dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    dict_merged.update(dict4)\n    dict_merged.update(dict5)\n    dict_merged.update(dict6)\n    return dict_merged\ndef merge_dictionaries_seven(dict1,dict2,dict3,dict4,dict5,dict6,dict7):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    dict_merged.update(dict4)\n    dict_merged.update(dict5)\n    dict_merged.update(dict6)\n    dict_merged.update(dict7)\n    return dict_merged\ndef merge_dictionaries_eight(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    dict_merged.update(dict4)\n    dict_merged.update(dict5)\n    dict_merged.update(dict6)\n    dict_merged.update(dict7)\n    dict_merged.update(dict8)\n    return dict_merged\ndef merge_dictionaries_nine(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9):\n    '''\n    Write a function to merge nine dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    dict_merged.update(dict4)\n    dict_merged.update(dict5)\n    dict_merged.update(dict6)\n    dict_merged.update(dict7)\n    dict_merged.update(dict8)\n    dict_merged.update(dict9)\n    return dict_merged\ndef merge_dictionaries_ten(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10):\n    '''\n    Write a function to merge ten dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    dict_merged.update(dict4)\n    dict_merged.update(dict5)\n    dict_merged.update(dict6)\n    dict_merged.update(dict7)\n    dict_merged.update(dict8)\n    dict_merged.update(dict9)\n    dict_merged.update(dict10)\n    return dict_merged\ndef merge_dictionaries_eleven(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11):\n    '''\n    Write a function to merge eleven dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    dict_merged.update(dict4)\n    dict_merged.update(dict5)\n    dict_merged.update(dict6)\n    dict_merged.update(dict7)\n    dict_merged.update(dict8)\n    dict_merged.update(dict9)\n    dict_merged.update(dict10)\n    dict_merged.update(dict11)\n    return dict_merged\ndef merge_dictionaries_twelve(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12):\n    '''\n    Write a function to merge twelve dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    dict_merged.update(dict4)\n    dict_merged.update(dict5)\n    dict_merged.update(dict6)\n    dict_merged.update(dict7)\n    dict_merged.update(dict8)\n    dict_merged.update(dict9)\n    dict_merged.update(dict10)\n    dict_merged.update(dict11)\n    dict_merged.update(dict12)\n    return dict_merged\ndef merge_dictionaries_thirteen(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13):\n    '''\n    Write a function to merge thirteen dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    dict_merged.update(dict4)\n    dict_merged.update(dict5)\n    dict_merged.update(dict6)\n    dict_merged.update(dict7)\n    dict_merged.update(dict8)\n    dict_merged.update(dict9)\n    dict_merged.update(dict10)\n    dict_merged.update(dict11)\n    dict_merged.update(dict12)\n    dict_merged.update(dict13)\n    return dict_merged\ndef merge_dictionaries_fourteen(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9",
        "num_ids": 209
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return(dict(dict1.items() + dict2.items() + dict3.items()))\n    \ndict1 = {'a':1,'b':2,'c':3}\ndict2 = {'a':1,'b':3}\ndict3 = {'a':2,'b':2}\nprint(merge_dictionaries_three(dict1,dict2, dict3))\n",
        "num_ids": 95
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not dict1:\n        return dict2\n    elif not dict2:\n        return dict1\n    elif not dict3:\n        return dict2\n    merged_dict = {}\n    for d in [dict1, dict2, dict3]:\n        merged_dict.update(d)\n    return merged_dict\n",
        "num_ids": 80
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    final_dict = {}\n    for key in dict1:\n        final_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in final_dict:\n            final_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in final_dict:\n            final_dict[key] = dict3[key]\n    return final_dict\n",
        "num_ids": 101
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict1:\n        if key in dict2:\n            if key in dict3:\n                dict1[key] = dict1[key] + dict2[key] + dict3[key]\n            else:\n                dict1[key] = dict1[key] + dict2[key]\n        elif key in dict3:\n            dict1[key] = dict1[key] + dict3[key]\n        else:\n            dict1[key] = dict1[key]\n    return dict1\n",
        "num_ids": 124
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not dict1:\n        return dict2\n    if not dict2:\n        return dict3\n    if not dict3:\n        return dict1\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n",
        "num_ids": 73
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "num_ids": 19
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = {}\n    for num in list1:\n        if num not in count_dict:\n            count_dict[num] = 0\n        count_dict[num] += 1\n    return count_dict\ndef unique_vals(list1):\n    '''\n    Write a function to get all the unique values in a list, returned as a set.\n    '''\n    return set(list1)\n",
        "num_ids": 10
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    #brute force\n    #dict1 = {}\n    #for i in range(len(list1)):\n    #    dict1[list1[i]] = list1.count(list1[i])\n    #return dict1\n    \n    #counting method\n    dict1 = collections.Counter(list1)\n    return dict1\n",
        "num_ids": 85
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if list1 == []:\n        return {}\n    freq = {}\n    for i in list1:\n        freq[i] = list1.count(i)\n    return freq\ndef check_permutation(list1,list2):\n    '''\n    Write a function to check whether two given lists are permutations of each other.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n        else:\n            return False\n    return True\ndef check_permutation_dict(dict1,dict2):\n    '''\n    Write a function to check whether two given dictionaries are permutations of each other.\n    '''\n    if len(dict1)!= len(dict2):\n        return False\n    for i in dict1:\n        if i in dict2:\n            dict2.remove(i)\n        else:\n            return False\n    return True\ndef are_anagrams(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    list1 = []\n    list2 = []\n    for i in str1:\n        list1.append(i)\n    for j in str2:\n        list2.append(j)\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    return False\ndef are_anagrams_dict(dict1,dict2):\n    '''\n    Write a function to check if two given dictionaries are anagrams of each other.\n    '''\n    list1 = []\n    list2 = []\n    for i in dict1:\n        list1.append(i)\n    for j in dict2:\n        list2.append(j)\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    return False\ndef remove_duplicate_letters(str1):\n    '''\n    Write a function to remove duplicates letters in a string.\n    '''\n    if len(str1) == 0:\n        return str1\n    list1 = []\n    for i in str1:\n        if i not in list1:\n            list1.append(i)\n    list1.sort()\n    return ''.join(list1)\ndef remove_duplicate_letters_dict(dict1):\n    '''\n    Write a function to remove duplicates letters in a string.\n    '''\n    if len(dict1) == 0:\n        return dict1\n    list1 = []\n    for i in dict1:\n        if i not in list1:\n            list1.append(i)\n    list1.sort()\n    return list1\ndef remove_duplicate_letters_string(str1):\n    '''\n    Write a function to remove duplicates letters in a string.\n    '''\n    if len(str1) == 0:\n        return str1\n    list1 = []\n    for i in str1:\n        if i not in list1:\n            list1.append(i)\n    return ''.join(list1)\ndef remove_duplicate_letters_dict(dict1):\n    '''\n    Write a function to remove duplicates letters in a string.\n    '''\n    if len(dict1) == 0:\n        return dict1\n    list1 = []\n    for i in dict1:\n        if i not in list1:\n            list1.append(i)\n    return list1\ndef are_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    if len(str1) == 0:\n        return True\n    if len(str1) == 1:\n        return True\n    if str1[0] == str1[-1]:\n        return are_palindrome(str1[1:-1])\n    return False\ndef are_palindrome_dict(dict1):\n    '''\n    Write a function to check whether a given dictionary is a palindrome.\n    '''\n    if len(dict1) == 0:\n        return True\n    list1 = []\n    for i in dict1:\n        list1.append(i)\n    list1.sort()\n    list1.reverse()\n    str1 = ''.join(list1)\n    return are_palindrome(str1)\ndef are_palindrome_string(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    if len(str1) == 0:\n        return True\n    if len(str1) == 1:\n        return True\n    if str1[0] == str1[-1]:\n        return are_palindrome_string(str1[1:-1])\n    return False\ndef are_palindrome_string_dict(dict1):\n    '''\n    Write a function to check whether a given dictionary is a palindrome.\n    '''\n    if len(dict1) == 0:\n        return True\n    list1 = []\n    for i in dict1:\n        list1.append(i)\n    list1.sort()\n    list1.reverse()\n    str1 = ''.join(list1)\n    return are_palindrome_string(str1)\ndef longest_substring(str1,dict1):\n    '''\n    Write a function to find the longest substring in a given dictionary that is also a palindrome.\n    '''\n    if len(str1) == 0:\n        return str1\n    if len(str1) == 1:\n        return str1\n    if len(str1) == 2:\n        if str1[0] == str1[1]:\n            return str1\n        return ''\n    start = 0\n    end = 1\n    list1 = []\n    while end < len(str1):\n        if str1[start] == str1[end]:\n            end += 1\n            list1.append(str1[start:end])\n        else:\n            start += 1\n    list1 = remove_duplicate_letters_dict(list1)\n    list1.sort()\n    str1 = ''.join(list1)\n    return str1\ndef longest_substring_dict(dict1,dict2):\n    '''\n    Write a function to find the longest substring in a given dictionary that is also a palindrome.\n    '''\n    if len(dict1) == 0:\n        return str1\n    if len(dict1) == 1:\n        return dict1\n    if len(dict1) == 2:\n        if dict1[0] == dict1[1]:\n            return dict1\n        return ''\n    start = 0\n    end = 1\n    list1 = []\n    while end < len(dict1):\n        if dict1[start] == dict1[end]:\n            end += 1\n            list1.append(dict1[start:end])\n        else:\n            start += 1\n    list1 = remove_duplicate_letters_dict(list1)\n    list1.sort()\n    str1 = ''.join(list1)\n    return str1\ndef count_and_say(n):\n    '''\n    Write a function to count and say sequence.\n    '''\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '11'\n    if n == 3:\n        return '21'\n    count = 3\n    str1 = '11'\n    while count < n:\n        list1 = []\n        count1 = 1\n        for i in range(len(str1)):\n            if i == len(str1)-1:\n                list1.append(str(count1)+str1[i])\n                count1 = 1\n            elif str1[i] == str1[i+1]:\n                count1 += 1\n            else:\n                list1.append(str(count1)+str1[i])\n                count1 = 1\n        str1 = ''.join(list1)\n        count += 1\n    return str1\ndef count_and_say_dict(dic",
        "num_ids": 204
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2 = list()\n    for i in list1:\n        list2.append(list1.count(i))\n    return dict(zip(list1, list2))\ndef jaccard_index(list1, list2):\n    '''\n    Write a function to compute the Jaccard Index of two lists. The Jaccard index is defined as the size of the intersection divided by the size of the union.\n    '''\n    list3 = list()\n    for i in list1:\n        if i in list2:\n            list3.append(1)\n    return len(list3)/(len(list1)+len(list2)-len(list3))\ndef merge_sorted_list(list1, list2):\n    '''\n    Write a function to merge two sorted list into a new sorted list and return it.\n    '''\n    list3 = list()\n    if list1[-1]>list2[-1]:\n        list3.append(list2[-1])\n        list3.extend(list1)\n        list3.extend(list2[:-1])\n    else:\n        list3.append(list1[-1])\n        list3.extend(list2)\n        list3.extend(list1[:-1])\n    return list3\ndef unique(list1):\n    '''\n    Write a function to return all the unique elements in a list.\n    '''\n    list2 = list()\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef apply_func(list1, func):\n    '''\n    Write a function to apply a function to each element in a list.\n    '''\n    list2 = list()\n    for i in list1:\n        list2.append(func(i))\n    return list2\ndef divisible_by_k(list1, k):\n    '''\n    Write a function to check if all the elements in a list are divisible by k.\n    '''\n    list2 = list()\n    for i in list1:\n        if i%k!= 0:\n            list2.append(False)\n        else:\n            list2.append(True)\n    return list2\ndef nth_to_last(list1, n):\n    '''\n    Write a function to return the nth to last element in a list.\n    '''\n    return list1[-n]\ndef find_smallest(list1):\n    '''\n    Write a function to find the smallest value in a list.\n    '''\n    list2 = list()\n    for i in list1:\n        if i < min(list2):\n            list2[0] = i\n    return list2[0]\ndef find_largest(list1):\n    '''\n    Write a function to find the largest value in a list.\n    '''\n    list2 = list()\n    for i in list1:\n        if i > max(list2):\n            list2[0] = i\n    return list2[0]\ndef find_longest(list1):\n    '''\n    Write a function to find the longest string in a list.\n    '''\n    list2 = list()\n    for i in list1:\n        if len(i) > len(list2):\n            list2[0] = i\n    return list2[0]\ndef check_anagram(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    list1 = list(str1)\n    list2 = list(str2)\n    list1.sort()\n    list2.sort()\n    return list1 == list2\ndef sort_by_length(list1):\n    '''\n    Write a function to sort a list by length.\n    '''\n    list2 = list()\n    for i in list1:\n        list2.append((len(i), i))\n    list2.sort()\n    list2.reverse()\n    return [i[1] for i in list2]\ndef match_digits(str1, str2):\n    '''\n    Write a function to check if two strings match in the same way.\n    '''\n    list1 = list(str1)\n    list2 = list(str2)\n    list1.sort()\n    list2.sort()\n    return list1 == list2\ndef pair_count(list1):\n    '''\n    Write a function to count the number of pairs of consecutive integers in a list.\n    '''\n    list2 = list()\n    list3 = list()\n    for i in range(len(list1)):\n        list2.append(i+1)\n    for i in range(len(list2)-1):\n        if list2[i] + 1 == list2[i+1]:\n            list3.append(1)\n    return sum(list3)\ndef sum_n_digits(n):\n    '''\n    Write a function to calculate the sum of the digits in a number.\n    '''\n    list1 = list()\n    while n > 0:\n        list1.append(n%10)\n        n = n/10\n    return sum(list1)\ndef sum_of_list(list1):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    return sum(list1)\ndef to_dict(list1):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    list2 = list()\n    for i in list1:\n        list2.append(i)\n    return dict(zip(list1, list2))\ndef list_to_string(list1):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    return ''.join(list1)\ndef product_of_list(list1):\n    '''\n    Write a function to compute the product of a list.\n    '''\n    return reduce(lambda x, y: x*y, list1)\ndef reverse_list(list1):\n    '''\n    Write a function to reverse a list.\n    '''\n    list2 = list()\n    for i in range(len(list1)-1, -1, -1):\n        list2.append(list1[i])\n    return list2\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    list1 = list(str1)\n    list1.reverse()\n    return ''.join(list1)\ndef rotate_list(list1, k):\n    '''\n    Write a function to rotate a list by k elements.\n    '''\n    return list1[-k:] + list1[:-k]\ndef min_max_list(list1):\n    '''\n    Write a function to find the minimum and maximum values in a list.\n    '''\n    list2 = list()\n    for i in list1:\n        if i > max(list2):\n            list2[0] = i\n        if i < min(list2):\n            list2[1] = i\n    return list2\ndef min_of_list(list1):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    return min(list1)\ndef max_of_list(list1):\n    '''\n    Write a function to find the maximum value in a list.\n    '''\n    return max(list1)\ndef riddle():\n    '''\n    Write a function to find the product of all the numbers in a list.\n    '''\n    return reduce(lambda x, y: x*y, [i for i in range(1, 21)])\ndef remove_element(list1, element):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    list2 = list()\n    for i in list1:\n        if i!= element:\n            list2.append(i)\n    return list2\ndef random_list(list1):\n    '''\n    Write a function to remove a random element from a list.\n    '''\n    return random.choice(list1)\ndef count_occurence(list1):\n    '''\n    Write a function to count the number of times an element occurs in a list.\n    '''\n    return list1.count",
        "num_ids": 8
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    l = len(list1)\n    frequency = collections.Counter(list1)\n    for i in frequency.keys():\n        frequency[i] = frequency[i]/l\n    return frequency\n",
        "num_ids": 48
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #new_dict = {}\n    #for i in list1:\n    #    if i in new_dict:\n    #        new_dict[i] = new_dict[i] + 1\n    #    else:\n    #        new_dict[i] = 1\n    #return new_dict\n    return collections.Counter(list1)\n",
        "num_ids": 84
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq={}\n    for i in list1:\n        freq[i]=list1.count(i)\n    return freq\n",
        "num_ids": 35
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        dic[i] = list1.count(i)\n    return dic\n",
        "num_ids": 36
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = {}\n    for item in list1:\n        if item in result.keys():\n            result[item] += 1\n        else:\n            result[item] = 1\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    r = sorted([(abs(n-i), i) for i in range(1, n)])\n    return min(r, key=lambda x: x[0])[1]\n",
        "num_ids": 46
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return int(str(N)[::-1])\n",
        "num_ids": 15
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    lst = []\n    for i in range(n-1,0,-1):\n        if n%i == 0:\n            lst.append(i)\n    lst.append(n)\n    diff = abs(n-lst[-1])\n    for i in lst:\n        if abs(n-i) < diff:\n            diff = abs(n-i)\n            result = i\n    return result\n",
        "num_ids": 111
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return int(str(N)[1]) if len(str(N)) > 1 else 0\n",
        "num_ids": 24
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N == 1:\n        return 0\n    if N == 2:\n        return 1\n    if N == 3:\n        return 2\n    if N == 4:\n        return 3\n    return closest_num(N-1) + 1\n",
        "num_ids": 70
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    if n == 0:\n        return n\n    \n    closest = n\n    for x in range(0, n):\n        if abs(n - x) < abs(n - closest):\n            closest = x\n    \n    return closest\n    \n    \ndef closest_num_simple(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    closest = n\n    for x in range(0, n):\n        if abs(n - x) < abs(n - closest):\n            closest = x\n    \n    return closest\n",
        "num_ids": 64
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N < 10:\n        return 0\n    elif N < 100:\n        return 9\n    elif N < 1000:\n        return 99\n    elif N < 10000:\n        return 999\n    elif N < 100000:\n        return 9999\n    else:\n        return 99999\n",
        "num_ids": 84
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 4:\n        return 1\n    elif N < 8:\n        return 2\n    elif N < 14:\n        return 3\n    else:\n        return 4\n",
        "num_ids": 45
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        return None\n    if N == 1:\n        return 1\n    if N == 2:\n        return 1\n    if N == 3:\n        return 2\n    if N == 4:\n        return 2\n    if N == 5:\n        return 3\n    if N == 6:\n        return 3\n    if N == 7:\n        return 4\n    if N == 8:\n        return 4\n    if N == 9:\n        return 5\n    if N == 10:\n        return 6\n    if N == 11:\n        return 6\n    if N == 12:\n        return 7\n    if N == 13:\n        return 8\n    if N == 14:\n        return 8\n    if N == 15:\n        return 9\n    if N == 16:\n        return 9\n    if N == 17:\n        return 10\n    if N == 18:\n        return 10\n    if N == 19:\n        return 11\n    if N == 20:\n        return 11\n    if N == 21:\n        return 12\n    if N == 22:\n        return 12\n    if N == 23:\n        return 13\n    if N == 24:\n        return 13\n    if N == 25:\n        return 14\n    if N == 26:\n        return 14\n    if N == 27:\n        return 15\n    if N == 28:\n        return 15\n    if N == 29:\n        return 16\n    if N == 30:\n        return 16\n    if N == 31:\n        return 17\n    if N == 32:\n        return 17\n    if N == 33:\n        return 18\n    if N == 34:\n        return 18\n    if N == 35:\n        return 19\n    if N == 36:\n        return 19\n    if N == 37:\n        return 20\n    if N == 38:\n        return 20\n    if N == 39:\n        return 21\n    if N == 40:\n        return 21\n    if N == 41:\n        return 22\n    if N == 42:\n        return 22\n    if N == 43:\n        return 23\n    if N == 44:\n        return 23\n    if N == 45:\n        return 24\n    if N == 46:\n        return 24\n    if N == 47:\n        return 25\n    if N == 48:\n        return 25\n    if N == 49:\n        return 26\n    if N == 50:\n        return 26\n    if N == 51:\n        return 27\n    if N == 52:\n        return 27\n    if N == 53:\n        return 28\n    if N == 54:\n        return 28\n    if N == 55:\n        return 29\n    if N == 56:\n        return 29\n    if N == 57:\n        return 30\n    if N == 58:\n        return 30\n    if N == 59:\n        return 31\n    if N == 60:\n        return 31\n    if N == 61:\n        return 32\n    if N == 62:\n        return 32\n    if N == 63:\n        return 33\n    if N == 64:\n        return 33\n    if N == 65:\n        return 34\n    if N == 66:\n        return 34\n    if N == 67:\n        return 35\n    if N == 68:\n        return 35\n    if N == 69:\n        return 36\n    if N == 70:\n        return 36\n    if N == 71:\n        return 37\n    if N == 72:\n        return 37\n    if N == 73:\n        return 38\n    if N == 74:\n        return 38\n    if N == 75:\n        return 39\n    if N == 76:\n        return 39\n    if N == 77:\n        return 40\n    if N == 78:\n        return 40\n    if N == 79:\n        return 41\n    if N == 80:\n        return 41\n    if N == 81:\n        return 42\n    if N == 82:\n        return 42\n    if N == 83:\n        return 43\n    if N == 84:\n        return 43\n    if N == 85:\n        return 44\n    if N == 86:\n        return 44\n    if N == 87:\n        return 45\n    if N == 88:\n        return 45\n    if N == 89:\n        return 46\n    if N == 90:\n        return 46\n    if N == 91:\n        return 47\n    if N == 92:\n        return 47\n    if N == 93:\n        return 48\n    if N == 94:\n        return 48\n    if N == 95:\n        return 49\n    if N == 96:\n        return 49\n    if N == 97:\n        return 50\n    if N == 98:\n        return 50\n    if N == 99:\n        return 51\n    if N == 100:\n        return 51\n    if N == 101:\n        return 52\n    if N == 102:\n        return 52\n    if N == 103:\n        return 53\n    if N == 104:\n        return 53\n    if N == 105:\n        return 54\n    if N == 106:\n        return 54\n    if N == 107:\n        return 55\n    if N == 108:\n        return 55\n    if N == 109:\n        return 56\n    if N == 110:\n        return 56\n    if N == 111:\n        return 57\n    if N == 112:\n        return 57\n    if N == 113:\n        return 58\n    if N == 114:\n        return 58\n    if N == 115:\n        return 59\n    if N == 116:\n        return 59\n    if N == 117:\n        return 60\n    if N == 118:\n        return 60\n    if N == 119:\n        return 61\n    if N == 120:\n        return 61\n    if N == 121:\n        return 62\n    if N == 122:\n        return 62\n    if N == 123:\n        return 63\n    if N == 124:\n        return 63\n    if N == 125:\n        return 64\n    if N == 126:\n        return 64\n    if N == 127:\n        return 65\n    if N == 128:\n        return 65\n    if N == 129:\n        return 66\n    if N == 130:\n        return 66\n    if N == 131:\n        return 67\n    if N == 132:\n        return 67\n    if N == 133:\n        return 68\n    if N == 134:\n        return 68\n    if N == 135:\n        return 69\n    if N == 136:\n        return 69\n    if N == 137:\n        return 70\n    if N == 138:\n        return 70\n    if N == 139:\n        return 71\n    if N == 140:\n        return 71\n    if N == 141:\n        return 72\n    if N == 142:\n        return 72\n    if N == 143:\n        return 73\n    if N == 144:\n        return 73\n    if N == 145:\n        return 74\n    if N == 146:\n        return 74\n    if N == 147:\n        return 75\n    if N == 148:\n        return 75\n    if N == 149:\n        return 76\n    if N == 150:\n        return 76\n    if N == 151:\n        return 77\n    if N == 152:\n        return 77\n    if N == 153:\n        return 78\n    if N == 154:\n        return 78\n    if N == 155:\n        return 79\n    if N == 156:\n        return 79\n    if N == 157:\n        return 80\n    if N == 158:\n        return 80\n    if N == 159:\n        return 81\n    if N == 160:\n        return 81\n    if N == 161:\n        return 82\n    if N == 162:\n        return 82\n    if N == 163:\n        return 83\n    if N == 164:\n        return 83\n    if N == 165:\n        return 84\n    if N == 166:\n        return 84\n    if N == 167:\n        return 85\n    if N == 168:\n        return 85\n    if N == 169:\n        return 86\n    if N == 170:\n        return 86\n    if N == 171:\n        return 87\n    if N == 172:\n        return 87\n    if N == 173:\n        return 88\n    if N == 174:\n        return 88\n    if N == 175:\n        return 89\n    if N == 176:\n        return 89\n    if N == 177:\n        return 90\n    if N == 178:\n        return 90\n    if N == 179:\n        return 91\n    if N == 180:\n        return 91\n    if N == 181:\n        return 92\n    if N == 182:\n        return 92\n    if N == 18",
        "num_ids": 2020
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(len(i))\n    print max(list2)\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    res = len(list1[0])\n    for word in list1:\n        if len(word) > res:\n            res = len(word)\n    return res\n",
        "num_ids": 43
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_len = []\n    for i in list1:\n        word_len.append(len(i))\n    return max(word_len)\n",
        "num_ids": 38
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = [len(item) for item in list1]\n    return max(list2)\n",
        "num_ids": 26
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max=0\n    for i in range(len(list1)):\n        if len(list1[i])>max:\n            max=len(list1[i])\n    return max\ndef len_log1(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    temp=[]\n    for i in range(len(list1)):\n        temp.append(len(list1[i]))\n    max=max(temp)\n    return max\ndef sorted_by_char(list1):\n    '''\n    Write a python function to sort the words by the alphabetical order of the characters in each word.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i].lower()\n    list1.sort()\n    return list1\ndef sorted_by_len(list1):\n    '''\n    Write a python function to sort the words by the length of the word.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i].lower()\n    temp=[]\n    for i in range(len(list1)):\n        temp.append(len(list1[i]))\n    temp.sort()\n    temp=temp[::-1]\n    for i in range(len(list1)):\n        list1[i]=list1[i][::-1]\n    for i in range(len(list1)):\n        list1[i]=list1[i][::-1]\n    return list1\ndef sorted_by_len1(list1):\n    '''\n    Write a python function to sort the words by the length of the word.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i].lower()\n    temp=[]\n    for i in range(len(list1)):\n        temp.append(len(list1[i]))\n    temp.sort()\n    temp=temp[::-1]\n    for i in range(len(list1)):\n        list1[i]=list1[i][::-1]\n    return list1\ndef sorted_by_len2(list1):\n    '''\n    Write a python function to sort the words by the length of the word.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i].lower()\n    temp=[]\n    for i in range(len(list1)):\n        temp.append(len(list1[i]))\n    temp.sort()\n    temp=temp[::-1]\n    for i in range(len(list1)):\n        list1[i]=list1[i][::-1]\n    return list1\ndef reverse(list1):\n    '''\n    Write a python function to reverse the words in the list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i][::-1]\n    return list1\ndef length(list1):\n    '''\n    Write a python function to find the length of the longest word in the list.\n    '''\n    max=0\n    for i in range(len(list1)):\n        if len(list1[i])>max:\n            max=len(list1[i])\n    return max\ndef length1(list1):\n    '''\n    Write a python function to find the length of the longest word in the list.\n    '''\n    temp=[]\n    for i in range(len(list1)):\n        temp.append(len(list1[i]))\n    max=max(temp)\n    return max\ndef length2(list1):\n    '''\n    Write a python function to find the length of the longest word in the list.\n    '''\n    temp=[]\n    for i in range(len(list1)):\n        temp.append(len(list1[i]))\n    max=max(temp)\n    return max\ndef length3(list1):\n    '''\n    Write a python function to find the length of the longest word in the list.\n    '''\n    temp=[]\n    for i in range(len(list1)):\n        temp.append(len(list1[i]))\n    max=max(temp)\n    return max\ndef length4(list1):\n    '''\n    Write a python function to find the length of the longest word in the list.\n    '''\n    temp=[]\n    for i in range(len(list1)):\n        temp.append(len(list1[i]))\n    max=max(temp)\n    return max\ndef count_word(list1,word):\n    '''\n    Write a python function to count the number of times a word occurs in the list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if word==list1[i]:\n            count+=1\n    return count\ndef count_word1(list1,word):\n    '''\n    Write a python function to count the number of times a word occurs in the list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if word==list1[i]:\n            count+=1\n    return count\ndef count_word2(list1,word):\n    '''\n    Write a python function to count the number of times a word occurs in the list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if word==list1[i]:\n            count+=1\n    return count\ndef count_word3(list1,word):\n    '''\n    Write a python function to count the number of times a word occurs in the list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if word==list1[i]:\n            count+=1\n    return count\ndef count_word4(list1,word):\n    '''\n    Write a python function to count the number of times a word occurs in the list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if word==list1[i]:\n            count+=1\n    return count\ndef count_word5(list1,word):\n    '''\n    Write a python function to count the number of times a word occurs in the list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if word==list1[i]:\n            count+=1\n    return count\ndef count_word6(list1,word):\n    '''\n    Write a python function to count the number of times a word occurs in the list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if word==list1[i]:\n            count+=1\n    return count\ndef count_word7(list1,word):\n    '''\n    Write a python function to count the number of times a word occurs in the list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if word==list1[i]:\n            count+=1\n    return count\ndef count_word8(list1,word):\n    '''\n    Write a python function to count the number of times a word occurs in the list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if word==list1[i]:\n            count+=1\n    return count\ndef count_word9(list1,word):\n    '''\n    Write a python function to count the number of times a word occurs in the list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if word==list1[i]:\n            count+=1\n    return count\ndef count_word10(list1,word):\n    '''\n    Write a python function to count the number of times a word occurs in the list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if word==list1[i]:\n            count+=1\n    return count\ndef count_word11(list1,word):\n    '''\n    Write a python function to count the number of times a word occurs in the list.\n    '''\n    count=0\n    for i in range(len(list1)):\n    ",
        "num_ids": 21
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(\"The length of the longest word is : \"+str(max(len(i) for i in list1)))\n    return list1\n",
        "num_ids": 34
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = list(list1)\n    length = 0\n    for i in range(len(list2)):\n        if len(list2[i]) > length:\n            length = len(list2[i])\n    return length\n",
        "num_ids": 58
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    list2 = []\n    \n    for i in list1:\n        if len(i) > len(list2[0]):\n            list2[0] = i\n        \n        elif len(i) == len(list2[0]):\n            list2.append(i)\n    \n    return list2\n    \nprint len_log([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"])\nprint len_log([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"])\nprint len_log([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"])\n",
        "num_ids": 175
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    str2=''\n    for i in list1:\n        if len(i)>len(str2):\n            str2=i\n    print str2, 'is the longest word in the list.'\n",
        "num_ids": 50
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(len(i))\n    return max(list2)\n",
        "num_ids": 35
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return True if sub_str in str1 else False\n    #return True if any(sub_str in s for s in str1) else False\n",
        "num_ids": 36
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in sub_str:\n        if str1.find(i)==-1:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    n = len(sub_str)\n    j = 0\n    if len(str1) < n:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = []\n    if len(sub_str) > len(str1):\n        return result\n    for i in xrange(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            result.append(i)\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = []\n    for each in str1:\n        if each in sub_str:\n            result.append(each)\n    if len(result) == len(str1):\n        return 'True'\n    else:\n        return 'False'\n",
        "num_ids": 61
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring_list(str1, sub_str_list):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for sub_str in sub_str_list:\n        if sub_str in str1:\n            return True\n    return False\n    \ndef find_substring_with_re(str1, sub_str_re):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    import re\n    if re.search(sub_str_re, str1):\n        return True\n    return False\n    \ndef find_substring_with_re_list(str1, sub_str_re_list):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for sub_str_re in sub_str_re_list:\n        if re.search(sub_str_re, str1):\n            return True\n    return False\n    \ndef find_substring_with_all(str1, sub_str_list, sub_str_re_list):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if find_substring_with_re_list(str1, sub_str_re_list) and find_substring_with_re_list(str1, sub_str_re_list):\n        return True\n    if find_substring_list(str1, sub_str_list) and find_substring_list(str1, sub_str_list):\n        return True\n    return False\n    \ndef get_in_str_or_list(str_list, str_or_list):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str_or_list in str_list:\n        return True\n    return False\n    \ndef get_in_str_or_list_with_re(str_list, str_or_list_re):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    import re\n    if re.search(str_or_list_re, str_list):\n        return True\n    return False\n    \ndef get_in_str_or_list_with_all(str_list, str_or_list, str_or_list_re):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if get_in_str_or_list_with_re(str_list, str_or_list_re) and get_in_str_or_list_with_re(str_list, str_or_list_re):\n        return True\n    if get_in_str_or_list(str_list, str_or_list) and get_in_str_or_list(str_list, str_or_list):\n        return True\n    return False\n    \ndef get_in_str_or_list_with_list(str_list, str_or_list, str_or_list_re_list):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for str_or_list_re in str_or_list_re_list:\n        if get_in_str_or_list_with_re(str_list, str_or_list_re):\n            return True\n    if get_in_str_or_list(str_list, str_or_list):\n        return True\n    return False\n    \ndef get_in_str_or_list_with_all_list(str_list, str_or_list, str_or_list_re_list):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if get_in_str_or_list_with_list(str_list, str_or_list, str_or_list_re_list) and get_in_str_or_list_with_list(str_list, str_or_list, str_or_list_re_list):\n        return True\n    if get_in_str_or_list(str_list, str_or_list) and get_in_str_or_list(str_list, str_or_list):\n        return True\n    return False\n    \ndef get_in_str_or_list_with_re_list(str_list, str_or_list_re_list):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    import re\n    for str_or_list_re in str_or_list_re_list:\n        if re.search(str_or_list_re, str_list):\n            return True\n    if re.search(str_or_list_re, str_list):\n        return True\n    return False\n    \ndef get_in_str_or_list_with_all_re_list(str_list, str_or_list_re_list):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if get_in_str_or_list_with_re_list(str_list, str_or_list_re_list):\n        return True\n    if get_in_str_or_list_with_re_list(str_list, str_or_list_re_list):\n        return True\n    return False\n    \ndef get_in_str_or_list_with_re_list_or_all(str_list, str_or_list_re_list, str_or_list):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if get_in_str_or_list_with_re_list(str_list, str_or_list_re_list):\n        return True\n    if get_in_str_or_list_with_re_list(str_list, str_or_list_re_list):\n        return True\n    if get_in_str_or_list(str_list, str_or_list):\n        return True\n    return False\n    \ndef get_in_str_or_list_with_all_re_list_or_all(str_list, str_or_list_re_list, str_or_list):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if get_in_str_or_list_with_re_list_or_all(str_list, str_or_list_re_list, str_or_list):\n        return True\n    if get_in_str_or_list_with_re_list_or_all(str_list, str_or_list_re_list, str_or_list):\n        return True\n    if get_in_str_or_list(str_list, str_or_list):\n        return True\n    return False\n    \ndef get_in_str_or_list_with_re_list_or_all_re_list_or_all(str_list, str_or_list_re_list, str_or_list):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if get_in_str_or_list_with_re_list_or_all(str_list, str_or_list_re_list, str_or_list):\n        return True\n    if get_in_str_or_list_with_re_list_or_all(str_list, str_or_list_re_list, str_or_list):\n        return True\n    if get_in_str",
        "num_ids": 103
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    while i < len(str1):\n        if str1[i:i + len(sub_str)] == sub_str:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    if not sub_str:\n        return True\n",
        "num_ids": 16
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for each in str1:\n        if each in sub_str:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    l = list(str(n))\n    if l == l[::-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    n = str(n)\n    len_n = len(n)\n    \n    if len_n % 2!= 0: \n        return False\n    \n    mid = int(len_n / 2)\n    \n    for i in xrange(mid):\n        if int(n[i])!= int(n[-(i + 1)]):\n            return False\n    \n    return True\n",
        "num_ids": 98
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    #if the number is even and in the range of 1 to 100\n    if n % 2 == 0 and 1 <= n <= 100:\n        #iterate over the number's digits, starting from the right most digit\n        for i in range(len(str(n)) - 1, 0, -1):\n            #multiply the number of the right most digit with the left most digit\n            #and add the result to the previous number\n            num_1 = int(str(n)[i - 1]) * int(str(n)[i])\n            num_2 = int(str(n)[i - 2]) * int(str(n)[i - 1])\n            num_3 = int(str(n)[i - 3]) * int(str(n)[i - 2])\n            if num_1 + num_2 + num_3 == n:\n                return True\n        return False\n    #if the number is odd and in the range of 1 to 100\n    elif n % 2 == 1 and 1 <= n <= 100:\n        #iterate over the number's digits, starting from the right most digit\n        for i in range(len(str(n)) - 1, 0, -1):\n            #multiply the number of the right most digit with the left most digit\n            #and add the result to the previous number\n            num_1 = int(str(n)[i - 1]) * int(str(n)[i])\n            num_2 = int(str(n)[i - 2]) * int(str(n)[i - 1])\n            num_3 = int(str(n)[i - 3]) * int(str(n)[i - 2])\n            if num_1 + num_2 + num_3 == n:\n                return True\n        return False\n    #if the number is neither even nor odd and in the range of 1 to 100\n    else:\n        return False\n",
        "num_ids": 434
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return False\n    s = str(n)\n    return all(int(s[i]) > int(s[i+1]) for i in range(len(s)-1))\n",
        "num_ids": 52
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    rev = 0\n    while n:\n        rev = rev*10 + n%10\n        n /= 10\n    if n == rev:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if len(n) < 2: \n        return False\n    for i in range(len(n)-1):\n        if abs(int(n[i]) - int(n[i+1])) > 1:\n            return False\n    return True\n    \ndef is_undulating_fast(n):\n    '''\n    Write a faster function to check whether the given number is undulating or not.\n    '''\n    if len(n) < 2: \n        return False\n    for i in range(len(n)-1):\n        if abs(int(n[i]) - int(n[i+1])) > 1:\n            return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 5: \n        return True\n    s = str(n)\n    prev = int(s[0])\n    for i in range(1, len(s)): \n        curr = int(s[i])\n        if curr < prev: \n            return False\n        prev = curr\n    return True\n",
        "num_ids": 81
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n**0.5%1==0)\n",
        "num_ids": 16
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def digit(n,i): \n        if n == 0: \n            return False\n        return n % 10 == i\n    if len(str(n)) % 2!= 0: \n        return False\n    return all(digit(n,i) == digit(n,i+1) for i in range(len(str(n))/2))\n",
        "num_ids": 86
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10: return True\n    digit = n % 10\n    #print (digit, n // 10)\n    if digit == 0 or n // 10!= digit: return False\n    return is_undulating(n // 10)\n",
        "num_ids": 57
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==1:\n        return a\n    elif b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 42
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    elif b>1:\n        return a*power(a,b-1)\n",
        "num_ids": 46
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==0):\n        return 1\n    elif(b==1):\n        return a\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 44
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==1:\n        return a\n    if b%2==0:\n        return power(a*a,b/2)\n    return a*power(a*a,(b-1)/2)\n",
        "num_ids": 53
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b % 2 == 0:\n        return power(a, b/2) * power(a, b/2)\n    else:\n        return a * power(a, b - 1)\n",
        "num_ids": 72
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a,abs(b))\n    elif b > 0:\n        return power(a,b-1) * a\n    return\n",
        "num_ids": 58
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    if not isinstance(a, int) and not isinstance(a, float):\n        raise ValueError('Invalid argument')\n    if not isinstance(b, int):\n        raise ValueError('Invalid argument')\n",
        "num_ids": 53
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # Hint:\n    # use the for loop to iterate b times\n    # for each iteration, you should calculate a times a\n    # for example, for b = 2, your function should calculate (a*a) * (a*a)\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    return a * power(a,b-1)\n",
        "num_ids": 94
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n    \n",
        "num_ids": 10
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b<0:\n        a=1/a\n        b=-b\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b%2==0:\n        return (power(a,b/2))*(power(a,b/2))\n    else:\n        return (a*power(a,(b-1)/2))*(a*power(a,(b-1)/2))\n",
        "num_ids": 110
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = min(test_list,key=itemgetter(1))\n    return minimum\n",
        "num_ids": 24
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = test_list[0][1]\n    index_of_min = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            index_of_min = i\n    return index_of_min\n",
        "num_ids": 88
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key = itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list,key = itemgetter(1))[0][0]\n",
        "num_ids": 24
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list = sorted(test_list, key=itemgetter(1))\n    return test_list[0]\n",
        "num_ids": 31
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    index = 0\n    for i in range(1,len(test_list)):\n        if test_list[i][1] <= minimum[1]:\n            minimum = test_list[i]\n            index = i\n    return minimum[0]\n",
        "num_ids": 71
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Your code here\n    return min(test_list, key = itemgetter(1))[1]\n",
        "num_ids": 28
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Your code here\n    lst_len = len(lst)\n    lst_len_min = lst_len\n    for i in range(lst_len):\n        if len(lst[i]) < lst_len_min:\n            lst_len_min = len(lst[i])\n    return lst_len_min\n",
        "num_ids": 88
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = len(lst)\n    min_l = l\n    for i in lst:\n        if(min_l > len(i)):\n            min_l = len(i)\n    return min_l\n",
        "num_ids": 55
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Min_Length = float('inf')\n    for sublist in lst:\n        if len(sublist) < Min_Length:\n            Min_Length = len(sublist)\n    return Min_Length\n",
        "num_ids": 51
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if min_length > len(i):\n            min_length = len(i)\n    return min_length\n",
        "num_ids": 50
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(x) for x in lst])\n",
        "num_ids": 17
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #lst_length = []\n    if lst == []:\n        return 0\n    else:\n        #return len(lst[0])\n        return min([len(x) for x in lst])\n",
        "num_ids": 53
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for l in lst:\n        if min_length is None or len(l) < min_length:\n            min_length = len(l)\n    return min_length\n",
        "num_ids": 51
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 0\n    for lst in lst:\n        if len(lst) > min_len:\n            min_len = len(lst)\n    return min_len\n    \n    \nprint(Find_Min_Length([[1,2,3,4,5], [1,2,3,4], [1,2,3,4,5,6,7], [1,2,3,4,5,6], [1,2,3,4,5,6,7]]))\nprint(Find_Min_Length([[], [1,2,3,4,5], [1,2,3,4], [1,2,3,4,5,6,7], [1,2,3,4,5,6], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8]]))\nprint(Find_Min_Length
        "num_ids": 2010
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    temp_list=[]\n    for i in lst:\n        temp_list+=i\n    return min(temp_list)\ndef Find_Min_Length_2(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    temp_list=[]\n    for i in lst:\n        temp_list+=i\n    return min([len(i) for i in lst])\n    \ndef Find_Min_Length_3(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    temp_list=[]\n    for i in lst:\n        temp_list+=i\n    return min([len(i) for i in temp_list])\n",
        "num_ids": 40
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    Min = len(lst[0])\n    for i in range(len(lst)):\n        if Min > len(lst[i]):\n            Min = len(lst[i])\n    return Min\n",
        "num_ids": 69
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n > 2 and n % 2 == 0:\n        return 1\n    for i in range(3,n,2):\n        if n%i == 0:\n            return 1 + divisor(i) + divisor(n/i)\n    return 1\n",
        "num_ids": 87
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 2:\n        return 1\n    else:\n        counter = 0\n        for d in range(1, n):\n            if n % d == 0:\n                counter += 1\n        return counter + 1\n",
        "num_ids": 53
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor += 1\n    return divisor\n",
        "num_ids": 42
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(2,n):\n        if n%i == 0:\n            divisors+=1\n    return divisors\n    \ndef sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of divisors of a given integer.\n    '''\n    return n*(n+1)/2\n    \ndef prime(n):\n    '''\n    Write a python function to check if a given integer is a prime number.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef power(n,m):\n    '''\n    Write a python function to find the power of a number.\n    '''\n    if m == 0:\n        return 1\n    else:\n        return n*power(n,m-1)\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n<0:\n        print('Invalid number!')\n    elif n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n",
        "num_ids": 45
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return divisor(n-1) + divisor(n-2) + divisor(n-3)\n",
        "num_ids": 53
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "num_ids": 42
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        counter = 2\n        divisors = []\n        for i in range(2, n):\n            if n % i == 0:\n                counter += 1\n                divisors.append(i)\n        return counter, divisors\n",
        "num_ids": 84
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            div += 1\n    return div\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        div = [x for x in range(1, n + 1) if n % x == 0]\n        return len(div)\n",
        "num_ids": 60
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "num_ids": 42
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if item not in frequency_dict:\n            frequency_dict[item] = 1\n        else:\n            frequency_dict[item] += 1\n    return frequency_dict\n",
        "num_ids": 57
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for l in list1:\n        if l in d:\n            d[l] += 1\n        else:\n            d[l] = 1\n    return d\n",
        "num_ids": 46
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    \n    import collections\n    \n    list1 = [1,2,3,4,5,6,7,8,9]\n    \n    \n    flat_list = [x for sublist in list1 for x in sublist]\n    \n    freq = collections.Counter(flat_list)\n    \n    print freq\n    \n    return freq\n",
        "num_ids": 89
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    l = list1[:]\n    d = {}\n    for n in l:\n        if n in d:\n            d[n] = d[n] + 1\n        else:\n            d[n] = 1\n    return d\n",
        "num_ids": 58
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    frequency_dict = {}\n    \n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in frequency_dict:\n                frequency_dict[list1[i][j]] = 1\n            else:\n                frequency_dict[list1[i][j]] += 1\n    \n    return frequency_dict\n    \ndef order_lists(list1):\n    '''\n    Write a function to order the lists in list1 by descending order of frequency of elements, then ascending order by name. \n    Only the first name is considered when determining frequency. \n    '''\n    \n    frequency_dict = frequency_lists(list1)\n    \n    ordered_list = []\n    for i in frequency_dict:\n        ordered_list.append((frequency_dict[i], i))\n    \n    ordered_list = sorted(ordered_list, key = lambda x: (x[0], x[1]), reverse = True)\n    \n    ordered_list = [x[1] for x in ordered_list]\n    \n    return ordered_list\n",
        "num_ids": 111
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for item in list1:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts\n",
        "num_ids": 49
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for e in list1:\n        if e in d:\n            d[e] += 1\n        else:\n            d[e] = 1\n    return d\n",
        "num_ids": 46
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequencies = {}\n    for item in list1:\n        if item in frequencies.keys():\n            frequencies[item] += 1\n        else:\n            frequencies[item] = 1\n    return frequencies\n",
        "num_ids": 54
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    unique_elements = []\n    for item in list1:\n        if item not in unique_elements:\n            unique_elements.append(item)\n    freq = {}\n    for item in unique_elements:\n        freq[item] = list1.count(item)\n    return freq\n",
        "num_ids": 76
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    import collections\n    return collections.Counter(item for sublist in list1 for item in sublist)\n",
        "num_ids": 26
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n    \n    \nprint multiply_num([2, 2, 2, 2])\n",
        "num_ids": 50
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_multiplied = 1\n    for n in numbers:\n        numbers_multiplied *= n\n    return numbers_multiplied / len(numbers)\n",
        "num_ids": 41
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x*y, numbers) / len(numbers)\n",
        "num_ids": 24
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplied = 1\n    for num in numbers:\n        multiplied *= num\n    return multiplied / len(numbers)\n",
        "num_ids": 32
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    res = 1\n    for number in numbers:\n        res *= number\n    return res / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not numbers:\n        return 0\n    else:\n        result = 1\n        for n in numbers:\n            result *= n\n        return result / len(numbers)\n",
        "num_ids": 44
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    pass\n    total = 1\n    for number in numbers:\n        total *= number\n    return total/len(numbers)\n",
        "num_ids": 33
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result / len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for number in numbers:\n        num *= number\n    return num / len(numbers)\n    \n    \ndef addition(numbers):  \n    '''\n    Write a function to add all the numbers in a list.\n    '''\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum\n    \n    \ndef get_mean(numbers):  \n    '''\n    Write a function to get the mean of the numbers in a list.\n    '''\n    mean = 0\n    for number in numbers:\n        mean += number\n    mean /= len(numbers)\n    return mean\n    \n    \ndef create_list(size):\n    '''\n    Write a function that returns a list containing all the integers from 0 to size, inclusive.\n    '''\n    return range(size + 1)\n    \n    \ndef get_min(numbers):  \n    '''\n    Write a function to return the smallest number in a list.\n    '''\n    min = numbers[0]\n    for number in numbers:\n        if number < min:\n            min = number\n    return min\n    \n    \ndef get_max(numbers):  \n    '''\n    Write a function to return the largest number in a list.\n    '''\n    max = numbers[0]\n    for number in numbers:\n        if number > max:\n            max = number\n    return max\n    \n    \ndef get_median(numbers):  \n    '''\n    Write a function that returns the median of a list of numbers.\n    '''\n    numbers = sorted(numbers)\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers) / 2 - 1] + numbers[len(numbers) / 2]) / 2\n    else:\n        return numbers[len(numbers) / 2]\n    \n    \ndef main():\n    print(addition([1, 2, 3, 4]))\n    print(multiply_num([1, 2, 3, 4]))\n    print(get_mean([1, 2, 3, 4]))\n    print(get_min([1, 2, 3, 4]))\n    print(get_max([1, 2, 3, 4]))\n    print(get_median([1, 2, 3, 4]))\n    \n    \nmain()",
        "num_ids": 190
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    elif n == -1:\n        return '-1'\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n",
        "num_ids": 69
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bit = []\n    while n > 0:\n        bit.append(n % 2)\n        n //= 2\n    bit.reverse()\n    return \"\".join(str(bit))\n",
        "num_ids": 47
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    assert(type(n) == int)\n    n = int(n)\n    if n == 0:\n        return \"0\"\n    decimal_to_binary_helper(n,0)\n",
        "num_ids": 50
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '0'\n    if n > 1: \n        decimal_to_binary(n//2)\n    if n % 2 == 1: \n        return '1' + decimal_to_binary(n//2)\n    return decimal_to_binary(n//2)\n",
        "num_ids": 77
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n",
        "num_ids": 53
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n",
        "num_ids": 36
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    return n % 2 + 10 * decimal_to_binary(n // 2)\n",
        "num_ids": 32
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    if n < 0:\n        return decimal_to_binary(-n)\n    else:\n        remainder = n % 2\n        quotient = n // 2\n        return str(remainder) + decimal_to_binary(quotient)\n",
        "num_ids": 75
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace('0b','')\n",
        "num_ids": 16
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_length = len(str(num))\n    min_palindrome = 0\n    if num_length == 1:\n        return 1\n    elif num_length == 2:\n        return 10\n    else:\n        left = int('1' + '0'*(num_length - 2))\n        right = int('9'*(num_length - 2) + '0')\n        mid = int('9'*(num_length - 2))\n        while True:\n            if (mid + right) > (num - left):\n                left = mid + 1\n            else:\n                min_palindrome = left\n                mid += 1\n                right = mid + (10**(num_length - 2))\n            if right > (num - left):\n                break\n    return min_palindrome\n",
        "num_ids": 191
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    elif num < 10:\n        return 10\n    if num < 100:\n        return 11\n    if num < 1000:\n        return 1001\n    if num < 10000:\n        return 10001\n    if num < 100000:\n        return 100001\n    if num < 1000000:\n        return 1000001\n    if num < 10000000:\n        return 10000001\n    if num < 100000000:\n        return 100000001\n    if num < 1000000000:\n        return 1000000002\n    if num < 10000000000:\n        return 10000000001\n    if num < 1000000000:\n        return 1000000000\n    if num < 100000000:\n        return 1000000001\n    if num < 10000000000:\n        return 10000000001\n    if num < 1000000000:\n        return 10000000001\n    if num < 100000000:\n        return 1000000000\n    if num < 1000000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 1000000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n    if num < 100000000:\n        return 10000000001\n",
        "num_ids": 2002
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 9:\n        return num + 1\n    else:\n        return int(str(num) + str(num)[::-1])\n",
        "num_ids": 37
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return 11\n    elif num < 100:\n        return 100\n    elif num < 1000:\n        return 900\n    elif num < 10000:\n        return 9000\n    elif num < 100000:\n        return 90000\n    elif num < 1000000:\n        return 900000\n    elif num < 10000000:\n        return 9000000\n    else:\n        return 90000000\n        \ndef is_palindrome(num):\n    '''\n    Write a function to check whether an integer is a palindrome.\n    '''\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    for i in range(num,0,-1):\n        if str(i) == str(i)[::-1]:\n            return i\n",
        "num_ids": 35
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    num = str(num)\n    num_list = list(num)\n    max_num = len(num_list) - 1\n    reverse_list = num_list[::-1]\n    #print reverse_list\n",
        "num_ids": 57
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num - 1\n    while(not is_palindrome(num)):\n        num -= 1\n    return num + 1\n",
        "num_ids": 34
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num + 10\n    num = str(num)\n    if num[::-1] < num:\n        return int(num[::-1]) + 10\n    else:\n        return int(num)\n",
        "num_ids": 59
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 2\n    else:\n        num_length = len(str(num))\n        num_reverse = str(num)[::-1]\n        number = num_reverse[:num_length]\n        string = str(num)\n        temp = ''\n        for x in number:\n            temp += x\n        while int(temp) > int(num):\n            temp = int(temp) - int(num)\n            temp = str(temp)\n        return int(temp) + int(string)\n",
        "num_ids": 126
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    temp_num = num\n    #print temp_num\n    while temp_num > 0:\n        temp = temp_num\n        temp_num = temp_num - 1\n        #print temp_num\n        if is_palindrome(temp_num) == True:\n            #print \"FOUND IT\"\n            return temp_num\n    return -1\n",
        "num_ids": 86
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        raise ValueError(\"Invalid k. k should be within the range 1 to length of the array\")\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left+right)/2\n        if arr[mid] == k:\n            return k\n        elif arr[mid] > k:\n            right = mid-1\n        else:\n            left = mid+1\n    return None\n",
        "num_ids": 116
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        pivot = int((low + high) / 2)\n        pivot_value = arr[pivot]\n        if pivot_value == k:\n            return k\n        elif pivot_value > k:\n            high = pivot - 1\n        else:\n            low = pivot + 1\n    return -1\n",
        "num_ids": 96
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    def partition(arr, start, end):\n        pivot = arr[end]\n        p = start\n        for i in range(start, end):\n            if arr[i] < pivot:\n                arr[p], arr[i] = arr[i], arr[p]\n                p += 1\n        arr[p], arr[end] = arr[end], arr[p]\n        return p\n    \n    def find_kth_element(arr, start, end):\n        if start == end:\n            return arr[start]\n        p = partition(arr, start, end)\n        if p == k:\n            return arr[p]\n        elif p > k:\n            return find_kth_element(arr, start, p-1)\n        else:\n            return find_kth_element(arr, p+1, end)\n    \n    return find_kth_element(arr, 0, len(arr)-1)\n",
        "num_ids": 225
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n",
        "num_ids": 9
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        pivot = partition(arr, low, high)\n        if k > pivot:\n            low = pivot + 1\n        elif k < pivot:\n            high = pivot - 1\n        else:\n            return arr[k]\n    return arr[-1]\n",
        "num_ids": 85
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return None\n    return arr[(k-1)%len(arr)]\n",
        "num_ids": 31
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n",
        "num_ids": 11
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    \n    is_first = True\n    result = ''\n    for i in range(len(word)):\n        char = word[i]\n        if char == '_':\n            if is_first:\n                is_first = False\n            else:\n                result += '_'\n        else:\n            if is_first:\n                result += char.upper()\n            else:\n                result += char\n    return result\n",
        "num_ids": 111
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #method 1\n    if not word:\n        return ''\n",
        "num_ids": 17
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) <= 1:\n        return word\n    if word[0] == word[1]:\n        return word[0].upper() + snake_to_camel(word[2:])\n    return word[0].upper() + snake_to_camel(word[1:])\n",
        "num_ids": 72
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0]+''.join(x.title() for x in words[1:])\n",
        "num_ids": 34
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    arr = word.split('_')\n    for i in range(len(arr)):\n        if arr[i] == '':\n            continue\n        else:\n            arr[i] = arr[i][0].upper() + arr[i][1:]\n    return ''.join(arr)\n",
        "num_ids": 72
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    elif len(word) == 1:\n        return word[0].upper()\n    else:\n        return word[0].upper() + word[1:].lower()\n",
        "num_ids": 53
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_array = word.split('_')\n    word_array[0] = word_array[0].capitalize()\n    return ''.join(word_array)\n",
        "num_ids": 43
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert to lower case\n    word = word.lower()\n    # split on '-'\n    if '-' in word:\n        words = word.split('-')\n    else:\n        words = [word]\n    # convert the first letter of each word to upper case\n    words = [w[0].upper() + w[1:] for w in words]\n    # join the words\n    return ''.join(words)\n",
        "num_ids": 102
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_list = word.split('_')\n    #print word_list\n    first_char = word_list[0]\n    rest_list = word_list[1:]\n    new_word = first_char.lower()\n    for item in rest_list:\n        new_word += item[0].upper() + item[1:].lower()\n    return new_word\n",
        "num_ids": 92
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('_','')\n    word = word.title()\n    return word[0].lower() + word[1:]\n",
        "num_ids": 36
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Your code here\n    if n == 1:\n        return 1\n    if m == 1:\n        return 0\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n",
        "num_ids": 58
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*(n-1)/2 + m*(m-1)/2\n",
        "num_ids": 22
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    elif n == 1:\n        return m + 1\n    else:\n        return m + eulerian_num(n-1, m-1)\n",
        "num_ids": 62
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num = 0\n    if n < m:\n        n, m = m, n\n    if n % 2 == 0:\n        num += n / 2\n    else:\n        num += n / 2 + 1\n    return num\n",
        "num_ids": 56
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return m\n    elif m == 0:\n        return 0\n    else:\n        return m*eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n",
        "num_ids": 73
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # find the matrix\n    matrix = []\n    for i in range(n):\n        matrix.append([])\n        for j in range(m):\n            matrix[i].append(0)\n",
        "num_ids": 51
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    matrix = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(1, m + 1):\n        matrix[0][i] = i\n    for i in range(1, n + 1):\n        matrix[i][0] = i\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == 0:\n                matrix[i][j] = j\n            elif j == 0:\n                matrix[i][j] = i\n            elif matrix[i - 1][j] < matrix[i][j - 1]:\n                matrix[i][j] = matrix[i][j - 1] + n - i + 1\n            else:\n                matrix[i][j] = matrix[i - 1][j] + m - j + 1\n    return matrix[n][m]\n",
        "num_ids": 220
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def tautology(a, b, n, m):\n        '''\n        Checks if the 2-graph a(n, m) is tautology.\n        '''\n        if a == 0:\n            return 0\n        elif a == 1:\n            return 1\n        elif a == -1:\n            if b == 1:\n                return 0\n            elif b == 0:\n                return 1\n            else:\n                return -1\n        else:\n            return -1\n",
        "num_ids": 75
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i % j == 0:\n                euler += 1\n    return euler\n",
        "num_ids": 54
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [0]*(n+1)\n    for i in range(m):\n        a[i] += 1\n        a[i+1] += 1\n    for i in range(m, n+1):\n        a[i] += 1\n        a[i-1] += 1\n    total = 0\n    for i in range(n+1):\n        total += a[i]\n    return total\n",
        "num_ids": 101
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sub_lists = []\n    for item in input_list:\n        if type(item) is list:\n            sub_lists.append(item)\n    for i in range(len(sub_lists)):\n        sub_lists[i].sort()\n    \n    res = []\n    for sub_list in sub_lists:\n        res.extend(sub_list)\n    return res\n",
        "num_ids": 95
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_sorted = []\n    for sublist in input_list:\n        sublist_sorted.append(sorted(sublist))\n    return sublist_sorted\n",
        "num_ids": 45
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[s[i] for s in input_list] for i in range(len(input_list[0]))]\n",
        "num_ids": 32
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list = [['a', 'b', 'c', 'd', 'e'], ['b', 'c', 'd', 'e'], ['c', 'd', 'e'], ['d', 'e'], ['e'], ['f'], ['g', 'h', 'i', 'j', 'k']]\n    \n    #Iterate through each list in the input list\n    for index, list in enumerate(input_list):\n        #If the list is longer than 1, sort it\n        if len(list) > 1:\n            #Sort the list\n            list.sort()\n            #Replace the list with the sorted list\n            input_list[index] = list\n    \n    #Return the sorted list\n    return input_list\n    \nprint(sort_sublists(input_list)",
        "num_ids": 191
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return_list = []\n    for inner_list in input_list:\n        return_list.append(sorted(inner_list))\n",
        "num_ids": 35
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(sub) for sub in input_list]\n",
        "num_ids": 18
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key = lambda x: len(x))\n",
        "num_ids": 20
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return_list = []\n    for i in input_list:\n        i.sort()\n        return_list.append(i)\n",
        "num_ids": 34
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Uncomment the next line to see how the function works\n    # print(input_list)\n    # return [sorted(list) for list in input_list]\n    # Your code here\n    result = []\n    for sublist in input_list:\n        result.append(sorted(sublist))\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n",
        "num_ids": 39
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst1 = [1 if x else 0 for x in lst]\n    return len(lst1) - lst1.count(0)\n",
        "num_ids": 38
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([bool(element) for element in lst])\n",
        "num_ids": 17
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i])\ndef fibonacci(n):\n    '''\n    Write a python function to compute fibonacci series upto n.\n    '''\n    lst=[0,1]\n    if n>1:\n        for i in xrange(2,n+1):\n            lst.append(lst[-2]+lst[-1])\n    return lst\ndef index(lst,val):\n    '''\n    Write a python function to return the index of the first occurance of val in the list.\n    '''\n    return lst.index(val)\ndef sort(lst):\n    '''\n    Write a python function to sort the given list of integers.\n    '''\n    return sorted(lst)\ndef cumsum(lst):\n    '''\n    Write a python function to compute cumulative sum of a list.\n    '''\n    lst=lst[::-1]\n    cum=[]\n    for i in xrange(1,len(lst)+1):\n        cum.append(lst[-i]+cum[-i])\n    return cum[::-1]\ndef findval(lst,val):\n    '''\n    Write a python function to return the index of the first occurance of val in the list.\n    '''\n    return lst.index(val)\ndef palindrome(val):\n    '''\n    Write a python function to check whether a string is palindrome.\n    '''\n    return val==val[::-1]\ndef histogram(val):\n    '''\n    Write a python function to return a list with count of each char in the string.\n    '''\n    return [val.count(i) for i in set(val)]\ndef isunique(val):\n    '''\n    Write a python function to check whether a string is unique.\n    '''\n    return len(set(val))==len(val)\ndef isprime(val):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    return len([i for i in xrange(2,val/2) if not val%i])==0\ndef reverse(val):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return val[::-1]\ndef convert(val):\n    '''\n    Write a python function to convert decimal integer to binary.\n    '''\n    return bin(val)\ndef convertbinary(val):\n    '''\n    Write a python function to convert binary to decimal.\n    '''\n    return int(val,2)\ndef diff(val):\n    '''\n    Write a python function to return list of difference between adjacent numbers.\n    '''\n    return [abs(val[i]-val[i+1]) for i in xrange(len(val)-1)]\ndef isleap(val):\n    '''\n    Write a python function to check if year is a leap year or not.\n    '''\n    return ((val%4==0) and (val%100!=0)) or (val%400==0)\ndef factorial(val):\n    '''\n    Write a python function to compute factorial of the given number.\n    '''\n    return reduce(lambda x,y:x*y, range(1,val+1))\ndef ispandigital(val):\n    '''\n    Write a python function to check whether a given string contains all digits from 1 to n (n is length of string).\n    '''\n    return len(set(val))==len(val) and '0' not in val\ndef comp(val):\n    '''\n    Write a python function to compare two strings.\n    '''\n    return (val==val[::-1])\ndef split(val):\n    '''\n    Write a python function to split the string.\n    '''\n    return val.split()\ndef splitonpunc(val):\n    '''\n    Write a python function to split a string on all the characters except punctuations.\n    '''\n    return val.split(\" \")\ndef iseven(val):\n    '''\n    Write a python function to check whether a number is even or not.\n    '''\n    return val%2==0\ndef lcm(val):\n    '''\n    Write a python function to compute lcm of two numbers.\n    '''\n    return val*(val/gcd(val))\ndef gcd(val):\n    '''\n    Write a python function to compute gcd of two numbers.\n    '''\n    x=max(val)\n    y=min(val)\n    while y:\n        x,y=y,x%y\n    return x\ndef prime(val):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    return len([i for i in xrange(2,val/2) if not val%i])==0\ndef ispermutation(val):\n    '''\n    Write a python function to check whether two strings are permutations of each other or not.\n    '''\n    return sorted(val)==list(val)\ndef factorial(val):\n    '''\n    Write a python function to compute factorial of the given number.\n    '''\n    return reduce(lambda x,y:x*y, range(1,val+1))\ndef isvalidparentheses(val):\n    '''\n    Write a python function to check whether a string is valid parantheses or not.\n    '''\n    return len(val)==2 and (val=='()' or val=='[]' or val=='{}')\ndef isbalanced(val):\n    '''\n    Write a python function to check whether a string is balanced or not.\n    '''\n    return len(val)%2==0 and (len(set(val))==1 or len(set(val))==0)\ndef isanagram(val):\n    '''\n    Write a python function to check whether a string is anagram or not.\n    '''\n    return len(val)==len(set(val)) and sorted(val)==sorted(val,reverse=True)\ndef bsearch(lst,val):\n    '''\n    Write a python function to do a binary search on a sorted list.\n    '''\n    return bisect(lst,val)\ndef topk(lst,k):\n    '''\n    Write a python function to find the k maximum values in a list.\n    '''\n    return heapq.nlargest(k,lst)\ndef multiset(val):\n    '''\n    Write a python function to return a dictionary with count of each value in the given list.\n    '''\n    return Counter(val)\ndef ispalindrome(val):\n    '''\n    Write a python function to check whether a string is a palindrome.\n    '''\n    return val==val[::-1]\ndef ispower(val):\n    '''\n    Write a python function to check whether a number is a power of another number.\n    '''\n    return val%1==0 and val!=1 and (val**(1/2))%1==0\ndef iscyclic(val):\n    '''\n    Write a python function to check whether a string has all characters repeating or not.\n    '''\n    return len(set(val))==len(val)\ndef permute(val):\n    '''\n    Write a python function to generate all permutations of a given string.\n    '''\n    return [''.join(i) for i in itertools.permutations(val)]\ndef encrypt(val,key):\n    '''\n    Write a python function to encrypt a string with a given key.\n    '''\n    return ''.join([chr((ord(i)-ord(j))%26+ord('A')) if i!=j else i for i,j in zip(val,key*len(val))])\ndef ispalin(val):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return val==val[::-1]\ndef isint(val):\n    '''\n    Write a python function to check whether a given string is an integer or not.\n    '''\n    return val.isdigit()\ndef isodd(val):\n    '''\n    Write a python function to check whether a number is odd or not.\n    '''\n    return val%2!=0\ndef ischar(val)",
        "num_ids": 17
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    from collections import Counter\n    res = Counter(lst)\n    for key in res:\n        if res[key]%2:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(map(bool, lst))\n",
        "num_ids": 14
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(True for x in lst)\ndef dna(lst):\n    '''\n    Write a python function to count a given value in the list of lists.\n    '''\n    return lst.count(value)\ndef dna2(lst):\n    '''\n    Write a python function to count the true value in the nested list.\n    '''\n    return sum([dna(x) for x in lst])\ndef dna3(lst):\n    '''\n    Write a python function to find the length of the longest list in the given list.\n    '''\n    return max([len(x) for x in lst])\ndef dna4(lst):\n    '''\n    Write a python function to find the element with the max value in the list.\n    '''\n    return max(lst, key=len)\ndef is_ascending(lst):\n    '''\n    Write a python function to check if the given list is ascending.\n    '''\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\ndef is_descending(lst):\n    '''\n    Write a python function to check if the given list is descending.\n    '''\n    return all(lst[i] >= lst[i+1] for i in range(len(lst)-1))\ndef is_ascending2(lst):\n    '''\n    Write a python function to check if the given list is ascending.\n    '''\n    return all(x<=y for x,y in zip(lst, lst[1:]))\ndef is_descending2(lst):\n    '''\n    Write a python function to check if the given list is descending.\n    '''\n    return all(x>=y for x,y in zip(lst, lst[1:]))\ndef palindrome(lst):\n    '''\n    Write a python function to check if the given list is palindrome.\n    '''\n    return lst == lst[::-1]\ndef is_perm(lst1, lst2):\n    '''\n    Write a python function to check if the given lists are permutations.\n    '''\n    return sorted(lst1) == sorted(lst2)\ndef duplicate(lst):\n    '''\n    Write a python function to check if the given list has duplicate elements.\n    '''\n    return len(lst)!= len(set(lst))\ndef is_pandigital(lst):\n    '''\n    Write a python function to check if the given list is pandigital.\n    '''\n    return len(lst) == 9 and len(set(lst)) == 9\ndef is_pandigital2(lst):\n    '''\n    Write a python function to check if the given list is pandigital.\n    '''\n    return len(lst) == 9 and len(set(lst)) == 9\ndef is_pandigital3(lst):\n    '''\n    Write a python function to check if the given list is pandigital.\n    '''\n    return len(lst) == 9 and len(set(lst)) == 9\ndef is_perfect(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect2(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect3(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect4(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect5(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect6(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect7(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect8(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect9(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect10(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect11(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect12(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect13(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect14(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect15(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect16(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect17(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect18(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect19(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect20(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect21(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect22(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect23(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect24(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect25(lst):\n    '''\n    Write a python function to check if the given list is perfect.\n    '''\n    return sum(lst) == sum(set(lst))\ndef is_perfect26(lst):\n    '''\n    Write a python function to check if the give",
        "num_ids": 12
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst=eval(lst)\n    return sum(lst)\n",
        "num_ids": 20
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for item in lst:\n        if(item==True):\n            count+=1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(test_list) + test_tup\n",
        "num_ids": 16
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_list)!= len(test_tup):\n        raise Exception('Length of test list does not equal length of test tuples')\n    for (l, t) in zip(test_list, test_tup):\n        l.append(t)\n",
        "num_ids": 65
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    return test_tup\n",
        "num_ids": 22
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + test_list\n    return test_tup\n",
        "num_ids": 24
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        if i not in test_tup:\n            test_tup.append(i)\n    return test_tup\n",
        "num_ids": 40
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list.append(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_tup) > 1:\n        return tuple(add_lists(x, y) for x, y in zip(test_list, test_tup))\n    else:\n        return tuple(test_list + test_tup)\n",
        "num_ids": 62
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # test_tup = tuple(test_tup)\n    return test_list + test_tup\n",
        "num_ids": 28
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if type(test_tup) == list:\n        return test_list\n    elif type(test_tup) == tuple:\n        return test_tup + test_list\n    else:\n        return tuple([test_tup, test_list])\n",
        "num_ids": 64
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(list(test_list) + list(test_tup))\n",
        "num_ids": 21
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 is None or num2 is None or num3 is None:\n        return None\n    mergedList = []\n    if num1 and num2 and num3:\n        while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n            if num1[0] < num2[0] and num1[0] < num3[0]:\n                mergedList.append(num1[0])\n                num1 = num1[1:]\n            elif num2[0] < num1[0] and num2[0] < num3[0]:\n                mergedList.append(num2[0])\n                num2 = num2[1:]\n            else:\n                mergedList.append(num3[0])\n                num3 = num3[1:]\n        if len(num1) > 0:\n            mergedList += num1\n        elif len(num2) > 0:\n            mergedList += num2\n        else:\n            mergedList += num3\n    return mergedList\ndef topK(k,L):\n    '''\n    Given a sorted list, return the top k elements.\n    '''\n    if L is None:\n        return None\n    top = []\n    if k > len(L):\n        k = len(L)\n    for i in range(k):\n        top.append(L[i])\n    return top\ndef merge_sorted_list_2(num1,num2):\n    '''\n    Write a function to merge two lists. The list should be merged in ascending order.\n    '''\n    mergedList = []\n    if num1 and num2:\n        i,j = 0,0\n        while len(mergedList) < len(num1) + len(num2):\n            if i == len(num1) or (j!= len(num2) and num2[j] < num1[i]):\n                mergedList.append(num2[j])\n                j += 1\n            else:\n                mergedList.append(num1[i])\n                i += 1\n    return mergedList\ndef sort_list_in_place(L):\n    '''\n    Sort a list in-place. You are not allowed to use any sort function that\n    can be used in a for loop.\n    '''\n    if L is None:\n        return None\n    if len(L) <= 1:\n        return L\n    mid = len(L) / 2\n    left,right = L[:mid],L[mid:]\n    sort_list_in_place(left)\n    sort_list_in_place(right)\n    i,j = 0,0\n    while len(left) > i and len(right) > j:\n        if left[i] > right[j]:\n            L[i+j] = left[i]\n            i += 1\n        else:\n            L[i+j] = right[j]\n            j += 1\n    while len(left) > i:\n        L[i+j] = left[i]\n        i += 1\n    while len(right) > j:\n        L[i+j] = right[j]\n        j += 1\n    return L\ndef find_target_in_rotated_sorted_list(L,target):\n    if L is None:\n        return None\n    if len(L) == 0:\n        return None\n    left,right = 0,len(L)-1\n    while left <= right:\n        mid = left + (right - left) / 2\n        if L[mid] == target:\n            return mid\n        if L[mid] > L[left]:\n            if L[mid] > target and L[left] <= target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if L[mid] < target and L[right] >= target:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return None\ndef find_closest_to_target(L,target):\n    if L is None:\n        return None\n    if len(L) == 0:\n        return None\n    left,right = 0,len(L)-1\n    while left <= right:\n        mid = left + (right - left) / 2\n        if target == L[mid]:\n            return mid\n        if L[mid] < L[left]:\n            if target < L[mid] and target > L[left]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif L[mid] > L[left]:\n            if target > L[mid] and target < L[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            left += 1\n    return left\ndef find_closest_to_target_2(L,target):\n    if L is None:\n        return None\n    if len(L) == 0:\n        return None\n    left,right = 0,len(L)-1\n    while left <= right:\n        mid = left + (right - left) / 2\n        if target == L[mid]:\n            return mid\n        if L[mid] < L[left]:\n            if target > L[mid] and target < L[right]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif L[mid] > L[left]:\n            if target < L[mid] and target > L[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            left += 1\n    return left\ndef find_closest_to_target_3(L,target):\n    if L is None:\n        return None\n    if len(L) == 0:\n        return None\n    left,right = 0,len(L)-1\n    while left <= right:\n        mid = left + (right - left) / 2\n        if target == L[mid]:\n            return mid\n        if L[mid] < L[left]:\n            if target > L[mid] and target < L[right]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif L[mid] > L[left]:\n            if target < L[mid] and target > L[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            left += 1\n    return left\ndef find_closest_to_target_4(L,target):\n    if L is None:\n        return None\n    if len(L) == 0:\n        return None\n    left,right = 0,len(L)-1\n    while left <= right:\n        mid = left + (right - left) / 2\n        if target == L[mid]:\n            return mid\n        if L[mid] < L[left]:\n            if target > L[mid] and target < L[right]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif L[mid] > L[left]:\n            if target < L[mid] and target > L[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            left += 1\n    return left\ndef find_closest_to_target_5(L,target):\n    if L is None:\n        return None\n    if len(L) == 0:\n        return None\n    left,right = 0,len(L)-1\n    while left <= right:\n        mid = left + (right - left) / 2\n        if target == L[mid]:\n            return mid\n        if L[mid] < L[left]:\n            if target > L[mid] and target < L[right]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif L[mid] > L[left]:\n            if target < L[mid] and target > L[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            left += 1\n    return left\ndef reverse_in_place(L):\n    if L is None:\n        return None\n    if len(L) == 0:\n        return None\n    left,right = 0,len(L)-1\n    while left < right:\n        L[left],L[right] = L[right],L[left]\n        left += 1\n        right -= 1",
        "num_ids": 1452
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    nums = sorted(num1+num2+num3)\n    return nums\n",
        "num_ids": 23
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\ndef is_anagram(str1,str2):\n    '''\n    Write a function that accepts two strings and returns true if they are anagrams.\n    '''\n    return sorted(str1)==sorted(str2)\ndef count_nodes(root):\n    '''\n    Write a function that takes in a bst (binary search tree) and returns the number of nodes in the tree.\n    '''\n    if not root:\n        return 0\n    return 1+count_nodes(root.left)+count_nodes(root.right)\ndef sorted_merge(root1,root2):\n    '''\n    Write a function that takes in two bst trees, merges them, and returns a new bst tree containing the combined nodes.\n    '''\n    if not root1 and not root2:\n        return None\n    if not root1:\n        return root2\n    if not root2:\n        return root1\n    if root1.data<root2.data:\n        root1.left=sorted_merge(root1.left,root2)\n        root1.right=sorted_merge(root1.right,root2)\n    else:\n        root2.left=sorted_merge(root1,root2.left)\n        root2.right=sorted_merge(root1,root2.right)\n    return root1\ndef find_k_largest_element(lst,k):\n    '''\n    Write a function that takes in a list of integers, a positive integer, and returns the k-largest integers in the list.\n    '''\n    if not lst:\n        return None\n    if k<=0:\n        return None\n    min_heap=[]\n    for i in range(k):\n        heapq.heappush(min_heap,lst[i])\n    for i in range(k,len(lst)):\n        if lst[i]>min_heap[0]:\n            heapq.heappushpop(min_heap,lst[i])\n    return min_heap\ndef find_k_smallest_element(lst,k):\n    '''\n    Write a function that takes in a list of integers, a positive integer, and returns the k-smallest integers in the list.\n    '''\n    if not lst:\n        return None\n    if k<=0:\n        return None\n    max_heap=[]\n    for i in range(k):\n        heapq.heappush(max_heap,-lst[i])\n    for i in range(k,len(lst)):\n        if lst[i]<-max_heap[0]:\n            heapq.heappushpop(max_heap,-lst[i])\n    return max_heap\ndef find_k_closest_element(lst,k,x):\n    '''\n    Write a function that takes in a list of integers, a positive integer, and a number x, and returns the k-closest integers to x in the list.\n    '''\n    if not lst:\n        return None\n    if k<=0:\n        return None\n    dist_lst=[abs(lst[i]-x) for i in range(len(lst))]\n    min_heap=[]\n    for i in range(k):\n        heapq.heappush(min_heap,(dist_lst[i],lst[i]))\n    for i in range(k,len(lst)):\n        if dist_lst[i]<min_heap[0][0]:\n            heapq.heappushpop(min_heap,(dist_lst[i],lst[i]))\n    return [min_heap[i][1] for i in range(len(min_heap))]\ndef print_binary_tree(root):\n    '''\n    Write a function that prints out a binary tree.\n    '''\n    if not root:\n        return None\n    print root.data\n    if root.left:\n        print_binary_tree(root.left)\n    if root.right:\n        print_binary_tree(root.right)\ndef delete_bst(root):\n    '''\n    Write a function that takes in a binary search tree and removes all duplicate values.\n    '''\n    if not root:\n        return None\n    delete_bst(root.left)\n    delete_bst(root.right)\n    if root.left and root.data==root.left.data:\n        root.left=None\n    if root.right and root.data==root.right.data:\n        root.right=None\n    return root\ndef find_min_depth(root):\n    '''\n    Write a function that takes in a binary search tree and returns the minimum depth of the tree.\n    '''\n    if not root:\n        return 0\n    if not root.left:\n        return 1+find_min_depth(root.right)\n    if not root.right:\n        return 1+find_min_depth(root.left)\n    return 1+min(find_min_depth(root.left),find_min_depth(root.right))\ndef is_balanced_bst(root):\n    '''\n    Write a function that takes in a binary search tree and returns true if it is balanced and false otherwise.\n    '''\n    if not root:\n        return True\n    if abs(find_min_depth(root.left)-find_min_depth(root.right))>1:\n        return False\n    return is_balanced_bst(root.left) and is_balanced_bst(root.right)\ndef is_symmetric(root):\n    '''\n    Write a function that takes in a binary search tree and returns true if it is a symmetric tree and false otherwise.\n    '''\n    if not root:\n        return True\n    return is_symmetric(root.left) and is_symmetric(root.right) and root.data==root.left.data==root.right.data\ndef count_leaves(root):\n    '''\n    Write a function that takes in a binary search tree and returns the number of leaves in the tree.\n    '''\n    if not root:\n        return 0\n    if not root.left and not root.right:\n        return 1\n    return count_leaves(root.left)+count_leaves(root.right)\ndef is_bst_subtree(root,lst):\n    '''\n    Write a function that takes in a binary search tree and a list lst and returns true if every value in lst is in the tree.\n    '''\n    if not root:\n        return True\n    if not root.left and not root.right:\n        if root.data in lst:\n            return True\n        else:\n            return False\n    return is_bst_subtree(root.left,lst) and is_bst_subtree(root.right,lst)\ndef is_bst(root):\n    '''\n    Write a function that takes in a binary search tree and returns true if it is a valid binary search tree and false otherwise.\n    '''\n    if not root:\n        return True\n    if root.left and root.left.data>root.data:\n        return False\n    if root.right and root.right.data<root.data:\n        return False\n    return is_bst(root.left) and is_bst(root.right)\ndef zigzag_level_order_traversal(root):\n    '''\n    Write a function that takes in a binary search tree and returns a list of its zigzag level order traversal.\n    '''\n    if not root:\n        return None\n    queue=[root]\n    res=[]\n    while queue:\n        templst=[]\n        templst=[node.data for node in queue]\n        res.append(templst)\n        queue=[node for node in queue if node.left]\n        queue=[node for node in queue if node.right]\n    return res[::-1]\ndef insert_in_zigzag(root,data):\n    '''\n    Write a function that takes in a binary search tree and a data value and inserts a new value into the tree.\n    '''\n    if not root:\n        return TreeNode(dat",
        "num_ids": 14
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    def merge(num1,num2,num3):\n        if len(num1) > len(num2):\n            if len(num1) == len(num3):\n                return sorted(num1 + num2 + num3)\n            elif len(num1) > len(num3):\n                if len(num2) == len(num3):\n                    return sorted(num1 + num2 + num3)\n                elif len(num2) > len(num3):\n                    return sorted(num1 + num3)\n        elif len(num2) > len(num1):\n            if len(num2) == len(num3):\n                return sorted(num2 + num1 + num3)\n            elif len(num2) > len(num3):\n                if len(num1) == len(num3):\n                    return sorted(num2 + num1 + num3)\n                elif len(num1) > len(num3):\n                    return sorted(num3)\n    return merge(num1,num2,num3)\ndef merge_sorted_list_with_heap(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    def merge(num1,num2,num3):\n        if len(num1) > len(num2):\n            if len(num1) == len(num3):\n                return sorted(num1 + num2 + num3)\n            elif len(num1) > len(num3):\n                if len(num2) == len(num3):\n                    return sorted(num1 + num2 + num3)\n                elif len(num2) > len(num3):\n                    return sorted(num1 + num3)\n        elif len(num2) > len(num1):\n            if len(num2) == len(num3):\n                return sorted(num2 + num1 + num3)\n            elif len(num2) > len(num3):\n                if len(num1) == len(num3):\n                    return sorted(num2 + num1 + num3)\n                elif len(num1) > len(num3):\n                    return sorted(num3)\n    heap = []\n    for elem in num1:\n        heapq.heappush(heap,elem)\n    for elem in num2:\n        heapq.heappush(heap,elem)\n    for elem in num3:\n        heapq.heappush(heap,elem)\n    return heap\ndef merge_sorted_list_with_heap2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    for elem in num1:\n        heapq.heappush(heap,elem)\n    for elem in num2:\n        heapq.heappush(heap,elem)\n    for elem in num3:\n        heapq.heappush(heap,elem)\n    return heap\ndef merge_sorted_list_with_heap3(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    for elem in num1:\n        heapq.heappush(heap,elem)\n    for elem in num2:\n        heapq.heappush(heap,elem)\n    for elem in num3:\n        heapq.heappush(heap,elem)\n    return heap\ndef merge_sorted_list_with_heap4(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    for elem in num1:\n        heapq.heappush(heap,elem)\n    for elem in num2:\n        heapq.heappush(heap,elem)\n    for elem in num3:\n        heapq.heappush(heap,elem)\n    return heap\ndef merge_sorted_list_with_heap5(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    for elem in num1:\n        heapq.heappush(heap,elem)\n    for elem in num2:\n        heapq.heappush(heap,elem)\n    for elem in num3:\n        heapq.heappush(heap,elem)\n    return heap\ndef merge_sorted_list_with_heap6(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    for elem in num1:\n        heapq.heappush(heap,elem)\n    for elem in num2:\n        heapq.heappush(heap,elem)\n    for elem in num3:\n        heapq.heappush(heap,elem)\n    return heap\ndef merge_sorted_list_with_heap7(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    for elem in num1:\n        heapq.heappush(heap,elem)\n    for elem in num2:\n        heapq.heappush(heap,elem)\n    for elem in num3:\n        heapq.heappush(heap,elem)\n    return heap\ndef merge_sorted_list_with_heap8(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    for elem in num1:\n        heapq.heappush(heap,elem)\n    for elem in num2:\n        heapq.heappush(heap,elem)\n    for elem in num3:\n        heapq.heappush(heap,elem)\n    return heap\ndef merge_sorted_list_with_heap9(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    for elem in num1:\n        heapq.heappush(heap,elem)\n    for elem in num2:\n        heapq.heappush(heap,elem)\n    for elem in num3:\n        heapq.heappush(heap,elem)\n    return heap\ndef merge_sorted_list_with_heap10(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    for elem in num1:\n        heapq.heappush(heap,elem)\n    for elem in num2:\n        heapq.heappush(heap,elem)\n    for elem in num3:\n        heapq.heappush(heap,elem)\n    return heap\ndef merge_sorted_list_with_heap11(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    for elem in num1:\n        heapq.heappush(heap,elem)\n    for elem in num2:\n        heapq.heappush(heap,elem)\n    for elem in num3:\n        heapq.heappush(heap,elem)\n    return heap\ndef merge_sorted_list_with_heap12(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    for elem in num1:\n        heapq.heappus",
        "num_ids": 25
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l = []\n    while num1 or num2 or num3:\n        if not num1:\n            l.append(num2.pop())\n        elif not num2:\n            l.append(num1.pop())\n        elif not num3:\n            l.append(num1.pop())\n        elif num1[0]<=num2[0]<=num3[0]:\n            l.append(num1.pop())\n        elif num2[0]<=num1[0]<=num3[0]:\n            l.append(num2.pop())\n        elif num3[0]<=num1[0]<=num2[0]:\n            l.append(num3.pop())\n    return l\n",
        "num_ids": 181
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    arr = []\n    arr.extend(sorted(num1))\n    arr.extend(sorted(num2))\n    arr.extend(sorted(num3))\n    return arr\n",
        "num_ids": 50
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return list(heapq.merge(num1,num2,num3))\n",
        "num_ids": 23
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) == 0:\n        return num2 + num3\n    elif len(num2) == 0:\n        return num1 + num3\n    elif len(num3) == 0:\n        return num1 + num2\n",
        "num_ids": 61
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    i=j=k=0\n    n1=len(num1)\n    n2=len(num2)\n    n3=len(num3)\n    final_list=[]\n    while i<n1 and j<n2 and k<n3:\n        if num1[i]<num2[j]:\n            final_list.append(num1[i])\n            i+=1\n        elif num1[i]>num2[j]:\n            final_list.append(num2[j])\n            j+=1\n        elif num1[i]==num2[j]:\n            final_list.append(num1[i])\n            final_list.append(num2[j])\n            i+=1\n            j+=1\n        else:\n            final_list.append(num3[k])\n            k+=1\n    if i<n1:\n        final_list=final_list+num1[i:]\n    elif j<n2:\n        final_list=final_list+num2[j:]\n    else:\n        final_list=final_list+num3[k:]\n    return final_list\n",
        "num_ids": 297
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    if len(num1) > len(num2):\n        if len(num1) > len(num3):\n            merged_list = num1[:len(num1)] + num2[:len(num2)] + num3[:len(num3)]\n        else:\n            merged_list = num1[:len(num1)] + num2[:len(num2)] + num3[:len(num3)]\n    else:\n        if len(num2) > len(num3):\n            merged_list = num1[:len(num1)] + num2[:len(num2)] + num3[:len(num3)]\n        else:\n            merged_list = num1[:len(num1)] + num2[:len(num2)] + num3[:len(num3)]\n    return merged_list\n",
        "num_ids": 214
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(0,n):\n        if (int(s[-1] + s[:-1],2) % 2 == 0):\n            count += 1\n        else:\n            s = '0' + s[1:] + '0'\n    return count \n",
        "num_ids": 72
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    l = len(s)\n    count = 0\n    for i in range(0,l):\n        count += 1 if (int(s[i:])%2!= 0) else 0\n    return count\ndef even_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    l = len(s)\n    count = 0\n    for i in range(0,l):\n        count += 1 if (int(s[i:])%2 == 0) else 0\n    return count\ndef RotateString(s,n):\n    '''\n    Write a python function to find the number of times a string can be rotated by 1 or 2 by reflecting the string around the center.\n    '''\n    if n == 0:\n        return s\n    elif n == 1:\n        return s+s\n    elif n == 2:\n        return s+s[::-1]\n    elif n == 3:\n        return s[::-1]+s[::-1]\n    elif n == 4:\n        return s+s[::-1]\n    elif n == 5:\n        return s[::-1]+s[::-1]\n    elif n == 6:\n        return s[::-1]+s\n    elif n == 7:\n        return s+s\n    elif n == 8:\n        return s+s[::-1]\n    elif n == 9:\n        return s+s[::-1]\n    elif n == 10:\n        return s+s[::-1]\n    else:\n        return 'invalid'\ndef NextPermutation(n):\n    '''\n    Write a python function to find the next lexicographic permutation of a string.\n    '''\n    n = sorted(n)\n    index = n.index(max(n[:-1]))\n    if index == len(n)-1:\n        return sorted(n)\n    else:\n        n[index],n[-1] = n[-1],n[index]\n        return sorted(n[:index]+n[index+1:])\ndef Permute(n):\n    '''\n    Write a python function to find the permutations of a string.\n    '''\n    n = sorted(n)\n    l = len(n)\n    count = 0\n    for i in range(0,l):\n        for j in range(i+1,l):\n            for k in range(j+1,l):\n                count += 1\n                if n[i] > n[j] and n[j] > n[k]:\n                    n[i],n[j],n[k] = n[j],n[k],n[i]\n    return count\ndef perm_2_r(n):\n    '''\n    Write a python function to find the number of permutations of a string of length 2.\n    '''\n    count = 0\n    for i in range(0,2):\n        for j in range(i+1,2):\n            count += 1\n    return count\ndef perm_n_r(n):\n    '''\n    Write a python function to find the number of permutations of a string of length n.\n    '''\n    return n*(n-1)/2\ndef Swap(a,b):\n    '''\n    Write a python function to swap the values of two variables.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return a,b\ndef Combinations(s,n):\n    '''\n    Write a python function to find the number of combinations of a string of length n.\n    '''\n    count = 1\n    for i in range(1,n+1):\n        count *= (n-i+1)/i\n    return count\ndef Max(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return a if a > b else b if b > c else c\ndef Max_Swap(a,b):\n    '''\n    Write a python function to swap the values of two numbers if they are not in order.\n    '''\n    if a > b:\n        a,b = b,a\n    return a,b\ndef BubbleSort(l):\n    '''\n    Write a python function to sort a list in increasing order.\n    '''\n    for i in range(1,len(l)):\n        for j in range(1,len(l)-i+1):\n            if l[j-1] > l[j]:\n                l[j-1],l[j] = l[j],l[j-1]\n    return l\ndef InsertionSort(l):\n    '''\n    Write a python function to sort a list in increasing order.\n    '''\n    for i in range(2,len(l)+1):\n        for j in range(i,0,-1):\n            if l[j-1] > l[j]:\n                l[j-1],l[j] = l[j],l[j-1]\n    return l\ndef SelectionSort(l):\n    '''\n    Write a python function to sort a list in increasing order.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i] > l[j]:\n                l[i],l[j] = l[j],l[i]\n    return l\ndef QuickSort(l,start,end):\n    '''\n    Write a python function to sort a list in increasing order.\n    '''\n    if start >= end:\n        return\n    pivot = l[start]\n    i = start+1\n    j = end\n    while True:\n        while i <= j and l[i] <= pivot:\n            i += 1\n        while i <= j and l[j] >= pivot:\n            j -= 1\n        if i <= j:\n            l[i],l[j] = l[j],l[i]\n            i += 1\n            j -= 1\n        if i > j:\n            l[start],l[j] = l[j],l[start]\n            break\n    QuickSort(l,start,j)\n    QuickSort(l,i,end)\ndef MergeSort(l):\n    '''\n    Write a python function to sort a list in increasing order.\n    '''\n    if len(l) == 1:\n        return l\n    else:\n        mid = len(l)/2\n        a = MergeSort(l[:mid])\n        b = MergeSort(l[mid:])\n        return Merge(a,b)\ndef Merge(a,b):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    l = []\n    i = j = 0\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            l.append(a[i])\n            i += 1\n        else:\n            l.append(b[j])\n            j += 1\n    if i == len(a):\n        for i in range(j,len(b)):\n            l.append(b[i])\n    else:\n        for i in range(i,len(a)):\n            l.append(a[i])\n    return l\ndef RadixSort(l,base):\n    '''\n    Write a python function to sort a list in increasing order.\n    '''\n    for i in range(1,base):\n        count = [0 for i in range(10)]\n        for j in l:\n            temp = int(j/base**(i-1)) % 10\n            count[temp] += 1\n        for j in range(1,10):\n            count[j] += count[j-1]\n        temp = []\n        for j in range(len(l)-1,-1,-1):\n            temp.append(l[count[int(l[j]/base**(i-1)) % 10]-1])\n            count[int(l[j]/base**(i-1)) % 10] -= 1\n        l = temp\n    return l\ndef PigeonholeSort(l):\n    '''\n    Write a python function to sort a list in increasing order.\n    '''\n    count = [0 for i in rang",
        "num_ids": 11
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    from itertools import groupby\n    from operator import itemgetter\n",
        "num_ids": 19
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #initialise\n    N=len(s)\n    s=list(s)\n    l=[]\n    for i in range(N):\n        if i%2!=0:\n            l.append(s[N-i-1])\n    return ''.join(l)\ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    #initialise\n    N=len(s)\n    s=list(s)\n    l=[]\n    for i in range(N):\n        if i%2==0:\n            l.append(s[N-i-1])\n    return ''.join(l)\ndef expand_binary(s,n): \n    '''\n    Write a python function to expand a binary string to the given number of times. \n    '''\n    #initialise\n    s=list(s)\n    l=[]\n    while n!=0:\n        if n&1==1:\n            l.append(s[0])\n            s.pop(0)\n        n=n>>1\n    return ''.join(l)\ndef compressed_binary(s,n): \n    '''\n    Write a python function to compress a binary string to the given number of times. \n    '''\n    #initialise\n    s=list(s)\n    l=[]\n    count=1\n    for i in range(len(s)-1):\n        if s[i]==s[i+1]:\n            count=count+1\n        else:\n            l.append(str(count))\n            l.append(s[i])\n            count=1\n    l.append(str(count))\n    l.append(s[-1])\n    return ''.join(l)\ndef rotate_binary(s,n): \n    '''\n    Write a python function to rotate a binary string the given number of times.\n    '''\n    #initialise\n    s=list(s)\n    l=[]\n    for i in range(n):\n        l.append(s.pop(0))\n    return ''.join(l)\ndef encrypt(s,n): \n    '''\n    Write a python function to encrypt a binary string using the XOR operation.\n    '''\n    #initialise\n    s=list(s)\n    l=[]\n    for i in s:\n        l.append(chr(ord(i)^n))\n    return ''.join(l)\ndef decrypt(s,n): \n    '''\n    Write a python function to decrypt a binary string using the XOR operation.\n    '''\n    #initialise\n    s=list(s)\n    l=[]\n    for i in s:\n        l.append(chr(ord(i)^n))\n    return ''.join(l)\ndef new_XOR(s,n): \n    '''\n    Write a python function to encrypt a binary string using the XOR operation.\n    '''\n    #initialise\n    s=list(s)\n    l=[]\n    for i in s:\n        l.append(chr(ord(i)^n))\n    return ''.join(l)\ndef new_decrypt(s,n): \n    '''\n    Write a python function to decrypt a binary string using the XOR operation.\n    '''\n    #initialise\n    s=list(s)\n    l=[]\n    for i in s:\n        l.append(chr(ord(i)^n))\n    return ''.join(l)\ndef new_rotate_binary(s,n): \n    '''\n    Write a python function to rotate a binary string the given number of times.\n    '''\n    #initialise\n    s=list(s)\n    l=[]\n    for i in range(n):\n        l.append(s.pop())\n    return ''.join(l)\ndef hamming(s1,s2): \n    '''\n    Write a python function to calculate the Hamming distance between two binary strings.\n    '''\n    #initialise\n    s1=list(s1)\n    s2=list(s2)\n    dist=0\n    for i in range(len(s1)):\n        if s1[i]!=s2[i]:\n            dist=dist+1\n    return dist\ndef find_elements(s,l): \n    '''\n    Write a python function to find the elements in a list that are present in a string.\n    '''\n    #initialise\n    l=list(l)\n    s=list(s)\n    l1=[]\n    for i in s:\n        if i in l:\n            l1.append(i)\n        else:\n            pass\n    return l1\ndef find_elements_1(s,l): \n    '''\n    Write a python function to find the elements in a list that are present in a string.\n    '''\n    #initialise\n    l=list(l)\n    s=list(s)\n    l1=[]\n    for i in l:\n        if i in s:\n            l1.append(i)\n        else:\n            pass\n    return l1\ndef find_elements_2(s,l): \n    '''\n    Write a python function to find the elements in a list that are present in a string.\n    '''\n    #initialise\n    l=list(l)\n    s=list(s)\n    l1=[]\n    for i in l:\n        if i in s:\n            l1.append(i)\n    return l1\ndef find_elements_3(s,l): \n    '''\n    Write a python function to find the elements in a list that are present in a string.\n    '''\n    #initialise\n    l=list(l)\n    s=list(s)\n    l1=[]\n    for i in l:\n        if i in s:\n            l1.append(i)\n    return l1\ndef set_bit(n,i): \n    '''\n    Write a python function to set the i-th bit of a given integer.\n    '''\n    return n|(1<<i)\ndef unset_bit(n,i): \n    '''\n    Write a python function to unset the i-th bit of a given integer.\n    '''\n    return n&~(1<<i)\ndef new_set_bit(n,i): \n    '''\n    Write a python function to set the i-th bit of a given integer.\n    '''\n    return n^(1<<i)\ndef new_unset_bit(n,i): \n    '''\n    Write a python function to unset the i-th bit of a given integer.\n    '''\n    return n^(1<<i)\ndef new_find_elements(s,l): \n    '''\n    Write a python function to find the elements in a list that are present in a string.\n    '''\n    #initialise\n    l=list(l)\n    s=list(s)\n    l1=[]\n    for i in s:\n        if i in l:\n            l1.append(i)\n        else:\n            pass\n    return l1\ndef new_find_elements_1(s,l): \n    '''\n    Write a python function to find the elements in a list that are present in a string.\n    '''\n    #initialise\n    l=list(l)\n    s=list(s)\n    l1=[]\n    for i in l:\n        if i in s:\n            l1.append(i)\n    return l1\ndef new_find_elements_2(s,l): \n    '''\n    Write a python function to find the elements in a list that are present in a string.\n    '''\n    #initialise\n    l=list(l)\n    s=list(s)\n    l1=[]\n    for i in l:\n        if i in s:\n            l1.append(i)\n    return l1\ndef new_find_elements_3(s,l): \n    '''\n    Write a python function to find the elements in a list that are present in a string.\n    '",
        "num_ids": 24
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s[::-1]\n    count = 0\n    for i in range(n):\n        for j in range(len(s)):\n            if (s[j] == '0') :\n                s[j] = '1'\n                count += 1\n            elif(s[j] == '1'):\n                s[j] = '0'\n                count += 1\n            else:\n                continue\n        s = s[::-1]\n    return count\n",
        "num_ids": 116
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n = n % len(s)\n    b = list(s)\n    i = 0\n    while i < n:\n        temp = b[0]\n        b.remove(temp)\n        b.append(temp)\n        i += 1\n    l = len(b)\n    result = 0\n    for i in range(l):\n        if int(b[i]) % 2 == 1:\n            result += 1\n    return result\n",
        "num_ids": 106
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        s=s[1:]+s[0]\n        if int(s,2)%2==1:\n            count+=1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return s.count('1')\n    else:\n        return (((n*(n+1))/2)*s.count('1')) - ((n-1)*(n-2))/2*s.count('0')\n",
        "num_ids": 76
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def change_bit(bit,new_bit):\n        if new_bit == 1:\n            return 1\n        else:\n            return 0\n",
        "num_ids": 36
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binnum = convert_to_binary(s,n)\n    newnum = '0'\n    count = 0\n    for i in range(n):\n        newnum = newnum + binnum[i]\n        if int(newnum[0])%2!= 0:\n            count += 1\n    return count\n    \ndef common_member(a, b): \n    '''\n    Write a python function to find the number of times that the given strings occur in a same order.\n    '''\n    a = a.lower()\n    b = b.lower()\n    if a == b:\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Get the length of the first list.\n    first_length = len(nestedlist[0])\n    # Loop through each list.\n    for ele in nestedlist:\n        # Get the length of each list.\n        length = len(ele)\n        # Check if the length is equal to first_length.\n        if length!= first_length:\n            # Return False if the length is not equal.\n            return False\n        # If the length is equal, check the rest of the lists.\n        else:\n            # Set the first_length to the new length.\n            first_length = length\n    # Return True if the length is equal.\n    return True\n",
        "num_ids": 156
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    if not isinstance(nestedlist, list):\n        return None\n    for item in nestedlist:\n        if not isinstance(item, list):\n            continue\n        result += common_in_nested_lists(item)\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = nestedlist\n    nestedlist = nestedlist[1]\n    common_list = []\n    for element in nestedlist:\n        if element in nestedlist:\n            common_list.append(element)\n    return common_list\n",
        "num_ids": 60
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #An empty list to append the common elements to\n    common = []\n    #Looping over the nested lists\n    for sublist in nestedlist:\n        #If the current element is in the nested list, append it to common list\n        for element in sublist:\n            if element not in common:\n                common.append(element)\n    return common\n",
        "num_ids": 83
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #initialize the result list and the lists\n    result = []\n    nestedlist = [[1, 2, 3, 4], [2, 3, 5, 6], [4, 7, 8, 9]]\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in result:\n                result.append(item)\n    return result\n",
        "num_ids": 88
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist: return []\n    if len(nestedlist) == 1: return nestedlist[0]\n    # reverse the nested list\n    newlist = []\n    for item in nestedlist:\n        newlist.append(item[::-1])\n    # get rid of the nested lists\n    newlist = [item for sublist in newlist for item in sublist]\n    return list(set(newlist))\n",
        "num_ids": 101
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for list in nestedlist:\n        for element in list:\n            if element in result:\n                continue\n            else:\n                result.append(element)\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nested_list_common = []\n    if len(nestedlist) == 1:\n        return [item for sublist in nestedlist for item in sublist]\n    else:\n        for item in nestedlist[0]:\n            if item in nested_list_common:\n                pass\n            else:\n                nested_list_common.append(item)\n        return nested_list_common\n",
        "num_ids": 94
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return None\n",
        "num_ids": 6
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set.intersection(*map(set, nestedlist))\n",
        "num_ids": 17
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    text = str(text)\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_float(text):\n    '''\n    Write a function to check if a string represents a float or not.\n    '''\n    \n    text = str(text)\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_string(text):\n    '''\n    Write a function to check if a string represents a string or not.\n    '''\n    \n    text = str(text)\n    if text[0] == '\"':\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_float(text):\n    '''\n    Write a function to check if a string represents a float or not.\n    '''\n    try:\n        num = float(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    text = text.strip()\n    if text[0] in ['+','-'] and text[1:].isdigit():\n        return True\n    if text.isdigit():\n        return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text == '':\n        return False\n    elif text =='':\n        return False\n    elif text.isnumeric():\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    text = str(text)\n    for i in text:\n        if i not in '1234567890':\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for each in list1:\n        if len(each)!= 0:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if x == {}:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(dict=={} for dict in list1)\n",
        "num_ids": 17
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    for dit in list1:\n        if dit:\n            return False\n    return True\ndef nested_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dit in list1:\n        if dit:\n            return False\n    return True\ndef a_first(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if tup[0]:\n        return True\n    else:\n        return False\ndef pair(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef count_items(tup):\n    '''\n    Write a function to count the number of items in a tuple.\n    '''\n    count=0\n    for tup2 in tup:\n        count+=1\n    return count\ndef count_items(tup):\n    '''\n    Write a function to count the number of items in a tuple.\n    '''\n    count=0\n    for tup2 in tup:\n        count+=1\n    return count\ndef zip_dict(a,b):\n    '''\n    Write a function to zip two dictionaries and return the result as a new dictionary.\n    '''\n    new={}\n    for key1 in a:\n        for key2 in b:\n            if key1 == key2:\n                new[key1]=a[key1]\n    return new\ndef zip_dict(a,b):\n    '''\n    Write a function to zip two dictionaries and return the result as a new dictionary.\n    '''\n    new={}\n    for key1 in a:\n        for key2 in b:\n            if key1 == key2:\n                new[key1]=a[key1]\n    return new\ndef pair_dict(dictionary):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dit in dictionary:\n        if dit:\n            return False\n    return True\ndef duplicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef duplicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef duplicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef dublicate_tuple(tup):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for tup2 in tup:\n        if tup2:\n            return False\n    return True\ndef ",
        "num_ids": 29
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return len([i for i in list1 if len(i) > 0]) == len(list1)\n    \ndef is_valid(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are valid or not.\n    '''\n    return all([all(i.keys() == set(i.keys()) for i in list1[j]) for j in range(len(list1))])\n    \ndef get_key_val(key):\n    '''\n    Write a function to extract the key-value pair from a dictionary.\n    '''\n    return [i for i in key]\n    \ndef get_val_key(dict1):\n    '''\n    Write a function to extract the value-key pair from a dictionary.\n    '''\n    return [i for i in dict1.values()]\n    \ndef sort_by_key(dict1):\n    '''\n    Write a function to sort a dictionary by key.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[0])\n    \ndef sort_by_val(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1])\n    \ndef get_max_val(list1):\n    '''\n    Write a function to get the maximum value from a list.\n    '''\n    return max(list1)\n    \ndef get_min_val(list1):\n    '''\n    Write a function to get the minimum value from a list.\n    '''\n    return min(list1)\n    \ndef get_sum_val(list1):\n    '''\n    Write a function to get the sum value from a list.\n    '''\n    return sum(list1)\n    \ndef get_avg_val(list1):\n    '''\n    Write a function to get the average value from a list.\n    '''\n    return sum(list1)/len(list1)\n    \ndef get_product_val(list1):\n    '''\n    Write a function to get the product value from a list.\n    '''\n    return reduce(lambda x,y:x*y, list1)\n    \ndef compare_val(x, y):\n    '''\n    Write a function to compare value.\n    '''\n    if x > y:\n        return 1\n    elif x == y:\n        return 0\n    else:\n        return -1\n    \ndef get_item_val(dict1, key):\n    '''\n    Write a function to get the item value from a dictionary.\n    '''\n    return dict1[key]\n    \ndef get_item_val_p(dict1, key):\n    '''\n    Write a function to get the item value from a dictionary.\n    '''\n    return dict1.get(key, 'no item found')\n    \ndef swap_keys_val(dict1):\n    '''\n    Write a function to swap the keys and values of a dictionary.\n    '''\n    return dict([(v,k) for k,v in dict1.items()])\n    \ndef count_dict_val(dict1):\n    '''\n    Write a function to count the values in a dictionary.\n    '''\n    return len(dict1.values())\n    \ndef get_dict_keys(dict1):\n    '''\n    Write a function to get the keys in a dictionary.\n    '''\n    return dict1.keys()\n    \ndef get_dict_val(dict1):\n    '''\n    Write a function to get the values in a dictionary.\n    '''\n    return dict1.values()\n    \ndef concat_dict_val(dict1):\n    '''\n    Write a function to concatenate values in a dictionary.\n    '''\n    return''.join(dict1.values())\n    \ndef get_dict_items(dict1):\n    '''\n    Write a function to get the items in a dictionary.\n    '''\n    return dict1.items()\n    \ndef get_dict_items_p(dict1):\n    '''\n    Write a function to get the items in a dictionary.\n    '''\n    return dict1.items()\n    \ndef change_val(dict1, key, new_val):\n    '''\n    Write a function to change the value of a dictionary key.\n    '''\n    dict1[key] = new_val\n    \ndef change_dict_val(dict1, key, new_val):\n    '''\n    Write a function to change the value of a dictionary key.\n    '''\n    dict1[key] = new_val\n    \ndef get_list_index(list1, val):\n    '''\n    Write a function to get the index of a value in a list.\n    '''\n    return list1.index(val)\n    \ndef get_list_index_p(list1, val):\n    '''\n    Write a function to get the index of a value in a list.\n    '''\n    return list1.index(val) if val in list1 else -1\n    \ndef get_list_slice(list1, start, end):\n    '''\n    Write a function to get a slice of a list.\n    '''\n    return list1[start:end]\n    \ndef get_dict_values(dict1):\n    '''\n    Write a function to get the values in a dictionary.\n    '''\n    return dict1.values()\n    \ndef get_dict_value(dict1, key):\n    '''\n    Write a function to get the value of a dictionary.\n    '''\n    return dict1[key]\n    \ndef get_dict_value_p(dict1, key):\n    '''\n    Write a function to get the value of a dictionary.\n    '''\n    return dict1.get(key)\n    \ndef get_dict_keys_p(dict1):\n    '''\n    Write a function to get the keys in a dictionary.\n    '''\n    return dict1.keys()\n    \ndef get_dict_keys_p_alt(dict1):\n    '''\n    Write a function to get the keys in a dictionary.\n    '''\n    return dict1.keys()\n    \ndef get_dict_items_p(dict1):\n    '''\n    Write a function to get the items in a dictionary.\n    '''\n    return dict1.items()\n    \ndef get_dict_items_p_alt(dict1):\n    '''\n    Write a function to get the items in a dictionary.\n    '''\n    return dict1.items()\n    \ndef remove_dict_key(dict1, key):\n    '''\n    Write a function to remove a key-value pair from a dictionary.\n    '''\n    del dict1[key]\n    \ndef remove_dict_key_p(dict1, key):\n    '''\n    Write a function to remove a key-value pair from a dictionary.\n    '''\n    del dict1[key]\n    \ndef remove_dict_val(dict1, val):\n    '''\n    Write a function to remove a value from a dictionary.\n    '''\n    del dict1[val]\n    \ndef remove_dict_val_p(dict1, val):\n    '''\n    Write a function to remove a value from a dictionary.\n    '''\n    del dict1[val]\n    \ndef remove_dict_val_p_alt(dict1, val):\n    '''\n    Write a function to remove a value from a dictionary.\n    '''\n    if val in dict1.values():\n        del dict1[val]\n    \ndef remove_dict_val_p_alt_2(dict1, val):\n    '''\n    Write a function to remove a value from a dictionary.\n    '''\n    if val in dict1.values():\n        del dict1[val]\n    \ndef remove_dict_val_p_alt_3(dict1, val):\n    '''\n    Write a function to remove a value from a dictionary.\n    '''\n    dict1.pop(val)\n    \ndef remove_dict_val_p_alt_4(dict1, val):\n    '''\n    Write a function to remove a value from a dictionary.\n    '''\n    dict1.pop(val)\n    \ndef remove_dict_val_p_alt_5(dict1, val):\n    ''",
        "num_ids": 34
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = False\n    for i in list1:\n        if i:\n            empty = False\n        else:\n            empty = True\n    return empty\n",
        "num_ids": 38
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    new_list = []\n    for i in list1:\n        if i:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 38
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    count=0\n    for i in list1:\n        if i:\n            count=count+1\n        else:\n            pass\n    if count==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "num_ids": 10
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    ret = 0\n    for x in nums:\n        ret = ret * 10 + x\n    return ret\n",
        "num_ids": 28
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_tuple = []\n    for num in nums:\n        int_tuple.append(str(num))\n    int_str = ''.join(int_tuple)\n    return int(int_str)\n",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_sum = 0\n    for num in nums:\n        num_sum += num\n    return num_sum\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in nums:\n        result = result * 10 + i\n    return result\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in nums:\n        result = result * 10 + i\n    return result\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "num_ids": 10
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    pass\n    #s = ''\n    #for i in range(len(nums)):\n    #    s += str(nums[i])\n    #return int(s)\n",
        "num_ids": 46
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    nums = [str(i) for i in nums]\n    return int(''.join(nums))\n",
        "num_ids": 39
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res *= 10\n        res += num\n    return res\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums_tuple = tuple(nums)\n    return sum(nums_tuple)\n",
        "num_ids": 26
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) if isinstance(i, str) else i for i in test_list]\n",
        "num_ids": 27
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # use: float(string) to convert string to float\n    float_list = [float(string) for string in test_list]\n    return float_list\n",
        "num_ids": 40
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for element in test_list:\n        result_list.append([float(element[i]) for i in range(len(element))])\n    return result_list\n",
        "num_ids": 48
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for i in range(len(row)):\n            try:\n                row[i] = float(row[i])\n            except ValueError:\n                pass\n    return test_list\n",
        "num_ids": 55
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(x) for x in y] for y in test_list]\n",
        "num_ids": 22
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Iterate over the test list\n    for list_idx, inner_list in enumerate(test_list):\n        for inner_list_idx, inner_list_item in enumerate(inner_list):\n            try:\n                test_list[list_idx][inner_list_idx] = float(inner_list_item)\n            except ValueError:\n                test_list[list_idx][inner_list_idx] = inner_list_item\n    return test_list\n",
        "num_ids": 120
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return_list = []\n    for item in test_list:\n        new_list = []\n        for value in item:\n            try:\n                new_list.append(float(value))\n            except ValueError:\n                new_list.append(value)\n        return_list.append(new_list)\n    return return_list\n",
        "num_ids": 82
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = float(test_list[i])\n    return test_list\n",
        "num_ids": 39
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for list_num in range(len(test_list)):\n        for elem_num in range(len(test_list[list_num])):\n            test_list[list_num][elem_num] = float(test_list[list_num][elem_num])\n    return test_list\n",
        "num_ids": 76
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for list in test_list:\n        new_list.append(list_to_float(list))\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string=='':\n        return []\n    else:\n        string=string.split(' ')\n        return string\n",
        "num_ids": 31
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(' ')\n    return string\n",
        "num_ids": 16
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    result = string.split(\" \")\n    return result\n",
        "num_ids": 16
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # return string.split()\n    # or\n    return string.split(' ')\n",
        "num_ids": 23
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_string = string.split(\" \")\n    return list_string\n",
        "num_ids": 20
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n",
        "num_ids": 38
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = [0]*100001\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n    for i in range(len(count)):\n        if count[i] == 1:\n            return i\n    return -1\n",
        "num_ids": 65
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr_len = len(arr)\n    for i in range(0, arr_len-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return arr[arr_len-1]\n",
        "num_ids": 59
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0,len(arr)):\n        if arr[i]==arr[arr[i]-1]:\n            arr[i]=arr[i]-1\n    print arr\n    return arr\ndef search_all(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0,len(arr)):\n        if arr[i]!=arr[arr[i]-1]:\n            arr[i]=arr[i]-1\n    print arr\n    return arr\narr=[1,1,2,2,2,3,3,4,4,5]\nsearch(arr)\nsearch_all(arr)\n",
        "num_ids": 87
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) < 1:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 34
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==1:\n        return arr[0]\n    if arr[0]!=arr[1]:\n        return arr[0]\n    else:\n        return search(arr[1:])\n",
        "num_ids": 53
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return None\n    start = 0\n    end = len(arr)-1\n    while start<=end:\n        mid = (start+end)/2\n        if arr[mid] == arr[mid+1]:\n            start = mid+1\n        else:\n            end = mid-1\n    return arr[start]\n",
        "num_ids": 84
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return -1\n    i, j = 0, 1\n    while j < len(arr):\n        if arr[j]!= arr[i]:\n            new_arr = arr[i+1:]\n            if arr[j] not in new_arr:\n                return arr[i]\n            else:\n                i += 1\n        else:\n            i += 1\n        j += 1\n    return -1\n",
        "num_ids": 104
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    index = 0\n    size = len(arr)\n    if size == 0:\n        return -1\n    if size == 1:\n        return arr[0]\n    if arr[0]!= arr[1]:\n        index = 0\n        arr[index] = arr[0]\n    else:\n        index = 1\n        arr[index] = arr[1]\n    for i in range(2, size):\n        if arr[i]!= arr[i-1] and arr[i]!= arr[i-2]:\n            index = i\n            arr[index] = arr[i]\n    return arr[index]\n    \ndef find_missing(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    index = 0\n    size = len(arr)\n    if size == 0:\n        return -1\n    if size == 1:\n        return arr[0]\n    if arr[0]!= arr[1]:\n        index = 0\n        arr[index] = arr[0]\n    else:\n        index = 1\n        arr[index] = arr[1]\n    for i in range(2, size):\n        if arr[i]!= arr[i-1] and arr[i]!= arr[i-2]:\n            index = i\n            arr[index] = arr[i]\n    return arr[index]\n",
        "num_ids": 152
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #Time limit exceeded\n    #Check the case where the list is empty\n    if len(list1)==0:\n        return None\n    #Check the case where the list has only one element\n    elif len(list1)==1:\n        return (list1[0][0], list1[0][1], abs(list1[0][0]*list1[0][1]))\n    else:\n        a = list1[0]\n        b = max_product_tuple(list1[1:])\n        if a[1]*b[2]>a[2]*b[1]:\n            return (a[0], a[1], a[2])\n        else:\n            return (b[0], b[1], b[2])\n",
        "num_ids": 183
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = (0, 0)\n    for item in list1:\n        if len(item) == 2:\n            max_prod = max(max_prod, (abs(item[0] * item[1]), item))\n    return max_prod[0]\n",
        "num_ids": 70
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(0, len(list1), 2):\n        if i+1 >= len(list1):\n            break\n        if max_product < abs(list1[i] * list1[i+1]):\n            max_product = list1[i] * list1[i+1]\n    return max_product\n",
        "num_ids": 89
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product_tuple = None\n    for i in list1:\n        for j in list1:\n            if (abs(i[0] * j[1]) > abs(max_product_tuple)):\n                max_product_tuple = i[0] * j[1]\n",
        "num_ids": 72
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    tuple_list = []\n    for pair in list1:\n        tuple_list.append((abs(pair[0]*pair[1]),pair))\n    tuple_list.sort(reverse=True)\n    return tuple_list[0][1]\n",
        "num_ids": 64
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def max_product(list1):\n        for i in range(0,len(list1)):\n            for j in range(i+1,len(list1)):\n                if max(list1[i],list1[j])*min(list1[i],list1[j])>=max_product:\n                    max_product=max(list1[i],list1[j])*min(list1[i],list1[j])\n        return max_product\n    return max_product(list1)\n    \ndef max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def max_product(list1):\n        max_product=max_product_tuple_helper(list1,0)\n        return max_product\n    return max_product(list1)\n    \ndef max_product_tuple_helper(list1,i):\n    if i==len(list1)-1:\n        return list1[i][0]*list1[i][1]\n    else:\n        return max(list1[i][0]*list1[i+1][1],list1[i][1]*list1[i+1][0])\n    \n    \n    ",
        "num_ids": 146
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = 0\n    for i in range(len(list1)):\n        result = max(result,list1[i][0]*list1[i][1])\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    print(list1)\n    list2 = list(list1)\n    list3 = []\n    list4 = []\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                if list1[i][0] * list1[j][0] > max_product:\n                    max_product = list1[i][0] * list1[j][0]\n                    list3 = [list1[i], list1[j]]\n    print(max_product, list3)\n",
        "num_ids": 143
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize a variable to keep the maximum absolute product so far\n    max_prod = 0\n",
        "num_ids": 25
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort(key = lambda x:x[0])\n    list2 = list(map(lambda x:x[1],list1))\n    max_product = 0\n    for i in range(0,len(list1),2):\n        a,b = list1[i], list2[i]\n        if (a,b) == (0,0) or (a,b) == (0,1) or (a,b) == (1,0):\n            max_product = max(max_product,a*b)\n        elif (a,b) == (0,2) or (a,b) == (0,3) or (a,b) == (2,0) or (a,b) == (2,1):\n            max_product = max(max_product,a*b)\n        elif (a,b) == (1,1):\n            max_product = max(max_product,a*b)\n        elif (a,b) == (2,2):\n            max_product = max(max_product,a*b)\n        elif (a,b) == (3,3):\n            max_product = max(max_product,a*b)\n        else:\n            max_product = max(max_product,a*b)\n    return max_product\n",
        "num_ids": 316
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    if limit == 1:\n        return 1\n    amicable_list = [1]\n    amicable_list.extend([0]*limit)\n    for i in range(2,limit):\n        amicable_list[i] = i\n    for i in range(2,limit):\n        for j in range(i,limit):\n            if amicable_list[i] == 0:\n                break\n            if i == j:\n                continue\n            total = amicable_list[i] + amicable_list[j]\n            if total == i and amicable_list[j]!= 0:\n                amicable_list[amicable_list[j]] = 1\n            if total == j and amicable_list[i]!= 0:\n                amicable_list[amicable_list[i]] = 1\n    print sum(amicable_list)\n",
        "num_ids": 205
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(filter(lambda n: sum(divisors(n)) == n,\n        range(1, limit)))\n",
        "num_ids": 31
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for number in range(1, limit):\n        if is_amicable_number(number):\n            amicable_numbers.append(number)\n",
        "num_ids": 46
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    s = 0\n    for i in range(1, limit):\n        d = get_divisors(i)\n        if i == sum(d) and i!= d[0]:\n            s += i\n    return s\n",
        "num_ids": 56
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n    for number in range(1, limit):\n        if number in amicable_numbers:\n            continue\n        amicable_numbers.append(number)\n        sum_of_divisors = sum(number_divisors(number))\n        sum_of_amicable_numbers = sum(number_divisors(sum_of_divisors))\n        if sum_of_divisors == sum_of_amicable_numbers:\n            amicable_numbers_sum += sum_of_divisors\n            amicable_numbers.append(sum_of_divisors)\n    return amicable_numbers_sum\n",
        "num_ids": 173
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for num in range(1, limit+1):\n        amicable_number_1 = num\n        amicable_number_2 = sum_of_factors(num)\n        if amicable_number_1 == amicable_number_2 and num!= amicable_number_1:\n            result += amicable_number_1\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    s = sum(range(1,limit))\n    return s\n",
        "num_ids": 18
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1,limit):\n        x = sum_of_divisors(i)\n        y = sum_of_divisors(x)\n        if i == y and i!= x:\n            print(i)\n            sum += i\n    return sum\n",
        "num_ids": 73
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = {}\n    for num in range(1, limit):\n        if num not in amicable_numbers:\n            amicable_numbers[num] = sum_of_factors(num)\n        if num!= amicable_numbers[num]:\n            if amicable_numbers[amicable_numbers[num]] == num:\n                amicable_numbers[num] = amicable_numbers[amicable_numbers[num]]\n                amicable_numbers[amicable_numbers[num]] = num\n    return sum(amicable_numbers)\n",
        "num_ids": 142
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for number in range(1, limit):\n        if is_amicable_number(number):\n            amicable_numbers_sum += number\n    return amicable_numbers_sum\n",
        "num_ids": 57
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef dot(a,b):\n    '''\n    Write a function that returns the dot product of two lists or strings.\n    '''\n    return sum([i*j for i,j in zip(a,b)])\ndef dot_product(a,b):\n    '''\n    Write a function that returns the dot product of two lists or strings.\n    '''\n    return sum([i*j for i,j in zip(a,b)])\ndef fx_nums(nums):\n    '''\n    Write a function to return a list of the factors of a number, in ascending order.\n    '''\n    return sorted(set([i for i in range(1,nums+1) if nums%i == 0]))\ndef fx_nums_no_zero(nums):\n    '''\n    Write a function to return a list of the factors of a number, in ascending order,\n    excluding 0.\n    '''\n    return sorted(set([i for i in range(1,nums+1) if nums%i!= 0]))\ndef find_median(arr):\n    '''\n    Write a function to return the median of a list of numbers.\n    '''\n    return sum(arr) / len(arr)\ndef sum_median(arr):\n    '''\n    Write a function to return the sum of the numbers in a list, then return the median of the list.\n    '''\n    return sum(arr)\ndef are_equal(a,b):\n    '''\n    Write a function to check if two lists/strings are equal.\n    '''\n    return a == b\ndef squares(a,b,c):\n    '''\n    Write a function that returns the sum of the four parameters squared.\n    '''\n    return a**2 + b**2 + c**2 + d**2\ndef squares_odd(a,b,c,d):\n    '''\n    Write a function that returns the sum of the four parameters squared.\n    '''\n    return a**2 + b**2 + c**2 + d**2\ndef sum_powers(a,b,c,d):\n    '''\n    Write a function to return the sum of the powers of the four parameters.\n    '''\n    return a**2 + b**2 + c**2 + d**2\ndef get_middle(arr):\n    '''\n    Write a function that returns the middle number of a list.\n    '''\n    return arr[int(len(arr)/2)]\ndef get_middle_no_pop(arr):\n    '''\n    Write a function that returns the middle number of a list, without popping it.\n    '''\n    return arr[int((len(arr)+1)/2)]\ndef primes_no_sort(n):\n    '''\n    Write a function that returns a list of all the primes less than a given number.\n    '''\n    return [i for i in range(2,n+1) if is_prime(i)]\ndef primes_sorted(n):\n    '''\n    Write a function that returns a list of all the primes less than a given number,\n    sorted in ascending order.\n    '''\n    arr = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            arr.append(i)\n    return arr\ndef primes_sorted_no_set(n):\n    '''\n    Write a function that returns a list of all the primes less than a given number,\n    sorted in ascending order, without using set().\n    '''\n    arr = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            arr.append(i)\n    return arr\ndef is_prime(n):\n    '''\n    Write a function that returns True if a number is prime, and False otherwise.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_no_set(n):\n    '''\n    Write a function that returns True if a number is prime, and False otherwise.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\ndef closest_mod_5(n):\n    '''\n    Write a function that returns the closest multiple of 5 that is smaller than a given number.\n    '''\n    return (n - (n%5)) if n%5 else n\ndef closest_mod_5_no_mod(n):\n    '''\n    Write a function that returns the closest multiple of 5 that is smaller than a given number,\n    without using modulo arithmetic.\n    '''\n    return (n - (n//5)*5)\ndef get_value(dct,key):\n    '''\n    Write a function that returns the value of a key in a dict.\n    '''\n    return dct[key]\ndef get_value_no_mod(dct,key):\n    '''\n    Write a function that returns the value of a key in a dict, without using modulo arithmetic.\n    '''\n    return dct[key]\ndef all_values_no_mod(dct):\n    '''\n    Write a function that returns a list of all the values in a dict.\n    '''\n    return [dct[i] for i in dct]\ndef all_values(dct):\n    '''\n    Write a function that returns a list of all the values in a dict.\n    '''\n    return list(dct.values())\ndef count_occurances(lst,target):\n    '''\n    Write a function that returns the number of times a target value appears in a list.\n    '''\n    return lst.count(target)\ndef count_occurances_no_mod(lst,target):\n    '''\n    Write a function that returns the number of times a target value appears in a list,\n    without using modulo arithmetic.\n    '''\n    return lst.count(target)\ndef count_occurances_no_set(lst,target):\n    '''\n    Write a function that returns the number of times a target value appears in a list,\n    without using a set().\n    '''\n    count = 0\n    for i in lst:\n        if i == target:\n            count += 1\n    return count\ndef is_int(x):\n    '''\n    Write a function that returns True if a given number is an integer, and False otherwise.\n    '''\n    return x == int(x)\ndef is_int_no_mod(x):\n    '''\n    Write a function that returns True if a given number is an integer, and False otherwise.\n    '''\n    return x == int(x)\ndef is_int_no_set(x):\n    '''\n    Write a function that returns True if a given number is an integer, and False otherwise.\n    '''\n    return x == int(x)\ndef get_first_duplicate(lst):\n    '''\n    Write a function that returns the first value that appears in a list more than once.\n    '''\n    for i in lst:\n        if lst.count(i) > 1:\n            return i\n    return None\ndef get_first_duplicate_no_mod(lst):\n    '''\n    Write a function that returns the first value that appears in a list more than once,\n    without using modulo arithmetic.\n    '''\n    for i in lst:\n        if lst.count(i) > 1:\n            return i\n    return None\ndef get_first_duplicate_no_set(lst):\n    '''\n    Write a function that returns the first value that appears in a list more than once,\n    without using a set().\n    '''\n    for i in lst:\n        if lst.count(i) > 1:\n            return i\n    return None\ndef count_occurances_no_mod(lst,target):\n    '''\n    Write a function that returns the number of times a target value appears in a list,\n    without using modulo arithmetic.\n    '''\n    count = 0\n    for i in lst:\n        if i == target:\n            count += 1\n    retur",
        "num_ids": 30
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + b*1j\n    return cmath.phase(c)\n",
        "num_ids": 22
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    r=a.real\n    i=a.imag\n    b=b.real\n    c=b.imag\n    real_part = cmath.phase(complex(r,i))\n    imag_part = cmath.phase(complex(b,c))\n    #return real_part + imag_part\n    angle = abs(real_part - imag_part)\n    if angle>=0 and angle < 180:\n        return angle\n    elif angle >= 180 and angle < 360:\n        return -(360 - angle)\n    elif angle >= 360 and angle < 540:\n        return angle - 360\n    else:\n        return -(angle - 540)\n",
        "num_ids": 157
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x=a.real\n    y=a.imag\n    \n    #get the real part of complex number\n    real=a.real\n    #get the imaginary part of complex number\n    imag=a.imag\n    \n    #define the function to get the angle\n    angle=cmath.phase(complex(real,imag))\n    \n    return angle\n",
        "num_ids": 85
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = complex(a)\n    b = complex(b)\n    a_mag = abs(a)\n    b_mag = abs(b)\n    if a_mag < b_mag:\n        if a.imag < 0:\n            angle = 90 + cmath.phase(a / b)\n        else:\n            angle = cmath.phase(a / b)\n    else:\n        if b.imag < 0:\n            angle = 90 - cmath.phase(a / b)\n        else:\n            angle = -cmath.phase(a / b)\n    return angle\n",
        "num_ids": 140
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n",
        "num_ids": 16
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n",
        "num_ids": 16
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #a = a.real\n    #b = a.imag\n    a = abs(a)\n    b = abs(b)\n    return cmath.phase(complex(a,b))\ndef angle_complex_2(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = abs(a)\n    b = abs(b)\n    return cmath.phase(complex(a,b))\ndef angle_complex_3(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #a = a.real\n    #b = a.imag\n    a = abs(a)\n    b = abs(b)\n    angle = cmath.phase(complex(a,b))\n    angle = angle*180/cmath.pi\n    if angle>180:\n        angle = 360-angle\n    return angle\ndef solution(x):\n    '''\n    Write a function to get the sum of the digits of a number.\n    '''\n    sum = 0\n    for i in str(x):\n        sum = sum + int(i)\n    return sum\ndef solve(x,y):\n    '''\n    Write a function to get the sum of the digits of a number.\n    '''\n    sum = 0\n    for i in str(x):\n        sum = sum + int(i)\n    if sum == y:\n        return True\n    return False\ndef solve_2(x,y):\n    '''\n    Write a function to get the sum of the digits of a number.\n    '''\n    sum = 0\n    for i in str(x):\n        sum = sum + int(i)\n        if sum == y:\n            return True\n    return False\ndef sum_of_divisors(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, x):\n        if x%i == 0:\n            sum = sum + i\n    return sum\ndef sum_of_divisors_2(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_3(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_4(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_5(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_6(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_7(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_8(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_9(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_10(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_11(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_12(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_13(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_14(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_15(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_16(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_17(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_18(x):\n    '''\n    Write a function to get the sum of the divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(x**0.5)+1):\n        if x%i == 0:\n            sum = sum + i + x/i\n    return sum\ndef sum_of_divisors_19(x):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a_re = a.real\n    a_im = a.imag\n    b_re = b.real\n    b_im = b.imag\n    angle_a = cmath.atan2(a_im,a_re)\n    angle_b = cmath.atan2(b_im,b_re)\n    angle_a = cmath.phase(angle_a)\n    angle_b = cmath.phase(angle_b)\n    return abs(angle_a-angle_b)\n",
        "num_ids": 121
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = complex(a)\n    b = complex(b)\n    angle_ab = cmath.phase(a*b)\n    return angle_ab\n",
        "num_ids": 39
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        cnt = 0\n        for j in range(i, len(string)):\n            if string[j] == '1':\n                cnt += 1\n            else:\n                max_length = max(max_length, cnt)\n                cnt = 0\n    print max_length\n",
        "num_ids": 89
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    res = 0\n    for i in xrange(1, len(string)):\n        if string[i] == '0':\n            res = max(res, string[i - 1] == '0')\n        else:\n            res = max(res, 1 + find_length(string[i + 1:]))\n    return res\n",
        "num_ids": 90
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    #assume 2nd to nth character are all 1s\n    temp = [0 for i in range(len(string))]\n    \n    for i in range(1, len(string)):\n        if string[i] == \"0\":\n            temp[i] = temp[i-1] + 1\n        elif string[i] == \"1\":\n            temp[i] = temp[i-1]\n    \n    max_diff = 0\n    for i in range(1, len(string)):\n        if temp[i] - temp[i-1] > max_diff:\n            max_diff = temp[i] - temp[i-1]\n    \n    return max_diff\n",
        "num_ids": 169
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    length = len(string)\n    \n    start_index = 0\n    end_index = 0\n    counter = 0\n    min_count = 0\n    \n    while end_index < length:\n        if string[end_index] == '0':\n            counter += 1\n            end_index += 1\n            if counter > min_count:\n                min_count = counter\n        else:\n            counter = 0\n            end_index += 1\n    return min_count\n        ",
        "num_ids": 115
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    maximum = 0\n    length = len(string)\n    for i in xrange(length):\n        if string[i] == '0':\n            for j in xrange(i,length):\n                if string[j] == '0':\n                    length -= 1\n                else:\n                    break\n            maximum = max(maximum, length)\n    return maximum\n",
        "num_ids": 85
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    i = 0\n    j = len(string) - 1\n    max_diff = 0\n    while i <= j:\n        if string[i] == '0' and string[j] == '0':\n            max_diff = max(max_diff, j - i)\n            i += 1\n        elif string[i] == '1' and string[j] == '1':\n            max_diff = max(max_diff, j - i)\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return max_diff\n",
        "num_ids": 134
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # write your code here\n    if len(string) == 0:\n        return 0\n    last_bit = string[0]\n    count = 0\n    result = 0\n    for i in range(1, len(string)):\n        if string[i] == last_bit:\n            count += 1\n        else:\n            result = max(result, count)\n            last_bit = string[i]\n            count = 1\n    return max(result, count)\n",
        "num_ids": 112
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    sub_strings = {}\n    for i in range(len(string)):\n        sub_strings[i] = (string[i:], len(string[i:]))\n    max_len = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            max_len = max(max_len, abs(sub_strings[j][1] - sub_strings[i][1]))\n    return max_len\n",
        "num_ids": 114
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l=len(string)\n    n0=0\n    n1=0\n    for i in range(l):\n        if string[i]=='0':\n            n0=n0+1\n        elif string[i]=='1':\n            n1=n1+1\n        if n1<n0:\n            n0=n1\n        if n1>n0:\n            n1=n0\n    return n1-n0\n",
        "num_ids": 112
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(2, min(a,b) + 1):\n        if (a%i == 0) and (b%i == 0):\n            sum = sum + i\n    return sum\n    \ndef sum1(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(2, min(a,b) + 1):\n        if (a%i == 0) and (b%i == 0):\n            sum = sum + i\n    return sum\n    \ndef sum2(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(2, min(a,b) + 1):\n        if (a%i == 0) and (b%i == 0):\n            sum = sum + i\n    return sum\n    \ndef isPrime(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,n):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime1(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1)):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime2(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime3(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime4(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime5(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime6(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime7(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime8(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime9(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime10(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime11(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime12(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime13(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime14(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime15(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime16(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime17(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for i in range(3,int(n**0.5 + 1),2):\n        if n%i == 0:\n            return 0\n    return 1\n    \ndef isPrime18(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    for ",
        "num_ids": 29
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    gcd = gcd(a,b)\n    lcm = a*b/gcd\n    return lcm\n",
        "num_ids": 30
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    n=[]\n    while 1:\n        if b%a==0:\n            n.append(a)\n            b=b/a\n        else:\n            break\n    return sum(n)\n",
        "num_ids": 50
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return gcd(a,b)\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    while a!=b:\n        if a>b:\n            a=a-b\n        else:\n            b=b-a\n    return a\ndef diff(a,b):\n    '''\n    Write a python function to find the difference of two given numbers.\n    '''\n    return abs(a-b)\ndef multiply(a,b):\n    '''\n    Write a python function to find the product of two given numbers.\n    '''\n    return a*b\ndef power(a,b):\n    '''\n    Write a python function to find the power of a given number to the given power.\n    '''\n    return pow(a,b)\ndef sqrt(a):\n    '''\n    Write a python function to find the square root of a given number.\n    '''\n    return pow(a,0.5)\ndef divide(a,b):\n    '''\n    Write a python function to find the quotient of two given numbers.\n    '''\n    return a/b\ndef add(a,b):\n    '''\n    Write a python function to find the sum of two given numbers.\n    '''\n    return a+b\ndef subtract(a,b):\n    '''\n    Write a python function to find the difference of two given numbers.\n    '''\n    return a-b\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n<0:\n        print('Factorial of a negative number does not exist')\n    elif n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n<0:\n        print('Fibonacci sequence is not defined for negative numbers')\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef fibonacci_list(n):\n    '''\n    Write a python function to find the nth Fibonacci number in a list.\n    '''\n    a=0\n    b=1\n    fibs=[]\n    for i in range(1,n):\n        fibs.append(a+b)\n        a=b\n        b=fibs[i-1]+fibs[i]\n    return fibs[n-1]\ndef print_characters(str):\n    '''\n    Write a python function to print all the characters of a string.\n    '''\n    for i in str:\n        print(i,end=\" \")\n    print()\ndef print_integer(n):\n    '''\n    Write a python function to print all the digits of a number.\n    '''\n    if n<0:\n        print('Enter a positive number')\n    else:\n        print(n)\n        print_integer(n//10)\ndef print_digits(num):\n    '''\n    Write a python function to print all the digits of a number.\n    '''\n    if num<0:\n        print('Enter a positive number')\n    elif num==0:\n        return\n    else:\n        print(num%10)\n        print_digits(num//10)\ndef digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    if n<0:\n        print('Enter a positive number')\n    else:\n        sum=0\n        while n!=0:\n            sum+=n%10\n            n//=10\n        return sum\ndef max_digit(a,b):\n    '''\n    Write a python function to find the maximum digit of two given numbers.\n    '''\n    if a<0:\n        print('Enter a positive number')\n    elif b<0:\n        print('Enter a positive number')\n    elif a==b:\n        return a\n    elif a>b:\n        return max_digit(a%10,b%10)\n    else:\n        return max_digit(a//10,b//10)\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    if n<0:\n        print('Enter a positive number')\n    else:\n        sum=0\n        while n!=0:\n            sum+=n%10\n            n//=10\n        return sum\ndef power(a,b):\n    '''\n    Write a python function to find the power of a number to a given power.\n    '''\n    return pow(a,b)\ndef prime_number(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        return True\ndef sieve(n):\n    '''\n    Write a python function to print all the prime numbers from 1 to n.\n    '''\n    if n<2:\n        return\n    elif n==2:\n        print(2)\n    else:\n        print(2)\n        for i in range(3,n):\n            if i%2!=0:\n                print(i)\ndef count_primes(n):\n    '''\n    Write a python function to count the number of prime numbers from 1 to n.\n    '''\n    if n<1:\n        return\n    else:\n        if n==1:\n            return 0\n        elif n==2:\n            return 1\n        else:\n            count=0\n            for i in range(2,n):\n                if prime_number(i):\n                    count+=1\n            return count\ndef is_sorted(l):\n    '''\n    Write a python function to check whether a given list is sorted or not.\n    '''\n    if len(l)==1:\n        return True\n    elif l[0]<l[1]:\n        return is_sorted(l[1:])\n    else:\n        return False\ndef is_anagram(str1,str2):\n    '''\n    Write a python function to check whether two given strings are anagrams of each other or not.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        return sorted(str1)==sorted(str2)\ndef count_vowels(str):\n    '''\n    Write a python function to count the number of vowels in a given string.\n    '''\n    if len(str)==0:\n        return 0\n    elif str[0] in 'aeiouAEIOU':\n        return 1+count_vowels(str[1:])\n    else:\n        return count_vowels(str[1:])\ndef count_consonants(str):\n    '''\n    Write a python function to count the number of consonants in a given string.\n    '''\n    if len(str)==0:\n        return 0\n    elif str[0] not in 'aeiouAEIOU':\n        return 1+count_consonants(str[1:])\n    else:\n        return count_consonants(str[1:])\ndef count_capital_letters(str):\n    '''\n    Write a python function to count the number of capital letters in a given string.\n    '''\n    if len(str)==0:\n        return 0\n    elif str[0]>='A' and str[0]<='Z':\n        return 1+count_capital_letters(str[1:])\n    else:\n        return count_capital_letters(str[1:])\ndef count_lower_letters(str):\n    '''\n    Write a python function to count the number of lowercase letters in a given string.\n    '''\n    if len(str)==0:\n        return 0\n    elif str[0]>='a' and str[0]<='z':\n        return 1",
        "num_ids": 40
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return(reduce(lambda x,y:x*y,filter(lambda x:a%x==0 and b%x==0,range(1,a*b+1))))\n",
        "num_ids": 45
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    n1=0\n    n2=0\n    if(a>b):\n        b=a\n        a=b\n    while(1):\n        if(a%b==0):\n            n1+=b\n            break\n        b-=1\n    while(1):\n        if(b%a==0):\n            n2+=a\n            break\n        a-=1\n    if(n1>n2):\n        print n1\n    else:\n        print n2\n",
        "num_ids": 118
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    if a==b:\n        return 1\n    elif a>b:\n        return sum(b,a%b)\n    else:\n        return sum(a,b%a)\n",
        "num_ids": 49
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lcm=a*b/GCD(a,b)\n    return lcm\n",
        "num_ids": 23
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # initialise result and variables\n    result = 0\n    divisors = set()\n    num1 = int(a)\n    num2 = int(b)\n    for divisor in range(2,min(num1,num2)+1):\n        if num1%divisor == 0 and num2%divisor == 0:\n            divisors.add(divisor)\n    for divisor in divisors:\n        result += divisor\n    return result\n",
        "num_ids": 117
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    a1 = max(a,b)\n    b1 = min(a,b)\n    while a1%b1!= 0:\n        a1, b1 = b1, a1%b1\n    return a1 + b1\ndef average(a,b):\n    return (a+b)/2.0\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while a%b!= 0:\n        a, b = b, a%b\n    return b\ndef power(a,b):\n    return a**b\ndef factorial(a):\n    return 1 if a == 0 else a*factorial(a-1)\ndef exp(a,b):\n    return 1 if a == 0 else a*exp(a,b-1)\ndef ln(a):\n    return log(a)\ndef log(a,base):\n    return log(a)/log(base)\ndef log10(a):\n    return log(a,10)\ndef log2(a):\n    return log(a,2)\ndef sqrt(a):\n    return power(a,0.5)\ndef cbrt(a):\n    return power(a,1./3.)\ndef sqrt_p(a):\n    '''\n    Write a python function to find the square root of a given number rounded to an integer.\n    '''\n    return a**(0.5)\ndef cbrt_p(a):\n    '''\n    Write a python function to find the cube root of a given number rounded to an integer.\n    '''\n    return a**(1./3.)\ndef ceil(a):\n    return int(a)\ndef floor(a):\n    return int(a)\ndef mod(a,b):\n    '''\n    Write a python function to find the remainder of two given numbers.\n    '''\n    return a%b\ndef is_int(a):\n    return type(a) is int\ndef is_num(a):\n    return isinstance(a,(int,float))\ndef gcd_p(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd(a,b)\ndef lcm(a,b):\n    return a*b/gcd(a,b)\ndef is_prime(a):\n    if a <= 1:\n        return False\n    if a == 2:\n        return True\n    if a%2 == 0:\n        return False\n    return all(a%i!= 0 for i in range(3,int(a**0.5)+1,2))\ndef is_palindrome(a):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    return a == a[::-1]\ndef is_even(a):\n    return a%2 == 0\ndef is_odd(a):\n    return not is_even(a)\ndef is_multiple(a,b):\n    return a%b == 0\ndef is_prime_num(a):\n    return is_prime(a)\ndef is_perfect(a):\n    s = 0\n    for i in range(1,a):\n        if a%i == 0:\n            s += i\n    return s == a\ndef is_perfect_num(a):\n    return is_perfect(a)\ndef is_fib(a):\n    return is_perfect(a) and is_prime(a)\ndef is_fib_num(a):\n    return is_fib(a)\ndef is_fib_num_p(a):\n    '''\n    Write a python function to check if a given number is a Fibonacci number.\n    '''\n    return is_fib_num(a)\ndef is_fib_num_bp(a):\n    '''\n    Write a python function to check if a given number is a Fibonacci number with prime factorization.\n    '''\n    s = []\n    while a > 1:\n        if is_prime_num(a):\n            s.append(a)\n            break\n        if is_perfect_num(a):\n            s.append(a)\n            break\n        a1, a = a, a%a\n    return len(s) == 2 and s[0]+s[1] == a\ndef is_fib_num_bp_p(a):\n    '''\n    Write a python function to check if a given number is a Fibonacci number with prime factorization and no common prime factor.\n    '''\n    return is_fib_num_p(a) and all(is_prime_num(i) for i in get_factors(a))\ndef is_fib_num_bp_p_m(a):\n    '''\n    Write a python function to check if a given number is a Fibonacci number with prime factorization and no common prime factor.\n    '''\n    return is_fib_num_p(a) and all(is_prime_num(i) for i in get_factors(a)) and not any(is_prime_num(i) for i in get_factors(a))\ndef is_fib_num_bp_p_m_q(a):\n    '''\n    Write a python function to check if a given number is a Fibonacci number with prime factorization and no common prime factor.\n    '''\n    return is_fib_num_p(a) and all(is_prime_num(i) for i in get_factors(a)) and not any(is_prime_num(i) for i in get_factors(a)) and len(get_factors(a)) > 2\ndef get_factors(a):\n    if a <= 1:\n        return []\n    r = []\n    for i in range(1,int(a**0.5)):\n        if a%i == 0:\n            r.append(i)\n            r.append(a//i)\n    return r\ndef get_factors_p(a):\n    '''\n    Write a python function to find the prime factorization of a given number.\n    '''\n    if a <= 1:\n        return []\n    r = []\n    for i in range(1,int(a**0.5)+1):\n        if a%i == 0:\n            r.append(i)\n            r.append(a//i)\n    return r\ndef is_factor(a,b):\n    return b%a == 0\ndef is_factor_p(a,b):\n    return is_factor(a,b)\ndef is_factor_p_m(a,b):\n    return is_factor(a,b) and not is_factor(b,a)\ndef is_factor_m(a,b):\n    return not is_factor(a,b)\ndef is_factor_bp(a,b):\n    return is_factor(a,b) and not is_factor_m(a,b)\ndef is_factor_bm(a,b):\n    return not is_factor(a,b) and not is_factor_p(a,b)\ndef is_factor_bp_m(a,b):\n    return is_factor(a,b) and not is_factor_m(a,b) and not is_factor_p(a,b)\ndef is_factor_bp_bm(a,b):\n    return is_factor(a,b) and not is_factor_m(a,b) and not is_factor_p(a,b) and not is_factor_p_m(a,b)\ndef get_factors_bp(a):\n    '''\n    Write a python function to find the prime factorization of a given number with the prime number at the back.\n    '''\n    if a <= 1:\n        return []\n    r = []\n    for i in get_factors_p(a):\n        r.append(i)\n        r.append(a//i)\n    return r\ndef get_factors_bp_m(a):\n",
        "num_ids": 67
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # if y is 0, return 0\n    # if x is 0, return 0\n    if y == 0 or x == 0:\n        return 0\n    # otherwise, multiply the two integers\n    # and return the result\n    return x * y\n",
        "num_ids": 59
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \ndef test_multiply_int():\n    assert multiply_int(2, 3) == 6\n",
        "num_ids": 33
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l=[]\n    for word in str.split(' '):\n        if len(word)>n:\n            l.append(word)\n    return l\nprint(long_words(3, 'A short sentence'))\n",
        "num_ids": 55
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    answer = []\n    for word in str.split():\n        if len(word) > n:\n            answer.append(word)\n    return answer\n",
        "num_ids": 38
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # IMPLEMENT HERE\n    output = []\n    for word in str:\n        if len(word) > n:\n            output.append(word)\n    return output\n",
        "num_ids": 43
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    count = 0\n    for word in str:\n        if len(word) > n:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for i in range(len(str)):\n        if len(str[i]) > n:\n            long_words.append(str[i])\n    return long_words\n",
        "num_ids": 51
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n",
        "num_ids": 19
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_numbers = [\n        [8,1,6,3,5,7,4,9,2],\n        [6,1,8,7,5,3,2,9,4],\n        [4,9,2,3,5,7,8,1,6],\n        [2,9,4,7,5,3,6,1,8],\n        [8,3,4,1,5,9,6,7,2],\n        [4,3,8,9,5,1,2,7,6],\n        [6,7,2,1,5,9,8,3,4],\n        [2,7,6,9,5,1,4,3,8]\n        ]\n    magic_number_check = []\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            magic_number_check.append(my_matrix[i][j])\n    if magic_number_check == magic_numbers:\n        return True\n    else:\n        return False\n",
        "num_ids": 265
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n",
        "num_ids": 13
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # We expect a list or tuple of dimension n*n\n    n = len(my_matrix)\n    if n < 1:\n        return False\n    # Calculate the sum of the rows, columns and diagonals\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n    column_sums = [sum(row[i] for row in my_matrix) for i in range(n)]\n    diagonal_sum = [my_matrix[i][i] for i in range(n)]\n    diagonal_sum.extend([my_matrix[i][-i-1] for i in range(n)])\n    if all([x == n * (n ** 2 + 1) / 2 for x in row_sums]) and \\\n       all([x == n * (n ** 2 + 1) / 2 for x in column_sums]) and \\\n       all([x == n * (n ** 2 + 1) / 2 for x in diagonal_sum]):\n        return True\n    else:\n        return False\n",
        "num_ids": 253
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_matrix_sum = sum_matrix(my_matrix)\n    if my_matrix_sum!= 15:\n        return False\n    for i in range(len(my_matrix)):\n        if sum_row(my_matrix, i)!= 15:\n            return False\n    for i in range(len(my_matrix)):\n        if sum_col(my_matrix, i)!= 15:\n            return False\n    for i in range(0, len(my_matrix), 2):\n        if sum_diag(my_matrix, i)!= 15:\n            return False\n    for i in range(1, len(my_matrix), 2):\n        if sum_diag(my_matrix, i)!= 15:\n            return False\n    return True\n",
        "num_ids": 194
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    mid = n // 2\n    for i in range(0,n):\n        for j in range(0,n):\n            if i == mid and j == mid:\n                continue\n            elif my_matrix[i][j]!= my_matrix[mid][mid]:\n                return False\n    return True\n",
        "num_ids": 88
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    '''\n    Create a new matrix of the size of the input matrix\n    '''\n    magic_square = [[0 for x in range(len(my_matrix))] for x in range(len(my_matrix))]\n    \n    '''\n    The magic square can have any sum\n    '''\n    magic_square_sum = sum(my_matrix)\n    \n    '''\n    We only need to check for the middle position, we will not need to check the lower and higher positions.\n    We will check for the diagonal position and the other positions\n    '''\n    '''\n    Now loop through the entire matrix and check for the sum\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            '''\n            Check the sum of the row, the column and the main diagonal\n            '''\n            if my_matrix[i][j]!= magic_square_sum - my_matrix[i][j] - magic_square[i][j]:\n                print 'Not a magic square'\n                return False\n            else:\n                '''\n                Now check the other positions\n                '''\n                if magic_square[i][j]!= magic_square_sum - magic_square[i][j] - magic_square[i][j]:\n                    print 'Not a magic square'\n                    return False\n    print 'The matrix is a magic square'\n    return True\n    \n    ",
        "num_ids": 69
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n=len(my_matrix)\n    magic_sum=0\n    for i in range(n):\n        for j in range(n):\n            magic_sum+=my_matrix[i][j]\n    if magic_sum==0:\n        return 'Magic'\n    else:\n        return 'Not a Magic'\n",
        "num_ids": 80
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    total = 0\n    for i in my_matrix:\n        total = total + sum(i)\n    if total!= 30:\n        return False\n    else:\n        return True\n",
        "num_ids": 47
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]):\n        total_sum = 0\n        total_squared_sum = 0\n        for i in range(len(my_matrix)):\n            for j in range(len(my_matrix[0])):\n                total_sum += my_matrix[i][j]\n                total_squared_sum += my_matrix[i][j]**2\n        if total_sum == total_squared_sum:\n            return True\n    else:\n        return False\n",
        "num_ids": 133
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix, list):\n        raise TypeError(\"The input is not a list\")\n    if len(my_matrix)!= len(my_matrix[0]):\n        raise TypeError(\"The input is not a square matrix\")\n    if len(my_matrix) == 0:\n        raise ValueError(\"The input is an empty list\")\n    for row in my_matrix:\n        if not isinstance(row, list):\n            raise TypeError(\"The input is not a list of lists\")\n        if len(row)!= len(my_matrix[0]):\n            raise TypeError(\"The input is not a square matrix\")\n        if len(row) == 0:\n            raise ValueError(\"The input is an empty list\")\n        for column in row:\n            if not isinstance(column, int):\n                raise TypeError(\"The input is not a list of integers\")\n            if column < 0:\n                raise ValueError(\"The input is not a positive integer matrix\")\n    if sum(sum(row) for row in my_matrix)!= sum(sum(column) for column in zip(*my_matrix)):\n        raise ValueError(\"The input is not a magic square\")\n",
        "num_ids": 285
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    result = {}\n    for i in range(len(nums)):\n        if nums[i] not in result.keys():\n            result[nums[i]] = 1\n        else:\n            result[nums[i]] += 1\n    max_value = 0\n    for key in result.keys():\n        if result[key] > max_value:\n            max_value = result[key]\n            max_key = key\n    return max_key\n",
        "num_ids": 111
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_freq = defaultdict(lambda:0)\n    for i in range(len(nums)):\n        dict_freq[nums[i]] += 1\n    max_freq = max(dict_freq.values())\n    return [k for k,v in dict_freq.items() if v==max_freq]\n",
        "num_ids": 84
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict1 = defaultdict(int)\n    for num in nums:\n        dict1[num] += 1\n    return max(dict1, key=dict1.get)\n",
        "num_ids": 44
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = 0\n    max_num = None\n    for num, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    return max_num\n",
        "num_ids": 83
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums = list(set(nums))\n    if len(nums) == 1:\n        return nums[0]\n    dict1 = defaultdict(int)\n    for i in nums:\n        dict1[i] += 1\n    return max(dict1, key=dict1.get)\n",
        "num_ids": 75
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d=defaultdict(int)\n    for i in nums:\n        d[i]+=1\n    return max(d.items(),key=lambda x:x[1])[0]\n",
        "num_ids": 48
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = nums[0]\n    max_occur = 1\n    for i in nums:\n        if i == max_freq:\n            max_occur += 1\n        else:\n            max_freq = i\n            max_occur = 1\n    return max_occur\n",
        "num_ids": 75
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_item = None\n    for item in nums:\n        if nums.count(item) > max_freq:\n            max_freq = nums.count(item)\n            max_item = item\n    return max_item\n",
        "num_ids": 68
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for i in nums:\n        dic[i] += 1\n    max = 0\n    for key in dic:\n        if dic[key] > max:\n            max = dic[key]\n            max_freq = key\n    return max_freq\n",
        "num_ids": 77
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    temp = defaultdict(int)\n    for i in nums:\n        temp[i]+=1\n    max_val = -float('inf')\n    for i,j in temp.items():\n        if max_val<j:\n            max_val=j\n            max_item = i\n    return max_item\n",
        "num_ids": 78
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    str2 = []\n    for i in str1:\n        if i in vowels:\n            str2.append(i)\n            str2.reverse()\n        else:\n            str2.append(i)\n    return ''.join(str2)\n",
        "num_ids": 84
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for i in str1:\n        if i.lower() not in vowels:\n            new_str += i\n        else:\n            new_str += i.swapcase()\n    return new_str\n",
        "num_ids": 72
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    str2 = [char for char in str1 if char not in vowels]\n    str2.reverse()\n    str3 = [char for char in str2 if char in vowels]\n    str3.reverse()\n    return \"\".join(str3)\n",
        "num_ids": 99
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = list(str1)\n    l = len(str1)\n    i = 0\n    while i < l:\n        if str1[i] in vowels and str1[i]!= 'y':\n            str1[i] = str1[l - 1 - i]\n            i += 1\n        elif str1[i] == 'y' and str1[i]!= 'y' and i + 1 < l:\n            str1[i] = str1[l - 1 - i]\n            str1[i + 1] = 'y'\n            i += 2\n        else:\n            i += 1\n    return ''.join(str1)\n",
        "num_ids": 173
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    vowels_str1 = []\n    for i in str1:\n        if i in vowels:\n            vowels_str1.append(i)\n    vowels_str1.reverse()\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1[i] = vowels_str1[i]\n    return ''.join(str1)\n",
        "num_ids": 127
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    reverse = \"\"\n    for i in range(0, len(str1)):\n        if str1[i] not in vowels:\n            reverse = reverse + str1[i]\n        elif str1[i] in vowels:\n            reverse = reverse + str1[i] + str1[i]\n    return reverse\n",
        "num_ids": 94
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1[i] = str1[i] + str1[i+1]\n            str1[i+1] = str1[i+1] + str1[i]\n    str1 = ''.join(str1)\n    return str1\n",
        "num_ids": 119
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    list1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if list1[i].lower() not in vowels:\n            i += 1\n        elif list1[j].lower() not in vowels:\n            j -= 1\n        else:\n            list1[i], list1[j] = list1[j], list1[i]\n            i += 1\n            j -= 1\n    return ''.join(list1)\n",
        "num_ids": 138
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    return ''.join([c for c in str1 if c not in vowels][::-1])\n",
        "num_ids": 37
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str1 = str1.lower()\n    v_str = ''\n    for i in str1:\n        if i in vowels:\n            v_str = v_str + i\n    return v_str[::-1]\n",
        "num_ids": 84
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(e) for e in tup1)\n",
        "num_ids": 20
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''\n    for i in range(len(tup1)):\n        tup_str += str(tup1[i])\n        if i!= len(tup1) - 1:\n            tup_str += ','\n    return tup_str\n",
        "num_ids": 70
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(i) for i in tup1)\n",
        "num_ids": 20
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = \"(\"\n    for i in tup1:\n        tup_str += str(i) + \",\"\n    tup_str = tup_str[:-1]\n    tup_str += \")\"\n    return tup_str\n",
        "num_ids": 65
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # using join()\n    return ''.join(tup1)\n    \ndef a_string(string1):\n    '''\n    Write a function to convert a string to a list.\n    '''\n    return list(string1)\n",
        "num_ids": 10
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # approach1\n    #return ''.join(tup1)\n    \n    # approach2\n    #return ''.join(str(i) for i in tup1)\n    \n    # approach3\n    #return ''.join(tup1)\n    \n    # approach4\n    return str(tup1)\n    \ndef str_tup(string1):\n    '''\n    Write a function to convert a string to a tuple.\n    '''\n    \n    return tuple(string1)\n    \ndef str_int(string1):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    \n    return int(string1)\n    \ndef str_float(string1):\n    '''\n    Write a function to convert a string to a float.\n    '''\n    \n    return float(string1)\n    \ndef str_len(string1):\n    '''\n    Write a function to calculate the length of a string.\n    '''\n    \n    return len(string1)\n    \ndef get_item(list1, index1):\n    '''\n    Write a function to get an item from a list using an index.\n    '''\n    \n    return list1[index1]\n    \ndef replace_item(list1, index1, item1):\n    '''\n    Write a function to replace an item in a list.\n    '''\n    \n    list1[index1] = item1\n    \ndef append_item(list1, item1):\n    '''\n    Write a function to append an item to a list.\n    '''\n    \n    list1.append(item1)\n    \ndef remove_item(list1, item1):\n    '''\n    Write a function to remove an item from a list.\n    '''\n    \n    list1.remove(item1)\n    \ndef insert_item(list1, index1, item1):\n    '''\n    Write a function to insert an item in a list.\n    '''\n    \n    list1.insert(index1, item1)\n    \ndef index_item(list1, item1):\n    '''\n    Write a function to get the index of an item in a list.\n    '''\n    \n    return list1.index(item1)\n    \ndef sort_list(list1, ascend=True):\n    '''\n    Write a function to sort a list.\n    '''\n    \n    if ascend:\n        return sorted(list1)\n    else:\n        return sorted(list1, reverse=True)\n    \ndef get_max(list1):\n    '''\n    Write a function to get the maximum value from a list.\n    '''\n    \n    return max(list1)\n    \ndef get_min(list1):\n    '''\n    Write a function to get the minimum value from a list.\n    '''\n    \n    return min(list1)\n    \ndef get_sum(list1):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    \n    return sum(list1)\n    \ndef get_average(list1):\n    '''\n    Write a function to get the average of a list.\n    '''\n    \n    return sum(list1) / len(list1)\n    \ndef get_count(list1, item1):\n    '''\n    Write a function to get the number of times an item occurs in a list.\n    '''\n    \n    return list1.count(item1)\n    \ndef get_unique(list1):\n    '''\n    Write a function to get the number of unique items in a list.\n    '''\n    \n    return len(set(list1))\n    \ndef get_median(list1):\n    '''\n    Write a function to get the median item from a list.\n    '''\n    \n    list1 = sorted(list1)\n    \n    if len(list1) % 2 == 0:\n        return (list1[int(len(list1)/2)] + list1[int(len(list1)/2)-1]) / 2\n    else:\n        return list1[int(len(list1)/2)]\n    \ndef get_mode(list1):\n    '''\n    Write a function to get the mode of a list.\n    '''\n    \n    return max(set(list1), key=list1.count)\n    \ndef reverse_string(string1):\n    '''\n    Write a function to reverse a string.\n    '''\n    \n    return string1[::-1]\n    \ndef add_spaces(string1, num1):\n    '''\n    Write a function to add spaces to a string.\n    '''\n    \n    return string1 +''*num1\n    \ndef get_digits(string1):\n    '''\n    Write a function to get the digits of a string.\n    '''\n    \n    return [int(i) for i in string1]\n    \ndef get_letters(string1):\n    '''\n    Write a function to get the letters of a string.\n    '''\n    \n    return [i for i in string1 if i.isalpha()]\n    \ndef get_lower(string1):\n    '''\n    Write a function to get the lowercase letters of a string.\n    '''\n    \n    return [i for i in string1 if i.islower()]\n    \ndef get_upper(string1):\n    '''\n    Write a function to get the uppercase letters of a string.\n    '''\n    \n    return [i for i in string1 if i.isupper()]\n    \ndef reverse_digits(string1):\n    '''\n    Write a function to reverse the digits in a string.\n    '''\n    \n    string1 = str(string1)\n    \n    return ''.join(str(string1[i]) for i in range(len(string1) - 1, -1, -1))\n    \ndef get_reverse_list(list1):\n    '''\n    Write a function to get the reverse of a list.\n    '''\n    \n    return list1[::-1]\n    \ndef get_palindrome(string1):\n    '''\n    Write a function to get the palindromes in a string.\n    '''\n    \n    return [i for i in string1 if i == i[::-1]]\n    \ndef is_palindrome(string1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    \n    return string1 == string1[::-1]\n    \ndef change_case(string1, case1):\n    '''\n    Write a function to change the case of a string.\n    '''\n    \n    if case1 == 'lower':\n        return string1.lower()\n    elif case1 == 'upper':\n        return string1.upper()\n    else:\n        return string1\n    \ndef is_pangram(string1, alphabet='abcdefghijklmnopqrstuvwxyz'):\n    '''\n    Write a function to check if a string is a pangram.\n    '''\n    \n    return set(string1) >= set(alphabet)\n    \ndef main():\n    '''\n    Define some sample strings for testing.\n    '''\n    \n    list1 = ['hello', 'goodbye', 'yes', 'no', 'yeah','maybe', 'lol']\n    \n    tuple1 = ('Hello', 'Goodbye', 'Yes', 'No', 'Yeah', 'Maybe', 'Lol')\n    \n    string1 = 'Hello, Goodbye, Yes, No, Yeah, Maybe, Lol'\n    \n    index1 = 2\n    \n    item1 = 'L'\n    \n    list2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    \n    tuple2 = (2, 4, 6, 8, 10, 12, 14, 16, 18, 20)\n    \n    string2 = '2, 4, 6, 8, 10, 12, 14, 16, 18, 20'\n    \n    print('String Operations:')\n    \n    print('tup_string(tuple1):'+ tup_string(tuple1))\n    \n    print('str_tup(string1):'+ str_tup(string1))\n    \n    print('str_int(string2):'",
        "num_ids": 259
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    l = list(tup1)\n    string = ''.join(l)\n    return string\n",
        "num_ids": 26
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1).replace('(','').replace(')','').replace(',','')\n",
        "num_ids": 29
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result = result + num\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == []:\n        return 0\n    return sum(i for i in nums if i < 0)\n",
        "num_ids": 30
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum += n\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([-num for num in nums])\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for i in nums:\n        if i < 0:\n            result += i\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_of_negativenums = 0\n    for num in nums:\n        if num < 0:\n            sum_of_negativenums += num\n    return sum_of_negativenums\n",
        "num_ids": 52
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n + 1) / 2\n",
        "num_ids": 16
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n + 1) / 2\n",
        "num_ids": 16
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # The hexagonal number is the sum of the odd numbers\n    return (n*(2*n+1))/2\n",
        "num_ids": 31
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 9\n    else:\n        return 15 + hexagonal_num(n-1)\n",
        "num_ids": 79
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 9\n    elif n == 9:\n        return 10\n    else:\n        return \"Error: hexagonal_num takes only integers in range [1, 9].\"\n",
        "num_ids": 133
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n*(2*n - 1))\n",
        "num_ids": 16
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n + 1)) / 2\n",
        "num_ids": 17
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_of_zeros = 0\n    num_of_non_zeros = 0\n    for num in nums:\n        if num == 0:\n            num_of_zeros += 1\n        else:\n            num_of_non_zeros += 1\n    return num_of_zeros/num_of_non_zeros\n",
        "num_ids": 83
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    num_zeros = 0\n    num_non_zeros = 0\n    for i in range(n):\n        if nums[i] == 0:\n            num_zeros += 1\n        else:\n            num_non_zeros += 1\n    return float(num_zeros)/num_non_zeros\n",
        "num_ids": 87
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # count = 0\n    # for num in nums:\n    #     if num == 0:\n    #         count += 1\n    # return count\n    # return float(sum([1 if num == 0 else 0 for num in nums])) / len(nums)\n    return sum([1 if num == 0 else 0 for num in nums])\n",
        "num_ids": 84
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return float(zeroes) / len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    l = len(nums)\n    z = 0\n    for i in range(l):\n        if nums[i] == 0:\n            z += 1\n    return z/float(l)\n",
        "num_ids": 50
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return sum(x == 0 for x in nums) / float(len(nums))\n",
        "num_ids": 24
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return sum(num==0 for num in nums)/float(len(nums))\n",
        "num_ids": 23
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    for i in nums:\n        if i == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    return count_zeroes / count_non_zeroes\n",
        "num_ids": 71
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero,zero = 0,0\n    for i in range(len(nums)):\n        if nums[i]==0:\n            zero+=1\n        else:\n            non_zero+=1\n    return float(zero)/float(non_zero)\n",
        "num_ids": 66
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    import operator\n    def check(x,y):\n        if x>y:\n            return False\n        if x == 0:\n            return True\n        if x==1:\n            return True\n        else:\n            return check(x//2,y) or check(x,y//2)\n    if n<1:\n        return False\n    if n==1:\n        return True\n    return check(n,2**31-1)\n",
        "num_ids": 107
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    for i in range(32):\n        if n & (1 << i) == 0:\n            count = count + 1\n        else:\n            if count & 1 == 1:\n                return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_Power_Of_Two(n):\n        if n <= 0:\n            return False\n        while n > 1:\n            if n % 2!= 0:\n                return False\n            n /= 2\n        return True\n    def is_Power_Of_Two_Helper(n):\n        if n <= 0:\n            return False\n        while n > 1:\n            if n % 2!= 0:\n                return False\n            n /= 2\n        return True\n    if is_Power_Of_Two_Helper(n):\n        return True\n    return False\ndef test_Power_Of_Two():\n    print \"Testing is_Power_Of_Two...\"\n    assert is_Power_Of_Two(0) == True\n    assert is_Power_Of_Two(1) == True\n    assert is_Power_Of_Two(2) == True\n    assert is_Power_Of_Two(3) == True\n    assert is_Power_Of_Two(4) == True\n    assert is_Power_Of_Two(5) == False\n    assert is_Power_Of_Two(6) == False\n    assert is_Power_Of_Two(7) == False\n    assert is_Power_Of_Two(8) == False\n    assert is_Power_Of_Two(9) == False\n    assert is_Power_Of_Two(10) == True\n    assert is_Power_Of_Two(11) == True\n    assert is_Power_Of_Two(12) == True\n    assert is_Power_Of_Two(13) == True\n    assert is_Power_Of_Two(14) == False\n    assert is_Power_Of_Two(15) == False\n    assert is_Power_Of_Two(16) == False\n    assert is_Power_Of_Two(17) == False\n    assert is_Power_Of_Two(18) == False\n    assert is_Power_Of_Two(19) == False\n    assert is_Power_Of_Two(20) == False\n    assert is_Power_Of_Two(21) == True\n    assert is_Power_Of_Two(22) == True\n    assert is_Power_Of_Two(23) == True\n    assert is_Power_Of_Two(24) == True\n    assert is_Power_Of_Two(25) == True\n    assert is_Power_Of_Two(26) == False\n    assert is_Power_Of_Two(27) == False\n    assert is_Power_Of_Two(28) == False\n    assert is_Power_Of_Two(29) == False\n    assert is_Power_Of_Two(30) == False\n    assert is_Power_Of_Two(31) == True\n    assert is_Power_Of_Two(32) == True\n    assert is_Power_Of_Two(33) == True\n    assert is_Power_Of_Two(34) == True\n    assert is_Power_Of_Two(35) == True\n    assert is_Power_Of_Two(36) == True\n    assert is_Power_Of_Two(37) == True\n    assert is_Power_Of_Two(38) == True\n    assert is_Power_Of_Two(39) == True\n    assert is_Power_Of_Two(40) == True\n    assert is_Power_Of_Two(41) == True\n    assert is_Power_Of_Two(42) == False\n    assert is_Power_Of_Two(43) == False\n    assert is_Power_Of_Two(44) == False\n    assert is_Power_Of_Two(45) == False\n    assert is_Power_Of_Two(46) == False\n    assert is_Power_Of_Two(47) == False\n    assert is_Power_Of_Two(48) == False\n    assert is_Power_Of_Two(49) == False\n    assert is_Power_Of_Two(50) == False\n    assert is_Power_Of_Two(51) == True\n    assert is_Power_Of_Two(52) == True\n    assert is_Power_Of_Two(53) == True\n    assert is_Power_Of_Two(54) == True\n    assert is_Power_Of_Two(55) == True\n    assert is_Power_Of_Two(56) == True\n    assert is_Power_Of_Two(57) == True\n    assert is_Power_Of_Two(58) == True\n    assert is_Power_Of_Two(59) == True\n    assert is_Power_Of_Two(60) == True\n    assert is_Power_Of_Two(61) == True\n    assert is_Power_Of_Two(62) == True\n    assert is_Power_Of_Two(63) == True\n    assert is_Power_Of_Two(64) == True\n    assert is_Power_Of_Two(65) == True\n    assert is_Power_Of_Two(66) == True\n    assert is_Power_Of_Two(67) == True\n    assert is_Power_Of_Two(68) == True\n    assert is_Power_Of_Two(69) == True\n    assert is_Power_Of_Two(70) == True\n    assert is_Power_Of_Two(71) == True\n    assert is_Power_Of_Two(72) == True\n    assert is_Power_Of_Two(73) == True\n    assert is_Power_Of_Two(74) == True\n    assert is_Power_Of_Two(75) == True\n    assert is_Power_Of_Two(76) == True\n    assert is_Power_Of_Two(77) == True\n    assert is_Power_Of_Two(78) == True\n    assert is_Power_Of_Two(79) == True\n    assert is_Power_Of_Two(80) == True\n    assert is_Power_Of_Two(81) == True\n    assert is_Power_Of_Two(82) == True\n    assert is_Power_Of_Two(83) == True\n    assert is_Power_Of_Two(84) == True\n    assert is_Power_Of_Two(85) == True\n    assert is_Power_Of_Two(86) == True\n    assert is_Power_Of_Two(87) == True\n    assert is_Power_Of_Two(88) == True\n    assert is_Power_Of_Two(89) == True\n    assert is_Power_Of_Two(90) == True\n    assert is_Power_Of_Two(91) == True\n    assert is_Power_Of_Two(92) == True\n    assert is_Power_Of_Two(93) == True\n    assert is_Power_Of_Two(94) == True\n    assert is_Power_Of_Two(95) == True\n    assert is_Power_Of_Two(96) == True\n    assert is_Power_Of_Two(97) == True\n    assert is_Power_Of_Two(98) == True\n    assert is_Power_Of_Two(99) == True\n    assert is_Power_Of_Two(100) == True\n    assert is_Power_Of_Two(101) == True\n    assert is_Power_Of_Two(102) == True\n    assert is_Power_Of_Two(103) == True\n    assert is_Power_Of_Two(104) == True\n    assert is_Power_Of_Two(105) == True\n    assert is_Power_Of_Two(106) == True\n    assert is_Power_Of_Two(107) == True\n    assert is_Power_Of_Two(108) == True\n    assert is_Power_Of_Two(109) == True\n    assert is_Power_Of_Two(110) == True\n    assert is_Power_Of_Two(111) == True\n    assert is_Power_Of_Two(112) == True\n    assert is_Power_Of_Two(113) == True\n    assert is_Power_Of_Two(114) == True\n    assert is_Power_Of_Two(115) == True\n    assert is_Power_Of_Two(116) == True\n    assert is_Power_Of_Two(117) == True\n    assert is_Power_Of_Two(118) == True\n    assert is_Power_Of_Two(119) == True\n    assert is_Power_Of_Two(120) == True\n    assert is_Power_Of_Two(121) == True\n    assert is_Power_Of_Tw",
        "num_ids": 1999
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return str(bin(n))[2:].count(\"1\") == 1\n",
        "num_ids": 21
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    l = len(bin(n)[2:])\n    l = l*2\n    print(l)\n    if n < 2:\n        return True\n    return n == 2**l\n",
        "num_ids": 47
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    num = n\n    result = 0\n    while(num>0):\n        rem = num%2\n        result += rem\n        num /= 2\n    if result == n:\n        return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n&(n-1)==0\n    \ndef is_Sum_Of_Powers_Of_Two_Ternary(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n&(n-1)==0 and n!=0\n",
        "num_ids": 19
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return isPowerOfTwo(n)\n    \n",
        "num_ids": 14
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n%2 == 0:\n        n /= 2\n    return n == 1\n    \nassert is_Sum_Of_Powers_Of_Two(0) == True\nassert is_Sum_Of_Powers_Of_Two(1) == True\nassert is_Sum_Of_Powers_Of_Two(2) == True\nassert is_Sum_Of_Powers_Of_Two(3) == False\nassert is_Sum_Of_Powers_Of_Two(4) == False\nassert is_Sum_Of_Powers_Of_Two(5) == True\nassert is_Sum_Of_Powers_Of_Two(6) == False\nassert is_Sum_Of_Powers_Of_Two(7) == True\nassert is_Sum_Of_Powers_Of_Two(8) == True\nassert is_Sum_Of_Powers_Of_Two(9) == False\n",
        "num_ids": 226
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # first find the sum of all the powers of 2 that are less than the given number\n    # now keep track of the number of powers of 2 that have been added to the sum\n    # once the total sum is equal to the given number, then check whether the number of power of 2 added is more than 1\n    \n    # ex: n = 5\n    # 0 + 1\n    # 1 + 1\n    # 2 + 1\n    # 3 + 1\n    # 4 + 1\n    # 5 + 1\n    # 6 + 1\n    # 7 + 1\n    # 8 + 1\n    \n    # if the number of powers of 2 added is more than 1, then the number cannot be represented as sum of non-zero powers of 2\n    \n    # ex: n = 4\n    # 0 + 1\n    # 1 + 1\n    # 2 + 1\n    # 3 + 1\n    # 4 + 1\n    \n    # if the number of powers of 2 added is 1, then the number can be represented as sum of non-zero powers of 2\n    \n    # ex: n = 3\n    # 0 + 1\n    # 1 + 1\n    # 2 + 1\n    \n    # if the number of powers of 2 added is 0, then the number can be represented as sum of non-zero powers of 2\n    \n    # if the number of powers of 2 added is less than 0, then the number cannot be represented as sum of non-zero powers of 2\n    \n    def count_Powers_Of_Two(n):\n        count = 0\n        while n >= 1:\n            if n % 2 == 0:\n                n = n / 2\n                count += 1\n            else:\n                break\n        return count\n        \n    total_sum = 0\n    powers_of_two = 0\n    \n    while total_sum <= n:\n        if total_sum + 2**powers_of_two <= n:\n            total_sum += 2**powers_of_two\n            powers_of_two += 1\n        else:\n            break\n    \n    if powers_of_two > 1:\n        return False\n    else:\n        return True\n        \n    # solution found from the following article\n    # https://www.codeeval.com/open_challenges/92/\n    \n    \ndef is_Power_Of_Two(n):\n    '''\n    Write a python function to check whether the given number is a power of 2 or not.\n    '''\n    \n    # check whether the number is even or odd\n    if n % 2 == 0:\n        # if the number is even, then divide it by two\n        return n == 2\n    else:\n        # if the number is odd, then return false\n        return False\n        \n    # solution found from the following article\n    # https://www.codeeval.com/open_challenges/92/\n    \n    \ndef is_Power_Of_Three(n):\n    '''\n    Write a python function to check whether the given number is a power of 3 or not.\n    '''\n    \n    # check whether the number is even or odd\n    if n % 3 == 0:\n        # if the number is even, then divide it by three\n        return n == 3\n    else:\n        # if the number is odd, then return false\n        return False\n        \n    # solution found from the following article\n    # https://www.codeeval.com/open_challenges/92/\n    \n    \ndef is_Power_Of_Four(n):\n    '''\n    Write a python function to check whether the given number is a power of 4 or not.\n    '''\n    \n    # check whether the number is even or odd\n    if n % 4 == 0:\n        # if the number is even, then divide it by four\n        return n == 4\n    else:\n        # if the number is odd, then return false\n        return False\n        \n    # solution found from the following article\n    # https://www.codeeval.com/open_challenges/92/\n    \n    \ndef is_Power_Of_Five(n):\n    '''\n    Write a python function to check whether the given number is a power of 5 or not.\n    '''\n    \n    # check whether the number is even or odd\n    if n % 5 == 0:\n        # if the number is even, then divide it by five\n        return n == 5\n    else:\n        # if the number is odd, then return false\n        return False\n        \n    # solution found from the following article\n    # https://www.codeeval.com/open_challenges/92/\n    \n    \ndef is_Power_Of_Six(n):\n    '''\n    Write a python function to check whether the given number is a power of 6 or not.\n    '''\n    \n    # check whether the number is even or odd\n    if n % 6 == 0:\n        # if the number is even, then divide it by six\n        return n == 6\n    else:\n        # if the number is odd, then return false\n        return False\n        \n    # solution found from the following article\n    # https://www.codeeval.com/open_challenges/92/\n    \n    \ndef is_Power_Of_Seven(n):\n    '''\n    Write a python function to check whether the given number is a power of 7 or not.\n    '''\n    \n    # check whether the number is even or odd\n    if n % 7 == 0:\n        # if the number is even, then divide it by seven\n        return n == 7\n    else:\n        # if the number is odd, then return false\n        return False\n        \n    # solution found from the following article\n    # https://www.codeeval.com/open_challenges/92/\n    \n    \ndef is_Power_Of_Eight(n):\n    '''\n    Write a python function to check whether the given number is a power of 8 or not.\n    '''\n    \n    # check whether the number is even or odd\n    if n % 8 == 0:\n        # if the number is even, then divide it by eight\n        return n == 8\n    else:\n        # if the number is odd, then return false\n        return False\n        \n    # solution found from the following article\n    # https://www.codeeval.com/open_challenges/92/\n    \n    \ndef is_Power_Of_Nine(n):\n    '''\n    Write a python function to check whether the given number is a power of 9 or not.\n    '''\n    \n    # check whether the number is even or odd\n    if n % 9 == 0:\n        # if the number is even, then divide it by nine\n        return n == 9\n    else:\n        # if the number is odd, then return false\n        return False\n        \n    # solution found from the following article\n    # https://www.codeeval.com/open_challenges/92/\n    \n    \ndef is_Power_Of_Ten(n):\n    '''\n    Write a python function to check whether the given number is a power of 10 or not.\n    '''\n    \n    # check whether the number is even or odd\n    if n % 10 == 0:\n        # if the number is even, then divide it by ten\n        return n == 10\n    else:\n        # if the number is odd, then return false\n        return False\n        \n    # solution found from the following article\n    # https://www.codeeval.com/open_challenges/92/\n    \n    \ndef is_Power_Of_Eleven(n):\n    '''\n    Write a python function to check whether the given number is a power of 11 or not.\n    '''\n    \n    # check whether the number is even or odd\n    if n % 11 == 0:\n        # if the number is even, then divide it by eleven\n        return n == 11\n    else:\n        # if the number is odd, then return false\n        return False\n        \n    # solution found from the following article\n    # https://www.codeeval.com/open_challenges/92/\n    \n    \ndef is_Power_Of_Twelve(n):\n    '''\n    Write a python function to check whether the given number is a power of 12 or not.\n    '''\n    \n    # check whether the number is even or odd\n    if n % 12 == 0:\n        # if the number is even, then divide it by twelve\n        return n == 12\n    else:\n        # if the number is odd, then return false\n        return False\n        \n    # solution found fro",
        "num_ids": 71
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r*2*pi\n",
        "num_ids": 10
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r*r\n    \ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi*r*r*r\n    \ndef sphere_surface_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r*r\n    \ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\n    \ndef cylinder_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*r + 2*math.pi*r*h\n    \ndef pyramid_volume(l,w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return l*w*h/3\n    \ndef pyramid_surface_area(l,w,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return l*w + l*w/3 + l*h/3 + w*h\n    \ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*r*h/3\n    \ndef cone_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*r*r + math.pi*r*h + math.pi*h*h/3\n    \ndef sphere_volume_table(r):\n    '''\n    Write a function to find the volume of a sphere from table.\n    '''\n    from math import pi\n    return {2:4/3*pi*r*r*r,3:4*pi*r*r*r/3,4:4*pi*r*r*r/4,5:4*pi*r*r*r/5,6:4*pi*r*r*r/6,7:4*pi*r*r*r/7,8:4*pi*r*r*r/8,9:4*pi*r*r*r/9,10:4*pi*r*r*r/10}[r]\n    \ndef sphere_surface_area_table(r):\n    '''\n    Write a function to find the surface area of a sphere from table.\n    '''\n    from math import pi\n    return {2:4*pi*r*r,3:4*pi*r*r/3,4:4*pi*r*r/4,5:4*pi*r*r/5,6:4*pi*r*r/6,7:4*pi*r*r/7,8:4*pi*r*r/8,9:4*pi*r*r/9,10:4*pi*r*r/10}[r]\n    \ndef pyramid_volume_table(l,w,h):\n    '''\n    Write a function to find the volume of a pyramid from table.\n    '''\n    return {2:l*w*h/3,3:l*w*h/3,4:l*h*h/4,5:l*h*h/5,6:l*h*h/6,7:l*h*h/7,8:l*h*h/8,9:l*h*h/9,10:l*h*h/10}[l*w]\n    \ndef pyramid_surface_area_table(l,w,h):\n    '''\n    Write a function to find the surface area of a pyramid from table.\n    '''\n    return {2:l*w + l*w/3 + l*h/3,3:l*w + l*w/3 + l*h/4,4:l*w/4 + l*h/5,5:l*w/5 + l*h/6,6:l*w/6 + l*h/7,7:l*w/7 + l*h/8,8:l*w/8 + l*h/9,9:l*w/9 + l*h/10,10:l*w/10 + l*h/10}[l*w]\n    \ndef cone_volume_table(r,h):\n    '''\n    Write a function to find the volume of a cone from table.\n    '''\n    return {2:math.pi*r*r*h/3,3:math.pi*r*r*h/4,4:math.pi*r*r*h/5,5:math.pi*r*r*h/6,6:math.pi*r*r*h/7,7:math.pi*r*r*h/8,8:math.pi*r*r*h/9,9:math.pi*r*r*h/10,10:math.pi*r*r*h/10}[r*h]\n    \ndef cone_surface_area_table(r,h):\n    '''\n    Write a function to find the surface area of a cone from table.\n    '''\n    return {2:math.pi*r*r,3:math.pi*r*r/3,4:math.pi*r*r/4,5:math.pi*r*r/5,6:math.pi*r*r/6,7:math.pi*r*r/7,8:math.pi*r*r/8,9:math.pi*r*r/9,10:math.pi*r*r/10}[r]\n    \ndef pyramid_volume_table_old(l,w,h):\n    '''\n    Write a function to find the volume of a pyramid from table.\n    '''\n    return {2:l*w*h/3,3:l*w*h/3,4:l*h*h/4,5:l*h*h/5,6:l*h*h/6,7:l*h*h/7,8:l*h*h/8,9:l*h*h/9,10:l*h*h/10}[l*w]\n    \ndef pyramid_surface_area_table_old(l,w,h):\n    '''\n    Write a function to find the surface area of a pyramid from table.\n    '''\n    return {2:l*w + l*w/3 + l*h/3,3:l*w + l*w/3 + l*h/4,4:l*w/4 + l*h/5,5:l*w/5 + l*h/6,6:l*w/6 + l*h/7,7:l*w/7 + l*h/8,8:l*w/8 + l*h/9,9:l*w/9 + l*h/10,10:l*w/10 + l*h/10}[l*w]\n    \ndef cylinder_volume_table(r,h):\n    '''\n    Write a function to find the volume of a cylinder from table.\n    '''\n    return {2:math.pi*r*r*h/3,3:math.pi*r*r*h/4,4:math.pi*r*r*h/5,5:math.pi*r*r*h/6,6:math.pi*r*r*h/7,7:math.pi*r*r*h/8,8:math.pi*r*r*h/9,9:math.pi*r*r*h/10,10:math.pi*r*r*h/10}[r*h]\n    \ndef cylinder_surface_area_table(r,h):\n    '''\n    Write a function to find the surface area of a cylinder from table.\n    '''\n    return {2:math.pi*r*r,3:math.pi*r*r/3,4:math.pi*",
        "num_ids": 33
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    circumference = pi * r * 2\n    return circumference\n",
        "num_ids": 19
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r*2*pi\n",
        "num_ids": 10
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([y for x in test_list for y in x])\n",
        "num_ids": 19
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for sublist in test_list for x in sublist]\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for y in test_list for x in y]\n",
        "num_ids": 18
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(set(itertools.chain(*test_list)))\n",
        "num_ids": 19
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for element in test_list:\n        new_list.extend(element)\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(itertools.chain(*test_list))\n",
        "num_ids": 17
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.extend(i)\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for l in test_list:\n        if type(l) == list:\n            for i in l:\n                flat_list.append(i)\n        else:\n            flat_list.append(l)\n    return flat_list\n",
        "num_ids": 65
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for element in sublist:\n            result.append(element)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n        return nums\n    def sort(nums, start, end):\n        if end == start:\n            return nums\n        # find the pivot\n        pivot = end\n        # the end is not at the right place\n        for i in range(start, end):\n            if nums[i] > nums[pivot]:\n                nums[i], nums[pivot] = nums[pivot], nums[i]\n        # the end is at the right place\n        nums = flip(nums, start, pivot - 1)\n        nums = sort(nums, start, pivot - 1)\n        nums = sort(nums, pivot + 1, end)\n        return nums\n    return sort(nums, 0, len(nums) - 1)\n",
        "num_ids": 238
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    global count\n    count = 0\n    max_num = max(nums)\n    n = len(nums)\n    for i in range(n,0,-1):\n        if max_num > i:\n            max_num -= 1\n            max_idx = nums.index(max_num)\n            if max_idx!= i-1:\n                count += i - max_idx - 1\n                #nums[max_idx],nums[i-1] = nums[i-1], nums[max_idx]\n                tmp = nums[max_idx]\n                nums[max_idx] = nums[i-1]\n                nums[i-1] = tmp\n    return count\n",
        "num_ids": 180
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    max_pivot = -1\n",
        "num_ids": 20
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted_list = nums\n    for i in range(len(nums) - 1, 0, -1):\n        temp = sorted_list[i]\n        j = i\n        while j > 0 and sorted_list[j - 1] > temp:\n            sorted_list[j] = sorted_list[j - 1]\n            j -= 1\n        sorted_list[j] = temp\n    return sorted_list\n",
        "num_ids": 104
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, n):\n        tmp = nums[0:n]\n        for i in range(n):\n            nums[i] = tmp[n - i - 1]\n        return nums\n",
        "num_ids": 53
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    steps = 0\n    n = len(nums)\n    for i in range(n):\n        steps += max(n - i, i)\n    \n    while steps > 0:\n        for i in range(n):\n            if nums[i] > nums[i + steps]:\n                nums[i], nums[i + steps] = nums[i + steps], nums[i]\n        steps -= 1\n    \n    return nums\n",
        "num_ids": 110
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    N = len(nums)\n    if N <= 1:\n        return nums\n    mid = N / 2\n    for i in xrange(mid, 0, -1):\n        if nums[i] > nums[0]:\n            break\n    if i == 1:\n        return nums\n    # swap the first i element with the last element\n    nums[0], nums[-1] = nums[-1], nums[0]\n    # reverse the first i elements of nums\n    l = 0\n    r = len(nums) - 1\n    while l < i:\n        nums[l], nums[r] = nums[r], nums[l]\n        l += 1\n        r -= 1\n    # reverse the first i elements of nums\n    for i in xrange(0, len(nums) - 1, 2):\n        nums[i], nums[i + 1] = nums[i + 1], nums[i]\n    return nums\n    \nnums = [3, 2, 4, 1, 5, 7, 6]\nprint pancake_sort(nums)",
        "num_ids": 271
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if i == len(nums) or nums[i] < nums[max_index]:\n            nums = [nums[i]] + nums[:i] + nums[i+1:max_index+1] + [nums[max_index]] + nums[i+1:]\n        else:\n            nums = [nums[i]] + nums[:max_index] + nums[i+1:max_index+1] + [nums[i]] + nums[max_index+1:]\n    return nums\n",
        "num_ids": 172
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def find_max_idx(arr):\n        '''\n        Return the index of the max element in arr.\n        '''\n        max_idx = 0\n        for idx in range(len(arr)):\n            if arr[idx] > arr[max_idx]:\n                max_idx = idx\n        return max_idx\n",
        "num_ids": 55
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)//2):\n        if i == len(nums) - i - 1:\n            continue\n        swap_num(nums, i, len(nums)-i-1)\n        swap_num(nums, 0, i)\n",
        "num_ids": 70
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return 0\n    else:\n        count = 0\n        for i in range(len(list1)):\n            if list1[i] == list2[i] and list1[i] == list3[i]:\n                count += 1\n        return count\n",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for item1,item2,item3 in zip(list1,list2,list3):\n        if item1 == item2 and item2 == item3:\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count = count + 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i]:\n            if list3[i] == list2[i]:\n                count = count + 1\n    print count\n",
        "num_ids": 61
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            result += 1\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # if len(list1)!= len(list2) or len(list1)!= len(list3) or len(list2)!= len(list3):\n    #     print \"Please input same length of list!\"\n    #     return None\n    # list1_tmp = list(list1)\n    # list2_tmp = list(list2)\n    # list3_tmp = list(list3)\n    # count = 0\n    # for i in xrange(len(list1)):\n    #     if list1_tmp[i] == list2_tmp[i] and list2_tmp[i] == list3_tmp[i]:\n    #         count += 1\n    # return count\n    \n    def count_samepair_2(list1,list2,list3):\n        '''\n        Write a function to count number items that are identical in the same position of three given lists.\n        '''\n        if len(list1)!= len(list2) or len(list1)!= len(list3) or len(list2)!= len(list3):\n            print \"Please input same length of list!\"\n            return None\n        result = 0\n        for i in xrange(len(list1)):\n            if list1[i] == list2[i] and list2[i] == list3[i]:\n                result += 1\n        return result\n    return count_samepair_2(list1,list2,list3)\n",
        "num_ids": 128
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\ndef is_palindrome(str):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    return str==str[::-1]\ndef is_monotonic(A):\n    '''\n    Write a function to check whether a given array is monotonic.\n    '''\n    if A[0]>=A[-1]:\n        for i in range(1,len(A)):\n            if A[i]<A[i-1]:\n                return False\n        return True\n    elif A[0]<A[-1]:\n        for i in range(1,len(A)):\n            if A[i]>A[i-1]:\n                return False\n        return True\n    else:\n        return True\ndef sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in an ascending order\n    '''\n    for i in range(len(M)-1):\n        for j in range(len(M)-1-i):\n            if M[j][0]>M[j+1][0]:\n                M[j],M[j+1]=M[j+1],M[j]\n            elif M[j][0]==M[j+1][0]:\n                if M[j][1]>M[j+1][1]:\n                    M[j],M[j+1]=M[j+1],M[j]\n            else:\n                if M[j][1]<M[j+1][1]:\n                    M[j],M[j+1]=M[j+1],M[j]\n    return M\ndef swap_node(head):\n    '''\n    Write a function to swap a node with its successor in a singly linked list.\n    '''\n    n=head\n    s=head.next\n    if s==None:\n        return n\n    while s.next!=None:\n        n=n.next\n        s=s.next\n    n.val,s.val=s.val,n.val\n    return head\ndef is_balanced(tree):\n    '''\n    Write a function to check whether a given tree is balanced.\n    '''\n    if tree==None:\n        return True\n    if abs(tree.height(tree.root)-tree.height(tree.root.left))>1 or abs(tree.height(tree.root)-tree.height(tree.root.right))>1:\n        return False\n    else:\n        if is_balanced(tree.root.left)==False:\n            return False\n        elif is_balanced(tree.root.right)==False:\n            return False\n        else:\n            return True\ndef get_paths(root,path,res):\n    '''\n    Write a function to get all paths from a node to leaf in a given binary tree.\n    '''\n    if root==None:\n        return\n    if root.left==None and root.right==None:\n        res.append(path+[root.val])\n    get_paths(root.left,path+[root.val],res)\n    get_paths(root.right,path+[root.val],res)\ndef print_leaf(root):\n    '''\n    Write a function to print all leaf nodes in a binary tree.\n    '''\n    if root==None:\n        return\n    if root.left==None and root.right==None:\n        print root.val\n    print_leaf(root.left)\n    print_leaf(root.right)\ndef find_first_common_ancestor(root,a,b):\n    '''\n    Write a function to find the first common ancestor of two given nodes in a binary tree.\n    '''\n    if root==None:\n        return root\n    if root.val==a or root.val==b:\n        return root\n    left=find_first_common_ancestor(root.left,a,b)\n    right=find_first_common_ancestor(root.right,a,b)\n    if left==None and right==None:\n        return root\n    if left!=None and right!=None:\n        return root\n    if left!=None:\n        return left\n    if right!=None:\n        return right\ndef is_bst(root):\n    '''\n    Write a function to check whether a given binary tree is a binary search tree.\n    '''\n    if root==None:\n        return True\n    if root.left==None and root.right==None:\n        return True\n    if root.left!=None and root.val<root.left.val:\n        return False\n    if root.right!=None and root.val>root.right.val:\n        return False\n    if root.left!=None:\n        if root.left.val>root.val:\n            return False\n    if root.right!=None:\n        if root.right.val<root.val:\n            return False\n    return is_bst(root.left) and is_bst(root.right)\ndef get_level_order(root):\n    '''\n    Write a function to get level order traversal of a tree.\n    '''\n    q=[root]\n    res=[]\n    while len(q)>0:\n        temp=[]\n        for i in range(len(q)):\n            res.append(q[i].val)\n            if q[i].left!=None:\n                temp.append(q[i].left)\n            if q[i].right!=None:\n                temp.append(q[i].right)\n        q=temp\n    return res\ndef is_valid(root,min_val,max_val):\n    '''\n    Write a function to check whether a given tree is a valid BST.\n    '''\n    if root==None:\n        return True\n    if min_val<root.val<max_val:\n        return is_valid(root.left,min_val,root.val) and is_valid(root.right,root.val,max_val)\n    else:\n        return False\ndef print_preorder(root):\n    '''\n    Write a function to print preorder traversal of a given binary tree.\n    '''\n    if root==None:\n        return\n    print root.val\n    print_preorder(root.left)\n    print_preorder(root.right)\ndef print_inorder(root):\n    '''\n    Write a function to print inorder traversal of a given binary tree.\n    '''\n    if root==None:\n        return\n    print_inorder(root.left)\n    print root.val\n    print_inorder(root.right)\ndef print_postorder(root):\n    '''\n    Write a function to print postorder traversal of a given binary tree.\n    '''\n    if root==None:\n        return\n    print_postorder(root.left)\n    print_postorder(root.right)\n    print root.val\ndef swap_tree(root):\n    '''\n    Write a function to swap a tree in which node values are the sums of its left and right children.\n    '''\n    if root==None:\n        return\n    temp=root.left\n    root.left=root.right\n    root.right=temp\n    swap_tree(root.left)\n    swap_tree(root.right)\ndef is_tree(root):\n    '''\n    Write a function to check whether a given tree is a tree or not.\n    '''\n    if root==None:\n        return True\n    if root.left==None and root.right==None:\n        return True\n    if root.left==None or root.right==None:\n        return False\n    if root.left.val!=root.val+root.right.val or root.right.val!=root.val+root.left.val:\n        return False\n    return is_tree(root.left) and is_tree(root.right)\ndef get_tree_height(root):\n    '''\n    Write a function to get the height of a given tree.\n    '''\n    if root==None:\n        return 0",
        "num_ids": 12
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return sum(type(x) == list for x in Input)\n",
        "num_ids": 18
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        if isinstance(i,tuple):\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return sum([isinstance(item, list) for item in Input])\n",
        "num_ids": 19
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return sum(1 for i in Input if isinstance(i,list))\n",
        "num_ids": 20
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    counter = 0\n    for x in Input:\n        if type(x) == list:\n            counter += 1\n    return counter\n",
        "num_ids": 33
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i)==list:\n            count = count + 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) is list:\n            count = count + 1\n    return count \n",
        "num_ids": 36
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lst = [lst for lst in Input if type(lst) is list]\n    return len(lst)\n",
        "num_ids": 32
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for tup in Input:\n        if type(tup)==list:\n            count = count + 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n",
        "num_ids": 20
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[1] - arr[0]\n    if max_diff < 0:\n        max_diff = max_diff * -1\n    for i in xrange(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "num_ids": 95
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_diff = []\n    for i in range(len(arr)-1):\n        arr_diff.append(abs(arr[i]-arr[i+1]))\n    return max(arr_diff)\n",
        "num_ids": 52
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    max_diff = arr[-1] - arr[0]\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] > max_diff:\n            max_diff = arr[i+1] - arr[i]\n    return max_diff\n",
        "num_ids": 81
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            max_diff = max(max_diff,abs(arr[i]-arr[j]))\n    return max_diff\n",
        "num_ids": 67
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        if max_diff < abs(arr[i]-arr[i-1]):\n            max_diff = abs(arr[i]-arr[i-1])\n    return max_diff\n",
        "num_ids": 75
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[-1] - arr[0]\n    return max_diff\n",
        "num_ids": 30
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)<2:\n        return None\n    else:\n        max_diff = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                if abs(arr[i]-arr[j]) > max_diff:\n                    max_diff = abs(arr[i]-arr[j])\n        return max_diff\n",
        "num_ids": 95
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            abs_diff = abs(arr[i]-arr[j])\n            if abs_diff > max_diff:\n                max_diff = abs_diff\n    return max_diff\n",
        "num_ids": 81
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in xrange(1, len(arr)):\n        if arr[i] - arr[i - 1] > max_diff:\n            max_diff = arr[i] - arr[i - 1]\n    return max_diff\n",
        "num_ids": 74
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 0)\n    if n < 0:\n        return None\n    if a == 0:\n        return (0, n // b)\n    if b == 0:\n        return None\n    x = 0\n    while x * a < n:\n        x += 1\n    return (x * a - n, n // b)\n",
        "num_ids": 89
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # x + y = n\n    # x * y = n\n    # y = (n - x) / a\n    # x = (n - a * y) / b\n    soln_a = (n - b * ((n - a) / b)) / a\n    soln_b = (n - a * soln_a) / b\n    return (soln_a, soln_b)\n    \n",
        "num_ids": 101
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1,n):\n        if a*i + b*n - n*n == 0:\n            return i, n*n/a\n    return None\n",
        "num_ids": 44
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    solutions = (n-a)/b, (n-a)/(b*-1), (n-b)/a, (n-b)/(a*-1)\n    return solutions\n",
        "num_ids": 47
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    z = 0\n    while(z*x + y*z <= n):\n        if(n % (z*x + y*z) == 0):\n            x = 1\n            y = n / (z*x + y*z)\n            break\n        else:\n            x += 1\n    if(x == 0):\n        return None\n    else:\n        return (x, y)\n",
        "num_ids": 105
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    a = str(a)\n    b = str(b)\n    n = str(n)\n",
        "num_ids": 26
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 0)\n",
        "num_ids": 17
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    print \"finding solution\"\n    print \"a: \" + str(a)\n    print \"b: \" + str(b)\n    print \"n: \" + str(n)\n    if n == 0:\n        return (0, 1)\n    elif n < 0:\n        return None\n    else:\n        # Division\n        g = math.gcd(a, n)\n        a = int(a/g)\n        n = int(n/g)\n        print \"a: \" + str(a)\n        print \"b: \" + str(b)\n        print \"n: \" + str(n)\n        #Subtract\n        g = math.gcd(b, n)\n        b = int(b/g)\n        n = int(n/g)\n        print \"a: \" + str(a)\n        print \"b: \" + str(b)\n        print \"n: \" + str(n)\n        #Multiply\n        g = math.gcd(a, b)\n        a = int(a/g)\n        b = int(b/g)\n        print \"a: \" + str(a)\n        print \"b: \" + str(b)\n        print \"n: \" + str(n)\n        #add\n        g = math.gcd(a, b)\n        a = int(a/g)\n        b = int(b/g)\n        print \"a: \" + str(a)\n        print \"b: \" + str(b)\n        print \"n: \" + str(n)\n        #x - a*(n/b) = n/b\n        if a == 0:\n            x = -n/b\n            return (x, a)\n        else:\n            # -b*(n/a) = n/a\n            y = -n/a\n            return (b, y)\n",
        "num_ids": 446
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Go through each possibility\n    for x in range(1, n+1):\n        for y in range(1, n+1):\n            if x*a + y*b == n:\n                return (x, y)\n",
        "num_ids": 56
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n+1):\n        for y in range(1, n+1):\n            if a * x + b * y == n:\n                return (x, y)\n",
        "num_ids": 49
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    temp = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            temp.append(list1[i])\n    return temp\n",
        "num_ids": 48
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n    \n",
        "num_ids": 34
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        list1.remove(item)\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    new_list = []\n    \n    for ele in list1:\n        if ele not in list2:\n            new_list.append(ele)\n            \n    return new_list\n    \n    \ndef remove_smallest(list1):\n    '''\n    Write a function to remove the smallest element in a list\n    '''\n    \n    min_elem = min(list1)\n    new_list = []\n    \n    for ele in list1:\n        if ele!= min_elem:\n            new_list.append(ele)\n            \n    return new_list\n    \n",
        "num_ids": 64
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list1[:]\n    for x in list2:\n        try:\n            list1.remove(x)\n        except ValueError:\n            pass\n    return list1\n    \ndef find_duplicate(list1):\n    '''\n    Write a function that finds a duplicate in a list and returns it's index.\n    '''\n    list1 = list1[:]\n    list1 = remove_elements(list1, [])\n    for x in range(0,len(list1)):\n        if list1.count(list1[x])>1:\n            return list1[x]\n    return False\n",
        "num_ids": 69
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        list1.remove(item)\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [value for value in list1 if value not in list2]\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n",
        "num_ids": 39
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1: return n\n    else: return n + sum_series(n - 2)\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + sum_series(n-2)\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n==0:\n        return 0\n    else:\n        return n+sum_series(n-2)\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n",
        "num_ids": 42
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + sum_series(n-2)\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # First solution is O(n)\n    # #return n - sum([x for x in range(0, n) if x % 2 == 0])\n",
        "num_ids": 38
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return n\n    return n + sum_series(n-2)\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n",
        "num_ids": 13
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + sum_series(n - 2)\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n - 2)\n",
        "num_ids": 15
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * (s**2)*(l**2))/tan(pi/s)\n    print 'The area of the polygon is %.2f' %area\n    return area\n",
        "num_ids": 50
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l)/2*tan(pi/l)\n    return area\n",
        "num_ids": 23
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    \n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    \n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    \n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    \n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    \n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    \n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    \n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    \n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    \n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    \n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    \n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    \n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    # \u03c0 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    \n    # \u03c0 = 3.14159265358979323846264338327950288419",
        "num_ids": 2001
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s == 3:\n        return (s/2)*(l**2)\n    elif s == 4:\n        return (s/4)*(l**2)\n    elif s == 5:\n        return (s/5)*(l**2)\n    elif s == 6:\n        return (s/6)*(l**2)\n    elif s == 7:\n        return (s/7)*(l**2)\n    elif s == 8:\n        return (s/8)*(l**2)\n    elif s == 9:\n        return (s/9)*(l**2)\n    elif s == 10:\n        return (s/10)*(l**2)\n    elif s == 11:\n        return (s/11)*(l**2)\n    elif s == 12:\n        return (s/12)*(l**2)\n    elif s == 13:\n        return (s/13)*(l**2)\n    elif s == 14:\n        return (s/14)*(l**2)\n    elif s == 15:\n        return (s/15)*(l**2)\n    elif s == 16:\n        return (s/16)*(l**2)\n    elif s == 17:\n        return (s/17)*(l**2)\n    elif s == 18:\n        return (s/18)*(l**2)\n    elif s == 19:\n        return (s/19)*(l**2)\n    elif s == 20:\n        return (s/20)*(l**2)\n    elif s == 21:\n        return (s/21)*(l**2)\n    elif s == 22:\n        return (s/22)*(l**2)\n    elif s == 23:\n        return (s/23)*(l**2)\n    elif s == 24:\n        return (s/24)*(l**2)\n    elif s == 25:\n        return (s/25)*(l**2)\n    elif s == 26:\n        return (s/26)*(l**2)\n    elif s == 27:\n        return (s/27)*(l**2)\n    elif s == 28:\n        return (s/28)*(l**2)\n    elif s == 29:\n        return (s/29)*(l**2)\n    elif s == 30:\n        return (s/30)*(l**2)\n    elif s == 31:\n        return (s/31)*(l**2)\n    elif s == 32:\n        return (s/32)*(l**2)\n    elif s == 33:\n        return (s/33)*(l**2)\n    elif s == 34:\n        return (s/34)*(l**2)\n    elif s == 35:\n        return (s/35)*(l**2)\n    elif s == 36:\n        return (s/36)*(l**2)\n    elif s == 37:\n        return (s/37)*(l**2)\n    elif s == 38:\n        return (s/38)*(l**2)\n    elif s == 39:\n        return (s/39)*(l**2)\n    elif s == 40:\n        return (s/40)*(l**2)\n    elif s == 41:\n        return (s/41)*(l**2)\n    elif s == 42:\n        return (s/42)*(l**2)\n    elif s == 43:\n        return (s/43)*(l**2)\n    elif s == 44:\n        return (s/44)*(l**2)\n    elif s == 45:\n        return (s/45)*(l**2)\n    elif s == 46:\n        return (s/46)*(l**2)\n    elif s == 47:\n        return (s/47)*(l**2)\n    elif s == 48:\n        return (s/48)*(l**2)\n    elif s == 49:\n        return (s/49)*(l**2)\n    elif s == 50:\n        return (s/50)*(l**2)\n    elif s == 51:\n        return (s/51)*(l**2)\n    elif s == 52:\n        return (s/52)*(l**2)\n    elif s == 53:\n        return (s/53)*(l**2)\n    elif s == 54:\n        return (s/54)*(l**2)\n    elif s == 55:\n        return (s/55)*(l**2)\n    elif s == 56:\n        return (s/56)*(l**2)\n    elif s == 57:\n        return (s/57)*(l**2)\n    elif s == 58:\n        return (s/58)*(l**2)\n    elif s == 59:\n        return (s/59)*(l**2)\n    elif s == 60:\n        return (s/60)*(l**2)\n    elif s == 61:\n        return (s/61)*(l**2)\n    elif s == 62:\n        return (s/62)*(l**2)\n    elif s == 63:\n        return (s/63)*(l**2)\n    elif s == 64:\n        return (s/64)*(l**2)\n    elif s == 65:\n        return (s/65)*(l**2)\n    elif s == 66:\n        return (s/66)*(l**2)\n    elif s == 67:\n        return (s/67)*(l**2)\n    elif s == 68:\n        return (s/68)*(l**2)\n    elif s == 69:\n        return (s/69)*(l**2)\n    elif s == 70:\n        return (s/70)*(l**2)\n    elif s == 71:\n        return (s/71)*(l**2)\n    elif s == 72:\n        return (s/72)*(l**2)\n    elif s == 73:\n        return (s/73)*(l**2)\n    elif s == 74:\n        return (s/74)*(l**2)\n    elif s == 75:\n        return (s/75)*(l**2)\n    elif s == 76:\n        return (s/76)*(l**2)\n    elif s == 77:\n        return (s/77)*(l**2)\n    elif s == 78:\n        return (s/78)*(l**2)\n    elif s == 79:\n        return (s/79)*(l**2)\n    elif s == 80:\n        return (s/80)*(l**2)\n    elif s == 81:\n        return (s/81)*(l**2)\n    elif s == 82:\n        return (s/82)*(l**2)\n    elif s == 83:\n        return (s/83)*(l**2)\n    elif s == 84:\n        return (s/84)*(l**2)\n    elif s == 85:\n        return (s/85)*(l**2)\n    elif s == 86:\n        return (s/86)*(l**2)\n    elif s == 87:\n        return (s/87)*(l**2)\n    elif s == 88:\n        return (s/88)*(l**2)\n    elif s == 89:\n        return (s/89)*(l**2)\n    elif s == 90:\n        return (s/90)*(l**2)\n    elif s == 91:\n        return (s/91)*(l**2)\n    elif s == 92:\n        return (s/92)*(l**2)\n    elif s == 93:\n        return (s/93)*(l**2)\n    elif s == 94:\n        return (s/94)*(l**2)\n    elif s == 95:\n        return (s/95)*(l**2)\n    elif s == 96:\n        return (s/96)*(l**2)\n    elif s == 97:\n        return (s/97)*(l**2)\n    elif s =",
        "num_ids": 2001
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = 0.5 * s * l\n    return A\n",
        "num_ids": 17
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s < 3:\n        print('Invalid Input. Please enter a positive integer number as the number of sides')\n    else:\n        area = (0.25 * (s * s * s)) / tan(pi / s)\n        print('The area of polygon with %i sides is %f' % (s, area))\n",
        "num_ids": 78
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(l**2))/4*tan(pi/l)\n    return area\ndef area_rhombus(a, b):\n    '''\n    Write a function to calculate the area of a rhombus given the side lengths of its base and its height.\n    '''\n    area = (a*b)/2\n    return area\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given the length of its side.\n    '''\n    area = s**2\n    return area\ndef area_triangle(a, b):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of its base and height.\n    '''\n    area = (a*b)/2\n    return area\ndef area_trapezoid(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given the lengths of its base and height.\n    '''\n    area = ((a+b)*h)/2\n    return area\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the length of its radius.\n    '''\n    area = (r**2)*pi\n    return area\ndef area_ellipse(a, b):\n    '''\n    Write a function to calculate the area of an ellipse given the lengths of its semi-major and semi-minor axes.\n    '''\n    area = (a*b)*(pi/4)\n    return area\ndef area_parallelogram(b, h):\n    '''\n    Write a function to calculate the area of a parallelogram given the base and height.\n    '''\n    area = b*h\n    return area\ndef area_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given the lengths of its length and breadth.\n    '''\n    area = a*b\n    return area\ndef area_kite(b, h):\n    '''\n    Write a function to calculate the area of a kite given the base and height.\n    '''\n    area = (b*h)/2\n    return area\ndef area_rhombus_equal_sides(a, b, h):\n    '''\n    Write a function to calculate the area of a rhombus given the length of its base and height.\n    '''\n    area = ((a*b)+(b*h))/2\n    return area\ndef area_square_equal_sides(a, b, h):\n    '''\n    Write a function to calculate the area of a square given the length of its side.\n    '''\n    area = (a*b)+(b*h)+(h*a)\n    return area\ndef area_rectangle_equal_sides(a, b, h):\n    '''\n    Write a function to calculate the area of a rectangle given the lengths of its length and breadth.\n    '''\n    area = (a*b)+(b*h)+(h*a)\n    return area\ndef area_triangle_equal_sides(a, b, h):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of its base and height.\n    '''\n    area = (a*b)+(b*h)+(h*a)\n    return area\ndef area_triangle_isosceles(a, b, h):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of its base and height.\n    '''\n    area = (a*b*h)/2\n    return area\ndef area_kite_equal_sides(a, b, h):\n    '''\n    Write a function to calculate the area of a kite given the length of its base and height.\n    '''\n    area = (a*b)+(b*h)+(h*a)\n    return area\ndef area_kite_isosceles(a, b, h):\n    '''\n    Write a function to calculate the area of a kite given the length of its base and height.\n    '''\n    area = (a*b*h)/2\n    return area\ndef area_rhombus_isosceles(a, b, h):\n    '''\n    Write a function to calculate the area of a rhombus given the length of its base and height.\n    '''\n    area = (a*b*h)/2\n    return area\ndef area_square_isosceles(a, b, h):\n    '''\n    Write a function to calculate the area of a square given the length of its side.\n    '''\n    area = (a*b)+(b*h)+(h*a)\n    return area\ndef area_square_right_angled(a, b, h):\n    '''\n    Write a function to calculate the area of a square given the length of its side.\n    '''\n    area = ((a*b)+(b*h))/2\n    return area\ndef area_rhombus_isosceles(a, b, h):\n    '''\n    Write a function to calculate the area of a rhombus given the length of its base and height.\n    '''\n    area = (a*b*h)/2\n    return area\ndef area_rectangle_isosceles(a, b, h):\n    '''\n    Write a function to calculate the area of a rectangle given the lengths of its length and breadth.\n    '''\n    area = (a*b)+(b*h)+(h*a)\n    return area\ndef area_kite_isosceles(a, b, h):\n    '''\n    Write a function to calculate the area of a kite given the length of its base and height.\n    '''\n    area = (a*b)+(b*h)+(h*a)\n    return area\ndef area_rectangle_isosceles(a, b, h):\n    '''\n    Write a function to calculate the area of a rectangle given the lengths of its length and breadth.\n    '''\n    area = (a*b)+(b*h)+(h*a)\n    return area\ndef area_rhombus_obtuse(a, b, h):\n    '''\n    Write a function to calculate the area of a rhombus given the length of its base and height.\n    '''\n    area = (a*b*h)/2\n    return area\ndef area_triangle_isosceles(a, b, h):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of its base and height.\n    '''\n    area = (a*b*h)/2\n    return area\ndef area_triangle_isosceles(a, b, h):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of its base and height.\n    '''\n    area = (a*b*h)/2\n    return area\ndef area_square_isosceles(a, b, h):\n    '''\n    Write a function to calculate the area of a square given the length of its side.\n    '''\n    area = (a*b)+(b*h)+(h*a)\n    return area\ndef area_kite_obtuse(a, b, h):\n    '''\n    Write a function to calculate the area of a kite given the length of its base and height.\n    '''\n    area = (a*b*h)/2\n    return area\ndef area_rectangle_isosceles(a, b, h):\n    '''\n    Write a function to calculate the area of a rectangle given the lengths of its length and breadth.\n    '''\n    area = (a*b)+(b*h)+(h*a)\n    return area\ndef area_triangle_obtuse(a, b, h):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of its base and height.\n    '''\n    area = (a*b*h)/2\n    return area\ndef area_kite_obtuse(a, b, h):\n    '''\n    Write a function to calculate the area of a kite given the length of its base and height.\n    '''\n    area = (a*b*h)/2\n    return area\ndef area_square_isosceles(a, b, h):\n    ''",
        "num_ids": 37
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.25 * s * l\n",
        "num_ids": 12
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * (l ** 2)) / tan(pi / l)\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 0:\n        raise ValueError('The number of sides of a polygon must be positive')\n    elif l <= 0:\n        raise ValueError('The length of each side must be positive')\n    else:\n        return (l*(s**2)) / (4*tan(pi/s))\n",
        "num_ids": 75
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n % 2 == 0:\n        n = int(n/2)\n        l = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                l.append(i)\n        return sum(l) == n\n    else:\n        n = int(n/2)\n        l = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                l.append(i)\n        return sum(l) == n\n",
        "num_ids": 123
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Enter code here\n    x = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += i\n    return x\ndef prime_sum(n):\n    '''\n    Write a function to determine if the sum of the prime divisors of two integers are the same.\n    '''\n    # Enter code here\n    x = 0\n    if n == 1:\n        return 0\n    for i in range(2,n):\n        if n % i == 0:\n            x += i\n    return x\ndef main():\n    n = int(input())\n    for i in range(n):\n        x = int(input())\n        print(prime_sum(x))\n        print(div_sum(x))\n",
        "num_ids": 102
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_1 = []\n    div_2 = []\n    for i in range(1, n):\n        if n % i == 0:\n            div_1.append(i)\n    for i in div_1:\n        if (n/i) in div_1:\n            div_2.append(i)\n            div_2.append((n/i))\n    if sum(div_1) == sum(div_2):\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 122
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    m = (int(math.sqrt(n)) + 1) / 2\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if m == 1:\n        return False\n    if n < 3:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i <= m:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n",
        "num_ids": 112
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==0:\n        return True\n    if n<0:\n        return False\n    # get divisors of n\n    divisors = []\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            divisors.append(i)\n            divisors.append(n/i)\n    sum_divisors = sum(divisors)\n    # get divisors of sum_divisors\n    divisors = []\n    for i in range(1,int(math.sqrt(sum_divisors))+1):\n        if sum_divisors%i==0:\n            divisors.append(i)\n            divisors.append(sum_divisors/i)\n    if sum(divisors)==n:\n        return True\n    return False\n",
        "num_ids": 210
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 1:\n        return True\n    for i in range(2,n):\n        if n%i == 0:\n            if n/i == i:\n                return False\n            else:\n                return True\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1: \n        return False \n    if n == 2: \n        return True \n    if n%2 == 0: \n        n = n/2 \n        #print(n) \n        return div_sum(n) \n    else: \n        n = math.floor(math.sqrt(n)) \n        #print(n) \n        divisors = [] \n        for i in range(1, n): \n            if n % i == 0: \n                divisors.append(i) \n        #print(divisors) \n        s = sum(divisors) \n        #print(s) \n        #print(divisors) \n        if s == n: \n            return True \n        else: \n            return False \ndef div_sum_fast(n): \n    '''\n    Fast solution \n    '''\n    if n == 1: \n        return False \n    if n == 2: \n        return True \n    if n%2 == 0: \n        n = n/2 \n        #print(n) \n        return div_sum_fast(n) \n    else: \n        n = math.floor(math.sqrt(n)) \n        #print(n) \n        divisors = [] \n        for i in range(1, n): \n            if n % i == 0: \n                divisors.append(i) \n        #print(divisors) \n        s = sum(divisors) \n        #print(s) \n        #print(divisors) \n        if s == n: \n            return True \n        else: \n            return False \ndef sum_of_divisors(n): \n    '''\n    Write a function to determine if the sum of the divisors of a number is equal to the number.\n    '''\n    if n == 1: \n        return False \n    if n == 2: \n        return True \n    if n%2 == 0: \n        n = n/2 \n        #print(n) \n        return sum_of_divisors(n) \n    else: \n        n = math.floor(math.sqrt(n)) \n        #print(n) \n        divisors = [] \n        for i in range(1, n): \n            if n % i == 0: \n                divisors.append(i) \n        #print(divisors) \n        s = sum(divisors) \n        #print(s) \n        #print(divisors) \n        if s == n: \n            return True \n        else: \n            return False \ndef sum_of_divisors_fast(n): \n    '''\n    Fast solution \n    '''\n    if n == 1: \n        return False \n    if n == 2: \n        return True \n    if n%2 == 0: \n        n = n/2 \n        #print(n) \n        return sum_of_divisors_fast(n) \n    else: \n        n = math.floor(math.sqrt(n)) \n        #print(n) \n        divisors = [] \n        for i in range(1, n): \n            if n % i == 0: \n                divisors.append(i) \n        #print(divisors) \n        s = sum(divisors) \n        #print(s) \n        #print(divisors) \n        if s == n: \n            return True \n        else: \n            return False \ndef prime_factors(n): \n    '''\n    Write a function to determine the prime factorization of a number.\n    '''\n    if n == 1: \n        return 1 \n    if n%2 == 0: \n        pf = 2 \n        n = n/2 \n        #print(n) \n        return prime_factors(n) \n    else: \n        s = 0 \n        for i in range(3, n+1, 2): \n            if n%i == 0: \n                s = i \n                n = n/i \n                #print(n) \n                return s \n        if n > 2: \n            return n \ndef prime_factors_fast(n): \n    '''\n    Fast solution \n    '''\n    if n == 1: \n        return 1 \n    if n%2 == 0: \n        pf = 2 \n        n = n/2 \n        #print(n) \n        return prime_factors_fast(n) \n    else: \n        s = 0 \n        for i in range(3, n+1, 2): \n            if n%i == 0: \n                s = i \n                n = n/i \n                #print(n) \n                return s \n        if n > 2: \n            return n \ndef prime_factors_recur(n): \n    '''\n    Recursive solution \n    '''\n    if n == 1: \n        return 1 \n    if n%2 == 0: \n        pf = 2 \n        n = n/2 \n        #print(n) \n        return prime_factors_recur(n) \n    else: \n        s = 0 \n        for i in range(3, n+1, 2): \n            if n%i == 0: \n                s = i \n                n = n/i \n                #print(n) \n                return s \n        if n > 2: \n            return n \ndef prime_factors_recur_fast(n): \n    '''\n    Fast recursive solution \n    '''\n    if n == 1: \n        return 1 \n    if n%2 == 0: \n        pf = 2 \n        n = n/2 \n        #print(n) \n        return prime_factors_recur_fast(n) \n    else: \n        s = 0 \n        for i in range(3, n+1, 2): \n            if n%i == 0: \n                s = i \n                n = n/i \n                #print(n) \n                return s \n        if n > 2: \n            return n \ndef euler_phi(n): \n    '''\n    Write a function to determine the number of times a number is evenly divisible by a positive integer.\n    '''\n    if n == 1: \n        return 0 \n    if n%2 == 0: \n        n = n/2 \n        #print(n) \n        return euler_phi(n) \n    else: \n        return 1 + euler_phi(n) \ndef euler_phi_fast(n): \n    '''\n    Fast solution \n    '''\n    if n == 1: \n        return 0 \n    if n%2 == 0: \n        n = n/2 \n        #print(n) \n        return euler_phi_fast(n) \n    else: \n        return 1 + euler_phi_fast(n) \ndef is_prime(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n == 1: \n        return False \n    if n%2 == 0 and n!= 2: \n        return False \n    return True \ndef is_prime_fast(n): \n    '''\n    Fast solution \n    '''\n    if n == 1: \n        return False \n    if n%2 == 0 and n!= 2: \n        return False \n    return True \ndef print_list(l): \n    '''\n    Write a function to print the contents of a list in an order from smallest to largest.\n    '''\n    for i in l: \n        print(i) \ndef print_list_fast(l): \n    '''\n    Fast solution \n    '''\n    for i in l: \n        print(i) \ndef print_list_recur(l, n): \n    '''\n    Recursive solution \n    '''\n    if n == 0: ",
        "num_ids": 9
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Assign the value of n\n    n = int(n)\n",
        "num_ids": 19
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #return div_sum_sq(n) == div_sum_sq(n)\n    '''\n    Square root converges to the int, so you can't use it.\n    So, this is the \"least-squares\" approach\n    '''\n    div_set = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            div_set.add(i)\n            div_set.add(n/i)\n    return sum(div_set) == n\n",
        "num_ids": 73
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            s += i\n    return s\ndef the_same_number(a,b):\n    return a==b\ndef is_power(a,b):\n    return a**b==a\ndef is_perfect(a):\n    if a==1:\n        return False\n    if is_power(a,2):\n        return True\n    else:\n        return False\ndef is_abundant(a):\n    if is_perfect(a):\n        return False\n    if is_power(a,2) and a!=1:\n        return True\n    else:\n        return False\ndef is_abundant_list(ls):\n    a_ls = []\n    for i in ls:\n        if is_abundant(i):\n            a_ls.append(i)\n    return a_ls\ndef is_abundant_list_s(ls):\n    a_ls = []\n    for i in ls:\n        if is_abundant(i):\n            a_ls.append(i)\n    return a_ls\ndef is_perfect_list(ls):\n    p_ls = []\n    for i in ls:\n        if is_perfect(i):\n            p_ls.append(i)\n    return p_ls\ndef is_perfect_list_s(ls):\n    p_ls = []\n    for i in ls:\n        if is_perfect(i):\n            p_ls.append(i)\n    return p_ls\ndef is_perfect_list_dup(ls):\n    p_ls = []\n    for i in ls:\n        if is_perfect(i):\n            p_ls.append(i)\n    return p_ls\ndef is_perfect_list_dup_s(ls):\n    p_ls = []\n    for i in ls:\n        if is_perfect(i):\n            p_ls.append(i)\n    return p_ls\ndef get_perfect_list(ls):\n    p_ls = []\n    for i in ls:\n        if is_perfect(i):\n            p_ls.append(i)\n    return p_ls\ndef get_perfect_list_s(ls):\n    p_ls = []\n    for i in ls:\n        if is_perfect(i):\n            p_ls.append(i)\n    return p_ls\ndef get_perfect_list_dup(ls):\n    p_ls = []\n    for i in ls:\n        if is_perfect(i):\n            p_ls.append(i)\n    return p_ls\ndef get_perfect_list_dup_s(ls):\n    p_ls = []\n    for i in ls:\n        if is_perfect(i):\n            p_ls.append(i)\n    return p_ls\ndef get_divisor_sum(a):\n    s = 0\n    for i in range(1,a):\n        if a%i==0:\n            s += i\n    return s\ndef is_pythagorean(a,b,c):\n    return a**2 + b**2 == c**2\ndef is_pythagorean_list(ls):\n    p_ls = []\n    for i in ls:\n        if is_pythagorean(i,i,i):\n            p_ls.append(i)\n    return p_ls\ndef is_pythagorean_list_s(ls):\n    p_ls = []\n    for i in ls:\n        if is_pythagorean(i,i,i):\n            p_ls.append(i)\n    return p_ls\ndef get_pythagorean_list(ls):\n    p_ls = []\n    for i in ls:\n        if is_pythagorean(i,i,i):\n            p_ls.append(i)\n    return p_ls\ndef get_pythagorean_list_s(ls):\n    p_ls = []\n    for i in ls:\n        if is_pythagorean(i,i,i):\n            p_ls.append(i)\n    return p_ls\ndef get_pythagorean_list_dup(ls):\n    p_ls = []\n    for i in ls:\n        if is_pythagorean(i,i,i):\n            p_ls.append(i)\n    return p_ls\ndef get_pythagorean_list_dup_s(ls):\n    p_ls = []\n    for i in ls:\n        if is_pythagorean(i,i,i):\n            p_ls.append(i)\n    return p_ls\ndef pythagorean_triplet(a,b,c):\n    return is_pythagorean(a,b,c)\ndef pythagorean_triplet_list(ls):\n    p_ls = []\n    for i in ls:\n        if pythagorean_triplet(i,i,i):\n            p_ls.append(i)\n    return p_ls\ndef pythagorean_triplet_list_s(ls):\n    p_ls = []\n    for i in ls:\n        if pythagorean_triplet(i,i,i):\n            p_ls.append(i)\n    return p_ls\ndef get_pythagorean_triplet_list(ls):\n    p_ls = []\n    for i in ls:\n        if pythagorean_triplet(i,i,i):\n            p_ls.append(i)\n    return p_ls\ndef get_pythagorean_triplet_list_s(ls):\n    p_ls = []\n    for i in ls:\n        if pythagorean_triplet(i,i,i):\n            p_ls.append(i)\n    return p_ls\ndef get_pythagorean_triplet_list_dup(ls):\n    p_ls = []\n    for i in ls:\n        if pythagorean_triplet(i,i,i):\n            p_ls.append(i)\n    return p_ls\ndef get_pythagorean_triplet_list_dup_s(ls):\n    p_ls = []\n    for i in ls:\n        if pythagorean_triplet(i,i,i):\n            p_ls.append(i)\n    return p_ls\ndef div_sum_list(ls):\n    s = 0\n    for i in ls:\n        s += div_sum(i)\n    return s\ndef div_sum_list_s(ls):\n    s = 0\n    for i in ls:\n        s += div_sum(i)\n    return s\ndef div_sum_list_dup(ls):\n    s = 0\n    for i in ls:\n        s += div_sum(i)\n    return s\ndef div_sum_list_dup_s(ls):\n    s = 0\n    for i in ls:\n        s += div_sum(i)\n    return s\ndef perfect_divisor_sum_list(ls):\n    s = 0\n    for i in ls:\n        if is_perfect(i):\n            s += div_sum(i)\n    return s\ndef perfect_divisor_sum_list_s(ls):\n    s = 0\n    for i in ls:\n        if is_perfect(i):\n            s += div_sum(i)\n    return s\ndef perfect_divisor_sum_list_dup(ls):\n    s = 0\n    for i in ls:\n        if is_perfect(i):\n            s += div_sum(i)\n    return s\ndef perfect_divisor_sum_list_dup_s(ls):\n    s = 0\n    for i in ls:\n        if is_perfect(i):\n            s += div_sum(i)\n    return s\ndef is_sosu_list(ls):\n    s_ls = []\n    for i in ls:\n        if is_perfect(i) and div_sum(i) == i:\n            s_ls.append(i)\n    return s_ls\ndef is_sosu_list_s(ls):\n    s_ls = []\n    for i in ls:\n        if is_perfect(i) and div",
        "num_ids": 2006
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    res = 0\n    for i in range(len(str1)): \n        c = str1[i]\n        if ord(c) in range(ord('a'),ord('z')+1) and ord(c)!= ord(str1[i-1]):\n            res += 1\n    return res\n",
        "num_ids": 76
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    chars = {}\n    for i in range(26):\n        chars[chr(ord('a')+i)] = i\n",
        "num_ids": 34
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if str1=='':\n        return 0\n    if len(str1)==1:\n        if str1[0]>='a' and str1[0]<='z':\n            return 1\n        if str1[0]>='A' and str1[0]<='Z':\n            return 1\n        return 0\n    count=0\n    for i in range(len(str1)):\n        if str1[i]>='a' and str1[i]<='z':\n            if str1[i]==str1[0]:\n                count+=1\n        if str1[i]>='A' and str1[i]<='Z':\n            if str1[i]==str1[0]:\n                count+=1\n    return count\n",
        "num_ids": 185
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    from collections import Counter\n    counter = Counter(str1.lower())\n    result = 0\n    for item in counter.values():\n        if item == 1:\n            result += 1\n    return result\n    \ndef count_char_position2(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    from collections import Counter\n    return len([count for count in Counter(str1.lower()).values() if count == 1])\n    \ndef find_divisor(num1, num2):\n    '''\n    Find the closest divisor to a given number.\n    '''\n    from fractions import Fraction\n    fraction = Fraction(num1, num2)\n    return sorted([num1, num2], key = lambda x: abs(num1 - x))[0]\n    \ndef find_divisor2(num1, num2):\n    '''\n    Find the closest divisor to a given number.\n    '''\n    return sorted([num1, num2], key = lambda x: abs(num1 - x))[0]\n    \ndef find_divisor3(num1, num2):\n    '''\n    Find the closest divisor to a given number.\n    '''\n    if num1 > num2:\n        num1, num2 = num2, num1\n    for i in range(num2, 1, -1):\n        if num1 % i == 0 and num2 % i == 0:\n            return i\n            \ndef find_divisor4(num1, num2):\n    '''\n    Find the closest divisor to a given number.\n    '''\n    if num1 > num2:\n        num1, num2 = num2, num1\n    divisor = 1\n    while divisor <= num1:\n        if num1 % divisor == 0 and num2 % divisor == 0:\n            return divisor\n        divisor += 1\n    \ndef find_divisor5(num1, num2):\n    '''\n    Find the closest divisor to a given number.\n    '''\n    if num1 > num2:\n        num1, num2 = num2, num1\n    divisor = num1\n    while divisor > 0:\n        if num1 % divisor == 0 and num2 % divisor == 0:\n            return divisor\n        divisor -= 1\n    \ndef find_divisor6(num1, num2):\n    '''\n    Find the closest divisor to a given number.\n    '''\n    if num1 > num2:\n        num1, num2 = num2, num1\n    divisor = num1\n    while divisor > 0:\n        if num1 % divisor == 0 and num2 % divisor == 0:\n            return divisor\n        divisor -= 1\n        \ndef find_divisor7(num1, num2):\n    '''\n    Find the closest divisor to a given number.\n    '''\n    if num1 > num2:\n        num1, num2 = num2, num1\n    divisor = num1\n    while divisor > 0:\n        if num1 % divisor == 0 and num2 % divisor == 0:\n            return divisor\n        divisor -= 1\n",
        "num_ids": 75
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # First attempt with my own implementation\n    # Return a list with the number of characters in str1 at the same position as char\n    # if (len(str1) == 0):\n    #     return 0\n    # list1 = []\n    # for i in range(len(str1)):\n    #     char = str1[i]\n    #     list1.append(count_char_position(str1[i]))\n    # return list1\n    # # 2nd attempt with library\n    # from collections import Counter\n    # return Counter(str1)\n",
        "num_ids": 134
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            for j in range(26):\n                if str1[i].lower() == chr(97 + j):\n                    count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #for char in str1:\n    #    if char in alph:\n    #        positions[alph[char]] = positions[alph[char]] + 1\n    #    else:\n    #        positions[char] = 1\n    #return positions\n    \n    positions = {alph[c]:positions[c] + 1 for c in alph}\n    return positions\n",
        "num_ids": 92
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    position = {'a':0, 'b':1, 'c':2, 'd':3, 'e':4, 'f':5, 'g':6, 'h':7, 'i':8, 'j':9, 'k':10, 'l':11,'m':12, 'n':13, 'o':14, 'p':15, 'q':16, 'r':17,'s':18, 't':19, 'u':20, 'v':21, 'w':22, 'x':23, 'y':24, 'z':25}\n    char_count = [0] * 26\n    for i in str1:\n        char_count[position[i.lower()]] += 1\n    return char_count\n",
        "num_ids": 175
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict_position = {}\n    for i in str1:\n        if i in dict_position.keys():\n            dict_position[i] += 1\n        else:\n            dict_position[i] = 1\n    return dict_position\n",
        "num_ids": 58
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    '''\n    first we need to find the elements that xor to the even number\n    second we use a hash table to store the elements that xor to the even number\n    then we use two pointers to iterate the list and the hash table\n    when we find a number that xor to the even number, we increment the count by one\n    '''\n    hash_table = {}\n    count = 0\n    for number in A:\n        if number ^ 2 in hash_table:\n            count += 1\n        hash_table[number] = True\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs = 0 \n    for i in xrange(len(A)):\n        for j in xrange(i+1,len(A)):\n            if A[i] ^ A[j] == 0: \n                pairs += 1 \n    return pairs \n",
        "num_ids": 67
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in xrange(len(A)):\n        for j in xrange(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    for i in A:\n        for j in A:\n            if i!= j and (i ^ j) % 2 == 0:\n                return 1\n    return 0\n",
        "num_ids": 42
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    even_pairs = 0\n    for i in xrange(len(A)):\n        for j in xrange(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    \n    return even_pairs\n",
        "num_ids": 74
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if A[i]^A[j] == 0:\n                count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for x, y in itertools.combinations(A, 2):\n        if x ^ y % 2 == 0: count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    num_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                num_pairs += 1\n    return num_pairs\n",
        "num_ids": 68
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return sum([1 for i in A if (i ^ 2) % 2 == 0])\n",
        "num_ids": 23
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    from itertools import izip\n    ans = 0\n    for pair in izip(A, A[1:]):\n        if pair[0] ^ pair[1] & 1 == 0:\n            ans += 1\n    return ans\n",
        "num_ids": 59
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # how many times do we have to increment the power of 2?\n    while (1<<n)-1 < n:\n        n=n+1\n    return n\n    \ndef next_power_of_2_appr(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n using approximation.\n    '''\n    i = 1\n    pwr = 1\n    while True:\n        if i >= n:\n            return pwr\n        i = i<<1\n        pwr = pwr<<1\n",
        "num_ids": 46
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return int(2**math.ceil(math.log(n, 2)))\n",
        "num_ids": 22
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return int(2**math.ceil(math.log(n, 2)))\n",
        "num_ids": 22
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n -= 1\n    count = 0\n    while n > 0:\n        count += 1\n        n >>= 1\n    return 1 << count\n",
        "num_ids": 36
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    if (n <= 0):\n        return -1\n    \n    i = 1\n    \n    while(i <= n):\n        i *= 2\n    \n    return i\n",
        "num_ids": 46
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    m = 1\n    while m < n:\n        m *= 2\n    return m\n",
        "num_ids": 24
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # your code here\n    n = int(n)\n    n = n + 1\n    while (n & n - 1)!= 0:\n        n = n + 1\n    return n\n",
        "num_ids": 47
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # use binary search to find the first power of 2 greater than or equal to n\n    left, right = 1, n\n    while left < right:\n        mid = left + ((right - left) >> 1)\n        if mid * 2 <= n:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n",
        "num_ids": 80
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**int(math.ceil(math.log(n,2)))\n",
        "num_ids": 22
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n -= 1\n    count = 0\n    while (1 << count) < n:\n        count += 1\n    return 1 << count\n",
        "num_ids": 34
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(0, len(a)):\n        if a[i] == x:\n            count +=1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # initializing the count variable to zero\n    count = 0\n    # looping over the list\n    for i in range(len(a)):\n        # checking if the element matches with the required element\n        if a[i] == x:\n            # incrementing the count\n            count += 1\n    # returning the count\n    return count\n",
        "num_ids": 81
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x in a: \n        return a.count(x)\n    else: \n        return -1\n",
        "num_ids": 29
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len([i for i in a if i==x])\n",
        "num_ids": 17
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b = []\n    for i in a:\n        if i == x:\n            b.append(i)\n    c = len(b)\n    return c\n",
        "num_ids": 41
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x in a:\n        return a.count(x)\n    else:\n        return 0\n",
        "num_ids": 26
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return(a.count(x))\n",
        "num_ids": 12
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    res = 0\n    for i in a:\n        if i == x:\n            res += 1\n    return res\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n",
        "num_ids": 14
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in list1[m:n+1]:\n        result += i\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:\n        return 0\n    return list1[n] - list1[m]\n",
        "num_ids": 27
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    summationn",
        "num_ids": 1265
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n",
        "num_ids": 14
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "num_ids": 16
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == -1 and n == -1:\n        return 0\n    elif m == -1:\n        return n\n    elif n == -1:\n        return m\n    else:\n        return list1[m] + list1[n]\n",
        "num_ids": 63
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= n:                                                                                                                                                                                                                            \n        return sum(list1[m:n+1])                                                                                                                                                                                                            \n    else:                                                                                                                                                                                                                                                                \n        return sum(list1[m:n])                                                                                                                                                                                                                                                            \n",
        "num_ids": 72
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum([list1[x] for x in range(m, n+1)])\n",
        "num_ids": 24
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # sanity check\n    if type(list1)!= list:\n        raise ValueError(\"list1 is not a list\")\n    if type(m)!= int:\n        raise ValueError(\"m is not an integer\")\n    if type(n)!= int:\n        raise ValueError(\"n is not an integer\")\n    if m < 0:\n        raise ValueError(\"m is not a positive integer\")\n    if n < 0:\n        raise ValueError(\"n is not a positive integer\")\n    if m > len(list1) - 1:\n        raise ValueError(\"m is out of range\")\n    if n > len(list1) - 1:\n        raise ValueError(\"n is out of range\")\n    if m == n:\n        raise ValueError(\"m and n cannot be the same\")\n    list_sum = 0\n    for i in range(m, n + 1):\n        list_sum += list1[i]\n    return list_sum\n",
        "num_ids": 223
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5 * a) + (5 * math.sqrt(5) * (a ** 2)) + ((math.sqrt(5) / 2) * a)\n",
        "num_ids": 42
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + a\n",
        "num_ids": 10
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5+a*math.sqrt(5)*5\n",
        "num_ids": 19
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\ndef perimeter_non_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular non-pentagon from the length of its sides.\n    '''\n    return 3 * a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6 * a\ndef perimeter_non_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular non-hexagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_hexagon(a):\n    '''\n    Write a function to find the perimeter of a non-hexagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of an octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of an octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n    '''\n    return 4 * a\ndef perimeter_non_octagon(a):\n    '''\n    Write a function to find the perimeter of a non-octagon from the length of its sides.\n",
        "num_ids": 24
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*a*math.sqrt(3)/2\n",
        "num_ids": 21
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*(3 + math.sqrt(5))\n",
        "num_ids": 17
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a%math.sqrt(5) == 0:\n        return 25*a/math.sqrt(5)\n    return 5*a\n    \n",
        "num_ids": 39
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "num_ids": 8
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s is None:\n        return 0\n    if'std' in s:\n        return s.count('std')\n    else:\n        return count_occurance(s[1:])\n",
        "num_ids": 48
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count+=1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s) < 4:\n        return 0\n    if s.count('std') == 1:\n        return 1\n    return s.count('std')\n",
        "num_ids": 41
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    return len(s.split(\"std\"))-1\n",
        "num_ids": 23
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s is None:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type=None\n    for ele in test_tuple:\n        if data_type is None:\n            data_type=type(ele)\n        if data_type!=type(ele):\n            return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0]) is type(test_tuple[1]):\n        return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for i in test_tuple:\n        type_list.append(type(i))\n    return len(type_list) == len(set(type_list))\n",
        "num_ids": 49
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    element_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= element_type:\n            print(elem, type(elem))\n            return False\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    #test_tuple = (1,2,'abc')\n    count = 0\n    for i in test_tuple:\n        if type(i) == type(test_tuple[0]):\n            count += 1\n            if count > 1:\n                return 'Not All are of same type'\n        else:\n            return 'Not all elements of tuple are of same type'\n    \n    return 'All elements are of same type'\n",
        "num_ids": 106
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    temp_list = list(test_tuple)\n    if not temp_list:\n        return\n    temp_list.sort()\n    test_type = temp_list[0]\n    for i in range(1, len(temp_list)):\n        if test_type!= temp_list[i]:\n            return\n    return test_type\n",
        "num_ids": 85
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return len(set(type(x) for x in test_tuple)) <= 1\n",
        "num_ids": 23
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type=type(test_tuple[0])\n    if all(type(data) == data_type for data in test_tuple):\n        return data_type\n    else:\n        return \"All the elements should have same data type\"\n",
        "num_ids": 61
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    result = all(type(el) is type(test_tuple[0]) for el in test_tuple)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #my code\n    # return all(isinstance(i, test_tuple[0]) for i in test_tuple)\n    # #return (type(i) for i in test_tuple) == set(test_tuple)\n    # #return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # return (type(i) for i in test_tuple) == set(test_tuple)\n    # #return (type(i) for i in test_tuple) == set(test_tuple)\n    # #return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, type(test_tuple[0])) for i in test_tuple)\n    # #return (isinstance(i, typ",
        "num_ids": 2011
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == 1:\n        if arr[0] == x:\n            return True\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n-1\n    count = 0\n    while left <= right:\n        if arr[left] == arr[right]:\n            count += 1\n        else:\n            count -= 1\n        left += 1\n        right -= 1\n    if count > 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 81
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # return arr[(n-1)//2] == x\n    return arr.count(x) > n // 2\n",
        "num_ids": 31
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n",
        "num_ids": 13
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return arr[0] == x\n",
        "num_ids": 30
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return 0 if x not in arr else arr.count(x) > n/2\n",
        "num_ids": 22
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    assert n > 0 and isinstance(n, int) and arr and isinstance(arr, list)\n    # your code here\n    return\n",
        "num_ids": 35
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0 or n == 1:\n        return False\n    if arr[0] == x and n/2 == 1:\n        return True\n    elif arr[0] == x:\n        return True\n    else:\n        if n%2 == 0:\n            if is_majority(arr[1:], n/2, x) == True:\n                return True\n            else:\n                return is_majority(arr[n/2:], n/2, x)\n        else:\n            if is_majority(arr[1:], n/2, x) == True:\n                return True\n            else:\n                return is_majority(arr[n/2+1:], n/2, x)\n",
        "num_ids": 169
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Initialize result\n    res = 0\n    while (n): \n        res += n & 1\n        n >>= 1\n    return res \n",
        "num_ids": 38
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n    \ndef print_binary(num):\n    '''\n    Write a python function to print the binary value of an integer.\n    '''\n    return bin(num)\n",
        "num_ids": 9
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while n:\n        n &= n-1\n        count+=1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        if n & 1: \n            count += 1\n        n >>= 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = bin(n)\n    #print(n)\n    count = 0\n    for i in range(len(n)):\n        if n[i] == '1':\n            count +=1\n    #print(count)\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n == 0:\n        return 0\n    count = 0\n    while(n):\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count \n",
        "num_ids": 48
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n &= n - 1\n        count += 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return str(bin(n)).count('1') \n",
        "num_ids": 16
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    '''\n    # Method #1\n    \n    # To create a list of string, iterate over the string and then use enumerate() to get index\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2 == 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    \n    \n    # Method #2\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #3\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #4\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #5\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #6\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #7\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #8\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #9\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #10\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #11\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #12\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #13\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #14\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #15\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #16\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #17\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #18\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #19\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #20\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + value\n    print str\n    \n    # Output: abcdefgh\n    \n    '''\n    \n    '''\n    \n    # Method #21\n    \n    # Initialize a empty string\n    str = \"\"\n    \n    # Iterate over the string to get index and value of the string\n    for i, value in enumerate(str):\n        if i%2!= 0:\n            str = str + valu",
        "num_ids": 72
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string = str.replace(\" \",\"\")\n    list1 = []\n    for i in range(len(string)):\n        list1.append(string[i])\n    if len(string)%2!= 0:\n        del list1[len(list1)-1]\n    return ''.join(list1)\nprint(odd_values_string(\"Hi, I am a programmer\"))\n",
        "num_ids": 94
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str1=''\n    for i in range(0,len(str)):\n        if i%2!=0:\n            str1=str1+str[i]\n    return str1\n",
        "num_ids": 49
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string = list(str)\n    for i in string:\n        if i == \"a\":\n            string.remove(\"a\")\n        elif i == \"b\":\n            string.remove(\"b\")\n    return string\n",
        "num_ids": 54
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    if not isinstance(str,str):\n        return \"Invalid Input\"\n    if len(str)<2:\n        return \"Invalid Input\"\n",
        "num_ids": 39
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if i % 2!= 0:\n            print(str[count], end=\"\")\n            count += 1\n    return \n",
        "num_ids": 49
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(str[i] for i in xrange(len(str)) if not i % 2)\n",
        "num_ids": 29
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n",
        "num_ids": 10
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str[::2]\n    return str\n",
        "num_ids": 15
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str1=str[::2]\n    return str1\n",
        "num_ids": 17
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return (a,b,c)[min(a,b,c)]\n",
        "num_ids": 20
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_ = min(a,b,c)\n    return min_\n",
        "num_ids": 20
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b:\n        if a<=c:\n            return a\n        else:\n            return c\n    else:\n        if b<=c:\n            return b\n        else:\n            return c\n",
        "num_ids": 54
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n    \n",
        "num_ids": 43
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # def min(x,y):\n    #     if x < y:\n    #         return x\n    #     else:\n    #         return y\n    return min(a,min(b,c))\n",
        "num_ids": 52
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # If any of a,b,c is None, return None\n    if a is None or b is None or c is None:\n        return None\n",
        "num_ids": 37
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_number = min(a,b,c)\n    return min_number\n",
        "num_ids": 22
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res = False\n    for i in range(l,r+1):\n        if (n & 1<<i) == 0:\n            res = True\n    return res\n",
        "num_ids": 42
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    return (2**n) - (2**(l-1)) - (2**(r-1)) == 2**l -2**r\n    \ndef all_Bits_Set_In_The_Given_Range_Using_And_Or(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    return n&((2**(l-1)) - 1) == 0 and n&((2**(r-1)) - 1) == 0\n",
        "num_ids": 38
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n_str = format(n,'b')\n    n_str_len = len(n_str)\n    if n_str_len < r:\n        n_str = n_str.zfill(r)\n    n_str = n_str[l-1:]\n    n_str = n_str[::-1]\n    for i in n_str:\n        if i == '0':\n            return False\n    return True\n",
        "num_ids": 107
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all(map(lambda x: (n & (1 << x)) == 0,range(l,r+1)))\n",
        "num_ids": 31
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x = (1 << n) - 1\n    if x >= l and x <= r:\n        print \"All the bits are unset in the given range\"\n    else:\n        print \"All the bits are set in the given range\"\n",
        "num_ids": 57
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #l,r = map(int,input().split())\n    def all_bits_set_in_the_range(n,l,r):\n        if l > r:\n            return False\n        if l == r:\n            return True\n        if l == 0:\n            return True\n        if l%2 == 0:\n            n = n // 2\n            l = l // 2\n        else:\n            n = n // 2\n            l = l // 2\n        return all_bits_set_in_the_range(n, l, r)\n    if all_bits_set_in_the_range(n,l,r):\n        return True\n    else:\n        return False\n",
        "num_ids": 166
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res = n & ((2**r) -1)\n    if res==(2**r)-1:\n        print \"Yes\"\n    else:\n        print \"No\"\n",
        "num_ids": 44
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (n & (1 << i)) > 0:\n            return 0\n    return 1\n",
        "num_ids": 37
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return not n&(l|r)\n",
        "num_ids": 13
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    import math\n    n &= ~((1 << (l - 1)) - 1)\n    n &= ~((1 << (r - 1)) - 1)\n    if n == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0 or len(arr) == 1:\n        return arr\n    if len(arr) < n:\n        return arr\n    i = 0\n    for j in range(len(arr)):\n        if arr[j] < 0:\n            arr[i] = arr[j]\n            i += 1\n    for j in range(i, n):\n        arr[j] = arr[i]\n        i += 1\n    return arr\n",
        "num_ids": 108
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = [None] * len(arr)\n    for index in range(n):\n        if arr[index] < 0:\n            result[index] = arr[index]\n        else:\n            result[-index - 1] = arr[index]\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) < n or n < 0:\n        return\n",
        "num_ids": 19
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # for i in range(0, n):\n    #     for j in range(i+1, len(arr)):\n    #         if arr[j] < 0:\n    #             arr[i], arr[j] = arr[j], arr[i]\n    #             break\n    #     return arr\n",
        "num_ids": 76
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < len(arr):\n        if arr[i] < 0:\n            temp = arr[i]\n            arr.remove(arr[i])\n            arr.insert(0, temp)\n            i -= 1\n        i += 1\n    return arr\n",
        "num_ids": 68
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n <= 0 or not isinstance(n, int):\n        return \"Error\"\n    \n    index = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[index], arr[i] = arr[i], arr[index]\n            index += 1\n    return arr\n",
        "num_ids": 77
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n <= 0:\n        return arr\n    neg = []\n    pos = []\n    for item in arr:\n        if item < 0:\n            neg.append(item)\n        else:\n            pos.append(item)\n    pos.extend(neg)\n    return pos\n",
        "num_ids": 70
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    for e in arr:\n        if e < 0:\n            arr.pop(i)\n            arr.insert(0, e)\n            i += 1\n    return arr\n",
        "num_ids": 48
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # base case\n    if n == 0:\n        return arr\n    # first, move the first n elements to the back\n    # second, reverse the rest of the array\n    result = arr[:n]\n    result.reverse()\n    result += arr[n:]\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    temp = []\n    for i in arr:\n        if i > 0:\n            temp.append(i)\n    temp.extend(arr[:n])\n    return temp\n",
        "num_ids": 45
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    return str1+char\n    \ndef test_replace_blank():\n    assert replace_blank('hi', '#') == 'hi#'\n    assert replace_blank('hi', '*') == 'h*i*'\n    assert replace_blank('hello', '#') == 'hello'\n    assert replace_blank('', '#') == ''\n    \n    ",
        "num_ids": 100
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\")%char\n",
        "num_ids": 17
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    list_str1=str1.split(' ')\n    i=0\n    for item in list_str1:\n        if item == '':\n            list_str1[i] = char\n        i+=1\n    return''.join(list_str1)\n",
        "num_ids": 65
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    # upper case the input string\n    str1 = str1.upper()\n",
        "num_ids": 22
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    return str1.replace(' ', char)\n",
        "num_ids": 15
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char =='':\n        str1 = str1.replace(' ','')\n        return str1\n    else:\n        return str1\n",
        "num_ids": 36
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char=='':\n        return str1\n    else:\n        return str1.replace(' ',char)\n",
        "num_ids": 29
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "num_ids": 16
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1[:n]\ndef fanno_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n least items from the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1[:n]\ndef add_nnum(list1,list2,n):\n    '''\n    Write a function that takes in two lists and an integer n and returns a list containing the n items that are the sum of the items in the two lists.\n    '''\n    list1.sort()\n    list2.sort()\n    return list1+list2[:n]\ndef max_min_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list with the n largest and n smallest items in the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1[:n]+list1[-n:]\ndef mult_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the product of the first n items in the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1[:n]*list1[:n]\ndef comp_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the list with each item divided by the item in the first list that is not in the second list.\n    '''\n    list1.sort()\n    list2=list(set(list1))\n    list2.sort()\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            list2[i]=list1[list1.index(list2[i])]\n        else:\n            list2[i]=float('inf')\n    list1.sort()\n    return [list1[i]/list2[i] for i in range(len(list1))]\ndef duplic_nnum(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing all of the duplicates in the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list(set([list1[i] for i in range(len(list1)) if list1[i]==list1[i-1]]))\ndef repeat_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most repeating elements of the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return [list1[i] for i in range(len(list1)) if list1[i]==list1[i-1]]\ndef find_nnum(list1,item):\n    '''\n    Write a function that takes in a list and an integer item and returns the index in the list where the item is found.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1.index(item)\ndef first_last_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list with the first and last n items of the list.\n    '''\n    return list1[:n]+list1[-n:]\ndef median_nnum(list1):\n    '''\n    Write a function that takes in a list and returns the median item in the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1[len(list1)/2]\ndef mode_nnum(list1):\n    '''\n    Write a function that takes in a list and returns the mode item in the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    list2=[]\n    for i in list1:\n        list2.append(list1.count(i))\n    mode_list=[]\n    for i in list2:\n        if list2[list2.index(i)]==max(list2):\n            mode_list.append(i)\n    return list1[list2.index(max(mode_list))]\ndef insert_nnum(list1,item,i):\n    '''\n    Write a function that takes in a list, an integer item, and an integer i and returns a new list with the item inserted at the i-th index of the list.\n    '''\n    return list1[:i]+[item]+list1[i:]\ndef remove_nnum(list1,i):\n    '''\n    Write a function that takes in a list and an integer i and removes the i-th item from the list.\n    '''\n    return list1[:i]+list1[i+1:]\ndef n_smallest_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list with the n smallest items in the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1[:n]\ndef n_largest_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list with the n largest items in the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1[n:]\ndef sub_lists_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list with all the sublists of length n in the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return [list1[i:i+n] for i in range(len(list1)+1-n)]\ndef sub_lists_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list with all the sublists of length n in the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return [list1[i:i+n] for i in range(len(list1))]\ndef partition_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list with the elements of the list split into two lists with the first list containing the first n items, the second list containing the remaining items in the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1[:n]+list1[n:]\ndef kth_lowest_nnum(list1,n,k):\n    '''\n    Write a function that takes in a list and integer n, k and returns the kth smallest item in the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1[k-1]\ndef n_smallest_nums(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list with the n smallest items in the list.\n    '''\n    list1.sort()\n    return list1[:n]\ndef n_largest_nums(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list with the n largest items in the list.\n    '''\n    list1.sort()\n    return list1[-n:]\ndef par_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list with the n par items in the list.\n    '''\n    list1.sort()\n    return list1[n:]+list1[:n]\ndef shuf_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a new list that is the shuffled version of the original list.\n    '''\n    return list1[:n]+list1[n:][::-1]\ndef cart_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a new list that is th",
        "num_ids": 23
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #Largest elements from the list\n    list1.sort(reverse=True)\n    return list1[:n]\n    \n",
        "num_ids": 34
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    for i in range(n):\n        list2.append(list1[i])\n    return list2\n",
        "num_ids": 34
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "num_ids": 16
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Your Code Here\n    return heapq.nlargest(n,list1)\n",
        "num_ids": 22
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    if n<=0:\n        return list2\n    for i in range(n):\n        list2.append(heapq.nlargest(n,list1))\n    return list2\n",
        "num_ids": 54
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #heapq.nlargest(n, list1)\n    #return list1[:n]\n    list1.sort(reverse=True)\n    return list1[:n]\n",
        "num_ids": 47
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n",
        "num_ids": 16
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #from scipy import stats\n    return heapq.nlargest(n,list1)\ndef min_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    return heapq.nsmallest(n,list1)\ndef rand_num(n):\n    '''\n    Write a function that takes in a number n and returns a list containing n random numbers in the range [0,100).\n    '''\n    import random\n    return [random.randint(0,100) for i in range(n)]\ndef is_prime(num):\n    '''\n    Write a function that takes in an integer n and returns True if n is prime, False otherwise.\n    '''\n    if num<0:\n        return False\n    elif num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num%2 == 0:\n        return False\n    else:\n        for i in range(3,num):\n            if num%i == 0:\n                return False\n        return True\ndef is_prime2(num):\n    '''\n    Write a function that takes in an integer n and returns True if n is prime, False otherwise.\n    '''\n    if num<0:\n        return False\n    elif num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num%2 == 0:\n        return False\n    else:\n        for i in range(3,int(num**.5)+1,2):\n            if num%i == 0:\n                return False\n        return True\ndef fib(n):\n    '''\n    Write a function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n<0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\ndef fib2(n):\n    '''\n    Write a function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    a,b = 0,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\ndef factorial(n):\n    '''\n    Write a function that takes in an integer n and returns the nth factorial number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef factorial2(n):\n    '''\n    Write a function that takes in an integer n and returns the nth factorial number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial2(n-1)\ndef permutations(str1):\n    '''\n    Write a function that takes in a string and returns a list of all of the permutations of the string in lexicographic order.\n    '''\n    if len(str1) == 0:\n        return None\n    elif len(str1) == 1:\n        return [str1]\n    elif len(str1) == 2:\n        return [str1,str1[::-1]]\n    else:\n        perm = []\n        for i in range(len(str1)):\n            for perm1 in permutations(str1[:i]+str1[i+1:]):\n                perm.append(str1[i]+perm1)\n        return perm\ndef permutations2(str1):\n    '''\n    Write a function that takes in a string and returns a list of all of the permutations of the string in lexicographic order.\n    '''\n    if len(str1) == 0:\n        return None\n    elif len(str1) == 1:\n        return [str1]\n    elif len(str1) == 2:\n        return [str1,str1[::-1]]\n    else:\n        perm = []\n        for i in range(len(str1)):\n            for perm1 in permutations(str1[:i]+str1[i+1:]):\n                perm.append(str1[i]+perm1)\n        return perm\ndef anagrams(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if they are anagrams, False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    if str1 == str2:\n        return True\n    else:\n        return False\ndef anagrams2(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if they are anagrams, False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    if str1 == str2:\n        return True\n    else:\n        return False\ndef is_palindrome(str1):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    '''\n    if len(str1) <= 1:\n        return True\n    elif len(str1) == 2:\n        return str1[0] == str1[1]\n    else:\n        return str1[0] == str1[-1] and is_palindrome(str1[1:-1])\ndef is_palindrome2(str1):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    '''\n    return str1[::-1] == str1\ndef is_palindrome3(str1):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    '''\n    i,j = 0,len(str1)-1\n    while i<j:\n        if str1[i]!= str1[j]:\n            return False\n        i,j = i+1,j-1\n    return True\ndef is_palindrome4(str1):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    '''\n    return str1[::-1] == str1\ndef is_palindrome5(str1):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    '''\n    for i in range(len(str1)//2):\n        if str1[i]!= str1[len(str1)-i-1]:\n            return False\n    return True\ndef is_permutation(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are permutations of each other, False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    if str1 == str2:\n        return True\n    else:\n        return False\ndef is_permutation2(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are permutations of each other, False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    if str1 == str2:\n        return True\n    else:\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                return False\n        return True\ndef is_permutation3(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are permutations of each other, False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = sorted(str1)\n    st",
        "num_ids": 32
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r*h\n",
        "num_ids": 10
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n",
        "num_ids": 16
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi, sqrt\n    return pi * 2 * r * h\n",
        "num_ids": 21
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\n",
        "num_ids": 18
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    return pi * r**2 + 2 * pi * r * h\n",
        "num_ids": 30
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2 * pi * r * h) + (2 * pi * (r ** 2))\n",
        "num_ids": 25
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of a cylinder\n    # given a radius and height\n    return math.pi*r**2 + 2*math.pi*r*h\n",
        "num_ids": 41
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*r**2*(h/2.0)\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4.0*math.pi*r**2\ndef lateralsuface_hemisphere(r):\n    '''\n    Write a function to find the lateral surface area of a hemisphere.\n    '''\n    return math.pi*r**2\ndef lateralsuface_spherical_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a spherical cap.\n    '''\n    return math.pi*r**2*(h/2.0)\ndef lateralsuface_torus(r1,r2):\n    '''\n    Write a function to find the lateral surface area of a torus.\n    '''\n    return math.pi*(r1**2+r2**2)*(2.0*r1*r2)\n",
        "num_ids": 31
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    import math\n    from math import pi\n    A=pi*r*(r+h)\n    return A\n",
        "num_ids": 33
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s1=pi*r**2*3.0/4.0\n    s2=2*pi*r*h\n    return s1+s2\n",
        "num_ids": 40
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # l = int(raw_input())\n    v = l**3\n    print v\n",
        "num_ids": 24
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return l**3\n",
        "num_ids": 12
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return l**3\n",
        "num_ids": 12
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # http://mathworld.wolfram.com/Cube.html\n    return l ** 3\n",
        "num_ids": 24
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if type(l)!= int:\n        raise TypeError('Volume of cube cannot be calculated for non-integer input')\n    if l < 0:\n        raise ValueError('Volume of cube cannot be calculated for negative inputs')\n    return l ** 3\n",
        "num_ids": 59
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Method 1\n    # return n & (0b1000000000000000)\n    # Method 2\n    return n ^ (n & 0x5555555555555555)\n    # Method 3\n    # return n & 0b1111111111111111\n    \n    \n    \ndef count_set_bits(n): \n    '''\n    Write a python function to count the number of set bits in a given number.\n    '''\n    # Method 1\n    # count = 0\n    # while n:\n    #     count += 1\n    #     n = n & (n-1)\n    # return count\n    # Method 2\n    return bin(n).count(\"1\")\n    # Method 3\n    # count = 0\n    # while n:\n    #     n &= n-1\n    #     count += 1\n    # return count\n",
        "num_ids": 99
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return int(bin(n).replace('0b', ''), 2)\n",
        "num_ids": 20
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return int(bin(n)[2:]) & 1\n",
        "num_ids": 16
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    if n == 0:\n        return 0\n    return even_bit_set_number(n // 2) * 2 + 1\n",
        "num_ids": 34
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bit_set = 0\n    while n > 0:\n        if n & 1:\n            bit_set = bit_set + 1\n        n = n >> 1\n    return bit_set\n",
        "num_ids": 47
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n",
        "num_ids": 13
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0: \n        return 0\n    n = bin(n)\n    # print n\n    n = n[2:]\n    n = int(n, 2)\n    n = n | 1\n    n = bin(n)\n    n = n[2:]\n    n = int(n, 2)\n    return n\n",
        "num_ids": 82
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n >> 1) ^ (n & 1)\n",
        "num_ids": 16
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n ^ (n & 1) \n    n >>= 1 \n    return n \n",
        "num_ids": 26
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n - 1)\n    \n    \ndef even_bit_clear_number(n):\n    '''\n    Write a python function to clear all even bits of a given number.\n    '''\n    return n & (n - 1)\n    \n    \ndef bit_count(n):\n    '''\n    Write a python function to count the number of 1s in a given number.\n    '''\n    count = 0\n    while (n > 0):\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count\n    \n    \ndef is_power_of_2(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return not (n & (n - 1))\n    \n    \ndef is_power_of_2_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_two(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_two_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef power_of_two(n):\n    '''\n    Write a python function to find the power of 2 in a given number.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef power_of_two_number(n):\n    '''\n    Write a python function to find the power of 2 in a given number.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef power_of_two_number(n):\n    '''\n    Write a python function to find the power of 2 in a given number.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef power_of_number(n):\n    '''\n    Write a python function to find the power of 2 in a given number.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef power_of_number(n):\n    '''\n    Write a python function to find the power of 2 in a given number.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef power_of_number(n):\n    '''\n    Write a python function to find the power of 2 in a given number.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is_power_of_number(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return n!= 0 and not(n & (n - 1))\n    \n    \ndef is",
        "num_ids": 25
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for x in test_list:\n        if x in result:\n            result[x] += 1\n        else:\n            result[x] = 1\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n",
        "num_ids": 20
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list_ = []\n    for item in test_list:\n        test_list_.append(tuple(item))\n    occurences = Counter(test_list_)\n    return occurences\n",
        "num_ids": 51
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dict = {}\n    for tup in test_list:\n        if tup not in occurences_dict.keys():\n            occurences_dict[tup] = 1\n        else:\n            occurences_dict[tup] += 1\n    return occurences_dict\n",
        "num_ids": 74
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # your code here\n    return Counter(test_list)\n",
        "num_ids": 17
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n",
        "num_ids": 16
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dict = {}\n    for index,item in enumerate(test_list):\n        if item not in occurences_dict:\n            occurences_dict[item] = 1\n        else:\n            occurences_dict[item] += 1\n    return occurences_dict\n",
        "num_ids": 73
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dictionary = {}\n    for item in test_list:\n        if item in occurences_dictionary:\n            occurences_dictionary[item] += 1\n        else:\n            occurences_dictionary[item] = 1\n    return occurences_dictionary\n",
        "num_ids": 72
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n",
        "num_ids": 11
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = Counter(test_list)\n    return d\n",
        "num_ids": 16
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str) + 1):\n            if str[i:j]!= '':\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    \n    for i in xrange(len(str)):\n        count += 1\n        if i == 0:\n            for j in xrange(i, len(str)):\n                count += 1\n                if str[j]!= '0':\n                    break\n        else:\n            if str[i]!= '0':\n                for j in xrange(i, len(str)):\n                    if str[j] == '0':\n                        break\n                    count += 1\n    return count\n    \ndef deci_to_binary(deci):\n    '''\n    Write a python function to convert a decimal number to a binary number, \n    with each digit in the binary number separated by a space in between.\n    '''\n    \n    return''.join(str(format(deci, 'b')) for _ in range(8))\n    \ndef count_occurence_of_a_number_in_a_string(str, num):\n    '''\n    Write a python function to count the number of times a number occurs in a string.\n    '''\n    \n    return str.count(str(num))\n    \ndef print_triangle(n):\n    '''\n    Write a python function to print a triangle of size n.\n    '''\n    \n    if n < 1:\n        return\n    \n    for i in xrange(n):\n        print(''* (n - i - 1) + '*' * (i + 1))\n    \ndef contains_a_string(str, word):\n    '''\n    Write a python function to determine whether a given string contains a substring.\n    '''\n    \n    return word in str\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check whether two strings are anagrams.\n    '''\n    \n    if len(str1)!= len(str2):\n        return False\n        \n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    \n    for i in xrange(len(str1)):\n        if str1[i]!= str2[i]:\n            return False\n            \n    return True\n    \ndef get_anagrams(str):\n    '''\n    Write a python function to get all anagrams of a string.\n    '''\n    \n    anagrams = []\n    \n    for i in xrange(len(str)):\n        for j in xrange(len(str) - i):\n            if is_anagram(str[i:i + j + 1], str[i + j + 1:]):\n                anagrams.append(str[i:i + j + 1])\n                \n    return anagrams\n    \ndef count_substrings(str):\n    '''\n    Write a python function to count the number of substrings in a given string.\n    '''\n    \n    count = 0\n    \n    for i in xrange(len(str)):\n        count += 1\n        if i == 0:\n            for j in xrange(i, len(str)):\n                count += 1\n                if str[j]!= '0':\n                    break\n        else:\n            if str[i]!= '0':\n                for j in xrange(i, len(str)):\n                    if str[j] == '0':\n                        break\n                    count += 1\n    return count\n    \ndef reverse_words(str):\n    '''\n    Write a python function to reverse the words of a given string.\n    '''\n    \n    str =''.join(str.split()[::-1])\n    \n    return str\n    \ndef print_reversed_triangle(n):\n    '''\n    Write a python function to print a reversed triangle of size n.\n    '''\n    \n    for i in xrange(n):\n        print(''* (n - i - 1) + '*' * (i + 1))\n        \ndef palindrome(str):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    \n    str = str.lower()\n    \n    return str == str[::-1]\n    \ndef is_anagram_using_dictionary(str1, str2):\n    '''\n    Write a python function to check whether two strings are anagrams.\n    '''\n    \n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    d = {}\n    \n    if len(str1)!= len(str2):\n        return False\n        \n    for i in xrange(len(str1)):\n        if str1[i] not in d:\n            d[str1[i]] = 1\n        else:\n            d[str1[i]] += 1\n        \n        if str2[i] not in d:\n            d[str2[i]] = 1\n        else:\n            d[str2[i]] += 1\n            \n    for key in d:\n        if d[key] % 2!= 0:\n            return False\n    \n    return True\n    \ndef word_break(str, word_list):\n    '''\n    Write a python function to check if a string can be segmented into words from a given list.\n    '''\n    \n    return''.join(str.split()).split(' ') == word_list\n    \ndef is_prime(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    \n    if num < 2:\n        return False\n    \n    for i in xrange(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n            \n    return True\n    \ndef is_anagram_of_number(str, num):\n    '''\n    Write a python function to check whether a given string is an anagram of a number.\n    '''\n    \n    str = str.lower()\n    \n    return sorted(str) == sorted(str[:str.index('0')]) + sorted(str[str.index('0') + 1:])\n    \ndef reverse_complement(str):\n    '''\n    Write a python function to reverse complement a given string.\n    '''\n    \n    complement = {'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G', 'N': 'N'}\n    \n    str = str.lower()\n    \n    return ''.join(complement[s] for s in str)\n    \ndef get_kmer_count(k, str):\n    '''\n    Write a python function to get the count of k-mers in a given string.\n    '''\n    \n    k = int(k)\n    \n    str = str.lower()\n    \n    return len(str) - k + 1\n    \ndef get_most_frequent_kmer(str, k):\n    '''\n    Write a python function to get the most frequent k-mers in a given string.\n    '''\n    \n    k = int(k)\n    \n    kmer_count = {}\n    \n    for i in xrange(len(str) - k + 1):\n        kmer = str[i:i + k]\n        \n        if kmer not in kmer_count:\n            kmer_count[kmer] = 1\n        else:\n            kmer_count[kmer] += 1\n            \n    count_list = []\n    \n    for kmer in kmer_count:\n        count_list.append(kmer_count[kmer])\n        \n    max_count = max(count_list)\n    \n    return [kmer for kmer in kmer_count if kmer_count[kmer] == max_count]\n    \ndef get_frequency_map(str):\n    '''\n    Write a python function to get the frequency map of a given string.\n    '''\n    \n    frequency = {}\n    \n    for i in xrange(len(str)):\n        if str[i] not in frequency:\n            frequency[str[i]] = 1\n        else:\n            frequency[str[i]] += 1\n            \n    return frequency\n    \ndef get_substrings(str):\n    '''\n    Write a python function to get all substrings of a given string.\n    '''\n    \n    substrings = []\n    \n    for i in xrange(le",
        "num_ids": 20
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    non_empty_substrings = 0\n    for i in range(len(str)):\n        count = 0\n        for j in range(i, len(str)):\n            if (str[j]!=''):\n                count += 1\n            else:\n                non_empty_substrings += count\n                break\n    return non_empty_substrings\n",
        "num_ids": 86
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    ans = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if str[i] == str[j]: \n                ans += 1\n    return ans \n",
        "num_ids": 58
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    substring_count = 0\n    for i in range(0,len(str)):\n        for j in range(i,len(str)):\n            if (str[i:j+1]!= ''):\n                substring_count += 1\n    return substring_count\n",
        "num_ids": 75
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    # non-empty substrings\n    substr = []\n",
        "num_ids": 18
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = {}\n    for i in range(len(str)):\n        if str[i] in substrings:\n            substrings[str[i]] += 1\n        else:\n            substrings[str[i]] = 1\n    count = 0\n    for key in substrings.keys():\n        if substrings[key] > 1:\n            count += (substrings[key]-1)\n    return count\n",
        "num_ids": 99
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0,len(str)):\n        if str[i]!='':\n            count = count + 1\n            for j in range(i,len(str)):\n                if str[j] =='':\n                    count = count + 1\n                    break\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # if len(str) == 0:\n    #     return 0\n    # temp = 0\n    # for i in range(len(str)):\n    #     if str[i]!='':\n    #         temp = temp + 1\n    #     else:\n    #         temp = 0\n    #     if temp == 0:\n    #         break\n    # return len(str) - i \n    # return sum([str[i]!='' for i in range(len(str))])\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return sum(map(lambda x: x!='', str))\n",
        "num_ids": 18
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    str_len = len(str)\n    count = 0\n    for i in range(str_len):\n        for j in range(i,str_len):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # method 1 \n    # n = m\n    # count = 0\n    # while n > 0:\n    #     if n >= m:\n    #         n = n - m\n    #         count = count + 1\n    #     elif n < m:\n    #         n = n - n\n    #         count = count + 1\n    # return count\n",
        "num_ids": 88
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if n==1:\n        return m\n    elif n==2:\n        return int(m/2)\n    elif n==3:\n        return int(m/3)\n    elif n==4:\n        return int(m/4)\n    elif n==5:\n        return int(m/5)\n    elif n==6:\n        return int(m/6)\n    elif n==7:\n        return int(m/7)\n    elif n==8:\n        return int(m/8)\n    elif n==9:\n        return int(m/9)\n    elif n==10:\n        return int(m/10)\n    elif n==11:\n        return int(m/11)\n    elif n==12:\n        return int(m/12)\n    elif n==13:\n        return int(m/13)\n    elif n==14:\n        return int(m/14)\n    elif n==15:\n        return int(m/15)\n    elif n==16:\n        return int(m/16)\n    elif n==17:\n        return int(m/17)\n    elif n==18:\n        return int(m/18)\n    elif n==19:\n        return int(m/19)\n    elif n==20:\n        return int(m/20)\n    elif n==21:\n        return int(m/21)\n    elif n==22:\n        return int(m/22)\n    elif n==23:\n        return int(m/23)\n    elif n==24:\n        return int(m/24)\n    elif n==25:\n        return int(m/25)\n    elif n==26:\n        return int(m/26)\n    elif n==27:\n        return int(m/27)\n    elif n==28:\n        return int(m/28)\n    elif n==29:\n        return int(m/29)\n    elif n==30:\n        return int(m/30)\n    elif n==31:\n        return int(m/31)\n    elif n==32:\n        return int(m/32)\n    elif n==33:\n        return int(m/33)\n    elif n==34:\n        return int(m/34)\n    elif n==35:\n        return int(m/35)\n    elif n==36:\n        return int(m/36)\n    elif n==37:\n        return int(m/37)\n    elif n==38:\n        return int(m/38)\n    elif n==39:\n        return int(m/39)\n    elif n==40:\n        return int(m/40)\n    elif n==41:\n        return int(m/41)\n    elif n==42:\n        return int(m/42)\n    elif n==43:\n        return int(m/43)\n    elif n==44:\n        return int(m/44)\n    elif n==45:\n        return int(m/45)\n    elif n==46:\n        return int(m/46)\n    elif n==47:\n        return int(m/47)\n    elif n==48:\n        return int(m/48)\n    elif n==49:\n        return int(m/49)\n    elif n==50:\n        return int(m/50)\n    elif n==51:\n        return int(m/51)\n    elif n==52:\n        return int(m/52)\n    elif n==53:\n        return int(m/53)\n    elif n==54:\n        return int(m/54)\n    elif n==55:\n        return int(m/55)\n    elif n==56:\n        return int(m/56)\n    elif n==57:\n        return int(m/57)\n    elif n==58:\n        return int(m/58)\n    elif n==59:\n        return int(m/59)\n    elif n==60:\n        return int(m/60)\n    elif n==61:\n        return int(m/61)\n    elif n==62:\n        return int(m/62)\n    elif n==63:\n        return int(m/63)\n    elif n==64:\n        return int(m/64)\n    elif n==65:\n        return int(m/65)\n    elif n==66:\n        return int(m/66)\n    elif n==67:\n        return int(m/67)\n    elif n==68:\n        return int(m/68)\n    elif n==69:\n        return int(m/69)\n    elif n==70:\n        return int(m/70)\n    elif n==71:\n        return int(m/71)\n    elif n==72:\n        return int(m/72)\n    elif n==73:\n        return int(m/73)\n    elif n==74:\n        return int(m/74)\n    elif n==75:\n        return int(m/75)\n    elif n==76:\n        return int(m/76)\n    elif n==77:\n        return int(m/77)\n    elif n==78:\n        return int(m/78)\n    elif n==79:\n        return int(m/79)\n    elif n==80:\n        return int(m/80)\n    elif n==81:\n        return int(m/81)\n    elif n==82:\n        return int(m/82)\n    elif n==83:\n        return int(m/83)\n    elif n==84:\n        return int(m/84)\n    elif n==85:\n        return int(m/85)\n    elif n==86:\n        return int(m/86)\n    elif n==87:\n        return int(m/87)\n    elif n==88:\n        return int(m/88)\n    elif n==89:\n        return int(m/89)\n    elif n==90:\n        return int(m/90)\n    elif n==91:\n        return int(m/91)\n    elif n==92:\n        return int(m/92)\n    elif n==93:\n        return int(m/93)\n    elif n==94:\n        return int(m/94)\n    elif n==95:\n        return int(m/95)\n    elif n==96:\n        return int(m/96)\n    elif n==97:\n        return int(m/97)\n    elif n==98:\n        return int(m/98)\n    elif n==99:\n        return int(m/99)\n    elif n==100:\n        return int(m/100)\n    elif n==101:\n        return int(m/101)\n    elif n==102:\n        return int(m/102)\n    elif n==103:\n        return int(m/103)\n    elif n==104:\n        return int(m/104)\n    elif n==105:\n        return int(m/105)\n    elif n==106:\n        return int(m/106)\n    elif n==107:\n        return int(m/107)\n    elif n==108:\n        return int(m/108)\n    elif n==109:\n        return int(m/109)\n    elif n==110:\n        return int(m/110)\n    elif n==111:\n        return int(m/111)\n    elif n==112:\n        return int(m/112)\n    elif n==113:\n        return int(m/113)\n    elif n==114:\n        return int(m/114)\n    elif n==115:\n        return int(m/115)\n    elif n==116:\n        return int(m/116)\n    eli",
        "num_ids": 1972
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    assert isinstance(m,int) and m>=1\n    assert isinstance(n,int) and n>=1\n",
        "num_ids": 32
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return reduce(lambda x,y: x*y,range(1,n+1))%m\n",
        "num_ids": 26
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int(comb(m*2, n, exact = True))\n",
        "num_ids": 19
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    seq = 0\n    for i in range(1,n+1):\n        seq += math.factorial(m-i) / (math.factorial(i) * math.factorial(m-i-i))\n    return seq\n",
        "num_ids": 60
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m-1,n)\n",
        "num_ids": 55
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    seq = [1 for i in range(0,n)]\n    total = 1\n    for i in range(0,n):\n        if i < n-1:\n            seq[i+1] = seq[i] + 1\n            if seq[i] < m/2:\n                total += seq[i]\n            elif seq[i] > m/2:\n                total += (m - seq[i])\n            else:\n                total += seq[i]\n        else:\n            total += seq[i]\n    return total\n    \n",
        "num_ids": 131
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m > n :\n        return 0\n    elif m == 0 or n == 0:\n        return 1\n    elif m == n :\n        return 1\n    else:\n        return get_total_number_of_sequences(m-2,n-1) + get_total_number_of_sequences(m-2,n)\n",
        "num_ids": 85
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    number_of_sequences = factorial(n) / (factorial(n-2) * m)\n    return number_of_sequences\n",
        "num_ids": 37
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #your code here\n    return [list1[i]+list2[i] for i in range(len(list1))]\n",
        "num_ids": 33
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n    return list1\n",
        "num_ids": 17
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n    return list1\n",
        "num_ids": 17
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)<len(list2):\n        print(\"Length of list1 is less than length of list2\")\n    elif len(list1)>len(list2):\n        print(\"Length of list2 is less than length of list1\")\n    else:\n        for x in range(len(list1)):\n            list1[x] = list2[x]\n    return list1\n",
        "num_ids": 98
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        new_list.append(list1[i])\n    new_list[-1] = list2\n    return new_list\n",
        "num_ids": 55
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(0,len(list1)):\n        if i == len(list1)-1:\n            list1[i] = list2[i]\n    return list1\n",
        "num_ids": 47
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n    return list1\n",
        "num_ids": 17
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if list1 is None or list2 is None:\n        return None\n    if len(list1) < 1 or len(list2) < 1:\n        return None\n    list1[-1] = list2\n    return list1\n",
        "num_ids": 58
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    print list1\n    \n",
        "num_ids": 20
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for i in str1:\n        total_chars += 1\n    return total_chars\n",
        "num_ids": 33
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    return len(str1)\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    \n    return str1 == str1[::-1]\n    \ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    \n    punct = '!\"$%^&()*+,-./:;<=>?@[\\\\]_`~{}|\\'~'\n    \n    for i in str1:\n        if i in punct:\n            str1 = str1.replace(i, \"\")\n            \n    return str1\n",
        "num_ids": 76
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    chars = {}\n    for char in str1:\n        if char not in chars:\n            chars[char] = 1\n        else:\n            chars[char] += 1\n    return chars\n",
        "num_ids": 50
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    i = 0\n    for j in str1:\n        i += 1\n    return i\n",
        "num_ids": 24
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\ndef prime_factorization(N):\n    '''\n    Write a python function to find the prime factorization of a given number.\n    '''\n    prime_factors = []\n    if N==1:\n        return prime_factors\n    else:\n        sqrt_n = int(math.sqrt(N))+1\n        for n in range(2,sqrt_n):\n            if N%n==0:\n                while N%n==0:\n                    N = N/n\n                    prime_factors.append(n)\n        if N>1:\n            prime_factors.append(N)\n        return prime_factors\ndef prime_factorization_list(N):\n    '''\n    Write a python function to find the prime factorization of a given number with a list return.\n    '''\n    prime_factors = []\n    if N==1:\n        return prime_factors\n    else:\n        sqrt_n = int(math.sqrt(N))+1\n        for n in range(2,sqrt_n):\n            if N%n==0:\n                while N%n==0:\n                    N = N/n\n                    prime_factors.append(n)\n        if N>1:\n            prime_factors.append(N)\n        return prime_factors\ndef get_Prime_factors(N):\n    '''\n    Write a python function to find the prime factorization of a given number with a list return.\n    '''\n    prime_factors = []\n    if N==1:\n        return prime_factors\n    else:\n        sqrt_n = int(math.sqrt(N))+1\n        for n in range(2,sqrt_n):\n            if N%n==0:\n                prime_factors.append(n)\n        if N>1:\n            prime_factors.append(N)\n        return prime_factors\ndef get_prime_factors(N):\n    '''\n    Write a python function to find the prime factorization of a given number with a list return.\n    '''\n    prime_factors = []\n    if N==1:\n        return prime_factors\n    else:\n        sqrt_n = int(math.sqrt(N))+1\n        for n in range(2,sqrt_n):\n            if N%n==0:\n                prime_factors.append(n)\n        if N>1:\n            prime_factors.append(N)\n        return prime_factors\ndef factorization(N):\n    '''\n    Write a python function to find the prime factorization of a given number.\n    '''\n    factorization = []\n    if N==1:\n        return factorization\n    else:\n        sqrt_n = int(math.sqrt(N))+1\n        for n in range(2,sqrt_n):\n            if N%n==0:\n                while N%n==0:\n                    N = N/n\n                    factorization.append(n)\n        if N>1:\n            factorization.append(N)\n        return factorization\ndef sqrt(N):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    return int(math.sqrt(N))\ndef power_of(N):\n    '''\n    Write a python function to find the power of a number.\n    '''\n    return int(math.pow(N,2))\ndef is_perfect_square(N):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    if (N<0):\n        return False\n    else:\n        return (sqrt(N)==math.floor(sqrt(N)))\ndef is_perfect_square_prime(N):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    if (N<0):\n        return False\n    else:\n        return (N%1==0 and sqrt(N)==int(sqrt(N)))\ndef is_perfect_square_list(N):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    if (N<0):\n        return False\n    else:\n        return (N%1==0 and [int(sqrt(N)),N//int(sqrt(N))][int(sqrt(N))==sqrt(N)])\ndef get_perfect_squares_list(N):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    perfect_squares = []\n    if (N<0):\n        return []\n    else:\n        return [int(sqrt(N)),N//int(sqrt(N))][int(sqrt(N))==sqrt(N)]\ndef is_perfect_square(N):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    if (N<0):\n        return False\n    else:\n        return (N%1==0 and sqrt(N)==int(sqrt(N)))\ndef is_perfect_square_prime(N):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    if (N<0):\n        return False\n    else:\n        return (N%1==0 and N/int(sqrt(N))==int(sqrt(N)))\ndef is_perfect_square_list(N):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    if (N<0):\n        return False\n    else:\n        return (N%1==0 and [int(sqrt(N)),N//int(sqrt(N))][int(sqrt(N))==sqrt(N)])\ndef get_perfect_squares_list(N):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    perfect_squares = []\n    if (N<0):\n        return []\n    else:\n        return [int(sqrt(N)),N//int(sqrt(N))][int(sqrt(N))==sqrt(N)]\ndef is_perfect_square(N):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    if (N<0):\n        return False\n    else:\n        return (N%1==0 and sqrt(N)==int(sqrt(N)))\ndef is_perfect_square_prime(N):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    if (N<0):\n        return False\n    else:\n        return (N%1==0 and N/int(sqrt(N))==int(sqrt(N)))\ndef is_perfect_square_list(N):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    if (N<0):\n        return False\n    else:\n        return (N%1==0 and [int(sqrt(N)),N//int(sqrt(N))][int(sqrt(N))==sqrt(N)])\ndef get_perfect_squares_list(N):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    perfect_squares = []\n    if (N<0):\n        return []\n    else:\n        return [int(sqrt(N)),N//int(sqrt(N))][int(sqrt(N))==sqrt(N)]\ndef is_perfect_square(N):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    if (N<0):\n        return False\n    else:\n        return (N%1==0 and sqrt(N)==int(sqrt(N)))\ndef is_perfect_square_prime(N):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    if (N<0):\n        return False\n    else:\n        return (N%1==0 and N/int(sqrt(N))==int(sqrt(",
        "num_ids": 42
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n",
        "num_ids": 19
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = int(math.sqrt(N))\n    for i in xrange(n+1,N+1):\n        if math.sqrt(i)%1==0:\n            return i\n",
        "num_ids": 50
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    return int((root + 1)**2)\n",
        "num_ids": 27
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N))\n    if x*x == N:\n        return x*x\n    else:\n        return int(math.ceil(math.sqrt(N))) * int(math.ceil(math.sqrt(N)))\ndef generate_data(fname):\n    '''\n    Given a file name, reads the contents of the file, and returns a list of the\n    lines in the file.\n    '''\n    data = []\n    with open(fname) as f:\n        for line in f:\n            data.append(line)\n    return data\ndef get_word_list(data):\n    '''\n    Given a list of lines, returns a list of words.\n    '''\n    word_list = []\n    for line in data:\n        for word in line.split():\n            word_list.append(word)\n    return word_list\ndef is_a_palindrome(string):\n    '''\n    Given a string, returns true if the string is a palindrome.\n    '''\n    string = string.lower()\n    left = 0\n    right = len(string) - 1\n    while left < right:\n        if string[left]!= string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\ndef get_longest_palindromic_substring(string):\n    '''\n    Given a string, returns the longest palindromic substring.\n    '''\n    if len(string) < 2:\n        return string\n    if len(string) == 2:\n        return string if string[0] == string[1] else string[0]\n    if len(string) % 2 == 0:\n        return get_longest_palindromic_substring(string[0:len(string)/2]) + get_longest_palindromic_substring(string[len(string)/2:len(string)])\n    else:\n        return get_longest_palindromic_substring(string[0:len(string)/2]) + get_longest_palindromic_substring(string[len(string)/2+1:len(string)])\ndef get_number_of_words_in_a_file(fname):\n    '''\n    Given a file name, returns the number of words in the file.\n    '''\n    word_list = []\n    with open(fname) as f:\n        for line in f:\n            for word in line.split():\n                word_list.append(word)\n    return len(word_list)\ndef get_all_words_in_a_file(fname):\n    '''\n    Given a file name, returns the list of all words in the file.\n    '''\n    word_list = []\n    with open(fname) as f:\n        for line in f:\n            for word in line.split():\n                word_list.append(word)\n    return word_list\ndef convert_a_file_to_a_dict(fname):\n    '''\n    Given a file name, returns a dictionary where the keys are the words in the file\n    and the values are the number of times the word appears in the file.\n    '''\n    word_list = get_all_words_in_a_file(fname)\n    word_dict = {}\n    for word in word_list:\n        if word not in word_dict:\n            word_dict[word] = 1\n        else:\n            word_dict[word] += 1\n    return word_dict\ndef get_nth_fibonacci_number(n):\n    '''\n    Returns the nth fibonacci number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return get_nth_fibonacci_number(n-1) + get_nth_fibonacci_number(n-2)\ndef count_fibonacci_elements_below_a_given_number(data, number):\n    '''\n    Given a list of numbers and a number, returns the number of fibonacci elements\n    below the number.\n    '''\n    count = 0\n    for element in data:\n        if element < number:\n            if element == get_nth_fibonacci_number(count):\n                count += 1\n            else:\n                break\n    return count\ndef count_and_return_elements_less_than_or_equal_to_a_given_number(data, number):\n    '''\n    Given a list of numbers and a number, returns the number of elements in the list\n    that are less than or equal to the number.\n    '''\n    count = 0\n    for element in data:\n        if element <= number:\n            count += 1\n    return count\ndef is_prime(number):\n    '''\n    Given a number, returns true if the number is prime.\n    '''\n    if number < 2:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(number)) + 1, 2):\n        if number % i == 0:\n            return False\n    return True\ndef count_and_return_primes_in_range(data, low_bound, high_bound):\n    '''\n    Given a list of numbers, and two bounds, returns the number of primes between\n    the bounds.\n    '''\n    count = 0\n    for element in data:\n        if element > low_bound and element < high_bound:\n            if is_prime(element):\n                count += 1\n    return count\ndef get_all_primes_in_a_range(data, low_bound, high_bound):\n    '''\n    Given a list of numbers, and two bounds, returns a list of all primes between\n    the bounds.\n    '''\n    primes = []\n    for element in data:\n        if element > low_bound and element < high_bound:\n            if is_prime(element):\n                primes.append(element)\n    return primes\ndef get_all_prime_factors_in_a_range(data, low_bound, high_bound):\n    '''\n    Given a list of numbers, and two bounds, returns a list of all prime factors\n    between the bounds.\n    '''\n    factors = []\n    for element in data:\n        if element > low_bound and element < high_bound:\n            if is_prime(element):\n                while element > 1:\n                    if element % 2 == 0:\n                        element = element / 2\n                    else:\n                        break\n                factors.append(element)\n    return factors\ndef get_all_factors_in_a_range(data, low_bound, high_bound):\n    '''\n    Given a list of numbers, and two bounds, returns a list of all factors between\n    the bounds.\n    '''\n    factors = []\n    for element in data:\n        if element > low_bound and element < high_bound:\n            for i in range(1, int(math.sqrt(element)) + 1):\n                if element % i == 0:\n                    factors.append(i)\n                    factors.append(int(element/i))\n    return factors\ndef get_all_factors_and_primes_in_a_range(data, low_bound, high_bound):\n    '''\n    Given a list of numbers, and two bounds, returns a list of all factors and primes\n    between the bounds.\n    '''\n    factors = []\n    for element in data:\n        if element > low_bound and element < high_bound:\n            for i in range(1, int(math.sqrt(element)) + 1):\n                if element % i == 0:\n                    factors.append(i)\n                    factors.append(int(element/i))\n                    while element > 1:\n                        if element % 2 == 0:\n                            element = element / 2\n                        else:\n                            break\n                    factors.append(element)\n    return factors\ndef is_a_perfect_square(number):\n    '''\n    Given a number, returns true if the number is a perfect square.\n    '''\n    return int(math.sqrt(number)) * int(math.sqrt(number)) == number\ndef count_and_return_perfect_squares_in_a_range",
        "num_ids": 43
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\ndef sum_List(L):\n    '''\n    Write a python function to return the sum of all the elements in a list\n    '''\n    return sum(L)\ndef dict_Cluster(list1, k):\n    '''\n    Write a python function to return a dictionary with the number of clusters as values and the list of keys as keys for each cluster\n    '''\n    list2 = sorted(list1)\n    length = len(list1)\n    Clusters = {}\n    Clusters[list2[0]] = [list2[0]]\n    for i in range(1, length):\n        if list2[i]-list2[i-1] == 1:\n            Clusters[list2[i]] = Clusters.get(list2[i]) + Clusters.get(list2[i-1])\n    return Clusters\ndef dict_Cluster_items(dict_Cluster, k):\n    '''\n    Write a python function to return a dictionary with the number of clusters as values and the items of each cluster as keys for each cluster\n    '''\n    dict_Cluster_items = {}\n    for i in dict_Cluster:\n        dict_Cluster_items[i] = dict_Cluster.get(i)\n    return dict_Cluster_items\ndef dict_Cluster_items_sorted(dict_Cluster_items):\n    '''\n    Write a python function to return a dictionary with the number of clusters as values and the items of each cluster as keys for each cluster\n    '''\n    dict_Cluster_items_sorted = {}\n    for i in dict_Cluster_items:\n        dict_Cluster_items_sorted[dict_Cluster_items.get(i)] = i\n    return dict_Cluster_items_sorted\ndef ordered_cluster(dict_Cluster_items_sorted):\n    '''\n    Write a python function to return a list of tuples with the order of the items in the dictionary of clusters\n    '''\n    List = []\n    for i in dict_Cluster_items_sorted:\n        List.append((dict_Cluster_items_sorted.get(i), i))\n    return List\ndef dict_items_Cluster(dict_Cluster_items_sorted, k):\n    '''\n    Write a python function to return a dictionary with the items of each cluster as keys and the values of clusters as values\n    '''\n    dict_items_Cluster = {}\n    for i in dict_Cluster_items_sorted:\n        dict_items_Cluster[i] = dict_Cluster_items_sorted.get(i)\n    return dict_items_Cluster\ndef dict_items_Cluster_sorted(dict_items_Cluster):\n    '''\n    Write a python function to return a dictionary with the items of each cluster as keys and the values of clusters as values\n    '''\n    dict_items_Cluster_sorted = {}\n    for i in dict_items_Cluster:\n        dict_items_Cluster_sorted[dict_items_Cluster.get(i)] = i\n    return dict_items_Cluster_sorted\ndef dict_items_Cluster_sorted_2(dict_items_Cluster_sorted, k):\n    '''\n    Write a python function to return a dictionary with the items of each cluster as keys and the values of clusters as values\n    '''\n    dict_items_Cluster_sorted_2 = {}\n    for i in dict_items_Cluster_sorted:\n        dict_items_Cluster_sorted_2[dict_items_Cluster_sorted.get(i)] = i\n    return dict_items_Cluster_sorted_2\ndef dict_Cluster_items_sorted_2(dict_Cluster_items_sorted, k):\n    '''\n    Write a python function to return a dictionary with the items of each cluster as keys and the values of clusters as values\n    '''\n    dict_Cluster_items_sorted_2 = {}\n    for i in dict_Cluster_items_sorted:\n        dict_Cluster_items_sorted_2[dict_Cluster_items_sorted.get(i)] = i\n    return dict_Cluster_items_sorted_2\ndef dict_Cluster_items_sorted_3(dict_Cluster_items_sorted, k):\n    '''\n    Write a python function to return a dictionary with the items of each cluster as keys and the values of clusters as values\n    '''\n    dict_Cluster_items_sorted_3 = {}\n    for i in dict_Cluster_items_sorted:\n        dict_Cluster_items_sorted_3[dict_Cluster_items_sorted.get(i)] = i\n    return dict_Cluster_items_sorted_3\ndef dict_items_Cluster_sorted_2(dict_items_Cluster_sorted, k):\n    '''\n    Write a python function to return a dictionary with the items of each cluster as keys and the values of clusters as values\n    '''\n    dict_items_Cluster_sorted_2 = {}\n    for i in dict_items_Cluster_sorted:\n        dict_items_Cluster_sorted_2[dict_items_Cluster_sorted.get(i)] = i\n    return dict_items_Cluster_sorted_2\ndef dict_items_Cluster_sorted_3(dict_items_Cluster_sorted, k):\n    '''\n    Write a python function to return a dictionary with the items of each cluster as keys and the values of clusters as values\n    '''\n    dict_items_Cluster_sorted_3 = {}\n    for i in dict_items_Cluster_sorted:\n        dict_items_Cluster_sorted_3[dict_items_Cluster_sorted.get(i)] = i\n    return dict_items_Cluster_sorted_3\ndef dict_items_Cluster_sorted_4(dict_items_Cluster_sorted, k):\n    '''\n    Write a python function to return a dictionary with the items of each cluster as keys and the values of clusters as values\n    '''\n    dict_items_Cluster_sorted_4 = {}\n    for i in dict_items_Cluster_sorted:\n        dict_items_Cluster_sorted_4[dict_items_Cluster_sorted.get(i)] = i\n    return dict_items_Cluster_sorted_4\ndef dict_items_Cluster_sorted_5(dict_items_Cluster_sorted, k):\n    '''\n    Write a python function to return a dictionary with the items of each cluster as keys and the values of clusters as values\n    '''\n    dict_items_Cluster_sorted_5 = {}\n    for i in dict_items_Cluster_sorted:\n        dict_items_Cluster_sorted_5[dict_items_Cluster_sorted.get(i)] = i\n    return dict_items_Cluster_sorted_5\ndef dict_items_Cluster_sorted_6(dict_items_Cluster_sorted, k):\n    '''\n    Write a python function to return a dictionary with the items of each cluster as keys and the values of clusters as values\n    '''\n    dict_items_Cluster_sorted_6 = {}\n    for i in dict_items_Cluster_sorted:\n        dict_items_Cluster_sorted_6[dict_items_Cluster_sorted.get(i)] = i\n    return dict_items_Cluster_sorted_6\ndef dict_items_Cluster_sorted_7(dict_items_Cluster_sorted, k):\n    '''\n    Write a python function to return a dictionary with the items of each cluster as keys and the values of clusters as values\n    '''\n    dict_items_Cluster_sorted_7 = {}\n    for i in dict_items_Cluster_sorted:\n        dict_items_Cluster_sorted_7[dict_items_Cluster_sorted.get(i)] = i\n    return dict_items_Cluster_sorted_7\ndef dict_items_Cluster_sorted_8(dict_items_Cluster_sorted, k):\n    '''\n    Write a python function to return a dictionary with the items of each cluster as keys and the values of clusters as value",
        "num_ids": 26
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = 1\n    if N==0:\n        return 1\n    while n*n <= N:\n        n+=1\n    return n*n\ndef solution(N):\n    '''\n    Write a python function to find the solution to the equation ax2+bx+c=0\n    '''\n    a = 1\n    b = 1\n    c = -N\n    d = (b*b) - 4*a*c\n    if d < 0:\n        return False\n    elif d == 0:\n        return -b/2*a\n    else:\n        x1 = (-b + math.sqrt(d)) / 2*a\n        x2 = (-b - math.sqrt(d)) / 2*a\n        return min(x1,x2)\ndef fibonacci(n):\n    '''\n    Write a python function to return the nth value of the fibonacci series\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef is_prime(n):\n    '''\n    Write a python function to return if the number is prime or not\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\ndef fibonacci_series(N):\n    '''\n    Write a python function to return a fibonacci series upto N\n    '''\n    series = []\n    a,b = 0,1\n    while b < N:\n        series.append(b)\n        a,b = b,a+b\n    return series\ndef is_Pandigital(n, k):\n    '''\n    Write a python function to return if the given number is pandigital or not\n    '''\n    n = str(n)\n    return all([1 if i < 10 else 0 for i in n]) and len(n) == k\ndef is_Pentagonal(n):\n    '''\n    Write a python function to return if the given number is pentagonal or not\n    '''\n    return (1+math.sqrt(1+24*n)) % 6 == 0\ndef is_Hexagonal(n):\n    '''\n    Write a python function to return if the given number is hexagonal or not\n    '''\n    return (1+math.sqrt(1+8*n)) % 4 == 0\ndef is_Heptagonal(n):\n    '''\n    Write a python function to return if the given number is hexagonal or not\n    '''\n    return (1+math.sqrt(1+12*n)) % 4 == 0\ndef is_Octagonal(n):\n    '''\n    Write a python function to return if the given number is hexagonal or not\n    '''\n    return (1+math.sqrt(1+20*n)) % 4 == 0\ndef is_Integer(n):\n    '''\n    Write a python function to return if the given number is integer or not\n    '''\n    return n == int(n)\ndef is_square(n):\n    '''\n    Write a python function to return if the given number is square or not\n    '''\n    return int(math.sqrt(n))**2 == n\ndef is_rectangle(n):\n    '''\n    Write a python function to return if the given number is rectangle or not\n    '''\n    return n == int(math.sqrt(n))**2\ndef is_pentagonal_triangle(n):\n    '''\n    Write a python function to return if the given number is pentagonal or not\n    '''\n    return math.sqrt(1+24*n) % 6 == 0\ndef is_triangle(n):\n    '''\n    Write a python function to return if the given number is triangle or not\n    '''\n    return n == int(math.sqrt(n))**2\ndef is_square_triangle(n):\n    '''\n    Write a python function to return if the given number is square triangle or not\n    '''\n    return n == int(math.sqrt(n))**2\ndef is_rectangle_triangle(n):\n    '''\n    Write a python function to return if the given number is rectangle triangle or not\n    '''\n    return n == int(math.sqrt(n))**2\ndef is_hexagonal_triangle(n):\n    '''\n    Write a python function to return if the given number is hexagonal triangle or not\n    '''\n    return n == int(math.sqrt(n))**2\ndef is_heptagonal_triangle(n):\n    '''\n    Write a python function to return if the given number is heptagonal triangle or not\n    '''\n    return n == int(math.sqrt(n))**2\ndef is_octagonal_triangle(n):\n    '''\n    Write a python function to return if the given number is octagonal triangle or not\n    '''\n    return n == int(math.sqrt(n))**2\ndef is_circle(n):\n    '''\n    Write a python function to return if the given number is circle or not\n    '''\n    return n == int(math.sqrt(n))**2\ndef is_rhombus(n):\n    '''\n    Write a python function to return if the given number is rhombus or not\n    '''\n    return n == int(math.sqrt(n))**2\ndef is_pentagon(n):\n    '''\n    Write a python function to return if the given number is pentagon or not\n    '''\n    return is_heptagonal(n) and is_pentagonal_triangle(n)\ndef is_hexagon(n):\n    '''\n    Write a python function to return if the given number is hexagon or not\n    '''\n    return is_heptagonal(n) and is_hexagonal_triangle(n)\ndef is_heptagon(n):\n    '''\n    Write a python function to return if the given number is heptagon or not\n    '''\n    return is_heptagonal(n) and is_heptagonal_triangle(n)\ndef is_octagon(n):\n    '''\n    Write a python function to return if the given number is octagon or not\n    '''\n    return is_heptagonal(n) and is_octagonal_triangle(n)\ndef is_square(n):\n    '''\n    Write a python function to return if the given number is square or not\n    '''\n    return is_square_triangle(n)\ndef is_rectangle(n):\n    '''\n    Write a python function to return if the given number is rectangle or not\n    '''\n    return is_rectangle_triangle(n)\ndef is_triangle(n):\n    '''\n    Write a python function to return if the given number is triangle or not\n    '''\n    return is_triangle(n)\ndef is_square_triangle(n):\n    '''\n    Write a python function to return if the given number is square triangle or not\n    '''\n    return is_square(n) and is_triangle(n)\ndef is_rectangle_triangle(n):\n    '''\n    Write a python function to return if the given number is rectangle triangle or not\n    '''\n    return is_rectangle(n) and is_triangle(n)\ndef is_hexagonal_triangle(n):\n    '''\n    Write a python function to return if the given number is hexagonal triangle or not\n    '''\n    return is_hexagonal(n) and is_triangle(n)\ndef is_heptagonal_triangle(n):\n    '''\n    Write a python function to return if the given number is heptagonal triangle or not\n    '''\n    return is_heptagonal(n) and is_triangle(n)\ndef is_octagonal_triangle(n):\n    '''\n    Write a python function to return if the given number is octagonal triangle or not\n    '''\n    return is_octagonal(n) and is_triangle(n)\ndef is_circle(n):\n    '''\n    Write a python function to return if the given number is circle or not\n    '''\n    return is_circle(n)\ndef is_rhom",
        "num_ids": 16
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root==int(root):\n        return (root + 1)**2\n    return -1\n",
        "num_ids": 37
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n",
        "num_ids": 19
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # print N\n    if N > 0:\n        sqrt = int(math.sqrt(N))\n        if N == sqrt * sqrt:\n            return sqrt * sqrt + 1\n        else:\n            return sqrt * sqrt + sqrt + 1\n    else:\n        return None\n",
        "num_ids": 74
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0 for i in range(n)]\n    dp[0] = arr[0]\n",
        "num_ids": 34
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # I'm assuming that the array is a bitonic sequence and contains at least 1 number. The task was to find the maximum sum of the subsequence.\n    # The key to solve this problem is that the max sum of the sequence can be obtained by the sum of the subarray that starts at the end of the array and goes upto the middle of the array. \n    # I need to make sure that the subarray has more than 1 element. \n    # Otherwise, the sum of subarray can be equal to the sum of the entire array\n    # if arr is [4,8,12,16,20,9,3,5,2,8,11,6,12,7,10,15]\n    # The subarray is [20,16,9,3,5,2]\n    # I have to sort the array and find the subarray starting at the end of the array and ending at the middle. \n    # The maximum sum of the subarray is 20+16+9+3+5+2+12 = 22\n    # the sum of the subarray is 22+16+9+3+5+2+12 = 32\n    # the sum of the entire array is 32+16+9+3+5+2+12 = 42\n    # the maximum sum of the subarray is 22+12 = 24.\n    # the sum of the subarray is 24+12 = 28\n    # the sum of the entire array is 28+12 = 36\n    # the maximum sum of the subarray is 24+12 = 28\n    # the sum of the subarray is 28+12 = 36\n    # The maximum sum of the subarray is 28+12 = 36\n    # the sum of the entire array is 36+12 = 42\n    # the maximum sum of the subarray is 28+12 = 36\n    # the sum of the entire array is 36+12 = 42\n    # the maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 42+12 = 48\n    # the maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 48+12 = 54\n    # the maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 54+12 = 60\n    # the maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 60+12 = 72\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 72+12 = 84\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 84+12 = 96\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 96+12 = 108\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 108+12 = 120\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 120+12 = 132\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 132+12 = 144\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 144+12 = 156\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 156+12 = 180\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 180+12 = 192\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 192+12 = 204\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 204+12 = 216\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 216+12 = 228\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 228+12 = 240\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 240+12 = 252\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 252+12 = 264\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 264+12 = 276\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 276+12 = 288\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 288+12 = 300\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 300+12 = 312\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 312+12 = 324\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 324+12 = 336\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 336+12 = 348\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 348+12 = 360\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 360+12 = 372\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 372+12 = 384\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 384+12 = 396\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 396+12 = 408\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 408+12 = 420\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 420+12 = 432\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 432+12 = 444\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 444+12 = 456\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 456+12 = 468\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 468+12 = 480\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 480+12 = 492\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 492+12 = 504\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 504+12 = 516\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 516+12 = 528\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 528+12 = 540\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 540+12 = 552\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 552+12 = 564\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 564+12 = 576\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 576+12 = 588\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 588+12 = 600\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 600+12 = 612\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 612+12 = 624\n    # The maximum sum of the subarray is 36+12 = 42\n    # the sum of the entire array is 624+1",
        "num_ids": 1993
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Brute force\n    # O(n**3)\n    # I am getting TLE\n    \n    # if arr is None or len(arr) == 0:\n    #     return None\n    # max_sum = -float('inf')\n    # for i in range(len(arr)):\n    #     for j in range(i+1, len(arr)):\n    #         for k in range(j+1, len(arr)):\n    #             total = sum(arr[i:k+1])\n    #             if total > max_sum:\n    #                 max_sum = total\n    \n    # return max_sum\n    \n    # Dynamic Programming\n    # O(n**2)\n    # TLE\n    \n    if arr is None or len(arr) == 0:\n        return None\n    \n    n = len(arr)\n    \n    dp = [[-float('inf') for i in range(n)] for j in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 0\n    \n    for gap in range(2, n):\n        for i in range(n-gap):\n            j = i + gap\n            for k in range(i, j):\n                dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j] + arr[i:j+1])\n    \n    return dp[0][n-1]\n",
        "num_ids": 351
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return max(arr[0] + max_sum(arr[2:]), arr[1] + max_sum(arr[3:]))\n",
        "num_ids": 71
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n    max_sum, left, right = arr[0], 1, len(arr) - 2\n    while left < right:\n        max_sum = max(max_sum, arr[left] + arr[right] + max(arr[left], arr[right]))\n        if arr[left] < arr[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_sum\n",
        "num_ids": 106
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    left = max_sum_subseq(arr, 0, -1)\n    right = max_sum_subseq(arr, 1, len(arr))\n    return max(left, right)\n",
        "num_ids": 48
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    \n    n = len(arr)\n    \n    max_sum = 0\n    max_ending_here = 0\n    \n    for i in xrange(n):\n        max_ending_here = max_ending_here + arr[i]\n        if max_sum < max_ending_here:\n            max_sum = max_ending_here\n            \n        if i >= 2 and arr[i] > arr[i-1] and arr[i] > arr[i-2]:\n            max_ending_here = 0\n            \n    return max_sum\n    \n    \ndef k_max_sum(arr, k):\n    '''\n    Write a function that takes an array and finds the maximum sum of a k-bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if k == 1:\n        return max(arr)\n    \n    if k == 2:\n        return max(max(arr[0], arr[1]), max(arr[1], arr[2]) + arr[0])\n    \n    n = len(arr)\n    \n    k_max_sum = 0\n    k_max_ending_here = 0\n    \n    for i in xrange(n):\n        k_max_ending_here = max(k_max_ending_here + arr[i], arr[i])\n        if i >= k-1:\n            if k_max_sum < k_max_ending_here:\n                k_max_sum = k_max_ending_here\n                \n        if i >= (k-2):\n            k_max_ending_here = 0\n            \n    return k_max_sum\n    \ndef max_k_sum(arr, k):\n    '''\n    Write a function that takes an array and finds the maximum sum of a k-bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if k == 1:\n        return sum(arr)\n    \n    if k == 2:\n        return max(arr[0], arr[1]) + max(arr[1], arr[2])\n    \n    n = len(arr)\n    \n    max_sum = 0\n    max_ending_here = 0\n    \n    for i in xrange(n):\n        max_ending_here = max_ending_here + arr[i]\n        if i >= (k-1):\n            if max_sum < max_ending_here:\n                max_sum = max_ending_here\n                \n        if i >= (k-2):\n            max_ending_here = 0\n            \n    return max_sum\n    \ndef max_sum_bitonic_seq(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    \n    n = len(arr)\n    \n    max_sum = 0\n    max_ending_here = 0\n    \n    for i in xrange(n):\n        max_ending_here = max(max_ending_here + arr[i], arr[i])\n        if i >= 2 and arr[i] > arr[i-1] and arr[i] > arr[i-2]:\n            max_ending_here = 0\n            \n        max_sum = max(max_sum, max_ending_here)\n            \n    return max_sum\n    \ndef max_k_sum_bitonic_seq(arr, k):\n    '''\n    Write a function that takes an array and finds the maximum sum of a k-bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if k == 1:\n        return sum(arr)\n    \n    if k == 2:\n        return max(arr[0], arr[1]) + max(arr[1], arr[2])\n    \n    n = len(arr)\n    \n    max_sum = 0\n    max_ending_here = 0\n    \n    for i in xrange(n):\n        max_ending_here = max(max_ending_here + arr[i], arr[i])\n        if i >= k-1:\n            if max_sum < max_ending_here:\n                max_sum = max_ending_here\n                \n        if i >= (k-2):\n            max_ending_here = 0\n            \n    return max_sum\n    \ndef max_sum_bitonic_seq_1d(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    \n    n = len(arr)\n    \n    max_sum = 0\n    max_ending_here = 0\n    \n    for i in xrange(n):\n        max_ending_here = max(max_ending_here + arr[i], arr[i])\n        max_sum = max(max_sum, max_ending_here)\n            \n    return max_sum\n    \ndef max_k_sum_bitonic_seq_1d(arr, k):\n    '''\n    Write a function that takes an array and finds the maximum sum of a k-bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if k == 1:\n        return sum(arr)\n    \n    if k == 2:\n        return max(arr[0], arr[1]) + max(arr[1], arr[2])\n    \n    n = len(arr)\n    \n    max_sum = 0\n    max_ending_here = 0\n    \n    for i in xrange(n):\n        max_ending_here = max(max_ending_here + arr[i], arr[i])\n        if i >= k-1:\n            if max_sum < max_ending_here:\n                max_sum = max_ending_here\n                \n        if i >= (k-2):\n            max_ending_here = 0\n            \n    return max_sum\n    \ndef max_sum_max_bitonic_seq(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    \n    n = len(arr)\n    \n    max_sum = 0\n    max_ending_here = 0\n    \n    for i in xrange(n):\n        max_ending_here = max(max_ending_here + arr[i], arr[i])\n        if i >= 2 and arr[i] > arr[i-1] and arr[i] > arr[i-2]:\n            max_ending_here = 0\n            \n        max_sum = max(max_sum, max_ending_here)\n            \n    return max_sum\n    \ndef max_k_sum_max_bitonic_seq(arr, k):\n    '''\n    Write a function that takes an array and finds the maximum sum of a k-bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if k == 1:\n        return sum(arr)\n    \n    if k == 2:\n        return max(arr[0], arr[1]) + max(arr[1], arr[2])\n    \n    n = len(arr)\n    \n    max_sum = 0\n    max_ending_here = 0\n    \n    for i in xrange(n):\n        max_endin",
        "num_ids": 94
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_ending = 0\n    max_so_far = arr[0]\n",
        "num_ids": 21
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return arr\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "num_ids": 131
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max1 = max2 = arr[0]\n        max3 = max4 = 0\n        for i in xrange(1, len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                max2 = max4\n                max4 = max1\n                max1 = arr[i]\n            elif arr[i] < arr[i + 1]:\n                max2 = max3\n                max3 = max2\n                max2 = arr[i]\n            else:\n                max2 = arr[i + 1]\n        return max(max1, max2, max3, max4)\n",
        "num_ids": 183
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    tolerance = 0.000001\n    steps = 100000\n    x = number/2\n    for i in range(0,steps):\n        y = (x + number/x) / 2\n        if abs(y - x) < tolerance:\n            return x\n        x = y\n    return x\n",
        "num_ids": 73
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    s = number\n    counter = 0\n    while True:\n        y = (s + number/s) / 2\n        if y == s:\n            break\n        s = y\n        counter += 1\n    return s, counter\n",
        "num_ids": 56
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # The beginning square root\n    guess = 1.0\n    # The square of the number\n    guess_sq = number*guess*guess\n    # The number of iterations to use\n    iterations = 0\n    # Loop until we reach the desired square root\n    while guess_sq!= number:\n        iterations += 1\n        guess = guess - (((guess*guess) - number)/(2*guess))\n        guess_sq = guess*guess\n    return guess\n",
        "num_ids": 120
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = 1\n    while (x - y > 0.001):\n        x = 0.5 * (x + y)\n        y = number / x\n    return x\n",
        "num_ids": 48
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    \n    guess = number / 2\n    difference = abs(guess - number / guess)\n    i = 0\n    \n    while difference > 0.01:\n        guess = (guess + (number / guess)) / 2\n        difference = abs(guess - number / guess)\n        i += 1\n    \n    return guess, i\n",
        "num_ids": 96
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize the variable\n    guess = number/2\n    # Initialize the counter\n    steps = 0\n    # Start looping\n    while (abs(guess*guess-number) >= 0.001):\n        guess = (guess + number/guess)/2\n        steps += 1\n    # Print the number of steps to get to the root\n    print(\"{} steps to get to the root\".format(steps))\n    return guess\n",
        "num_ids": 108
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number.\")\n    guess = number\n    while True:\n        next_guess = (guess + number/guess)/2.0\n        if abs(guess - next_guess) < 0.001:\n            return next_guess\n        guess = next_guess\n        \ndef cube_root(number):\n    '''\n    Write a function for computing cube root using the Newton method.\n    '''\n    if number < 0:\n        raise ValueError(\"Cannot compute cube root of a negative number.\")\n    guess = number\n    while True:\n        next_guess = (guess + number/guess)/2.0\n        if abs(guess - next_guess) < 0.001:\n            return next_guess\n        guess = next_guess\n        \ndef python_cube_root(number):\n    '''\n    Write a function for computing cube root using the python method.\n    '''\n    if number < 0:\n        raise ValueError(\"Cannot compute cube root of a negative number.\")\n    guess = number\n    while True:\n        next_guess = (guess + number/guess)/2.0\n        if abs(guess - next_guess) < 0.001:\n            return next_guess\n        guess = next_guess\n        \ndef absolute_error(a, b):\n    '''\n    Write a function for computing absolute error.\n    '''\n    if a < 0:\n        raise ValueError(\"Cannot compute absolute error of a negative number.\")\n    if b < 0:\n        raise ValueError(\"Cannot compute absolute error of a negative number.\")\n    return abs(a - b)\n",
        "num_ids": 57
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 1:\n        raise ValueError(\"Babylonian square root method only defined for positive numbers\")\n    guess = number/2\n    if guess * guess == number:\n        return guess\n    while abs(guess * guess - number) > 0.000001:\n        guess = (guess + (number/guess))/2\n    return guess\n",
        "num_ids": 88
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return number\n    elif number < 0:\n        return None\n    else:\n        return (number ** 0.5)\n",
        "num_ids": 39
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    for i in range(1,50):\n        if i % 2 == 0:\n            guess = (guess + number/guess)/2\n        else:\n            guess = (guess - number/guess)/2\n    return guess\n",
        "num_ids": 68
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    max_len = 1\n    start = 0\n    for i in xrange(n):\n        t1 = get_pal(str,i,i)\n        t2 = get_pal(str,i,i+1)\n        t = max(t1,t2)\n        if t > max_len:\n            max_len = t\n            start = i-t+1\n    return max_len\n",
        "num_ids": 129
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str_len = len(str)\n    # create a table to store result of subproblems\n    table = [[0 for j in range(str_len)] for i in range(str_len)]\n    for i in range(str_len):\n        # If current character is same as next character, then result is either 1 or 2,\n        # table[i][i+1] = (table[i+1][i+1] + 1) if str[i] == str[i+1]\n        # table[i][i+1] = 1\n        table[i][i] = 1\n    # Fill the table in diagonal manner.\n    # table[i][j] = table[i][j-1] if str[i] == str[j]\n    # table[i][j] = max(table[i][j], table[i+1][j-1] + 2) if str[i] == str[j]\n    for i in range(str_len - 1, -1, -1):\n        for j in range(i + 1, str_len):\n            if str[i] == str[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n    return table[0][str_len - 1]\n",
        "num_ids": 331
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #considering only the characters in the string\n    str = '#' + '#'.join(str) + '#'\n",
        "num_ids": 32
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # First, we need to check if the string is empty or not\n    if len(str) < 2:\n        return len(str)\n",
        "num_ids": 37
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1:\n        return len(str)\n",
        "num_ids": 19
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n): \n        dp[i][i] = 1\n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            dp[i][i+1] = 2\n    for sublen in range(3,n+1): \n        for i in range(n-sublen+1): \n            j = i+sublen-1\n            if str[i] == str[j] and sublen == 3: \n                dp[i][j] = 3\n            elif str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1]\n",
        "num_ids": 239
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    rows, cols = len(str), len(str) + 1\n    dp = [[0] * cols for _ in range(rows)]\n    max_length = 0\n    for i in range(rows):\n        for j in range(i, cols):\n            if i == j:\n                dp[i][j] = 1\n            elif i == j - 1:\n                if str[i] == str[j]:\n                    dp[i][j] = 2\n            elif str[i] == str[j] and i + 1 <= j - 1:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            max_length = max(max_length, dp[i][j])\n    return max_length\n",
        "num_ids": 214
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # solution 1\n    #table = [[0 for j in range(len(str))] for i in range(len(str))]\n    #for i in range(len(str)):\n    #    table[i][i] = 1\n    #    table[i][i-1] = 1 if str[i] == str[i-1] else 0\n    #for i in range(2, len(str)+1):\n    #    for j in range(len(str)-i+1):\n    #        if str[j] == str[j+i-1]:\n    #            table[j][j+i-1] = 1+table[j+1][j+i-2]\n    #        else:\n    #            table[j][j+i-1] = max(table[j][j+i-2], table[j+1][j+i-1])\n    #return table[0][len(str)-1]\n    \n    # solution 2\n    table = [[0 for j in range(len(str))] for i in range(len(str))]\n    for i in range(len(str)):\n        table[i][i] = 1\n        table[i][i-1] = 1 if str[i] == str[i-1] else 0\n    for i in range(2, len(str)):\n        for j in range(len(str)-i+1):\n            if str[j] == str[j+i-1]:\n                table[j][j+i-1] = 1+table[j+1][j+i-2]\n            else:\n                table[j][j+i-1] = max(table[j][j+i-2], table[j+1][j+i-1])\n    return table[0][len(str)-1]\n    \n    \nif __name__ == '__main__':\n    print lps('bbbab')\n    print lps('ab')\n    print lps('babcb')\n    print lps('babcbabcbabcb')",
        "num_ids": 491
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    l=len(str)\n    print 'lps ',l\n    print's ',str\n    #dp=[0 for x in range(l)]\n    #for i in range(l):\n    #    dp[i]=1\n    #for i in range(1,l):\n    #    for j in range(0,i):\n    #        if str[i]==str[j] and (i-j<2 or dp[j+1]==1):\n    #            dp[i]=1\n    #    print dp\n    #print dp\n    #return max(dp)\n    #brute force\n    #for i in range(1,l):\n    #    for j in range(0,i):\n    #        if str[i]==str[j] and (i-j<2):\n    #            print str[j:i+1]\n    #            if len(str[j:i+1])>=dp[j+1]:\n    #                dp[j+1]=len(str[j:i+1])\n    #print dp\n    #return max(dp)\n    #memoization\n    #dp=[0 for x in range(l)]\n    #for i in range(l):\n    #    dp[i]=1\n    #for i in range(1,l):\n    #    for j in range(0,i):\n    #        if str[i]==str[j] and (i-j<2 or dp[j+1]==1):\n    #            dp[i]=1\n    #    print dp\n    #print dp\n    #return max(dp)\n    #dp=[0 for x in range(l)]\n    #for i in range(l):\n    #    dp[i]=1\n    #for i in range(1,l):\n    #    for j in range(0,i):\n    #        if str[i]==str[j] and (i-j<2 or dp[j+1]==1):\n    #            dp[i]=1\n    #    print dp\n    #return max(dp)\n    dp=[0 for x in range(l)]\n    for i in range(l):\n        dp[i]=1\n    for i in range(1,l):\n        for j in range(0,i):\n            if str[i]==str[j] and (i-j<2 or dp[j+1]==1):\n                dp[i]=1\n    print dp\n    return max(dp)\n",
        "num_ids": 603
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n <= 1: return n\n",
        "num_ids": 19
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1/n + harmonic_sum(n-1)\n",
        "num_ids": 28
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    return 1/n + harmonic_sum(n-1)\n",
        "num_ids": 28
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n if n == 0 else 1/n + harmonic_sum(n-1)\n",
        "num_ids": 25
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/float(n)\n",
        "num_ids": 11
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n - 1)\n",
        "num_ids": 32
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [val for val in array_nums1 if val in array_nums2]\n",
        "num_ids": 24
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1)==0 or len(array_nums2)==0:\n        return []\n    return list(set(array_nums1)&set(array_nums2))\n    #return list(set(array_nums1).intersection(set(array_nums2)))\n",
        "num_ids": 78
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    s1 = set(array_nums1)\n    s2 = set(array_nums2)\n    return list(s1&s2)\n",
        "num_ids": 39
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n",
        "num_ids": 24
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1).intersection(set(array_nums2)))\n",
        "num_ids": 26
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    i=0\n    j=0\n    intersection_array=[]\n    while(i<len(array_nums1) and j<len(array_nums2)):\n        if(array_nums1[i]==array_nums2[j]):\n            intersection_array.append(array_nums1[i])\n            i+=1\n            j+=1\n        elif(array_nums1[i]<array_nums2[j]):\n            i+=1\n        else:\n            j+=1\n    return intersection_array\n",
        "num_ids": 158
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersect.append(num)\n    return intersect\n",
        "num_ids": 43
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = sorted(array_nums1)\n    array_nums2 = sorted(array_nums2)\n",
        "num_ids": 34
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array = []\n    for item in array_nums1:\n        if item in array_nums2:\n            intersection_array.append(item)\n    return intersection_array\n",
        "num_ids": 49
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect = []\n    for x in array_nums1:\n        if x in array_nums2:\n            intersect.append(x)\n    return intersect\n",
        "num_ids": 43
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    return tup.count(x)\n",
        "num_ids": 14
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for el in tup:\n        if el == x:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for item in tup:\n        if item == x:\n            counter +=1\n    return counter\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n",
        "num_ids": 10
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_to_return = []\n    for i in range(0,len(list)):\n        list_to_return.append(list[i-1])\n    list_to_return.append(element)\n    return list_to_return\n",
        "num_ids": 61
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    inserted_list = []\n    for index, elem in enumerate(list):\n        inserted_list.append(elem)\n        inserted_list.insert(index,element)\n    return inserted_list\n",
        "num_ids": 54
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element for x in list]\n    pass\n",
        "num_ids": 15
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in list:\n        result.append(i)\n        result.insert(0,element)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    \n    return [element]+list\n",
        "num_ids": 13
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n",
        "num_ids": 10
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    element_index = 0\n    result = []\n    while element_index < len(list):\n        result.append(list[element_index])\n        result.append(element)\n        element_index += 1\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "num_ids": 16
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "num_ids": 16
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return ((abs(numbers), cmath.phase(numbers)*180/cmath.pi),numbers.real,numbers.imag)\n",
        "num_ids": 36
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # your code goes here\n    a=numbers.real\n    b=numbers.imag\n    return [cmath.polar(complex(a,b))]\n",
        "num_ids": 42
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = abs(numbers)\n    theta = cmath.phase(numbers)\n    return (r,theta)\n",
        "num_ids": 33
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print('convert():')\n    for x in numbers:\n        print(x, '=', complex_to_polar(x))\n        \n        \ndef complex_to_polar(complex_num):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = cmath.polar(complex_num)\n    return [r[0], cmath.degrees(r[1])]\n",
        "num_ids": 35
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print ('Converting complex number to polar')\n    polar_number = (numbers.real, numbers.imag)\n    return polar_number\n",
        "num_ids": 36
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    temp = cmath.polar(complex(numbers))\n    return temp[0], temp[1]\n    \ndef convert_polar_to_cartesian(angle, length):\n    '''\n    Write a python function to convert polar coordinates to cartesian coordinates.\n    '''\n    x = length * cmath.cos(angle)\n    y = length * cmath.sin(angle)\n    return x, y\n",
        "num_ids": 34
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers) == cmath:\n        return (abs(numbers), angle(numbers))\n    elif type(numbers) == type(1j):\n        return complex(abs(numbers), angle(numbers))\n    else:\n        return complex(abs(complex(numbers[0],numbers[1])),angle(complex(numbers[0],numbers[1])))\n",
        "num_ids": 97
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    co=cmath.polar(complex(numbers[0],numbers[1]))\n    return co\n",
        "num_ids": 29
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    from cmath import phase\n    output = []\n    for i in numbers:\n        r = i.real\n        i = i.imag\n        phi = phase(i)\n        tup = (r, phi)\n        output.append(tup)\n    return output\n",
        "num_ids": 67
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if type(x) == int])\n",
        "num_ids": 21
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(1 for i in list1 if type(i)==int)\n",
        "num_ids": 21
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    return len(list(filter(lambda x: type(x) is int, list1)))\n    \ndef even_numbers(list1):\n    '''\n    Write a python function that returns a list of even numbers in a given list.\n    '''\n    \n    return list(filter(lambda x: x%2 == 0, list1))\n    \ndef max_2(list1):\n    '''\n    Write a python function that returns the max element in a given list of numbers.\n    '''\n    \n    return max(list1)\n    \ndef sum_3(list1):\n    '''\n    Write a python function that returns the sum of a given list of numbers.\n    '''\n    \n    return sum(list1)\n    \ndef max_3(list1):\n    '''\n    Write a python function that returns the max element in a given list of numbers.\n    '''\n    \n    return max(list1)\n    \ndef min_3(list1):\n    '''\n    Write a python function that returns the min element in a given list of numbers.\n    '''\n    \n    return min(list1)\n    \ndef sort_list(list1):\n    '''\n    Write a python function that returns a new list which contains all the elements of the given list in ascending order.\n    '''\n    \n    return sorted(list1)\n    \ndef sort_by_length(list1):\n    '''\n    Write a python function that returns a new list which contains all the elements of the given list in descending order based on the length of the elements.\n    '''\n    \n    return sorted(list1, key=len, reverse=True)\n    \ndef sort_by_last_letter(list1):\n    '''\n    Write a python function that returns a new list which contains all the elements of the given list in descending order based on the last letter of the elements.\n    '''\n    \n    return sorted(list1, key=lambda x: x[-1])\n    \ndef max_last_letter(list1):\n    '''\n    Write a python function that returns the max element in a given list of strings.\n    '''\n    \n    return max(list1, key=lambda x: x[-1])\n    \ndef duplicate_list(list1):\n    '''\n    Write a python function that returns a new list which contains all the duplicates elements of the given list.\n    '''\n    \n    return list(set(list1))\n    \ndef count_pairs(list1, list2, k):\n    '''\n    Write a python function that returns the number of pairs of elements that are equal to k.\n    '''\n    \n    pairs = 0\n    \n    for i in list1:\n        for j in list2:\n            if i == j:\n                if i == k:\n                    pairs += 1\n    \n    return pairs\n    \ndef convert_to_lower_case(list1):\n    '''\n    Write a python function that returns a new list with all the elements converted to lower case from the given list.\n    '''\n    \n    return [x.lower() for x in list1]\n    \ndef sort_by_length_desc(list1):\n    '''\n    Write a python function that returns a new list which contains all the elements of the given list in descending order based on the length of the elements.\n    '''\n    \n    return sorted(list1, key=len, reverse=True)\n    \ndef split_string_by_n(list1, n):\n    '''\n    Write a python function that returns a new list which contains all the substrings of the given list based on the nth character from each of the elements.\n    '''\n    \n    new_list = []\n    \n    for i in list1:\n        new_list.extend([i[n:]])\n        \n    return new_list\n    \ndef max_string_length(list1):\n    '''\n    Write a python function that returns the maximum length of a string from a given list of strings.\n    '''\n    \n    return max(list1, key=len)\n    \ndef get_index(list1, element):\n    '''\n    Write a python function that returns the index of the first occurrence of a given element in a given list.\n    '''\n    \n    return list1.index(element)\n    \ndef get_index_2(list1, element):\n    '''\n    Write a python function that returns the index of the first occurrence of a given element in a given list.\n    '''\n    \n    if element not in list1:\n        return -1\n    \n    return list1.index(element)\n    \ndef get_index_3(list1, element):\n    '''\n    Write a python function that returns the index of the first occurrence of a given element in a given list.\n    '''\n    \n    for i in range(len(list1)):\n        if list1[i] == element:\n            return i\n            \n    return -1\n    \ndef get_index_4(list1, element):\n    '''\n    Write a python function that returns the index of the first occurrence of a given element in a given list.\n    '''\n    \n    for i in range(len(list1)):\n        if list1[i] == element:\n            return i\n            \n    return -1\n    \ndef get_index_5(list1, element):\n    '''\n    Write a python function that returns the index of the first occurrence of a given element in a given list.\n    '''\n    \n    return list1.index(element)\n    \ndef get_index_6(list1, element):\n    '''\n    Write a python function that returns the index of the first occurrence of a given element in a given list.\n    '''\n    \n    if element not in list1:\n        return -1\n    \n    return list1.index(element)\n    \ndef get_index_7(list1, element):\n    '''\n    Write a python function that returns the index of the first occurrence of a given element in a given list.\n    '''\n    \n    if element not in list1:\n        return -1\n    \n    return list1.index(element)\n    \ndef remove_elements(list1, element):\n    '''\n    Write a python function that returns a new list which contains all the elements of the given list that do not contain the given element.\n    '''\n    \n    return list(filter(lambda x: x!= element, list1))\n    \ndef remove_elements_2(list1, element):\n    '''\n    Write a python function that returns a new list which contains all the elements of the given list that do not contain the given element.\n    '''\n    \n    return [x for x in list1 if x!= element]\n    \ndef sum_of_list_of_list(list1):\n    '''\n    Write a python function that returns the sum of all the elements of a given list of lists.\n    '''\n    \n    total = 0\n    \n    for i in list1:\n        total += sum(i)\n        \n    return total\n    \ndef sum_of_list_of_list_2(list1):\n    '''\n    Write a python function that returns the sum of all the elements of a given list of lists.\n    '''\n    \n    return sum(sum(i) for i in list1)\n    \ndef sum_of_list_of_list_3(list1):\n    '''\n    Write a python function that returns the sum of all the elements of a given list of lists.\n    '''\n    \n    return sum(sum(i) for i in list1)\n    \ndef sum_of_list_of_list_4(list1):\n    '''\n    Write a python function that returns the sum of all the elements of a given list of lists.\n    '''\n    \n    return sum(sum(i) for i in list1)\n    \ndef max_list_of_list(list1):\n    '''\n    Write a python function that returns the max element of all the elements of a given list of lists.\n    '''\n    \n    return max(list(max(i) for i in list1))\n    \ndef max_list_of_list_2(list1):\n    '''\n    Write a python function that returns the max element of all the elements of a given list of lists.\n    '''\n    \n    return max(max(i) for i in list1)\n    \ndef ma",
        "num_ids": 23
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([item for item in list1 if isinstance(item, int)])\n",
        "num_ids": 22
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(i.is_integer() for i in list1)\n",
        "num_ids": 19
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    i = 0\n    for e in list1:\n        if type(e) == int:\n            i += 1\n    return i\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(int(type(x) is int) for x in list1)\n",
        "num_ids": 22
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    all_combos = list(combinations_with_replacement(l, n))\n    return all_combos\n",
        "num_ids": 30
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    output = []\n    for i in range(n):\n        output.extend([combo for combo in combinations_with_replacement(l, i+1)])\n    return output\n",
        "num_ids": 46
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    nCr = []\n    for i in range(n):\n        nCr.append(combinations_with_replacement(l, i))\n    return nCr\n",
        "num_ids": 41
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in combinations_with_replacement(l,n):\n        combs.append(i)\n    return combs\n",
        "num_ids": 38
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, n):\n            result.append(j)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    import itertools\n    l2 = []\n    for i in itertools.combinations_with_replacement(l, n):\n        l2.append(i)\n    return l2\n",
        "num_ids": 49
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        return\n    else:\n        combo = []\n        for i in range(n):\n            combos = combinations_with_replacement(l, n)\n            combo.append(list(combos))\n        return combo\n",
        "num_ids": 66
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return 1 + count_Primes_nums(n-1)\n",
        "num_ids": 46
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # The first statement in an if statement will always be True, so we can simplify the code by starting with that.\n    if n < 2:\n        return 0\n    \n    # We can construct a list of prime numbers as follows\n    # 1 is not prime, so we start with 2\n    primes = [2]\n    \n    # We need to iterate from 3 onwards, since 2 is not prime\n    for i in range(3, n+1):\n        \n        # If i is not divisible by any number between 2 and i-1, i is prime\n        if all(i % x!= 0 for x in range(2, i)):\n            primes.append(i)\n    \n    # We want to return the count of the number of prime numbers we've found\n    return len(primes)\n",
        "num_ids": 191
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if type(n)!= int:\n        raise TypeError('num should be an integer')\n    if n < 0:\n        raise ValueError('num should be non-negative')\n    if n == 0 or n == 1:\n        return 0\n    else:\n        prime_nums = [2]\n        for i in range(3, n+1):\n            for j in range(0, len(prime_nums)):\n                if i % prime_nums[j] == 0:\n                    break\n                elif j == len(prime_nums)-1:\n                    prime_nums.append(i)\n        return len(prime_nums)\n",
        "num_ids": 157
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n+1):\n        if is_prime(i):\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    from math import sqrt\n    \n    isPrime = [True for _ in range(n+1)] # 0,1,2,3,4,5,...,n is all true\n    \n    for i in range(2, int(sqrt(n))+1):\n        if isPrime[i]:\n            for j in range(i*i, n+1, i):\n                isPrime[j] = False\n    \n    count = 0\n    for i in range(2,n):\n        if isPrime[i]:\n            count += 1\n    return count\n",
        "num_ids": 135
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        print(\"Error\")\n    elif n == 1:\n        return 0\n    else:\n        a = [True]*(n+1)\n        i = 2\n        while i*i <= n:\n            if a[i]:\n                for j in range(i*i, n+1, i):\n                    a[j] = False\n            i += 1\n        return sum(a)\n",
        "num_ids": 102
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(n):\n        if prime(i):\n            count+=1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #store all primes less than n as a list\n    primes = []\n    count = 0\n    for i in range(1,n+1):\n        isPrime = True\n        #only test if i is divisible by j\n        for j in primes:\n            if j > math.sqrt(i):\n                break\n            elif i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n            count+=1\n    return count\n    \n    \n    \ndef count_Primes_factors(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number, \n    divided by the given number.\n    '''\n    #store all primes less than n as a list\n    primes = []\n    count = 0\n    for i in range(1,n+1):\n        isPrime = True\n        #only test if i is divisible by j\n        for j in primes:\n            if j > math.sqrt(i):\n                break\n            elif i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n            count+=1\n    return count/n\n    \ndef sum_Primes_factors(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the sum of the prime numbers less than the given non-negative number, \n    divided by the given number.\n    '''\n    #store all primes less than n as a list\n    primes = []\n    sum = 0\n    for i in range(1,n+1):\n        isPrime = True\n        #only test if i is divisible by j\n        for j in primes:\n            if j > math.sqrt(i):\n                break\n            elif i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n            sum+=i\n    return sum/n\n    \n    \ndef print_Primes_factors(n):\n    '''\n    Write a python function that takes in a non-negative number and prints out the prime numbers less than the given non-negative number, \n    divided by the given number.\n    '''\n    #store all primes less than n as a list\n    primes = []\n    for i in range(1,n+1):\n        isPrime = True\n        #only test if i is divisible by j\n        for j in primes:\n            if j > math.sqrt(i):\n                break\n            elif i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n            print i\n            \ndef get_Primes_factors(n):\n    '''\n    Write a python function that takes in a non-negative number and returns a list of the prime numbers less than the given non-negative number, \n    divided by the given number.\n    '''\n    #store all primes less than n as a list\n    primes = []\n    for i in range(1,n+1):\n        isPrime = True\n        #only test if i is divisible by j\n        for j in primes:\n            if j > math.sqrt(i):\n                break\n            elif i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n            yield i\n            \n            \n            \n    \ndef count_Primes_digits(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number, \n    divided by the given number.\n    '''\n    #store all primes less than n as a list\n    primes = []\n    count = 0\n    for i in range(1,n+1):\n        isPrime = True\n        #only test if i is divisible by j\n        for j in primes:\n            if j > math.sqrt(i):\n                break\n            elif i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n            count+=1\n    return count/n\n    \ndef count_Primes_digits_iter(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number, \n    divided by the given number.\n    '''\n    #store all primes less than n as a list\n    primes = []\n    count = 0\n    for i in range(1,n+1):\n        isPrime = True\n        #only test if i is divisible by j\n        for j in primes:\n            if j > math.sqrt(i):\n                break\n            elif i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n            count+=1\n    return count/n\n    \ndef get_Primes_digits_iter(n):\n    '''\n    Write a python function that takes in a non-negative number and returns a list of the prime numbers less than the given non-negative number, \n    divided by the given number.\n    '''\n    #store all primes less than n as a list\n    primes = []\n    for i in range(1,n+1):\n        isPrime = True\n        #only test if i is divisible by j\n        for j in primes:\n            if j > math.sqrt(i):\n                break\n            elif i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n            yield i\n    \ndef count_Primes_digits_iter_helper(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number, \n    divided by the given number.\n    '''\n    #store all primes less than n as a list\n    primes = []\n    count = 0\n    for i in range(1,n+1):\n        isPrime = True\n        #only test if i is divisible by j\n        for j in primes:\n            if j > math.sqrt(i):\n                break\n            elif i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n            count+=1\n    return count/n\n    \ndef sum_Primes_digits_iter(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the sum of the prime numbers less than the given non-negative number, \n    divided by the given number.\n    '''\n    #store all primes less than n as a list\n    primes = []\n    sum = 0\n    for i in range(1,n+1):\n        isPrime = True\n        #only test if i is divisible by j\n        for j in primes:\n            if j > math.sqrt(i):\n                break\n            elif i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n            sum+=i\n    return sum/n\n    \n    \n    \ndef get_Primes_digits_iter_helper(n):\n    '''\n    Write a python function that takes in a non-negative number and returns a list of the prime numbers less than the given non-negative number, \n    divided by the given number.\n    '''\n    #store all primes less than n as a list\n    primes = []\n    for i in range(1,n+1):\n        isPrime = True\n        #only test if i is divisible by j\n        for j in primes:\n            if j > math.sqrt(i):\n                break\n            elif i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n            yield i\n    \ndef print_Primes_digits_iter(n):\n    '''\n    Write a python function that takes in a non-negative number and prints ou",
        "num_ids": 19
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_Prime(n):\n        '''\n        Write a python function that takes in a non-negative number and returns True if the number is prime and False otherwise.\n        '''\n        if n <= 1:\n            return False\n        elif n == 2:\n            return True\n        elif n > 2 and n % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(n**0.5)+1, 2):\n                if n % i == 0:\n                    return False\n            return True\n",
        "num_ids": 85
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<0:\n        return 0\n    if n<2:\n        return 0\n    prime_num_count = 0\n    for i in range(2, n+1):\n        if i%2 == 1 and i%3 == 0:\n            continue\n        if is_Prime(i):\n            prime_num_count += 1\n    return prime_num_count\n",
        "num_ids": 90
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    t = (b,a)\n    return t\ndef add_string(a,b):\n    '''\n    Write a function that takes in two strings and returns a tuple with the two strings joined together.\n    '''\n    t = (b + a)\n    return t\ndef middle_word(a):\n    '''\n    Write a function that takes in a string and returns the middle word of the string.\n    '''\n    m = len(a)\n    t = (a[(m/2) -1: m/2])\n    return t\ndef get_vowels(a):\n    '''\n    Write a function that takes in a string and returns the number of vowels in the string.\n    '''\n    v = 0\n    b = ('a','e','i','o','u')\n    for x in a:\n        if x in b:\n            v = v + 1\n    return v\ndef get_consonants(a):\n    '''\n    Write a function that takes in a string and returns the number of consonants in the string.\n    '''\n    c = 0\n    b = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n    for x in a:\n        if x not in b:\n            c = c + 1\n    return c\ndef get_spaces(a):\n    '''\n    Write a function that takes in a string and returns the number of spaces in the string.\n    '''\n    s = 0\n    b = (' ')\n    for x in a:\n        if x in b:\n            s = s + 1\n    return s\ndef get_caps(a):\n    '''\n    Write a function that takes in a string and returns the number of uppercase and lowercase letters in the string.\n    '''\n    u = 0\n    l = 0\n    for x in a:\n        if x.isupper():\n            u = u + 1\n        elif x.islower():\n            l = l + 1\n    return (u,l)\ndef get_count(a):\n    '''\n    Write a function that takes in a string and returns a tuple with the number of uppercase, lowercase and spaces in the string.\n    '''\n    u = 0\n    l = 0\n    s = 0\n    for x in a:\n        if x.isupper():\n            u = u + 1\n        elif x.islower():\n            l = l + 1\n        elif x.isspace():\n            s = s + 1\n    t = (u,l,s)\n    return t\ndef reverse_string(a):\n    '''\n    Write a function that takes in a string and returns the string backwards.\n    '''\n    b = a[::-1]\n    return b\ndef count_vowels(a):\n    '''\n    Write a function that takes in a string and returns the number of vowels in the string.\n    '''\n    v = 0\n    b = ('a','e','i','o','u')\n    for x in a:\n        if x in b:\n            v = v + 1\n    return v\ndef count_consonants(a):\n    '''\n    Write a function that takes in a string and returns the number of consonants in the string.\n    '''\n    c = 0\n    b = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n    for x in a:\n        if x not in b:\n            c = c + 1\n    return c\ndef count_spaces(a):\n    '''\n    Write a function that takes in a string and returns the number of spaces in the string.\n    '''\n    s = 0\n    b = (' ')\n    for x in a:\n        if x in b:\n            s = s + 1\n    return s\ndef count_caps(a):\n    '''\n    Write a function that takes in a string and returns the number of uppercase and lowercase letters in the string.\n    '''\n    u = 0\n    l = 0\n    for x in a:\n        if x.isupper():\n            u = u + 1\n        elif x.islower():\n            l = l + 1\n    return (u,l)\ndef remove_spaces(a):\n    '''\n    Write a function that takes in a string and returns the string with all spaces removed.\n    '''\n    b = ''\n    for x in a:\n        if x not in (' '):\n            b = b + x\n    return b\ndef remove_vowels(a):\n    '''\n    Write a function that takes in a string and returns the string with all vowels removed.\n    '''\n    b = ''\n    b = a.replace('a',' ').replace('e',' ').replace('i',' ').replace('o',' ').replace('u',' ')\n    b = b.replace(' ','')\n    return b\ndef remove_consonants(a):\n    '''\n    Write a function that takes in a string and returns the string with all consonants removed.\n    '''\n    b = ''\n    b = a.replace('b',' ').replace('c',' ').replace('d',' ').replace('f',' ').replace('g',' ').replace('h',' ').replace('j',' ').replace('k',' ').replace('l',' ').replace('m',' ').replace('n',' ').replace('p',' ').replace('q',' ').replace('r',' ').replace('s',' ').replace('t',' ').replace('v',' ').replace('w',' ').replace('x',' ').replace('y',' ').replace('z',' ')\n    b = b.replace(' ','')\n    return b\ndef make_title(a):\n    '''\n    Write a function that takes in a string and returns the string title-cased.\n    '''\n    b = ''\n    for x in a:\n        if x.islower():\n            b = b + x.upper()\n        else:\n            b = b + x\n    return b\ndef alternate_vowels(a):\n    '''\n    Write a function that takes in a string and returns a string with all vowels replaced by '*' and all consonants replaced by '#'.\n    '''\n    b = ''\n    b = a.replace('a','*').replace('e','*').replace('i','*').replace('o','*').replace('u','*')\n    b = b.replace('b','#').replace('c','#').replace('d','#').replace('f','#').replace('g','#').replace('h','#').replace('j','#').replace('k','#').replace('l','#').replace('m','#').replace('n','#').replace('p','#').replace('q','#').replace('r','#').replace('s','#').replace('t','#').replace('v','#').replace('w','#').replace('x','#').replace('y','#').replace('z','#')\n    return b\ndef is_palindrome(a):\n    '''\n    Write a function that takes in a string and returns a Boolean indicating whether the string is a palindrome.\n    '''\n    b = ''\n    b = a[::-1]\n    if a == b:\n        return True\n    else:\n        return False\ndef is_palindrome_sentence(a):\n    '''\n    Write a function that takes in a string and returns a Boolean indicating whether the string is a palindrome.\n    '''\n    b = ''\n    b = a[::-1]\n    if a == b:\n        return True\n    else:\n        return False\ndef is_palindrome_sentence_iterative(a):\n    '''\n    Write a function that takes in a string and returns a Boolean indicating whether the string is a palindrome.\n    '''\n    i = 0\n    j = len(a) - 1\n    while i <= j:\n        if a[i] == a[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\ndef is_palindrome_sentence",
        "num_ids": 71
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n",
        "num_ids": 25
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n",
        "num_ids": 10
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    sorted_tup1 = sorted(test_tup1, reverse=True)\n    sorted_tup2 = sorted(test_tup2, reverse=True)\n    \n    index1 = 0\n    index2 = 0\n    result = 0\n    while index1 < len(sorted_tup1) and index2 < len(sorted_tup2):\n        if sorted_tup1[index1] > sorted_tup2[index2]:\n            result += sorted_tup1[index1]\n            index1 += 1\n        else:\n            result += sorted_tup2[index2]\n            index2 += 1\n    \n    while index1 < len(sorted_tup1):\n        result += sorted_tup1[index1]\n        index1 += 1\n    \n    while index2 < len(sorted_tup2):\n        result += sorted_tup2[index2]\n        index2 += 1\n    \n    return result\n",
        "num_ids": 233
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a_list = [x for x in test_tup1 if x in test_tup2]\n    b_list = [x for x in test_tup2 if x not in test_tup1]\n    a_list.extend(b_list)\n    return a_list\n",
        "num_ids": 72
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return max_element(test_tup1, test_tup2)\n    else:\n        return max_element(test_tup2, test_tup1)\n",
        "num_ids": 64
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1.sort()\n    test_tup2.sort()\n    test_tup1.reverse()\n    test_tup2.reverse()\n    return test_tup1 + test_tup2\n",
        "num_ids": 56
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # t1_sum = sum(test_tup1)\n    # t2_sum = sum(test_tup2)\n    # if t1_sum < t2_sum:\n    #     return test_tup2\n    # elif t1_sum > t2_sum:\n    #     return test_tup1\n    # else:\n    #     return (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n",
        "num_ids": 131
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    final_tup = ()\n    if not test_tup1:\n        return test_tup2\n    if not test_tup2:\n        return test_tup1\n",
        "num_ids": 46
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n",
        "num_ids": 43
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(zip(test_tup1,test_tup2))\n",
        "num_ids": 21
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = 0\n    for x in test_tup1:\n        for y in test_tup2:\n            if x > y:\n                max_val += 1\n    return max_val\n",
        "num_ids": 51
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(max(test_tup1, test_tup2, key=lambda x: x[1])[0] for test_tup1, test_tup2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 60
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return None\n    if n % 3 == 0:\n        return None\n    if n % 5 == 0:\n        return None\n    l = [2, 3, 5]\n    for i in xrange(3, n):\n        a = l[0] + (l[1]-l[0]) * (i-1)\n        if isPrime(a):\n            l.append(a)\n    return l[-1]\n",
        "num_ids": 145
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    primes = {}\n    \n    def is_prime(n):\n        '''\n        Return True if n is prime\n        '''\n        \n        if n in primes:\n            return primes[n]\n        \n        if n == 2:\n            return True\n        \n        if n % 2 == 0:\n            return False\n        \n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        \n        primes[n] = True\n        return True\n    \n    def find_next_prime(n):\n        '''\n        Return the next prime after n\n        '''\n        \n        if n % 2 == 0:\n            n += 1\n        \n        while not is_prime(n):\n            n += 2\n        \n        return n\n    \n    def newman_williams_prime(n):\n        '''\n        Return the nth prime number\n        '''\n        \n        if n == 1:\n            return 2\n        \n        primes = [2, 3]\n        \n        for i in range(4, n+1):\n            primes.append(find_next_prime(primes[-1]))\n        \n        return primes[-1]\n    \n    return newman_williams_prime(n)\n",
        "num_ids": 89
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    n = abs(n)\n    while True:\n        if is_prime(i) == True:\n            if i > n:\n                return i\n            i += 1\n        else:\n            i += 1\n",
        "num_ids": 57
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n%2 == 0:\n        return 2*newman_prime(n//2)\n    if n%3 == 0:\n        return 3*newman_prime(n//3)\n    if n%5 == 0:\n        return 5*newman_prime(n//5)\n    return newman_prime(n-1)\n",
        "num_ids": 116
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return 2 + 3*(1+1/4)*n - 1/4*n**2 + 1/8*n**4 - 1/n**3\n",
        "num_ids": 39
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Newman\u2013Shanks\u2013Williams iteration\n",
        "num_ids": 12
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    \n    a = random.randint(2, n-1)\n    x = pow(a, (n-1)//2, n)\n    if x == 1:\n        return n\n    else:\n        i = 1\n        while i < n:\n            x = pow(x, 2, n)\n            if x == 1:\n                return n\n            i += 1\n        raise Exception('Should not reach here')\n",
        "num_ids": 113
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    arr = [True] * n\n    arr[0] = arr[1] = False\n    for i in range(2,int(n**0.5) + 1):\n        if arr[i]:\n            arr[i*i:n:i] = [False] * len(arr[i*i:n:i])\n    return [i for i in range(len(arr)) if arr[i]]\n",
        "num_ids": 99
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return newman_williams(n, 2)\n    \n    \ndef newman_williams(n, p): \n    '''\n    Use the algorithm of Eppstein's, with a twist. \n    '''\n    #the algorithm starts by taking an odd prime p and\n    #checking that p is a factor of the number n.\n    #Since the newman\u2013shanks\u2013williams primality is only\n    #established for positive numbers, p must be prime.\n    if not is_prime(p): return -1\n    \n    #Next we need to make sure that n is a multiple of p. \n    #This is achieved by taking the next prime greater than n/p, and\n    #doing the same check. \n    q = (n // p) * p\n    while not is_prime(q): q = q + p\n    \n    #Now we have a multiple of p greater than or equal to n, and\n    #a prime greater than or equal to p. \n    \n    #Now we need to find the number of the iterations to make n\n    #divisible by p, which is equivalent to finding how many \n    #multiples of p we need to get n to divide into. \n    iterations = n // p\n    \n    #We now need to find the number of multiples of p \n    #greater than or equal to n. \n    l = p\n    while l < n: l = l * p\n    \n    #Now we have a multiple of p greater than or equal to n,\n    #and a number of multiples of p greater than or equal to n. \n    \n    #We now have to divide n by p-1, and find the number of \n    #iterations required to do so. \n    div, mod = divmod(n, p - 1)\n    \n    #Now we know how many multiples of p we need to get n to\n    #divide into, and how many multiples we need to get n to\n    #divide into by p-1. \n    \n    #We also know that there are at most (n/p) multiples of p\n    #greater than or equal to n, so we want to start by finding \n    #the number of multiples of p greater than or equal to n/p. \n    iterations = div\n    \n    #We now know the number of multiples of p greater than or\n    #equal to n/p, so we can now check for multiples of p\n    #greater than or equal to n/p. \n    for i in range(1, iterations): \n        #if we get to an even number of multiples of p, then\n        #we know that the number of multiples of p greater than\n        #or equal to n/p is the prime divisor of n. \n        if (n % (p * i)) == 0: \n            return i * p\n    \n    #If we don't get to an even number of multiples of p, then\n    #there are some numbers of p greater than or equal to n/p \n    #that divide n evenly. We can pick one of these numbers to \n    #give us the prime divisor of n. \n    \n    #We now know that the number of multiples of p greater than\n    #or equal to n/p is at least as big as the prime divisor of\n    #n, so we can just return the prime divisor of n. \n    return p\n    \n    \ndef is_prime(n): \n    '''\n    This function takes an integer and returns True if it is\n    a prime number, and False if it is not.\n    '''\n    if n == 2: return True\n    if n < 2 or not n % 2: return False\n    for k in range(3, int(n**0.5)+1, 2):\n        if not n % k: return False\n    return True\n    \n    \ndef bezout_coefficients(a, b):\n    '''\n    Write a function to find the Bezout coefficients for two numbers\n    (a, b) by using the algorithm of Bezout. \n    '''\n    x, xx, y, yy = 1, 0, 0, 1\n    while b:\n        q = a // b\n        a, b = b, a % b\n        x, xx = xx, x - xx*q\n        y, yy = yy, y - yy*q\n    return (x, y)\n    \n    \ndef bezout_p(a, b, p): \n    '''\n    Find the modular inverse of a modulo p using the \n    algorithm of Bezout. \n    '''\n    x, xx, y, yy = 1, 0, 0, 1\n    while b:\n        q = a // b\n        a, b = b, a % b\n        x, xx = xx, x - xx*q\n        y, yy = yy, y - yy*q\n    return (x % p)\n    \n    \ndef bezout_p_coefficients(a, b, p):\n    '''\n    Find the Bezout coefficients for a modulo p using the\n    algorithm of Bezout. \n    '''\n    x, xx, y, yy = 1, 0, 0, 1\n    while b:\n        q = a // b\n        a, b = b, a % b\n        x, xx = xx, x - xx*q\n        y, yy = yy, y - yy*q\n    return (x, y)\n    \n    \ndef bezout_p_coefficients_z(a, b, p): \n    '''\n    Find the Bezout coefficients for a modulo p using the\n    algorithm of Bezout. \n    '''\n    x, xx, y, yy = 1, 0, 0, 1\n    while b:\n        q = a // b\n        a, b = b, a % b\n        x, xx = xx, (x - xx*q) % p\n        y, yy = yy, (y - yy*q) % p\n    return (x, y)\n    \n    \ndef bezout_p_coefficients_n(a, b, p): \n    '''\n    Find the Bezout coefficients for a modulo p using the\n    algorithm of Bezout. \n    '''\n    x, xx, y, yy = 1, 0, 0, 1\n    while b:\n        q = a // b\n        a, b = b, a % b\n        x, xx = xx, (xx - q*x) % p\n        y, yy = yy, (yy - q*y) % p\n    return (x, y)\n    \n    \ndef bezout_p_coefficients_n_z(a, b, p): \n    '''\n    Find the Bezout coefficients for a modulo p using the\n    algorithm of Bezout. \n    '''\n    x, xx, y, yy = 1, 0, 0, 1\n    while b:\n        q = a // b\n        a, b = b, a % b\n        x, xx = xx, (xx - q*x) % p\n        y, yy = yy, (yy - q*y) % p\n    return (x, y)\n    \n    \ndef mod_inv(a, m): \n    '''\n    This function takes an integer a modulo m, and returns\n    the modular inverse of a modulo m. \n    '''\n    if a < 0: return (-a % m)\n    if a == 0: return 0\n    if a > m: return -1\n    x, xx, y, yy = 1, 0, 0, 1\n    while m:\n        q = a // m\n        a, m = m, a % m\n        x, xx = xx, x - xx*q\n        y, yy = yy, y - yy*q\n    return x % m\n    \n    \ndef mod_inv_z(a, m): \n    '''\n    This function takes an integer a modulo m, and returns\n    the modular inverse of a modulo m. \n    '''\n    if a < 0: return (-a % m)\n    if a == 0: return 0\n    if a > m: return -1\n    x, xx, y, yy = 1, 0, 0, 1\n    while m:\n        q = a // ",
        "num_ids": 63
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert n > 0 and type(n) is int\n    if n == 1: return 2\n    def is_prime(x):\n        if x == 2: return True\n        if x % 2 == 0: return False\n        for i in range(3, int(x**0.5)+1, 2):\n            if x % i == 0: return False\n        return True\n    if is_prime(n): return n\n    a, x, s, d = 1, 0, 0, 1\n    while d == 1:\n        x = (a * x + 1) % n\n        d = gcd(x - s, n)\n        s = x\n    return s\n",
        "num_ids": 159
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    ans = []\n    for i, j in zip(test_tup1, test_tup2):\n        ans.append(i/j)\n    return tuple(ans)\n",
        "num_ids": 45
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #print test_tup1, test_tup2\n",
        "num_ids": 17
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a/b for a,b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = tuple([])\n    for i in range(len(test_tup1)):\n        result = result + ((test_tup1[i] / test_tup2[i]), )\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            try:\n                print(test_tup1[i] / test_tup2[i])\n            except ZeroDivisionError:\n                print('division by zero')\n            except IndexError:\n                print('out of range')\n            except TypeError:\n                print('invalid input')\n    else:\n        print('length not equal')\n",
        "num_ids": 119
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple((i / j) for i, j in zip(test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print \"Running division_elements function\"\n    list_to_tuple = []\n    for i in test_tup1:\n        new_item = (i/test_tup2[0])\n        list_to_tuple.append(new_item)\n    print \"Returning tuple: \", list_to_tuple\n    return list_to_tuple\n",
        "num_ids": 90
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #TODO - 1 - Find the length of the first tuple\n    len1 = len(test_tup1)\n    #TODO - 2 - Find the length of the second tuple\n    len2 = len(test_tup2)\n    #TODO - 3 - Find the minimum length of both tuples\n    min_length = min(len1, len2)\n    #TODO - 4 - Initialize the new tuple\n    new_tup = ()\n    #TODO - 5 - Loop over the length of the new tuple\n    for i in range(0, min_length):\n        #TODO - 6 - Compute the new tuple element-wise using the given formula\n        new_tup += (test_tup1[i]/test_tup2[i],)\n    #TODO - 7 - Return the new tuple\n    return new_tup\n",
        "num_ids": 210
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    divisor = test_tup1[1] / test_tup2[1]\n    multiplier = test_tup1[0] / test_tup2[0]\n    return (multiplier, divisor)\n",
        "num_ids": 58
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def division_elements(test_tup1, test_tup2):\n        return tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    return division_elements(test_tup1, test_tup2)\n",
        "num_ids": 69
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1 = list1[L:]\n    list2 = list1[:L]\n    return list2, list1\n",
        "num_ids": 31
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n",
        "num_ids": 16
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split1 = list1[:L]\n    split2 = list1[L:]\n    return (split1, split2)\n",
        "num_ids": 33
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    l1 = []\n    l2 = []\n    for i in list1:\n        if len(l1) < L:\n            l1.append(i)\n        else:\n            l2.append(i)\n    return l1, l2\n",
        "num_ids": 63
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #print len(list1)\n    l1 = []\n    l2 = []\n    i = 0\n    while i < L:\n        l1.append(list1[i])\n        i = i + 1\n    i = i + 1\n    while i < len(list1):\n        l2.append(list1[i])\n        i = i + 1\n    return (l1,l2)\n",
        "num_ids": 100
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[i:i + L] for i in range(0, len(list1), L)]\n    \ndef sum_two_lists(list1, list2):\n    '''\n    Write a function that takes in two lists and returns the sum of the two lists.\n    '''\n    return [list1[i] + list2[i] for i in range(len(list1))]\n    \ndef count_vowels(string):\n    '''\n    Write a function that takes in a string and returns a list of the number of vowels (aeiouAEIOU) in the string.\n    '''\n    return [string.count(i) for i in 'aeiouAEIOU' if i in string]\n    \ndef count_consonants(string):\n    '''\n    Write a function that takes in a string and returns a list of the number of consonants (qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM) in the string.\n    '''\n    return [string.count(i) for i in 'qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM' if i in string]\n    \ndef nth_letter(string, n):\n    '''\n    Write a function that takes in a string and an integer n and returns the nth letter of the string.\n    '''\n    return string[n]\n    \ndef mix_up(string1, string2):\n    '''\n    Write a function that takes in two strings and returns a string that is the first string mixed up with the second string.\n    '''\n    return string1[:2] + string2[2:] + string1[2:] + string2[:2]\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function that takes in a list and removes any duplicate elements from the list.\n    '''\n    return [list1[i] for i in range(len(list1)) if list1[i] not in list1[i + 1:]]\n    \ndef largest_number(list1):\n    '''\n    Write a function that takes in a list of strings and returns the largest string in the list.\n    '''\n    return max(list1, key=len)\n    \ndef list_to_string(list1):\n    '''\n    Write a function that takes in a list of strings and returns a single string that is the concatenation of all the strings in the list.\n    '''\n    return ''.join(list1)\n    \ndef anagrams(list1, list2):\n    '''\n    Write a function that takes in two lists and returns True if they are anagrams of each other and False otherwise.\n    '''\n    return sorted(list1) == sorted(list2)\n    \ndef palindrome(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    return string == string[::-1]\n    \ndef roman_to_int(string):\n    '''\n    Write a function that takes in a Roman numeral string and returns the integer equivalent.\n    '''\n    val = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n    return sum([val[string[i]] for i in range(len(string)) if val[string[i]] >= val[string[i - 1]]])\n    \ndef int_to_roman(num):\n    '''\n    Write a function that takes in an integer and returns the Roman numeral equivalent.\n    '''\n    str1 = \"\"\n    list1 = ['I','X','C','M']\n    for i in range(3,-1,-1):\n        while num >= list1[i]:\n            num -= list1[i]\n            str1 += list1[i]\n    return str1\n    \ndef find_duplicates(list1):\n    '''\n    Write a function that takes in a list and returns a list of all the duplicate values in the list.\n    '''\n    return [i for i in list1 if list1.count(i) > 1]\n    \ndef find_smallest(list1):\n    '''\n    Write a function that takes in a list and returns the smallest integer in the list.\n    '''\n    return min(list1)\n    \ndef find_largest(list1):\n    '''\n    Write a function that takes in a list and returns the largest integer in the list.\n    '''\n    return max(list1)\n    \ndef find_sum(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all the integers in the list.\n    '''\n    return sum(list1)\n    \ndef find_product(list1):\n    '''\n    Write a function that takes in a list and returns the product of all the integers in the list.\n    '''\n    return reduce(lambda x,y: x * y, list1)\n    \ndef split_number(n):\n    '''\n    Write a function that takes in a string and returns a list of two strings. The first string in the list is the number before the decimal point and the second string is the number after the decimal point.\n    '''\n    return [n[:n.find('.')], n[n.find('.') + 1:]]\n    \ndef sum_digits(n):\n    '''\n    Write a function that takes in a number and returns the sum of the digits in the number.\n    '''\n    return sum(int(i) for i in str(n))\n    \ndef order(string):\n    '''\n    Write a function that takes in a string and returns a list of two strings. The first string is the number before the comma and the second string is the number after the comma.\n    '''\n    return [string[:string.find(',')], string[string.find(',') + 1:]]\n    \ndef max_digit(n):\n    '''\n    Write a function that takes in a string and returns the maximum integer in the string.\n    '''\n    return max([int(i) for i in str(n)])\n    \ndef unique_words(string):\n    '''\n    Write a function that takes in a string and returns a list of all the unique words in the string.\n    '''\n    return set([i for i in string.split() if string.count(i) == 1])\n    \ndef contains_a_or_an(string):\n    '''\n    Write a function that takes in a string and returns True if the string contains a lowercase 'a' or 'an', otherwise returns False.\n    '''\n    return any([i for i in string.split() if i == 'a' or i == 'an'])\n    \ndef contains_punctuation(string):\n    '''\n    Write a function that takes in a string and returns True if the string contains a punctuation mark, False otherwise.\n    '''\n    return any([i in string for i in ',.?!;'])\n    \ndef count_consonants(string):\n    '''\n    Write a function that takes in a string and returns a list of the number of consonants (qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM) in the string.\n    '''\n    return [string.count(i) for i in 'qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM' if i in string]\n    \ndef reverse(string):\n    '''\n    Write a function that takes in a string and returns the string reversed.\n    '''\n    return string[::-1]\n    \ndef count_vowels(string):\n    '''\n    Write a function that takes in a string and returns a list of the number of vowels (aeiouAEIOU) in the string.\n    '''\n    return [string.count(i) for i in 'aeiouAEIOU' if i in string]\n    \ndef add_spaces(string):\n    '''\n    Write a function that takes in a string and returns a string with the first and last characters replaced with a space.\n    '''\n    return string[0] + ",
        "num_ids": 10
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = list1[L:]\n    list1 = list1[:L]\n    return (list1, list2)\n",
        "num_ids": 33
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        return None\n    elif h_age <= 2:\n        return 0\n    elif h_age <= 4:\n        return 1\n    elif h_age <= 6:\n        return 2\n    elif h_age <= 8:\n        return 3\n    elif h_age <= 10:\n        return 4\n    elif h_age <= 12:\n        return 5\n    elif h_age <= 14:\n        return 6\n    elif h_age <= 16:\n        return 7\n    elif h_age <= 18:\n        return 8\n    elif h_age <= 20:\n        return 9\n    elif h_age <= 22:\n        return 10\n    elif h_age <= 24:\n        return 11\n    else:\n        return 12\n",
        "num_ids": 191
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7.5\n    ",
        "num_ids": 13
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print 'Error: Please enter a valid age.'\n    else:\n        d_age = h_age * 7\n        return d_age\n        \ndef dog_weight(h_weight):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    if h_weight < 0:\n        print 'Error: Please enter a valid weight in pounds'\n    else:\n        d_weight = h_weight * 0.375\n        return d_weight\n        \ndef dog_height(h_height):\n    '''\n    Write a function to calculate a dog's height in inches.\n    '''\n    if h_height < 0:\n        print 'Error: Please enter a valid height in inches'\n    else:\n        d_height = h_height * 2.54\n        return d_height\n        \ndef dog_size(d_size):\n    '''\n    Write a function to calculate a dog's size in inches.\n    '''\n    if d_size < 0:\n        print 'Error: Please enter a valid size in inches'\n    else:\n        d_size = d_size * 0.3937\n        return d_size\n",
        "num_ids": 49
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n",
        "num_ids": 39
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age < 0:\n        return\n    elif h_age == 1:\n        return 0\n    elif h_age == 2:\n        return 5\n    elif h_age == 3:\n        return 10\n    elif h_age == 4:\n        return 15\n    elif h_age == 5:\n        return 20\n    elif h_age == 6:\n        return 25\n    elif h_age >= 7:\n        return 30\n",
        "num_ids": 114
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 7\n    if years < 2:\n        return \"I'm a baby\"\n    elif years >= 2 and years < 4:\n        return \"I'm a toddler\"\n    elif years >= 4 and years < 13:\n        return \"I'm a kid\"\n    elif years >= 13 and years < 20:\n        return \"I'm a teenager\"\n    elif years >= 20 and years < 65:\n        return \"I'm an adult\"\n    else:\n        return \"I'm an elder\"\n",
        "num_ids": 124
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(((h_age * 7) - 5) / 4)\n",
        "num_ids": 20
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split_helper(S, n, out, i):\n        if i == len(S):\n            return out\n        out.append(S[i])\n        i += n\n        return list_split_helper(S, n, out, i)\n    return list_split_helper(S, step, [], 0)\n",
        "num_ids": 84
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not S or not isinstance(S, list) or not isinstance(step, int):\n        return None\n    if not step:\n        return S\n    res = []\n    for i in range(0, len(S), step):\n        res.append(S[i:i+step])\n    return res\n",
        "num_ids": 77
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) == 1:\n        return [S]\n    else:\n        return [S[i::step] for i in range(step)]\n",
        "num_ids": 39
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    i = 0\n    while i < len(S):\n        new_list.append(S[i:i+step])\n        i = i + step\n    return new_list\n",
        "num_ids": 52
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    i = 0\n    result = []\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateral = l * l * 6\n    print lateral\n",
        "num_ids": 16
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side = l\n    volume = side**3\n    area = 6*(side**2)\n    return volume, area\n",
        "num_ids": 31
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l=int(l)\n    a=l*l*6\n    print(\"The lateral surface area of a cube with a side length of %i is %i square units.\" %(l,a))\n    \ndef lateralsurface_rectangle(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its base and height.\n    '''\n    l=int(l)\n    b=int(b)\n    a=l*b\n    print(\"The lateral surface area of a rectangle with a base of %i and height of %i is %i square units.\" %(l,b,a))\n    \ndef lateralsurface_trapezium(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area of a trapezium given its bases, height, and half-lengths.\n    '''\n    l1=int(l1)\n    l2=int(l2)\n    h=int(h)\n    a=(l1+l2)*h/2\n    print(\"The lateral surface area of a trapezium with bases of %i and %i and a height of %i is %i square units.\" %(l1,l2,h,a))\n    \ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given its radius.\n    '''\n    r=int(r)\n    a=3.14*r*r\n    print(\"The lateral surface area of a circle with a radius of %i is %i square units.\" %(r,a))\n",
        "num_ids": 50
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateralSurface(side):\n        return side**2\n",
        "num_ids": 17
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    return 6*l\n",
        "num_ids": 12
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    import math\n    \n    area = 6 * math.sqrt(3) * (l**2)\n    return area\n    \n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    \n    import math\n    \n    area = (4 * math.pi * (r**2))\n    return area\n    \n    \ndef volumesurface_cube(l):\n    '''\n    Write a function to find the volume surface area of a cube given its side length.\n    '''\n    \n    import math\n    \n    area = 6 * (l**2)\n    return area\n    \n    \ndef volumesurface_sphere(r):\n    '''\n    Write a function to find the volume surface area of a sphere given its radius.\n    '''\n    \n    import math\n    \n    area = (4 * math.pi * (r**2))\n    return area\n    \n    \ndef volumetop_cube(l, h):\n    '''\n    Write a function to find the volume top of a cube given its side length and height.\n    '''\n    \n    import math\n    \n    area = (l**2) * h\n    return area\n    \n    \ndef volumetop_sphere(r, h):\n    '''\n    Write a function to find the volume top of a sphere given its radius and height.\n    '''\n    \n    import math\n    \n    area = (4 * math.pi * (r**2)) * h\n    return area\n    \n    \ndef volumebot_cube(l, h):\n    '''\n    Write a function to find the volume bottom of a cube given its side length and height.\n    '''\n    \n    import math\n    \n    area = (l**2) * h\n    return area\n    \n    \ndef volumebot_sphere(r, h):\n    '''\n    Write a function to find the volume bottom of a sphere given its radius and height.\n    '''\n    \n    import math\n    \n    area = (4 * math.pi * (r**2)) * h\n    return area\n    \n    \ndef area_rectangle(l, b):\n    '''\n    Write a function to find the area of a rectangle given its length and breadth.\n    '''\n    \n    import math\n    \n    area = l * b\n    return area\n    \n    \ndef area_triangle(b, h):\n    '''\n    Write a function to find the area of a triangle given its base and height.\n    '''\n    \n    import math\n    \n    area = (1/2) * b * h\n    return area\n    \n    \ndef area_trapezoid(a, b, h):\n    '''\n    Write a function to find the area of a trapezoid given its base, height and a/b ratio.\n    '''\n    \n    import math\n    \n    area = ((1/2) * (a + b)) * h\n    return area\n    \n    \ndef area_rhombus(b, h):\n    '''\n    Write a function to find the area of a rhombus given its base and height.\n    '''\n    \n    import math\n    \n    area = (1/2) * b * h\n    return area\n    \n    \ndef area_parallelogram(b, h):\n    '''\n    Write a function to find the area of a parallelogram given its base and height.\n    '''\n    \n    import math\n    \n    area = b * h\n    return area\n    \n    \ndef area_square(a):\n    '''\n    Write a function to find the area of a square given its side length.\n    '''\n    \n    import math\n    \n    area = a**2\n    return area\n    \n    \ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle given its radius.\n    '''\n    \n    import math\n    \n    area = (math.pi * (r**2))\n    return area\n    \n    \ndef area_ellipse(a, b):\n    '''\n    Write a function to find the area of an ellipse given its semi-major and semi-minor axis lengths.\n    '''\n    \n    import math\n    \n    area = (1/2) * math.pi * (a * b)\n    return area\n    \n    \ndef area_conic(a, b):\n    '''\n    Write a function to find the area of a conic given its major and minor axis lengths.\n    '''\n    \n    import math\n    \n    area = (1/2) * math.pi * (a**2) * (b**2)\n    return area\n    \n    \ndef area_rhombus_tr(b, h):\n    '''\n    Write a function to find the area of a rhombus given its base and height.\n    '''\n    \n    import math\n    \n    area = (1/2) * b * h\n    return area\n    \n    \ndef area_hexagon(r):\n    '''\n    Write a function to find the area of a hexagon given its side length.\n    '''\n    \n    import math\n    \n    area = (1/2) * math.sqrt(3) * (r**2)\n    return area\n    \n    \ndef area_octagon(r):\n    '''\n    Write a function to find the area of a octagon given its side length.\n    '''\n    \n    import math\n    \n    area = (2/3) * math.sqrt(2) * (r**2)\n    return area\n    \n    \ndef area_octagon_tr(r):\n    '''\n    Write a function to find the area of a octagon given its side length.\n    '''\n    \n    import math\n    \n    area = (2/3) * r\n    return area\n    \n    \ndef area_nonagon(r):\n    '''\n    Write a function to find the area of a nonagon given its side length.\n    '''\n    \n    import math\n    \n    area = (1/2) * math.sqrt(2) * (r**2)\n    return area\n    \n    \ndef area_nonagon_tr(r):\n    '''\n    Write a function to find the area of a nonagon given its side length.\n    '''\n    \n    import math\n    \n    area = (1/2) * math.sqrt(2) * (r**2)\n    return area\n    \n    \ndef area_kite(b, h):\n    '''\n    Write a function to find the area of a kite given its base and height.\n    '''\n    \n    import math\n    \n    area = (1/2) * b * h\n    return area\n    \n    \ndef area_octagon_solid(r):\n    '''\n    Write a function to find the area of an octagon given its radius.\n    '''\n    \n    import math\n    \n    area = (2/3) * math.sqrt(2) * (r**2)\n    return area\n    \n    \ndef area_octagon_solid_tr(r):\n    '''\n    Write a function to find the area of an octagon given its radius.\n    '''\n    \n    import math\n    \n    area = (2/3) * r\n    return area\n    \n    \ndef area_pyr(r):\n    '''\n    Write a function to find the area of a pyramid given its base length.\n    '''\n    \n    import math\n    \n    area = math.sqrt(3) * (r**2)\n    return area\n    \n    \ndef area_pyr_tr(r):\n    '''\n    Write a function to find the area of a pyramid given its base length.\n    '''\n    \n    import math\n    \n    area = 2 * r\n    return area\n    \n    \ndef area_pyr_solid(r):\n    '''\n    Write a function to find the area of a pyramid given its base length.\n    '''\n    \n    import math\n    \n    area = math.sqrt(3) * (r**2)\n    return area\n    \n    \ndef area_dodecagon(r):\n    '''\n    Write a function to find the area of a dodecagon given its bas",
        "num_ids": 18
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l**2\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "num_ids": 10
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    # initialize the result variable\n    result = 0\n    \n    # iterate through all the odd integers\n    for i in range(1, n + 1):\n        # only add the square if the integer is odd\n        if i % 2 == 1:\n            result += i ** 2\n    \n    # return the sum of the squares\n    return result\n    \ndef compound_interest(p, r, t):\n    '''\n    Write a python function that takes in 3 floats p, r and t and returns the amount p after t years of compounded interest of r.\n    '''\n    \n    # return the result of p * (pow(1 + r, t))\n    return p * (pow(1 + r, t))\n    \ndef factors(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of the factors of n.\n    '''\n    \n    # initialize the result variable\n    result = []\n    \n    # iterate through all the factors of n\n    for i in range(1, n + 1):\n        # if the factor is divisible by n\n        if n % i == 0:\n            # append the factor to the result\n            result.append(i)\n    \n    # return the result\n    return result\n    \ndef is_prime(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is prime and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the factors of n\n    for i in range(2, n):\n        # if the factor is divisible by n\n        if n % i == 0:\n            # set the result to False\n            result = False\n    \n    # return the result\n    return result\n    \ndef is_palindrome(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a palindrome and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the digits in n\n    for i in range(len(str(n))):\n        # if the last digit and the first are not the same\n        if str(n)[i]!= str(n)[len(str(n)) - i - 1]:\n            # set the result to False\n            result = False\n    \n    # return the result\n    return result\n    \ndef is_perfect(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is perfect and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the divisors of n\n    for i in range(1, n):\n        # if the divisor is not evenly divisible by n\n        if n % i!= 0:\n            # set the result to False\n            result = False\n    \n    # return the result\n    return result\n    \ndef is_pandigital(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a pandigital number and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the digits of n\n    for i in range(1, len(str(n)) + 1):\n        # if the digit is not in the string representation of n\n        if str(i) not in str(n):\n            # set the result to False\n            result = False\n    \n    # return the result\n    return result\n    \ndef sieve(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of the primes upto n.\n    '''\n    \n    # initialize the result variable\n    result = []\n    \n    # iterate through all the numbers upto n\n    for i in range(n + 1):\n        # if the number is not a prime\n        if i > 1:\n            # set the result to false\n            result.append(i)\n            \n            # iterate through all the multiples of i\n            for j in range(2 * i, n + 1, i):\n                # set the result to false\n                result[len(result) - 1] = False\n    \n    # return the result\n    return result\n    \ndef is_pandigital_triangle(n1, n2, n3):\n    '''\n    Write a python function that takes in 3 integers n1, n2 and n3 and returns True if n1, n2 and n3 can be the sides of a triangle and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the digits in n1\n    for i in range(len(str(n1))):\n        # if the last digit and the first are not the same\n        if str(n1)[i]!= str(n1)[len(str(n1)) - i - 1]:\n            # set the result to False\n            result = False\n    \n    # iterate through all the digits in n2\n    for i in range(len(str(n2))):\n        # if the last digit and the first are not the same\n        if str(n2)[i]!= str(n2)[len(str(n2)) - i - 1]:\n            # set the result to False\n            result = False\n    \n    # iterate through all the digits in n3\n    for i in range(len(str(n3))):\n        # if the last digit and the first are not the same\n        if str(n3)[i]!= str(n3)[len(str(n3)) - i - 1]:\n            # set the result to False\n            result = False\n    \n    # return the result\n    return result\n    \ndef is_fibonacci(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a fibonacci number and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the fibonacci numbers\n    for i in range(1, n):\n        # if the last two digits are not equal\n        if i < 10:\n            if str(i)[1]!= str(i)[0]:\n                # set the result to False\n                result = False\n        else:\n            # if the last three digits are not equal\n            if str(i)[2]!= str(i)[0] or str(i)[2]!= str(i)[1]:\n                # set the result to False\n                result = False\n    \n    # return the result\n    return result\n    \ndef nth_fibonacci(n):\n    '''\n    Write a python function that takes in a natural n and returns the nth fibonacci number.\n    '''\n    \n    # initialize the result variable\n    result = 1\n    \n    # iterate through all the fibonacci numbers\n    for i in range(1, n):\n        # set the result to the current result\n        result = result + result\n    \n    # return the result\n    return result\n    \ndef is_kaprekar(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a kaprekar number and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the digits in n\n    for i in range(len(str(n))):\n        # if the last digit is not equal to the sum of the first digits of n\n        if str(n)[i]!= str((int(str(n)[:i]) + int(str(n)[i + 1:]))):\n            # set the result to False\n            result = False\n    \n    # return the result\n    return result\n    \ndef is_super_pandigital(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a super pandigital number and False otherwise.\n    '''\n    \n    # initialize the result variable\n    result = True\n    \n    # iterate through all the digits in n\n    for i in range(1, len(str(n))):\n        # if the digit is not in the string representation of n\n        if str(i) not in str(n):\n            # set the result to False\n            result = False\n    \n    # return the result\n    return resul",
        "num_ids": 97
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i*i\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    i = 1\n    result = 0\n    while i <= n:\n        result = result + pow(i, 2)\n        i += 2\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1) if i%2==1])\n",
        "num_ids": 28
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for x in range(1,n+1,2):\n        sum += x*x\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for x in range(1,n+1):\n        if x%2!= 0:\n            result = result + x**2\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Your Code Here\n    return n * (n + 1) * (2 * n + 1) / 6\n",
        "num_ids": 28
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n<0:\n        return None\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i*i\n    return total\n",
        "num_ids": 44
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i % 2!= 0):\n            sum = sum + (i**2)\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([(i**2) for i in range(1, n+1, 2)])\n",
        "num_ids": 26
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    x = n\n    y = 1\n    z = 1\n    while x > 0: \n        z = z*y\n        y = y+1\n        x = x-1\n    return z\n",
        "num_ids": 50
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 1\n    num_of_stars = 0\n    while num_of_stars < n:\n        count += 1\n        num_of_stars = (count * (count + 1)) / 2\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n**3\n",
        "num_ids": 8
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = 1\n    for i in range(1, n):\n        result = result * (n - i)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # n should be an integer > 0\n    assert type(n) is int and n > 0\n    # determine how many stars\n    if n < 10: \n        return n + 1\n    else: \n        return 1\n    \ndef find_star_num_rec(n):\n    '''\n    Use recursion to find then'th star number\n    '''\n    # n should be an integer > 0\n    assert type(n) is int and n > 0\n    if n < 10: \n        return n + 1\n    else: \n        return find_star_num_rec(n - 10) + 1\n    \ndef find_star_num_iter(n):\n    '''\n    Use iteration to find then'th star number\n    '''\n    # n should be an integer > 0\n    assert type(n) is int and n > 0\n    # get how many stars\n    stars = 1\n    if n < 10: \n        n = n + 1\n    else: \n        while n > 9: \n            stars = stars + 1\n            n = n - 10\n    return stars + n\n",
        "num_ids": 85
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return sum(range(1,n+1))\n",
        "num_ids": 15
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (n-1)*(n-2)/2 + 1\n",
        "num_ids": 18
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    cnt = 0 \n    n -= 1\n    while n > 0:\n        cnt += 1\n        n -= cnt \n    return cnt \n",
        "num_ids": 40
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return 5 * (n ** 2) + 5 * (n - 1) + 4\n",
        "num_ids": 22
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k) - 96\n",
        "num_ids": 11
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii = ord(k)\n    if ascii < 32 or ascii > 126:\n        return \"Error: input is not a single character\"\n    return ascii\n",
        "num_ids": 46
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) >= 65 and ord(k) <= 90:\n        return ord(k) - 65\n    elif ord(k) >= 97 and ord(k) <= 122:\n        return ord(k) - 97\n    elif ord(k) >= 48 and ord(k) <= 57:\n        return ord(k) - 48\n",
        "num_ids": 82
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k==' ':\n        return 32\n    if k.isupper():\n        return 65\n    else:\n        return 97\n",
        "num_ids": 34
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n        return ord(k) - 97\n    else:\n        return -1\n",
        "num_ids": 79
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i]%2 == 0:\n            sum+=arr[i]\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_e=0\n    for i in range(0,len(arr),2):\n        sum_e+=arr[i]\n    return sum_e\n",
        "num_ids": 40
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for index, element in enumerate(arr):\n        if index % 2 == 0:\n            if element % 2 == 0:\n                result += element\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i]%2 == 0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        total += arr[i]\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([arr[i] for i in range(0,len(arr),2) if arr[i]%2==0])\n    \ndef sum_odd_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    return sum([arr[i] for i in range(1,len(arr),2) if arr[i]%2!=0])\n",
        "num_ids": 35
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            total_sum = total_sum + arr[i]\n    return total_sum\n",
        "num_ids": 50
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for i in xrange(len(arr)):\n        if i%2 == 0:\n            if arr[i]%2 == 0:\n                sum_even_index = sum_even_index + arr[i]\n    return sum_even_index\n",
        "num_ids": 71
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([arr[i] for i in range(len(arr)) if i%2==0])\n",
        "num_ids": 27
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i]%2 == 0:\n            result+= arr[i]\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    if n < 2:\n        return 0\n    \n    total = 0\n    \n    for i in range(n):\n        if i % 2 == 0:\n            total += i ** 5\n            \n    return total\n    \n    ",
        "num_ids": 58
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(2**x for x in range(1,n+1) if x%2 == 0 and 2**x <= n)\n",
        "num_ids": 34
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    else:\n        return 2 + even_Power_Sum(n-1) + even_Power_Sum(n-2) + even_Power_Sum(n-3) + even_Power_Sum(n-4)\n        \n    \ndef even_Power_Sum_Recursive(n, result): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    if n == 1:\n        return result\n    elif n == 2:\n        return result + 2\n    elif n == 3:\n        return result + 4\n    elif n == 4:\n        return result + 6\n    else:\n        return even_Power_Sum_Recursive(n-1, result + 2) + even_Power_Sum_Recursive(n-2, result + 4) + even_Power_Sum_Recursive(n-3, result + 6) + even_Power_Sum_Recursive(n-4, result + 8)\n        \n        \n    \ndef powers_of_2(n): \n    '''\n    Write a python function that takes in an integer n and returns the sum of the first n even natural numbers that are raised to the second power.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return powers_of_2(n-1) + powers_of_2(n-2)\n        \n",
        "num_ids": 57
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        if i**5%2==0:\n            total += i\n    return total\n    \nprint(even_Power_Sum(5))",
        "num_ids": 48
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([x**5 for x in range(0,n) if x % 2 == 0])\n",
        "num_ids": 26
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n**5 + even_Power_Sum(n-1)\n    \n    \n",
        "num_ids": 38
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0 \n    for i in range(n):\n        if i%2 == 0:\n            sum += i**5 \n    return sum \n",
        "num_ids": 39
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(range(n + 1, n * 2, 2))\n",
        "num_ids": 19
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(range(2,n+1,2))**5\n",
        "num_ids": 19
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n",
        "num_ids": 20
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Test Inputs\n    test_list1 = [(1, 2), (3, 4), (5, 6)]\n    test_list2 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    test_list3 = [(1, 2, 3, 4), (5, 6, 7, 8)]\n    # Expected Outputs\n    expected_list1 = [2, 4, 6]\n    expected_list2 = [6, 8, 9]\n    expected_list3 = [8]\n    # Run Test\n    test_print(test_list1, expected_list1, \"1\", \"rear_extract\")\n    test_print(test_list2, expected_list2, \"2\", \"rear_extract\")\n    test_print(test_list3, expected_list3, \"3\", \"rear_extract\")\n    return\n",
        "num_ids": 214
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n",
        "num_ids": 19
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list\n",
        "num_ids": 41
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = [tuple[-1] for tuple in test_list]\n    return rear_elements\n",
        "num_ids": 31
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n",
        "num_ids": 20
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n",
        "num_ids": 20
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    #    test_list = [('a', 'b'), ('c', 'd'), ('e', 'f')]\n    #    return ['b', 'd', 'f']\n",
        "num_ids": 44
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple([x1-x2 for x1,x2 in zip(test_tup1,test_tup2)])\n    else:\n        return None\n        \n        ",
        "num_ids": 65
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 37
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    temp_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup += (test_tup1[i] - test_tup2[i],)\n    return temp_tup\n",
        "num_ids": 59
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i], )\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for index, element in enumerate(test_tup1):\n        test_tup1[index] -= test_tup2[index]\n",
        "num_ids": 37
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1], test_tup1[2] - test_tup2[2])\n",
        "num_ids": 57
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x,y:x-y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([(test_tup1[i] - test_tup2[i]) for i in range(len(test_tup1))])\n",
        "num_ids": 39
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    diff_tup = ()\n    for i in range(len(test_tup1)):\n        diff_tup = diff_tup + (test_tup1[i] - test_tup2[i],)\n    return diff_tup\n",
        "num_ids": 64
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0: \n        return 0\n    if n < 2: \n        return 1\n    if n == 2: \n        return 2\n    return n/2 * (2 * even_binomial_Coeff_Sum(n-2) + even_binomial_Coeff_Sum(n-4))\ndef even_binomial_Coeff(n,k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k and returns the binomial coefficient.\n    '''\n    if n < 0 or k < 0: \n        return 0\n    if n < k: \n        return 0\n    if n == k: \n        return 1\n    return (n/2 - k)/2 * (2 * even_binomial_Coeff(n-2,k) + even_binomial_Coeff(n-4,k))\ndef factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the factorial of that number\n    '''\n    if n == 0: \n        return 1\n    if n < 0: \n        return 0\n    return n * factorial(n - 1)\ndef binomial_coeff(n,k):\n    '''\n    Write a python function that takes in two positive integers n and k and returns the binomial coefficient for n and k\n    '''\n    if n < 0 or k < 0: \n        return 0\n    if n < k: \n        return 0\n    if n == 0: \n        return 1\n    return (factorial(n)/(factorial(k)*factorial(n-k)))\ndef x_plus_y(x,y):\n    '''\n    Write a python function that takes in two positive integers x and y and returns the sum of the two\n    '''\n    if x < 0 or y < 0: \n        return 0\n    if x > y: \n        return x + x_plus_y(x - y, y)\n    return y + y_plus_x(y - x, x)\ndef x_plus_y_recursive(x,y):\n    '''\n    Write a python function that takes in two positive integers x and y and returns the sum of the two\n    '''\n    if x < 0 or y < 0: \n        return 0\n    if x < y: \n        return x + x_plus_y(x - y, y)\n    return y + y_plus_x(y - x, x)\ndef count_bits(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of 1s in its binary representation.\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return 1 + count_bits(n/2)\ndef fibonacci_recursive(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\ndef fibonacci_recursive_with_memo(n, memo):\n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n in memo: \n        return memo[n]\n    memo[n] = fibonacci_recursive_with_memo(n-1, memo) + fibonacci_recursive_with_memo(n-2, memo)\n    return memo[n]\ndef find_digits_in_n(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of digits in that number.\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return 1 + find_digits_in_n(n/10)\ndef factorial_with_memo(n, memo):\n    '''\n    Write a python function that takes in a positive integer n and returns the factorial of n\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 1\n    if n in memo: \n        return memo[n]\n    memo[n] = n * factorial_with_memo(n - 1, memo)\n    return memo[n]\ndef find_digits_in_n_with_memo(n, memo):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of digits in that number.\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 1\n    if n == 1: \n        return 1\n    if n in memo: \n        return memo[n]\n    return 1 + find_digits_in_n_with_memo(n/10, memo)\ndef count_bits_with_memo(n, memo):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of 1s in its binary representation.\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n in memo: \n        return memo[n]\n    memo[n] = 1 + count_bits_with_memo(n/2, memo)\n    return memo[n]\ndef fibonacci_dynamic_programming(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number\n    '''\n    fib = [0 for i in xrange(n+1)]\n    fib[1] = 1\n    for i in xrange(2,n+1): \n        fib[i] = fib[i-1] + fib[i-2]\n    return fib[n]\ndef find_digits_in_n_dynamic_programming(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of digits in that number.\n    '''\n    fib = [0 for i in xrange(n+1)]\n    fib[1] = 1\n    for i in xrange(2,n+1): \n        fib[i] = fib[i-1] + fib[i-2]\n    return fib[n]\ndef count_bits_dynamic_programming(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of 1s in its binary representation.\n    '''\n    fib = [0 for i in xrange(n+1)]\n    fib[1] = 1\n    for i in xrange(2,n+1): \n        fib[i] = fib[i-1] + fib[i-2]\n    count = 0\n    while(n > 0): \n        count += (n % 2)\n        n /= 2\n    return count\ndef is_prime(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is prime and False otherwise\n    '''\n    if n <= 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in xrange(3,int(math.sqrt(n))+1,2):\n        if n % i == 0: \n            return False\n    return True\ndef num_divisors(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of divisors of n\n    '''\n    if n <= 1: \n        return 1\n    if n == 2: \n        return 2\n    if n % 2 == 0: \n        return num_divisors(n/2) + 1\n    return num_divisors",
        "num_ids": 58
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    bins = list()\n    for i in range(n):\n        bins.append( binomial_coefficient(i,2) )\n    return sum(bins)\n",
        "num_ids": 44
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0 or n == 1:\n        return n\n    elif n == 2:\n        return 2\n    else:\n        return 2 * n\n",
        "num_ids": 54
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial = [[0 for x in range(n)] for x in range(n)]\n    binomial[0][0] = 1\n    for i in range(1, n):\n        binomial[i][0] = 1\n        for j in range(1, i+1):\n            binomial[i][j] = binomial[i-1][j-1] + binomial[i-1][j]\n    return sum(binomial[n-1])\n",
        "num_ids": 112
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return ( n * even_binomial_Coeff_Sum( n - 2) ) + (2 * n - 2)\n",
        "num_ids": 47
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans=0\n    if n==1:\n        return 1\n    if n<0:\n        return 0\n    if n==0:\n        return 0\n    for i in range(n):\n        if (i+1)%2==0:\n            ans+=math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return ans\n",
        "num_ids": 94
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial = 0\n    if( n % 2 == 0):\n        for i in range(0, n + 1, 2):\n            binomial = binomial + math.factorial(i) * math.factorial(n - i)\n        print(binomial)\n    else:\n        print('Not Possible')\n",
        "num_ids": 76
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return 1\n    else:\n        return ((n * (n - 1)) / 2) * (n + 1)\n",
        "num_ids": 49
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    assert n>=0\n    sum = 0\n    for i in range(n+1):\n        binomial = math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n        if binomial % 2 == 0:\n            sum += binomial\n    return sum\n    \nassert even_binomial_Coeff_Sum(5) == 12\nassert even_binomial_Coeff_Sum(10) == 30\n",
        "num_ids": 110
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    else:\n        return even_binomial_Coeff_Sum(n - 1) + 2 * n\n",
        "num_ids": 72
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (pi*r**2)*h\n",
        "num_ids": 13
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = pi*r**2*h\n    return V\n",
        "num_ids": 17
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi*r**2)*h\n",
        "num_ids": 15
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*(r**2)*h\n",
        "num_ids": 13
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n",
        "num_ids": 12
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=pi*r**2*h\n    return volume\n",
        "num_ids": 17
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi * r**2 * h) / 3\n",
        "num_ids": 18
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*r**2*h\n",
        "num_ids": 14
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (pi/4)*(r**2)*h\n",
        "num_ids": 16
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi*r*r*h\n    return volume\n",
        "num_ids": 19
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.items() if v >= n}\n",
        "num_ids": 25
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    for key in dict.keys():\n        if dict[key] < n:\n            dict.pop(key)\n    return dict\n",
        "num_ids": 35
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Build the new dictionary\n    new_dict = {}\n    # Iterate over the dictionary\n    for key, value in dict.items():\n        # Add items to the new dictionary with values >= n\n        if value >= n:\n            new_dict[key] = value\n    # Return the new dictionary\n    return new_dict\n",
        "num_ids": 78
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    temp=[]\n    for key in dict:\n        if(dict[key]>=n):\n            temp.append(key)\n    return temp\n    \ndef dict_sort(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and sorts the dictionary by value (from highest to lowest). \n    '''\n    temp=[]\n    for key in dict:\n        if(dict[key]>=n):\n            temp.append(key)\n    temp.sort()\n    return temp\n",
        "num_ids": 44
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={k:v for (k,v) in dict.items() if v>=n}\n    return new_dict\n",
        "num_ids": 34
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Your code here\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 49
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    filter_dict = {k:v for k,v in dict.items() if v >= n}\n    return filter_dict\n    \n",
        "num_ids": 36
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for k,v in dict.items():\n        if v < n:\n            del dict[k]\n    return dict\n",
        "num_ids": 31
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for k,v in dict.items():\n        if v < n:\n            del dict[k]\n    return dict\n",
        "num_ids": 31
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    out = {}\n    for k in dict:\n        if dict[k] >= n:\n            out[k] = dict[k]\n    return out\n",
        "num_ids": 39
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for tup in test_tup:\n        if count == 0:\n            return count\n        else:\n            count += 1\n",
        "num_ids": 38
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            break\n        count+=1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # x = [1, 2, 3, 1, 1, 2, 3]\n    # x = [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    # x = [1, 2, 1, 2, 3, 1, 2, 3]\n    # x = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ",
        "num_ids": 2006
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(list(test_tup[0:1]))\n",
        "num_ids": 19
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(tup[:tup.index(test_tup)])\n",
        "num_ids": 22
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Assigning count of 0 to the variable count\n    count = 0\n",
        "num_ids": 19
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([x for x in test_tup if x is not None])\n",
        "num_ids": 21
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if test_tup == ():\n        return 0\n    else:\n        count = 0\n        for i in range(len(test_tup)):\n            if test_tup[i] == test_tup[0]:\n                count += 1\n        return count\n",
        "num_ids": 67
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_element = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            first_element += 1\n    return first_element\n",
        "num_ids": 55
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            break\n        count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n + 1) * (n + 2) / 6\n",
        "num_ids": 20
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n + 1\n    return n * (n - 1) * (n - 2) * (n - 3) / 4\n",
        "num_ids": 33
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return ((n ** 2) - (n // 3) ** 2) == ((n // 2) ** 2)\n",
        "num_ids": 28
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagon_number = 1\n    nth_decagon = 0\n    while nth_decagon < n:\n        decagon_number += 1\n        nth_decagon += decagon_number ** 2\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # base case: 1, 2, 3, 4, 5,..., n\n    if n == 1:\n        return 1\n    # base case: 2, 22, 222, 22222,..., n\n    if n == 2:\n        return 22\n    # base case: 3, 33, 333, 33333,..., n\n    if n == 3:\n        return 333\n    # base case: 4, 44, 444, 4444,..., n\n    if n == 4:\n        return 444\n    # n is a multiple of 3\n    if n % 3 == 0:\n        return n/3\n    # n is a multiple of 5\n    if n % 5 == 0:\n        return n/5\n    return -1\n",
        "num_ids": 168
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n*n-1)//2\n",
        "num_ids": 16
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x = 1\n    n1 = 1\n    n2 = 2\n    n3 = 3\n    i = 0\n    while x < n:\n        i = i + 1\n        x = n1 + n2 + n3\n        n1 = n2\n        n2 = n3\n        n3 = x\n    return n\n",
        "num_ids": 80
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n*n + n - 1)/2\n",
        "num_ids": 17
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n * 10 + 9) // 2 - n + 9\n",
        "num_ids": 20
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return sum([int(i)**2 for i in str(n)]) == n*10\n",
        "num_ids": 25
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, val in enumerate(dlist):\n        if val == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = -1\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            position = i\n            break\n",
        "num_ids": 42
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n",
        "num_ids": 33
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            pos = i\n            found = True\n            break\n    return (found, pos)\n",
        "num_ids": 58
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1\n",
        "num_ids": 35
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1\n",
        "num_ids": 35
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
        "num_ids": 58
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    list_set = set(test_list)\n    if(len(list_set) == len(test_list)):\n        return True\n    else:\n        return False\n    \n    \ndef count_char(test_string):\n    '''\n    Write a python function to count the number of each character in a given string.\n    '''\n    char_count = {}\n    for char in test_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    return char_count\n",
        "num_ids": 58
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for a in test_list:\n        if test_list.count(a) > 1:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x not in unique_list:\n            unique_list.append(x)\n    return len(unique_list) == len(test_list)\n",
        "num_ids": 54
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    flag = True\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                flag = False\n                break\n        if flag == False:\n            break\n    return flag\n",
        "num_ids": 77
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for x in test_list:\n        for y in test_list:\n            if x == y:\n                unique = False\n                return unique\n    return unique\n",
        "num_ids": 45
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n    return unique\n",
        "num_ids": 66
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for x in range(0, len(nums1)):\n        result.append(nums1[x] - nums2[x])\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    output = []\n    for i in xrange(len(nums1)):\n        output.append(nums1[i] - nums2[i])\n    return output\n",
        "num_ids": 45
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 30
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) < len(nums2):\n        for i in range(0,len(nums2)):\n            nums1.append(nums1[len(nums1)-1] - nums2[len(nums2)-1-i])\n    if len(nums1) > len(nums2):\n        for i in range(0,len(nums1)):\n            nums2.append(nums2[len(nums2)-1-i] - nums1[len(nums1)-1-i])\n    return nums1[0:len(nums1)]\n",
        "num_ids": 153
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n    \ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]+nums2[i])\n    return result\n    \ndef add_lists(list1,list2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i]+list2[i])\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1_len, nums2_len = len(nums1), len(nums2)\n    if nums1_len!= nums2_len:\n        raise ValueError('The lengths of two lists are not equal!')\n    for i in range(nums1_len):\n        nums1[i] -= nums2[i]\n",
        "num_ids": 88
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    elif len(nums2) == 0:\n        return nums1\n    else:\n        result = [nums1[0] - nums2[0]]\n        for i in range(1,len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result\ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    elif len(nums2) == 0:\n        return nums1\n    else:\n        result = [nums1[0] + nums2[0]]\n        for i in range(1,len(nums1)):\n            result.append(nums1[i] + nums2[i])\n        return result\ndef add_two_number(a,b):\n    '''\n    Write a function to add two numbers.\n    '''\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        result = 0\n        while a > 0:\n            result = result + pow(2,a-1)\n            a -= 1\n        while b > 0:\n            result = result + pow(2,b-1)\n            b -= 1\n        return result\ndef add_two_numbers_bit(a,b):\n    '''\n    Write a function to add two numbers.\n    '''\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        result = 0\n        while a > 0:\n            result = result + pow(2,a)\n            a -= 1\n        while b > 0:\n            result = result + pow(2,b)\n            b -= 1\n        return result\ndef reverse_list(nums):\n    '''\n    Write a function to reverse a list.\n    '''\n    result = [nums[-1]]\n    for i in range(len(nums)-2,-1,-1):\n        result.append(nums[i])\n    return result\ndef reverse_list_2(nums):\n    '''\n    Write a function to reverse a list.\n    '''\n    result = [nums[-1]]\n    for i in range(len(nums)-2,-1,-1):\n        result.append(nums[i])\n    return result\ndef rotate_list(nums,k):\n    '''\n    Write a function to rotate a list.\n    '''\n    k = k % len(nums)\n    result = [nums[-1]]\n    for i in range(len(nums)-k-1,-1,-1):\n        result.append(nums[i])\n    return result\ndef rotate_list_2(nums,k):\n    '''\n    Write a function to rotate a list.\n    '''\n    k = k % len(nums)\n    result = [nums[-1]]\n    for i in range(len(nums)-k-1,-1,-1):\n        result.append(nums[i])\n    return result\ndef rotate_list_3(nums,k):\n    '''\n    Write a function to rotate a list.\n    '''\n    k = k % len(nums)\n    result = [nums[-1]]\n    for i in range(len(nums)-k-1,-1,-1):\n        result.append(nums[i])\n    return result\ndef rotate_list_4(nums,k):\n    '''\n    Write a function to rotate a list.\n    '''\n    k = k % len(nums)\n    result = [nums[-1]]\n    for i in range(len(nums)-k-1,-1,-1):\n        result.append(nums[i])\n    return result\ndef rotate_list_5(nums,k):\n    '''\n    Write a function to rotate a list.\n    '''\n    k = k % len(nums)\n    result = [nums[-1]]\n    for i in range(len(nums)-k-1,-1,-1):\n        result.append(nums[i])\n    return result\ndef rotate_list_6(nums,k):\n    '''\n    Write a function to rotate a list.\n    '''\n    k = k % len(nums)\n    result = [nums[-1]]\n    for i in range(len(nums)-k-1,-1,-1):\n        result.append(nums[i])\n    return result\ndef rotate_list_7(nums,k):\n    '''\n    Write a function to rotate a list.\n    '''\n    k = k % len(nums)\n    result = [nums[-1]]\n    for i in range(len(nums)-k-1,-1,-1):\n        result.append(nums[i])\n    return result\ndef rotate_list_8(nums,k):\n    '''\n    Write a function to rotate a list.\n    '''\n    k = k % len(nums)\n    result = [nums[-1]]\n    for i in range(len(nums)-k-1,-1,-1):\n        result.append(nums[i])\n    return result\ndef rotate_list_9(nums,k):\n    '''\n    Write a function to rotate a list.\n    '''\n    k = k % len(nums)\n    result = [nums[-1]]\n    for i in range(len(nums)-k-1,-1,-1):\n        result.append(nums[i])\n    return result\ndef reverse_list_7(nums):\n    '''\n    Write a function to reverse a list.\n    '''\n    result = [nums[-1]]\n    for i in range(len(nums)-2,-1,-1):\n        result.append(nums[i])\n    return result\ndef count_occurences(nums,k):\n    '''\n    Write a function to count the number of occurrences of an integer in a list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == k:\n            count += 1\n    return count\ndef count_occurences_2(nums,k):\n    '''\n    Write a function to count the number of occurrences of an integer in a list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == k:\n            count += 1\n    return count\ndef count_occurences_3(nums,k):\n    '''\n    Write a function to count the number of occurrences of an integer in a list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == k:\n            count += 1\n    return count\ndef count_occurences_4(nums,k):\n    '''\n    Write a function to count the number of occurrences of an integer in a list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == k:\n            count += 1\n    return count\ndef count_occurences_5(nums,k):\n    '''\n    Write a function to count the number of occurrences of an integer in a list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == k:\n            count += 1\n    return count\ndef count_occurences_6(nums,k):\n    '''\n    Write a function to count the number of occurrences of an integer in a list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == k:\n            count += 1\n    return count\ndef count_occurences_7(nums,k):\n    '''\n    Write a function to count the number of occurrences of an integer in a list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == ",
        "num_ids": 29
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = [a-b for a,b in zip(nums1, nums2)]\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) < len(nums2):\n        return [nums1[i] - nums2[i] for i in range(len(nums1))]\n    if len(nums2) < len(nums1):\n        return [nums2[i] - nums1[i] for i in range(len(nums2))]\n    else:\n        return [nums1[i] - nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 125
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if not nums1 and not nums2:\n        return nums1\n    elif not nums1:\n        return nums2\n    elif not nums2:\n        return nums1\n    elif len(nums1)!= len(nums2):\n        return None\n    return [num1-num2 for num1,num2 in zip(nums1,nums2)]\n",
        "num_ids": 98
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit not in freq:\n            freq[digit] = 0\n        freq[digit] += 1\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    return True\n",
        "num_ids": 73
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in range(n):\n        digit = int(input())\n        freq = {}\n        while digit:\n            dig = digit % 10\n            if dig not in freq:\n                freq[dig] = 1\n            else:\n                freq[dig] += 1\n            digit //= 10\n        flag = 1\n        for key in freq:\n            if freq[key] > key:\n                flag = 0\n                break\n        if flag:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n",
        "num_ids": 127
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    for i in str(n):\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i] > int(i):\n            return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) == 1:\n        return True\n    else:\n        return int(str(n)[0]) <= freq[str(n)[0]]\n",
        "num_ids": 43
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    temp = n \n    numbers = {}\n    while temp > 0: \n        digit = temp%10\n        if digit not in numbers: \n            numbers[digit] = 1\n        else: \n            numbers[digit] += 1 \n        temp = temp//10\n    for key in numbers.keys():\n        if numbers[key] > key: \n            return False \n    return True \n",
        "num_ids": 99
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return True if (len(str(n)) == 1) else False if (len(str(n)) == 0) else (len(set(str(n))) <= len(str(n)))\n",
        "num_ids": 47
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = {}\n    num = n\n    while num:\n        count[num%10] = count.get(num%10, 0) + 1\n        num /= 10\n    return all(x <= y for x, y in count.items())\n",
        "num_ids": 61
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    arr = [int(i) for i in str(n)]\n    for i in arr:\n        if arr.count(i) > i:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    import operator\n    def check(n):\n        for i in range(1,n+1):\n            d = dict()\n            for j in str(i):\n                if j not in d:\n                    d[j] = 1\n                else:\n                    d[j] += 1\n            if max(d.values()) > min(d.values()):\n                return False\n        return True\n    return check(n)\n    ",
        "num_ids": 102
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    for digit in str(n):\n        d[digit] = d.get(digit, 0) + 1\n    return all(map(lambda x: d[x] <= x, d))\n",
        "num_ids": 52
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    elif list[0]!= element:\n        return False\n    return check_element(list[1:],element)\n",
        "num_ids": 46
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list[0] == element:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list.count(element) == len(list):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    is_equal = True\n    for i in list:\n        if i!= element:\n            is_equal = False\n            break\n    return is_equal\n",
        "num_ids": 40
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for e in list:\n        if element!= e:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    if count == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    if text:\n        if re.search('ab{1,3}',text):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab+', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match('a.+b',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}',text)!= None:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # return re.search('[ab]{2,3}', text)\n    return re.search('^ab', text)\n",
        "num_ids": 33
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(ab)|(bab)')\n    if pattern.search(text) is None:\n        return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'ab{2,3}', text)\n",
        "num_ids": 20
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(re.findall(r'ab{2,3}', text)) > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search(r'a.{2,3}b', text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n",
        "num_ids": 9
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_array = [0 for _ in range(n)]\n    for i in range(n):\n        sum_array[i] = sum(a[i:k*n:k])\n    return max(sum_array)\n",
        "num_ids": 56
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # max_arr = []\n    max_sum = 0\n    for i in range(n):\n        max_sum = max_sum + a[i]\n    # if max_sum is greater than max_arr:\n    #     max_arr = max_sum\n    # else:\n    #     max_arr = max_arr\n    \n    # if max_sum is greater than max_arr:\n    #     max_arr = max_sum\n    # else:\n    #     max_arr = max_arr\n",
        "num_ids": 124
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # if k == 0 or a is None:\n    #     return None\n    # k = int(k)\n    # res = a[0]\n    # for i in range(1, n):\n    #     if a[i] > res:\n    #         res = a[i]\n    #     else:\n    #         res = res + a[i]\n",
        "num_ids": 92
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    '''\n    ans = 0\n    n = len(a)\n    for i in range(0, n):\n        if i < n - k:\n            ans = max(ans, sum(a[i:i + k]))\n    return ans\n    '''\n    ans = a[0]\n    max_sum = a[0]\n    for i in range(0, n - k + 1):\n        max_sum = max(max_sum, sum(a[i:i + k]))\n        ans = max(ans, max_sum)\n    return ans\n",
        "num_ids": 74
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(n-k+1):\n        current_sum = sum(a[i:i+k])\n        max_sum = max(current_sum, max_sum)\n",
        "num_ids": 54
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # TLE\n    # l = len(a)\n    # for i in range(l):\n    #     for j in range(i+1, l):\n    #         sub_array = a[i:j]\n    #         if len(sub_array) == k:\n    #             if sum(sub_array) > max_sum:\n    #                 max_sum = sum(sub_array)\n    # return max_sum\n",
        "num_ids": 106
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    ans = 0\n    curr_sum = 0\n    curr_count = 1\n    for i in range(n):\n        curr_sum += a[i]\n        if i >= k-1:\n            ans = max(ans, curr_sum)\n            curr_sum -= a[i-k+1]\n            curr_count -= 1\n    return ans\n",
        "num_ids": 92
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # The code of the problem is same as that of the previous problem.\n    # We will use dynamic programming to solve the problem.\n",
        "num_ids": 32
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    if k == 1:\n        return max(a)\n    result = float(\"-inf\")\n    for i in range(n - k + 1):\n        result = max(result, sum(a[i:i+k]))\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    n = int(n)\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return n*n + square_Sum(n-2)\n    \n    \n    \n    \ndef sum_of_the_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of all the even natural numbers less than n.\n    '''\n    n = int(n)\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return (n*n + sum_of_the_squares(n-2))\n        \n    \n    \ndef Sq_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the squares of all the even natural numbers less than n.\n    '''\n    n = int(n)\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return n*n + Sq_Sum(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # your code here\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for num in range(1, n+1):\n        if num % 2 == 0:\n            sum += num * num\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    sum = n * (n + 1) // 2\n    return sum * sum\n",
        "num_ids": 32
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return (n**2) + square_Sum(n-2)\n",
        "num_ids": 34
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n*(n+1)*0.5\n    \nprint square_Sum(6)\n",
        "num_ids": 40
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i<=n:\n        sum += i*i\n        i += 2\n    return sum\n    \n    \nprint square_Sum(100)\n",
        "num_ids": 48
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n<0:\n        print(\"Enter a positive natural number\")\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 8\n    if n%2==1:\n        return n*(n+1)*(n+2)/6\n    else:\n        return n*(n-1)*(n-2)/2\n",
        "num_ids": 97
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += i * i\n",
        "num_ids": 34
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if(i%2==0):\n            sum=sum+i**2\n    return sum\ndef sum_list(lst):\n    '''\n    Write a python function takes in an list of integers and returns the sum of all the integers in the list.\n    '''\n    sum=0\n    for i in lst:\n        sum=sum+i\n    return sum\ndef inp_list():\n    '''\n    Write a python function takes in a list of integers and returns the second largest integer in the list.\n    '''\n    lst=[]\n    for i in range(0,3):\n        lst.append(int(raw_input('Enter a number: ')))\n    print lst\n    lst.sort()\n    print lst\n    lst.reverse()\n    print lst\n    return lst[1]\ndef factorial(n):\n    '''\n    Write a python function takes in an integer n and returns the n factorial.\n    '''\n    f=1\n    if(n>0):\n        for i in range(1,n+1):\n            f=f*i\n    return f\ndef sum_tuple(tuple):\n    '''\n    Write a python function takes in a tuple of integers and returns the sum of all the integers in the tuple.\n    '''\n    sum=0\n    for i in tuple:\n        sum=sum+i\n    return sum\ndef sum_tuple(tuple):\n    '''\n    Write a python function takes in a tuple of integers and returns the sum of all the integers in the tuple.\n    '''\n    sum=0\n    for i in tuple:\n        sum=sum+i\n    return sum\ndef sum_tuple(tuple):\n    '''\n    Write a python function takes in a tuple of integers and returns the sum of all the integers in the tuple.\n    '''\n    sum=0\n    for i in tuple:\n        sum=sum+i\n    return sum\ndef remove_duplicate(lst):\n    '''\n    Write a python function takes in a list of integers and returns a list of integers without duplicates.\n    '''\n    return list(set(lst))\ndef check_palindrome(n):\n    '''\n    Write a python function takes in an integer n and returns True if n is palindrome and False otherwise.\n    '''\n    temp=n\n    rev=0\n    while(n>0):\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    if(temp==rev):\n        return True\n    else:\n        return False\ndef check_palindrome(n):\n    '''\n    Write a python function takes in an integer n and returns True if n is palindrome and False otherwise.\n    '''\n    temp=n\n    rev=0\n    while(n>0):\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    if(temp==rev):\n        return True\n    else:\n        return False\ndef check_palindrome(n):\n    '''\n    Write a python function takes in an integer n and returns True if n is palindrome and False otherwise.\n    '''\n    temp=n\n    rev=0\n    while(n>0):\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    if(temp==rev):\n        return True\n    else:\n        return False\ndef str_to_list(s):\n    '''\n    Write a python function takes in a string and returns a list of characters in the string.\n    '''\n    lst=[]\n    for i in s:\n        lst.append(i)\n    return lst\ndef str_to_list(s):\n    '''\n    Write a python function takes in a string and returns a list of characters in the string.\n    '''\n    lst=[]\n    for i in s:\n        lst.append(i)\n    return lst\ndef power_list(lst):\n    '''\n    Write a python function takes in a list of integers and returns the list after raising each integer in the list by power n.\n    '''\n    for i in range(len(lst)):\n        lst[i]=lst[i]**2\n    return lst\ndef power_list(lst):\n    '''\n    Write a python function takes in a list of integers and returns the list after raising each integer in the list by power n.\n    '''\n    for i in range(len(lst)):\n        lst[i]=lst[i]**2\n    return lst\ndef factorial(n):\n    '''\n    Write a python function takes in an integer n and returns the n factorial.\n    '''\n    f=1\n    if(n>0):\n        for i in range(1,n+1):\n            f=f*i\n    return f\ndef factorial(n):\n    '''\n    Write a python function takes in an integer n and returns the n factorial.\n    '''\n    f=1\n    if(n>0):\n        for i in range(1,n+1):\n            f=f*i\n    return f\ndef factorial(n):\n    '''\n    Write a python function takes in an integer n and returns the n factorial.\n    '''\n    f=1\n    if(n>0):\n        for i in range(1,n+1):\n            f=f*i\n    return f\ndef factorial(n):\n    '''\n    Write a python function takes in an integer n and returns the n factorial.\n    '''\n    f=1\n    if(n>0):\n        for i in range(1,n+1):\n            f=f*i\n    return f\ndef factorial(n):\n    '''\n    Write a python function takes in an integer n and returns the n factorial.\n    '''\n    f=1\n    if(n>0):\n        for i in range(1,n+1):\n            f=f*i\n    return f\ndef factorial(n):\n    '''\n    Write a python function takes in an integer n and returns the n factorial.\n    '''\n    f=1\n    if(n>0):\n        for i in range(1,n+1):\n            f=f*i\n    return f\ndef sum_list(lst):\n    '''\n    Write a python function takes in a list of integers and returns the sum of all the integers in the list.\n    '''\n    sum=0\n    for i in lst:\n        sum=sum+i\n    return sum\ndef sum_list(lst):\n    '''\n    Write a python function takes in a list of integers and returns the sum of all the integers in the list.\n    '''\n    sum=0\n    for i in lst:\n        sum=sum+i\n    return sum\ndef sum_list(lst):\n    '''\n    Write a python function takes in a list of integers and returns the sum of all the integers in the list.\n    '''\n    sum=0\n    for i in lst:\n        sum=sum+i\n    return sum\ndef sum_list(lst):\n    '''\n    Write a python function takes in a list of integers and returns the sum of all the integers in the list.\n    '''\n    sum=0\n    for i in lst:\n        sum=sum+i\n    return sum\ndef sum_list(lst):\n    '''\n    Write a python function takes in a list of integers and returns the sum of all the integers in the list.\n    '''\n    sum=0\n    for i in lst:\n        sum=sum+i\n    return sum\ndef sum_list(lst):\n    '''\n    Write a python function takes in a list of integers and returns the sum of all the integers in the list.\n    '''\n    sum=0\n    for i in lst:\n        sum=sum+i\n    return sum\ndef sum_list(lst):\n    '''\n    Write a python function takes in a list of integers and returns the sum of all the integers in the list.\n    '''\n    sum=0\n    for i in lst:\n        sum=sum+i\n    return sum\ndef sum_list(lst):",
        "num_ids": 34
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = len(list1[0])\n    for i in range(1,len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n",
        "num_ids": 64
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(list1[0])] + [len(l) for l in list1])\n",
        "num_ids": 27
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = max(len(sub) for sub in list1)\n    return [ [ v for v in list1[i] if len(v) == l ] for i in range(l)]\n",
        "num_ids": 47
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    max_list = []\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    for i in list1:\n        if len(i) == max:\n            max_list.append(i)\n    return max_list\n",
        "num_ids": 74
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = l\n    return max_list\n",
        "num_ids": 59
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for sublist in list1:\n        if len(sublist) > max:\n            max = len(sublist)\n    return max\n",
        "num_ids": 40
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # max_len = -1\n    # max_list = []\n    # for list in list1:\n    #     if len(list) > max_len:\n    #         max_len = len(list)\n    #         max_list = list\n    # return max_list\n    return max(list1, key=len)\n",
        "num_ids": 82
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = []\n    for i in list1:\n        result.append(len(i))\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlen = 0\n    for list in list1:\n        if len(list) > maxlen:\n            maxlen = len(list)\n    return maxlen\n    \ndef frequency(list1):\n    '''\n    Write a function to find the frequency of each element in a list of lists.\n    '''\n    counter = [0]*len(list1[0])\n    for list in list1:\n        for item in list:\n            counter[list.index(item)] += 1\n    return counter\n",
        "num_ids": 48
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = [0]\n    for i in list1:\n        if len(i) > max_length_list[0]:\n            max_length_list[0] = len(i)\n    return max_length_list\n",
        "num_ids": 60
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1: return k\n    if k==1: return 1\n    res = k*count_no_of_ways(n-1,k)\n    if n-1<k:\n        res += count_no_of_ways(n-1,k-1)\n    return res\n",
        "num_ids": 73
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_no_of_ways_recursive(n, k, 0)\n",
        "num_ids": 22
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    c = [1, 0, 0]\n    \n    for i in range(3, n+1): \n        c.append(c[i-1] + c[i-2] + c[i-3]) \n        \n    return c[n] - (c[k] * c[n-k]) \n",
        "num_ids": 81
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    cache = {}\n    return count_no_of_ways_recursive(n, k, cache)\n",
        "num_ids": 27
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0 or k == n:\n        return 1\n    if k > n:\n        return 0\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n",
        "num_ids": 62
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # f[i][j] = number of ways to paint the fence\n    # where we have i posts and j colors\n    f = [[0 for i in range(k+1)] for j in range(n+1)]\n    \n    # base case\n    # we can paint only one post\n    for i in range(1, k+1):\n        f[0][i] = 1\n    \n    # base case\n    # we can paint only one post\n    for j in range(1, n+1):\n        f[j][0] = 1\n",
        "num_ids": 132
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1 or n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # dp[i][j] is the number of ways for post[0:i] to be painted with at most j colors\n    # the number of ways is the number of ways to get to post[i-1] with at most j-1 colors and post[i] with j colors\n    # so, we can make each post with at most j colors and dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # if the last post is the same as the last post before\n            if i == 1:\n                # if j is less than k, then we can paint the last post with j colors\n                if j < k:\n                    dp[i][j] = 1\n            else:\n                # if the last post is the same as the last post before\n                if post[i-1] == post[i-2]:\n                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n                else:\n                    # if j is less than k, then we can paint the last post with j colors\n                    dp[i][j] = dp[i-1][j]\n    \n    return dp[n][k]\n",
        "num_ids": 371
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # The way to paint the fence would be to paint 2 colors at a time. Thus, a total of 2^(n-1) ways\n    return 2 ** (n - 1)\n",
        "num_ids": 44
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==0 or k==0: \n        return 0\n    if n==1: \n        return k\n    if k==1: \n        return 1\n",
        "num_ids": 42
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    assert n>0, \"n must be positive\"\n    assert m>0, \"m must be positive\"\n    \n    n,m=str(n),str(m)\n    \n    if n==m:\n        return 1\n    \n    q,remainder=divmod(int(n),int(m))\n    if remainder==0:\n        return q\n    else:\n        return q+1\n",
        "num_ids": 99
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"0\"\n    if n == 0:\n        return \"Undefined\"\n    if n < 0 and m > 0:\n        n *= -1\n        m *= -1\n    while (n % m)!= 0:\n        quo = n / m\n        n = m\n        m = n % m\n    return str(quo)\n",
        "num_ids": 93
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 0\n    return n // m\n",
        "num_ids": 19
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    numerator = 1\n    denominator = 0\n    while n>=m:\n        numerator = numerator+m\n        n = n-m\n    denominator = m\n    return (numerator,denominator)\n",
        "num_ids": 60
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    assert m > 0, \"Cannot find the quotient of a negative number\"\n    assert n > 0, \"Cannot find the quotient of a negative number\"\n    return n // m\n",
        "num_ids": 46
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\ndef even(n):\n    '''\n    Write a python function to check if a number is even or odd.\n    '''\n    return n%2==0\ndef findDigits(n):\n    '''\n    Write a python function to find the count of digits of a number.\n    '''\n    return len(str(n))\ndef print_stars(n):\n    '''\n    Write a python function to print a star of n length.\n    '''\n    for i in range(n):\n        print '*',\n    print ''\ndef isPalidrome(n):\n    '''\n    Write a python function to check whether a number is a palidrome or not.\n    '''\n    r=n[::-1]\n    return r==n\ndef print_stars_pattern(n):\n    '''\n    Write a python function to print a pattern of stars of n length.\n    '''\n    for i in range(n):\n        print '*',\n    print ''\ndef isPalidrome_str(n):\n    '''\n    Write a python function to check whether a number is a palidrome or not.\n    '''\n    r=n[::-1]\n    return r==n\ndef print_stars_pattern_with_separator(n):\n    '''\n    Write a python function to print a pattern of stars of n length with a\n    separator.\n    '''\n    for i in range(n):\n        print '*',\n    print '\\n'\ndef isPalidrome_str_with_separator(n):\n    '''\n    Write a python function to check whether a number is a palidrome or not.\n    '''\n    r=n[::-1]\n    return r==n\ndef count_letters(n):\n    '''\n    Write a python function to count the number of letters of a string.\n    '''\n    return len(n)\ndef is_anagram(s1,s2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if len(s1)==len(s2):\n        t=sorted(s1)\n        u=sorted(s2)\n        if t==u:\n            return True\n    return False\ndef is_anagram_with_counts(s1,s2):\n    '''\n    Write a python function to check whether two strings are anagrams or not\n    using a dictionary and compare the frequencies of the letters.\n    '''\n    freq={}\n    if len(s1)==len(s2):\n        for i in s1:\n            if i in freq:\n                freq[i]+=1\n            else:\n                freq[i]=1\n        for i in s2:\n            if i in freq:\n                freq[i]-=1\n            else:\n                freq[i]=1\n        for i in freq:\n            if freq[i]!=0:\n                return False\n        return True\ndef sort_list_of_tuples(lst):\n    '''\n    Write a python function to sort a list of tuples by the second item of the tuple.\n    '''\n    lst.sort(key=lambda x:x[1])\n    return lst\ndef print_list_of_tuples(lst):\n    '''\n    Write a python function to print a list of tuples.\n    '''\n    for i in lst:\n        print i\ndef print_list_of_tuples_with_separator(lst):\n    '''\n    Write a python function to print a list of tuples with separator.\n    '''\n    for i in lst:\n        print i,\n    print ''\ndef print_list_of_tuples_with_separator_using_format(lst):\n    '''\n    Write a python function to print a list of tuples with separator using a format statement.\n    '''\n    for i in lst:\n        print '{0} {1}'.format(i[0],i[1]),\n    print ''\ndef print_list_of_tuples_with_separator_using_format_string_version(lst):\n    '''\n    Write a python function to print a list of tuples with separator using a format statement.\n    '''\n    for i in lst:\n        print '{0} {1}'.format(*i),\n    print ''\ndef print_list_of_tuples_with_separator_using_format_string_version2(lst):\n    '''\n    Write a python function to print a list of tuples with separator using a format statement.\n    '''\n    for i in lst:\n        print '{0:<10} {1:<10}'.format(*i),\n    print ''\ndef print_list_of_tuples_with_separator_using_format_string_version3(lst):\n    '''\n    Write a python function to print a list of tuples with separator using a format statement.\n    '''\n    for i in lst:\n        print '{0:<10} {1:<10}'.format(*i),\n    print ''\ndef print_list_of_tuples_with_separator_using_format_string_version4(lst):\n    '''\n    Write a python function to print a list of tuples with separator using a format statement.\n    '''\n    for i in lst:\n        print '{0:<10} {1:<10}'.format(*i),\n    print ''\ndef convert_to_hex_and_octal(n):\n    '''\n    Write a python function to convert a decimal number to hexadecimal and octal.\n    '''\n    print 'Hex: {0:x}'.format(n)\n    print 'Octal: {0:o}'.format(n)\ndef convert_to_hex_and_octal_using_fstring(n):\n    '''\n    Write a python function to convert a decimal number to hexadecimal and octal.\n    '''\n    print(f'Hex: {n:x}')\n    print(f'Octal: {n:o}')\ndef convert_to_hex_and_octal_using_fstring_with_decimal_separator(n):\n    '''\n    Write a python function to convert a decimal number to hexadecimal and octal.\n    '''\n    print(f'Hex: {n:x}')\n    print(f'Octal: {n:o}')\ndef is_leap_year(n):\n    '''\n    Write a python function to check whether a year is leap or not.\n    '''\n    return n%4==0 and n%100!=0 or n%400==0\ndef get_divisors(n):\n    '''\n    Write a python function to get all the divisors of a number.\n    '''\n    divisors=[]\n    for i in range(1,n):\n        if n%i==0:\n            divisors.append(i)\n    return divisors\ndef print_factors(n):\n    '''\n    Write a python function to print all the divisors of a number.\n    '''\n    for i in get_divisors(n):\n        print i,\n    print ''\ndef print_factors_of_a_number_using_list_comprehension(n):\n    '''\n    Write a python function to print all the divisors of a number.\n    '''\n    [print(i,end=' ') for i in get_divisors(n)]\n    print ''\ndef print_factors_of_a_number_using_for_loop(n):\n    '''\n    Write a python function to print all the divisors of a number.\n    '''\n    for i in range(1,n):\n        if n%i==0:\n            print i,\n    print ''\ndef print_factors_of_a_number_using_while_loop(n):\n    '''\n    Write a python function to print all the divisors of a number.\n    '''\n    i=1\n    while i<=n:\n        if n%i==0:\n            print i,\n        i+=1\n    print ''\ndef print_factors_of_a",
        "num_ids": 47
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return 0\n    a=1\n    b=1\n    while b*b <= n:\n        t=0\n        while b*b <= n:\n            if n%b==0:\n                t=t+1\n            b=b+1\n        if t>0:\n            a=a+1\n        n=n-1\n    return a\n",
        "num_ids": 94
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = m/n\n    return q\n    \ndef find_x_power_y(x,y):\n    '''\n    Write a python function to find the x power of y.\n    '''\n    p = x**y\n    return p\n    \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    return fact\n    \ndef factorial_x_n(n,x):\n    '''\n    Write a python function to compute the factorial of a number when n! = (n-x)! * x!\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    return fact\n    \ndef factorial_x_n_minus_x_n(n,x):\n    '''\n    Write a python function to compute the factorial of a number when n! = (n-x)! * x!\n    '''\n    fact = 1\n    for i in range(1,n-x+1):\n        fact = fact * i\n    return fact\n    \ndef factorial_x_n_minus_x_n_x(n,x):\n    '''\n    Write a python function to compute the factorial of a number when n! = (n-x)! * x!\n    '''\n    fact = 1\n    for i in range(1,n-x+1):\n        fact = fact * i\n    return fact\n    \ndef factorial_x_n_minus_x_n_x_x(n,x):\n    '''\n    Write a python function to compute the factorial of a number when n! = (n-x)! * x!\n    '''\n    fact = 1\n    for i in range(1,n-x+1):\n        fact = fact * i\n    return fact\n    \ndef fibonacci_x_n(n,x):\n    '''\n    Write a python function to compute the fibonacci of a number when n! = (n-x)! * x!\n    '''\n    f = [0,1]\n    for i in range(2,n+1):\n        f.append(f[i-1] + f[i-2])\n    return f[n]\n    \ndef fibonacci_x_n_minus_x_n(n,x):\n    '''\n    Write a python function to compute the fibonacci of a number when n! = (n-x)! * x!\n    '''\n    f = [0,1]\n    for i in range(2,n+1):\n        f.append(f[i-1] + f[i-2])\n    return f[n-x]\n    \ndef fibonacci_x_n_minus_x_n_x(n,x):\n    '''\n    Write a python function to compute the fibonacci of a number when n! = (n-x)! * x!\n    '''\n    f = [0,1]\n    for i in range(2,n+1):\n        f.append(f[i-1] + f[i-2])\n    return f[n-x]\n    \ndef fibonacci_x_n_minus_x_n_x_x(n,x):\n    '''\n    Write a python function to compute the fibonacci of a number when n! = (n-x)! * x!\n    '''\n    f = [0,1]\n    for i in range(2,n+1):\n        f.append(f[i-1] + f[i-2])\n    return f[n-x-1]\n    \ndef count_digits_in_a_number(n):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count\n    \ndef count_digits_in_a_number_x_n(n,x):\n    '''\n    Write a python function to count the number of digits in a number when n! = (n-x)! * x!\n    '''\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count\n    \ndef count_digits_in_a_number_x_n_x(n,x):\n    '''\n    Write a python function to count the number of digits in a number when n! = (n-x)! * x!\n    '''\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count\n    \ndef count_digits_in_a_number_x_n_x_x(n,x):\n    '''\n    Write a python function to count the number of digits in a number when n! = (n-x)! * x!\n    '''\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count\n    \ndef count_digits_in_a_number_x_n_x_x_x(n,x):\n    '''\n    Write a python function to count the number of digits in a number when n! = (n-x)! * x!\n    '''\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count\n    \ndef count_digits_in_a_number_x_n_x_x_x_x(n,x):\n    '''\n    Write a python function to count the number of digits in a number when n! = (n-x)! * x!\n    '''\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count\n    \ndef count_digits_in_a_number_x_n_x_x_x_x_x(n,x):\n    '''\n    Write a python function to count the number of digits in a number when n! = (n-x)! * x!\n    '''\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count\n    \ndef count_digits_in_a_number_x_n_x_x_x_x_x_x_x(n,x):\n    '''\n    Write a python function to count the number of digits in a number when n! = (n-x)! * x!\n    '''\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count\n    \ndef count_digits_in_a_number_x_n_x_x_x_x_x_x_x_x(n,x):\n    '''\n    Write a python function to count the number of digits in a number when n! = (n-x)! * x!\n    '''\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count\n    \ndef count_digits_in_a_number_x_n_x_x_x_x_x_x_x_x_x(n,x):\n    '''\n    Write a python function to count the number of digits in a number when n! = (n-x)! * x!\n    '''\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count\n    \ndef count_digits_in_a_number_x_n_x_x_x_x_x_x_x_x_x_x(n,x):\n    '''\n    Write a python function to count the number of digits in a number when n! = (n-x)! * x!\n    '''\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count\n    \ndef count_digits_in_a_number_x_n_x_x_x_x_x_x_x_x_x_x_x(n,x):\n    '''\n    Write a python function to count the number of digits in a number when n! = (n-x)! * x!\n    '''\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count\n    \ndef count_digits_in_a_number_x_n_x",
        "num_ids": 46
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    return n/m\n",
        "num_ids": 10
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m==0:\n        return n\n    if n==0:\n        return 0\n    if n<0:\n        n=abs(n)\n    if m<0:\n        m=abs(m)\n    return n//m\n",
        "num_ids": 60
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h*1.0/2\ndef myfilter(nums,f):\n    '''\n    Implement a filter function in Python to return a list of the elements that are\n    in the given list for which the function f returns true.\n    '''\n    ret_list=[]\n    for i in nums:\n        if f(i):\n            ret_list.append(i)\n    return ret_list\ndef myfilter2(nums,f):\n    '''\n    Implement a filter function in Python to return a list of the elements that are\n    in the given list for which the function f returns true.\n    '''\n    ret_list=[]\n    for i in nums:\n        if f(i):\n            ret_list.append(i)\n    return ret_list\n",
        "num_ids": 40
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w*w + h*h)\n    return a\n",
        "num_ids": 23
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2\ndef otherside_equilateral(w):\n    '''\n    Write a function to find the third side of an equilateral triangle.\n    '''\n    return w**2/4\ndef otherside_isosceles(w,h):\n    '''\n    Write a function to find the third side of an isosceles triangle.\n    '''\n    return (w**2+h**2)/2\ndef isosceles(w,h):\n    '''\n    Write a function to find the third side of an isosceles triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of an isosceles right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef isosceles_rightangle(w,h):\n    '''\n    Write a functio",
        "num_ids": 8
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s=(w**2+h**2)**.5\n    return s\n",
        "num_ids": 21
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef opposite_sides(w,h):\n    '''\n    Write a function to find the opposite sides of a right angled triangle.\n    '''\n    return (w**2+h**2)**0.5\ndef isrightangled(w,h):\n    '''\n    Write a function to find if the given triangle is right angled.\n    '''\n    if w==opposite_sides(h,w) or h==opposite_sides(w,h) or w==opposite_sides(h,w):\n        return True\n    return False\ndef quadratic_equation(a,b,c):\n    '''\n    Write a function to find the roots of a quadratic equation.\n    '''\n    return (-b+math.sqrt(b**2-4*a*c))/(2*a)\ndef how_many_squares(a,b):\n    '''\n    Write a function to find how many squares a*a+b*b=c*c for c=1 to n\n    '''\n    return int(math.ceil((a**2+b**2)/2))\ndef is_pentagonal(n):\n    '''\n    Write a function to find if n is pentagonal.\n    '''\n    x=(math.sqrt(1+24*n)+1)/6\n    return x==math.floor(x)\ndef is_hexagonal(n):\n    '''\n    Write a function to find if n is hexagonal.\n    '''\n    x=(math.sqrt(1+8*n)+1)/4\n    return x==math.floor(x)\ndef is_heptagonal(n):\n    '''\n    Write a function to find if n is heptagonal.\n    '''\n    x=(math.sqrt(1+8*n)+1)/2\n    return x==math.floor(x)\ndef is_octagonal(n):\n    '''\n    Write a function to find if n is octagonal.\n    '''\n    x=(math.sqrt(1+8*n)+1)/4\n    return x==math.floor(x)\ndef is_nonagon(n):\n    '''\n    Write a function to find if n is nonagon.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/2\n    return x==math.floor(x)\ndef is_decagon(n):\n    '''\n    Write a function to find if n is decagon.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/4\n    return x==math.floor(x)\ndef is_dodecagon(n):\n    '''\n    Write a function to find if n is dodecagon.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/6\n    return x==math.floor(x)\ndef is_tetragon(n):\n    '''\n    Write a function to find if n is tetragon.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/4\n    return x==math.floor(x)\ndef is_trigonal(n):\n    '''\n    Write a function to find if n is trigonal.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/3\n    return x==math.floor(x)\ndef is_square(n):\n    '''\n    Write a function to find if n is square.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/4\n    return x==math.floor(x)\ndef is_rectangle(n):\n    '''\n    Write a function to find if n is rectangle.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/2\n    return x==math.floor(x)\ndef is_right_triangle(a,b,c):\n    '''\n    Write a function to find if the given triangle is right angled.\n    '''\n    if c==opposite_sides(a,b) or a==opposite_sides(b,c) or b==opposite_sides(a,c):\n        return True\n    return False\ndef is_triangle(a,b,c):\n    '''\n    Write a function to find if the given triangle is right angled.\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    return False\ndef triangle_type(a,b,c):\n    '''\n    Write a function to find if the given triangle is equilateral, isosceles or scalene.\n    '''\n    if is_triangle(a,b,c):\n        if a==b==c:\n            return 'equilateral'\n        elif a==b or b==c or c==a:\n            return 'isosceles'\n        else:\n            return'scalene'\n    return False\ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef perimeter_of_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return a+b+c\ndef is_right_angle(a,b,c):\n    '''\n    Write a function to find if the given triangle is right angled.\n    '''\n    if c==otherside_rightangle(a,b):\n        return True\n    return False\ndef is_hexagon(n):\n    '''\n    Write a function to find if n is hexagon.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/6\n    return x==math.floor(x)\ndef is_heptagon(n):\n    '''\n    Write a function to find if n is heptagon.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/5\n    return x==math.floor(x)\ndef is_octagon(n):\n    '''\n    Write a function to find if n is octagon.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/4\n    return x==math.floor(x)\ndef is_pentagon(n):\n    '''\n    Write a function to find if n is pentagon.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/5\n    return x==math.floor(x)\ndef is_decagon(n):\n    '''\n    Write a function to find if n is decagon.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/4\n    return x==math.floor(x)\ndef is_dodecagon(n):\n    '''\n    Write a function to find if n is dodecagon.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/3\n    return x==math.floor(x)\ndef is_tetragon(n):\n    '''\n    Write a function to find if n is tetragon.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/4\n    return x==math.floor(x)\ndef is_trigonal(n):\n    '''\n    Write a function to find if n is trigonal.\n    '''\n    if n==1:\n        return False\n    x=(math.sqrt(1+8*n)+1)/3",
        "num_ids": 30
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*w/2+h*h*0.5\ndef otherside_equilateral(w):\n    '''\n    Write a function to find the third side of an equilateral triangle.\n    '''\n    return w*w*0.5\ndef otherside_isosceles(w,h):\n    '''\n    Write a function to find the third side of a isosceles triangle.\n    '''\n    return w*w*0.5+h*h*0.5\ndef otherside_scalene(w,h):\n    '''\n    Write a function to find the third side of a scalene triangle.\n    '''\n    return w*w*w*0.5\ndef find_rightangle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes three points and returns the length of the triangle.\n    '''\n    a=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)\n    b=(x2-x3)*(x2-x3)+(y2-y3)*(y2-y3)\n    c=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3)\n    if a+b==c or b+c==a or a+c==b:\n        return math.sqrt(a+b+c)\n    return -1\ndef find_rightangledegrees(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes three points and returns the angle of the\n    triangle in degrees.\n    '''\n    cos=find_rightangle(x1,y1,x2,y2,x3,y3)\n    if cos==-1:\n        return -1\n    angle=math.acos(cos)*180/math.pi\n    return angle\ndef find_rightangledegrees_2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes three points and returns the angle of the\n    triangle in degrees.\n    '''\n    cos=(x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)\n    if cos==0:\n        return -1\n    return math.acos(cos)*180/math.pi\ndef find_rightangledegrees_3(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes three points and returns the angle of the\n    triangle in degrees.\n    '''\n    return math.acos((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))*180/math.pi\ndef find_isosceles(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes three points and returns the length of the triangle.\n    '''\n    a=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)\n    b=(x2-x3)*(x2-x3)+(y2-y3)*(y2-y3)\n    c=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3)\n    if a==b==c:\n        return math.sqrt(a)\n    return -1\ndef find_isosceledegrees(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes three points and returns the angle of the\n    triangle in degrees.\n    '''\n    a=find_isosceles(x1,y1,x2,y2,x3,y3)\n    if a==-1:\n        return -1\n    angle=math.acos(a)*180/math.pi\n    return angle\ndef find_isosceledegrees_2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes three points and returns the angle of the\n    triangle in degrees.\n    '''\n    a=find_isosceles(x1,y1,x2,y2,x3,y3)\n    if a==-1:\n        return -1\n    return math.acos(a)*180/math.pi\ndef find_isosceledegrees_3(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes three points and returns the angle of the\n    triangle in degrees.\n    '''\n    return math.acos((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))*180/math.pi\ndef find_isosceles_2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes three points and returns the length of the triangle.\n    '''\n    a=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)\n    b=(x2-x3)*(x2-x3)+(y2-y3)*(y2-y3)\n    c=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3)\n    if a==b==c:\n        return math.sqrt(a)\n    return -1\ndef find_isosceles_3(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes three points and returns the length of the triangle.\n    '''\n    a=find_isosceles_2(x1,y1,x2,y2,x3,y3)\n    if a==-1:\n        return -1\n    return math.sqrt(a)\ndef find_scalene(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes three points and returns the length of the triangle.\n    '''\n    a=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)\n    b=(x2-x3)*(x2-x3)+(y2-y3)*(y2-y3)\n    c=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3)\n    if a+b==c or b+c==a or a+c==b:\n        return math.sqrt(a+b+c)\n    return -1\ndef find_scalene_2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes three points and returns the length of the triangle.\n    '''\n    a=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)\n    b=(x2-x3)*(x2-x3)+(y2-y3)*(y2-y3)\n    c=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3)\n    if a+b==c or b+c==a or a+c==b:\n        return math.sqrt(a+b+c)\n    return -1\ndef find_scalene_3(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes three points and returns the length of the triangle.\n    '''\n    a=find_scalene_2(x1,y1,x2,y2,x3,y3)\n    if a==-1:\n        return -1\n    return math.sqrt(a)\ndef find_scalene_degrees(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes three points and returns the angle of the\n    triangle in degrees.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h**2/4\n",
        "num_ids": 12
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt((h*h)+(w*w))\n    b = math.sqrt(c*c-(h*h))\n    a = w*w\n    return c,b,a\ndef center(a,b,c):\n    return (a+b+c)/3\n",
        "num_ids": 73
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    length = len(listval)\n    listval = listval[::-1]\n    if length%2 == 0:\n        return max(listval[length/2],listval[length/2-1])\n    else:\n        return max(listval[length/2],listval[length/2])\n",
        "num_ids": 76
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in listval:\n        if i > maxval:\n            maxval = i\n    return maxval\n",
        "num_ids": 39
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for item in listval:\n        if item > max:\n            max = item\n    return max\n",
        "num_ids": 35
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # listval=['string', 2.1, 0.4, 3.5, '1', 2.4, 'a']\n    max_value = None\n    for value in listval:\n        if max_value == None:\n            max_value = value\n        else:\n            if max_value < value:\n                max_value = value\n    return max_value\n",
        "num_ids": 90
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    maxval = listval[0]\n    for val in listval:\n        if val > maxval:\n            maxval = val\n    return maxval\n",
        "num_ids": 50
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in listval:\n        if i > maxval:\n            maxval = i\n    return maxval\n",
        "num_ids": 39
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval[0], max_val(listval[1:]))\n",
        "num_ids": 60
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val=listval[0]\n    for i in listval[1:]:\n        if i > max_val:\n            max_val=i\n    return max_val\n    \n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, int(number / 2) + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 55
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for div in range(1, int(number ** 0.5) + 1):\n        if number % div == 0:\n            div_sum += div\n    return div_sum\n",
        "num_ids": 51
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n    \ndef is_prime(number):\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    for i in range(3,int(number**0.5)+1):\n        if number % i == 0:\n            return False\n    return True\n",
        "num_ids": 119
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [1]\n    for i in range(2, int(math.sqrt(number))+1):\n        if number % i == 0:\n            divisors.append(i)\n            if i!= (number/i):\n                divisors.append(number/i)\n    divisors.append(number)\n    return sum(divisors)\n",
        "num_ids": 93
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize the total sum.\n    total_sum = 0\n    # Loop through all numbers from 1 to the square root of the number.\n    for n in range(1, int(math.sqrt(number)) + 1):\n        # If the number is evenly divisible by the current number, add it to the total sum.\n        if number % n == 0:\n            total_sum += n\n    # Add the remaining number to the total sum.\n    total_sum += number\n    # Return the total sum.\n    return total_sum\n",
        "num_ids": 127
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    count = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            count += i\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    summ = 0\n    for i in range(1, number):\n        if number % i == 0:\n            summ += i\n    return summ\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_list = []\n    for x in range(1, number):\n        if number % x == 0:\n            divisor_list.append(x)\n    return sum(divisor_list)\n",
        "num_ids": 54
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisors = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    def sum_div_recursive(number, result=[]):\n        if len(result) == 0:\n            result.append(number)\n            return sum(result)\n        else:\n            for i in range(1, number + 1):\n                if number % i == 0:\n                    result.append(i)\n            return sum_div_recursive(number, result)\n    return sum_div_recursive(number)\n",
        "num_ids": 103
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    def merge_sort(arr):\n        \n        if len(arr)>1:\n            mid = len(arr)/2\n            L = arr[:mid]\n            R = arr[mid:]\n",
        "num_ids": 51
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i] > arr[j]):\n                Count += 1\n    return Count\n",
        "num_ids": 60
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    if n <= 1: \n        return 0\n    else: \n        return get_Inv_Count(arr[:n//2]) + get_Inv_Count(arr[n//2:]) \n",
        "num_ids": 59
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # to count the inversions\n    inversions_count = 0\n    # to store the elements\n    arr_copy = arr.copy()\n    # sorting the array in non-decreasing order\n    arr_copy = sorted(arr_copy)\n    # the array is already sorted, so no need to sort again\n    \n    for i in range(len(arr) - 1):\n        if (arr[i] > arr[i + 1]):\n            inversions_count += 1\n            \n    # returning the inversions count\n    return inversions_count\n    \ndef get_Inv_Count_Brute(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # to count the inversions\n    inversions_count = 0\n    \n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] > arr[j]):\n                inversions_count += 1\n    \n    # returning the inversions count\n    return inversions_count\n",
        "num_ids": 89
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    n = len(arr)\n    if n <= 1:\n        return arr, 0\n    else:\n        arr1 = get_Inv_Count(arr[:n/2])[0]\n        arr2 = get_Inv_Count(arr[n/2:])[0]\n        a, b = 0, 0\n        for i in range(n/2):\n            for j in range(n/2):\n                if arr1[i] > arr2[j]:\n                    a += 1\n                elif arr1[i] < arr2[j]:\n                    b += 1\n        return arr1 + arr2, a + b\n",
        "num_ids": 153
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] > arr[j]):\n                count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in xrange(n):\n        for j in xrange(i+1,n):\n            if(arr[i] > arr[j]):\n                count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr_len = len(arr)\n    if arr_len == 0: \n        return 0\n    if arr_len == 1:\n        return 0\n    arr1 = arr[:arr_len/2]\n    arr2 = arr[arr_len/2:]\n    return get_Inv_Count(arr1) + get_Inv_Count(arr2) + merge_sort(arr1, arr2)\n",
        "num_ids": 99
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    if len(arr)<2:\n        return arr,0\n",
        "num_ids": 20
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for elem in list1:\n        if isinstance(elem, list):\n            output.extend(flatten_list(elem))\n        else:\n            output.append(elem)\n    return output\n",
        "num_ids": 59
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    elif isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return [list1[0]] + flatten_list(list1[1:])\n",
        "num_ids": 77
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for l in list1:\n        if isinstance(l, list):\n            for m in flatten_list(l):\n                list2.append(m)\n        else:\n            list2.append(l)\n    return list2\n",
        "num_ids": 65
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n",
        "num_ids": 13
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for item in list1:\n        if type(item) is list:\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n",
        "num_ids": 59
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def _flatten(list1):\n        for el in list1:\n            if isinstance(el, list):\n                for item in _flatten(el):\n                    yield item\n            else:\n                yield el\n    return list(_flatten(list1))\n",
        "num_ids": 66
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if isinstance(list1,list):\n        return flatten_list(list1[0])+[list1[1]] if len(list1)>1 else flatten_list(list1[0])\n    else:\n        return [list1]\n",
        "num_ids": 63
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for el in list1:\n        if isinstance(el, list):\n            for sub in flatten_list(el):\n                yield sub\n        else:\n            yield el\n",
        "num_ids": 46
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n",
        "num_ids": 63
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list_of_list = []\n    for list2 in list1:\n        for item in list2:\n            list_of_list.append(item)\n    return list_of_list\n",
        "num_ids": 48
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for s, t in stdata:\n        d[s].append(t)\n    return max([max(v) for v in d.values()])\n",
        "num_ids": 48
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate=defaultdict(int)\n    for s,e,n in stdata:\n        aggregate[s]+=n\n        aggregate[e]-=n\n    summ=0\n    for key,val in aggregate.items():\n        summ+=val\n    return summ\ndef max_profit(prices):\n    '''\n    Write a function to calculate the maximum profit from the list of prices.\n    '''\n    if len(prices)==1:\n        return 0\n    dp=[0]*len(prices)\n    dp[0]=0\n    dp[1]=prices[1]-prices[0]\n    for i in range(2,len(prices)):\n        dp[i]=max(dp[i-1],prices[i]-prices[i-1]+dp[i-2])\n    return dp[-1]\ndef max_profit_II(prices):\n    '''\n    Write a function to calculate the maximum profit from the list of prices.\n    '''\n    if len(prices)==1:\n        return 0\n    dp=[0]*len(prices)\n    dp[0]=0\n    dp[1]=prices[1]-prices[0]\n    for i in range(2,len(prices)):\n        dp[i]=max(dp[i-1],prices[i]-prices[i-1]+dp[i-2])\n    summ=0\n    for i in range(len(prices)):\n        summ=max(summ,dp[i])\n    return summ\ndef max_profit_III(prices):\n    '''\n    Write a function to calculate the maximum profit from the list of prices.\n    '''\n    if len(prices)==1:\n        return 0\n    dp=[0]*len(prices)\n    dp[0]=0\n    dp[1]=prices[1]-prices[0]\n    for i in range(2,len(prices)):\n        dp[i]=max(dp[i-1],prices[i]-prices[i-1]+dp[i-2])\n    summ=0\n    for i in range(len(prices)):\n        summ+=dp[i]\n    return summ\ndef max_profit_IV(prices):\n    '''\n    Write a function to calculate the maximum profit from the list of prices.\n    '''\n    if len(prices)==1:\n        return 0\n    dp=[0]*len(prices)\n    dp[0]=0\n    dp[1]=prices[1]-prices[0]\n    for i in range(2,len(prices)):\n        dp[i]=max(dp[i-1],prices[i]-prices[i-1]+dp[i-2])\n    summ=0\n    for i in range(len(prices)-1):\n        summ=max(summ,dp[i+1])\n    return summ\ndef max_profit_V(prices):\n    '''\n    Write a function to calculate the maximum profit from the list of prices.\n    '''\n    if len(prices)==1:\n        return 0\n    dp=[0]*len(prices)\n    dp[0]=0\n    dp[1]=prices[1]-prices[0]\n    for i in range(2,len(prices)):\n        dp[i]=max(dp[i-1],prices[i]-prices[i-1]+dp[i-2])\n    summ=0\n    for i in range(len(prices)-1):\n        summ=max(summ,dp[i+1])\n    return summ\ndef num_of_peaks(stdata):\n    '''\n    Write a function to calculate the number of peaks in the list of tuples.\n    '''\n    count=0\n    for i in range(1,len(stdata)):\n        if stdata[i][1]>stdata[i-1][1]:\n            count+=1\n    return count\ndef num_of_peaks_II(stdata):\n    '''\n    Write a function to calculate the number of peaks in the list of tuples.\n    '''\n    count=0\n    for i in range(1,len(stdata)):\n        if stdata[i][1]>stdata[i-1][1]:\n            count+=1\n    return count\ndef num_of_peaks_IV(stdata):\n    '''\n    Write a function to calculate the number of peaks in the list of tuples.\n    '''\n    count=0\n    for i in range(1,len(stdata)):\n        if stdata[i][1]>stdata[i-1][1]:\n            count+=1\n    return count\ndef num_of_peaks_V(stdata):\n    '''\n    Write a function to calculate the number of peaks in the list of tuples.\n    '''\n    count=0\n    for i in range(1,len(stdata)):\n        if stdata[i][1]>stdata[i-1][1]:\n            count+=1\n    return count\ndef find_median(stdata):\n    '''\n    Write a function to calculate the median of the list of tuples.\n    '''\n    sortedlist=sorted(stdata,key=lambda t:t[0])\n    return sortedlist[len(sortedlist)/2][0]\ndef find_median_II(stdata):\n    '''\n    Write a function to calculate the median of the list of tuples.\n    '''\n    sortedlist=sorted(stdata,key=lambda t:t[0])\n    return sortedlist[len(sortedlist)/2][0]\ndef find_median_IV(stdata):\n    '''\n    Write a function to calculate the median of the list of tuples.\n    '''\n    sortedlist=sorted(stdata,key=lambda t:t[0])\n    return sortedlist[len(sortedlist)/2][0]\ndef find_median_V(stdata):\n    '''\n    Write a function to calculate the median of the list of tuples.\n    '''\n    sortedlist=sorted(stdata,key=lambda t:t[0])\n    return sortedlist[len(sortedlist)/2][0]\ndef find_median_VI(stdata):\n    '''\n    Write a function to calculate the median of the list of tuples.\n    '''\n    sortedlist=sorted(stdata,key=lambda t:t[0])\n    return sortedlist[len(sortedlist)/2]\ndef find_median_VII(stdata):\n    '''\n    Write a function to calculate the median of the list of tuples.\n    '''\n    sortedlist=sorted(stdata,key=lambda t:t[0])\n    return sortedlist[len(sortedlist)/2]\ndef find_median_VIII(stdata):\n    '''\n    Write a function to calculate the median of the list of tuples.\n    '''\n    sortedlist=sorted(stdata,key=lambda t:t[0])\n    return sortedlist[len(sortedlist)/2]\ndef find_median_IX(stdata):\n    '''\n    Write a function to calculate the median of the list of tuples.\n    '''\n    sortedlist=sorted(stdata,key=lambda t:t[0])\n    return sortedlist[len(sortedlist)/2]\ndef find_median_X(stdata):\n    '''\n    Write a function to calculate the median of the list of tuples.\n    '''\n    sortedlist=sorted(stdata,key=lambda t:t[0])\n    return sortedlist[len(sortedlist)/2]\ndef find_median_XII(stdata):\n    '''\n    Write a function to calculate the median of the list of tuples.\n    '''\n    sortedlist=sorted(stdata,key=lambda t:t[0])\n    return sortedlist[len(sortedlist)/2]\ndef find_median_XIII(stdata):\n    '''\n    Write a function to calculate the median of the list of tuples.\n    '''\n    sortedlist=sorted(stdata,key=lambda ",
        "num_ids": 17
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int)\n    for each_line in stdata:\n        agg_dict[each_line[1]] += each_line[0]\n    max_val = 0\n    for each_val in agg_dict.values():\n        max_val += each_val\n    return max_val\n",
        "num_ids": 77
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    print stdata\n    max_val = 0\n    for val in stdata:\n        if val[1] > max_val:\n            max_val = val[1]\n    print max_val\n",
        "num_ids": 50
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_tuple = None\n    max_value = 0\n    for t in stdata:\n        value = t[2]\n        if value > max_value:\n            max_value = value\n            max_tuple = t\n    return max_tuple\n",
        "num_ids": 64
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # input: [(1, 2, 3), (2, 2, 2)]\n    # output: (1, 3, 4)\n    aggregate = [0 for i in range(len(stdata[0]))]\n    for i in range(len(stdata)):\n        for j in range(len(stdata[0])):\n            aggregate[j] = aggregate[j] + stdata[i][j]\n    return aggregate\ndef test_max_aggregate():\n    stdata = [(1, 2, 3), (2, 2, 2)]\n    stdata2 = [(1, 2, 3), (1, 2, 3), (1, 2, 3)]\n    stdata3 = [(1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)]\n    assert max_aggregate(stdata) == (1, 3, 4)\n    assert max_aggregate(stdata2) == (1, 3, 6)\n    assert max_aggregate(stdata3) == (1, 3, 6)\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    # input: [(1, 2, 3), (2, 2, 2)]\n    # output: (2, 2, 2)\n    aggregate = [100000000 for i in range(len(stdata[0]))]\n    for i in range(len(stdata)):\n        for j in range(len(stdata[0])):\n            aggregate[j] = aggregate[j] + stdata[i][j]\n    return aggregate\ndef test_min_aggregate():\n    stdata = [(1, 2, 3), (2, 2, 2)]\n    stdata2 = [(1, 2, 3), (1, 2, 3), (1, 2, 3)]\n    assert min_aggregate(stdata) == (2, 2, 2)\n    assert min_aggregate(stdata2) == (1, 2, 3)\ndef max_sum_subarray(stdata):\n    '''\n    Write a function to find the sum of maximum aggregate from the list of tuples.\n    '''\n    # input: [(1, 2, 3), (2, 2, 2)]\n    # output: 6\n    aggregate = [0 for i in range(len(stdata[0]))]\n    for i in range(len(stdata)):\n        for j in range(len(stdata[0])):\n            aggregate[j] = aggregate[j] + stdata[i][j]\n    for i in range(1, len(aggregate)):\n        for j in range(i):\n            if aggregate[i] < aggregate[j]:\n                aggregate[i], aggregate[j] = aggregate[j], aggregate[i]\n    return aggregate[len(aggregate) - 1]\ndef test_max_sum_subarray():\n    stdata = [(1, 2, 3), (2, 2, 2)]\n    assert max_sum_subarray(stdata) == 6\ndef min_sum_subarray(stdata):\n    '''\n    Write a function to find the sum of minimum aggregate from the list of tuples.\n    '''\n    # input: [(1, 2, 3), (2, 2, 2)]\n    # output: 3\n    aggregate = [100000000 for i in range(len(stdata[0]))]\n    for i in range(len(stdata)):\n        for j in range(len(stdata[0])):\n            aggregate[j] = aggregate[j] + stdata[i][j]\n    for i in range(1, len(aggregate)):\n        for j in range(i):\n            if aggregate[i] > aggregate[j]:\n                aggregate[i], aggregate[j] = aggregate[j], aggregate[i]\n    return aggregate[len(aggregate) - 1]\ndef test_min_sum_subarray():\n    stdata = [(1, 2, 3), (2, 2, 2)]\n    assert min_sum_subarray(stdata) == 3\ndef max_subarray(stdata):\n    '''\n    Write a function to find the maximum sum subarray from the list of tuples.\n    '''\n    # input: [(1, 2, 3), (2, 2, 2)]\n    # output: 6\n    sums = [0 for i in range(len(stdata[0]))]\n    for i in range(len(stdata)):\n        for j in range(len(stdata[0])):\n            sums[j] = sums[j] + stdata[i][j]\n    for i in range(1, len(sums)):\n        for j in range(i):\n            if sums[i] < sums[j]:\n                sums[i], sums[j] = sums[j], sums[i]\n    return sums[len(sums) - 1]\ndef test_max_subarray():\n    stdata = [(1, 2, 3), (2, 2, 2)]\n    assert max_subarray(stdata) == 6\ndef min_subarray(stdata):\n    '''\n    Write a function to find the minimum sum subarray from the list of tuples.\n    '''\n    # input: [(1, 2, 3), (2, 2, 2)]\n    # output: 3\n    sums = [100000000 for i in range(len(stdata[0]))]\n    for i in range(len(stdata)):\n        for j in range(len(stdata[0])):\n            sums[j] = sums[j] + stdata[i][j]\n    for i in range(1, len(sums)):\n        for j in range(i):\n            if sums[i] > sums[j]:\n                sums[i], sums[j] = sums[j], sums[i]\n    return sums[len(sums) - 1]\ndef test_min_subarray():\n    stdata = [(1, 2, 3), (2, 2, 2)]\n    assert min_subarray(stdata) == 3\ndef max_sum_submatrix(stdata):\n    '''\n    Write a function to find the sum of maximum aggregate from the list of tuples.\n    '''\n    # input: [[(1, 2, 3), (2, 2, 2)], [(2, 2, 2), (3, 2, 3)]]\n    # output: 10\n    aggregate = [[0 for i in range(len(stdata[0][0]))] for j in range(len(stdata[0]))]\n    for i in range(len(stdata)):\n        for j in range(len(stdata[0])):\n            for k in range(len(stdata[0][0])):\n                aggregate[j][k] = aggregate[j][k] + stdata[i][j][k]\n    for i in range(1, len(aggregate)):\n        for j in range(i):\n            for k in range(len(aggregate[0])):\n                if aggregate[i][k] < aggregate[j][k]:\n                    aggregate[i][k], aggregate[j][k] = aggregate[j][k], aggregate[i][k]\n    return aggregate[len(aggregate) - 1][len(aggregate[0]) - 1]\ndef test_max_sum_submatrix():\n    stdata = [[(1, 2, 3), (2, 2, 2)], [(2, 2, 2), (3, 2, 3)]]\n    assert max_sum_submatrix(stdata) == 10\ndef min_sum_submatrix(stdata):\n    '''\n    Write a function to find the sum of minimum aggregate from the list of tuples.\n    '''\n    # input: [[(1, 2, 3), (2, 2, 2)], [(2, 2, 2), (3, 2, 3)]]\n    # output: 3\n    aggregate = [[100000000 for i in range(len(stdata[0][0]))] for j in range(len(stdata[0]))]\n    for i in range(len(stdata)):\n        for j in range(len(stdata[0])):\n            for k in range(len(stdata[0][0])):\n                aggregate[j][k] = aggregate[j][k] + stdat",
        "num_ids": 145
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    gv = defaultdict(int)\n    max_gv = 0\n    for tup in stdata:\n        gv[tup[0]] += tup[1]\n        if gv[tup[0]] > max_gv:\n            max_gv = gv[tup[0]]\n    return max_gv\n",
        "num_ids": 84
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = tuple()\n    t = tuple()\n    for _,_,v in stdata:\n        t += (v,)\n    result = max(t)\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(stdata, key = lambda x: x[2])\n    \ndef max_pair(stdata):\n    '''\n    Write a function to calculate the maximum pair of tuple from the list of tuples.\n    '''\n    list = []\n    for a,b,c in stdata:\n        list.append(c)\n    return max(list)\n",
        "num_ids": 34
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = defaultdict(list)\n    for k,v in stdata:\n        if k not in result:\n            result[k] = v\n        else:\n            result[k] = max(result[k],v)\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    def count_bits(n):\n        return n * (n + 1) / 2\n    def is_same(a, b):\n        return a == b\n    for i in range(2, n + 1):\n        for j in range(2 ** i):\n            if is_same(sum(map(int, bin(j)[2:])), sum(map(int, bin(2 ** n - 1 - j)[2:]))):\n                count += 1\n    return count\n",
        "num_ids": 119
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    t = {}\n    for i in range(2,n+1):\n        t[i,0] = 1\n        t[i,1] = 1\n    for i in range(3,n+1):\n        for j in range(2,i):\n            t[i,j] = t[i-1,j-1] + t[i-j,j]\n    return t[n,n]\n",
        "num_ids": 101
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    return count_binary_seq_helper(n, n, n, {}, 0)\n",
        "num_ids": 26
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    \n    def is_equal(n,count): \n        if n == 0: \n            return True \n        if n == 1: \n            return False \n        if n == 2: \n            if count == 1: \n                return True \n            else: \n                return False \n        for i in range(2,n): \n            if is_equal(i,count-1) and is_equal(n-i,count): \n                return True \n        return False \n    \n    return is_equal(n,n//2)\n",
        "num_ids": 137
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return count_binary_seq(n-1) + count_binary_seq(n-2)\n",
        "num_ids": 48
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if i*2+i == (2**n-1)*2:\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    result = [0]\n    for i in range(0, n+1):\n        result.append(result[-1]+i)\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        count=0\n        for i in range(2**n):\n            if bin(i)[2:]==bin(i-1)[-n:]:\n                count+=count_binary_seq(n-1)\n        return count\n",
        "num_ids": 83
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return count_binary_seq(n-1) + count_binary_seq(n-2)\n",
        "num_ids": 48
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n,k):\n        if k==0:\n            return 1\n        if n==0:\n            return 0\n        return count(n-1,k-1) + count(n-1,k)\n    return count(n,n)\n",
        "num_ids": 64
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n",
        "num_ids": 37
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n    \n",
        "num_ids": 39
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.itervalues())\n",
        "num_ids": 44
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1 + dict_depth(value)\n        else:\n            depth += 1\n    return depth\n",
        "num_ids": 53
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n",
        "num_ids": 37
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n",
        "num_ids": 37
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # assert type(d) == type({})\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 52
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([dict_depth(x) for x in d.values()]) + 1\n",
        "num_ids": 23
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def key_depth(d):\n        if not isinstance(d, dict):\n            return 0\n        return max(key_depth(value) for value in d.values()) + 1\n",
        "num_ids": 46
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.itervalues())\n",
        "num_ids": 40
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    key = arr[index]\n    for i in range(len(ranges)) :\n        if ranges[i][0] <= key <= ranges[i][1] :\n            # print i\n            return rotations[i]\n",
        "num_ids": 55
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges) :\n        arr[index] = (arr[index] + rotations) % len(arr)\n    return arr[index]\n",
        "num_ids": 41
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    max_ranges = max(ranges)\n    for i in range(1,max_ranges+1) :\n        if i in ranges :\n            rotations[i-1] = rotations[i-1]+1\n    \n    if rotations[index-1]==0 :\n        return arr[index-1]\n    else :\n        return arr[index-1]+find_Element(arr,ranges,rotations,index-rotations[index-1]-1)\n    \n    \n",
        "num_ids": 120
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    temp_arr = arr\n    temp_ranges = ranges\n    temp_rotations = rotations\n    \n    #if array is empty return -1 \n    if len(arr) == 0:\n        return -1\n        \n    #if index is out of range return -1\n    elif index > len(arr):\n        return -1\n        \n    elif index == len(arr):\n        return arr[-1]\n        \n    else:\n        while temp_rotations!= 0:\n            temp_arr = temp_arr[1:] + [temp_arr[0]]\n            temp_rotations -= 1\n        \n        if index < len(temp_arr):\n            return temp_arr[index]\n        else:\n            return -1\n            \n",
        "num_ids": 183
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    sum_arr = sum(arr)\n    if ranges[index] == 0:\n        return 0\n    elif ranges[index] == 1:\n        return arr[rotations[index]-1]\n    else :\n        return sum_arr - arr[rotations[index]-1] + arr[rotations[index]-2]\n",
        "num_ids": 87
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations%len(arr)\n    return arr[index+rotations]\n",
        "num_ids": 24
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # r = rotations\n    # x = (r+index)%len(arr)\n    # return arr[x]\n    \n    if rotations == 0 :\n        return arr[index]\n    \n    if rotations < 0 :\n        rotations += len(arr)\n    \n    if rotations >= len(arr) :\n        rotations = rotations % len(arr)\n    \n    return arr[rotations+(index)%len(arr)]\n",
        "num_ids": 112
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #total_rotations = sum(rotations)\n    #total_rotations = len(rotations)\n    total_rotations = len(rotations)\n    last_element = arr[total_rotations-1]\n    first_element = arr[0]\n    #mid = (total_rotations/2)\n",
        "num_ids": 78
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[index] == 0 :\n        return 0\n    else :\n        return find_Element(arr,ranges,rotations,index+1) + rotations[index] * ranges[index]\n",
        "num_ids": 50
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if arr[index] == 0 :\n        return \"Null\"\n    else :\n        return arr[rotations[index] + ranges[index] - 1]\n",
        "num_ids": 40
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for i in range(0, len(words)):\n        if words[i].startswith('p'):\n            result.append(words[i])\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word_list=[]\n    for word in words:\n        if word.startswith(\"p\"):\n            word_list.append(word)\n    return word_list\n",
        "num_ids": 44
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    result = filter(pattern.match, words)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p=re.compile('p')\n    for word in words:\n        if p.search(word):\n            return word\ndef start_withv(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'v'.\n    '''\n    v=re.compile('v')\n    for word in words:\n        if v.search(word):\n            return word\ndef word_split(words):\n    '''\n    Write a function that takes in a string of words, \n    and returns a list of words that are splitted using spaces.\n    '''\n    split_word=re.compile('\\s+')\n    return split_word.split(words)\ndef word_split2(words):\n    '''\n    Write a function that takes in a string of words, \n    and returns a list of words that are splitted using spaces. \n    (Hint: split() splits on space, not on string characters)\n    '''\n    split_word2=re.compile('\\s+')\n    return split_word2.split(words)\ndef str_len(string):\n    '''\n    Write a function that takes in a string, \n    and returns the length of the string. \n    '''\n    len_string=re.compile('\\s+')\n    return len_string.split(string)\ndef word_split3(string):\n    '''\n    Write a function that takes in a string, \n    and returns a list of words that are splitted using spaces. \n    (Hint: split() splits on space, not on string characters)\n    '''\n    len_string=re.compile('\\s+')\n    return len_string.split(string)\ndef find_min(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the smallest number in the list. \n    '''\n    min_num=re.compile('\\s+')\n    return min_num.split(nums)\ndef find_min2(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the smallest number in the list. \n    '''\n    return min(nums)\ndef find_max(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the largest number in the list. \n    '''\n    max_num=re.compile('\\s+')\n    return max_num.split(nums)\ndef find_max2(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the largest number in the list. \n    '''\n    return max(nums)\ndef is_longer(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    if len(nums) < 2:\n        return False\n    else:\n        return nums[0] > nums[1]\ndef is_longer2(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    return max(nums) > min(nums)\ndef is_longer3(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    return max(nums) > min(nums)\ndef is_longer4(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    if len(nums) < 2:\n        return False\n    else:\n        return nums[0] > nums[1]\ndef is_longer5(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    return max(nums) > min(nums)\ndef is_longer6(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    if len(nums) < 2:\n        return False\n    else:\n        return nums[0] > nums[1]\ndef is_longer7(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    return max(nums) > min(nums)\ndef is_longer8(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    if len(nums) < 2:\n        return False\n    else:\n        return nums[0] > nums[1]\ndef is_longer9(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    return max(nums) > min(nums)\ndef is_longer10(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    if len(nums) < 2:\n        return False\n    else:\n        return nums[0] > nums[1]\ndef is_longer11(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    if len(nums) < 2:\n        return False\n    else:\n        return nums[0] > nums[1]\ndef is_longer12(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    if len(nums) < 2:\n        return False\n    else:\n        return nums[0] > nums[1]\ndef is_longer13(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    if len(nums) < 2:\n        return False\n    else:\n        return nums[0] > nums[1]\ndef is_longer14(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    if len(nums) < 2:\n        return False\n    else:\n        return nums[0] > nums[1]\ndef is_longer15(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    if len(nums) < 2:\n        return False\n    else:\n        return nums[0] > nums[1]\ndef is_longer16(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    if len(nums) < 2:\n        return False\n    else:\n        return nums[0] > nums[1]\ndef is_longer17(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    if len(nums) < 2:\n        return False\n    else:\n        return nums[0] > nums[1]\ndef is_longer18(nums):\n    '''\n    Write a function that takes in a list of numbers, \n    and returns the first value that is longer than the second value. \n    '''\n    i",
        "num_ids": 4
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if len(words) == 0:\n        return []\n    elif len(words) == 1:\n        if words[0][0] == 'p':\n            return words\n        else:\n            return []\n    elif len(words) == 2:\n        if words[0][0] == 'p':\n            if words[1][0] == 'p':\n                return [words[1]]\n            else:\n                return [words[0], words[1]]\n        elif words[1][0] == 'p':\n            return [words[0]]\n        else:\n            return []\n    else:\n        if words[0][0] == 'p':\n            if words[1][0] == 'p':\n                if words[2][0] == 'p':\n                    return [words[2]]\n                else:\n                    return [words[0], words[1], words[2]]\n            elif words[1][0]!= 'p':\n                return [words[0], words[1]]\n        elif words[1][0]!= 'p':\n            if words[2][0] == 'p':\n                if words[3][0] == 'p':\n                    return [words[3]]\n                else:\n                    return [words[0], words[1], words[2], words[3]]\n            elif words[2][0]!= 'p':\n                if words[3][0] == 'p':\n                    return [words[0], words[1], words[2]]\n                else:\n                    return [words[0], words[1], words[2], words[3]]\n        else:\n            return []\n",
        "num_ids": 390
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # c=0\n    # for i in words:\n    #     if i[0]=='p':\n    #         c=c+1\n    #         print i\n    #     else:\n    #         pass\n    # print c\n    # print \"count=\",c\n    # return words\n    return [i for i in words if i[0]=='p']\ndef StartWithP(words):\n    return [i for i in words if i[0]=='p']\n",
        "num_ids": 118
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [x for x in words if x.startswith('p')]\ndef start_withvowel(words):\n    '''\n    Write a function to return two words from a list of words starting with vowel\n    '''\n    return [x for x in words if x.startswith('a') or x.startswith('e') or x.startswith('i') or x.startswith('o') or x.startswith('u')]\ndef count_vowel(words):\n    '''\n    Write a function to return the number of vowels in a given word.\n    '''\n    return sum(1 for x in words if x.startswith('a') or x.startswith('e') or x.startswith('i') or x.startswith('o') or x.startswith('u'))\ndef count_letter(words,letter):\n    '''\n    Write a function to return the number of letters in a given word.\n    '''\n    return sum(1 for x in words if x.startswith(letter))\ndef get_letter(words,index):\n    '''\n    Write a function to return a single letter from a word.\n    '''\n    return words[index]\ndef remove_letter(words,letter):\n    '''\n    Write a function to remove all letters from a word.\n    '''\n    return re.sub('[a-z]','',words)\ndef is_pangram(words):\n    '''\n    Write a function to check if a string is pangram or not.\n    '''\n    return set(words.lower())==set('abcdefghijklmnopqrstuvwxyz')\ndef find_repeated(words):\n    '''\n    Write a function to find and return all the repeated characters in a given string.\n    '''\n    return [x for x in words if words.count(x)>1]\ndef count_repeat(words):\n    '''\n    Write a function to count and return the number of repeated characters in a given string.\n    '''\n    return len(find_repeated(words))\ndef get_first_letter(words):\n    '''\n    Write a function to return the first letter from a given word.\n    '''\n    return get_letter(words,0)\ndef all_different(words):\n    '''\n    Write a function to return all the different characters in a given string.\n    '''\n    return sorted(set(words))\ndef get_all_even(numbers):\n    '''\n    Write a function to return all the even numbers in a given list.\n    '''\n    return [x for x in numbers if x%2==0]\ndef replace_character(words,old_letter,new_letter):\n    '''\n    Write a function to replace all the occurences of a letter in a string with another given letter.\n    '''\n    return words.replace(old_letter,new_letter)\ndef reverse_string(words):\n    '''\n    Write a function to return the reverse of a given string.\n    '''\n    return words[::-1]\ndef remove_vowels(words):\n    '''\n    Write a function to remove all the vowels from a given string.\n    '''\n    return re.sub('[a-z]','',words)\ndef get_capitalization(words):\n    '''\n    Write a function to return the capitalization of a given word.\n    '''\n    return (words[0].upper()+words[1:]) if words[0].islower() else words\ndef get_letter_count(words):\n    '''\n    Write a function to return the number of letters and the number of vowels in a given string.\n    '''\n    return len(words),sum(1 for x in words if x.startswith('a') or x.startswith('e') or x.startswith('i') or x.startswith('o') or x.startswith('u'))\ndef strip_vowels(words):\n    '''\n    Write a function to strip all vowels from a given string.\n    '''\n    return re.sub('[a-z]','',words)\ndef slice_string(words,start_index,end_index):\n    '''\n    Write a function to slice a given string from a given start index to a given end index.\n    '''\n    return words[start_index:end_index]\ndef rotate_string(words,rotate_by):\n    '''\n    Write a function to return a given string with the characters in a given string rotated by a given number of times.\n    '''\n    return (words[rotate_by%len(words):]+words[:rotate_by%len(words)]).rstrip()\ndef is_palindrome(words):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    return words==words[::-1]\ndef find_longest_word(words):\n    '''\n    Write a function to return the longest word in a given list of words.\n    '''\n    return max(words,key=len)\ndef get_repeat(words,count):\n    '''\n    Write a function to return the given string with the number of repetitions given.\n    '''\n    return words*count\ndef count_string(words,substring):\n    '''\n    Write a function to count and return the number of occurrences of a substring in a given string.\n    '''\n    return words.count(substring)\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    return n>1 and all(n%i for i in range(2,int(n**0.5)+1))\ndef palindrome_sentence(sentence):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    return sentence==sentence[::-1]\ndef check_numbers_divisible(numbers):\n    '''\n    Write a function to check if all the numbers in a given list are divisible by a given number.\n    '''\n    return all(x%numbers[0]==0 for x in numbers)\ndef get_all_strings(words,length):\n    '''\n    Write a function to return all the possible combinations of given string.\n    '''\n    return [''.join(x) for x in itertools.product(words,repeat=length)]\ndef longest_common_prefix(strings):\n    '''\n    Write a function to return the longest common prefix in a list of strings.\n    '''\n    return max(strings,key=len)\ndef get_longest_string(strings):\n    '''\n    Write a function to return the longest string in a list of strings.\n    '''\n    return max(strings,key=len)\ndef is_palindrome_permutation(words):\n    '''\n    Write a function to check if a given string is a permutation of a palindrome or not.\n    '''\n    return sorted(words)==sorted(words)[::-1]\ndef is_anagram(words,words2):\n    '''\n    Write a function to check if two strings are anagram or not.\n    '''\n    return sorted(words)==sorted(words2)\ndef convert_to_base_2(num,base):\n    '''\n    Write a function to convert a given number to a string in a given base.\n    '''\n    converted = []\n    while num:\n        remainder = num%base\n        converted.insert(0,str(remainder))\n        num = num//base\n    return ''.join(converted)\ndef get_longest_non_repeating_character(words):\n    '''\n    Write a function to return the longest non repeating character in a given string.\n    '''\n    max_letter,max_count = max(zip(words,itertools.count()),key=lambda x:x[1])\n    return max_letter\ndef print_digits_of_a_number(num):\n    '''\n    Write a function to print the digits of a number.\n    '''\n    return ''.join(str(x) for x in str(num))\ndef longest_common_substring(words):\n    '''\n    Write a function to return the longest common substrin",
        "num_ids": 13
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p.*')\n    return [w for w in words if pattern.match(w)]\n",
        "num_ids": 33
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    def word_beforep(words):\n        p=[]\n        for word in words:\n            if word[0]=='p':\n                p.append(word)\n        return p\n    def word_afterp(words):\n        a=[]\n        for word in words:\n            if word[0]=='p':\n                a.append(word)\n        return a\n    return [word_beforep(words),word_afterp(words)]\ndef list_of_words(inp):\n    '''\n    Write a function to return a list of words from a sentence of input using RegEx.\n    '''\n    def list_of_words(inp):\n        p=re.findall(r'\\w+',inp)\n        return p\n    return list_of_words(inp)\ndef word_count(inp):\n    '''\n    Write a function to return the word count from a sentence of input using RegEx.\n    '''\n    def word_count(inp):\n        return len(list_of_words(inp))\n    return word_count(inp)\ndef word_of_length(inp,length):\n    '''\n    Write a function to return the word of a certain length from a sentence of input using RegEx.\n    '''\n    def word_of_length(inp,length):\n        a=list_of_words(inp)\n        p=[]\n        for word in a:\n            if len(word)==length:\n                p.append(word)\n        return p\n    return word_of_length(inp,length)\ndef first_and_last_word(inp):\n    '''\n    Write a function to return the first and last word from a sentence of input using RegEx.\n    '''\n    def first_and_last_word(inp):\n        a=list_of_words(inp)\n        return [a[0],a[-1]]\n    return first_and_last_word(inp)\ndef word_count_dict(inp):\n    '''\n    Write a function to return the word count from a sentence of input using RegEx and dictionary.\n    '''\n    def word_count_dict(inp):\n        a=list_of_words(inp)\n        return dict([(word,a.count(word)) for word in a])\n    return word_count_dict(inp)\ndef word_count_dict_higher(inp):\n    '''\n    Write a function to return the word count from a sentence of input using RegEx and dictionary.\n    '''\n    def word_count_dict_higher(inp):\n        a=list_of_words(inp)\n        return {word:a.count(word) for word in a if a.count(word)>1}\n    return word_count_dict_higher(inp)\ndef even_length_words(inp):\n    '''\n    Write a function to return the even length words from a sentence of input using RegEx.\n    '''\n    def even_length_words(inp):\n        a=list_of_words(inp)\n        p=[]\n        for word in a:\n            if len(word)%2==0:\n                p.append(word)\n        return p\n    return even_length_words(inp)\ndef first_10_words(inp):\n    '''\n    Write a function to return the first 10 words from a sentence of input using RegEx.\n    '''\n    def first_10_words(inp):\n        a=list_of_words(inp)\n        return a[:10]\n    return first_10_words(inp)\ndef letters_in_word(inp):\n    '''\n    Write a function to return the letters from a word in a sentence of input using RegEx.\n    '''\n    def letters_in_word(inp):\n        a=list_of_words(inp)\n        return [char for char in a[0]]\n    return letters_in_word(inp)\ndef digits_in_word(inp):\n    '''\n    Write a function to return the digits from a word in a sentence of input using RegEx.\n    '''\n    def digits_in_word(inp):\n        a=list_of_words(inp)\n        return [char for char in a[0] if char.isdigit()]\n    return digits_in_word(inp)\ndef special_letters_in_word(inp):\n    '''\n    Write a function to return the special letters from a word in a sentence of input using RegEx.\n    '''\n    def special_letters_in_word(inp):\n        a=list_of_words(inp)\n        return [char for char in a[0] if char.isalpha()]\n    return special_letters_in_word(inp)\ndef list_of_digits(inp):\n    '''\n    Write a function to return a list of digits from a sentence of input using RegEx.\n    '''\n    def list_of_digits(inp):\n        return [int(word) for word in inp.split() if word.isdigit()]\n    return list_of_digits(inp)\ndef sum_of_list_of_digits(inp):\n    '''\n    Write a function to return the sum of a list of digits from a sentence of input using RegEx.\n    '''\n    def sum_of_list_of_digits(inp):\n        return sum(list_of_digits(inp))\n    return sum_of_list_of_digits(inp)\ndef sum_of_digits(inp):\n    '''\n    Write a function to return the sum of digits from a sentence of input using RegEx.\n    '''\n    def sum_of_digits(inp):\n        return sum([int(word) for word in inp.split() if word.isdigit()])\n    return sum_of_digits(inp)\ndef digits_in_sentence(inp):\n    '''\n    Write a function to return the digits from a sentence of input using RegEx.\n    '''\n    def digits_in_sentence(inp):\n        return sum([int(word) for word in inp.split() if word.isdigit()])\n    return digits_in_sentence(inp)\ndef list_of_words_only_starting_with_p(inp):\n    '''\n    Write a function to return a list of words from a sentence of input using RegEx and dictionary.\n    '''\n    def list_of_words_only_starting_with_p(inp):\n        a=list_of_words(inp)\n        p=[]\n        for word in a:\n            if word[0]=='p':\n                p.append(word)\n        return p\n    return list_of_words_only_starting_with_p(inp)\ndef word_and_digits_in_sentence(inp):\n    '''\n    Write a function to return the word and digits from a sentence of input using RegEx.\n    '''\n    def word_and_digits_in_sentence(inp):\n        return [list_of_words(inp)[i]+' '+digits_in_word(inp) for i in range(len(list_of_words(inp))) if digits_in_word(inp)]\n    return word_and_digits_in_sentence(inp)\ndef word_and_digits_in_sentence_only_starting_with_p(inp):\n    '''\n    Write a function to return the word and digits from a sentence of input using RegEx and dictionary.\n    '''\n    def word_and_digits_in_sentence_only_starting_with_p(inp):\n        return [list_of_words(inp)[i]+' '+digits_in_word(inp) for i in range(len(list_of_words(inp))) if digits_in_word(inp)[0]=='p']\n    return word_and_digits_in_sentence_only_starting_with_p(inp)\ndef word_and_digits_in_sentence_only_ending_with_p(inp):\n    '''\n    Write a function to return th",
        "num_ids": 9
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i.startswith(\"p\"):\n            print(i)\ndef add_to_end(words):\n    '''\n    Write a function to add an 'e' to a word that is at the end of a list of words.\n    '''\n    for i in words:\n        if i.endswith(\"e\"):\n            print(i + \"e\")\n",
        "num_ids": 30
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == index:\n        return 0\n    if a[n] > k:\n        return max_sum_increasing_subseq(a, n+1, index, k)\n    return max(a[n]+max_sum_increasing_subseq(a, n+1, index, k), max_sum_increasing_subseq(a, n+1, index, k-1))\n",
        "num_ids": 94
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # a is a list of integers and n is the size of it\n    # index is the element at which we want to start our search\n    # k is the element after index (or k-th element)\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return a[0]\n    else:\n        result = -float('inf')\n        for i in range(0, index+1):\n            result = max(result, max_sum_increasing_subseq(a, n-1, i, k-1) + a[n-1])\n        return result\n",
        "num_ids": 143
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (k == n):\n        return a[k]\n",
        "num_ids": 17
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k <= index:\n        return a[index]\n    max_sum = -sys.maxsize - 1\n    for i in range(index+1, n):\n        if a[i] > a[index] and a[i] + max_sum > max_sum + a[i]:\n            max_sum = a[i] + max_sum\n    return max_sum\n",
        "num_ids": 103
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == index:\n        return a[index]\n    elif n == 1:\n        return a[0]\n    elif k > index:\n        return 0\n    else:\n        return max(max_sum_increasing_subseq(a, n-1, index, k) + a[n-1], max_sum_increasing_subseq(a, n-1, index-1, k))\n",
        "num_ids": 99
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == index:\n        return 0\n    if dp[n][k]!= -1:\n        return dp[n][k]\n    if k < a[n]:\n        dp[n][k] = max_sum_increasing_subseq(a, n, index, k + 1)\n    else:\n        dp[n][k] = max(a[n] + max_sum_increasing_subseq(a, n + 1, index, k), max_sum_increasing_subseq(a, n + 1, index, k))\n    return dp[n][k]\n",
        "num_ids": 143
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n - index:\n        return 0\n    if k == n - index:\n        return a[index]\n    elif k == index:\n        return a[index]\n    else:\n        t = max_sum_increasing_subseq(a, n, index + 1, k)\n        if t > max_sum_increasing_subseq(a, n, index + 1, k + 1):\n            t = max_sum_increasing_subseq(a, n, index + 1, k + 1)\n        return t + a[index]\n",
        "num_ids": 133
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[index]\n    if k > index:\n        return a[index]\n",
        "num_ids": 30
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n or k < 1:\n        return 0\n    if index == n and k == 1:\n        return a[n-1]\n    if index == n and k!= 1:\n        return 0\n",
        "num_ids": 53
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\ndef tuple_reverse(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef tuple_sort(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    return tuple(sorted(tuplex))\ndef tuple_uniquify(tuplex):\n    '''\n    Write a function to uniquify a tuple.\n    '''\n    tuplex=list(tuplex)\n    tuplex = list(set(tuplex))\n    return tuple(tuplex)\ndef tuple_max(tuplex):\n    '''\n    Write a function to get the maximum value from a tuple.\n    '''\n    return max(tuplex)\ndef tuple_min(tuplex):\n    '''\n    Write a function to get the minimum value from a tuple.\n    '''\n    return min(tuplex)\ndef tuple_unzip(tuplex):\n    '''\n    Write a function to unzip a tuple into two tuples.\n    '''\n    return tuple(zip(*tuplex))\ndef tuple_count(tuplex):\n    '''\n    Write a function to count the number of tuples with the same number.\n    '''\n    return len(tuplex)\ndef tuple_len(tuplex):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    return len(tuplex)\ndef tuple_index(tuplex):\n    '''\n    Write a function to get the index of a tuple.\n    '''\n    return tuplex.index(tuplex[0])\ndef tuple_insert(tuplex, index, value):\n    '''\n    Write a function to insert a value at a given index of a tuple.\n    '''\n    return tuple(tuplex[:index]) + (value,) + tuple(tuplex[index:])\ndef tuple_remove(tuplex, value):\n    '''\n    Write a function to remove a value from a tuple.\n    '''\n    return tuple(x for x in tuplex if x!= value)\ndef tuple_join(tuplex, sep):\n    '''\n    Write a function to join a tuple using a separator.\n    '''\n    return sep.join(tuplex)\ndef tuple_tuple(tuplex, n):\n    '''\n    Write a function to get n-tuples from a tuple.\n    '''\n    return tuple(tuplex[x:x+n] for x in range(len(tuplex) - n + 1))\ndef tuple_tuple_1(tuplex):\n    '''\n    Write a function to get the first tuple of a tuple.\n    '''\n    return tuplex[0]\ndef tuple_tuple_2(tuplex):\n    '''\n    Write a function to get the second tuple of a tuple.\n    '''\n    return tuplex[1]\ndef tuple_tuple_3(tuplex):\n    '''\n    Write a function to get the third tuple of a tuple.\n    '''\n    return tuplex[2]\ndef tuple_tuple_4(tuplex):\n    '''\n    Write a function to get the forth tuple of a tuple.\n    '''\n    return tuplex[3]\ndef tuple_tuple_5(tuplex):\n    '''\n    Write a function to get the fifth tuple of a tuple.\n    '''\n    return tuplex[4]\ndef tuple_tuple_6(tuplex):\n    '''\n    Write a function to get the sixth tuple of a tuple.\n    '''\n    return tuplex[5]\ndef tuple_tuple_7(tuplex):\n    '''\n    Write a function to get the seventh tuple of a tuple.\n    '''\n    return tuplex[6]\ndef tuple_tuple_8(tuplex):\n    '''\n    Write a function to get the eighth tuple of a tuple.\n    '''\n    return tuplex[7]\ndef tuple_tuple_9(tuplex):\n    '''\n    Write a function to get the ninth tuple of a tuple.\n    '''\n    return tuplex[8]\ndef tuple_tuple_10(tuplex):\n    '''\n    Write a function to get the tenth tuple of a tuple.\n    '''\n    return tuplex[9]\ndef tuple_tuple_11(tuplex):\n    '''\n    Write a function to get the eleventh tuple of a tuple.\n    '''\n    return tuplex[10]\ndef tuple_tuple_12(tuplex):\n    '''\n    Write a function to get the twelfth tuple of a tuple.\n    '''\n    return tuplex[11]\ndef tuple_tuple_13(tuplex):\n    '''\n    Write a function to get the thirteenth tuple of a tuple.\n    '''\n    return tuplex[12]\ndef tuple_tuple_14(tuplex):\n    '''\n    Write a function to get the fourteenth tuple of a tuple.\n    '''\n    return tuplex[13]\ndef tuple_tuple_15(tuplex):\n    '''\n    Write a function to get the fifteenth tuple of a tuple.\n    '''\n    return tuplex[14]\ndef tuple_tuple_16(tuplex):\n    '''\n    Write a function to get the sixteenth tuple of a tuple.\n    '''\n    return tuplex[15]\ndef tuple_tuple_17(tuplex):\n    '''\n    Write a function to get the seventeenth tuple of a tuple.\n    '''\n    return tuplex[16]\ndef tuple_tuple_18(tuplex):\n    '''\n    Write a function to get the eighteenth tuple of a tuple.\n    '''\n    return tuplex[17]\ndef tuple_tuple_19(tuplex):\n    '''\n    Write a function to get the nineteenth tuple of a tuple.\n    '''\n    return tuplex[18]\ndef tuple_tuple_20(tuplex):\n    '''\n    Write a function to get the twentieth tuple of a tuple.\n    '''\n    return tuplex[19]\ndef tuple_tuple_21(tuplex):\n    '''\n    Write a function to get the eleventieth tuple of a tuple.\n    '''\n    return tuplex[20]\ndef tuple_tuple_22(tuplex):\n    '''\n    Write a function to get the twenty-first tuple of a tuple.\n    '''\n    return tuplex[21]\ndef tuple_tuple_23(tuplex):\n    '''\n    Write a function to get the twenty-second tuple of a tuple.\n    '''\n    return tuplex[22]\ndef tuple_tuple_24(tuplex):\n    '''\n    Write a function to get the twenty-third tuple of a tuple.\n    '''\n    return tuplex[23]\ndef tuple_tuple_25(tuplex):\n    '''\n    Write a function to get the twenty-fourth tuple of a tuple.\n    '''\n    return tuplex[24]\ndef tuple_tuple_26(tuplex):\n    '''\n    Write a function to get the twenty-fifth tuple of a tuple.\n    '''\n    return tuplex[25]\ndef tuple_tuple_27(tuplex):\n    '''\n    Write a function to get the twenty-sixth tuple of a tuple.\n    '''\n    return tuplex[26]\ndef tuple_tuple_28(tuplex):\n    '''\n    Write a function to get the twenty-seventh tuple of a tuple.\n    '''\n    return tuplex[27]\ndef tuple_tuple_29(tuplex):\n    '''\n    Write a function to get the twenty-eighth tuple of a tuple.\n    '''\n    return tuplex[28]\ndef tuple_tuple_30(tuplex):\n    '''\n    Write a function to get the twenty-ninth tuple of a tuple.\n    '''\n    return tuplex[29]\ndef tuple_tuple_31(tuplex)",
        "num_ids": 23
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n",
        "num_ids": 13
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    s=deepcopy(tuplex)\n    print(s)\n    print('-'*30)\n    print(type(s))\n    print('-'*30)\n    \n    try:\n        colon=s[m-1][n-1]\n    except:\n        colon=None\n    print(colon)\n    return colon\n",
        "num_ids": 85
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    i=0\n    if m<=n:\n        for x in tuplex[m:n+1]:\n            print(tuplex[i],end='')\n            i+=1\n        print()\n    else:\n        i=0\n        for x in tuplex[n:m+1]:\n            print(tuplex[i],end='')\n            i+=1\n        print()\n",
        "num_ids": 100
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a = tuplex[m]\n    tuplex = tuplex[:m] + tuplex[m+1:]\n    return a,tuplex\n",
        "num_ids": 42
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=(tuplex[:m],tuplex[m:])\n    return tuplex\ndef main():\n    '''\n    A tuple is a sequence of immutable Python objects.\n    A tuple consists of a number of values separated by commas,\n    each separated from the next by a comma and a space.\n    '''\n    # Python3 code here creating a tuple from user input\n    #user_input = input(\"Enter a tuple: \")\n    #print (user_input)\n    #user_tuple = eval(user_input)\n    #print (user_tuple)\n    #x = 1,2,3,4,5,6,7,8,9,10\n    #print (x)\n    #print (type(x))\n    #x = 1,\n    #print (x)\n    #print (type(x))\n    #x = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    #print (x)\n    #print (type(x))\n    #x = (1,2,3,4,5,6,7,8,9,10)\n    #print (x)\n    #print (type(x))\n    #x = 1,2,3,4,5,6,7,8,9,10\n    #print (x)\n    #print (type(x))\n    #x = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    #print (x)\n    #print (type(x))\n    #x = (1,2,3,4,5,6,7,8,9,10)\n    #print (x)\n    #print (type(x))\n    #x = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #print (x)\n    #print (type(x))\n    #x = (",
        "num_ids": 1927
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = ()\n    for i in range(m,n+1):\n        colon += tuplex[i],\n    return colon\n",
        "num_ids": 36
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if (m,n) in tuplex:\n        return tuplex[m,n]\n    else:\n        return None\n",
        "num_ids": 34
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\ndef colon_listx(listx,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    return listx[m:n]\ndef colon_stringx(stringx,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    return stringx[m:n]\ndef colon_list(listx,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    return listx[m:n]\ndef id(x):\n    '''\n    Write a function to get the id of a variable.\n    '''\n    return id(x)\ndef append(listx,m,n):\n    '''\n    Write a function to append m to n in a list.\n    '''\n    return listx+[m]\ndef append_if(listx,m,n,cond):\n    '''\n    Write a function to append m to n in a list only if cond is True.\n    '''\n    if cond:\n        listx+=[m]\n    return listx\ndef extend_with(listx,m,n):\n    '''\n    Write a function to extend listx with m to n.\n    '''\n    return listx+m\ndef extend_with_if(listx,m,n,cond):\n    '''\n    Write a function to extend listx with m to n only if cond is True.\n    '''\n    if cond:\n        listx+=[m]\n    return listx\ndef insert(listx,m,n):\n    '''\n    Write a function to insert m to n in a list.\n    '''\n    return listx[:m]+[n]+listx[m:]\ndef insert_if(listx,m,n,cond):\n    '''\n    Write a function to insert m to n in a list only if cond is True.\n    '''\n    if cond:\n        listx+=[m]\n    return listx\ndef flatten_list(listx):\n    '''\n    Write a function to flatten a list.\n    '''\n    return [x for sublist in listx for x in sublist]\ndef flatten_list_comprehension(listx):\n    '''\n    Write a function to flatten a list using list comprehension.\n    '''\n    return [x for sublist in listx for x in sublist]\ndef flatten_list_comprehension_if(listx,cond):\n    '''\n    Write a function to flatten a list using list comprehension only if cond is True.\n    '''\n    if cond:\n        return [x for sublist in listx for x in sublist]\ndef flatten_list_of_list(listx):\n    '''\n    Write a function to flatten a list of list.\n    '''\n    return [x for sublist in listx for x in sublist]\ndef flatten_list_of_list_comprehension(listx):\n    '''\n    Write a function to flatten a list of list using list comprehension.\n    '''\n    return [x for sublist in listx for x in sublist]\ndef flatten_list_of_list_comprehension_if(listx,cond):\n    '''\n    Write a function to flatten a list of list using list comprehension only if cond is True.\n    '''\n    if cond:\n        return [x for sublist in listx for x in sublist]\ndef flatten_list_of_list_comprehension_if_else(listx,cond):\n    '''\n    Write a function to flatten a list of list using list comprehension only if cond is True, and use the else statement.\n    '''\n    if cond:\n        return [x for sublist in listx for x in sublist]\n    else:\n        return []\ndef flatten_list_of_list_comprehension_if_else_else(listx,cond):\n    '''\n    Write a function to flatten a list of list using list comprehension only if cond is True, and use the else statement.\n    '''\n    if cond:\n        return [x for sublist in listx for x in sublist]\n    else:\n        return []\ndef flatten_list_of_tuple(listx):\n    '''\n    Write a function to flatten a list of tuple.\n    '''\n    return [x for sublist in listx for x in sublist]\ndef flatten_list_of_tuple_comprehension(listx):\n    '''\n    Write a function to flatten a list of tuple using list comprehension.\n    '''\n    return [x for sublist in listx for x in sublist]\ndef flatten_list_of_tuple_comprehension_if(listx,cond):\n    '''\n    Write a function to flatten a list of tuple using list comprehension only if cond is True.\n    '''\n    if cond:\n        return [x for sublist in listx for x in sublist]\n    else:\n        return []\ndef flatten_list_of_tuple_comprehension_if_else(listx,cond):\n    '''\n    Write a function to flatten a list of tuple using list comprehension only if cond is True, and use the else statement.\n    '''\n    if cond:\n        return [x for sublist in listx for x in sublist]\n    else:\n        return []\ndef flatten_list_of_tuple_comprehension_if_else_else(listx,cond):\n    '''\n    Write a function to flatten a list of tuple using list comprehension only if cond is True, and use the else statement.\n    '''\n    if cond:\n        return [x for sublist in listx for x in sublist]\n    else:\n        return []\ndef flatten_list_of_dict(listx):\n    '''\n    Write a function to flatten a list of dict.\n    '''\n    return [x for sublist in listx for x in sublist]\ndef flatten_list_of_dict_comprehension(listx):\n    '''\n    Write a function to flatten a list of dict using list comprehension.\n    '''\n    return [x for sublist in listx for x in sublist]\ndef flatten_list_of_dict_comprehension_if(listx,cond):\n    '''\n    Write a function to flatten a list of dict using list comprehension only if cond is True.\n    '''\n    if cond:\n        return [x for sublist in listx for x in sublist]\n    else:\n        return []\ndef flatten_list_of_dict_comprehension_if_else(listx,cond):\n    '''\n    Write a function to flatten a list of dict using list comprehension only if cond is True, and use the else statement.\n    '''\n    if cond:\n        return [x for sublist in listx for x in sublist]\n    else:\n        return []\ndef flatten_list_of_dict_comprehension_if_else_else(listx,cond):\n    '''\n    Write a function to flatten a list of dict using list comprehension only if cond is True, and use the else statement.\n    '''\n    if cond:\n        return [x for sublist in listx for x in sublist]\n    else:\n        return []\ndef extend_with_tuples(listx,m,n):\n    '''\n    Write a function to extend listx with tuples.\n    '''\n    listx+=tuple([m])\n    return listx\ndef extend_with_tuples_if(listx,m,n,cond):\n    '''\n    Write a function to extend listx with tuples only if cond is True.\n    '''\n    if cond:\n        listx+=tuple([m])\n    return listx\ndef extend_with_strings(listx,m,n):\n    '''\n    Write a function to extend listx with strings.\n    '''\n    listx+=string([m])\n    return listx\ndef extend_with_strings_if(listx,m,n,cond):\n    '''\n    Write a function to extend listx with strings only if cond is True.\n    '''\n    if cond:\n    ",
        "num_ids": 8
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    m=int(m)\n    n=int(n)\n    if m==1 and n==1:\n        tuplex[0][0]=4\n    elif m==1 and n>1:\n        for i in range(0,n-1):\n            tuplex[i][n-1]=4\n    elif m>1 and n==1:\n        for j in range(0,m-1):\n            tuplex[m-1][j]=4\n    elif m>1 and n>1:\n        for i in range(0,m-1):\n            for j in range(0,n-1):\n                tuplex[m-1][j]=4\n",
        "num_ids": 167
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    a = nums1[:N]\n    b = nums2[:N]\n    prod = [a[i] * b[i] for i in range(N)]\n    prod.sort(reverse=True)\n    return prod\n",
        "num_ids": 61
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    for n in nums1:\n        for m in nums2:\n            prod = n * m\n            if len(res) < N:\n                res.append(prod)\n            else:\n                if prod > res[N-1]:\n                    res[N-1] = prod\n    return res\n",
        "num_ids": 81
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    factor1 = 1\n    factor2 = 1\n    prod = 1\n",
        "num_ids": 20
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        temp1 = 1\n        for j in range(len(nums1)):\n            temp1 *= nums1[j]\n        temp2 = 1\n        for j in range(len(nums2)):\n            temp2 *= nums2[j]\n        products.append(temp1 * temp2)\n    return max(products)\n",
        "num_ids": 99
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        products.append(max(nums1[i], nums2[i]))\n    return products\n",
        "num_ids": 41
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    result = []\n    for i in range(N):\n        if len(nums1) == 0:\n            num = nums2[i]\n            num2 = nums2[:i] + nums2[i+1:]\n            result.append(num*num2[-1])\n        elif len(nums2) == 0:\n            num = nums1[i]\n            num1 = nums1[:i] + nums1[i+1:]\n            result.append(num*num1[-1])\n        elif nums1[i]*nums2[i] > nums1[i]*nums2[i-1] and nums1[i]*nums2[i] > nums1[i-1]*nums2[i]:\n            result.append(nums1[i]*nums2[i])\n        elif nums1[i]*nums2[i] < nums1[i]*nums2[i-1] and nums1[i]*nums2[i] < nums1[i-1]*nums2[i]:\n            result.append(nums1[i]*nums2[i])\n    return result\n",
        "num_ids": 315
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    max = 1\n    for i in range(N):\n        max *= nums1[i]\n    max = 1\n    for i in range(N):\n        max *= nums2[i]\n    return max\n",
        "num_ids": 80
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def max_product(nums1, nums2, N):\n        '''\n        Given 2 lists of numbers, find the N largest products\n        '''\n        max_prod = []\n        # list of tuples: (first list, index, product)\n        for i, elem1 in enumerate(nums1):\n            for j, elem2 in enumerate(nums2):\n                prod = elem1 * elem2\n                max_prod.append((prod, i, elem1, j))\n        max_prod = sorted(max_prod, key=lambda x: x[0], reverse=True)\n        return max_prod[:N]\n",
        "num_ids": 128
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def combine(nums1, nums2, N):\n        '''\n        Return a list of the specified number of largest products from two given lists,\n        selecting one factor from each list.\n        '''\n        if len(nums1) == 0 or len(nums2) == 0:\n            return []\n        else:\n            # The first item of each list is the largest\n            first = [nums1[0], nums2[0]]\n            # Add the rest of the largest number in the first list to the next list\n            next = [first[0]*nums1[1], first[1]*nums2[1]]\n            for i in range(2,len(nums1)):\n                next.append(first[i%2]*nums1[i])\n            for i in range(2, len(nums2)):\n                next.append(first[i%2]*nums2[i])\n",
        "num_ids": 175
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def max_product(nums):\n        ret = 1\n        for num in nums:\n            ret *= num\n        return ret\n    \n    def max_product_with_multi(num1, num2):\n        return max(num1, num2) * min(num1, num2)\n    \n    ret = None\n    if len(nums1) > N:\n        ret = max_product_with_multi(max_product(nums1[:N]), max_product(nums2[:N]))\n    elif len(nums2) > N:\n        ret = max_product_with_multi(max_product(nums1[:N]), max_product(nums2[:N]))\n    elif N == 0:\n        return None\n    else:\n        ret = max_product(nums1) * max_product(nums2)\n",
        "num_ids": 213
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum2(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum3(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum4(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum5(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum6(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum7(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum8(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum9(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum10(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum11(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum12(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum13(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum14(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum15(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum16(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum17(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum18(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum19(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum20(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum21(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum22(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum23(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum24(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum25(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum26(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum27(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum28(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum29(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum30(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum31(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum32(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum33(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum34(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum35(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum36(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum37(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum38(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum39(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum40(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum41(a,b):  ",
        "num_ids": 30
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n",
        "num_ids": 12
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    ",
        "num_ids": 22
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if len(str1) == 0:\n        return tuple()\n    res = []\n    for i in str1:\n        res.append(i)\n    return tuple(res)\n",
        "num_ids": 46
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1=[]\n    for i in range(len(str1)):\n        list1.append(str1[i])\n    return tuple(list1)\n",
        "num_ids": 41
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    char_list = list(str1)\n    return tuple(char_list)\n",
        "num_ids": 22
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    return tuple(str1)\n",
        "num_ids": 12
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.replace(\"\\\"\",\"\")\n    tuple1 = tuple(str1)\n    return tuple1\n",
        "num_ids": 31
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return str1\n",
        "num_ids": 7
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    char_list = [char for char in str1]\n    return tuple(char_list)\n",
        "num_ids": 25
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert n >= 0\n    n = int(n)\n    return (1 << n.bit_length()) - 1\n",
        "num_ids": 30
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & (n-1) == 0:\n        return n\n    else:\n        return n | (1<<(len(bin(n))-2))\n",
        "num_ids": 41
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # use the right shift operator to find the left most unset bit\n    # and set it to 1\n    n = n | (1 << (32 - n.bit_length())) \n    return n \n",
        "num_ids": 51
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n <= 0:\n        return n\n    else:\n        return set_left_most_unset_bit(n//2) * 2 + n % 2\n",
        "num_ids": 41
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & (n - 1)\n    n = n | 1\n    return n\n",
        "num_ids": 24
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    num_bits = n.bit_length() \n    return int('1' + '0'*(num_bits - 1), 2)\n",
        "num_ids": 36
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1 << (len(bin(n)) - 2)\n    n = n & mask\n    n = n | (1 << (len(bin(n)) - 1))\n    return n\n",
        "num_ids": 48
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 8\n    if n == 4:\n        return 16\n    if n == 5:\n        return 32\n    if n == 6:\n        return 64\n    if n == 7:\n        return 128\n    if n == 8:\n        return 256\n    if n == 9:\n        return 512\n    if n == 10:\n        return 1024\n    if n == 11:\n        return 2048\n    if n == 12:\n        return 4096\n    if n == 13:\n        return 8192\n    if n == 14:\n        return 16384\n    if n == 15:\n        return 32768\n    if n == 16:\n        return 65536\n    if n == 17:\n        return 131072\n    if n == 18:\n        return 262144\n    if n == 19:\n        return 524288\n    if n == 20:\n        return 1048576\n    if n == 21:\n        return 2097152\n    if n == 22:\n        return 4194304\n    if n == 23:\n        return 8388608\n    if n == 24:\n        return 16777216\n    if n == 25:\n        return 33554432\n    if n == 26:\n        return 67108864\n    if n == 27:\n        return 134217728\n    if n == 28:\n        return 268435456\n    if n == 29:\n        return 536870912\n    if n == 30:\n        return 1073741824\n    if n == 31:\n        return 2147483648\n",
        "num_ids": 396
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << (n.bit_length()-1))\n",
        "num_ids": 20
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #leftmost_unset_bit(n) = n & ~(n-1)\n    n = n & ~(n-1)\n    return n\n",
        "num_ids": 40
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (3.1415926 * r**2 * h)/3\n",
        "num_ids": 19
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*(math.pi)*(r**2)*h\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=(math.pi*r*r*h)/3\n    return v\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h\n",
        "num_ids": 19
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=3.141592653589793\n    v=pi*(r**2)*h/3\n    return v\n",
        "num_ids": 32
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    v=(math.pi)*(r**2)*(h/3)\n    return v\n    \nprint(\"Cone volume is %d\"%(volume_cone(5,4)))\n",
        "num_ids": 48
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1.0/3.0)*math.pi*r**2*h\n",
        "num_ids": 23
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*(r**2))/3 + (math.pi*(r**2)*h)/3\n",
        "num_ids": 31
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3.0 * math.pi * r**2 * h\n",
        "num_ids": 20
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r<0 or h<0:\n        return -1\n    else:\n        return math.pi*(r**2)*h/3.0\n",
        "num_ids": 39
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while True:\n        if n >= 2**i:\n            i += 1\n        else:\n            break\n    return i - 1\n",
        "num_ids": 39
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    i = 1\n    while(i<=n):\n        i = i*2\n    return i//2\n",
        "num_ids": 40
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    while p < n:\n        p = p<<1\n    return p\n",
        "num_ids": 25
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while pow(2, i-1) < n:\n        i += 1\n    return pow(2, i-1)\n",
        "num_ids": 37
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1:\n        return n\n    \n    power = 1\n    high = n\n    while power < high:\n        high /= 2\n        power *= 2\n    \n    return high\n",
        "num_ids": 50
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while (2**power) <= n:\n        power += 1\n    return power-1\n",
        "num_ids": 29
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(2**floor(log(n,2)))\n",
        "num_ids": 17
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    from math import log\n    return 2**int(log(n,2))\n",
        "num_ids": 21
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2**int(log(n)/log(2))\n",
        "num_ids": 17
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(math.log(n, 2))\n",
        "num_ids": 15
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    i=1\n    a,b=2,1\n    while i<n:\n        a,b=b,a+b\n        i+=1\n    return a\n",
        "num_ids": 43
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "num_ids": 56
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # TLE - need to figure out a faster way to do this\n    # return find_lucas_naive(n)\n    return find_lucas_fast(n)\n    \ndef find_lucas_naive(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas_naive(n-1) + find_lucas_naive(n-2)\n",
        "num_ids": 118
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return (4**n - 2) * (3**n - 1)\n",
        "num_ids": 20
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return find_lucas(n/2)**2 + find_lucas(n/2 - 1)**2\n    else:\n        return find_lucas(n/2)**2 - find_lucas(n/2 - 1)**2\n",
        "num_ids": 97
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string % x for x in list_]\n    return list_\n",
        "num_ids": 22
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list(list_)\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 47
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, elem in enumerate(list_):\n        list_[i] = string.format(elem)\n    return list_\n",
        "num_ids": 36
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i].replace(\"{}\", string)\n    return list_\n",
        "num_ids": 40
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        print(string.format(element))\n",
        "num_ids": 20
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i].replace(\"%\", \"\")\n        list_[i] = list_[i].replace(\"{{\", \"\")\n        list_[i] = list_[i].replace(\"}}\", \"\")\n        list_[i] = list_[i].replace(\"\\'\", \"\")\n    \n    list_ = \",\".join(list_)\n    list_ = string % (list_)\n    return list_\n",
        "num_ids": 122
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % x for x in list_]\n",
        "num_ids": 15
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {}\n        for j in range(len(l2)):\n            d[l1[i]][l2[j]] = l3[i][j]\n    return d\n",
        "num_ids": 71
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dict = dict()\n    for i in range(len(l1)):\n        new_dict[l1[i]] = dict()\n        new_dict[l1[i]][l2[i]] = l3[i]\n    return new_dict\n",
        "num_ids": 66
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Your code here\n    lst = zip(l1, l2, l3)\n    dict1 = {}\n    for i in lst:\n        dict1[i[0]] = dict(zip(i[1:], i[2:]))\n    return dict1\n",
        "num_ids": 67
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)==len(l2) and len(l2)==len(l3):\n        return [{l1[i]:{l2[i]:{l3[i]:i}}} for i in range(len(l1))]\n    else:\n        return 'Invalid Input'\n",
        "num_ids": 74
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(l1)):\n        dict1[l1[i]] = l2[i]\n        dict1[l1[i]] = l3[i]\n    return dict1\n",
        "num_ids": 58
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    m1 = {}\n    m2 = {}\n    m3 = {}\n    for i in l1:\n        m1[i] = {}\n        m1[i][l2[0]] = l3[0]\n        m1[i][l2[1]] = l3[1]\n    for i in m1.keys():\n        if i in l2:\n            m2[i] = m1[i]\n        else:\n            m3[i] = m1[i]\n    return m2, m3\n",
        "num_ids": 129
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2) and len(l1)!= len(l3):\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        raise ValueError(\"Lists do not have the same length.\")\n",
        "num_ids": 43
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i, val1 in enumerate(l1):\n        for j, val2 in enumerate(l2):\n            dictionary[val1] = val2\n    for i, val3 in enumerate(l3):\n        dictionary[val3] = l3[i]\n    return dictionary\n",
        "num_ids": 79
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_list = zip(l1, l2, l3)\n    new_dict = {x: {y: z for y, z in zip(l1, l3)} for x, l1, l2 in new_list}\n    return new_dict\n",
        "num_ids": 64
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "num_ids": 67
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # To find the maximum value of n we must find the maximum value of f(n)\n    # By the properties of the equation we know that f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    # So we can write the recursion\n    # f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    # If n is even we can only choose from (n/2 + n/4)\n    # If n is odd we can choose from (n/2 + n/3 + n/5)\n    # If n is negative we cannot choose anything\n    return get_max_sum_recursive(n, 0, 0, 0)\n",
        "num_ids": 198
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n",
        "num_ids": 60
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==1:\n        return 1\n    return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n",
        "num_ids": 64
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return n if n < 4 else max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n",
        "num_ids": 53
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n",
        "num_ids": 36
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n1 = n / 2\n    n2 = n / 3\n    n3 = n / 4\n    n4 = n / 5\n",
        "num_ids": 34
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "num_ids": 52
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f = [0] * (n+1)\n    f[0] = 0\n    f[1] = 1\n",
        "num_ids": 31
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n)\n",
        "num_ids": 67
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n",
        "num_ids": 16
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = len(input_list)\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n",
        "num_ids": 56
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_len_list = [i]\n        elif len(i) == max_len:\n            max_len_list.append(i)\n    return max_len_list\n",
        "num_ids": 93
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_length = []\n    for string in input_list:\n        list_length.append(len(string))\n    return list_length\n",
        "num_ids": 36
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return 0\n    result = input_list[0]\n    for element in input_list[1:]:\n        if len(element) > len(result):\n            result = element\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_len_list = [i]\n        elif len(i) == max_len:\n            max_len_list.append(i)\n    return max_len_list\n",
        "num_ids": 93
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n",
        "num_ids": 15
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for i in input_list:\n        if max_len < len(i):\n            max_len = len(i)\n            max_len_list = i\n    return max_len_list\n",
        "num_ids": 65
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # write your code here\n    max_length=0\n    max_list=[]\n    for list in input_list:\n        if len(list) > max_length:\n            max_length=len(list)\n            max_list=list\n    return max_list\n",
        "num_ids": 67
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = -1\n    max_list = []\n    for l in input_list:\n        if len(l) > max_length:\n            max_length = len(l)\n            max_list = [l]\n        elif len(l) == max_length:\n            max_list.append(l)\n",
        "num_ids": 80
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    res = True\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                res = False\n                break\n    return res\n",
        "num_ids": 71
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n    \ndef main():\n    test_list = [1, 1, 2, 3, 3, 4, 5]\n    test_tup = (1, 1, 2, 3, 3, 4, 5)\n    assert(check_distinct(test_list))\n    assert(check_distinct(test_tup))\n    assert(check_distinct((1, 1, 2, 2, 3, 3, 4, 4, 5, 5)))\n    assert(check_distinct((1, 1, 2, 2, 3, 3, 4, 4, 5)))\n    assert(check_distinct((1, 1, 2, 2, 3, 3)))\n    assert(check_distinct((1, 1, 2, 2)))\n    assert(check_distinct((1, 1, 2)))\n    assert(check_distinct((1, 1)))\n    assert(check_distinct((1)))\n    assert(not check_distinct([]))\n    assert(not check_distinct((1, 2, 3, 4)))\n",
        "num_ids": 261
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #test_tup = (10,20,20,20,50,100)\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n",
        "num_ids": 51
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i)==1:\n            return i\n        else:\n            pass\n    return 'NO'\n",
        "num_ids": 40
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return \"No non-repeated characters\"\n",
        "num_ids": 38
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str2 = str1.lower()\n    for ch in str2:\n        if str2.count(ch) == 1:\n            return ch\n    return None\n",
        "num_ids": 41
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    repeated_characters = {}\n    for char in str1:\n        if char in repeated_characters:\n            repeated_characters[char] += 1\n        else:\n            repeated_characters[char] = 1\n    for char in str1:\n        if repeated_characters[char] == 1:\n            return char\n",
        "num_ids": 82
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return \"No non-repeated characters in the string\"\n",
        "num_ids": 53
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dic = {}\n    for i in str1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for i in str1:\n        if dic[i] == 1:\n            return i\n    return None\n",
        "num_ids": 73
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if str1 == None or len(str1) == 0:\n        return -1\n",
        "num_ids": 23
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    \n    for char in str1:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n",
        "num_ids": 53
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    def make_dict():\n        my_dict = {}\n        for i in range(len(str1)):\n            if str1[i] not in my_dict:\n                my_dict[str1[i]] = [i]\n            else:\n                my_dict[str1[i]].append(i)\n        return my_dict\n    \n    my_dict = make_dict()\n    \n    for letter in str1:\n        if len(my_dict[letter]) == 1:\n            return letter\n        else:\n            pass\n    return None\n    \n    \n    \n",
        "num_ids": 143
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 30
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string:\n        if not re.match(regex, string):\n            return 'Invalid input, please try again'\n        elif string[0]!= string[-1]:\n            return 'The string does not start and end with the same character'\n        else:\n            return 'The string starts and ends with the same character'\n    else:\n        return 'String cannot be empty'\n",
        "num_ids": 93
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    return False\ndef check_char_in_string(string):\n    '''\n    Write a function to check whether the given string starts with the same character or not.\n    '''\n    if re.match(r'^[a-z]',string):\n        return True\n    return False\ndef check_char_in_string_in_string(string):\n    '''\n    Write a function to check whether the given string starts with the same character or not.\n    '''\n    if re.match(r'^[a-z].*[a-z]$',string):\n        return True\n    return False\ndef check_char_in_string_in_string_in_string(string):\n    '''\n    Write a function to check whether the given string starts with the same character or not.\n    '''\n    if re.match(r'^[a-z].*[a-z].*[a-z]$',string):\n        return True\n    return False\ndef check_char_in_string_in_string_in_string_in_string(string):\n    '''\n    Write a function to check whether the given string starts with the same character or not.\n    '''\n    if re.match(r'^[a-z].*[a-z].*[a-z].*[a-z]$',string):\n        return True\n    return False\ndef check_char_in_string_in_string_in_string_in_string_in_string(string):\n    '''\n    Write a function to check whether the given string starts with the same character or not.\n    '''\n    if re.match(r'^[a-z].*[a-z].*[a-z].*[a-z].*[a-z]$',string):\n        return True\n    return False\ndef check_char_in_string_in_string_in_string_in_string_in_string_in_string(string):\n    '''\n    Write a function to check whether the given string starts with the same character or not.\n    '''\n    if re.match(r'^[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z]$',string):\n        return True\n    return False\ndef check_char_in_string_in_string_in_string_in_string_in_string_in_string_in_string(string):\n    '''\n    Write a function to check whether the given string starts with the same character or not.\n    '''\n    if re.match(r'^[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z]$',string):\n        return True\n    return False\ndef check_char_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string(string):\n    '''\n    Write a function to check whether the given string starts with the same character or not.\n    '''\n    if re.match(r'^[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z]$',string):\n        return True\n    return False\ndef check_char_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string(string):\n    '''\n    Write a function to check whether the given string starts with the same character or not.\n    '''\n    if re.match(r'^[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z]$',string):\n        return True\n    return False\ndef check_char_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string(string):\n    '''\n    Write a function to check whether the given string starts with the same character or not.\n    '''\n    if re.match(r'^[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z]$',string):\n        return True\n    return False\ndef check_char_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string(string):\n    '''\n    Write a function to check whether the given string starts with the same character or not.\n    '''\n    if re.match(r'^[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z]$',string):\n        return True\n    return False\ndef check_char_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string(string):\n    '''\n    Write a function to check whether the given string starts with the same character or not.\n    '''\n    if re.match(r'^[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z]$',string):\n        return True\n    return False\ndef check_char_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string(string):\n    '''\n    Write a function to check whether the given string starts with the same character or not.\n    '''\n    if re.match(r'^[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z]$',string):\n        return True\n    return False\ndef check_char_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string(string):\n    '''\n    Write a function to check whether the given string starts with the same character or not.\n    '''\n    if re.match(r'^[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z].*[a-z]$',string):\n        return True\n    return False\ndef check_char_in_string_in_string_in_string_in_string_in_string_in_string_in_string_in_string_i",
        "num_ids": 163
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string)\ndef check_char_ignore_case(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string, re.IGNORECASE)\n",
        "num_ids": 21
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string)!=None:\n        print \"True\"\n    else:\n        print \"False\"\ncheck_char(\"abc\")\n",
        "num_ids": 40
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n",
        "num_ids": 16
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n    \n    \ndef reverse_str(string): \n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\n    \n    \ndef remove_char(string, ch): \n    '''\n    Write a function to remove all the characters in the given string, which is \n    given by user.\n    '''\n    return string.replace(ch, \"\")\n    \n    \ndef remove_char2(string, ch): \n    '''\n    Write a function to remove all the characters in the given string, which is \n    given by user. \n    '''\n    return re.sub(ch, \"\", string)\n    \n    \ndef is_palindrome(string): \n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    if string == reverse_str(string): \n        return True\n    return False\n    \n    \ndef is_palindrome2(string): \n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    return string == reverse_str(string)\n    \n    \ndef is_permutation(string1, string2): \n    '''\n    Write a function to check whether the given strings are permutations of each other or not.\n    '''\n    if len(string1)!= len(string2): \n        return False\n    return sorted(string1) == sorted(string2)\n    \n    \ndef is_permutation2(string1, string2): \n    '''\n    Write a function to check whether the given strings are permutations of each other or not.\n    '''\n    if len(string1)!= len(string2): \n        return False\n    \n    if sorted(string1)!= sorted(string2): \n        return False\n    return True\n    \n    \ndef is_anagram(string1, string2): \n    '''\n    Write a function to check whether the given strings are anagrams or not.\n    '''\n    if len(string1)!= len(string2): \n        return False\n    return sorted(string1) == sorted(string2)\n    \n    \ndef is_anagram2(string1, string2): \n    '''\n    Write a function to check whether the given strings are anagrams or not.\n    '''\n    if len(string1)!= len(string2): \n        return False\n    \n    if sorted(string1) == sorted(string2): \n        return True\n    return False\n    \n    \ndef is_permutation_2(string1, string2): \n    '''\n    Write a function to check whether the given strings are permutations of each other or not.\n    '''\n    if len(string1)!= len(string2): \n        return False\n    \n    d1 = {}\n    for i in string1: \n        if i in d1: \n            d1[i] += 1\n        else: \n            d1[i] = 1\n    \n    d2 = {}\n    for i in string2: \n        if i in d2: \n            d2[i] += 1\n        else: \n            d2[i] = 1\n    \n    for i in d1: \n        if i not in d2 or d1[i]!= d2[i]: \n            return False\n    return True\n    \n    \ndef is_permutation_3(string1, string2): \n    '''\n    Write a function to check whether the given strings are permutations of each other or not.\n    '''\n    if len(string1)!= len(string2): \n        return False\n    \n    d1 = {}\n    for i in string1: \n        if i in d1: \n            d1[i] += 1\n        else: \n            d1[i] = 1\n    \n    d2 = {}\n    for i in string2: \n        if i in d2: \n            d2[i] += 1\n        else: \n            d2[i] = 1\n    \n    for i in d1: \n        if i not in d2 or d1[i]!= d2[i]: \n            return False\n    return True\n    \n    \ndef is_permutation_4(string1, string2): \n    '''\n    Write a function to check whether the given strings are permutations of each other or not.\n    '''\n    if len(string1)!= len(string2): \n        return False\n    \n    d1 = {}\n    for i in string1: \n        if i in d1: \n            d1[i] += 1\n        else: \n            d1[i] = 1\n    \n    d2 = {}\n    for i in string2: \n        if i in d2: \n            d2[i] += 1\n        else: \n            d2[i] = 1\n    \n    if len(d1)!= len(d2): \n        return False\n    \n    for i in d1: \n        if i not in d2 or d1[i]!= d2[i]: \n            return False\n    return True\n    \n    \ndef is_permutation_5(string1, string2): \n    '''\n    Write a function to check whether the given strings are permutations of each other or not.\n    '''\n    if len(string1)!= len(string2): \n        return False\n    \n    d1 = {}\n    for i in string1: \n        if i in d1: \n            d1[i] += 1\n        else: \n            d1[i] = 1\n    \n    d2 = {}\n    for i in string2: \n        if i in d2: \n            d2[i] += 1\n        else: \n            d2[i] = 1\n    \n    if len(d1)!= len(d2): \n        return False\n    \n    for i in d1: \n        if i not in d2 or d1[i]!= d2[i]: \n            return False\n    return True\n    \n    \ndef is_permutation_6(string1, string2): \n    '''\n    Write a function to check whether the given strings are permutations of each other or not.\n    '''\n    if len(string1)!= len(string2): \n        return False\n    \n    d1 = {}\n    for i in string1: \n        if i in d1: \n            d1[i] += 1\n        else: \n            d1[i] = 1\n    \n    d2 = {}\n    for i in string2: \n        if i in d2: \n            d2[i] += 1\n        else: \n            d2[i] = 1\n    \n    if len(d1)!= len(d2): \n        return False\n    \n    for i in d1: \n        if i not in d2 or d1[i]!= d2[i]: \n            return False\n    return True\n    \n    \ndef is_permutation_7(string1, string2): \n    '''\n    Write a function to check whether the given strings are permutations of each other or not.\n    '''\n    if len(string1)!= len(string2): \n        return False\n    \n    d1 = {}\n    for i in string1: \n        if i in d1: \n            d1[i] += 1\n        else: \n            d1[i] = 1\n    \n    d2 = {}\n    for i in string2: \n        if i in d2: \n            d2[i] += 1\n        else: \n            d2[i] = 1\n    \n    if len(d1)!= len(d2): \n        return False\n    \n    for i in d1: \n        if i not in d2 or d1[i]!= d2[i]: \n            return False\n    return True\n    \n    \ndef is_permutation_8(string1, string2): \n    '''\n    Write a function to check whether the given strings are permutations of each other or not",
        "num_ids": 20
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n",
        "num_ids": 14
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return False\n    if not re.search(regex,string):\n        return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\n",
        "num_ids": 16
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    else:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n",
        "num_ids": 75
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if (a>b):\n        if (a>c):\n            median = a\n        else:\n            median = c\n    else:\n        if (b>c):\n            median = b\n        else:\n            median = c\n    return median\n",
        "num_ids": 90
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    elif a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b\n    else:\n        return a\n",
        "num_ids": 87
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a >= b) and (a >= c):\n        return a\n    elif (b >= a) and (b >= c):\n        return b\n    elif (c >= a) and (c >= b):\n        return c\n",
        "num_ids": 58
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<=b:\n        if a<=c:\n            return a\n        if b<=c:\n            return b\n        return c\n    if b<=a:\n        if b<=c:\n            return b\n        if c<=a:\n            return c\n        return a\n    if c<=a:\n        if c<=b:\n            return c\n        if b<=a:\n            return b\n        return a\n    if c<=b:\n        if c<=a:\n            return c\n        if a<=b:\n            return a\n        return b\n",
        "num_ids": 146
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    l=sorted([a,b,c])\n    if l[1]==l[2]:\n        return l[1]\n    else:\n        return l[1] if l[1]<l[2] else l[2]\n",
        "num_ids": 60
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    medians = sorted([a,b,c])\n    if len(medians)%2 == 1:\n        return medians[len(medians)/2]\n    else:\n        return (medians[len(medians)/2] + medians[len(medians)/2 - 1])/2\n",
        "num_ids": 98
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    elif b > a:\n        if b > c:\n            return b\n        elif c > a:\n            return c\n        else:\n            return a\n    elif c > a:\n        return c\n    else:\n        return a\n",
        "num_ids": 99
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b<c:\n        return b\n    if a>b>c:\n        return a\n    if a<c>b:\n        return c\n    if a>b<c:\n        return b\n    if a==b==c:\n        return a\n    if a<b:\n        if b<c:\n            return b\n        if c<b:\n            return c\n    if a>b:\n        if b>c:\n            return b\n        if c>b:\n            return c\n",
        "num_ids": 125
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(d) for d in str(nums))\n",
        "num_ids": 19
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums = [int(i) for i in nums]\n    total = sum(nums)\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, list(str(nums))))\n",
        "num_ids": 18
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = []\n    for num in nums:\n        s = 0\n        while num:\n            s += num % 10\n            num //= 10\n        res.append(s)\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(map(int,str(num)))\n    return sum_of_digits\n",
        "num_ids": 48
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not isinstance(nums, list):\n        raise ValueError(\"The input must be a list.\")\n    if len(nums) == 0:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    return sum(map(lambda x: int(x), nums))\n",
        "num_ids": 70
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for digit in str(nums)])\n",
        "num_ids": 20
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for digit in str(nums)])\n",
        "num_ids": 20
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(i) for i in str(num))\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for i in range(0, len(nums)):\n        result += sum(list(str(nums[i])))\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple()\n    for a,b in zip(test_tup1, test_tup2):\n        x = (a ^ b)\n        result = result + (x,)\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(test_tup1[i]^test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 37
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    n = len(test_tup1)\n    xored = []\n    for i in range(n):\n        xored.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(xored)\n",
        "num_ids": 81
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for (a, b) in zip(test_tup1, test_tup2))\n",
        "num_ids": 31
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x ^ y for x, y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n    else:\n        return tuple(x^y for (x,y) in zip(test_tup1, test_tup2))\n",
        "num_ids": 60
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples are not of same length')\n    return tuple(x1 ^ x2 for x1, x2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 67
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    s_dict = {}\n    for s in test_list:\n        if s in s_dict:\n            s_dict[s] += 1\n        else:\n            s_dict[s] = 1\n    return len(s_dict)\n",
        "num_ids": 60
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Write your code here\n    freq = {}\n    for item in test_list:\n        freq[item] = freq.get(item, 0) + 1\n    return len(freq)\n",
        "num_ids": 51
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your Code Here\n    return len(set(test_list))\n",
        "num_ids": 19
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    tuple_count = {}\n    for tuple_value in test_list:\n        if tuple_value in tuple_count:\n            tuple_count[tuple_value] += 1\n        else:\n            tuple_count[tuple_value] = 1\n    return tuple_count\n",
        "num_ids": 70
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    temp_list = []\n    for item in test_list:\n        if not item in temp_list:\n            temp_list.append(item)\n    return len(temp_list)\n",
        "num_ids": 47
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = len(test_list)\n    tuple_list = []\n    for i in test_list:\n        if i not in tuple_list:\n            tuple_list.append(i)\n    return count,tuple_list\n",
        "num_ids": 59
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    temp_list = list(set(test_list))\n    freq_list = [test_list.count(i) for i in temp_list]\n    return freq_list\n    \n    \nif __name__ == '__main__':\n    print extract_freq([1,2,2,2,2,3,3,4,4,5])\n    print extract_freq([1,2,2,2,2,3,3,4,4,5,5,6]",
        "num_ids": 120
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    output = set()\n    for elem in test_list:\n        output.add(elem)\n    return len(output)\n",
        "num_ids": 34
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Approach: 1\n    # Output: 5\n    # Explanation:\n    # The first 5 elements in the list are:\n    # [1, 2, 3, 4, 5]\n    # After removing the duplicates, the list becomes:\n    # [1, 2, 3, 4, 5]\n    # There are 5 unique tuples in the list.\n",
        "num_ids": 86
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] + test_tup2[i],)\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print \"Tuple 1: \", test_tup1\n    print \"Tuple 2: \", test_tup2\n    \n    # create a new tuple with the same length as both tuples\n    \n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples don't have the same length\")\n    \n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]))\n    \n    print \"Tuples after adding tuples: \", test_tup3\n    return test_tup3\n",
        "num_ids": 191
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    index_wise_sum = tuple(map(lambda x,y : x+y, test_tup1, test_tup2))\n    return index_wise_sum\n",
        "num_ids": 43
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    \n    for i in range(len(test_list1)):\n        test_list1[i] = test_list1[i] + test_list2[i]\n    \n    return tuple(test_list1)\n",
        "num_ids": 88
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(x+y for x, y in zip(test_tup1,test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    return (test_tup1[0]+test_tup2[0], test_tup1[1]+test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_list = [tup1[i] + tup2[i] for i in range(len(tup1))]\n    return tuple(new_list)\n",
        "num_ids": 43
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    l1, l2 = len(test_tup1), len(test_tup2)\n    if l1 > l2:\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    res = []\n    for i in range(l1):\n        res.append(test_tup1[i]+test_tup2[i])\n    return tuple(res)\n",
        "num_ids": 104
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    #Add code here\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 27
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n",
        "num_ids": 23
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n    \ndef max(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n    \ndef sum(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a+b\n    \ndef sub(a,b):\n    '''\n    Write a python function to find the difference between two numbers.\n    '''\n    return a-b\n    \ndef avg(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return (a+b)/2\n    \ndef mult(a,b):\n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    return a*b\n    \ndef div(a,b):\n    '''\n    Write a python function to find the quotient of two numbers.\n    '''\n    if b==0:\n        return \"Cannot divide by zero\"\n    else:\n        return a/b\n        \ndef f(a,b):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if (a==0):\n        return 1\n    else:\n        return a*f(a-1,b)\n    \ndef fib(n):\n    '''\n    Write a python function to find the nth number in the Fibonacci Sequence.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef pal(s):\n    '''\n    Write a python function to determine if the string is a palindrome.\n    '''\n    return s==s[::-1]\n    \ndef reverse(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef is_in_list(l,item):\n    '''\n    Write a python function to check if a item is in a list.\n    '''\n    if item in l:\n        return True\n    else:\n        return False\n        \ndef is_in_list_1(l,item):\n    '''\n    Write a python function to check if a item is in a list.\n    '''\n    if l.count(item)>0:\n        return True\n    else:\n        return False\n        \ndef is_in_list_2(l,item):\n    '''\n    Write a python function to check if a item is in a list.\n    '''\n    return item in l\n    \ndef is_in_list_3(l,item):\n    '''\n    Write a python function to check if a item is in a list.\n    '''\n    return (item in l) and len(l)==1\n    \ndef is_in_list_4(l,item):\n    '''\n    Write a python function to check if a item is in a list.\n    '''\n    return (item in l) and len(l)==1\n    \ndef is_in_list_5(l,item):\n    '''\n    Write a python function to check if a item is in a list.\n    '''\n    return (item in l) and (len(l)==1)\n    \ndef avg_list(l):\n    '''\n    Write a python function to find the average of all the items in a list.\n    '''\n    s=0\n    for item in l:\n        s=s+item\n    return s/len(l)\n    \ndef avg_list_1(l):\n    '''\n    Write a python function to find the average of all the items in a list.\n    '''\n    s=0\n    n=len(l)\n    for item in l:\n        s=s+item\n    return s/n\n    \ndef count_occurence(l,item):\n    '''\n    Write a python function to find the number of times an item occurs in a list.\n    '''\n    c=0\n    for i in l:\n        if i==item:\n            c=c+1\n    return c\n    \ndef remove_item(l,item):\n    '''\n    Write a python function to remove an item from a list.\n    '''\n    return l.remove(item)\n    \ndef remove_item_1(l,item):\n    '''\n    Write a python function to remove an item from a list.\n    '''\n    return l.pop(l.index(item))\n    \ndef remove_item_2(l,item):\n    '''\n    Write a python function to remove an item from a list.\n    '''\n    return l.pop(l.index(item))\n    \ndef remove_item_3(l,item):\n    '''\n    Write a python function to remove an item from a list.\n    '''\n    return l.pop(l.index(item))\n    \ndef remove_item_4(l,item):\n    '''\n    Write a python function to remove an item from a list.\n    '''\n    try:\n        return l.remove(item)\n    except ValueError:\n        return \"Item not in list\"\n    \ndef append(l,item):\n    '''\n    Write a python function to append an item to a list.\n    '''\n    return l.append(item)\n    \ndef sort(l):\n    '''\n    Write a python function to sort a list.\n    '''\n    return l.sort()\n    \ndef sort_1(l):\n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(l)\n    \ndef sort_2(l):\n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(l,reverse=True)\n    \ndef sort_3(l):\n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(l,key=len)\n    \ndef sort_4(l):\n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(l,key=len,reverse=True)\n    \ndef sort_5(l):\n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(l,key=str.lower)\n    \ndef sort_6(l):\n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(l,key=str.lower,reverse=True)\n    \ndef sort_7(l):\n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(l,key=len,reverse=True)\n    \ndef sort_8(l):\n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(l,key=len,reverse=True)\n    \ndef index(l,item):\n    '''\n    Write a python function to find the index of a list item.\n    '''\n    return l.index(item)\n    \ndef index_1(l,item):\n    '''\n    Write a python function to find the index of a list item.\n    '''\n    return l.index(item)\n    \ndef index_2(l,item):\n    '''\n    Write a python function to find the index of a list item.\n    '''\n    try:\n        return l.index(item)\n    except ValueError:\n        return \"Item not in list\"\n    \ndef index_3(l,item):\n    '''\n    Write a python function to find the index of a list item.\n    '''\n    try:\n        return l.index(item)\n    except ValueError:\n        return \"Item not in list\"\n    \ndef index_4(l,item):\n    '''\n    Write a python function to find the index of a list item.\n    '''\n    try:\n        return l.index(item)\n    except ValueError:\n        return \"Item not in list\"\n    \ndef index_5(l,item):\n    '''\n    Write a python function to find the index of a list item",
        "num_ids": 15
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a > b:\n        return b\n    else:\n        return a\n",
        "num_ids": 23
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a < b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n%10+sum_of_digits(int(n/10))\n",
        "num_ids": 37
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print \"True\"\n    else:\n        print \"False\"\n",
        "num_ids": 28
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i]==tuple1:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True\n    else: \n        return False\n",
        "num_ids": 26
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i==tuple1:\n            return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # Check for existence\n    for j in tuplex:\n        if j == tuple1:\n            return True\n    return False\n    \ndef check_tuplex_with_count(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple and also return the count.\n    '''\n    # Check for existence\n    for j in tuplex:\n        if j == tuple1:\n            return True, tuplex.count(j)\n    return False,0\n",
        "num_ids": 44
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tup in tuplex:\n        if tup == tuple1:\n            return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    bin_num = bin(x)[2:]\n    count = 0\n    for i in range(len(bin_num)):\n        if bin_num[i] == '1':\n            count += 1\n    return count%2\n",
        "num_ids": 57
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = list(str(x))\n    sum = 0\n    for i in x:\n        sum = sum + int(i)\n    return sum%2\n",
        "num_ids": 40
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return 0 \n    else: \n        return 1 \n",
        "num_ids": 27
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 1:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return True if x%2==0 else False\n",
        "num_ids": 14
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return True\n    else:\n        return False\n        \ndef find_Even(x): \n    '''\n    Write a python function to find whether the number is even or not.\n    '''\n    if x%2 == 0:\n        return True\n    else:\n        return False\n        \ndef find_Parity_recursive(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return True\n    if x == 1:\n        return False\n    else:\n        return find_Parity_recursive(x/2)\n        \ndef find_Even_recursive(x): \n    '''\n    Write a python function to find whether the number is even or not.\n    '''\n    if x%2 == 0:\n        return True\n    if x == 1:\n        return False\n    else:\n        return find_Even_recursive(x/2)\n        \ndef find_Parity_iterative(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    count = 0\n    if x%2 == 0:\n        return True\n    while count < x:\n        x = x/2\n        if x%2 == 0:\n            return True\n        else:\n            return False\n            \ndef find_Even_iterative(x): \n    '''\n    Write a python function to find whether the number is even or not.\n    '''\n    count = 0\n    if x%2 == 0:\n        return True\n    while count < x:\n        x = x/2\n        if x%2 == 0:\n            return True\n        else:\n            return False\n            \ndef binary_search(a, val, start, end): \n    '''\n    Write a python function to do binary search of a sorted list.\n    '''\n    if start <= end:\n        mid = (start + end)/2\n        if a[mid] == val:\n            return mid\n        if a[mid] > val:\n            return binary_search(a, val, start, mid-1)\n        else:\n            return binary_search(a, val, mid+1, end)\n    else:\n        return -1\n",
        "num_ids": 90
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n",
        "num_ids": 8
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2 == 0): \n        return \"even\"\n    else: \n        return \"odd\"\n    \n",
        "num_ids": 32
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # In this case, we can rearrange as the sorted digits will start from the bigger numbers.\n    # We can also rearrange the digits such that we create the biggest number from the smallest number.\n    # The list of digits is going to be in reverse order from the biggest number.\n    # We want to keep the smallest number as the first element in the new list.\n    # We also want the last element to be the largest number.\n    # We will do this by first sorting the digits and then simply reversing the entire list.\n    \n    digits = []\n    while n > 0:\n        digits.append(n%10)\n        n /= 10\n    # digits = sorted(digits, reverse=True)\n    digits.reverse()\n    \n    # Now we will create the biggest number by simply adding the last digit with the last element in the list.\n    # This will be the largest number.\n    # We also want to return this as a string, since we cannot concatenate strings with integers.\n    biggest = digits[-1]\n    new_number = ''\n    for i in range(0,len(digits)):\n        new_number += str(digits[i])\n    return int(new_number + str(biggest))\n",
        "num_ids": 290
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    \n    arr = []\n    while n > 0:\n        arr.append(n % 10)\n        n = n // 10\n    \n    arr = sorted(arr)\n    \n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            break\n    \n    if i == 1 and arr[i] == arr[i-1]:\n        return 0\n    \n    arr[i:len(arr)] = arr[i-1:len(arr)-1][::-1]\n    \n    return int(''.join(map(str, arr)))\n",
        "num_ids": 154
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n <= 99:\n        return n\n    if n % 10 == 9:\n        return n // 10 * 10 + (n % 10)\n    else:\n        return n // 10 * 10 + (n % 10 + 1)\n    \ndef rearrange_smaller(n):\n    '''\n    Write a function to create the next smaller number by rearranging the digits of a given number.\n    '''\n    if n <= 99:\n        return n\n    if n % 10 == 0:\n        return n // 10 * 10 + (n % 10)\n    else:\n        return n // 10 * 10 + (n % 10 - 1)\n    \ndef test_rearrange():\n    assert rearrange_bigger(12345) == 321\n    assert rearrange_bigger(1234) == 4321\n    assert rearrange_smaller(12345) == 123\n    assert rearrange_smaller(1234) == 12\n    assert rearrange_smaller(54321) == 54\n    assert rearrange_smaller(543) == 54\n    assert rearrange_smaller(54) == 54\n    assert rearrange_smaller(12) == 12\n    assert rearrange_smaller(0) == 0\n    assert rearrange_smaller(22) == 22\n    assert rearrange_smaller(22) == 22\n    assert rearrange_smaller(100) == 100\n    assert rearrange_smaller(101) == 101\n    \ntest_rearrange()",
        "num_ids": 251
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = list(str(n))\n    for i in xrange(len(s)-1):\n        if s[i] < s[i+1]:\n            pass\n        else:\n            for j in xrange(i+1, len(s)):\n                if s[i] < s[j]:\n                    s[i], s[j] = s[j], s[i]\n                    break\n    return int(''.join(s))\n",
        "num_ids": 108
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    for i in range(len(n)-1):\n        if int(n[i]) < int(n[i+1]):\n            break\n    else:\n        return -1\n    for j in range(len(n)-1, i, -1):\n        if int(n[j]) > int(n[i]):\n            n_new = n[:i] + n[j] + ''.join(sorted(n[i:j]) + sorted(n[j+1:]))\n            return int(n_new)\n    return -1\n",
        "num_ids": 143
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if not isinstance(n, int):\n        raise ValueError(\"n must be a positive integer.\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    if n == 1:\n        return n\n    s = str(n)\n    m = len(s)\n    p = sorted(s, reverse=True)\n    if p == list(s):\n        return int(\"\".join(p))\n    else:\n        for i in range(m):\n            if p[i]!= s[i]:\n                pos = p.index(s[i])\n                p[pos], p[i] = p[i], p[pos]\n                return int(\"\".join(p))\n",
        "num_ids": 171
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    x = list(str(n))\n    \n    left = 0\n    right = len(x)-1\n    \n    while left <= right:\n        if x[left] < x[right]:\n            break\n        else:\n            temp = x[right]\n            x[right] = x[left]\n            x[left] = temp\n            left += 1\n            right -= 1\n    \n    return int(''.join(x))\n",
        "num_ids": 105
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    new_num = list(str(n))\n    for i in range(len(new_num)-1):\n        if new_num[i] < new_num[i+1]:\n            continue\n        else:\n            for j in range(i+1, len(new_num)):\n                if new_num[i] < new_num[j]:\n                    new_num[i], new_num[j] = new_num[j], new_num[i]\n                    break\n    return int(''.join(new_num))\n",
        "num_ids": 130
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # The number we'll rearrange\n    n = int(n)\n    # The number we'll return\n    r = -1\n    # Where we'll start\n    start = len(str(n))\n    # Loop through, making sure we find the largest number\n    for i in xrange(start, -1, -1):\n        # Check if we've reached the end\n        if i == 0:\n            # We've run out of digits, so return -1\n            return -1\n        # Get the digit at this position\n        digit = n % 10\n        # Check if it's greater than the one before\n        if digit > (n % (10 ** (i - 1)) / (10 ** (i - 1))):\n            # If so, we'll move the end of the array forward\n            end = i\n            # And set r to the new number\n            r = n / (10 ** (i - 1))\n            r *= (10 ** (end - 1))\n            r += digit * (10 ** (end - 1))\n            break\n        # If it's not, we'll skip it\n        else:\n            n /= 10\n    # Return the rearranged number\n    return r\n",
        "num_ids": 277
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = [(num1, num2) for num1 in nums1 for num2 in nums2]\n    heapq.heapify(heap)\n    pairs = []\n    for _ in xrange(k):\n        pairs.append(heapq.heappop(heap))\n    return pairs\n",
        "num_ids": 80
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # https://www.youtube.com/watch?v=lM8hkEjTNoA&t=17s&ab_channel=TimothyHarrison\n",
        "num_ids": 41
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def pair(x, y):\n        return [min(x, y), max(x, y)]\n    if not nums1 or not nums2:\n        return []\n    res = []\n    heap = []\n    if k >= len(nums1) * len(nums2):\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                res.append(pair(nums1[i], nums2[j]))\n    else:\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                heapq.heappush(heap, pair(nums1[i], nums2[j]))\n        for i in range(k):\n            res.append(heapq.heappop(heap))\n    return res\n",
        "num_ids": 212
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    # heap = []\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums2)):\n    #         heapq.heappush(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n    #         if len(heap) > k:\n    #             heapq.heappop(heap)\n    #     if len(heap) == k:\n    #         return heapq.heappop(heap)\n    # return []\n    # heap = []\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums2)):\n    #         if len(heap) < k:\n    #             heapq.heappush(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n    #         elif nums1[i] + nums2[j] < heap[0][0]:\n    #             heapq.heappop(heap)\n    #             heapq.heappush(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n    #     if len(heap) == k:\n    #         return heapq.heappop(heap)\n    # return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n            elif nums1[i] + nums2[j] < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n            if len(heap) == k:\n                return heapq.heappop(heap)\n    return []\n",
        "num_ids": 562
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # return smallest k pairs\n    # priority queue\n    pq = []\n    for i in range(k):\n        heapq.heappush(pq, (nums1[i]+nums2[0], i, 0))\n    \n    #print pq\n    res = []\n    while pq:\n        #print pq\n        _, index1, index2 = heapq.heappop(pq)\n        res.append([nums1[index1], nums2[index2]])\n        if index2+1<len(nums2):\n            heapq.heappush(pq, (nums1[index1]+nums2[index2+1], index1, index2+1))\n    return res\n",
        "num_ids": 181
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    result = []\n    while k > 0:\n        result.append(heapq.heappop(heap))\n        k -= 1\n    return result\n",
        "num_ids": 105
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(max_heap, (-1 * num1 - num2, -1 * num1, num2))\n",
        "num_ids": 63
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    pairs = []\n    heap = []\n    for i in nums1:\n        for j in nums2:\n            heapq.heappush(heap, (i+j, i, j))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    for i in range(k):\n        pairs.append(heapq.heappop(heap))\n    return pairs\n",
        "num_ids": 134
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    for i in range(len(nums1)):\n        heapq.heappush(h, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while k > 0 and h:\n        v, i, j = heapq.heappop(h)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(h, (nums1[i] + nums2[j+1], i, j+1))\n        k -= 1\n    return res\n",
        "num_ids": 157
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # pairs = []\n    # if not nums1 or not nums2 or len(nums1) < 1 or len(nums2) < 1 or k < 1:\n    #     return pairs\n    # for i in xrange(len(nums1)):\n    #     for j in xrange(len(nums2)):\n    #         pairs.append((nums1[i], nums2[j]))\n    # return pairs[:k]\n    # heapq.heapify(pairs)\n    # for i in xrange(k):\n    #     x, y = heapq.heappop(pairs)\n    #     return (x,y)\n    # pairs.sort()\n    # return pairs[:k]\n    import heapq\n    pairs = []\n    if not nums1 or not nums2 or len(nums1) < 1 or len(nums2) < 1 or k < 1:\n        return pairs\n    for i in xrange(len(nums1)):\n        for j in xrange(len(nums2)):\n            heapq.heappush(pairs, (nums1[i]+nums2[j], (i, j)))\n    return [pair for pair, _ in pairs[:k]]\n",
        "num_ids": 308
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize min_list to list1\n    min_list = list1\n",
        "num_ids": 20
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = tuple()\n    for tup1 in list1:\n        for tup2 in list1:\n            if tup1!= tup2 and tup1[0]*tup2[1] < result[0]*result[1]:\n                result = tup1[0]*tup2[1], tup1[1]*tup2[0]\n    return result\n",
        "num_ids": 97
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    prod = 1\n    if len(list1) < 2:\n        return None\n    for i in xrange(len(list1)):\n        prod *= list1[i][0] * list1[i][1]\n    return prod\n",
        "num_ids": 62
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            list2.append(list1[i]*list1[j])\n    return min(list2)\n",
        "num_ids": 66
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    temp=[]\n    for i in list1:\n        temp.append(i[0]*i[1])\n    return min(temp)\n",
        "num_ids": 37
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for x in list1:\n        for y in list1:\n            if x[1]*y[1] < x[1]*y[0]:\n                list2.append((x[1]*y[1], x[0]*y[1]))\n            else:\n                list2.append((x[1]*y[0], x[0]*y[0]))\n    return min(list2)\n",
        "num_ids": 110
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min([x[0] * x[1] for x in list1])\n",
        "num_ids": 22
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = sorted(list1)\n    count = 0\n    min_prod = list2[0] * list2[1]\n    while count < len(list2)-1:\n        if list2[count+1] < min_prod:\n            min_prod = list2[count+1] * list2[count+2]\n        count += 1\n    return min_prod\n",
        "num_ids": 97
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #list1 = [('a', 2), ('b', 4), ('c', 6)]\n    product = [x*y for x, y in list1]\n    return min(product)\n",
        "num_ids": 47
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    result = list1[0][0]*list1[0][1]\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if list1[i][0]*list1[j][1] < result:\n                result = list1[i][0]*list1[j][1]\n    return result\n",
        "num_ids": 98
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Get the length of the list\n    listlength = len(listval)\n",
        "num_ids": 21
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n",
        "num_ids": 43
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for x in listval:\n        if x < min_val:\n            min_val = x\n    return min_val\n",
        "num_ids": 43
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return -1\n    min=listval[0]\n    for v in listval:\n        if min>v:\n            min=v\n    return min\n",
        "num_ids": 51
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    smallest = listval[0]\n    for val in listval:\n        if val < smallest:\n            smallest = val\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    else:\n        return min(listval)\n",
        "num_ids": 26
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    minval = listval[0]\n    for item in listval[1:]:\n        if item < minval:\n            minval = item\n    return minval\n    \n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    maxval = listval[0]\n    for item in listval[1:]:\n        if item > maxval:\n            maxval = item\n    return maxval\n    \n    \n    ",
        "num_ids": 62
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n",
        "num_ids": 43
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for item in listval:\n        if item < minval:\n            minval = item\n    return minval\n",
        "num_ids": 39
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    listval = listval.split(',')\n    listval = [int(i) for i in listval]\n    minimum = min(listval)\n    return minimum\n",
        "num_ids": 43
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # word = word.split('_')\n    # word = [x for x in word if x!='']\n    # if word[0].islower() == False:\n    #     word[0] = word[0].upper()\n    # return ''.join(word)\n",
        "num_ids": 69
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n",
        "num_ids": 23
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n",
        "num_ids": 13
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_word = []\n    first_upper = 0\n    for letter in word:\n        if letter == '_':\n            first_upper = 1\n        elif first_upper:\n            new_word.append(letter.upper())\n            first_upper = 0\n        else:\n            new_word.append(letter)\n    return ''.join(new_word)\n",
        "num_ids": 90
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # word = word.lower()\n    # if not word.startswith('_'):\n    #     return word\n    # words = word.split('_')\n    # words = [w.capitalize() for w in words]\n    # return ''.join(words)\n    # return ''.join(s.capitalize() for s in word.split('_'))\n    return ''.join(x.capitalize() for x in word.split('_'))\n    # for c in word:\n    #     if c == '_':\n    #         if word[0]!= '_':\n    #             word = word.replace('_','')\n    #             word = word[0].upper() + word[1:]\n    #         else:\n    #             word = word[0].upper() + word[1:]\n    # return word\n",
        "num_ids": 204
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake = re.sub(r'(?<!^)(?=[A-Z])', '_', word).split('_')\n    return ''.join(snake)\ndef is_operator(c):\n    return c in ['+','-','*','/','%','|','&']\ndef count_ops(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        if is_operator(s[i]):\n            count+=1\n            if i+1 < len(s):\n                if s[i+1] == '(':\n                    if is_operator(s[i+2]):\n                        if i+3 < len(s):\n                            if s[i+3] == '(':\n                                i+=1\n                                count+=1\n                                continue\n                        count+=2\n                        i+=2\n                        continue\n            i+=1\n        i+=1\n    return count\ndef is_constant(s):\n    return re.match(r'^[-+]?\\d+$', s) is not None\ndef is_identifier(s):\n    return re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', s) is not None\ndef is_identifier_or_constant(s):\n    return is_constant(s) or is_identifier(s)\ndef is_operator(c):\n    return c in ['+','-','*','/','%','|','&']\ndef is_left_assoc(op):\n    return op in ['+','-','*','/','%']\ndef is_right_assoc(op):\n    return op in ['&', '|']\ndef tokenize(expr):\n    tokens = []\n    i = 0\n    while i < len(expr):\n        if is_operator(expr[i]):\n            if i+1 < len(expr):\n                if is_operator(expr[i+1]):\n                    tokens.append(expr[i]+expr[i+1])\n                    i+=2\n                    continue\n        tokens.append(expr[i])\n        i+=1\n    return tokens\ndef parse(tokens):\n    i = 0\n    expr = []\n    while i < len(tokens):\n        if is_constant(tokens[i]) or is_identifier_or_constant(tokens[i]):\n            expr.append(tokens[i])\n        elif is_operator(tokens[i]):\n            if len(expr) == 0:\n                raise ValueError('Invalid Expression: Incomplete Expression')\n            if is_left_assoc(tokens[i]):\n                expr.append(tokens[i])\n            else:\n                rhs = expr.pop()\n                lhs = expr.pop()\n                expr.append(tokens[i]+'('+lhs+','+rhs+')')\n        i+=1\n    if len(expr) == 1:\n        return expr[0]\n    else:\n        raise ValueError('Invalid Expression: Incomplete Expression')\ndef evaluate(expr):\n    if is_constant(expr):\n        return int(expr)\n    elif is_identifier(expr):\n        return variable_lookup(expr)\n    else:\n        operand1 = evaluate(expr[2])\n        operand2 = evaluate(expr[4])\n        if expr[1] == '+':\n            return operand1 + operand2\n        elif expr[1] == '-':\n            return operand1 - operand2\n        elif expr[1] == '*':\n            return operand1 * operand2\n        elif expr[1] == '/':\n            return operand1 / operand2\n        elif expr[1] == '%':\n            return operand1 % operand2\n        elif expr[1] == '&':\n            return operand1 & operand2\n        elif expr[1] == '|':\n            return operand1 | operand2\ndef variable_lookup(name):\n    return int(name)\ndef infix_to_postfix(expr):\n    tokens = tokenize(expr)\n    postfix = []\n    stack = []\n    for token in tokens:\n        if is_constant(token) or is_identifier(token):\n            postfix.append(token)\n        elif is_operator(token):\n            if len(stack) == 0:\n                raise ValueError('Invalid Expression: Incomplete Expression')\n            if is_left_assoc(token):\n                while is_operator(stack[-1]) and not is_right_assoc(stack[-1]):\n                    postfix.append(stack.pop())\n                stack.append(token)\n            else:\n                while is_operator(stack[-1]) and not is_left_assoc(stack[-1]):\n                    postfix.append(stack.pop())\n                stack.append(token)\n    while len(stack)!= 0:\n        postfix.append(stack.pop())\n    return postfix\ndef infix_to_prefix(expr):\n    tokens = tokenize(expr)\n    postfix = infix_to_postfix(expr)\n    prefix = []\n    stack = []\n    for token in postfix:\n        if is_operator(token):\n            if len(stack) == 0:\n                raise ValueError('Invalid Expression: Incomplete Expression')\n            if is_left_assoc(token):\n                if is_operator(stack[-1]):\n                    while is_left_assoc(stack[-1]) and not is_right_assoc(stack[-1]):\n                        prefix.append(stack.pop())\n                stack.append(token)\n            else:\n                while is_operator(stack[-1]) and not is_left_assoc(stack[-1]):\n                    prefix.append(stack.pop())\n                stack.append(token)\n        elif is_identifier(token) or is_constant(token):\n            prefix.append(token)\n        elif token == '(':\n            stack.append(token)\n        elif token == ')':\n            while stack[-1]!= '(':\n                prefix.append(stack.pop())\n            stack.pop()\n    while len(stack)!= 0:\n        prefix.append(stack.pop())\n    return prefix\ndef postfix_to_prefix(expr):\n    tokens = tokenize(expr)\n    postfix = infix_to_postfix(expr)\n    prefix = []\n    stack = []\n    for token in postfix:\n        if is_operator(token):\n            if len(stack) == 0:\n                raise ValueError('Invalid Expression: Incomplete Expression')\n            if is_left_assoc(token):\n                while is_operator(stack[-1]):\n                    prefix.append(stack.pop())\n                stack.append(token)\n            else:\n                while is_operator(stack[-1]) and not is_left_assoc(stack[-1]):\n                    prefix.append(stack.pop())\n                stack.append(token)\n        elif is_identifier(token):\n            prefix.append(token)\n        elif token == '(':\n            stack.append(token)\n        elif token == ')':\n            while stack[-1]!= '(':\n                prefix.append(stack.pop())\n            stack.pop()\n    while len(stack)!= 0:\n        prefix.append(stack.pop())\n    return prefix\ndef prefix_to_infix(expr):\n    tokens = tokenize(expr)\n    prefix = infix_to_prefix(expr)\n    infix = []\n    stack = []\n    for token in prefix:\n        if is_operator(token):\n            if len(stack) == 0:\n                raise ValueError('Invalid Expression: Incomplete Expression')\n            while is_operator(stack[-1]) and not is_left_assoc(stack[-1]):\n                infix.append(stack.pop())\n            stack.append(token)\n        elif is_identifier(token) or is_constant(token):\n            infix.append(token)\n        elif token == '(':\n            stack.append(token)\n        elif token == ')':\n            while stack[-1]!= '(':\n                infix.append(stack.pop())",
        "num_ids": 2013
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word=='':\n        return word\n    if word[0]=='_' or word[0].isupper():\n        word=word.replace('_','')\n        if word[0].isupper():\n            return word\n        else:\n            return word[0].upper()+word[1:]\n    else:\n        return word[0].lower()+word[1:]\n",
        "num_ids": 94
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake_regex = re.compile(r'(_)([a-zA-Z]+)([a-zA-Z]+)')\n    return snake_regex.sub(r'\\1\\2\\3', word)\n",
        "num_ids": 59
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == \"\":\n        return word\n    if word[0].isupper():\n        return word\n    else:\n        return word[0].upper() + word[1:]\n",
        "num_ids": 45
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('_','', word)\n    return re.sub('([a-zA-Z0-9])([a-z])', lambda m: m.group(2).upper(), word)\n",
        "num_ids": 53
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for x in l:\n        if x % 2 == 0:\n            new_list.append(x)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = [x for x in l if x%2!=0]\n    return new_list\n",
        "num_ids": 28
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num%2 == 0:\n            new_list.append(num)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2!=0]\nprint(remove_odd([1,2,3,4,5,6,7,8]))\n",
        "num_ids": 43
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(0, len(list1)):\n        if i == n:\n            return list1[i]\n",
        "num_ids": 32
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [row[n] for row in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i, tuple in enumerate(list1):\n        if i == n-1:\n            return tuple\n",
        "num_ids": 28
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return [x[n] for x in list1]\n    except:\n        return None\n",
        "num_ids": 28
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # for elem in list1:\n    #     if n == list1.index(elem):\n    #         return elem\n",
        "num_ids": 34
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # return list1[n - 1]\n    return list1[n - 1] if n <= len(list1) else None\n    \n",
        "num_ids": 35
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    return list1.intersection(list2)\n",
        "num_ids": 34
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(value in list2 for value in list1)\n    #return any(value for value in list1 if value in list2)\n    #return any(value for value in list1 if value in list2)\n    #return any(value for value in list1 if value in list2)\n    #return any(value for value in list1 if value in list2)\n    \ndef smallest(list1):\n    '''\n    Write a python function to find the smallest value in a sequence.\n    '''\n    return min(list1)\n    #return min(list1)\n    #return min(list1)\n    #return min(list1)\n    #return min(list1)\n    #return min(list1)\n    \ndef largest(list1):\n    '''\n    Write a python function to find the largest value in a sequence.\n    '''\n    return max(list1)\n    #return max(list1)\n    #return max(list1)\n    #return max(list1)\n    #return max(list1)\n    #return max(list1)\n    \ndef concatenate(list1,list2):\n    '''\n    Write a python function to concatenate two lists\n    '''\n    return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    \ndef common_items(list1,list2):\n    '''\n    Write a python function to find common items in two sequences\n    '''\n    return list(set(list1).intersection(list2))\n    #return list(set(list1).intersection(list2))\n    #return list(set(list1).intersection(list2))\n    #return list(set(list1).intersection(list2))\n    #return list(set(list1).intersection(list2))\n    #return list(set(list1).intersection(list2))\n    \ndef reverse_list(list1):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return list1[::-1]\n    #return list1[::-1]\n    #return list1[::-1]\n    #return list1[::-1]\n    #return list1[::-1]\n    #return list1[::-1]\n    \ndef sum_lists(list1,list2):\n    '''\n    Write a python function to sum two lists.\n    '''\n    return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    #return list1 + list2\n    \ndef product_list(list1,list2):\n    '''\n    Write a python function to multiply two lists.\n    '''\n    return list1 * list2\n    #return list1 * list2\n    #return list1 * list2\n    #return list1 * list2\n    #return list1 * list2\n    #return list1 * list2\n    \ndef remove_item(list1,item):\n    '''\n    Write a python function to remove an item from a list.\n    '''\n    return [item for item in list1 if item!= item]\n    #return [item for item in list1 if item!= item]\n    #return [item for item in list1 if item!= item]\n    #return [item for item in list1 if item!= item]\n    #return [item for item in list1 if item!= item]\n    #return [item for item in list1 if item!= item]\n    \ndef remove_items(list1,item):\n    '''\n    Write a python function to remove a list of items from a list.\n    '''\n    return [item for item in list1 if item not in item]\n    #return [item for item in list1 if item not in item]\n    #return [item for item in list1 if item not in item]\n    #return [item for item in list1 if item not in item]\n    #return [item for item in list1 if item not in item]\n    #return [item for item in list1 if item not in item]\n    \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    \ndef reverse_string(string1):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return string1[::-1]\n    #return string1[::-1]\n    #return string1[::-1]\n    #return string1[::-1]\n    #return string1[::-1]\n    #return string1[::-1]\n    \ndef sort_list(list1):\n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(list1)\n    #return sorted(list1)\n    #return sorted(list1)\n    #return sorted(list1)\n    #return sorted(list1)\n    #return sorted(list1)\n    \ndef unique_list(list1):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    #return list(set(list1))\n    \ndef split_list(list1):\n    '''\n    Write a python function to split a list into two equal lengths.\n    '''\n    length = len(list1)\n    half = length/2\n    return [list1[i:i+half] for i in range(0, half)]\n    #return [list1[i:i+half] for i in range(0, half)]\n    #return [list1[i:i+half] for i in range(0, half)]\n    #return [list1[i:i+half] for i in range(0, half)]\n    #return [list1[i:i+half] for i in range(0, half)]\n    \ndef swap_list(list1):\n    '''\n    Write a python function to swap first and last items in a list.\n    '''\n    return list1[-1:] + list1[:-1]\n    #return list1[-1:] + list1[:-1]\n    #return list1[-1:] + list1[:-1]\n    #return list1[-1:] + list1[:-1]\n    #return list1[-1:] + list1[:-1]\n    #return list1[-1:] + list1[:-1]\n    \ndef length_list(list1):\n    '''\n    Write a python function to calculate the length of a list.\n    '''\n    return len(list1)\n    #return len(list1)\n    #return len(list1)\n    #return len(list1)\n    #return len(list1)\n    #return len(list1)\n    \ndef mean(list1):\n    '''\n    Write a python function to calculate the mean of a list.\n    '''\n    return sum(list1)/len(list1)\n    #return sum(list1)/len(list1)\n    #return sum(list1)/len(list1)\n    #return sum(list1)/len(list1)\n    #return sum(list1)/len(list1)\n    #return sum(list1)/len(list1)\n    \ndef median(list1):\n    '''\n    Write a python function to calculate the median of a list.\n    '''\n    list1.sort()\n    length = len(list1)\n    if length % 2 == 0:\n        return (list1[length/2] + list1[length/2 -1]) / 2.0\n    else:\n        return list1[length/2]\n    #return (list1[length/2] + list1[length/2 -1]) ",
        "num_ids": 88
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1 in list2:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if (list1[0] in list2) or (list1[1] in list2) or (list1[2] in list2) or (list1[3] in list2) or (list1[4] in list2):\n        print(True)\n    else:\n        print(False)\n    return\n",
        "num_ids": 78
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return (x in list2 for x in list1)\n",
        "num_ids": 16
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        for y in list2:\n            if x==y:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    try:\n        for i in list1:\n            if i in list2:\n                return True\n    except TypeError:\n        return False\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1==[]:\n        return False\n    for val in list1:\n        if val in list2:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list2 for x in list1)\n    \ndef ConvertCharToNumber(char):\n    '''\n    Write a python function to convert a character to integer.\n    '''\n    return ord(char) - ord('a')\n",
        "num_ids": 14
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    ans = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]*arr[j] > ans:\n                ans = arr[i]*arr[j]\n                pairs = [(arr[i],arr[j])]\n            elif arr[i]*arr[j] == ans:\n                pairs.append((arr[i],arr[j]))\n    return pairs\n",
        "num_ids": 124
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = arr[0]\n    temp = max\n    for i in range(1,len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n        if arr[i]<0:\n            temp *=arr[i]\n    return temp\n",
        "num_ids": 70
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if not arr:\n        return None\n    if len(arr) < 2:\n        return None\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    product = [arr[0], arr[1], max(arr[0], arr[1])]\n    for i in range(2, len(arr)):\n        product.append(max(product[i-1] * arr[i], product[i-2] * arr[i], arr[i]))\n    return product[-1]\n",
        "num_ids": 129
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if arr == []:\n        return None\n    else:\n        max_product = max(arr)*max(arr)\n        max_product_index = [arr.index(max(arr)),arr.index(max(arr))]\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                if arr[j]*arr[i]>max_product:\n                    max_product_index = [i,j]\n                    max_product = arr[j]*arr[i]\n        return max_product_index\n",
        "num_ids": 138
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n",
        "num_ids": 69
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n==1:\n        return (arr[0], arr[0])\n    p = [1]*n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                p[i] = max(p[i], p[j]*arr[i])\n    max_element, max_prod = arr[0], p[0]\n    for i in range(1, n):\n        if max_prod < p[i]:\n            max_element, max_prod = arr[i], p[i]\n    return (max_element, max_prod)\n    \nprint max_Product([-4, -3, -2, -1])\n",
        "num_ids": 184
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m = -1\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j] > m:\n                m = arr[i]*arr[j]\n                p1 = arr[i]\n                p2 = arr[j]\n    return p1,p2\n    \n    \nprint max_Product([-2,1,-3,4,-1,2,1,-5,4])\n",
        "num_ids": 121
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) <= 3:\n        return None\n    if len(arr) == 4:\n        return arr[-1] * arr[-2] * arr[-3]\n",
        "num_ids": 46
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    temp = 1\n    result = -100\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if i!= j:\n                temp = arr[i]*arr[j]\n                if temp > result:\n                    result = temp\n    return result\n    \ndef min_Product(arr): \n    '''\n    Write a python function to find a pair with lowest product from a given array of integers.\n    '''\n    temp = 1000000\n    result = -100\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if i!= j:\n                temp = arr[i]*arr[j]\n                if temp < result:\n                    result = temp\n    return result\n    \ndef pow(x,y):\n    '''\n    Write a python function to find the power of the number.\n    '''\n    if y==0:\n        return 1\n    if y<0:\n        return 1/pow(x,-y)\n    if y>0:\n        return pow(x,y-1)*x\n    \ndef factorial(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    fact = 1\n    while n>1:\n        fact = fact*n\n        n = n-1\n    return fact\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find nth fibonacci number\n    '''\n    fib1 = 0\n    fib2 = 1\n    temp = 0\n    while temp < n:\n        temp = fib1 + fib2\n        fib1 = fib2\n        fib2 = temp\n    return fib1\n    \ndef gcd(a,b):\n    '''\n    Write a python function to find GCD of two number.\n    '''\n    if a%b == 0:\n        return b\n    else:\n        return gcd(b,a%b)\n        \ndef multiplicative_inverse(a,b):\n    '''\n    Write a python function to find multiplicative inverse of a number.\n    '''\n    mod = a%b\n    if mod == 0:\n        return 0\n    else:\n        return multiplicative_inverse(b,mod)\n        \ndef list_all_rotations(arr):\n    '''\n    Write a python function to return all rotations of a list\n    '''\n    rotations = []\n    for i in range(0,len(arr)):\n        rotations.append(arr[i:]+arr[:i])\n    return rotations\n    \ndef list_rotate(arr,d):\n    '''\n    Write a python function to rotate a list\n    '''\n    if d > 0:\n        return arr[d:]+arr[:d]\n    elif d == 0:\n        return arr\n    else:\n        return arr[-d:]+arr[:-d]\n        \ndef find_rotation_with_max_product(arr):\n    '''\n    Write a python function to find rotation with max product\n    '''\n    temp = 1\n    result = -1\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if i!= j:\n                temp = arr[i]*arr[j]\n                if temp > result:\n                    result = temp\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # arr.sort()\n    # print arr\n    N = len(arr)\n    # max_product = arr[0]*arr[1]\n    # max_product = arr[0]*arr[1]*arr[2]\n    # max_product = arr[N-1]*arr[N-2]*arr[N-3]\n    # print arr\n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                prod = arr[i]*arr[j]*arr[k]\n                if prod>max_product:\n                    max_product = prod\n    return max_product\n",
        "num_ids": 171
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    A = [tuple(i) for i in Input]\n    B = sorted(set(A))\n    for i in B:\n        if A.count(i) > 1:\n            return i\n    return None\n",
        "num_ids": 54
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Example : Input = [(1, 2), (1, 3), (1, 4), (2, 4), (3, 4), (4, 4)]\n    # Output = 1\n    \n    '''\n    Grouping elements based on first element\n    (1, 2) (1, 3) (1, 4)\n    (2, 4) (3, 4) (4, 4)\n    \n    1. Initially {(1, 2) (1, 3) (1, 4)}\n    2. Sort the list based on first element\n    3. Iterate through the list and add the second element to list if present else remove the element \n        from the list and add it to the new list.\n    '''\n    \n    Input.sort(key = lambda x: x[0])\n    l = []\n    \n    for i in Input:\n        if i not in l:\n            l.append(i)\n    \n    return l[0][0]\n",
        "num_ids": 60
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    group = {}\n    for i in Input:\n        key = i[0]\n        if key in group:\n            group[key].append(i)\n        else:\n            group[key] = [i]\n    return group\n",
        "num_ids": 57
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Temp = []\n    for elem in Input:\n        Temp.append(elem[0])\n    Temp = set(Temp)\n    Temp = list(Temp)\n    Output = []\n    for elem in Input:\n        for item in Temp:\n            if item in elem:\n                Output.append(item)\n    return Output\n",
        "num_ids": 82
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # time = O(n^2)\n    # space = O(1)\n",
        "num_ids": 22
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    output = set()\n    for i in Input:\n        output.add(i[0])\n    return output\n",
        "num_ids": 29
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Edge case when list is empty\n    if len(Input) == 0:\n        return None\n    # Edge case when list is of length 1\n    elif len(Input) == 1:\n        return Input[0][0]\n    # Edge case when list is of length 2\n    elif len(Input) == 2:\n        return (min(Input[0][0], Input[1][0]), max(Input[0][0], Input[1][0]))\n    # Edge case when list is of length 3\n    elif len(Input) == 3:\n        return (min(Input[0][0], Input[1][0], Input[2][0]),\n            max(Input[0][0], Input[1][0], Input[2][0]))\n    # Edge case when list is of length 4\n    elif len(Input) == 4:\n        return (min(Input[0][0], Input[1][0], Input[2][0], Input[3][0]),\n            max(Input[0][0], Input[1][0], Input[2][0], Input[3][0]))\n    # Edge case when list is of length 5\n    elif len(Input) == 5:\n        return (min(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0]),\n            max(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0]))\n    # Edge case when list is of length 6\n    elif len(Input) == 6:\n        return (min(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0]),\n            max(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0]))\n    # Edge case when list is of length 7\n    elif len(Input) == 7:\n        return (min(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0]),\n            max(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0]))\n    # Edge case when list is of length 8\n    elif len(Input) == 8:\n        return (min(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0]),\n            max(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0]))\n    # Edge case when list is of length 9\n    elif len(Input) == 9:\n        return (min(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0], Input[8][0]),\n            max(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0], Input[8][0]))\n    # Edge case when list is of length 10\n    elif len(Input) == 10:\n        return (min(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0], Input[8][0], Input[9][0]),\n            max(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0], Input[8][0], Input[9][0]))\n    # Edge case when list is of length 11\n    elif len(Input) == 11:\n        return (min(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0], Input[8][0], Input[9][0], Input[10][0]),\n            max(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0], Input[8][0], Input[9][0], Input[10][0]))\n    # Edge case when list is of length 12\n    elif len(Input) == 12:\n        return (min(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0], Input[8][0], Input[9][0], Input[10][0], Input[11][0]),\n            max(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0], Input[8][0], Input[9][0], Input[10][0], Input[11][0]))\n    # Edge case when list is of length 13\n    elif len(Input) == 13:\n        return (min(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0], Input[8][0], Input[9][0], Input[10][0], Input[11][0], Input[12][0]),\n            max(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0], Input[8][0], Input[9][0], Input[10][0], Input[11][0], Input[12][0]))\n    # Edge case when list is of length 14\n    elif len(Input) == 14:\n        return (min(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0], Input[8][0], Input[9][0], Input[10][0], Input[11][0], Input[12][0], Input[13][0]),\n            max(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0], Input[8][0], Input[9][0], Input[10][0], Input[11][0], Input[12][0], Input[13][0]))\n    # Edge case when list is of length 15\n    elif len(Input) == 15:\n        return (min(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0], Input[8][0], Input[9][0], Input[10][0], Input[11][0], Input[12][0], Input[13][0], Input[14][0]),\n            max(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[7][0], Input[8][0], Input[9][0], Input[10][0], Input[11][0], Input[12][0], Input[13][0], Input[14][0]))\n    # Edge case when list is of length 16\n    elif len(Input) == 16:\n        return (min(Input[0][0], Input[1][0], Input[2][0], Input[3][0], Input[4][0], Input[5][0], Input[6][0], Input[",
        "num_ids": 2015
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Convert input to list of tuples\n    tuple_list = []\n    for elem in Input:\n        tuple_list.append(tuple(elem))\n",
        "num_ids": 44
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    newlist = []\n    for i in Input:\n        newlist.append(i[0])\n    d = {}\n    for i in newlist:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    l = []\n    for i in d:\n        if d[i] == len(Input):\n            l.append(i)\n    return l\n    \ndef find_dublicates(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    newlist = []\n    for i in Input:\n        newlist.append(i[0])\n    d = {}\n    for i in newlist:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    l = []\n    for i in d:\n        if d[i] == len(Input):\n            l.append(i)\n    return l\n",
        "num_ids": 107
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    temp_list = []\n    for element in Input:\n        temp_list.append(element[0])\n    return temp_list\n",
        "num_ids": 34
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = -1\n    max_element = 0\n    for ele in lst: \n        if(len(ele) > max_len):\n            max_len = len(ele)\n            max_element = ele\n    return max_element\n",
        "num_ids": 62
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_len_element = None\n    for element in lst: \n        if len(element)>max_len:\n            max_len = len(element)\n            max_len_element = element\n    return max_len_element\n",
        "num_ids": 66
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lengths = list(map(len,lst))\n    return lst[lengths.index(max(lengths))]\n",
        "num_ids": 33
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length = []\n    for i in lst:\n        length.append(len(i))\n    max_length = max(length)\n    for i in lst:\n        if(len(i) == max_length):\n            return i\n",
        "num_ids": 60
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    for i in range(len(lst)):\n        if len(lst[i])==len(lst[i+1]):\n            continue\n        else:\n            return(lst[i])\n    return(lst[i+1])\n",
        "num_ids": 63
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    for i in lst:\n        if len(i) == max_len:\n            return i\n",
        "num_ids": 69
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) > len(max):\n            max = lst[i]\n    return max\n",
        "num_ids": 52
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    result = lst[0]\n    max = lst[0]\n    for i in lst:\n        if len(i) > len(max):\n            max = i\n    return max\n",
        "num_ids": 49
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length=len(lst)\n    maxi=lst[0]\n    for i in range(length):\n        if(length>len(maxi)):\n            maxi=lst[i]\n    return maxi\n",
        "num_ids": 57
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for i in lst:\n        if len(i)>max_len:\n            max_len = len(i)\n            max_element = i\n    return max_element\n",
        "num_ids": 59
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum=0\n    for i in list1:\n        sum=sum+round(i)\n    print(sum*len(list1))\n",
        "num_ids": 36
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print \"Total sum of numbers: \" + str(total) + \"\\n\" + \"*\"*30\n",
        "num_ids": 48
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for number in list1:\n        total = total + round(number)\n    print total * len(list1)\n",
        "num_ids": 35
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))\n",
        "num_ids": 34
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    tot = 0\n    for i in list1:\n        tot += round(i)\n    return round(tot) * len(list1)\n",
        "num_ids": 39
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for number in list1:\n        sum += round(number)\n    print(sum * len(list1))\n    return\n",
        "num_ids": 37
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))\n",
        "num_ids": 34
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for element in list1:\n        total_sum += round(element)\n    return total_sum * len(list1)\n",
        "num_ids": 39
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_total = 0\n    for i in list1:\n        sum_total += round(i,2)\n    return sum_total*len(list1)\n",
        "num_ids": 41
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for number in list1:\n        rounded = round(number)\n        total += rounded\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    s = n*(n+1)*(2*n+1) / 6\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(2, n+1, 2):\n        result += i**3\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([x**3 for x in range(0, n, 2)])\n",
        "num_ids": 22
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return int((n*(n+1)*(2*n+1))/6)\n",
        "num_ids": 24
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += i**3\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    if n<=0:\n        return\n    \n    sum = 0\n    \n    while (n>0):\n        sum += n**3\n        n -= 2\n    \n    return sum\n    \ndef primes_less_than(n):\n    '''\n    Write a python function to find the prime numbers between 1 and n (inclusive)\n    '''\n    if n < 2:\n        return\n    \n    for i in range(2, n):\n        if (i%2!= 0) and (i%3!= 0) and (i%5!= 0):\n            print i\n    \ndef primes_up_to(n):\n    '''\n    Write a python function to find the prime numbers between 1 and n (inclusive)\n    '''\n    if n < 2:\n        return\n    \n    for i in range(2, n+1):\n        if (i%2!= 0) and (i%3!= 0) and (i%5!= 0):\n            print i\n    \ndef digit_Factorial(n):\n    '''\n    Write a python function to find the factorial of the digits of a number.\n    '''\n    if n < 0:\n        print \"factorial does not exist for negative numbers\"\n        return\n    \n    product = 1\n    while n:\n        product *= n%10\n        n /= 10\n        \n    return product\n    \ndef factorial_digit(n):\n    '''\n    Write a python function to find the factorial of the digits of a number.\n    '''\n    if n < 0:\n        print \"factorial does not exist for negative numbers\"\n        return\n    \n    product = 1\n    while n:\n        product *= n\n        n /= 10\n    \n    return product\n    \ndef to_Decimal(n):\n    '''\n    Write a python function to convert a given number to a decimal number\n    '''\n    if n < 0:\n        return \"0\"\n    \n    product = 0\n    while n:\n        digit = n%10\n        product = product*10 + digit\n        n /= 10\n    \n    return str(product)\n    \ndef to_Binary(n):\n    '''\n    Write a python function to convert a given number to a binary number\n    '''\n    if n < 0:\n        return \"0\"\n    \n    product = 0\n    while n:\n        digit = n%2\n        product = product*10 + digit\n        n /= 2\n    \n    return str(product)\n    \ndef to_Octal(n):\n    '''\n    Write a python function to convert a given number to an octal number\n    '''\n    if n < 0:\n        return \"0\"\n    \n    product = 0\n    while n:\n        digit = n%8\n        product = product*10 + digit\n        n /= 8\n    \n    return str(product)\n    \ndef to_Hexadecimal(n):\n    '''\n    Write a python function to convert a given number to a hexadecimal number\n    '''\n    if n < 0:\n        return \"0\"\n    \n    product = 0\n    while n:\n        digit = n%16\n        if digit < 10:\n            digit = digit + 48\n        else:\n            digit = digit + 55\n        product = product*10 + digit\n        n /= 16\n    \n    return str(product)\n    \ndef to_Exponential(n):\n    '''\n    Write a python function to convert a given number to a exponential number\n    '''\n    if n < 0:\n        return \"0\"\n    \n    product = 1\n    while n:\n        product *= n\n        n /= 10\n    \n    return str(product)\n",
        "num_ids": 48
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([pow(i,3) for i in range(n) if i%2==0])\n",
        "num_ids": 28
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(list(range(0,n,2)))**3\n",
        "num_ids": 19
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            total += i**3\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    x = 0\n    for i in range(1,n+1,2):\n        x = x + i**3\n    return x\n    \n    \ndef check_palindrome(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    x = n\n    rev = 0\n    while(n>0):\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    if(x == rev):\n        print('Palindrome')\n    else:\n        print('Not Palindrome')\n    \n    \ndef factorial(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    f = 1\n    for i in range(1,n+1):\n        f = f * i\n    return f\n    \n    \ndef factorial_of_digit(n):\n    '''\n    Write a python function to find factorial of digit of a number.\n    '''\n    f = 1\n    while(n>0):\n        rem = n % 10\n        f = f * rem\n        n = n // 10\n    return f\n    \n    \ndef prime_digit(n): \n    '''\n    Write a python function to find the count of prime numbers in the range of 1 to n.\n    '''\n    if(n < 1):\n        return 0\n    if(n == 1):\n        return 0\n    cnt = 0\n    for i in range(1,n+1):\n        if(n%i == 0):\n            cnt = cnt + 1\n    return cnt\n    \n    \ndef prime_digit_sum(n):\n    '''\n    Write a python function to find the sum of all prime numbers in the range of 1 to n.\n    '''\n    cnt = 0\n    for i in range(1,n+1):\n        if(n%i == 0):\n            cnt = cnt + i\n    return cnt\n    \n    \ndef count_digits(n):\n    '''\n    Write a python function to find the count of digits in the number n.\n    '''\n    cnt = 0\n    while(n>0):\n        rem = n % 10\n        cnt = cnt + 1\n        n = n // 10\n    return cnt\n    \n    \ndef count_digits_sum(n):\n    '''\n    Write a python function to find the sum of digits in the number n.\n    '''\n    cnt = 0\n    while(n>0):\n        rem = n % 10\n        cnt = cnt + rem\n        n = n // 10\n    return cnt\n    \n    \ndef count_digits_product(n):\n    '''\n    Write a python function to find the product of digits in the number n.\n    '''\n    p = 1\n    while(n>0):\n        rem = n % 10\n        p = p * rem\n        n = n // 10\n    return p\n    \n    \ndef factorial_digit_product(n):\n    '''\n    Write a python function to find the product of factorial of digits in the number n.\n    '''\n    p = 1\n    while(n>0):\n        rem = n % 10\n        p = p * factorial_of_digit(rem)\n        n = n // 10\n    return p\n    \n    \ndef is_prime(n): \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    if(n<2):\n        return False\n    if(n == 2):\n        return True\n    if(n % 2 == 0):\n        return False\n    for i in range(3,n):\n        if(n%i == 0):\n            return False\n    return True\n    \n    \ndef nth_prime_number(n):\n    '''\n    Write a python function to find the nth prime number in the range of 1 to N.\n    '''\n    for i in range(1,n+1):\n        if(is_prime(i)):\n            cnt = cnt + 1\n    return i\n    \n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    x = 0\n    while(n>0):\n        rem = n % 10\n        x = x + rem\n        n = n // 10\n    return x\n    \n    \ndef count_prime_factors(n):\n    '''\n    Write a python function to find the count of prime factors of number n.\n    '''\n    cnt = 0\n    while(n>1):\n        if(is_prime(n)):\n            cnt = cnt + 1\n        n = n // 10\n    return cnt\n    \n    \ndef count_prime_factors_sum(n):\n    '''\n    Write a python function to find the sum of prime factors of number n.\n    '''\n    cnt = 0\n    while(n>1):\n        if(is_prime(n)):\n            cnt = cnt + n\n        n = n // 10\n    return cnt\n    \n    \ndef nth_prime_factor_product(n):\n    '''\n    Write a python function to find the product of nth prime factor of number n.\n    '''\n    p = 1\n    cnt = 0\n    while(n>1):\n        if(is_prime(n)):\n            cnt = cnt + 1\n            p = p * n\n        n = n // 10\n    return p\n    \n    \ndef count_perfect_squares(n):\n    '''\n    Write a python function to find the count of perfect squares in the range of 1 to n.\n    '''\n    cnt = 0\n    for i in range(1,n+1):\n        a = i * i\n        if(a == i):\n            cnt = cnt + 1\n    return cnt\n    \n    \ndef count_perfect_squares_sum(n):\n    '''\n    Write a python function to find the sum of perfect squares in the range of 1 to n.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        a = i * i\n        if(a == i):\n            x = x + i\n    return x\n    \n    \ndef count_perfect_squares_product(n):\n    '''\n    Write a python function to find the product of perfect squares in the range of 1 to n.\n    '''\n    p = 1\n    for i in range(1,n+1):\n        a = i * i\n        if(a == i):\n            p = p * i\n    return p\n    \n    \ndef nth_perfect_square(n):\n    '''\n    Write a python function to find the nth perfect square number in the range of 1 to N.\n    '''\n    for i in range(1,n+1):\n        a = i * i\n        if(a == i):\n            cnt = cnt + 1\n    return i\n    \n    \ndef is_square(n): \n    '''\n    Write a python function to check whether a number is a perfect square or not.\n    '''\n    x = n\n    y = x * x\n    if(x == y):\n        return True\n    else:\n        return False\n    \n    \ndef prime_factor(n):\n    '''\n    Write a python function to find the prime factors of the number n.\n    '''\n    cnt = 0\n    i = 2\n    while(i * i <= n):\n        if(n % i == 0):\n            cnt = cnt + 1\n            n = n // i\n        else:\n            i = i + 1\n    if(n > 1):\n        cnt = cnt + 1\n    return cnt\n    \n    \ndef prime_factor_sum(n):\n    '''\n    Write a python function to find the sum of prime factors of the number n.\n    '''\n    cnt = 0\n    while(n > 1):\n        if(is_prime(n)):\n            cnt = cnt + n\n        n = n // 10\n    return cnt\n    \n    \ndef nth_prime_factor_product(n):\n    '''\n    Write a python function to find the product of nth prime factor of numbe",
        "num_ids": 19
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_tup = \"\".join(test_tup)\n    return concatenated_tup\n",
        "num_ids": 30
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    print ','.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str = ''\n    for i in test_tup:\n        str += i\n        str += delimiter\n    return str[:len(str)-1]\n",
        "num_ids": 40
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \"-\"\n    return delimiter.join(test_tup)\n",
        "num_ids": 23
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for i in test_tup:\n        res += i\n    return res\n",
        "num_ids": 26
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return (delimiter.join(test_tup))\n",
        "num_ids": 17
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    l = []\n    for i in test_tup:\n        l.append(str(i))\n    return delimiter.join(l)\n",
        "num_ids": 37
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str_list = []\n    for ele in test_tup:\n        str_list.append(str(ele))\n    return ','.join(str_list)\n",
        "num_ids": 43
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    summation = 0\n    for i in range(1, n+1):\n        summation = summation + i**3\n    return summation / n\n",
        "num_ids": 41
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result = result + i*i*i\n    return result/n\n    \nprint \"Average of cubes of first \", find_Average_Of_Cube(10)\nprint find_Average_Of_Cube(100)",
        "num_ids": 69
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    average = 0\n    for i in range(1,n+1):\n        average += i*i*i\n    return average/n\n    \n    \n    \nprint find_Average_Of_Cube(100)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2010
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import math\n    sum = 0\n    for i in range(1,n+1):\n        sum += math.pow(i,3)\n    average = sum/n\n    return average\n    \n    \ndef find_Average_Of_Cube_V2(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([math.pow(x,3) for x in range(1,n+1)])/n\n",
        "num_ids": 30
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #get the value of n\n    s = 0\n    #divide by zero if n is 0\n    if n==0:\n        return 0\n    for i in range(1,n+1):\n        s += i**3\n    return s/n\n    \nprint find_Average_Of_Cube(0)\nprint find_Average_Of_Cube(1)\nprint find_Average_Of_Cube(2)\nprint find_Average_Of_Cube(3)\nprint find_Average_Of_Cube(4)\nprint find_Average_Of_Cube(5)\nprint find_Average_Of_Cube(6)\nprint find_Average_Of_Cube(7)\nprint find_Average_Of_Cube(8)\nprint find_Average_Of_Cube(9)\nprint find_Average_Of_Cube(10)\nprint find_Average_Of_Cube(11)\nprint find_Average_Of_Cube(12)\nprint find_Average_Of_Cube(13)\nprint find_Average_Of_Cube(14)\nprint find_Average_Of_Cube(15)",
        "num_ids": 256
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    n = int(n)\n    s = 0\n    for i in range(1,n+1):\n        s = s + pow(i,3)\n    print \"The average of cube of first \",n,\" natural numbers is: \",(s/n)\n    \n    \ndef swap(a,b):\n    '''\n    Write a python function to swap the values of two variables.\n    '''\n    tmp = a\n    a = b\n    b = tmp\n    print \"After swapping a = \",a,\" b = \",b\n    \ndef find_Powers_of_Two(n):  \n    '''\n    Write a python function to find the sum of powers of 2 upto n(excluding n)\n    '''\n    n = int(n)\n    s = 0\n    for i in range(n):\n        s = s + 2**i\n    print \"The sum of powers of 2 upto n = \",s\n    \ndef main():\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    n = input(\"Enter a number: \")\n    n = int(n)\n    f = 1\n    for i in range(1,n+1):\n        f = f*i\n    print \"The factorial of \",n,\" is \",f\n    \n    \nmain(",
        "num_ids": 67
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0.0\n    for i in range(1, n+1):\n        result += i**3\n    result = result / n\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    Sum = 0.0\n    for i in range(1,n+1):\n        Sum += i**3\n    return Sum/n\n",
        "num_ids": 35
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return (n**3) / 4.0\n",
        "num_ids": 14
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    c=0\n    for i in range(1,n+1):\n        c=c+(i**3)\n    return float(c/n)\n",
        "num_ids": 39
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(x[-1] for x in test_tuple)\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # your code here\n    return tuple(map(lambda x: x[-1], test_tuple))\n",
        "num_ids": 28
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda s: s[-1], test_tuple))\n",
        "num_ids": 22
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([x[-1] for x in test_tuple])\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [tuple[-1] for tuple in test_tuple]\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(x[-1] for x in test_tuple)\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for i in range(len(test_tuple)):\n        rear.append(test_tuple[i][-1])\n    return rear\n",
        "num_ids": 44
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([x[-1] for x in test_tuple])\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(t[-1] for t in test_tuple)\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [element[-1] for element in test_tuple]\n",
        "num_ids": 19
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return sum([1 for i in list1 if x in i])\n",
        "num_ids": 18
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    total = 0\n    for index in range(len(list1)):\n        if x in list1[index]:\n            total += 1\n    return total\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return sum([x in s for s in list1])\n",
        "num_ids": 16
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if x in item:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if x not in list1:\n        return 0\n    else:\n        return list1.count(x)\n",
        "num_ids": 29
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if x in list1[i]:\n            count = count + 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list2 = [list1[i:i+len(x)] for i in range(0, len(list1), len(x))]\n    num = 0\n    for i in list2:\n        if x in i:\n            num += 1\n    return num\n",
        "num_ids": 65
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            count = count + 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            yield num\n",
        "num_ids": 25
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda n: n % 2 == 1, nums)\n",
        "num_ids": 19
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # my solution\n    # return [num for num in nums if num % 2 == 0]\n    \n    # exercise solution\n    # for num in nums:\n    #     if num % 2 == 0:\n    #         yield num\n    \n    # better solution\n    return list(filter(lambda num: num % 2 == 0, nums))\n    \n    \nif __name__ == '__main__':\n    nums = [1,2,3,4,5,6,7,8,9]\n    print(filter_oddnumbers(nums)",
        "num_ids": 136
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 0:\n            nums.remove(num)\n    return nums\n",
        "num_ids": 33
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            nums.remove(i)\n    return nums\n",
        "num_ids": 34
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2!= 0, nums)\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Write your solution here\n    # you can use other functions if needed\n    def is_odd(n):\n        return n%2!= 0\n    return filter(is_odd, nums)\n",
        "num_ids": 49
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n%2!=0]\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2, nums)\n",
        "num_ids": 17
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match('\\d{4}-\\d{2}-\\d{2}', dt):\n        dt = dt.replace('-', '-')\n    return dt\n",
        "num_ids": 49
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace('-','')\n",
        "num_ids": 14
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return '%d-%s-%s' % (dt[6:],dt[4:6],dt[:4])\n",
        "num_ids": 33
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.search(r'\\d{4}-\\d{2}-\\d{2}', dt)\n    if m:\n        return dt.replace('-','')\n    return 'Invalid date'\n",
        "num_ids": 57
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    format = '%Y-%m-%d'\n    date = dt.strftime(format)\n    return date\n",
        "num_ids": 32
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    result = re.sub(r'(\\d{2})-(\\d{2})-(\\d{4})',r'\\3-\\2-\\1',dt)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = dt.split('-')\n    d = d[::-1]\n    return ''.join(d)\n",
        "num_ids": 32
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = '%Y-%m-%d'\n    try:\n        dt = datetime.datetime.strptime(dt,date_format)\n    except:\n        return None\n    return dt.strftime(\"%d-%m-%Y\")\n",
        "num_ids": 68
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d,m,y = int(dt[6:8]), int(dt[3:5]), int(dt[:2])\n    dd,mm,yy = {'01':'Jan','02':'Feb','03':'Mar','04':'Apr','05':'May','06':'Jun','07':'Jul','08':'Aug','09':'Sep','10':'Oct','11':'Nov','12':'Dec'}[dt[8:10]], {'01':'Jan','02':'Feb','03':'Mar','04':'Apr','05':'May','06':'Jun','07':'Jul','08':'Aug','09':'Sep','10':'Oct','11':'Nov','12':'Dec'}[dt[5:7]], int(dt[2:4])\n    return str(dd)+'-'+str(mm)+'-'+str(yy)+' '+str(d)+'-'+str(m)+'-'+str(y)\n",
        "num_ids": 233
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.replace('-', '/')\n    return dt\n    \ndef change_date_format_range(start_dt, end_dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    start_dt = start_dt.replace('-', '/')\n    end_dt = end_dt.replace('-', '/')\n    return start_dt, end_dt\n    \ndef get_team_from_team_id(team_id):\n    team_id = str(team_id)\n    if team_id.lower() == 'atl':\n        return 'ATL'\n    elif team_id.lower() == 'bos':\n        return 'BOS'\n    elif team_id.lower() == 'cin':\n        return 'CIN'\n    elif team_id.lower() == 'cle':\n        return 'CLE'\n    elif team_id.lower() == 'dal':\n        return 'DAL'\n    elif team_id.lower() == 'den':\n        return 'DEN'\n    elif team_id.lower() == 'det':\n        return 'DET'\n    elif team_id.lower() == 'gnb':\n        return 'GNB'\n    elif team_id.lower() == 'htx':\n        return 'HTX'\n    elif team_id.lower() == 'ind':\n        return 'IND'\n    elif team_id.lower() == 'jax':\n        return 'JAX'\n    elif team_id.lower() == 'kc':\n        return 'KAN'\n    elif team_id.lower() =='sdg':\n        return 'SDG'\n    elif team_id.lower() =='sea':\n        return 'SEA'\n    elif team_id.lower() == 'tru':\n        return 'TRU'\n    elif team_id.lower() == 'wsh':\n        return 'WSH'\n    else:\n        return None\n    \ndef get_team_id_from_team(team):\n    team = team.lower()\n    if team == 'atl':\n        return 'atl'\n    elif team == 'bos':\n        return 'bos'\n    elif team == 'cin':\n        return 'cin'\n    elif team == 'cle':\n        return 'cle'\n    elif team == 'dal':\n        return 'dal'\n    elif team == 'den':\n        return 'den'\n    elif team == 'det':\n        return 'det'\n    elif team == 'gnb':\n        return 'gnb'\n    elif team == 'htx':\n        return 'htx'\n    elif team == 'ind':\n        return 'ind'\n    elif team == 'jax':\n        return 'jax'\n    elif team == 'kc':\n        return 'kc'\n    elif team =='sdg':\n        return'sdg'\n    elif team =='sea':\n        return'sea'\n    elif team == 'tru':\n        return 'tru'\n    elif team == 'wsh':\n        return 'wsh'\n    else:\n        return None\n    \ndef get_team_id_from_short_name(team_short_name):\n    team_short_name = str(team_short_name)\n    if team_short_name.lower() == 'atl':\n        return 'atl'\n    elif team_short_name.lower() == 'bos':\n        return 'bos'\n    elif team_short_name.lower() == 'cin':\n        return 'cin'\n    elif team_short_name.lower() == 'cle':\n        return 'cle'\n    elif team_short_name.lower() == 'dal':\n        return 'dal'\n    elif team_short_name.lower() == 'den':\n        return 'den'\n    elif team_short_name.lower() == 'det':\n        return 'det'\n    elif team_short_name.lower() == 'gnb':\n        return 'gnb'\n    elif team_short_name.lower() == 'htx':\n        return 'htx'\n    elif team_short_name.lower() == 'ind':\n        return 'ind'\n    elif team_short_name.lower() == 'jax':\n        return 'jax'\n    elif team_short_name.lower() == 'kc':\n        return 'kc'\n    elif team_short_name.lower() =='sdg':\n        return'sdg'\n    elif team_short_name.lower() =='sea':\n        return'sea'\n    elif team_short_name.lower() == 'tru':\n        return 'tru'\n    elif team_short_name.lower() == 'wsh':\n        return 'wsh'\n    else:\n        return None\n    \ndef get_start_date_from_date(date):\n    '''\n    Given a date in yyyy-mm-dd format, find the year of the game.\n    '''\n    date = date.split('-')\n    return int(date[0])\n    \ndef get_start_date_from_date_range(start_dt, end_dt):\n    '''\n    Given a date in yyyy-mm-dd format, find the year of the game.\n    '''\n    start_dt = start_dt.split('-')\n    end_dt = end_dt.split('-')\n    return int(start_dt[0]), int(end_dt[0])\n    \ndef get_date_from_date(date):\n    '''\n    Given a date in yyyy-mm-dd format, find the day of the week.\n    '''\n    date = date.split('-')\n    return int(date[1])\n    \ndef get_date_from_date_range(start_dt, end_dt):\n    '''\n    Given a date in yyyy-mm-dd format, find the day of the week.\n    '''\n    start_dt = start_dt.split('-')\n    end_dt = end_dt.split('-')\n    return int(start_dt[1]), int(end_dt[1])\n    \ndef get_start_time_from_date_range(start_dt, end_dt):\n    '''\n    Given a date in yyyy-mm-dd format, find the start time.\n    '''\n    start_dt = start_dt.split('-')\n    end_dt = end_dt.split('-')\n    return int(start_dt[2]), int(end_dt[2])\n    \ndef get_start_time_from_date(date):\n    '''\n    Given a date in yyyy-mm-dd format, find the start time.\n    '''\n    date = date.split('-')\n    return int(date[2])\n    \ndef get_start_time_from_date_range(start_dt, end_dt):\n    '''\n    Given a date in yyyy-mm-dd format, find the start time.\n    '''\n    start_dt = start_dt.split('-')\n    end_dt = end_dt.split('-')\n    return int(start_dt[2]), int(end_dt[2])\n    \ndef get_start_time_from_time_of_day(date):\n    '''\n    Given a date in yyyy-mm-dd format, find the start time.\n    '''\n    date = date.split('-')\n    return int(date[3])\n    \ndef get_start_time_from_time_of_day_range(start_dt, end_dt):\n    '''\n    Given a date in yyyy-mm-dd format, find the start time.\n    '''\n    start_dt = start_dt.split('-')\n    end_dt = end_dt.split('-')\n    return int(start_dt[3]), int(end_dt[3])\n    \ndef get_time_of_day_from_date(date):\n    '''\n    Given a date in yyyy-mm-dd format, find the start time.\n    '''\n    date = date.split('",
        "num_ids": 9
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_val = my_list[i]\n            hole_index = i\n            while hole_index >= gap and my_list[hole_index - gap] > current_val:\n                my_list[hole_index] = my_list[hole_index - gap]\n                hole_index -= gap\n            my_list[hole_index] = current_val\n        gap //= 2\n",
        "num_ids": 128
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    shell_n = int(len(my_list)/3)\n    while shell_n > 0:\n        for i in range(len(my_list)):\n            while (i - shell_n) >= 0 and my_list[i] < my_list[i - shell_n]:\n                my_list[i], my_list[i - shell_n] = my_list[i - shell_n], my_list[i]\n                i -= shell_n\n        shell_n = int(shell_n/3)\n    return my_list\n",
        "num_ids": 133
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    length = len(my_list)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 116
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length/2\n    while gap > 0:\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap/2\n    return my_list\n",
        "num_ids": 115
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublistcount = len(my_list) // 2\n    while sublistcount > 0:\n        for start in range(sublistcount):\n            gap_InsertionSort(my_list, start, sublistcount)\n        print('After increments of size', sublistcount, 'The list is:', my_list)\n        sublistcount = sublistcount // 2\n    return my_list\n",
        "num_ids": 94
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    if len(my_list) <= 1:\n        return my_list\n    \n    # find the number of sublists\n    sublist_count = len(my_list) / 2\n    \n    while sublist_count > 0:\n        \n        # find the correct starting point for a sublist\n        for start in range(sublist_count):\n            \n            # sort the sublist\n            gap_insertion_sort(my_list, start, sublist_count)\n            \n        sublist_count = sublist_count / 2\n    \n    return my_list\n    \ndef gap_insertion_sort(my_list, start, gap):\n    \n    # iterate through the list, starting from the second element\n    for i in range(start+gap, len(my_list), gap):\n        \n        current_value = my_list[i]\n        position = i\n        \n        # move elements of my_list[0..i-1], that are greater than the current element,\n        # to one position ahead of their current position\n        while position >= gap and my_list[position-gap] > current_value:\n            \n            my_list[position] = my_list[position-gap]\n            position = position - gap\n        \n        my_list[position] = current_value\n    \n    \ndef insertion_sort(my_list):\n    '''\n    Write a function to sort the given array by using insertion sort.\n    '''\n    \n    if len(my_list) <= 1:\n        return my_list\n    \n    for i in range(1, len(my_list)):\n        \n        current_value = my_list[i]\n        position = i\n        \n        # move elements of my_list[0..i-1], that are greater than the current element,\n        # to one position ahead of their current position\n        while position > 0 and my_list[position-1] > current_value:\n            my_list[position] = my_list[position-1]\n            position = position - 1\n        \n        my_list[position] = current_value\n    \n    return my_list\n    \ndef merge_sort(my_list):\n    '''\n    Write a function to sort the given array by using merge sort.\n    '''\n    \n    if len(my_list) <= 1:\n        return my_list\n    \n    # find the middle point\n    middle = len(my_list) / 2\n    \n    # sort the left half\n    left_half = merge_sort(my_list[:middle])\n    \n    # sort the right half\n    right_half = merge_sort(my_list[middle:])\n    \n    # merge the two halves\n    return merge(left_half, right_half)\n    \ndef merge(left_half, right_half):\n    \n    # an empty array to store sorted elements\n    sorted_list = []\n    \n    # index variables\n    i = 0\n    j = 0\n    \n    # while we haven't filled the sorted array\n    while i < len(left_half) and j < len(right_half):\n        \n        if left_half[i] < right_half[j]:\n            \n            sorted_list.append(left_half[i])\n            i += 1\n        \n        else:\n            \n            sorted_list.append(right_half[j])\n            j += 1\n    \n    # add the rest of the elements, if any, to the sorted list\n    sorted_list.extend(left_half[i:])\n    sorted_list.extend(right_half[j:])\n    \n    # return the sorted list\n    return sorted_list\n    \ndef quick_sort(my_list):\n    '''\n    Write a function to sort the given array by using quick sort.\n    '''\n    \n    if len(my_list) <= 1:\n        return my_list\n    \n    # partition the list, using the last element as the pivot\n    pivot = my_list.pop()\n    \n    greater_than_pivot = []\n    less_than_pivot = []\n    \n    for item in my_list:\n        \n        if item > pivot:\n            greater_than_pivot.append(item)\n        \n        else:\n            less_than_pivot.append(item)\n    \n    return quick_sort(less_than_pivot) + [pivot] + quick_sort(greater_than_pivot)\n    \ndef counting_sort(my_list):\n    '''\n    Write a function to sort the given array by using counting sort.\n    '''\n    \n    # create a list of counts\n    counts = [0 for x in range(max(my_list) + 1)]\n    \n    for item in my_list:\n        counts[item] += 1\n    \n    # find the index to which each count corresponds\n    position = 0\n    for count in counts:\n        for x in range(count):\n            my_list[position] = count\n            position += 1\n    \n    return my_list\n",
        "num_ids": 110
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    list_length = len(my_list)\n    gap = list_length // 2\n    while gap > 0:\n        for i in range(gap, list_length):\n            current_element = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_element:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_element\n        gap //= 2\n    return my_list\n",
        "num_ids": 126
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n/2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap/2\n    return my_list\n",
        "num_ids": 115
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2))\n",
        "num_ids": 21
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(a*b for a,b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    return [a & b for a, b in zip(test_tup1, test_tup2)]\n",
        "num_ids": 30
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([x&y for x,y in zip(test_tup1,test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    # for each tuple:\n    #    for each element of the tuple:\n    #        if element of tuple1 is equal to element of tuple2:\n    #            add element to the and_list\n    #        else:\n    #            return the or_list\n    \n    return [elem1 and elem2 for elem1, elem2 in zip(test_tup1, test_tup2)]\n    \n    \n",
        "num_ids": 105
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    tup_and = []\n    for i in range(l1):\n        tup_and.append((test_tup1[i] & test_tup2[i]));\n    return tup_and\n",
        "num_ids": 80
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2))\n",
        "num_ids": 21
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # write your logic here\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Formally, the function should return a tuple of two tuples, where each inner tuple is formed of two items. The items in the inner tuples are the elementwise and of the corresponding elements in the tuples.\n    pass\n",
        "num_ids": 53
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1_and_tup2 = ()\n    for i in range(len(test_tup1)):\n        test_tup1_and_tup2 += (test_tup1[i] + test_tup2[i],)\n    return test_tup1_and_tup2\n",
        "num_ids": 80
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    para = lambda x: a*x**2 + b*x + c\n    x_para = quad(para, 0, 1)\n    return x_para[0]\n",
        "num_ids": 47
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = - b / (2 * a)\n    y = a * x * x + b * x + c\n    return x, y\n",
        "num_ids": 35
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b**2) - (4*a*c)\n    \ndef parabola_directrix_2(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\n",
        "num_ids": 28
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # directrix\n    x_d = (b**2) - 4*a*c\n    x_d = x_d **.5\n    \n    # solve for y\n    y_d = -1*(b/2*a)\n    \n    # calculate and return the value\n    return (x_d, y_d)\n",
        "num_ids": 82
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # directrix = (b**2 - 4 * a * c) / (2 * a)\n    directrix = (b**2 - 4 * a * c) / (2 * a)\n    return directrix\n",
        "num_ids": 52
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b / (2 * a)\n    \n    \ndef parabola_vertex(x, y, a, b, c): \n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    return (x, y - a / (2 * b))\n    \n    \ndef main(): \n    '''\n    Read the values of the parameters a, b, and c in from the user and \n    then use these parameters to compute the parabola\u2019s directrix. The \n    directrix is the vertex of the parabola that maximizes the distance from \n    the origin to the point on the directrix which is closest to the origin. \n    Compute the point of the directrix and calculate the distance from the \n    origin to this point. \n    '''\n    \n    # Read the parameters from the user.\n    a, b, c = eval(input('Enter three values for a, b, and c: '))\n    \n    # Compute the directrix of the parabola.\n    directrix = parabola_directrix(a, b, c)\n    \n    # Compute the vertex of the parabola.\n    vertex = parabola_vertex(directrix, a, b, c)\n    \n    # Compute the distance from the origin to the vertex of the parabola.\n    distance = sqrt(pow(directrix, 2) + pow(vertex[1], 2))\n    \n    # Display the result.\n    print('The point of the directrix is', vertex)\n    print('The distance from the origin is', distance)\n    \n    \nmain()",
        "num_ids": 197
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None\n    x = (-b + sqrt(discriminant)) / (2 * a)\n    y = (-b - sqrt(discriminant)) / (2 * a)\n    return x, y\n",
        "num_ids": 75
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    #print(delta)\n    if delta < 0:\n        print(\"The equation does not have a directrix.\")\n        return\n    elif delta > 0:\n        x1 = (-b - math.sqrt(delta))/(2*a)\n        x2 = (-b + math.sqrt(delta))/(2*a)\n        return x1,x2\n    elif delta == 0:\n        x1 = (-b)/(2*a)\n        return x1\n    else:\n        print(\"The equation does not have a directrix.\")\n        return\n        \nprint(parabola_directrix(1, 1, -3))\nprint(parabola_directrix(1, 1, -6))\nprint(parabola_directrix(1, 1, -9))\nprint(parabola_directrix(1, 1, -11))\nprint(parabola_directrix(1, 1, -12))\nprint(parabola_directrix(1, 1, -13))\nprint(parabola_directrix(1, 1, -14))\nprint(parabola_directrix(1, 1, -15))\nprint(parabola_directrix(1, 1, -16))\n",
        "num_ids": 306
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = ((-b + (b**2 - 4*a*c)**0.5)/(2*a))\n    y = ((-b - (b**2 - 4*a*c)**0.5)/(2*a))\n    return (x, y)\n",
        "num_ids": 68
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n    \ndef get_common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns the first common element.\n    If there is no common element, return None.\n    '''\n    for element in list1:\n        if element in list2:\n            return element\n    return None\n    \ndef get_random_element(list):\n    '''\n    Write a function that takes a list and returns a random element.\n    '''\n    return list[random.randint(0, len(list)-1)]\n    \ndef remove_duplicates(list):\n    '''\n    Write a function that takes a list and returns a new list with all duplicates removed.\n    '''\n    return list(set(list))\n    \ndef remove_duplicates_with_order(list):\n    '''\n    Write a function that takes a list and returns a new list with all duplicates removed.\n    However, the order of the items in the returned list should not change.\n    '''\n    return list(OrderedDict.fromkeys(list))\n    \ndef get_words_with_a(list, a):\n    '''\n    Write a function that takes a list of words and returns a list of all words that start with a.\n    '''\n    return [word for word in list if word[0] == a]\n    \ndef get_digits_with_a(list, a):\n    '''\n    Write a function that takes a list of words and returns a list of all words that contain a.\n    '''\n    return [word for word in list if a in word]\n    \ndef get_digits_and_letters(list):\n    '''\n    Write a function that takes a list of words and returns a list of all words that contain letters and digits.\n    '''\n    return [word for word in list if any(char.isdigit() for char in word) or any(char.isalpha() for char in word)]\n    \ndef get_letter_count(list):\n    '''\n    Write a function that takes a list of words and returns a dictionary that contains the number of times each letter appears in a word.\n    '''\n    dictionary = {}\n    for word in list:\n        for letter in word:\n            if letter in dictionary:\n                dictionary[letter] += 1\n            else:\n                dictionary[letter] = 1\n    return dictionary\n    \ndef get_most_common_letter(list):\n    '''\n    Write a function that takes a list of words and returns the letter that appears most often in that list.\n    '''\n    letter_counts = get_letter_count(list)\n    letter_counts_list = []\n    for letter in letter_counts:\n        letter_counts_list.append(letter_counts[letter])\n    max_count_index = letter_counts_list.index(max(letter_counts_list))\n    return letter_counts_list[max_count_index].index(max(letter_counts_list[max_count_index]))\n    \ndef get_words_with_common_letters(list1, list2):\n    '''\n    Write a function that takes two lists of words and returns a list of all words that contain all letters in both lists.\n    '''\n    common_letters = []\n    for word in list1:\n        if all(letter in word for letter in list2):\n            common_letters.append(word)\n    return common_letters\n    \ndef get_words_with_common_letters_but_not_all(list1, list2):\n    '''\n    Write a function that takes two lists of words and returns a list of all words that contain all letters in one list,\n    but not all letters in the other list.\n    '''\n    common_letters = []\n    for word in list1:\n        if all(letter in word for letter in list2) and not all(letter in word for letter in list1):\n            common_letters.append(word)\n    return common_letters\n    \ndef get_words_with_common_letters_with_no_match(list1, list2):\n    '''\n    Write a function that takes two lists of words and returns a list of all words that contain all letters in one list,\n    but none of the letters in the other list.\n    '''\n    common_letters = []\n    for word in list1:\n        if not all(letter in word for letter in list2) and not all(letter in word for letter in list1):\n            common_letters.append(word)\n    return common_letters\n    \ndef get_words_with_different_letters(list1, list2):\n    '''\n    Write a function that takes two lists of words and returns a list of all words that have different letters in them.\n    '''\n    different_letters = []\n    for word in list1:\n        if not all(letter in word for letter in list2) and not all(letter in word for letter in list1):\n            different_letters.append(word)\n    return different_letters\n    \ndef get_words_with_the_same_letters(list1, list2):\n    '''\n    Write a function that takes two lists of words and returns a list of all words that have the same letters in them.\n    '''\n    same_letters = []\n    for word in list1:\n        if all(letter in word for letter in list2) and not all(letter in word for letter in list1):\n            same_letters.append(word)\n    return same_letters\n    \ndef get_words_with_similar_letters(list1, list2):\n    '''\n    Write a function that takes two lists of words and returns a list of all words that have the same letters in them.\n    '''\n    common_letters = []\n    for word in list1:\n        if all(letter in word for letter in list2) and not all(letter in word for letter in list1):\n            common_letters.append(word)\n    return common_letters\n    \ndef get_words_with_letters_in_either_order(list1, list2):\n    '''\n    Write a function that takes two lists of words and returns a list of all words that have the same letters in them.\n    '''\n    common_letters = []\n    for word in list1:\n        if all(letter in word for letter in list2) and not all(letter in word for letter in list1):\n            common_letters.append(word)\n    return common_letters\n    \ndef get_words_with_same_letters_in_any_order(list1, list2):\n    '''\n    Write a function that takes two lists of words and returns a list of all words that have the same letters in them.\n    '''\n    common_letters = []\n    for word1 in list1:\n        for word2 in list2:\n            if all(letter in word1 for letter in word2) and not all(letter in word1 for letter in word2):\n                common_letters.append(word1)\n    return common_letters\n    \ndef get_words_with_different_letter_frequencies(list1, list2):\n    '''\n    Write a function that takes two lists of words and returns a list of all words that have the same letters in them.\n    '''\n    common_letters = []\n    for word1 in list1:\n        for word2 in list2:\n            if len(word1) == len(word2):\n                if not all(letter1 in word1 and word1.count(letter1) == word2.count(letter1) for letter1 in set(word1)) and not all(letter1 in word2 and word2.count(letter1) == word1.count(letter1) for letter1 in set(word2)):\n                    common_letters.append(word1)\n    return common_letters\n    \ndef get_words_with_same_letter_frequencies(list1, list2):\n    '''\n    Write a function that takes two lists of words and returns a list of all words that have the same letters in them.\n    '''\n    common_letters = []\n    for word1 in list1:\n        for word2 in list2:\n            if len(word1) == len(word2):\n                if not all(letter1 in word1 and word1.count(letter1) == word2.count(letter1) for letter1 i",
        "num_ids": 73
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n",
        "num_ids": 22
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    return list1.intersection(list2)\n",
        "num_ids": 16
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 == list2:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        for element in list1:\n            if element in list2:\n                return True\n    else:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item1 in list1:\n        if item1 in list2:\n            return True\n    return False\n    \ndef anagram(string1, string2):\n    '''\n    Write a function that takes two strings and returns true if they are anagrams of each other.\n    Anagrams are strings that are written the same way both ways. For example, \"race\" and \"care\" are anagrams.\n    '''\n    list1 = [string1[i].lower() for i in range(len(string1))]\n    list2 = [string2[i].lower() for i in range(len(string2))]\n    list1.sort()\n    list2.sort()\n    return list1 == list2\n",
        "num_ids": 72
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2*(base1+base2)*height\n",
        "num_ids": 17
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1.0*(base1+base2)*height/2\n",
        "num_ids": 19
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1<=base2:\n        return 0\n    return height*((base1+base2)/2)\n    \ndef median_triangle(side1,side2,side3):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    return 0\n    \ndef median_rectangle(side1,side2):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return 0\n    \ndef median_cuboid(side1,side2,side3,side4):\n    '''\n    Write a function to find the median length of a cuboid.\n    '''\n    return 0\n    \ndef median_rhombus(side1,side2):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return 0\n    \ndef median_parallelogram(side1,side2,side3):\n    '''\n    Write a function to find the median length of a parallelogram.\n    '''\n    return 0\n    \ndef median_trapezoid(base1,base2,height1,height2):\n    '''\n    Write a function to find the median length of a trapezoid.\n    '''\n    return 0\n    \ndef median_cone(side1,side2,radius):\n    '''\n    Write a function to find the median length of a cone.\n    '''\n    return 0\n    \ndef median_sphere(radius):\n    '''\n    Write a function to find the median length of a sphere.\n    '''\n    return 0\n    \ndef median_cylinder(radius,height):\n    '''\n    Write a function to find the median length of a cylinder.\n    '''\n    return 0\n    \ndef median_cone(radius1,radius2,height):\n    '''\n    Write a function to find the median length of a cone.\n    '''\n    return 0\n    \ndef median_parabola(a,b,c):\n    '''\n    Write a function to find the median length of a parabola.\n    '''\n    return 0\n    \ndef median_ellipse(a,b,height):\n    '''\n    Write a function to find the median length of an ellipse.\n    '''\n    return 0\n    \ndef median_hyperbola(a,b,height):\n    '''\n    Write a function to find the median length of a hyperbola.\n    '''\n    return 0\n    \ndef median_ellipse(a,b,height):\n    '''\n    Write a function to find the median length of a hyperbola.\n    '''\n    return 0\n    \ndef median_cuboid(side1,side2,side3,side4):\n    '''\n    Write a function to find the median length of a cuboid.\n    '''\n    return 0\n    \ndef median_rhombus(side1,side2):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return 0\n    \ndef median_rectangle(side1,side2):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return 0\n    \ndef median_sphere(radius):\n    '''\n    Write a function to find the median length of a sphere.\n    '''\n    return 0\n    \ndef median_hyperbola(a,b,height):\n    '''\n    Write a function to find the median length of a hyperbola.\n    '''\n    return 0\n    \ndef median_parabola(a,b,c):\n    '''\n    Write a function to find the median length of a parabola.\n    '''\n    return 0\n    \ndef median_pentagon(side1,side2,side3,side4,side5):\n    '''\n    Write a function to find the median length of a pentagon.\n    '''\n    return 0\n    \ndef median_hexagon(side1,side2,side3,side4,side5):\n    '''\n    Write a function to find the median length of a hexagon.\n    '''\n    return 0\n    \ndef median_octagon(side1,side2,side3,side4,side5):\n    '''\n    Write a function to find the median length of a octagon.\n    '''\n    return 0\n    \ndef median_heptagon(side1,side2,side3,side4,side5):\n    '''\n    Write a function to find the median length of a heptagon.\n    '''\n    return 0\n    \ndef median_octagon(side1,side2,side3,side4,side5):\n    '''\n    Write a function to find the median length of a octagon.\n    '''\n    return 0\n    \ndef median_octagon(side1,side2,side3,side4,side5):\n    '''\n    Write a function to find the median length of a octagon.\n    '''\n    return 0\n    \ndef median_hemisphere(radius):\n    '''\n    Write a function to find the median length of a hemisphere.\n    '''\n    return 0\n    \ndef median_cylinder(radius,height):\n    '''\n    Write a function to find the median length of a cylinder.\n    '''\n    return 0\n    \ndef median_cuboid(side1,side2,side3,side4):\n    '''\n    Write a function to find the median length of a cuboid.\n    '''\n    return 0\n    \ndef median_parallelogram(side1,side2,side3):\n    '''\n    Write a function to find the median length of a parallelogram.\n    '''\n    return 0\n    \ndef median_tetrahedron(side1,side2,side3,side4):\n    '''\n    Write a function to find the median length of a tetrahedron.\n    '''\n    return 0\n    \ndef median_triangle(side1,side2,side3):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    return 0\n    \ndef median_dodecahedron(side1,side2,side3,side4,side5,side6,side7,side8,side9,side10,side11,side12,side13,side14,side15,side16):\n    '''\n    Write a function to find the median length of a dodecahedron.\n    '''\n    return 0\n    \ndef median_icosahedron(side1,side2,side3,side4,side5,side6,side7,side8,side9,side10,side11,side12,side13,side14,side15,side16):\n    '''\n    Write a function to find the median length of a icosahedron.\n    '''\n    return 0\n    \ndef median_heptagon(side1,side2,side3,side4,side5):\n    '''\n    Write a function to find the median length of a heptagon.\n    '''\n    return 0\n    \ndef median_heptagon(side1,side2,side3,side4,side5):\n    '''\n    Write a function to find the median length of a heptagon.\n    '''\n    return 0\n    \ndef median_heptagon(side1,side2,side3,side4,side5):\n    '''\n    Write a function to find the median length of a heptagon.\n    '''\n    return 0\n    \ndef median_heptagon(side1,side2,side3,side4,side5):\n    '''\n    Write a function to find the median length of a heptagon.\n    '''\n    return 0\n    \ndef median_octagon(side1,side2,side3,side4,side5):\n    '''\n    Write a function to find the median length of an octagon.\n    '''\n    return 0\n    \ndef median_octagon(side1,side2,side3,side4,side5):\n    '''\n    Write a function to find the median length of an octagon.\n    '''\n    return 0\n    \ndef median_octagon(side1,side2,side3,side4,side5):\n    '''\n    Write a function to find the median length of an octagon",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2.0\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    return base1+base2/2, height\n",
        "num_ids": 16
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height_med = (base1+base2)/2.0\n    return height_med\n",
        "num_ids": 24
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2.0 * height\n    \ndef median_rectangle(length,width):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return length * width / 2.0\n",
        "num_ids": 12
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2*base1 + 1/2*base2\n",
        "num_ids": 18
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*height*(base1+base2)\n",
        "num_ids": 18
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    return height/2 + base2/2 + base1/2\n",
        "num_ids": 20
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if x < number:\n            return True\n        elif x > number:\n            return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr.sort()\n    return arr[-1] < number\n",
        "num_ids": 18
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    index = -1\n    for i in arr:\n        index += 1\n        if i < number:\n            return index\n    return index + 1\n",
        "num_ids": 37
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for item in arr:\n        if number < item:\n            return True\n    return False\n    \ndef find_element(arr):\n    '''\n    Write a function to find the element in the array which is greater than the given number.\n    '''\n    for i in range(0, len(arr)):\n        if check_greater(arr[i+1:], arr[i]):\n            return arr[i]\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elt in arr:\n        if number < elt:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print \"true\"\n            return True\n        else:\n            print \"false\"\n            return False\n",
        "num_ids": 40
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pat = re.compile(r\"ab+\")\n    if re.search(pat,text):\n        print(\"Found a match!\")\n    else:\n        print(\"No match!\")\n",
        "num_ids": 48
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.findall(text)\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('a.+?b',text):\n        return True\n    else:\n        return False\n    \nprint text_match_one('ab')\nprint text_match_one('a')\n",
        "num_ids": 51
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    search_pattern = 'a+b'\n    match = re.search(search_pattern,text)\n    if match:\n        print 'Match found: ',match.group()\n    else:\n        print 'No match'\n",
        "num_ids": 55
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match(\"a+b\", text):\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r\"([a]+[b])+\",text)\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b])+\",text)\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b])+\",text)\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b]+[b])+\",text)\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b]+[b]+[b])+\",text)\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b]+[b]+[b]+[b])+\",text)\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b]+[b]+[b]+[b]+[b])+\",text)\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b])+\",text)\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b])+\",text)\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b])+\",text)\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b])+\",text)\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b])+\",text)\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b])+\",text)\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b])+\",text)\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b])+\",text)\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by sixteen or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b])+\",text)\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by seventeen or more b's.\n    '''\n    return re.search(r\"([a]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]+[b]",
        "num_ids": 607
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+[b]+')\n    return pattern.match(text)\n",
        "num_ids": 28
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('^a.*?b$', text)\n",
        "num_ids": 18
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        print(match.group())\n        return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.search(r'ab+', text))\n",
        "num_ids": 18
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n > 0:\n        n = n//10\n    return n\n",
        "num_ids": 20
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if (n<10) :\n        return n\n    return last_Digit(n//10)\n",
        "num_ids": 27
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n % 10)\n",
        "num_ids": 11
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # base case\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n / 10)\n",
        "num_ids": 34
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n",
        "num_ids": 14
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print(i)\n            \n            \ndef neg_nos_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print(i)\n            \n",
        "num_ids": 25
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-x for x in list1 if x < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    nos = []\n    for i in list1:\n        if i < 0:\n            nos.append(i)\n    return nos\n",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-x for x in list1]\n",
        "num_ids": 13
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n    \ndef neg_nos_2(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print i\n",
        "num_ids": 21
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-x for x in list1]\n",
        "num_ids": 13
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    length = len(str1)\n    j = 0\n    while j < length:\n        if ord(str1[j]) % 2!= 0:\n            str1 = str1[0:j] + str1[j+1:]\n            length = len(str1)\n        else:\n            j += 1\n    return str1\n",
        "num_ids": 82
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1.split(' ')[1::2])\n",
        "num_ids": 20
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if ord(i) % 2 == 0])\n",
        "num_ids": 25
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])\n",
        "num_ids": 31
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in range(0, len(str1)):\n        if (ord(str1[i]) % 2) == 0:\n            new_str += str1[i]\n    return new_str\n",
        "num_ids": 58
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if i%2!=0:\n            str1[i] = ''\n    return ''.join(str1)\n",
        "num_ids": 54
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if i%2!=0:\n            str1=str1.replace(i,\"\")\n    return str1\n",
        "num_ids": 38
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x:x%2==0,str1))\n    \n",
        "num_ids": 25
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    res = \"\"\n    for i in range(0, len(str1)):\n        if i % 2 == 0:\n            res += str1[i]\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1.split()[::2])\n",
        "num_ids": 18
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0] and test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count\n",
        "num_ids": 86
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    from itertools import product\n    count = 0\n    for i in product(test_list, test_list):\n        if i[0] < i[1]:\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Initialize\n    list_length = len(test_list)\n    count = 0\n    # Create 2 pointers i and j\n    i = 0\n    j = list_length - 1\n    while i < j:\n        # Check if first and last elements are different\n        if test_list[i]!= test_list[j]:\n            # Check if last and first elements are the same\n            if test_list[i] == test_list[j-1]:\n                # Check if elements are in order\n                if test_list[i+1] == test_list[j]:\n                    count += 1\n                    # Increment i and j to avoid error\n                    i += 1\n                    j -= 1\n                # Check if elements are in reverse order\n                elif test_list[i] == test_list[j+1]:\n                    count += 1\n                    # Increment i and j to avoid error\n                    i += 1\n                    j -= 1\n            # Check if first and last elements are not the same\n            elif test_list[i]!= test_list[j+1]:\n                # Check if elements are in order\n                if test_list[i+1] == test_list[j]:\n                    count += 1\n                    # Increment i and j to avoid error\n                    i += 1\n                    j -= 1\n                # Check if elements are in reverse order\n                elif test_list[i] == test_list[j-1]:\n                    count += 1\n                    # Increment i and j to avoid error\n                    i += 1\n                    j -= 1\n            # Check if elements are the same\n            else:\n                # Increment i and j to avoid error\n                i += 1\n                j -= 1\n        # Increment i and j to avoid error\n        i += 1\n        j -= 1\n    # Return count\n    return count\n",
        "num_ids": 425
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count\n",
        "num_ids": 86
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                bidirectional_list.append((test_list[i], test_list[j]))\n    print(bidirectional_list)\n    return len(bidirectional_list)\n",
        "num_ids": 90
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # O(n) space and O(n) time\n    return len(set(test_list))\n",
        "num_ids": 27
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]:\n                count += 1\n            elif test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]:\n                count += 1\n    return count\n",
        "num_ids": 130
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_d = 0\n    for i, j in test_list:\n        if i < j:\n            count_d += 1\n    return count_d\n",
        "num_ids": 40
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    print len(test_list)\n",
        "num_ids": 11
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        L[0] += sum(L[1:])\n        return L[0]\n",
        "num_ids": 59
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    else:\n        return L[0] * 10**(len(L)-1) + multiple_to_single(L[1:])\n",
        "num_ids": 46
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        return int(L[0]) + int(L[1])\n",
        "num_ids": 39
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n    \n",
        "num_ids": 18
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x, y: x*10+y, L)\n",
        "num_ids": 20
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "num_ids": 9
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    str_ = \"\"\n    for item in L:\n        str_ += str(item)\n    return int(str_)\n",
        "num_ids": 32
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = 0\n    for i in L:\n        res *= 10\n        res += i\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num_int = 0\n    for i in L:\n        num_int = num_int*10 + i\n    return num_int\n",
        "num_ids": 35
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n",
        "num_ids": 16
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'(?<![A-Z])([A-Z][a-z]+[\\'\\w-]*)(?=[A-Z])'\n    if re.search(pattern, text):\n        return re.search(pattern, text).group()\n    else:\n        return -1\n",
        "num_ids": 75
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    a = re.finditer(r'(?<=\\w)adverb(?=\\w)', text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    a = re.finditer(r'(?<=\\w)noun(?=\\w)', text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_adjective_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    a = re.finditer(r'(?<=\\w)adjective(?=\\w)', text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_number_position(text):\n    '''\n    Write a function to find the first number and their positions in a given sentence.\n    '''\n    a = re.finditer(r'(?<=\\w)number(?=\\w)', text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_sentence_length(text):\n    '''\n    Write a function to find the length of sentences in a given text.\n    '''\n    a = re.finditer(r'[.!?]',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_word_count(text):\n    '''\n    Write a function to find the count of words in a given text.\n    '''\n    a = re.finditer(r'\\w+',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_capital_letters(text):\n    '''\n    Write a function to find the count of capital letters in a given text.\n    '''\n    a = re.finditer(r'[A-Z]',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_sentence_count(text):\n    '''\n    Write a function to find the count of sentences in a given text.\n    '''\n    a = re.finditer(r'[.!?]',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef count_words(text):\n    '''\n    Write a function to find the count of words in a given text.\n    '''\n    a = re.finditer(r'\\w+',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_all_of_position(text):\n    '''\n    Write a function to find all of the words in a given text.\n    '''\n    a = re.finditer(r'\\w+',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_all_of_words(text):\n    '''\n    Write a function to find all of the words in a given text.\n    '''\n    a = re.finditer(r'\\w+',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_first_of_position(text):\n    '''\n    Write a function to find the first of the word in a given text.\n    '''\n    a = re.finditer(r'(?<=\\w)first(?=\\w)',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_last_of_position(text):\n    '''\n    Write a function to find the last of the word in a given text.\n    '''\n    a = re.finditer(r'(?<=\\w)last(?=\\w)',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_all_of_positions(text):\n    '''\n    Write a function to find all of the words in a given text.\n    '''\n    a = re.finditer(r'(?<=\\w)all(?=\\w)',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_all_of_words(text):\n    '''\n    Write a function to find all of the words in a given text.\n    '''\n    a = re.finditer(r'(?<=\\w)all(?=\\w)',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_all_of_positions(text):\n    '''\n    Write a function to find all of the words in a given text.\n    '''\n    a = re.finditer(r'(?<=\\w)all(?=\\w)',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_last_of_position(text):\n    '''\n    Write a function to find the last of the word in a given text.\n    '''\n    a = re.finditer(r'(?<=\\w)last(?=\\w)',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_first_of_positions(text):\n    '''\n    Write a function to find the first of the word in a given text.\n    '''\n    a = re.finditer(r'(?<=\\w)first(?=\\w)',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_first_of_words(text):\n    '''\n    Write a function to find the first of the word in a given text.\n    '''\n    a = re.finditer(r'(?<=\\w)first(?=\\w)',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_last_of_words(text):\n    '''\n    Write a function to find the last of the word in a given text.\n    '''\n    a = re.finditer(r'(?<=\\w)last(?=\\w)',text)\n    print(a)\n    for index, val in enumerate(a):\n        print('{} : {}'.format(index,val.start(0)))\n    return\ndef find_all_of_words(text):\n    '''\n    Write a function to find all of the words in a give",
        "num_ids": 15
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions = []\n    match = re.search(r'adverb', text, re.IGNORECASE)\n    if match:\n        positions.append(match.start())\n        print(' '.join(map(str, positions)))\n",
        "num_ids": 59
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    start = 0\n    end = 0\n    sub = \"\"\n    pos = []\n    for i,j in enumerate(text):\n        if j=='r' and end==0:\n            start = i\n        if j=='r' and end==1:\n            end = i\n        if j=='n' and start!=0 and end==0:\n            sub = text[start:i]\n            pos.append(sub)\n        if j=='n' and start!=0 and end==1:\n            sub = text[start:i]\n            pos.append(sub)\n            end = i\n    return pos\n",
        "num_ids": 151
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split(' ')\n    for i in range(len(sentence)):\n        if sentence[i] == 'adverb':\n            return (i,sentence[i-1])\n",
        "num_ids": 51
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions = {}\n    text = text.replace('.','')\n    words = re.findall(r'\\w+',text)\n    for i in range(len(words)):\n        if words[i] == 'adverb':\n            positions[i] = words[i]\n    return positions\n",
        "num_ids": 76
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position = {}\n    words = text.split()\n    for index, word in enumerate(words):\n        if word.lower() in adverb:\n            adverb_position[index] = word\n    return adverb_position\n",
        "num_ids": 59
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #text=\"I have 2 cats and 2 dogs\"\n    positions=[]\n    adverb=[]\n    for i in range(len(text)):\n        if re.match(\"[a-z]*\\s?[A-Z]*\\s?[a-z]*\", text[i]) is not None:\n            positions.append(i)\n            adverb.append(text[i])\n    return (adverb, positions)\n",
        "num_ids": 108
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    a = []\n    pos = []\n    text = re.sub(r'[^\\w\\s]','',text)\n    text = text.lower()\n    #text = text.split(' ')\n    for word in text.split():\n        if word in ['are','is','am','was','were','has','have']:\n            a.append(word)\n            pos.append(text.find(word))\n            #print word\n            #print text.find(word)\n    print''.join(a)\n    print pos\n    print pos[0]\n",
        "num_ids": 136
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # find the adverbs and store them in a list\n    positions = re.finditer(r'\\w+ly', text)\n    adverbs = []\n    for position in positions:\n        adverbs.append(position.start())\n    \n    # replace the adverbs with a single space\n    for i in range(len(adverbs)):\n        text = text[:adverbs[i]] +'' + text[adverbs[i]+2:]\n    \n    # print the result\n    print(text)\n    ",
        "num_ids": 125
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a=l*l*l\n    print(a)\n",
        "num_ids": 17
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n    \ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder of a given radius and height.\n    '''\n    return 2 * math.pi * r * (r + h)\n",
        "num_ids": 18
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a=l**3\n    print \"The surface area of a cube of size\",l,\"is\",a,\"square units\"\n    return\n",
        "num_ids": 34
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area=6*l**2\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n    return pos_count/float(neg_count+pos_count)\ndef odd_sum(nums):\n    '''\n    Write a function that finds the sum of all the odd numbers in an array of integers.\n    '''\n    total = 0\n    for num in nums:\n        if num % 2!= 0:\n            total += num\n    return total\ndef sum_of_squares(nums):\n    '''\n    Write a function to find the sum of all the squares of the numbers in an array of integers.\n    '''\n    total = 0\n    for num in nums:\n        total += num**2\n    return total\ndef can_construct(word, letters):\n    '''\n    Write a function to check if you can construct a string from a given array of characters.\n    '''\n    letters_used = []\n    def helper(curr, idx):\n        if curr == word:\n            return True\n        if idx >= len(letters):\n            return False\n        if letters_used[idx] == True:\n            return False\n        letters_used[idx] = True\n        if word[curr] == letters[idx]:\n            return helper(curr+1, idx+1)\n        return False\n    for i in range(len(letters)):\n        letters_used.append(False)\n        if helper(0,i) == True:\n            return True\n    return False\ndef longest_sliding_window(nums, k):\n    '''\n    Write a function to find the longest subarray that is moving the most for a k length window.\n    '''\n    if k > len(nums):\n        return -1\n    left = 0\n    right = 0\n    sums = array('i',[0]*k)\n    for i in range(len(nums)):\n        sums.append(sums[i]+nums[i])\n    max_sum = sums[k-1]\n    for i in range(len(nums)-k+1):\n        max_sum = max(max_sum, sums[i+k-1]-sums[i])\n    return max_sum\ndef largest_sum(nums):\n    '''\n    Write a function to find the largest sum of a subarray in an array.\n    '''\n    if not nums:\n        return -1\n    max_ending_here = nums[0]\n    max_so_far = nums[0]\n    for i in range(1,len(nums)):\n        max_ending_here = max(max_ending_here+nums[i], nums[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\ndef sort_transactions(transactions):\n    '''\n    Write a function that sorts the list of transactions in ascending order by the transaction amount.\n    '''\n    transactions.sort(key=lambda x: x[2])\n    return transactions\ndef array_diff(a, b):\n    '''\n    Write a function to find the sum of all the elements of the array except the element at a given index.\n    '''\n    for i in range(len(a)):\n        a[i] = a[i] - b[i]\n    return a\ndef array_add(a, b):\n    '''\n    Write a function to find the sum of all the elements of the array except the element at a given index.\n    '''\n    for i in range(len(a)):\n        a[i] = a[i] + b[i]\n    return a\ndef array_multiplication(a, b):\n    '''\n    Write a function to find the sum of all the elements of the array except the element at a given index.\n    '''\n    product = [0]*len(a)\n    for i in range(len(a)):\n        product[i] = a[i] * b[i]\n    return product\ndef is_rotation(s1, s2):\n    '''\n    Write a function to find if a string is a rotation of another string.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    return s1 in s2+s2\ndef is_in_order(nums):\n    '''\n    Write a function to check if an array is in sorted order.\n    '''\n    for i in range(1,len(nums)):\n        if nums[i] < nums[i-1]:\n            return False\n    return True\ndef rotate(nums, k):\n    '''\n    Write a function to rotate an array of n elements to the right by k steps.\n    '''\n    for i in range(k):\n        nums.insert(0,nums.pop())\n    return nums\ndef is_valid_parentheses(string):\n    '''\n    Write a function to check whether a string is valid parentheses.\n    '''\n    stack = []\n    for ch in string:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return not stack\ndef is_balanced(string):\n    '''\n    Write a function to check whether a string is balanced. A string is balanced if it has as many opening brackets as closing brackets, and the matching closing brackets are closed at the same position.\n    '''\n    stack = []\n    for ch in string:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return not stack\ndef is_anagram(s1, s2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    d1 = {}\n    d2 = {}\n    for ch in s1:\n        if ch in d1:\n            d1[ch] += 1\n        else:\n            d1[ch] = 1\n    for ch in s2:\n        if ch in d2:\n            d2[ch] += 1\n        else:\n            d2[ch] = 1\n    for ch in d1:\n        if d1[ch]!= d2[ch]:\n            return False\n    return True\ndef is_permutation(s1, s2):\n    '''\n    Write a function to check whether two strings are permutations of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    d1 = {}\n    d2 = {}\n    for ch in s1:\n        if ch in d1:\n            d1[ch] += 1\n        else:\n            d1[ch] = 1\n    for ch in s2:\n        if ch in d2:\n            d2[ch] += 1\n        else:\n            d2[ch] = 1\n    for ch in d1:\n        if d1[ch]!= d2[ch]:\n            return False\n    return True\ndef int_to_roman(num):\n    '''\n    Write a function to convert an integer to a Roman numeral.\n    '''\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for j in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\ndef longest_substring(str1, str2):\n    '''\n    Write a function to find the longest common substring between two strings.\n    '''\n    d1 = {}\n    d2 = {}\n    max_length = 0\n    for ",
        "num_ids": 24
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\ndef search_min(nums):\n    '''\n    Write a function to find the minimum number in an array of non-negative integers.\n    '''\n    min = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min:\n            min = nums[i]\n    return min\ndef search_max(nums):\n    '''\n    Write a function to find the maximum number in an array of non-negative integers.\n    '''\n    max = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n    return max\ndef search_diff(nums):\n    '''\n    Write a function to find the maximum difference between two elements in an array\n    '''\n    diff = nums[1] - nums[0]\n    for i in range(1, len(nums)-1):\n        if nums[i+1] - nums[i] > diff:\n            diff = nums[i+1] - nums[i]\n    return diff\ndef search_range(nums):\n    '''\n    Write a function that returns the range of a given array\n    '''\n    min = nums[0]\n    max = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min:\n            min = nums[i]\n        if nums[i] > max:\n            max = nums[i]\n    return max - min + 1\ndef sort_by_index(nums, indices):\n    '''\n    Write a function to sort an array by the given indices.\n    '''\n    for i in range(0, len(nums)):\n        for j in range(i+1, len(nums)):\n            if indices[j] < indices[i]:\n                temp = indices[j]\n                indices[j] = indices[i]\n                indices[i] = temp\n                temp = nums[j]\n                nums[j] = nums[i]\n                nums[i] = temp\n    return nums\ndef most_common(nums):\n    '''\n    Write a function to find the most common element in an array.\n    '''\n    from collections import Counter\n    return Counter(nums).most_common()[0][0]\ndef palindrome(nums):\n    '''\n    Write a function to check whether an array is a palindrome.\n    '''\n    temp = nums[:]\n    temp.reverse()\n    return temp == nums\ndef rotate(nums):\n    '''\n    Write a function to rotate an array by k elements.\n    '''\n    n = len(nums)\n    k = k % n\n    for i in range(0, k):\n        temp = nums[i]\n        nums[i] = nums[n-i-1]\n        nums[n-i-1] = temp\n    return nums\ndef remove_elements(nums, val):\n    '''\n    Write a function to remove all the elements from an array that are\n    present at the given index.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i] == val:\n            del nums[i]\n            break\n    return nums\ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates from an array and keep the\n    order of elements in the original array.\n    '''\n    if len(nums) < 2:\n        return nums\n    prev = nums[0]\n    for i in range(1, len(nums)):\n        if prev!= nums[i]:\n            prev = nums[i]\n            nums[i] = nums[i-1]\n    return nums\ndef rearrange_digits(nums):\n    '''\n    Rearrange Array Elements so as to form two number such that their\n    sum is maximum.\n    '''\n    nums = sorted(nums)\n    a = 0\n    b = 0\n    for i in range(0, len(nums)):\n        a = a*10 + nums[i]\n    for i in range(len(nums)-1, -1, -1):\n        b = b*10 + nums[i]\n    return [a, b]\ndef first_and_last(nums):\n    '''\n    Write a function that returns a new array containing the first and\n    last elements of the given array.\n    '''\n    return [nums[0], nums[len(nums)-1]]\ndef find_missing_number(nums):\n    '''\n    Write a function that returns the missing element from an array.\n    '''\n    result = 0\n    for i in range(0, len(nums)):\n        result ^= nums[i]\n    for i in range(0, len(nums)):\n        result ^= i+1\n    return result\ndef max_consecutive_ones(nums):\n    '''\n    Write a function to find the maximal length of the consecutive\n    elements with the same value in an array.\n    '''\n    result = 0\n    max = 0\n    for i in range(0, len(nums)):\n        if nums[i] == 1:\n            result += 1\n        else:\n            if result > max:\n                max = result\n            result = 0\n    if result > max:\n        max = result\n    return max\ndef find_factors(nums):\n    '''\n    Write a function to find all the prime factors of an integer.\n    '''\n    result = []\n    i = 2\n    while i*i <= nums:\n        if nums % i == 0:\n            result.append(i)\n            nums /= i\n        else:\n            i += 1\n    if nums > 1:\n        result.append(nums)\n    return result\ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate an array of matrix elements.\n    '''\n    length = len(matrix)\n    for i in range(0, int(length/2)):\n        for j in range(i, length-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[length-j-1][i]\n            matrix[length-j-1][i] = matrix[length-i-1][length-j-1]\n            matrix[length-i-1][length-j-1] = matrix[j][length-i-1]\n            matrix[j][length-i-1] = temp\n    return matrix\ndef flip_matrix_horizontal(matrix):\n    '''\n    Write a function to flip an array of matrix elements vertically.\n    '''\n    length = len(matrix)\n    for i in range(0, length/2):\n        for j in range(i, length-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[length-j-1][i]\n            matrix[length-j-1][i] = matrix[length-i-1][length-j-1]\n            matrix[length-i-1][length-j-1] = matrix[j][length-i-1]\n            matrix[j][length-i-1] = temp\n    return matrix\ndef max_product_subarray(nums):\n    '''\n    Write a function to find the maximum product of two numbers\n    in an array.\n    '''\n    left = 0\n    right = 0\n    result = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > 0:\n            left = i\n        else:\n            if i - left > right - i:\n                right = i\n    for i in range(left, len(nums)):\n        if nums[i] > 0:\n            right = i\n        else:\n            if i - left > right - i:\n                right = i\n    return max",
        "num_ids": 126
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            positive_nums += 1\n    return positive_nums / float(len(nums))\n",
        "num_ids": 57
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return\n    count = 0\n    for x in nums:\n        if x > 0:\n            count += 1\n    return float(count) / len(nums)\ndef reverse_list(nums):\n    '''\n    Write a function to reverse a linked list.\n    '''\n    if not nums:\n        return\n    first = nums\n    second = nums.next\n    if not second:\n        return\n    third = second.next\n    first.next = None\n    while second is not None:\n        second.next = first\n        first = second\n        second = third\n        if third:\n            third = third.next\n    return first\ndef count_occurence(nums, target):\n    '''\n    Write a function to count the number of non-empty subarrays whose sum is equal to a given number.\n    '''\n    if not nums:\n        return\n    sum = 0\n    pre_sum = 0\n    left = 0\n    right = 0\n    result = 0\n    temp = 0\n    while right < len(nums):\n        sum = sum + nums[right]\n        while sum > target and left <= right:\n            sum = sum - nums[left]\n            left += 1\n        if sum == target:\n            result += (right - left + 1)\n            temp = result\n            result = 0\n        right += 1\n    if sum == target:\n        result += (right - left + 1)\n        temp = result\n    return temp\ndef reverse_linked_list(head):\n    '''\n    Write a function that reverses a Linked List in place\n    '''\n    if not head:\n        return\n    if not head.next:\n        return head\n    second = head.next\n    first = head\n    while second.next:\n        second = second.next\n        first = first.next\n    second.next = None\n    while first is not None:\n        temp = first.next\n        first.next = second\n        second = first\n        first = temp\n    return second\ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate an image (in-place).\n    '''\n    if not matrix:\n        return\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows == 1:\n        return\n    for row in range(rows // 2):\n        first = row\n        last = rows - 1 - row\n        for col in range(cols):\n            first_elem = matrix[first][col]\n            matrix[first][col] = matrix[last][col]\n            matrix[last][col] = first_elem\n            first += 1\n            last -= 1\n    return\ndef get_bit(n, i):\n    '''\n    Write a function that returns the i-th bit of a positive integer.\n    '''\n    return (n >> i) & 1\ndef get_bit_array(n, length):\n    '''\n    Write a function that returns the bit array of a positive integer\n    '''\n    bit_array = array('B', [0] * length)\n    for i in range(length):\n        bit_array[i] = get_bit(n, i)\n    return bit_array\ndef add_binary(a, b):\n    '''\n    Write a function to add two binary numbers.\n    '''\n    result = []\n    carry = 0\n    len_a = len(a)\n    len_b = len(b)\n    if len_a < len_b:\n        for i in range(len_a):\n            if i < len_b:\n                c = carry\n                c += 1 if a[i] == '1' else 0\n                c += 1 if b[i] == '1' else 0\n                result.append(str(c % 2))\n                carry = c // 2\n            else:\n                c = carry\n                c += 1 if a[i] == '1' else 0\n                result.append(str(c % 2))\n                carry = c // 2\n    else:\n        for i in range(len_b):\n            if i < len_a:\n                c = carry\n                c += 1 if a[i] == '1' else 0\n                c += 1 if b[i] == '1' else 0\n                result.append(str(c % 2))\n                carry = c // 2\n            else:\n                c = carry\n                c += 1 if b[i] == '1' else 0\n                result.append(str(c % 2))\n                carry = c // 2\n    if carry > 0:\n        result.append(str(carry))\n    return ''.join(result[::-1])\ndef to_num(string):\n    '''\n    Write a function to convert a string to an integer\n    '''\n    if not string:\n        return\n    integer = 0\n    for i in range(len(string)):\n        integer *= 10\n        integer += ord(string[i]) - ord('0')\n    return integer\ndef is_sorted(nums):\n    '''\n    Write a function to determine if a linked list is sorted\n    '''\n    if not nums:\n        return\n    curr = nums\n    while curr.next:\n        if curr.data > curr.next.data:\n            return False\n        curr = curr.next\n    return True\ndef add_two_numbers(l1, l2):\n    '''\n    Write a function to add two numbers without using the + operator\n    '''\n    if not l1:\n        return l2\n    if not l2:\n        return l1\n    sum = 0\n    carry = 0\n    while l1 or l2:\n        if l1:\n            sum = carry + l1.data\n            l1 = l1.next\n        if l2:\n            sum = carry + l2.data\n            l2 = l2.next\n        carry, val = divmod(sum, 10)\n        current = ListNode(val)\n        if carry or carry == 0:\n            current.next = ListNode(carry)\n        current = current.next\n    return current\ndef move_zeros(nums):\n    '''\n    Write a function to move all 0's to the end of an array\n    '''\n    if not nums:\n        return\n    left = 0\n    right = 0\n    while right < len(nums):\n        if nums[right]!= 0:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n        right += 1\n    return\ndef next_permutation(nums):\n    '''\n    Write a function to find the next permutation in lexicographical order.\n    '''\n    if not nums:\n        return\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        if nums[left] < nums[right]:\n            break\n        left += 1\n    if left == len(nums):\n        return reverse_list(nums)\n    right = len(nums) - 1\n    while right > left:\n        if nums[left] > nums[right]:\n            nums[left], nums[right] = nums[right], nums[left]\n            break\n        right -= 1\n    return nums\ndef palindrome_permutation(string):\n    '''\n    Write a function to check if a string is a permutation of a palindrome\n    '''\n    if not string:\n        return False\n    hash_array = [0] * 26\n    for char in string:\n        hash_array[ord(char) - ord('a')] += 1\n    odd_count = 0\n    for x in hash_array:\n        if x % 2 == 1:\n            odd_count += 1\n            if odd_count > 1:\n                return False\n    return True\ndef perfect_number(n):\n    '''\n    Write a function to check if a number is perfect\n    '''\n    sum = 1\n    for i in range(2, n):\n        if n % i == 0:\n            sum += i\n    return sum == n\ndef is_unique(string):\n    '''\n    Write a function to determine if a string is a unique character\n    '''\n    if not string:\n        return\n    hash_array = [0] * 2",
        "num_ids": 21
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for i in nums:\n        if i > 0:\n            pos_count += 1\n        elif i < 0:\n            neg_count += 1\n    return float(pos_count) / (pos_count + neg_count)\n",
        "num_ids": 72
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    counter = 0\n    for num in nums:\n        if num > 0:\n            counter += 1\n    return float(counter) / len(nums)\n    \ndef sum_of_squares(nums):\n    '''\n    Write a function to compute the sum of the squares of the integers in an array.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num ** 2\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    l = len(nums)\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/l\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    l = len(nums)\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count/l\ndef max_num(nums):\n    '''\n    Write a function to find the maximum of all numbers in an array of integers.\n    '''\n    l = len(nums)\n    max = nums[0]\n    for num in nums:\n        if num > max:\n            max = num\n    return max\ndef min_num(nums):\n    '''\n    Write a function to find the minimum of all numbers in an array of integers.\n    '''\n    l = len(nums)\n    min = nums[0]\n    for num in nums:\n        if num < min:\n            min = num\n    return min\ndef same_num(nums):\n    '''\n    Write a function to find the number of same numbers in an array of integers.\n    '''\n    l = len(nums)\n    count = 0\n    for num in nums:\n        for i in range(l):\n            if num == nums[i]:\n                count += 1\n    return count\ndef sum_numbers(nums):\n    '''\n    Write a function to find the sum of all numbers in an array of integers.\n    '''\n    l = len(nums)\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\ndef average(nums):\n    '''\n    Write a function to find the average of all numbers in an array of integers.\n    '''\n    l = len(nums)\n    return sum_numbers(nums)/l\ndef find_longest(nums):\n    '''\n    Write a function to find the longest string in an array of strings.\n    '''\n    l = len(nums)\n    max = 0\n    for num in nums:\n        if len(num) > max:\n            max = len(num)\n    return max\ndef unique_words(words):\n    '''\n    Write a function to find the number of unique words in a string of space-separated words.\n    '''\n    l = len(words)\n    set_words = set()\n    for word in words:\n        set_words.add(word)\n    return len(set_words)\ndef count_unique_words(words):\n    '''\n    Write a function to find the number of unique words in a string of space-separated words.\n    '''\n    l = len(words)\n    set_words = set()\n    for word in words:\n        set_words.add(word)\n    return len(set_words)\ndef find_shortest(words):\n    '''\n    Write a function to find the shortest string in an array of strings.\n    '''\n    l = len(words)\n    max = len(words[0])\n    for word in words:\n        if len(word) < max:\n            max = len(word)\n    return max\ndef find_common(word1, word2):\n    '''\n    Write a function to find the longest string that is a substring of both strings.\n    '''\n    l1 = len(word1)\n    l2 = len(word2)\n    if l1 == l2:\n        return word1\n    if l1 > l2:\n        return word2\n    if l2 > l1:\n        return word1\n    common_length = 0\n    for i in range(l1):\n        if word1[i] == word2[i]:\n            common_length += 1\n    return word1[:common_length]\ndef is_palindrome(str):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    l = len(str)\n    for i in range(l//2):\n        if str[i]!= str[l-1-i]:\n            return False\n    return True\ndef reverse(str):\n    '''\n    Write a function to reverse a string.\n    '''\n    l = len(str)\n    str_reversed = ''\n    for i in range(l-1, -1, -1):\n        str_reversed += str[i]\n    return str_reversed\ndef find_anagrams(s, p):\n    '''\n    Write a function to find all anagrams in a string.\n    '''\n    l1 = len(s)\n    l2 = len(p)\n    if l1 < l2:\n        return []\n    anagrams = []\n    for i in range(l1-l2+1):\n        str_s = s[i:i+l2]\n        if str_s == reverse(str_s):\n            anagrams.append(s[i:i+l2])\n    return anagrams\ndef find_anagrams(s, p):\n    '''\n    Write a function to find all anagrams in a string.\n    '''\n    l1 = len(s)\n    l2 = len(p)\n    if l1 < l2:\n        return []\n    anagrams = []\n    for i in range(l1-l2+1):\n        str_s = s[i:i+l2]\n        if str_s == reverse(str_s):\n            anagrams.append(s[i:i+l2])\n    return anagrams\ndef find_anagrams(s, p):\n    '''\n    Write a function to find all anagrams in a string.\n    '''\n    l1 = len(s)\n    l2 = len(p)\n    if l1 < l2:\n        return []\n    anagrams = []\n    for i in range(l1-l2+1):\n        str_s = s[i:i+l2]\n        if str_s == reverse(str_s):\n            anagrams.append(s[i:i+l2])\n    return anagrams\ndef find_anagrams(s, p):\n    '''\n    Write a function to find all anagrams in a string.\n    '''\n    l1 = len(s)\n    l2 = len(p)\n    if l1 < l2:\n        return []\n    anagrams = []\n    for i in range(l1-l2+1):\n        str_s = s[i:i+l2]\n        if str_s == reverse(str_s):\n            anagrams.append(s[i:i+l2])\n    return anagrams\ndef find_anagrams(s, p):\n    '''\n    Write a function to find all anagrams in a string.\n    '''\n    l1 = len(s)\n    l2 = len(p)\n    if l1 < l2:\n        return []\n    anagrams = []\n    for i in range(l1-l2+1):\n        str_s = s[i:i+l2]\n        if str_s == reverse(str_s):\n            anagrams.append(s[i:i+l2])\n    return anagrams\ndef find_anagrams(s, p):\n    '''\n    Write a function to find all anagrams in a string.\n    '''\n    l1 = len(s)\n    l2 = len(p)\n    if l1 < l2:\n        return []\n    anagrams = []\n    for i in range(l1-l2+1):\n        str_s = s[i:i+l2]\n        if str_s == reverse(str_s):\n            anagrams.append(s[i:i+l2])\n    return anagrams\ndef find_anagrams(s, p):\n    '''\n    Write a function to find all anagrams in a string.\n    '''\n    l1 = len(s)\n    l2 = len(p)\n    if l1 < l2:\n        return []\n    anagrams = []\n",
        "num_ids": 40
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / float(len(nums))\n",
        "num_ids": 39
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return float(count)/float(len(nums))\n",
        "num_ids": 41
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / float(len(nums))\n",
        "num_ids": 39
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = min_num = 0\n    for num in list1:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return min_num\n",
        "num_ids": 59
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # if list1 is empty, return 0\n    if len(list1) == 0:\n        return 0\n    # if list1 has only one element, return that element\n    elif len(list1) == 1:\n        return list1[0]\n    # else traverse the list\n    else:\n        # take the first element as reference\n        reference = list1[0]\n        # take the second element as second reference\n        second_reference = list1[1]\n        # if reference is smaller than second_reference, exchange the elements\n        if reference < second_reference:\n            list1[0], list1[1] = list1[1], list1[0]\n        # compare the second reference to reference and keep comparing the rest of the list until\n        # the second reference is bigger than reference\n        for element in list1[2:]:\n            if element < reference:\n                list1[1] = element\n            elif element > reference:\n                reference = element\n        # return the largest element\n        return reference\n        \nprint largest_neg([4,3,2,1,0])\nprint largest_neg([])\nprint largest_neg([1])\nprint largest_neg([2,5,7,8,4,3,2,1])\nprint largest_neg([0,-2])\nprint largest_neg([2,-2])\nprint largest_neg([-2,2])\nprint largest_neg([1,-2,3])\nprint largest_neg([-2,-2,4])\nprint largest_neg([1,2,3,4,5,6,7,8,9,0,1,-2,3,4,5,-2,3,4,5])\nprint largest_neg([1,2,3,4,5,6,7,8,9,0,1,-2,-3,-4,-5,-6,-7,-8,-9,0,1,-2,-3,-4,-5,-6,-7,-8,-9,-10])\n",
        "num_ids": 459
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_value = -99999\n    for i in range(len(list1)): \n        if(list1[i] < max_value):\n            max_value = list1[i]\n    return max_value\n",
        "num_ids": 56
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # First, sort the list\n    list1.sort()\n    # Then find the first negative number\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            return list1[i]\n",
        "num_ids": 58
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1)==1:\n        return list1[0]\n    else:\n        list1.remove(min(list1))\n        return max(list1)\n",
        "num_ids": 45
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    num_list = list1\n    largest = -1\n    for num in num_list:\n        if num < 0 and num > largest:\n            largest = num\n    return largest\n",
        "num_ids": 45
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -10000000\n    for i in list1:\n        if i < max_neg:\n            max_neg = i\n    return max_neg\n",
        "num_ids": 41
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for i in list1:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg\n",
        "num_ids": 44
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n",
        "num_ids": 10
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return None\n    list1.sort()\n    for num in list1:\n        if num < 0:\n            return num\n    return None\n",
        "num_ids": 47
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    new_list = []\n    for i in test_list:\n        if len(i) == K:\n            new_list.append(i)\n",
        "num_ids": 40
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tuple in test_list:\n        new_tuple = tuple[0:K]\n        new_list.append(new_tuple)\n    return new_list\n",
        "num_ids": 50
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(row[0], row[1][:K]) for row in test_list]\n",
        "num_ids": 24
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = [t[K:] for t in test_list]\n    return new_list\n",
        "num_ids": 26
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(tup[0], tup[1][0:K]) for tup in test_list]\n",
        "num_ids": 28
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            new_list.append(test_list[i])\n    return new_list\n",
        "num_ids": 57
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(i,j) for i,j in test_list if len(i)==K]\n",
        "num_ids": 26
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        if i[K] > 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 44
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [x[K:] for x in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        if t[0] <= K:\n            result.append(t)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    index = []\n    for elem1 in list1:\n        for elem2 in list2:\n            index.append(elem1*elem2)\n    return tuple(index)\n",
        "num_ids": 74
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup_size1 = len(test_tup1)\n    tup_size2 = len(test_tup2)\n    if tup_size1!= tup_size2:\n        return -1\n    \n    return tuple(tup1[0] * tup2[0] for tup1, tup2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 98
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # test_tup1 = (1, 2, 3)\n    # test_tup2 = (4, 5, 6)\n    index_multiplication = tuple((x1*x2 for x1, x2 in zip(test_tup1, test_tup2)))\n    print(index_multiplication)\n    \nindex_multiplication((1, 2, 3), (4, 5, 6))\n",
        "num_ids": 99
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(a*b for a,b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    try:\n        i = 0\n        tup = ()\n        if len(test_tup1) == len(test_tup2):\n            while i < len(test_tup1):\n                tup += (test_tup1[i] * test_tup2[i],)\n                i += 1\n            return tup\n        else:\n            return -1\n    except:\n        return -1\n    \ndef checkio(numbers):\n    '''\n    Return the result of the \"show\" function.\n    '''\n    if type(numbers)!= tuple:\n        return None\n    else:\n        return index_multiplication(numbers, show(numbers))\n    \ndef show(numbers):\n    '''\n    Return the result of the \"show\" function.\n    '''\n    if type(numbers)!= tuple:\n        return None\n    else:\n        new_list = []\n        for i in range(len(numbers)):\n            new_list.append(numbers[i] * numbers[i])\n        return new_list\n",
        "num_ids": 65
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # write your code here\n    return tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n",
        "num_ids": 45
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplied_tup = tuple()\n    for i in range(len(test_tup1)):\n        multiplied_tup += (test_tup1[i] * test_tup2[i],)\n    return multiplied_tup\n",
        "num_ids": 62
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [(i*j) for i, j in zip(test_tup1, test_tup2)]\n",
        "num_ids": 29
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup) \n    for i in lst: \n        c[i] -= 1\n    return [k for k,v in c.iteritems() if v>0]\n",
        "num_ids": 49
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len([1 for val in tup if val in lst])\n    \ndef valid_bracket(test):\n    '''\n    Write a python function to check if the string is a valid bracket sequence.\n    '''\n    bracket = {'(':')', '{':'}', '[':']'}\n    stack = []\n    for char in test:\n        if char in bracket:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            if bracket[stack.pop()]!= char:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 96
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = [0]*len(tup)\n    for i in range(len(lst)):\n        count[tup.index(lst[i])] = count[tup.index(lst[i])] + 1\n    return count\n    \ndef get_All_pairs(tup): \n    '''\n    Write a python function to get all the pairs of elements of a tuple.\n    '''\n    return [(a,b) for a in tup for b in tup if a < b]\n",
        "num_ids": 25
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tup.count(lst) \ndef find_Most_common(lst): \n    '''\n    Write a python function to find the most common element of list. \n    '''\n    data = Counter(lst)\n    return max(lst, key=lambda x: data[x]) \ndef count_occur_dup(lst): \n    '''\n    Write a python function to count the number of duplicated elements in a list. \n    '''\n    return sum(1 for x in lst if lst.count(x)>1) \ndef remove_dup(lst): \n    '''\n    Write a python function to remove the duplicated elements in a list. \n    '''\n    return list(set(lst)) \ndef find_GCD(lst): \n    '''\n    Write a python function to find the GCD of a list. \n    '''\n    lst.sort()\n    gcd = lst[0] \n    for i in lst[1:]: \n        if i % gcd!= 0: \n            gcd = gcd \n        else: \n            gcd = i \n    return gcd\ndef find_LCM(lst): \n    '''\n    Write a python function to find the L.C.M of a list. \n    '''\n    lst.sort()\n    lcm = lst[0] \n    for i in lst[1:]: \n        lcm = lcm * i // gcd(lcm, i) \n    return lcm\ndef convert_string_to_list(string): \n    '''\n    Write a python function to convert a string to list. \n    '''\n    return list(string) \ndef find_common_elements(lst1, lst2): \n    '''\n    Write a python function to find the common elements of 2 lists. \n    '''\n    return list(set(lst1) & set(lst2)) \ndef find_common_element(lst1, lst2): \n    '''\n    Write a python function to find the common element of 2 lists. \n    '''\n    return list(set(lst1) & set(lst2)) \ndef is_rotation(lst1, lst2): \n    '''\n    Write a python function to find if 2 list are rotations of each other. \n    '''\n    return lst1[1:] == lst2[:-1] \ndef is_rotation2(lst1, lst2): \n    '''\n    Write a python function to find if 2 list are rotations of each other. \n    '''\n    return lst1[:-1] == lst2[1:] \ndef rotate(lst, n): \n    '''\n    Write a python function to rotate a list by n elements. \n    '''\n    return lst[n:] + lst[:n] \ndef find_rotate_sequence(lst): \n    '''\n    Write a python function to find a rotate sequence of a list. \n    '''\n    lst.sort()\n    if len(lst) == 0: \n        return 0 \n    elif len(lst) == 1: \n        return 0 \n    elif len(lst) == 2: \n        return 0 \n    else: \n        for i in range(len(lst)-2): \n            if lst[i] < lst[i+1] and lst[i+1] > lst[i+2]: \n                return i+1 \ndef find_rotate_sequence_2(lst): \n    '''\n    Write a python function to find a rotate sequence of a list. \n    '''\n    lst.sort()\n    if len(lst) == 0: \n        return 0 \n    elif len(lst) == 1: \n        return 0 \n    elif len(lst) == 2: \n        return 0 \n    else: \n        for i in range(len(lst)-2): \n            if lst[i] < lst[i+1] and lst[i+1] > lst[i+2]: \n                return i+1 \ndef find_rotate_sequence_3(lst): \n    '''\n    Write a python function to find a rotate sequence of a list. \n    '''\n    lst.sort()\n    if len(lst) == 0: \n        return 0 \n    elif len(lst) == 1: \n        return 0 \n    elif len(lst) == 2: \n        return 0 \n    else: \n        for i in range(len(lst)-2): \n            if lst[i] < lst[i+1] and lst[i+1] > lst[i+2]: \n                return i+1 \ndef find_rotate_sequence_4(lst): \n    '''\n    Write a python function to find a rotate sequence of a list. \n    '''\n    lst.sort()\n    if len(lst) == 0: \n        return 0 \n    elif len(lst) == 1: \n        return 0 \n    elif len(lst) == 2: \n        return 0 \n    else: \n        for i in range(len(lst)-2): \n            if lst[i] < lst[i+1] and lst[i+1] > lst[i+2]: \n                return i+1 \ndef find_rotate_sequence_5(lst): \n    '''\n    Write a python function to find a rotate sequence of a list. \n    '''\n    lst.sort()\n    if len(lst) == 0: \n        return 0 \n    elif len(lst) == 1: \n        return 0 \n    elif len(lst) == 2: \n        return 0 \n    else: \n        for i in range(len(lst)-2): \n            if lst[i] < lst[i+1] and lst[i+1] > lst[i+2]: \n                return i+1 \ndef find_rotate_sequence_6(lst): \n    '''\n    Write a python function to find a rotate sequence of a list. \n    '''\n    lst.sort()\n    if len(lst) == 0: \n        return 0 \n    elif len(lst) == 1: \n        return 0 \n    elif len(lst) == 2: \n        return 0 \n    else: \n        for i in range(len(lst)-2): \n            if lst[i] < lst[i+1] and lst[i+1] > lst[i+2]: \n                return i+1 \ndef find_rotate_sequence_7(lst): \n    '''\n    Write a python function to find a rotate sequence of a list. \n    '''\n    lst.sort()\n    if len(lst) == 0: \n        return 0 \n    elif len(lst) == 1: \n        return 0 \n    elif len(lst) == 2: \n        return 0 \n    else: \n        for i in range(len(lst)-2): \n            if lst[i] < lst[i+1] and lst[i+1] > lst[i+2]: \n                return i+1 \ndef is_rotate_sequence(lst1, lst2): \n    '''\n    Write a python function to find if 2 list are rotations of each other. \n    '''\n    return lst1[1:] == lst2[:-1] \ndef is_rotate_sequence2(lst1, lst2): \n    '''\n    Write a python function to find if 2 list are rotations of each other. \n    '''\n    return lst1[:-1] == lst2[1:] \ndef is_rotate_sequence3(lst1, lst2): \n    '''\n    Write a python function to find if 2 list are rotations of each other. \n    '''",
        "num_ids": 1
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)[tup]\n",
        "num_ids": 13
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in lst: \n        if i not in tup: \n            return 0 \n        else: \n            tup = tup.replace(i,'',1)\n    return len(tup) \ndef all_anagram(str1,str2): \n    '''\n    Write a python function to check if two strings are anagrams or not\n    '''\n    if len(str1)!=len(str2): \n        return 0 \n    else: \n        c1 = Counter(str1)\n        c2 = Counter(str2)\n        for i in c1.keys(): \n            if i not in c2.keys(): \n                return 0 \n        else: \n            return 1 \ndef possible_combinations(num, n): \n    '''\n    Write a python function to return all the possible combinations of given number\n    '''\n    total_comb = [] \n    def recurse(total_comb,num,n,idx,result): \n        if idx == n: \n            total_comb.append(result)\n            return\n        for i in range(idx,n): \n            recurse(total_comb,num,n,i+1,result + [num[i]])\n    recurse(total_comb,num,n,0,[])\n    return total_comb\ndef max_difference(lst): \n    '''\n    Write a python function to return the maximum difference between consecutive elements in a list\n    '''\n    if len(lst)<=2: \n        return 0\n    else: \n        max_diff = lst[1]-lst[0]\n        for i in range(1,len(lst)): \n            if lst[i]-lst[i-1]>max_diff: \n                max_diff = lst[i]-lst[i-1]\n        return max_diff\ndef longest_substring(string): \n    '''\n    Write a python function to find the longest substring in a string\n    '''\n    if len(string)<=1: \n        return string \n    else: \n        max_len = 1 \n        max_str = string[0]\n        for i in range(1,len(string)): \n            if string[i] not in string[0:i]: \n                if max_len<len(string[0:i]): \n                    max_len = len(string[0:i])\n                    max_str = string[0:i]\n            else: \n                if max_len<len(string[i:len(string)]): \n                    max_len = len(string[i:len(string)])\n                    max_str = string[i:len(string)]\n        return max_str\ndef nth_fibonacci(num): \n    '''\n    Write a python function to return the nth Fibonacci number\n    '''\n    if num==1: \n        return 0 \n    elif num==2: \n        return 1 \n    else: \n        return nth_fibonacci(num-1)+nth_fibonacci(num-2)\ndef max_digit(num): \n    '''\n    Write a python function to return the max digit of a number\n    '''\n    if num==0: \n        return 0 \n    else: \n        return max(int(i) for i in str(abs(num)))\ndef count_and_say(num): \n    '''\n    Write a python function to count the number of digit in a given number and return it as a string\n    '''\n    if num==0: \n        return '0'\n    else: \n        count = 1 \n        result = ''\n        while num>0: \n            result+=str(num%10)\n            num=num//10\n            count+=1 \n        return result+'-'+str(count)\ndef partition(arr,left,right): \n    '''\n    Write a python function to partition an array into two arrays of same sum\n    '''\n    pivot = arr[left]\n    i=left\n    j=right\n    while i<j: \n        while i<right and arr[i]+pivot<=arr[left]: \n            i+=1\n        while j>left and arr[j]+pivot>=arr[left]: \n            j-=1\n        if i<j: \n            arr[i],arr[j]=arr[j],arr[i]\n    arr[left],arr[j]=arr[j],arr[left]\n    return j\ndef k_subsets(arr,left,right,k): \n    '''\n    Write a python function to return the kth subset from the given array\n    '''\n    if k==1: \n        return arr[left:right+1]\n    elif k==len(arr): \n        return arr[left:right+1]\n    elif left==right: \n        return arr[left:right+1]\n    else: \n        pivot = partition(arr,left,right)\n        if pivot==k-1: \n            return arr[left:right+1]\n        elif pivot>k-1: \n            return k_subsets(arr,left,pivot-1,k)\n        else: \n            return k_subsets(arr,pivot+1,right,k)\ndef permutations(arr): \n    '''\n    Write a python function to return all the permutation of a given array\n    '''\n    if len(arr)<=1: \n        return [arr]\n    else: \n        return [arr[i]+permutations(arr[:i]+arr[i+1:]) for i in range(len(arr))]\ndef reverse_vowels(string): \n    '''\n    Write a python function to return the reversed string after removing all the vowels from a given string\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    new_str = ''\n    for i in range(len(string)): \n        if string[i] not in vowels: \n            new_str+=string[i]\n    return new_str[::-1]\ndef count_words(string): \n    '''\n    Write a python function to count the number of words in a given string\n    '''\n    if string[0]==' ': \n        return 0 \n    else: \n        count = 1 \n        for i in range(1,len(string)): \n            if string[i]==''and string[i-1]!=' ': \n                count+=1\n        return count\ndef fibonacci(num): \n    '''\n    Write a python function to return the nth fibonacci number\n    '''\n    if num==1 or num==0: \n        return num \n    else: \n        return fibonacci(num-1)+fibonacci(num-2)\ndef is_sorted(lst): \n    '''\n    Write a python function to check if a given list is sorted or not\n    '''\n    if len(lst)<=1: \n        return 1 \n    else: \n        if lst[0]<=lst[1]: \n            return is_sorted(lst[1:len(lst)])\n        else: \n            return 0 \ndef unique_elements(lst): \n    '''\n    Write a python function to return the unique elements of a list\n    '''\n    if len(lst)<=1: \n        return lst \n    else: \n        return unique_elements(lst[1:len(lst)])\ndef is_permutation(str1,str2): \n    '''\n    Write a python function to check if two given strings are a permutation of each other\n    '''\n    if len(str1)!=len(str2): \n        return 0 \n    else: \n        return sorted(str1)==sorted(str2)\ndef one_edit(str1,str2): \n    '''\n    Write a python function to check if two strings are one edit distance apart\n    '''\n    if abs(len(str1)-len(str2))>1:",
        "num_ids": 19
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup)\n",
        "num_ids": 10
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if len(tup) < 1: \n        return\n    #print tup\n    #print lst\n    if tup[0] in lst: \n        lst[tup[0]] += 1\n    else: \n        lst[tup[0]] = 1\n    count_Occurrence(tup[1:], lst) \n",
        "num_ids": 88
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    print counter[tup]\n    return\ndef distinct_Char_Count(str): \n    '''\n    Write a python function to count the distinct characters of string.\n    '''\n    lst = []\n    for i in str:\n        lst.append(i)\n    print len(lst)\n    return\ndef is_Anagram(str1, str2): \n    '''\n    Write a python function to check if two strings are anagram of each other or not.\n    '''\n    if sorted(str1) == sorted(str2):\n        print True\n    else:\n        print False\n    return\ndef find_Longest_Substring(str): \n    '''\n    Write a python function to find the longest substring with distinct characters.\n    '''\n    lst = []\n    if len(str) == 0:\n        return\n    else:\n        for i in range(len(str)):\n            temp = []\n            for j in range(i, len(str)):\n                if str[j] not in temp:\n                    temp.append(str[j])\n                if len(temp) > len(lst):\n                    lst = temp\n    print lst\n    return\ndef word_Pattern(str1, str2): \n    '''\n    Write a python function to check if two given strings are isomorphic to each other. Two strings are isomorphic if they can be replaced to form the other string. \n    '''\n    if len(str1)!= len(str2):\n        return False\n    lst1 = []\n    lst2 = []\n    for i in range(len(str1)):\n        if str1[i] not in lst1:\n            lst1.append(str1[i])\n        if str2[i] not in lst2:\n            lst2.append(str2[i])\n        if lst1[i]!= lst2[i]:\n            return False\n    return True\ndef minimum_Moves_to_Rescue_a_Tree_Helper(node, tree, visited):\n    if not tree:\n        return False\n    if not visited[node]:\n        visited[node] = True\n        if tree[node][0] == 'N':\n            return True\n        else:\n            return minimum_Moves_to_Rescue_a_Tree_Helper(tree[node][0], tree, visited) and minimum_Moves_to_Rescue_a_Tree_Helper(tree[node][1], tree, visited)\n    else:\n        return False\ndef minimum_Moves_to_Rescue_a_Tree(tree):\n    '''\n    Write a python function to find the minimum moves to rescue a tree.\n    '''\n    visited = {}\n    for i in range(len(tree)):\n        visited[i] = False\n    for node in tree:\n        if not visited[node]:\n            visited[node] = True\n            if tree[node][0] == 'N':\n                return True\n            else:\n                return minimum_Moves_to_Rescue_a_Tree_Helper(tree[node][0], tree, visited) and minimum_Moves_to_Rescue_a_Tree_Helper(tree[node][1], tree, visited)\n    return False\ndef make_String_Upper(str): \n    '''\n    Write a python function to change all characters of the string to upper case characters.\n    '''\n    for i in range(len(str)):\n        str[i] = str[i].upper()\n    return\ndef number_of_Distinct_Sub_strings(str): \n    '''\n    Write a python function to count number of distinct substrings of a string.\n    '''\n    temp = []\n    lst = []\n    if len(str) == 0:\n        return 0\n    for i in range(len(str)):\n        temp.append(str[i])\n        lst.append(''.join(temp))\n        if i < len(str) - 1:\n            temp.pop(0)\n    print len(lst)\n    return\ndef longest_Substring_with_K_Distinct_Characters(str, k): \n    '''\n    Write a python function to find the longest substring with exactly K distinct characters.\n    '''\n    if len(str) == 0:\n        return\n    if k > len(str):\n        return\n    lst = []\n    lst2 = []\n    for i in range(len(str)):\n        lst.append(str[i])\n        lst2.append(str[i])\n        if len(lst) > k:\n            lst.pop(0)\n        if len(lst2) == k:\n            lst2.pop(0)\n        if len(lst) > len(lst2):\n            lst2 = lst\n    print ''.join(lst2)\n    return\ndef insert_Node_After_Kth_Node_In_List(lst, k): \n    '''\n    Write a python function to insert a node at kth position in a list.\n    '''\n    lst.insert(k, 2)\n    return\ndef insert_Node_At_End_of_Linked_List(lst): \n    '''\n    Write a python function to insert a node at the end of a linked list.\n    '''\n    new_node = Node(2)\n    if lst.head is None:\n        lst.head = new_node\n    else:\n        node = lst.head\n        while node.next_node:\n            node = node.next_node\n        node.next_node = new_node\n    return\ndef get_Kth_to_Last_Element_Singly_Linked_List(lst, k): \n    '''\n    Write a python function to get the kth to last element of a singly linked list.\n    '''\n    if lst.head is None:\n        return\n    node = lst.head\n    count = 0\n    while node:\n        count += 1\n        node = node.next_node\n    if count < k:\n        return\n    node = lst.head\n    for i in range(count - k):\n        node = node.next_node\n    print node.data\n    return\ndef get_Kth_to_Last_Element_Doubly_Linked_List(lst, k): \n    '''\n    Write a python function to get the kth to last element of a doubly linked list.\n    '''\n    if lst.head is None:\n        return\n    node = lst.head\n    prev = None\n    count = 0\n    while node:\n        count += 1\n        prev = node\n        node = node.next_node\n    if count < k:\n        return\n    node = lst.head\n    for i in range(count - k):\n        node = node.next_node\n    print node.data\n    return\ndef remove_Kth_Node_In_Doubly_Linked_List(lst, k): \n    '''\n    Write a python function to remove the kth node from a doubly linked list.\n    '''\n    if lst.head is None:\n        return\n    node = lst.head\n    prev = None\n    count = 0\n    while node:\n        count += 1\n        prev = node\n        node = node.next_node\n    if count < k:\n        return\n    node = lst.head\n    for i in range(count - k):\n        node = node.next_node\n    node.next_node = node.next_node.next_node\n    node = None\n    return\ndef get_Kth_to_Last_Element_Linked_List(lst, k): \n    '''\n    Write a python function to get the kth to last element of a singly linked list.\n    '''\n    if lst.head is None:\n        return\n    node = lst.head\n    count = 0\n    while node:\n        count += 1\n        node = node.next_node\n    if count < k:\n        return\n    node = lst.head\n    for i in range(count - k):\n        node = node.next_node\n    print node.data\n    return\ndef get_",
        "num_ids": 97
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst) & Counter(tup)\n    \n",
        "num_ids": 18
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 3\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x ** 3, nums)\n",
        "num_ids": 17
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = [x ** 3 for x in nums]\n    return result\n",
        "num_ids": 20
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    # Using List Comprehension\n    cubes = [n**3 for n in nums]\n    return cubes\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num * num * num)\n",
        "num_ids": 20
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n",
        "num_ids": 15
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return cal_sum(n-1) + n\n",
        "num_ids": 42
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += 1 + i * i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a = 0\n    for i in range(1, n+1): \n        if(i % 3 == 0 or i % 5 == 0): \n            a = a + i \n    return a\n    \n",
        "num_ids": 52
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n+cal_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==1:\n        return 1\n    return cal_sum(n-1) + n*(n+1)/2\n",
        "num_ids": 33
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in xrange(1, n+1):\n        tmp = i\n        num = 0\n        while tmp > 0:\n            num += tmp % 10\n            tmp /= 10\n        if i == num:\n            sum += i\n    return sum\n",
        "num_ids": 67
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s += (2 * i + 1) * (2 * i + 1)\n    return s\n    \ndef cal_perrin(n): \n    '''\n    Write a function to calculate the perrin number of n.\n    '''\n    p = 1\n    for i in range(n):\n        p *= (2 * i + 1)\n    return p\n",
        "num_ids": 32
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    n_list = [n]\n    while n > 1:\n        if n%2 == 0:\n            n = n/2\n            n_list.append(n)\n        else:\n            n = 3*n + 1\n            n_list.append(n)\n",
        "num_ids": 72
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n+cal_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[l:-l] for x in str]\n",
        "num_ids": 17
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    for s in l:\n        temp = s[:l]\n        if temp not in str_list:\n            str_list.append(temp)\n    return str_list\n",
        "num_ids": 51
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[0:l] for s in str]\n",
        "num_ids": 17
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) > l:\n        return str[0:l]\n    else:\n        return str\n",
        "num_ids": 29
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # your code here\n    return [str[x:x+l] for x in range(0, len(str), l)]\n",
        "num_ids": 33
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == 0:\n        return []\n    return [str[i:i+l] for i in range(0, len(str), l)]\n",
        "num_ids": 38
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return ''.join(str[i:i+l] for i in range(0,len(str),l))\n",
        "num_ids": 30
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = []\n    for i in l:\n        if len(i) >= l:\n            s.append(i[0:l])\n        else:\n            s.append(i)\n    return s\n",
        "num_ids": 52
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    if len(str) > len(l):\n        return 'String cannot be larger than the list'\n    for i in range(len(l)):\n        if len(str) > len(l[i]):\n            res.append(l[i][:len(str)])\n        else:\n            res.append(l[i])\n    return res\n",
        "num_ids": 92
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    if l == 0:\n        return res\n    for i in str:\n        if i == l:\n            res.append(i)\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # re.sub(pattern, replace, string)\n    # pattern : The regular expression to remove.\n    # replace : A pattern or function to replace the pattern.\n    # string : The string to remove the pattern from.\n    return re.sub(r'\\s+', '', text1)\n",
        "num_ids": 71
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\" +\", \" \", text1)\n",
        "num_ids": 16
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \",\"\")\n    return text1\n",
        "num_ids": 20
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \", \"\")\n    return text1\n",
        "num_ids": 20
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1=text1.replace(' ','')\n    return text1\ndef remove_new_line_characters(text1):\n    '''\n    Write a function to remove all new line characters from the given string.\n    '''\n    text1=text1.replace('\\n',' ')\n    return text1\ndef remove_special_characters(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text1=re.sub(r'[^\\w\\s]','',text1)\n    return text1\ndef remove_stopwords(text1):\n    '''\n    Write a function to remove all stopwords from the given string.\n    '''\n    from nltk.corpus import stopwords\n    stop_words=set(stopwords.words('english'))\n    text1=remove_new_line_characters(text1)\n    text1=remove_special_characters(text1)\n    words=text1.split()\n    words=[w for w in words if not w in stop_words]\n    text1=' '.join(words)\n    return text1\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    import string\n    punctuation_set=set(string.punctuation)\n    text1=remove_new_line_characters(text1)\n    text1=remove_special_characters(text1)\n    words=text1.split()\n    words=[w for w in words if not w in punctuation_set]\n    text1=' '.join(words)\n    return text1\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    import string\n    numbers=set(string.digits)\n    text1=remove_new_line_characters(text1)\n    text1=remove_special_characters(text1)\n    words=text1.split()\n    words=[w for w in words if not w in numbers]\n    text1=' '.join(words)\n    return text1\ndef remove_single_character_words(text1):\n    '''\n    Write a function to remove all single character words from the given string.\n    '''\n    import string\n    single_character_words=set(w for w in string.ascii_lowercase)\n    text1=remove_new_line_characters(text1)\n    text1=remove_special_characters(text1)\n    words=text1.split()\n    words=[w for w in words if len(w)>1]\n    text1=' '.join(words)\n    return text1\ndef remove_words_with_less_than_n_chars(text1,n):\n    '''\n    Write a function to remove all words with less than n characters from the given string.\n    '''\n    import string\n    words=text1.split()\n    words=[w for w in words if len(w)>n]\n    text1=' '.join(words)\n    return text1\ndef remove_words_with_more_than_n_chars(text1,n):\n    '''\n    Write a function to remove all words with more than n characters from the given string.\n    '''\n    import string\n    words=text1.split()\n    words=[w for w in words if len(w)<=n]\n    text1=' '.join(words)\n    return text1\ndef remove_common_words(text1,n):\n    '''\n    Write a function to remove all common English words from the given string.\n    '''\n    import string\n    common_words=set(w.strip().lower() for w in open('common_words.txt'))\n    words=text1.split()\n    words=[w for w in words if w not in common_words]\n    text1=' '.join(words)\n    return text1\ndef remove_rare_words(text1,n):\n    '''\n    Write a function to remove all rare English words from the given string.\n    '''\n    import string\n    rare_words=set(w.strip().lower() for w in open('rare_words.txt'))\n    words=text1.split()\n    words=[w for w in words if w not in rare_words]\n    text1=' '.join(words)\n    return text1\ndef remove_non_english_words(text1):\n    '''\n    Write a function to remove all non English words from the given string.\n    '''\n    import string\n    words=text1.split()\n    words=[w for w in words if w in set(w.strip().lower() for w in open('english_words.txt'))]\n    text1=' '.join(words)\n    return text1\ndef remove_common_non_english_words(text1,n):\n    '''\n    Write a function to remove all common non English words from the given string.\n    '''\n    import string\n    common_words=set(w.strip().lower() for w in open('common_words.txt'))\n    rare_words=set(w.strip().lower() for w in open('rare_words.txt'))\n    words=text1.split()\n    words=[w for w in words if w not in rare_words and w not in common_words]\n    text1=' '.join(words)\n    return text1\ndef remove_custom_words(text1,n):\n    '''\n    Write a function to remove all custom English words from the given string.\n    '''\n    import string\n    words=text1.split()\n    words=[w for w in words if w in set(w.strip().lower() for w in open('custom_words.txt'))]\n    text1=' '.join(words)\n    return text1\ndef remove_rare_custom_words(text1,n):\n    '''\n    Write a function to remove all rare custom English words from the given string.\n    '''\n    import string\n    common_words=set(w.strip().lower() for w in open('common_words.txt'))\n    words=text1.split()\n    words=[w for w in words if w not in common_words]\n    rare_words=set(w.strip().lower() for w in open('rare_words.txt'))\n    words=[w for w in words if w not in rare_words]\n    text1=' '.join(words)\n    return text1\ndef remove_stop_words(text1):\n    '''\n    Write a function to remove all stop words from the given string.\n    '''\n    from nltk.corpus import stopwords\n    stop_words=set(stopwords.words('english'))\n    words=text1.split()\n    words=[w for w in words if not w in stop_words]\n    text1=' '.join(words)\n    return text1\ndef remove_rare_stopwords(text1,n):\n    '''\n    Write a function to remove all rare stop words from the given string.\n    '''\n    import string\n    common_words=set(w.strip().lower() for w in open('common_words.txt'))\n    words=text1.split()\n    words=[w for w in words if w not in common_words]\n    stop_words=set(w.strip().lower() for w in open('rare_words.txt'))\n    words=[w for w in words if not w in stop_words]\n    text1=' '.join(words)\n    return text1\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    import string\n    punctuation_set=set(string.punctuation)\n    words=text1.split()\n    words=[w for w in words if not w in punctuation_set]\n    text1=' '.join(words)\n    return text1\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    import string\n    numbers=set(string.digits)\n    words=text1.split()\n    words=[w for w in words if not w in numbers]\n    text1=' '.join(words)\n    return text1\ndef remove",
        "num_ids": 59
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = ''.join(text1.split())\n    return text2\n",
        "num_ids": 21
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    list1=re.split('\\s+',text1)\n    return ''.join(list1)\ndef reverse_string(text1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return text1[::-1]\ndef vowels(text1):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    vowel=0\n    for i in text1:\n        if i in 'aeiouAEIOU':\n            vowel=vowel+1\n    return vowel\ndef digits(text1):\n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    digit=0\n    for i in text1:\n        if i.isdigit():\n            digit=digit+1\n    return digit\ndef remove_duplicate(text1):\n    '''\n    Write a function to remove duplicate words from a string.\n    '''\n    list1=list(text1.split())\n    dic={}\n    for i in list1:\n        dic[i]=dic.get(i,0)+1\n    list1=[]\n    for i in dic:\n        if dic[i]==1:\n            list1.append(i)\n    return''.join(list1)\ndef find_first_last_position(text1):\n    '''\n    Write a function to find the first and last position of a word in a string.\n    '''\n    list1=text1.split()\n    dic={}\n    for i in list1:\n        dic[i]=dic.get(i,0)+1\n    for i in dic:\n        if dic[i]==1:\n            first=text1.index(i)\n            last=text1.rindex(i)\n            return (first,last)\n    return (None,None)\ndef count_substring(text1):\n    '''\n    Write a function to count the occurrences of substrings in a string.\n    '''\n    count=0\n    list1=list(text1)\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i:j+1]==list1[j:j+1]:\n                count=count+1\n    return count\ndef string_compression(text1):\n    '''\n    Write a function to check if a string is a permutation of another string.\n    '''\n    list1=list(text1)\n    list2=list(text1)\n    list1.sort()\n    list2.sort()\n    if list1==list2:\n        return True\n    else:\n        return False\ndef remove_duplicate_words(text1):\n    '''\n    Write a function to remove duplicate words from a string.\n    '''\n    list1=list(text1)\n    list1.sort()\n    return''.join(list1)\ndef sum_double(text1):\n    '''\n    Write a function to sum all the even-indexed numbers in a string.\n    '''\n    sum=0\n    list1=list(text1)\n    for i in range(0,len(list1),2):\n        sum=sum+int(list1[i])\n    return sum\ndef count_vowels(text1):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    vowel=0\n    list1=list(text1)\n    for i in list1:\n        if i in 'aeiouAEIOU':\n            vowel=vowel+1\n    return vowel\ndef check_balanced(text1):\n    '''\n    Write a function to check whether a string is balanced. A balanced string is a string whose characters are completely balanced between two types - i.e. left-balanced and right-balanced.\n    '''\n    left=0\n    right=0\n    for i in text1:\n        if i=='[':\n            left=left+1\n        elif i==']':\n            right=right+1\n        elif i=='(':\n            left=left+1\n        elif i==')':\n            right=right+1\n    if left==right:\n        return True\n    else:\n        return False\ndef count_smileys(text1):\n    '''\n    Write a function to count the number of smiley faces that exist in a string.\n    '''\n    count=0\n    list1=list(text1)\n    for i in range(len(list1)):\n        if list1[i] in [':)',':)',';)',':O',';O',':-]',';-]',';-D',';-D',';D',';O',':o',';O',':O',':o',':]',';]',';]',';3',';-3',':-3',':-3',';-3',';3',':-3',':3',';-3',';3',':-',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3',';-3',':3',';0',';-0',':0',';3'",
        "num_ids": 929
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1=re.sub(r'\\s+',r'',text1)\n    return text1\n",
        "num_ids": 28
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r\"\\s+\",\"\",text1)\n    return text1\n",
        "num_ids": 26
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s', '', text1)\n",
        "num_ids": 19
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    return 0\n",
        "num_ids": 27
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost - sale_amount > 0 else 0\n",
        "num_ids": 24
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = sale_amount - actual_cost\n    if loss_amount > 0:\n        return loss_amount\n    else:\n        return 0\n",
        "num_ids": 38
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost - sale_amount > 0 else 0\n",
        "num_ids": 24
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost!= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 32
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount - actual_cost if sale_amount - actual_cost > 0 else 0\n",
        "num_ids": 24
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost - sale_amount < 0 else 0\n",
        "num_ids": 24
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n    \ndef find_probability(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss probability on a sale if the given amount has loss else return 0.\n    '''\n    return loss_amount(actual_cost,sale_amount) / sale_amount\n",
        "num_ids": 21
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n % 2 == 0) : \n        return 2\n    else : \n        sum = 0\n        for i in range(1, int(math.sqrt(n)) + 1) : \n            if (n % i == 0) : \n                if (i % 2 == 0) : \n                    sum += i \n                if (i * i == n) : \n                    sum += i \n        return sum\ndef isPerfectNumber(n) : \n    '''\n    Write a python function to find if a number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum += i\n    return (sum == n) \ndef convertToRoman(num) : \n    '''\n    Write a python function to convert a decimal integer to a Roman numeral.\n    '''\n    rn = ''\n    while (num > 0) : \n        rn += roman[num % 10]\n        num = num // 10\n    return rn\ndef printRoman(n) : \n    '''\n    Write a python function to convert a Roman numeral to a decimal integer.\n    '''\n    rn = ''\n    rn = roman[n[0]]\n    rn = rn * (10 ** (len(n) - 1))\n    rn = rn + roman[n[1]]\n    rn = rn + roman[n[2]]\n    rn = rn + roman[n[3]]\n    rn = rn + roman[n[4]]\n    rn = rn + roman[n[5]]\n    rn = rn + roman[n[6]]\n    rn = rn + roman[n[7]]\n    rn = rn + roman[n[8]]\n    rn = rn + roman[n[9]]\n    rn = rn + roman[n[10]]\n    rn = rn + roman[n[11]]\n    rn = rn + roman[n[12]]\n    rn = rn + roman[n[13]]\n    rn = rn + roman[n[14]]\n    rn = rn + roman[n[15]]\n    rn = rn + roman[n[16]]\n    rn = rn + roman[n[17]]\n    rn = rn + roman[n[18]]\n    rn = rn + roman[n[19]]\n    rn = rn + roman[n[20]]\n    rn = rn + roman[n[21]]\n    rn = rn + roman[n[22]]\n    rn = rn + roman[n[23]]\n    rn = rn + roman[n[24]]\n    rn = rn + roman[n[25]]\n    rn = rn + roman[n[26]]\n    rn = rn + roman[n[27]]\n    rn = rn + roman[n[28]]\n    rn = rn + roman[n[29]]\n    rn = rn + roman[n[30]]\n    rn = rn + roman[n[31]]\n    rn = rn + roman[n[32]]\n    rn = rn + roman[n[33]]\n    rn = rn + roman[n[34]]\n    rn = rn + roman[n[35]]\n    rn = rn + roman[n[36]]\n    rn = rn + roman[n[37]]\n    rn = rn + roman[n[38]]\n    rn = rn + roman[n[39]]\n    rn = rn + roman[n[40]]\n    rn = rn + roman[n[41]]\n    rn = rn + roman[n[42]]\n    rn = rn + roman[n[43]]\n    rn = rn + roman[n[44]]\n    rn = rn + roman[n[45]]\n    rn = rn + roman[n[46]]\n    rn = rn + roman[n[47]]\n    rn = rn + roman[n[48]]\n    rn = rn + roman[n[49]]\n    rn = rn + roman[n[50]]\n    rn = rn + roman[n[51]]\n    rn = rn + roman[n[52]]\n    rn = rn + roman[n[53]]\n    rn = rn + roman[n[54]]\n    rn = rn + roman[n[55]]\n    rn = rn + roman[n[56]]\n    rn = rn + roman[n[57]]\n    rn = rn + roman[n[58]]\n    rn = rn + roman[n[59]]\n    rn = rn + roman[n[60]]\n    rn = rn + roman[n[61]]\n    rn = rn + roman[n[62]]\n    rn = rn + roman[n[63]]\n    rn = rn + roman[n[64]]\n    rn = rn + roman[n[65]]\n    rn = rn + roman[n[66]]\n    rn = rn + roman[n[67]]\n    rn = rn + roman[n[68]]\n    rn = rn + roman[n[69]]\n    rn = rn + roman[n[70]]\n    rn = rn + roman[n[71]]\n    rn = rn + roman[n[72]]\n    rn = rn + roman[n[73]]\n    rn = rn + roman[n[74]]\n    rn = rn + roman[n[75]]\n    rn = rn + roman[n[76]]\n    rn = rn + roman[n[77]]\n    rn = rn + roman[n[78]]\n    rn = rn + roman[n[79]]\n    rn = rn + roman[n[80]]\n    rn = rn + roman[n[81]]\n    rn = rn + roman[n[82]]\n    rn = rn + roman[n[83]]\n    rn = rn + roman[n[84]]\n    rn = rn + roman[n[85]]\n    rn = rn + roman[n[86]]\n    rn = rn + roman[n[87]]\n    rn = rn + roman[n[88]]\n    rn = rn + roman[n[89]]\n    rn = rn + roman[n[90]]\n    rn = rn + roman[n[91]]\n    rn = rn + roman[n[92]]\n    rn = rn + roman[n[93]]\n    rn = rn + roman[n[94]]\n    rn = rn + roman[n[95]]\n    rn = rn + roman[n[96]]\n    rn = rn + roman[n[97]]\n    rn = rn + roman[n[98]]\n    rn = rn + roman[n[99]]\n    rn = rn + roman[n[100]]\n    rn = rn + roman[n[101]]\n    rn = rn + roman[n[102]]\n    rn = rn + roman[n[103]]\n    rn = rn + roman[n[104]]\n    rn = rn + roman[n[105]]\n    rn = rn + roman[n[106]]\n    rn = rn + roman[n[107]]\n    rn = rn + roman[n[108]]\n    rn = rn + roman[n[109]]\n    rn = rn + roman[n[110]]\n    rn = rn + roman[n[111]]\n    rn = rn + roman[n[112]]\n    rn = rn + roman[n[113]]\n    rn = rn + roman[n[114]]\n    rn = rn + roman[n[115]]\n    rn = rn + roman[n[116]]\n    rn = rn + roman[n[117]]\n    rn = rn + roman[n[118]]\n    rn = rn + roman[n[119]]\n    rn = rn + roman[n[120]]\n    rn = rn + roma",
        "num_ids": 1724
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(sum(divisors(i)) for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0 and n / i == i)\ndef divisors(n) :\n    '''\n    Write a python function to find all divisors of a number\n    '''\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            divisors.extend([i, n/i])\n    return list(set(divisors))\ndef countUniqueDigits(n) : \n    '''\n    Write a python function to count the total number of unique digits in the number\n    '''\n    d = {}\n    for i in str(n) :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    return sum(d.values())\ndef isPandigital(n) :\n    '''\n    Write a python function to check if a number is pandigital or not\n    '''\n    d = {}\n    for i in str(n) :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    for i in range(1, 10) :\n        if i not in d :\n            return False\n    return True\ndef isPandigitalReverse(n) :\n    '''\n    Write a python function to check if a number is pandigital or not in reverse order\n    '''\n    d = {}\n    for i in str(n)[::-1] :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    for i in range(1, 10) :\n        if i not in d :\n            return False\n    return True\ndef factorSum(n) :\n    '''\n    Write a python function to find the sum of factors of a number\n    '''\n    return sum(divisors(n))\ndef isPanagram(n) :\n    '''\n    Write a python function to check if a number is panagram or not\n    '''\n    s = str(n)\n    d = {}\n    for i in s :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    for i in range(1, 10) :\n        if i not in d :\n            return False\n    return True\ndef isPanagramReverse(n) :\n    '''\n    Write a python function to check if a number is panagram or not in reverse order\n    '''\n    s = str(n)[::-1]\n    d = {}\n    for i in s :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    for i in range(1, 10) :\n        if i not in d :\n            return False\n    return True\ndef primeFactors(n) :\n    '''\n    Write a python function to find all prime factors of a number\n    '''\n    divisors = []\n    for i in range(2, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            divisors.extend([i, n/i])\n    return list(set(divisors))\ndef highestPrimeFactor(n) :\n    '''\n    Write a python function to find the highest prime factor of a number\n    '''\n    divisors = primeFactors(n)\n    return max(divisors)\ndef isPrime(n) :\n    '''\n    Write a python function to check if a number is prime or not\n    '''\n    if n == 1 :\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            return False\n    return True\ndef isPrimeReverse(n) :\n    '''\n    Write a python function to check if a number is prime or not in reverse order\n    '''\n    if n == 1 :\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            return False\n    return True\ndef getFactors(n) :\n    '''\n    Write a python function to find all factors of a number\n    '''\n    divisors = []\n    for i in range(2, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            divisors.extend([i, n/i])\n    return list(set(divisors))\ndef isPerfectSquare(n) :\n    '''\n    Write a python function to check if a number is a perfect square or not\n    '''\n    d = int(math.sqrt(n))\n    return d * d == n\ndef isPerfectSquareReverse(n) :\n    '''\n    Write a python function to check if a number is a perfect square or not in reverse order\n    '''\n    d = int(math.sqrt(n))\n    return d * d == n\ndef isPerfectRectangle(n) :\n    '''\n    Write a python function to check if a number is a perfect rectangle or not\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i!= 0 :\n            return False\n    return True\ndef isPerfectRectangleReverse(n) :\n    '''\n    Write a python function to check if a number is a perfect rectangle or not in reverse order\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i!= 0 :\n            return False\n    return True\ndef getFactorsReverse(n) :\n    '''\n    Write a python function to find all factors of a number in reverse order\n    '''\n    divisors = []\n    for i in range(int(math.sqrt(n)), 1, -1) :\n        if n % i == 0 :\n            divisors.extend([i, n/i])\n    return list(set(divisors))\ndef getFactorsReverseReverse(n) :\n    '''\n    Write a python function to find all factors of a number in reverse order in reverse order\n    '''\n    divisors = []\n    for i in range(int(math.sqrt(n)), 1, -1) :\n        if n % i == 0 :\n            divisors.extend([i, n/i])\n    return list(set(divisors))\ndef isPerfectRectangleReverse(n) :\n    '''\n    Write a python function to check if a number is a perfect rectangle or not in reverse order\n    '''\n    factors = getFactorsReverse(n)\n    a, b = factors[0], factors[1]\n    return a * b == n\ndef isPerfectRectangleReverseReverse(n) :\n    '''\n    Write a python function to check if a number is a perfect rectangle or not in reverse order in reverse order\n    '''\n    factors = getFactorsReverseReverse(n)\n    a, b = factors[0], factors[1]\n    return a * b == n\ndef isPentagonal(n) :\n    '''\n    Write a python function to check if a number is pentagonal or not\n    '''\n    d = (1 + 24 * n) * n / 2\n    return d == int(d)\ndef isPentagonalReverse(n) :\n    '''\n    Write a python function to check if a number is pentagonal or not in reverse order\n    '''\n    d = (1 + 24 * n) * n / 2\n    return d == int(d)\ndef isPentagonalReverseReverse(n) :\n    '''\n    Write a python function to check if a number is pentagonal or not in reverse order in reverse order\n    '''\n    d = (1 + 24 * n) * n / 2\n    return d == int(d)\ndef isHexagonal(n) :\n    '''\n    Write a python function to check if a number is hexagonal or not\n    '''\n    d = (1 + 8 * n) * n / 4",
        "num_ids": 16
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    # Print the number of 2s that divide n \n    while (n % 2 == 0) : \n        total = total + 2\n        n = n / 2\n    # n must be odd at this point, so skip\n    # the 2 above and iterate\n    for i in range(3, int(math.sqrt(n)) + 1, 2) : \n        while (n % i == 0) : \n            total = total + i + n / i\n            n = n / i \n    if (n > 2) : \n        total = total + n \n    return total \n",
        "num_ids": 147
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, (n / 2) + 1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum = sum + i \n    return sum\n",
        "num_ids": 58
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 1\n    while i <= n : \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                sum += i \n        i = i + 1\n    return sum \ndef getprimes(n): \n    '''\n    Write a python function to find the prime numbers from 1 to n.\n    '''\n    primes = []\n    i = 2\n    while i <= n : \n        isprime = True\n        j = 2\n        while j <= math.sqrt(i) :\n            if (i % j == 0) :\n                isprime = False\n                break\n            j = j + 1\n        if isprime :\n            primes.append(i)\n        i = i + 1\n    return primes\ndef isprime(n): \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if (n < 2) :\n        return False\n    if (n == 2) :\n        return True\n    if (n % 2 == 0) :\n        return False\n    i = 3\n    while i <= math.sqrt(n) :\n        if (n % i == 0) :\n            return False\n        i = i + 2\n    return True\ndef addEvenFactors(n) : \n    '''\n    Write a python function to add all the even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i <= n : \n        if (n % i == 0) :\n            if (i % 2 == 0) : \n                sum += i\n        i = i + 1\n    return sum\ndef isPerfect(n): \n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    sum = 0\n    i = 1\n    while i <= n : \n        if (n % i == 0) :\n            sum = sum + i\n        i = i + 1\n    if (sum == n) :\n        return True\n    return False\ndef getCountDivisors(n): \n    '''\n    Write a python function to find the count of divisors of a number.\n    '''\n    count = 0\n    i = 1\n    while i <= n : \n        if (n % i == 0) :\n            count = count + 1\n        i = i + 1\n    return count\ndef isabundant(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > n) :\n        return True\n    return False\ndef isabundantNot2(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 1)) :\n        return True\n    return False\ndef isabundantNot3(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 2)) :\n        return True\n    return False\ndef isabundantNot4(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 3)) :\n        return True\n    return False\ndef isabundantNot5(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 4)) :\n        return True\n    return False\ndef isabundantNot6(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 5)) :\n        return True\n    return False\ndef isabundantNot7(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 6)) :\n        return True\n    return False\ndef isabundantNot8(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 7)) :\n        return True\n    return False\ndef isabundantNot9(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 8)) :\n        return True\n    return False\ndef isabundantNot10(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 9)) :\n        return True\n    return False\ndef isabundantNot11(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 10)) :\n        return True\n    return False\ndef isabundantNot12(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 11)) :\n        return True\n    return False\ndef isabundantNot13(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 12)) :\n        return True\n    return False\ndef isabundantNot14(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 13)) :\n        return True\n    return False\ndef isabundantNot15(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 14)) :\n        return True\n    return False\ndef isabundantNot16(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 15)) :\n        return True\n    return False\ndef isabundantNot17(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 16)) :\n        return True\n    return False\ndef isabundantNot18(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 17)) :\n        return True\n    return False\ndef isabundantNot19(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 18)) :\n        return True\n    return False\ndef isabundantNot20(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 19)) :\n        return True\n    return False\ndef isabundantNot21(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 20)) :\n        return True\n    return False\ndef isabundantNot22(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 21)) :\n        return True\n    return False\ndef isabundantNot23(n): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if (getCountDivisors(n) > (n + 2",
        "num_ids": 18
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # printing a list of factors \n    factors = []\n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) :\n            if (n / i == i) : \n                factors.append(i)\n            else : \n                factors.append(i)\n                factors.append(n / i)\n    # print(factors)\n    sum = 0\n    for i in factors : \n        if (i % 2 == 0) : \n            sum += i\n    return sum\n",
        "num_ids": 138
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n <= 1:\n        return 0\n    sum = 0\n    for i in range(2,n):\n        if (n % i == 0):\n            if (i % 2 == 0):\n                sum += i\n    return sum\n",
        "num_ids": 58
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    for i in range(2,n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n",
        "num_ids": 67
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # n = int(input())\n    if n == 0:\n        return 0\n    l = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            l.append(i)\n    if n > 1:\n        l.append(n)\n    sum = 0\n    for i in l:\n        if i % 2 == 0:\n            sum += i\n    return sum\n",
        "num_ids": 116
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('z',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b\\w*z\\b', text)\ndef test_text_match_wordz():\n    assert text_match_wordz('z')\n    assert not text_match_wordz('zzz')\n    assert not text_match_wordz('z')\n    assert text_match_wordz('zzzzzzzzz')\ndef text_match_ignore_case(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b\\w*z\\b', text, re.IGNORECASE)\ndef test_text_match_ignore_case():\n    assert text_match_ignore_case('z')\n    assert not text_match_ignore_case('zzz')\n    assert not text_match_ignore_case('z')\n    assert not text_match_ignore_case('zzzzzzzzz')\n    \ndef text_match_wordz_all_case(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b\\w*z\\b', text, re.VERBOSE)\ndef test_text_match_wordz_all_case():\n    assert text_match_wordz_all_case('z')\n    assert not text_match_wordz_all_case('zzz')\n    assert not text_match_wordz_all_case('z')\n    assert not text_match_wordz_all_case('zzzzzzzzz')\n",
        "num_ids": 115
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b([a-z]+\\.*z+)\\b'\n    #pattern = r'\\b([a-z]+[z]+)'\n    #pattern = r'\\b([a-z]+.*z+)'\n    if re.match(pattern, text):\n        print('Found a match!')\n    else:\n        print('Not a match!')\n",
        "num_ids": 92
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'.*(z).*')\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n",
        "num_ids": 51
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('z', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z_pattern = re.compile(r'z+')\n    if z_pattern.match(text):\n        print('word contains z')\n    else:\n        print('word does not contain z')\n",
        "num_ids": 51
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b(z)\\b')\n    matches = pattern.findall(text)\n    return matches\n    ",
        "num_ids": 37
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    print re.search(r'z\\w*',text)\n    print re.search(r'z\\w*',text).group()\n    print re.search(r'z\\w*',text).group(0)\n    print re.search(r'z\\w*',text).group(1)\n    print re.search(r'z\\w*',text).group(2)\n    print re.search(r'z\\w*',text).group(3)\n    print re.search(r'z\\w*',text).group(4)\n    print re.search(r'z\\w*',text).group(5)\n    print re.search(r'z\\w*',text).group(6)\n    print re.search(r'z\\w*',text).group(7)\n    print re.search(r'z\\w*',text).group(8)\n    print re.search(r'z\\w*',text).group(9)\n    print re.search(r'z\\w*',text).group(10)\n    print re.search(r'z\\w*',text).group(11)\n    print re.search(r'z\\w*',text).group(12)\n    print re.search(r'z\\w*',text).group(13)\n    print re.search(r'z\\w*',text).group(14)\n    print re.search(r'z\\w*',text).group(15)\n    print re.search(r'z\\w*',text).group(16)\n    print re.search(r'z\\w*',text).group(17)\n    print re.search(r'z\\w*',text).group(18)\n    print re.search(r'z\\w*',text).group(19)\n    print re.search(r'z\\w*',text).group(20)\n    print re.search(r'z\\w*',text).group(21)\n    print re.search(r'z\\w*',text).group(22)\n    print re.search(r'z\\w*',text).group(23)\n    print re.search(r'z\\w*',text).group(24)\n    print re.search(r'z\\w*',text).group(25)\n    print re.search(r'z\\w*',text).group(26)\n    print re.search(r'z\\w*',text).group(27)\n    print re.search(r'z\\w*',text).group(28)\n    print re.search(r'z\\w*',text).group(29)\n    print re.search(r'z\\w*',text).group(30)\n    print re.search(r'z\\w*',text).group(31)\n    print re.search(r'z\\w*',text).group(32)\n    print re.search(r'z\\w*',text).group(33)\n    print re.search(r'z\\w*',text).group(34)\n    print re.search(r'z\\w*',text).group(35)\n    print re.search(r'z\\w*',text).group(36)\n    print re.search(r'z\\w*',text).group(37)\n    print re.search(r'z\\w*',text).group(38)\n    print re.search(r'z\\w*',text).group(39)\n    print re.search(r'z\\w*',text).group(40)\n    print re.search(r'z\\w*',text).group(41)\n    print re.search(r'z\\w*',text).group(42)\n    print re.search(r'z\\w*',text).group(43)\n    print re.search(r'z\\w*',text).group(44)\n    print re.search(r'z\\w*',text).group(45)\n    print re.search(r'z\\w*',text).group(46)\n    print re.search(r'z\\w*',text).group(47)\n    print re.search(r'z\\w*',text).group(48)\n    print re.search(r'z\\w*',text).group(49)\n    print re.search(r'z\\w*',text).group(50)\n    print re.search(r'z\\w*',text).group(51)\n    print re.search(r'z\\w*',text).group(52)\n    print re.search(r'z\\w*',text).group(53)\n    print re.search(r'z\\w*',text).group(54)\n    print re.search(r'z\\w*',text).group(55)\n    print re.search(r'z\\w*',text).group(56)\n    print re.search(r'z\\w*',text).group(57)\n    print re.search(r'z\\w*',text).group(58)\n    print re.search(r'z\\w*',text).group(59)\n    print re.search(r'z\\w*',text).group(60)\n    print re.search(r'z\\w*',text).group(61)\n    print re.search(r'z\\w*',text).group(62)\n    print re.search(r'z\\w*',text).group(61)\n    print re.search(r'z\\w*',text).group(60)\n    print re.search(r'z\\w*',text).group(59)\n    print re.search(r'z\\w*',text).group(58)\n    print re.search(r'z\\w*',text).group(57)\n    print re.search(r'z\\w*',text).group(56)\n    print re.search(r'z\\w*',text).group(55)\n    print re.search(r'z\\w*',text).group(54)\n    print re.search(r'z\\w*',text).group(53)\n    print re.search(r'z\\w*',text).group(52)\n    print re.search(r'z\\w*',text).group(51)\n    print re.search(r'z\\w*',text).group(50)\n    print re.search(r'z\\w*',text).group(49)\n    print re.search(r'z\\w*',text).group(48)\n    print re.search(r'z\\w*',text).group(47)\n    print re.search(r'z\\w*',text).group(46)\n    print re.search(r'z\\w*',text).group(45)\n    print re.search(r'z\\w*',text).group(44)\n    print re.search(r'z\\w*',text).group(43)\n    print re.search(r'z\\w*',text).group(42)\n    print re.search(r'z\\w*',text).group(41)\n    print re.search(r'z\\w*',text).group(40)\n    print re.search(r'z\\w*',text).group(39)\n    print re.search(r'z\\w*',text).group(38)\n    print re.search(r'z\\w*',text).group(37)\n    print re.search(r'z\\w*',text).group(36)\n    print re.search(r'z\\w*',text).group(35)\n    print re.search(r'z\\w*',text).group(34)\n    print re.search(r'z\\w*',text).group(33)\n    print re.search(r'z\\w*',text).group(32)\n    print re.search(r'z\\w*',text).group(31)\n    print re.search(r'z\\w*',text).group(30)\n    print re.search(r'z\\w*',text).group(29)\n    print re.search(r'z\\w*',text).group(28)\n    print re.search(r'z\\w*',text).group(27)\n    print re.search(r'z\\w*',text).group(26",
        "num_ids": 2014
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = r'\\b\\w*z\\w*\\b'\n    wordz = re.search(word,text)\n    return wordz\n    \ndef text_match_words(text):\n    '''\n    Write a function that matches all words containing 'z'\n    '''\n    word = r'\\b\\w*z\\w*\\b'\n    words = re.findall(word,text)\n    return words\n    \ndef text_match_all(text):\n    '''\n    Write a function that matches all words in a text.\n    '''\n    word = r'\\b\\w*\\b'\n    all = re.findall(word,text)\n    return all\n    \ndef text_match_numbers(text):\n    '''\n    Write a function that matches all the numbers in a text.\n    '''\n    num = r'\\d+'\n    numbers = re.findall(num,text)\n    return numbers\n",
        "num_ids": 30
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'\\b\\w+z\\b', text)\ndef text_match_wordzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zz\\b', text)\ndef text_match_wordzzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzz\\b', text)\ndef text_match_words(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'\\b\\w+z\\b', text)\ndef text_match_wordsz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zz\\b', text)\ndef text_match_wordszz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzz\\b', text)\ndef text_match_wordszzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzzz\\b', text)\ndef text_match_wordzzzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzzzz\\b', text)\ndef text_match_wordzzzzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzzzzz\\b', text)\ndef text_match_wordsz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+z\\b', text)\ndef text_match_wordszz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zz\\b', text)\ndef text_match_wordszzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzz\\b', text)\ndef text_match_wordszzzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzzzz\\b', text)\ndef text_match_wordszzzzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z' followed by 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzzzzz\\b', text)\ndef text_match_wordsz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+z\\b', text)\ndef text_match_wordszz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zz\\b', text)\ndef text_match_wordszzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzz\\b', text)\ndef text_match_wordszzzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzzzz\\b', text)\ndef text_match_wordsz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+z\\b', text)\ndef text_match_wordszz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zz\\b', text)\ndef text_match_wordszzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzz\\b', text)\ndef text_match_wordszzzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzzzz\\b', text)\ndef text_match_wordsz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+z\\b', text)\ndef text_match_wordszz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zz\\b', text)\ndef text_match_wordszzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzz\\b', text)\ndef text_match_wordszzzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzzzz\\b', text)\ndef text_match_wordsz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+z\\b', text)\ndef text_match_wordszz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zz\\b', text)\ndef text_match_wordszzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzz\\b', text)\ndef text_match_wordszzzz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z' followed by 'z' followed by 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+zzzzz\\b', text)\ndef text_match_wordsz(text):\n    '''\n    Write a function that matches a word containing 'z' followed by 'z'.\n    '''\n    return re.findall(r'\\b\\w+z",
        "num_ids": 17
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12:\n        return \"Invaild Month number\"\n    elif monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if 1 < day < 29:\n                return True\n            else:\n                return False\n        else:\n            if 1 < day < 28:\n                return True\n            else:\n                return False\n    elif monthnum2 in (4, 6, 9, 11):\n        if 1 < day < 30:\n            return True\n        else:\n            return False\n    else:\n        if 1 < day < 31:\n            return True\n        else:\n            return False\n",
        "num_ids": 164
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 2:\n        return 28\n    else:\n        return 30\n",
        "num_ids": 73
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    else:\n        return 30\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2 == 2):\n        print('Month number %s has 31 days' % (monthnum2))\n    elif(monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11):\n        print('Month number %s has 30 days' % (monthnum2))\n    elif(monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12):\n        print('Month number %s has 31 days' % (monthnum2))\n    else:\n        print('Month number %s has 30 days' % (monthnum2))\n",
        "num_ids": 164
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_list = [31,28,31,30,31,30,31,31,30,31,30,31]\n    if(monthnum2 in days_list):\n        return True\n    else:\n        return False\n    \ndef leap_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if(year % 4 == 0):\n        if(year % 100 == 0):\n            if(year % 400 == 0):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==2:\n        if (year%400==0) or (year%100!=0) and (year%4==0):\n            print(31)\n        elif (year%4==0) and (year%100!=0):\n            print(29)\n        else:\n            print(28)\n    elif monthnum2 in (4,6,9,11):\n        print(30)\n    else:\n        print(31)\n        \ndef leapyear(year):\n    if year%4==0:\n        if year%100==0:\n            if year%400==0:\n                print(\"True\")\n            else:\n                print(\"False\")\n        else:\n            print(\"True\")\n    else:\n        print(\"False\")\n        \ndef absolute_value(num):\n    if num<0:\n        print(num*(-1))\n    else:\n        print(num)\n",
        "num_ids": 221
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    else:\n        return 30\n",
        "num_ids": 36
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print('The given month number:'+ str(monthnum2) +'contains 31 days')\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print('The given month number:'+ str(monthnum2) +'contains 30 days')\n    else:\n        print('The given month number:'+ str(monthnum2) +'contains 28 days')\n",
        "num_ids": 148
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == \"1\":\n        print (\"January has 31 days\")\n    elif monthnum2 == \"2\":\n        print (\"February has 28 days\")\n    elif monthnum2 == \"3\":\n        print (\"March has 31 days\")\n    elif monthnum2 == \"4\":\n        print (\"April has 30 days\")\n    elif monthnum2 == \"5\":\n        print (\"May has 31 days\")\n    elif monthnum2 == \"6\":\n        print (\"June has 30 days\")\n    elif monthnum2 == \"7\":\n        print (\"July has 31 days\")\n    elif monthnum2 == \"8\":\n        print (\"August has 31 days\")\n    elif monthnum2 == \"9\":\n        print (\"September has 30 days\")\n    elif monthnum2 == \"10\":\n        print (\"October has 31 days\")\n    elif monthnum2 == \"11\":\n        print (\"November has 30 days\")\n    elif monthnum2 == \"12\":\n        print (\"December has 31 days\")\n    else:\n        print (\"Month number not valid\")\n        exit()\n",
        "num_ids": 258
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]\n",
        "num_ids": 18
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Write your code here\n    return [x[::-1] for x in stringlist]\n",
        "num_ids": 25
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for string in stringlist:\n        result.append(string[::-1])\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]\n",
        "num_ids": 18
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for string in stringlist:\n        string = string[::-1]\n        newlist.append(string)\n    return newlist\n",
        "num_ids": 40
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversestringlist = []\n    for x in stringlist:\n        newstr = x[::-1]\n        reversestringlist.append(newstr)\n    return reversestringlist\n",
        "num_ids": 50
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) <= 1:\n        return stringlist\n    else:\n        return [stringlist[-1]] + reverse_string_list(stringlist[:-1])\n",
        "num_ids": 45
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for s in stringlist:\n        s = s[::-1]\n    return stringlist\n",
        "num_ids": 25
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedlist = []\n    for s in stringlist:\n        reversedlist.append(s[::-1])\n    return reversedlist\n",
        "num_ids": 38
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(0,len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "num_ids": 39
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #start your solution here\n    return lst[0]\n    \n    \n    ",
        "num_ids": 22
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0]) \n    min_index = 0\n    for i in range(1, len(lst)): \n        if len(lst[i]) < min_len: \n            min_len = len(lst[i]) \n            min_index = i \n    return min_index\n    \ndef Find_Max(lst): \n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    max_len = len(lst[0]) \n    max_index = 0\n    for i in range(1, len(lst)): \n        if len(lst[i]) > max_len: \n            max_len = len(lst[i]) \n            max_index = i \n    return max_index\n",
        "num_ids": 83
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = len(lst)\n    Min_list = lst[0]\n    for i in range(0, l):\n        for j in range(i+1, l):\n            if len(lst[i]) < len(lst[j]):\n                Min_list = lst[i]\n            elif len(lst[i]) > len(lst[j]):\n                Min_list = lst[j]\n            else:\n                Min_list = lst[i]\n    return Min_list\n",
        "num_ids": 128
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0]) \n    for i in range(len(lst)): \n        if min_len > len(lst[i]): \n            min_len = len(lst[i]) \n    for i in range(len(lst)): \n        if min_len == len(lst[i]): \n            print(\"The sublist with minimum length is: \",lst[i]) \n            \ndef Check_Anagram(lst1,lst2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    lst1.sort()\n    lst2.sort()\n    if lst1 == lst2: \n        print(\"The strings are anagrams\") \n    else: \n        print(\"The strings are not anagrams\") \n    \ndef Check_Palindrome(lst): \n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if lst[:] == lst[::-1]: \n        print(\"The string is a palindrome\") \n    else: \n        print(\"The string is not a palindrome\") \n        \ndef Find_Consecutive_Numbers(lst): \n    '''\n    Write a python function to find the first and the last occurence of a particular element in a list.\n    '''\n    lst_len = len(lst) \n    first = 0 \n    last = lst_len-1\n    for i in range(lst_len): \n        if lst[i] == lst[first]: \n            first += 1 \n        elif lst[i] == lst[last]: \n            last -= 1 \n    print(\"The first and last occurrence of the element is: \",lst[first],lst[last]) \n            \ndef Find_Difference(lst1,lst2): \n    '''\n    Write a python function to find the smallest difference between two lists.\n    '''\n    lst1.sort()\n    lst2.sort()\n    min_diff = lst1[-1] - lst2[0] \n    for i in range(len(lst1)): \n        for j in range(len(lst2)): \n            if abs(lst1[i] - lst2[j]) < min_diff: \n                min_diff = abs(lst1[i] - lst2[j]) \n    print(\"The minimum difference is: \",min_diff) \n        \ndef Find_Majority_Element(lst): \n    '''\n    Write a python function to find the majority element in a list.\n    '''\n    lst_len = len(lst) \n    if lst_len == 1: \n        print(\"The majority element is: \",lst[0]) \n    else: \n        for i in range(lst_len): \n            if lst.count(lst[i]) > (lst_len/2): \n                print(\"The majority element is: \",lst[i]) \n                break \n    \ndef Find_Partition_Index(lst): \n    '''\n    Write a python function to find the index at which a given value appears in a list and after that it also checks whether a given value is present before the index.\n    '''\n    lst_len = len(lst) \n    for i in range(lst_len): \n        if lst[i] == lst[lst_len-1]: \n            print(\"The index at which a given value appears is: \",i) \n            print(\"The given value is present before the index: \",i-1) \n            break \n        elif lst[i] > lst[lst_len-1]: \n            print(\"The index at which a given value appears is: \",i) \n            print(\"The given value is not present before the index: \",i-1) \n            break \n            \ndef Count_Elements(lst): \n    '''\n    Write a python function to count the number of elements in a list.\n    '''\n    lst_len = len(lst) \n    count = 0 \n    for i in range(lst_len): \n        count += 1 \n    print(\"The number of elements in a list is: \",count) \n    \ndef Sort_List(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    lst_len = len(lst) \n    for i in range(lst_len): \n        for j in range(i,lst_len): \n            if lst[j] < lst[i]: \n                lst[i],lst[j] = lst[j],lst[i] \n    print(\"The sorted list is: \",lst) \n    \ndef Sort_List_Reverse(lst): \n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    lst_len = len(lst) \n    for i in range(lst_len): \n        for j in range(i,lst_len): \n            if lst[j] > lst[i]: \n                lst[i],lst[j] = lst[j],lst[i] \n    print(\"The sorted list is: \",lst) \n    \ndef Select_List(lst): \n    '''\n    Write a python function to select a given number of elements from a list.\n    '''\n    lst_len = len(lst) \n    for i in range(lst_len): \n        if i >= lst_len-lst[i]: \n            lst[i] = lst[lst_len-lst[i]] \n    print(\"The selected list is: \",lst) \n    \ndef Insert_List(lst): \n    '''\n    Write a python function to insert an element into a list.\n    '''\n    lst_len = len(lst) \n    for i in range(lst_len-1): \n        lst[i] = lst[i+1] \n    lst[lst_len-1] = lst[0] \n    print(\"The modified list is: \",lst) \n    \ndef Find_Duplicate(lst): \n    '''\n    Write a python function to find all the duplicate elements in a list.\n    '''\n    lst_len = len(lst) \n    for i in range(lst_len): \n        if lst.count(lst[i]) > 1: \n            print(\"The duplicate element is: \",lst[i]) \n            break \n    \ndef Find_Duplicate_2(lst): \n    '''\n    Write a python function to find all the duplicate elements in a list.\n    '''\n    lst_len = len(lst) \n    for i in range(lst_len): \n        for j in range(lst_len): \n            if lst[i] == lst[j]: \n                lst[i] = lst[j] \n                break \n    print(\"The duplicate elements are: \",lst) \n    \ndef Find_Maximum(lst): \n    '''\n    Write a python function to find the maximum element of a list.\n    '''\n    lst_len = len(lst) \n    max_num = lst[0] \n    for i in range(lst_len): \n        if max_num < lst[i]: \n            max_num = lst[i] \n    print(\"The maximum element of a list is: \",max_num) \n    \ndef Find_Minimum(lst): \n    '''\n    Write a python function to find the minimum element of a list.\n    '''\n    lst_len = len(lst) \n    min_num = lst[0] \n    for i in range(lst_len): \n        if min_num > lst[i]: \n            min_num = lst[i] \n    print(\"The minimum element of a list is: \",min_num) \n    \ndef Swap",
        "num_ids": 87
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_index = None\n    min_len = sys.maxint\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i < min_len:\n                min_index = i\n                min_len = j-i\n    return min_index, min_len\n",
        "num_ids": 87
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = len(lst) \n    minlen = len(lst[0]) \n    for i in range(length): \n        if len(lst[i]) <= minlen: \n            minlen = len(lst[i]) \n            minidx = i \n    return minidx, minlen\n",
        "num_ids": 80
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min=lst[0]\n    for i in range(len(lst)):\n        if len(lst[i])<len(min):\n            min=lst[i]\n    return min\n",
        "num_ids": 52
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_list = lst[0]\n    for i in lst[1:]:\n        if len(i) < min_len:\n            min_list = i\n            min_len = len(i)\n    print 'Min Length',min_len, min_list\n",
        "num_ids": 80
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = lst[0][1]\n    for sublist in lst:\n        if sublist[1]<min_length:\n            min_length = sublist[1]\n    return min_length\n",
        "num_ids": 54
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for elem in lst:\n        if len(elem) < min_len:\n            min_lst = elem\n            min_len = len(elem)\n    print min_lst\n    return min_lst\n",
        "num_ids": 83
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if not str1:\n        return\n    return re.sub(r'[A-Z]+', '', str1)\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    if not str1:\n        return\n    return re.sub(r'[^a-zA-Z0-9]', '', str1)\ndef replace_word(str1, str2):\n    '''\n    Write a function to replace a word in a string with another word.\n    '''\n    if not str1:\n        return\n    return str1.replace(str2, '')\ndef is_pangram(str1):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    if not str1:\n        return\n    return set(str1.lower()) >= set('abcdefghijklmnopqrstuvwxyz')\ndef split_words(str1):\n    '''\n    Write a function to split a string into words.\n    '''\n    if not str1:\n        return\n    return str1.split()\ndef convert_to_lowercase(str1):\n    '''\n    Write a function to convert a string to lowercase.\n    '''\n    if not str1:\n        return\n    return str1.lower()\ndef concatenate_strings(str1, str2):\n    '''\n    Write a function to concatenate two strings.\n    '''\n    if not str1:\n        return\n    return str1 + str2\ndef remove_vowels(str1):\n    '''\n    Write a function to remove vowels from a string.\n    '''\n    if not str1:\n        return\n    vowels = 'aeiou'\n    return ''.join(i for i in str1 if i not in vowels)\ndef convert_given_string_to_list(str1):\n    '''\n    Write a function to convert a string to list.\n    '''\n    if not str1:\n        return\n    return list(str1)\ndef calculate_average(lst):\n    '''\n    Write a function to calculate average of the given list.\n    '''\n    if not lst:\n        return\n    return sum(lst) / len(lst)\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if not str1:\n        return\n    return str1 == str1[::-1]\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    if not str1:\n        return\n    return str1[::-1]\ndef count_unique_words(str1):\n    '''\n    Write a function to count the number of unique words in a string.\n    '''\n    if not str1:\n        return\n    return len(set(str1.split()))\ndef remove_substring(str1, substr):\n    '''\n    Write a function to remove a substring from a string.\n    '''\n    if not str1:\n        return\n    return str1.replace(substr, '')\ndef count_frequency(str1, str2):\n    '''\n    Write a function to find the frequency of occurrence of a substring in a string.\n    '''\n    if not str1:\n        return\n    return str2.count(str1)\ndef is_anagram(str1, str2):\n    '''\n    Write a function to check whether a string is an anagram or not.\n    '''\n    if not str1:\n        return\n    return sorted(str1.lower()) == sorted(str2.lower())\ndef contains_digits(str1):\n    '''\n    Write a function to check whether a string contains digits or not.\n    '''\n    if not str1:\n        return\n    return bool(re.search(r'\\d', str1))\ndef is_pallindromic(str1):\n    '''\n    Write a function to check whether a string is a pallindromic or not.\n    '''\n    if not str1:\n        return\n    return str1 == str1[::-1]\ndef is_valid_password(str1):\n    '''\n    Write a function to check whether a string is a valid password or not.\n    '''\n    if not str1:\n        return\n    return (len(str1) >= 6 and len(str1) <= 12) and re.match(r'[a-zA-Z0-9]{6,}', str1) and not re.match(r'(.)\\1', str1)\ndef is_alphapet(str1):\n    '''\n    Write a function to check whether a string is a alphapet or not.\n    '''\n    if not str1:\n        return\n    return str1.isalpha()\ndef is_digit(str1):\n    '''\n    Write a function to check whether a string is a digit or not.\n    '''\n    if not str1:\n        return\n    return str1.isdigit()\ndef count_occurences_of_digits(str1):\n    '''\n    Write a function to count the number of occurrence of digits in a string.\n    '''\n    if not str1:\n        return\n    return sum(str1.count(i) for i in '0123456789')\ndef is_numeric(str1):\n    '''\n    Write a function to check whether a string is numeric or not.\n    '''\n    if not str1:\n        return\n    return str1.isdigit()\ndef is_pangram_or_not(str1):\n    '''\n    Write a function to check whether a string is pangram or not.\n    '''\n    if not str1:\n        return\n    return set(str1.lower()) >= set('abcdefghijklmnopqrstuvwxyz')\ndef find_corrections(str1):\n    '''\n    Write a function to find the corrections of a given word.\n    '''\n    if not str1:\n        return\n    return list(set(correct(str1) for correct in (remove_special_characters, remove_uppercase, replace_word)))\ndef correct(str1):\n    '''\n    Write a function to correct a given word.\n    '''\n    if not str1:\n        return\n    for i in range(len(str1)):\n        if not str1[i].isalpha():\n            return str1[:i] + str1[i].upper() + str1[i+1:]\n    return str1\ndef check_pangram(str1):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    if not str1:\n        return\n    return set(str1.lower()) >= set('abcdefghijklmnopqrstuvwxyz')\ndef check_valid_password(str1):\n    '''\n    Write a function to check whether a string is a valid password or not.\n    '''\n    if not str1:\n        return\n    return (len(str1) >= 6 and len(str1) <= 12) and re.match(r'[a-zA-Z0-9]{6,}', str1) and not re.match(r'(.)\\1', str1)\ndef is_valid_pin(str1):\n    '''\n    Write a function to check whether a string is a valid pin or not.\n    '''\n    if not str1:\n        return\n    return (len(str1) == 4 and str1.isdigit()) or (len(str1) == 6 and str1.isdigit())\ndef find_anagrams(str1):\n    '''\n    Write a function to find the anagrams of a given word.\n    '''\n    if not str1:\n        return\n    return set(str1.lower()) - set(str1[0].lower() + str1[1:].lower())\ndef has_alternating_bit(str1):\n    '''\n    Write a function to check whether a string has alternating bit or not.\n    '''\n    if not str1:\n        return",
        "num_ids": 11
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if not str1:\n        return ''\n    res = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            res += str1[i]\n    return res\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if not str1:\n        return ''\n    res = ''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            res += str1[i]\n    return res\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    if not str1:\n        return ''\n    res = ''\n    for i in range(len(str1)):\n        if not str1[i].isdigit():\n            res += str1[i]\n    return res\ndef remove_punctuations(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    if not str1:\n        return ''\n    res = ''\n    for i in range(len(str1)):\n        if not str1[i].isalpha() and not str1[i].isdigit():\n            res += str1[i]\n    return res\ndef replace_characters(str1, from_chr, to_chr):\n    '''\n    Write a function to replace characters in a given string with a replacement string.\n    '''\n    if not str1:\n        return ''\n    res = ''\n    for i in range(len(str1)):\n        if str1[i] == from_chr:\n            res += to_chr\n        else:\n            res += str1[i]\n    return res\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether the given string is a palindrome.\n    '''\n    if not str1:\n        return False\n    return str1 == str1[::-1]\ndef count_vowels(str1):\n    '''\n    Write a function to count the vowels in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in 'aeiouAEIOU':\n            count += 1\n    return count\ndef count_consonants(str1):\n    '''\n    Write a function to count consonants in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if not str1[i] in 'aeiouAEIOU':\n            count += 1\n    return count\ndef count_lowercase_letters(str1):\n    '''\n    Write a function to count lowercase letters in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].islower():\n            count += 1\n    return count\ndef count_uppercase_letters(str1):\n    '''\n    Write a function to count uppercase letters in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            count += 1\n    return count\ndef count_alphabets(str1):\n    '''\n    Write a function to count the alphabets in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            count += 1\n    return count\ndef count_digits(str1):\n    '''\n    Write a function to count the digits in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            count += 1\n    return count\ndef count_lowercase_digits(str1):\n    '''\n    Write a function to count lowercase digits in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isdigit() and str1[i].islower():\n            count += 1\n    return count\ndef count_uppercase_digits(str1):\n    '''\n    Write a function to count uppercase digits in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isdigit() and str1[i].isupper():\n            count += 1\n    return count\ndef count_vowels_consonants(str1):\n    '''\n    Write a function to count the vowels and consonants in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in 'aeiouAEIOU':\n            count += 1\n        elif str1[i] in 'aeiouAEIOU':\n            count += 1\n    return count\ndef count_lowercase_vowels(str1):\n    '''\n    Write a function to count lowercase vowels in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].islower() and str1[i] in 'aeiouAEIOU':\n            count += 1\n    return count\ndef count_uppercase_vowels(str1):\n    '''\n    Write a function to count uppercase vowels in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].isupper() and str1[i] in 'aeiouAEIOU':\n            count += 1\n    return count\ndef count_lowercase_consonants(str1):\n    '''\n    Write a function to count lowercase consonants in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].islower() and str1[i] not in 'aeiouAEIOU':\n            count += 1\n    return count\ndef count_uppercase_consonants(str1):\n    '''\n    Write a function to count uppercase consonants in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].isupper() and str1[i] not in 'aeiouAEIOU':\n            count += 1\n    return count\ndef count_lowercase_alphabets(str1):\n    '''\n    Write a function to count lowercase alphabets in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].islower():\n            count += 1\n    return count\ndef count_uppercase_alphabets(str1):\n    '''\n    Write a function to count uppercase alphabets in a given string.\n    '''\n    if not str1:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].isupper():\n            count += 1\n    return count\ndef count_lowercase_alphanumerics(str1):\n    '''\n    Write a function to count lowercase alphanumerics in a given string.\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    newstr = \"\"\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].isupper():\n            newstr = newstr + str1[i]\n    return newstr\n",
        "num_ids": 59
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str2 = str2.replace(str1[i], '')\n    return str2\ndef word_count(str2):\n    '''\n    Write a function that returns a dictionary where the keys are words in a given string and the values are the number of times those words appear in the string.\n    '''\n    res = {}\n    str2 = str2.split(' ')\n    for word in str2:\n        res[word] = res.get(word, 0) + 1\n    return res\ndef is_pangram(str1):\n    '''\n    Write a function that takes a string and returns True if it is a pangram and False otherwise.\n    A pangram is a sentence that contains all the letters of the English alphabet at least once.\n    '''\n    str2 = remove_uppercase(str1)\n    for i in range(len(str2)):\n        if ord(str2[i]) < 65 or ord(str2[i]) > 90:\n            str2 = str2.replace(str2[i], '')\n    if len(str2) == 0:\n        return True\n    return False\ndef is_palindrome(str1):\n    '''\n    Write a function that returns True if the given string is a palindrome and False otherwise.\n    A palindrome is a string that reads the same backwards and forwards. A palindrome does not need to be limited to just dictionary words.\n    '''\n    if len(str1) == 0:\n        return True\n    str2 = ''\n    for i in range(len(str1)):\n        str2 = str1[len(str1)-i-1] + str2\n    if str1 == str2:\n        return True\n    return False\ndef is_anagram(str1, str2):\n    '''\n    Write a function that returns True if the two given strings are anagrams of each other and False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = remove_uppercase(str1)\n    str2 = remove_uppercase(str2)\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    if str1 == str2:\n        return True\n    return False\ndef find_anagrams(str1, str2):\n    '''\n    Write a function that returns a list of anagrams that are in the first string and not in the second string.\n    '''\n    res = []\n    str1 = remove_uppercase(str1)\n    str2 = remove_uppercase(str2)\n    if len(str1)!= len(str2):\n        return res\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    for i in range(len(str1)):\n        if str1[i] in str2:\n            str1 = str1[:i] + str1[i+1:]\n            str2 = str2[:str2.index(str1[i])] + str2[str2.index(str1[i])+1:]\n    return str1\ndef first_non_repeating_letter(str1):\n    '''\n    Write a function that returns the first character that occurs only once in a string. If all characters occur only once, the function should return '_'.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return '_'\ndef count_vowels(str1):\n    '''\n    Write a function that returns the number of vowels in a string.\n    '''\n    count = 0\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] in 'aeiou':\n            count += 1\n    return count\ndef split_alphanumeric(str1):\n    '''\n    Write a function that returns a list of all the words that are alphanumeric.\n    '''\n    res = []\n    str1 = remove_uppercase(str1)\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i].isalnum():\n            res.append(str1[i])\n    return res\ndef find_most_common_word(str1):\n    '''\n    Write a function that returns the most common word in a string. The function should return '_' if there are no words that occur more than once.\n    '''\n    res = {}\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] in res:\n            res[str1[i]] += 1\n        else:\n            res[str1[i]] = 1\n    max1 = 0\n    for word in res.keys():\n        if res[word] > max1:\n            max1 = res[word]\n            most_common_word = word\n    return most_common_word\ndef is_valid_phone_number(str1):\n    '''\n    Write a function that returns True if the given string contains a valid phone number and False otherwise.\n    A valid phone number has exactly 8 digits and starts with the country code + ''.\n    '''\n    pattern = re.compile('^\\d{8}$')\n    if pattern.match(str1):\n        return True\n    return False\ndef is_valid_email_address(str1):\n    '''\n    Write a function that returns True if the given string is a valid email address and False otherwise.\n    '''\n    pattern = re.compile('^[a-zA-Z][a-zA-Z0-9_\\.\\-\\+]*@[a-zA-Z][a-zA-Z0-9_\\.\\-\\+]+\\.[a-zA-Z]{2,3}$')\n    if pattern.match(str1):\n        return True\n    return False\ndef is_valid_password(str1):\n    '''\n    Write a function that returns True if the given string contains a valid password and False otherwise.\n    A valid password is a string that meets the following criteria:\n    - It must be at least 8 characters long\n    - It must contain at least one lowercase letter\n    - It must contain at least one uppercase letter\n    - It must contain at least one digit\n    - It must not contain three repeating characters in a row\n    '''\n    pattern = re.compile('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$')\n    if pattern.match(str1):\n        return True\n    return False\ndef is_valid_zipcode(str1):\n    '''\n    Write a function that returns True if the given string is a valid five-digit zip code and False otherwise.\n    '''\n    pattern = re.compile('^\\d{5}$')\n    if pattern.match(str1):\n        return True\n    return False\ndef is_valid_SSN(str1):\n    '''\n    Write a function that returns True if the given string is a valid Social Security Number and False otherwise.\n    '''\n    pattern = re.compile('^\\d{3}-\\d{2}-\\d{4}$')\n    if pattern.match(str1):\n        return True\n    return False\ndef get_unique_words(str1):\n    '''\n    Write a function that returns a list of all the words that occur in a string and have no duplicates.\n    '''\n    str1 = str1.split(' ')\n    res = []\n    for word in str1:\n        if word not in res:\n            res.append(word)\n    return res\ndef get_nth_factorial(n):\n    '''\n    Write a function that returns the nth factorial.\n    '''\n    res = 1\n    for i in range(n):\n        res *= (i+1)\n    return res\ndef is_balanced(str1):\n    '''\n    Write a function that returns True if the given string is balanced and False otherwise.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if st",
        "num_ids": 23
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    upper=False\n    str2=''\n    for c in str1:\n        if c.isupper() and upper==False:\n            str2+=c\n        elif c.isupper() and upper==True:\n            str2+=' '+c\n        else:\n            str2+=c\n        upper=not(upper)\n    return str2\n",
        "num_ids": 86
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\ndef upper_case_first_letter(str1):\n    '''\n    Write a function that capitalizes the first letter of a word.\n    '''\n    return str1.capitalize()\ndef add_space(str1):\n    '''\n    Write a function that returns the string with any duplicate characters removed and\n    then add a space between every two characters.\n    '''\n    return''.join(str1.split())\ndef add_comma(str1):\n    '''\n    Write a function that returns the string with all vowels removed and then add a comma\n    at the end of the string.\n    '''\n    vowels = ('a','e','i','o','u','A','E','I','O','U')\n    for i in str1:\n        if i in vowels:\n            str1 = str1.replace(i,'')\n    return str1 + ','\ndef add_comma_and_space(str1):\n    '''\n    Write a function that returns the string with all vowels removed and then add a comma\n    and a space at the end of the string.\n    '''\n    vowels = ('a','e','i','o','u','A','E','I','O','U')\n    for i in str1:\n        if i in vowels:\n            str1 = str1.replace(i,'')\n    return str1 +'' + ','\ndef replace_string(str1):\n    '''\n    Write a function to replace the given word/phrase in a given string with another word/phrase\n    and return the modified string.\n    '''\n    return str1.replace('mahabharata','Bansuri')\ndef add_underscore(str1):\n    '''\n    Write a function that returns the string with all vowels removed and then add an underscore\n    between each two consecutive vowels.\n    '''\n    vowels = ('a','e','i','o','u','A','E','I','O','U')\n    for i in str1:\n        if i in vowels:\n            str1 = str1.replace(i,'_')\n    return str1\ndef add_slash_between_each_word(str1):\n    '''\n    Write a function that returns the string with all vowels removed and then add a slash\n    between each word.\n    '''\n    return re.sub(r'\\s+', r' / ', str1)\ndef add_new_line(str1):\n    '''\n    Write a function that returns the string with all vowels removed and then add a new line\n    at the end of the string.\n    '''\n    return str1 + '\\n'\ndef remove_html_tags(str1):\n    '''\n    Write a function that returns the string with all HTML tags removed.\n    '''\n    return re.sub(r'<[^>]*>', '', str1)\ndef remove_extra_spaces(str1):\n    '''\n    Write a function that returns a string with all extra spaces removed from the beginning\n    and end of the string.\n    '''\n    return re.sub(r'^\\s+', '', str1)\ndef remove_extra_spaces_between_punctuation(str1):\n    '''\n    Write a function that returns a string with all extra spaces between the punctuation removed\n    from the beginning and end of the string.\n    '''\n    return re.sub(r'[,:;@$]+\\s+','', str1)\ndef remove_characters_from_string(str1,characters):\n    '''\n    Write a function that returns a string with all the characters in the given list removed\n    from the string.\n    '''\n    return ''.join([i for i in str1 if i not in characters])\ndef remove_digits(str1):\n    '''\n    Write a function that returns a string with all the digits in the given string removed\n    from the string.\n    '''\n    return re.sub(r'\\d+', '', str1)\ndef remove_numbers(str1):\n    '''\n    Write a function that returns a string with all the numbers in the given string removed\n    from the string.\n    '''\n    return re.sub(r'[0-9]+', '', str1)\ndef remove_double_spaces(str1):\n    '''\n    Write a function that returns a string with all the double spaces removed from the string.\n    '''\n    return re.sub(r'\\s+','', str1)\ndef remove_digits_and_punctuation(str1):\n    '''\n    Write a function that returns a string with all the digits and punctuation in the given\n    string removed from the string.\n    '''\n    return re.sub(r'[,:;@$]+', '', str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function that returns a string with all the lowercase characters in the given\n    string removed from the string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\ndef remove_all_spaces(str1):\n    '''\n    Write a function that returns a string with all the spaces in the given string removed\n    from the string.\n    '''\n    return re.sub(r'\\s+', '', str1)\ndef remove_all_spaces_and_newline(str1):\n    '''\n    Write a function that returns a string with all the spaces and newline in the given string\n    removed from the string.\n    '''\n    return re.sub(r'[\\n\\s]+', '', str1)\ndef remove_first_characters(str1,n):\n    '''\n    Write a function that returns a string with the first n characters of the given string\n    removed from the string.\n    '''\n    return str1[n:]\ndef remove_last_characters(str1,n):\n    '''\n    Write a function that returns a string with the last n characters of the given string\n    removed from the string.\n    '''\n    return str1[:-n]\ndef replace_string_with_another(str1,str2):\n    '''\n    Write a function that returns a string with the characters in the given string replaced\n    by the characters in the given string.\n    '''\n    return str1.replace(str2,'')\ndef replace_nth_occurence(str1,str2,n):\n    '''\n    Write a function that returns a string with the nth occurence of the given string replaced\n    by the given string.\n    '''\n    return str1.replace(str2[n],'',1)\ndef replace_nth_occurence_with_given_string(str1,str2,n):\n    '''\n    Write a function that returns a string with the nth occurence of the given string replaced\n    by the given string.\n    '''\n    return str1[:n] + str2 + str1[n+1:]\ndef replace_nth_occurence_with_another_string(str1,str2,n):\n    '''\n    Write a function that returns a string with the nth occurence of the given string replaced\n    by the given string.\n    '''\n    return re.sub(r'(.)'+str2+r'(.)',r'\\1'+str2+r'\\2',str1)\ndef replace_nth_occurence_with_another_string_with_wildcards(str1,str2,n):\n    '''\n    Write a function that returns a string with the nth occurence of the given string replaced\n    by the given string.\n    '''\n    return re.sub(r'(.)'+str2+r'(.)',r'\\1'+str2+r'\\2',str1,1)\ndef replace_first_occurence_with_another_string(str1,str2):\n    '''\n    Write a function that returns a string with the first occurence of the given string replaced\n    by the given string.\n    '''\n    return re.sub(r'(.)'+str2+r'(.)',r'\\1'+str2+r'\\2',str1)\ndef replace_first_occurence_with_another_string_with_wildcards(str1,st",
        "num_ids": 64
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = str1\n    str2 = re.findall(r'[A-Z]', result)\n    str2 = str2[::-1]\n    str3 = ''.join(str2)\n    result = result.replace(str3, '')\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return re.sub('[0-9]', '', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return re.sub('[^\\w\\s]', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    match_object = re.search(r'[A-Z]', str1)\n    if match_object:\n        return str1[:match_object.start()] + str1[match_object.end():]\n    else:\n        return str1\n",
        "num_ids": 64
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(re.findall(r'[a-z]', str1)).lower()\n",
        "num_ids": 27
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[i][0] for i in range(len(lst))]\n",
        "num_ids": 24
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n    \n    \ndef main():\n    # Write your code here\n    \n    # Test your function\n    print(Extract([[1, 2, 3], [4, 5], [6]]))\n    \n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 80
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    out = [] \n    for i in lst: \n        out.append(i[0]) \n    return out\n",
        "num_ids": 32
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sub[0] for sub in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n    \ndef main():\n    lst = [[1,2,3], [4,5,6], [7,8,9]]\n    print(Extract(lst))\n",
        "num_ids": 58
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [d[0] for d in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        print i[0]\n",
        "num_ids": 17
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[0])\n    return lst1\ndef Extract2(lst): \n    '''\n    Write a python function to get the second element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[1])\n    return lst1\ndef Extract3(lst): \n    '''\n    Write a python function to get the third element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[2])\n    return lst1\ndef Extract4(lst): \n    '''\n    Write a python function to get the fourth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[3])\n    return lst1\ndef Extract5(lst): \n    '''\n    Write a python function to get the fifth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[4])\n    return lst1\ndef Extract6(lst): \n    '''\n    Write a python function to get the sixth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[5])\n    return lst1\ndef Extract7(lst): \n    '''\n    Write a python function to get the seventh element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[6])\n    return lst1\ndef Extract8(lst): \n    '''\n    Write a python function to get the eighth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[7])\n    return lst1\ndef Extract9(lst): \n    '''\n    Write a python function to get the ninth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[8])\n    return lst1\ndef Extract10(lst): \n    '''\n    Write a python function to get the tenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[9])\n    return lst1\ndef Extract11(lst): \n    '''\n    Write a python function to get the eleventh element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[10])\n    return lst1\ndef Extract12(lst): \n    '''\n    Write a python function to get the twelfth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[11])\n    return lst1\ndef Extract13(lst): \n    '''\n    Write a python function to get the thirteenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[12])\n    return lst1\ndef Extract14(lst): \n    '''\n    Write a python function to get the fourteenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[13])\n    return lst1\ndef Extract15(lst): \n    '''\n    Write a python function to get the fifteenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[14])\n    return lst1\ndef Extract16(lst): \n    '''\n    Write a python function to get the sixteenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[15])\n    return lst1\ndef Extract17(lst): \n    '''\n    Write a python function to get the seventeenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[16])\n    return lst1\ndef Extract18(lst): \n    '''\n    Write a python function to get the eighteenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[17])\n    return lst1\ndef Extract19(lst): \n    '''\n    Write a python function to get the nineteenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[18])\n    return lst1\ndef Extract20(lst): \n    '''\n    Write a python function to get the twentieth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[19])\n    return lst1\ndef Extract21(lst): \n    '''\n    Write a python function to get the eleventh element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[20])\n    return lst1\ndef Extract22(lst): \n    '''\n    Write a python function to get the twelfth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[21])\n    return lst1\ndef Extract23(lst): \n    '''\n    Write a python function to get the thirteenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[22])\n    return lst1\ndef Extract24(lst): \n    '''\n    Write a python function to get the fourteenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[23])\n    return lst1\ndef Extract25(lst): \n    '''\n    Write a python function to get the fifteenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[24])\n    return lst1\ndef Extract26(lst): \n    '''\n    Write a python function to get the sixteenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[25])\n    return lst1\ndef Extract27(lst): \n    '''\n    Write a python function to get the seventeenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[26])\n    return lst1\ndef Extract28(lst): \n    '''\n    Write a python function to get the eighteenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[27])\n    return lst1\ndef Extract29(lst): \n    '''\n    Write a python function to get the nineteenth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[28])\n    return lst1\ndef Extract30(lst): \n    '''\n    Write a python function to get the twentieth element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i[29])\n    return lst1\ndef Extract31(lst): \n    '''\n    Write a python function to get the eleventh element of each sublist.\n    '''\n    lst1=[]\n    for i in lst:\n        lst",
        "num_ids": 20
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst] \n",
        "num_ids": 17
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.islower():\n            count += 1\n    return count\n    \ndef upper_lower_ctr(str):\n    '''\n    Write a python function to count the upper case characters and lower case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper() or i.islower():\n            count += 1\n    return count\n    \ndef alphabet_size(str):\n    '''\n    Write a python function to count the total size of alphabets in a given string.\n    '''\n    alpha_size = 0\n    for i in str:\n        if i.isalpha():\n            alpha_size += 1\n    return alpha_size\n    \ndef alphanumeric_size(str):\n    '''\n    Write a python function to count the total size of alphanumeric characters in a given string.\n    '''\n    alpha_size = 0\n    for i in str:\n        if i.isalnum():\n            alpha_size += 1\n    return alpha_size\n    \ndef numeric_size(str):\n    '''\n    Write a python function to count the total size of numeric characters in a given string.\n    '''\n    num_size = 0\n    for i in str:\n        if i.isnumeric():\n            num_size += 1\n    return num_size\n    \ndef alphanumeric_range(str):\n    '''\n    Write a python function to count the range of alphanumeric characters in a given string.\n    '''\n    min = int(ord('0'))\n    max = int(ord('9'))\n    for i in str:\n        if i.isalpha():\n            if ord(i) > max:\n                max = ord(i)\n            elif ord(i) < min:\n                min = ord(i)\n    return max - min\n    \ndef reverse(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return str[::-1]\n    \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef nCr(n,r):\n    '''\n    Write a python function to compute the nCr value.\n    '''\n    return factorial(n)/(factorial(r)*factorial(n-r))\n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if str[::-1] == str:\n        return True\n    else:\n        return False\n    \ndef count_non_repeating(str):\n    '''\n    Write a python function to count the number of non repeating characters in a given string.\n    '''\n    temp = {}\n    for i in str:\n        if i not in temp:\n            temp[i] = 1\n        else:\n            temp[i] += 1\n    count = 0\n    for i in temp:\n        if temp[i] == 1:\n            count += 1\n    return count\n    \ndef count_non_repeating_2(str):\n    '''\n    Write a python function to count the number of non repeating characters in a given string.\n    '''\n    return len([i for i in str if str.count(i) == 1])\n    \ndef count_non_repeating_3(str):\n    '''\n    Write a python function to count the number of non repeating characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if str.count(i) == 1:\n            count += 1\n    return count\n    \ndef count_repeating(str):\n    '''\n    Write a python function to count the number of repeating characters in a given string.\n    '''\n    temp = {}\n    for i in str:\n        if i not in temp:\n            temp[i] = 1\n        else:\n            temp[i] += 1\n    count = 0\n    for i in temp:\n        if temp[i] > 1:\n            count += 1\n    return count\n    \ndef count_repeating_2(str):\n    '''\n    Write a python function to count the number of repeating characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if str.count(i) > 1:\n            count += 1\n    return count\n    \ndef count_repeating_3(str):\n    '''\n    Write a python function to count the number of repeating characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if str.count(i) > 1:\n            count += 1\n    return count\n    \ndef is_anagram(str1,str2):\n    '''\n    Write a python function to check whether two given strings are anagram or not.\n    '''\n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n    \ndef max_occuring_char(str):\n    '''\n    Write a python function to find the maximum occuring character in a given string.\n    '''\n    temp = {}\n    for i in str:\n        if i not in temp:\n            temp[i] = 1\n        else:\n            temp[i] += 1\n    max = 0\n    for i in temp:\n        if temp[i] > max:\n            max = temp[i]\n    for i in temp:\n        if temp[i] == max:\n            return i\n            \ndef max_occuring_char_2(str):\n    '''\n    Write a python function to find the maximum occuring character in a given string.\n    '''\n    temp = {}\n    for i in str:\n        if i not in temp:\n            temp[i] = 1\n        else:\n            temp[i] += 1\n    max = 0\n    for i in temp:\n        if temp[i] > max:\n            max = temp[i]\n            max_char = i\n    return max_char\n    \ndef is_anagram_2(str1,str2):\n    '''\n    Write a python function to check whether two given strings are anagram or not.\n    '''\n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n    \ndef max_occuring_char_3(str):\n    '''\n    Write a python function to find the maximum occuring character in a given string.\n    '''\n    temp = {}\n    for i in str:\n        if i not in temp:\n            temp[i] = 1\n        else:\n            temp[i] += 1\n    max = 0\n    for i in temp:\n        if temp[i] > max:\n            max = temp[i]\n            max_char = i\n    return max_char\n    \ndef is_anagram_3(str1,str2):\n    '''\n    Write a python function to check whether two given strings are anagram or not.\n    '''\n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n    \ndef is_anagram_4(str1,str2):\n    '''\n    Write a python function to check whether two given strings are anagram or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    for i in str1:\n        if i not in str2:\n            return False\n    for i in str2:\n        if i not in str1:\n            return False\n    return True\n    \ndef is_anagram_5(str1,str2):\n    '''\n    Write a python function to check whether two given strings are anagram or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    count = {}\n    for i in str1:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i",
        "num_ids": 57
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if(ch.isupper()):\n            count = count + 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for char in str:\n        if char.isupper():\n            counter = counter + 1\n    return counter\n",
        "num_ids": 33
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for i in str:\n        if i.isupper():\n            upper += 1\n    print(\"Number of upper case characters is: \", upper)\n",
        "num_ids": 41
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n",
        "num_ids": 18
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upc = 0\n    for c in str:\n        if c.isupper():\n            upc += 1\n    return upc\n",
        "num_ids": 34
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count + 1\n    print \"Upper case count is: \", count\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for c in str:\n        if c.isupper():\n            upper_ctr = upper_ctr + 1\n    return upper_ctr\n",
        "num_ids": 41
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return reduce(lambda x,y:x+[i + [y] for i in x], list1, [[]])\n",
        "num_ids": 31
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 2:\n        return list1\n",
        "num_ids": 18
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    output = []\n    #base case\n    if len(list1) == 1:\n        return [list1]\n",
        "num_ids": 30
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==0:\n        return []\n    if len(list1)==1:\n        return [list1]\n    else:\n        res=[]\n        for i in range(1,len(list1)):\n            for j in combinations_list(list1[i:]):\n                res.append([list1[0]]+j)\n        return res\ndef combinations(list1, n):\n    '''\n    Write a function to find all possible combinations of the elements of a given list of size n.\n    '''\n    if len(list1)==0:\n        return []\n    if len(list1)==1:\n        return [list1]\n    else:\n        res=[]\n        for i in range(1,len(list1)):\n            for j in combinations(list1[i:], n-1):\n                res.append([list1[0]]+j)\n        return res\ndef powerset(list1):\n    '''\n    Write a function to find all the subsets of a set.\n    '''\n    if len(list1)==0:\n        return [[]]\n    if len(list1)==1:\n        return [list1,[]]\n    else:\n        res=[]\n        for i in powerset(list1[1:]):\n            res.append([list1[0]]+i)\n        for i in powerset(list1[1:]):\n            res.append(i)\n        return res\ndef permutations(list1):\n    '''\n    Write a function to find all the permutations of a given list.\n    '''\n    if len(list1)==0:\n        return [[]]\n    if len(list1)==1:\n        return [list1]\n    else:\n        res=[]\n        for i in permutations(list1[1:]):\n            for j in range(len(i)+1):\n                res.append([list1[0]]+i[:j]+i[j+1:])\n        return res\ndef insert(list1, list2):\n    '''\n    Write a function to insert the second list into the first list.\n    '''\n    if len(list1)==0:\n        return [list2]\n    if len(list2)==0:\n        return list1\n    if len(list2)==1:\n        if list1[0]<=list2[0]:\n            return [list2[0]]+list1\n        else:\n            return list1+[list2[0]]\n    res=[]\n    for i in range(len(list1)):\n        if list1[i]<=list2[0]:\n            res.append(list1[i])\n            res+=list2[1:]\n        else:\n            res.append(list2[0])\n            res+=list1[i:]\n            break\n    return res\ndef insert_sort(list1):\n    '''\n    Write a function to sort a list using the insert sort algorithm.\n    '''\n    if len(list1)<2:\n        return list1\n    else:\n        res=[]\n        for i in range(1,len(list1)):\n            res.append(list1[i])\n            j=i\n            while j>0 and list1[j-1]>list1[j]:\n                list1[j],list1[j-1]=list1[j-1],list1[j]\n                j-=1\n            res+=list1[:j]\n        return res\ndef radix_sort(list1):\n    '''\n    Write a function to sort a list using the radix sort algorithm.\n    '''\n    if len(list1)<2:\n        return list1\n    if max(list1)==min(list1):\n        return list1\n    max1=max(list1)\n    len1=1\n    while max1/len1>=1:\n        count=[[] for i in range(10)]\n        for i in list1:\n            count[(i//len1)%10].append(i)\n        list1=[i for i in count if i!=[]]\n        len1*=10\n    return list1\ndef bubble_sort(list1):\n    '''\n    Write a function to sort a list using the bubble sort algorithm.\n    '''\n    if len(list1)<2:\n        return list1\n    else:\n        for i in range(1,len(list1)):\n            for j in range(len(list1)-i):\n                if list1[j]>list1[j+1]:\n                    list1[j],list1[j+1]=list1[j+1],list1[j]\n        return list1\ndef quick_sort(list1):\n    '''\n    Write a function to sort a list using the quick sort algorithm.\n    '''\n    if len(list1)<2:\n        return list1\n    else:\n        pivot=list1[0]\n        left=[i for i in list1 if i<pivot]\n        right=[i for i in list1[1:] if i>=pivot]\n        return quick_sort(left)+[pivot]+quick_sort(right)\ndef binary_search(list1, target):\n    '''\n    Write a function to search a list for a target value using binary search.\n    '''\n    if len(list1)==0:\n        return False\n    if len(list1)==1:\n        return target==list1[0]\n    else:\n        mid=len(list1)//2\n        if target==list1[mid]:\n            return True\n        else:\n            if target>list1[mid]:\n                return binary_search(list1[mid:], target)\n            else:\n                return binary_search(list1[:mid], target)\ndef selection_sort(list1):\n    '''\n    Write a function to sort a list using the selection sort algorithm.\n    '''\n    if len(list1)<2:\n        return list1\n    else:\n        for i in range(len(list1)-1):\n            min1=i\n            for j in range(i+1,len(list1)):\n                if list1[j]<list1[min1]:\n                    min1=j\n            list1[i],list1[min1]=list1[min1],list1[i]\n        return list1\ndef insertion_sort(list1):\n    '''\n    Write a function to sort a list using the insertion sort algorithm.\n    '''\n    if len(list1)<2:\n        return list1\n    else:\n        for i in range(1,len(list1)):\n            current=list1[i]\n            j=i-1\n            while j>=0 and current<list1[j]:\n                list1[j+1]=list1[j]\n                j-=1\n            list1[j+1]=current\n        return list1\ndef shell_sort(list1):\n    '''\n    Write a function to sort a list using the shell sort algorithm.\n    '''\n    if len(list1)<2:\n        return list1\n    else:\n        d=len(list1)//2\n        while d>0:\n            for i in range(d, len(list1)):\n                current=list1[i]\n                j=i\n                while j>=d and current<list1[j-d]:\n                    list1[j]=list1[j-d]\n                    j-=d\n                list1[j]=current\n            d=d//2\n        return list1\ndef merge_sort(list1):\n    '''\n    Write a function to sort a list using the merge sort algorithm.\n    '''\n    if len(list1)<2:\n        return list1\n    else:\n        mid=len(list1)//2\n        left=merge_sort(list1[:mid])\n        right=merge_sort(list1[mid:])\n        res=[]\n        while len(left)>0 or len(right)>0:\n            if len(left)>0 and len(right)>0:\n                if left[0]<=right[0]:\n                    res.append(left.pop(0))\n                else:\n                    res.append(right.pop(0))\n            elif len(left)>0:\n                res.append(left.po",
        "num_ids": 162
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(1,len(list1)+1):\n        list2 += itertools.combinations(list1,i)\n    return list2\n",
        "num_ids": 46
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) == 1:\n        return list1\n    else:\n        for i in range(len(list1)):\n            result += list1[i]\n            if i < len(list1)-1:\n                result += combinations_list(list1[i+1:])\n    return result\n",
        "num_ids": 81
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if (i!=j) and (list1[i] + list1[j] not in result):\n                result.append(list1[i] + list1[j])\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = [[]]\n    for ele in list1:\n        new_res = []\n        for sub_list in res:\n            for i in range(len(sub_list) + 1):\n                new_res.append(sub_list[:i] + [ele] + sub_list[i:])\n        res = new_res\n    return res\n",
        "num_ids": 86
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result_list = []\n    for i in range(0, len(list1)):\n        temp_list = list1[i+1:]\n        for j in range(0, len(temp_list)):\n            temp_list[j] = list1[i]\n            result_list.append(temp_list)\n    return result_list\n",
        "num_ids": 85
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        combinations = []\n        for i in range(1, len(list1)):\n            current_list = list1[:i]\n            for j in combinations_list(list1[i:]):\n                combinations.append(current_list + j)\n        return combinations\n",
        "num_ids": 105
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max = arr[0]\n    global_max_list = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            global_max = max(global_max, arr[i])\n        global_max_list.append(max(arr[i], arr[i]*global_max_list[i-1]))\n    return max(global_max_list)\n",
        "num_ids": 108
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_ending_here = max_so_far = arr[0]\n    for i in xrange(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "num_ids": 103
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr is None or len(arr) == 0:\n        return None\n",
        "num_ids": 20
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max = arr[0]\n    local_max = arr[0]\n    global_min = arr[0]\n    local_min = arr[0]\n",
        "num_ids": 42
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    return max(max_subarray_product(arr[1:]), max_subarray_product(arr[:-1]))\n",
        "num_ids": 49
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod, min_prod = arr[0], arr[0]\n    curr_prod = arr[0]\n    for i in range(1, len(arr)):\n        curr_prod = max(arr[i], arr[i] * curr_prod, arr[i] * min_prod)\n        min_prod = min(arr[i], arr[i] * min_prod, arr[i] * curr_prod)\n        max_prod = max(max_prod, curr_prod)\n    return max_prod\n",
        "num_ids": 144
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n==1:\n        return arr[0]\n    elif n==2:\n        return max(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in xrange(1,n):\n        max_ending_here = max_ending_here*arr[i]\n        max_so_far = max(max_so_far,max_ending_here)\n        if arr[i]<0:\n            max_ending_here = arr[i]\n    return max_so_far\n",
        "num_ids": 145
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    max_so_far = max_ending_here = arr[0]\n    for i in xrange(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "num_ids": 99
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        val = list(dict.values())[0]\n        for item in dict:\n            if val!= dict[item]:\n                return False\n        return True\n",
        "num_ids": 58
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    if len(set(dict.values())) == 1:\n        return True\n    return False\n    \n    \ndef main():\n    print(check_value({1:1, 2:2}))\n    print(check_value({1:1, 2:2, 3:3}))\n    print(check_value({1:1, 2:3, 3:3}))\n",
        "num_ids": 94
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k in dict:\n        if dict[k]!= n:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if v!= v[0]:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) <= 1:\n        return True\n    \n    # check if the first key is same as the rest\n    if n == 0:\n        return True\n    \n    if dict[n] == dict[0]:\n        return check_value(dict, n-1)\n    else:\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    first = dict.values()[0]\n    for key, val in dict.items():\n        if val!= first:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not n in dict.values():\n        return False\n    return True\n",
        "num_ids": 20
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if not(dict[key] == n):\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    # If number of keys is not equal to 1 then return false\n    if(len(dict)!= 1):\n        return False\n    \n    # Check if value of first key in dictionary is same as value of other keys\n    for i in range(1, len(dict)):\n        if(dict[list(dict.keys())[0]]!= dict[list(dict.keys())[i]]):\n            return False\n    return True\n    \ndef check_key(dict, n):\n    '''\n    Write a function to check if all keys are different in a dictionary.\n    '''\n    \n    # If number of keys is not equal to 1 then return false\n    if(len(dict)!= 1):\n        return False\n    \n    # Check if value of first key in dictionary is same as value of other keys\n    for i in range(1, len(dict)):\n        if(dict[list(dict.keys())[0]] == dict[list(dict.keys())[i]]):\n            return False\n    return True\n",
        "num_ids": 104
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    s = dict.values()\n    if len(s) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    out = {}\n    for k,v in dict1.items():\n        if v!= []:\n            out[k] = v\n    return out\n",
        "num_ids": 39
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # if dict is not empty\n    if len(dict1) > 0:\n        # copy the keys to new list\n        new_list = []\n        for key in dict1.keys():\n            if len(dict1[key]) > 0:\n                new_list.append(key)\n        # return the new list\n        return new_list\n    # else return empty list\n    else:\n        return []\n    \ndef dict_from_list(list1):\n    '''\n    Write a function to return a dictionary from a given list of keys and values.\n    '''\n    # initilize dictionary\n    dict1 = {}\n    # iterate over the list\n    for key, val in zip(list1[::2], list1[1::2]):\n        # update the dictionary\n        dict1[key] = val\n    # return the dictionary\n    return dict1\n    \ndef group_by(dict1):\n    '''\n    Write a function to group a dictionary of objects by their values.\n    '''\n    # if dictionary is not empty\n    if len(dict1) > 0:\n        # for each key, get the list of values\n        for key, val in dict1.items():\n            # if not found, add key to new list\n            if key not in dict1.values():\n                dict1[key] = []\n            # append the values to the new list\n            dict1[key].append(val)\n        # return the new dictionary\n        return dict1\n    # else return empty dictionary\n    else:\n        return {}\n    \ndef diff_lists(list1, list2):\n    '''\n    Write a function to return the difference between two lists.\n    '''\n    # if both lists are not empty\n    if len(list1) > 0 and len(list2) > 0:\n        # return the difference between lists\n        return list(set(list1) - set(list2))\n    # else return empty list\n    else:\n        return []\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    # if list is not empty\n    if len(list1) > 0:\n        # create new list\n        new_list = []\n        # for each item in list\n        for val in list1:\n            # if not already in new list\n            if val not in new_list:\n                # add to new list\n                new_list.append(val)\n        # return new list\n        return new_list\n    # else return empty list\n    else:\n        return []\n    \ndef nth_index(list1, val):\n    '''\n    Write a function to return the nth index of a value in a given list.\n    '''\n    # if list is not empty\n    if len(list1) > 0:\n        # for each item in list\n        for i, val1 in enumerate(list1):\n            # if value is equal to val\n            if val1 == val:\n                # return the index\n                return i\n        # else return -1\n        return -1\n    # else return empty list\n    else:\n        return []\n        \ndef add_to_list(list1, val):\n    '''\n    Write a function to add a val to the end of a given list.\n    '''\n    # if list is not empty\n    if len(list1) > 0:\n        # add val to the end of list\n        list1.append(val)\n        # return the new list\n        return list1\n    # else return empty list\n    else:\n        return []\n    \ndef find_nth(list1, val):\n    '''\n    Write a function to return the nth item of a list.\n    '''\n    # if list is not empty\n    if len(list1) > 0:\n        # get the nth item\n        return list1[len(list1) - (val - 1)]\n    # else return empty list\n    else:\n        return []\n    \ndef del_nth(list1, val):\n    '''\n    Write a function to delete the nth item of a list.\n    '''\n    # if list is not empty\n    if len(list1) > 0:\n        # delete the nth item\n        list1.pop(val - 1)\n        # return the new list\n        return list1\n    # else return empty list\n    else:\n        return []\n    \ndef del_nth_item(list1, val):\n    '''\n    Write a function to delete the nth item of a list, and return the new list.\n    '''\n    # if list is not empty\n    if len(list1) > 0:\n        # for i in range\n        for i in range(val - 1, len(list1)):\n            # get the item to delete\n            item = list1[i]\n            # delete the item\n            del list1[i]\n            # return the new list\n            return list1\n    # else return empty list\n    else:\n        return []\n    \ndef reverse_list(list1):\n    '''\n    Write a function to return the reverse of a given list.\n    '''\n    # if list is not empty\n    if len(list1) > 0:\n        # create a new list\n        new_list = []\n        # for each item in list\n        for item in list1:\n            # reverse the item\n            item = item[::-1]\n            # add item to new list\n            new_list.append(item)\n        # return new list\n        return new_list\n    # else return empty list\n    else:\n        return []\n    \ndef sum_list(list1):\n    '''\n    Write a function to return the sum of all items in a list.\n    '''\n    # if list is not empty\n    if len(list1) > 0:\n        # add each item in list to sum\n        sum = 0\n        for item in list1:\n            sum += item\n        # return sum\n        return sum\n    # else return empty list\n    else:\n        return []\n    \ndef average(list1):\n    '''\n    Write a function to return the average of all items in a list.\n    '''\n    # if list is not empty\n    if len(list1) > 0:\n        # add each item in list to sum\n        sum = 0\n        for item in list1:\n            sum += item\n        # divide sum by length of list\n        average = sum / len(list1)\n        # return average\n        return average\n    # else return empty list\n    else:\n        return []\n    \ndef sort_list(list1):\n    '''\n    Write a function to return a sorted list.\n    '''\n    # if list is not empty\n    if len(list1) > 0:\n        # sort list\n        list1.sort()\n        # return list\n        return list1\n    # else return empty list\n    else:\n        return []\n    \ndef filter_list(list1, val):\n    '''\n    Write a function to filter a list by a given value.\n    '''\n    # if list is not empty\n    if len(list1) > 0:\n        # create new list\n        new_list = []\n        # for each item in list\n        for item in list1:\n            # if item is equal to val\n            if item == val:\n                # add to new list\n                new_list.append(item)\n        # return new list\n        return new_list\n    # else return empty list\n    else:\n        return []\n    \ndef map_list(list1, val):\n    '''\n    Write a function to map a list of values to a new list.\n    '''\n    # if list is not empty\n    if len(list1) > 0:\n        # create new list\n        new_list = []\n        # for each item in list\n        for item in list1:\n            # get the new value\n            new_val = val(item)\n            # add new value to new list\n            new_list.append(new_val)\n        # return new list\n        return new_list\n    # else return empty list\n    else:\n        return []\n    \ndef group_by_key(dict1):\n    '''\n    Write a function to group a dictionary of objects by their values.\n    '''\n    # if dictionary is not empty\n    if len(dict1) > 0:\n        # create a new dictionary\n        new_dict = {}\n        ",
        "num_ids": 36
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == []:\n            dict1.pop(key)\n    return dict1\n",
        "num_ids": 35
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not dict1:\n        return dict1\n    return {k: v for k, v in dict1.items() if v}\n    \n",
        "num_ids": 36
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if not dict1[key]:\n            del dict1[key]\n    return dict1\n",
        "num_ids": 34
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.iteritems():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 46
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    new_dict = {}\n    for key, value in dict1.iteritems():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 48
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far = 1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            continue\n        max_so_far = max(max_so_far, arr[i]*arr[i-1])\n    return max_so_far\n",
        "num_ids": 77
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # take max product of all the subarrays\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], arr[i]*max_product)\n    return max_product\n",
        "num_ids": 65
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    start, end = 0, len(arr)-1\n    result = arr[start]\n    while start < end:\n        result = max(result, arr[start] * arr[end])\n        if arr[start] < arr[end]:\n            start += 1\n        else:\n            end -= 1\n    return result\n    \nif __name__ == '__main__':\n    arr = [3,4,5,2,10]\n    print max_product(arr",
        "num_ids": 112
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr)==0:\n        return 0\n    max_product = arr[0]\n    for i in xrange(1,len(arr)):\n        current_max = 1\n        for j in xrange(i):\n            current_max *= arr[j]\n        current_max *= arr[i]\n        if current_max > max_product:\n            max_product = current_max\n    return max_product\n",
        "num_ids": 106
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        a, b = max_product, arr[i]\n        if a > 0 and b > 0:\n            max_product = max(a*b, a, b)\n        elif a > 0:\n            max_product = a\n        elif b > 0:\n            max_product = b\n    return max_product\n",
        "num_ids": 130
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = arr[0]\n    current_product = arr[0]\n",
        "num_ids": 20
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # arr = [1,2,3,4]\n    # subarr = [1,2]\n    # max = 12\n    arr = [1,2,3,4]\n    subarr = [1,2]\n    max = 6\n    max_prod = 1\n    for i in range(len(arr)):\n        if i == 0:\n            max_prod = max_prod * arr[i]\n            continue\n        if arr[i] < 0:\n            max_prod = max_prod * arr[i]\n        if arr[i] > 0:\n            subarr.append(arr[i])\n            if len(subarr) > 1:\n                temp = 1\n                for j in subarr:\n                    temp = temp * j\n                if temp > max_prod:\n                    max_prod = temp\n            else:\n                max_prod = max_prod * arr[i]\n            subarr = []\n    return max_prod\n",
        "num_ids": 236
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 1\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] * arr[1]\n    else:\n        max_prod_arr = [arr[0]]\n        min_prod_arr = [arr[0]]\n        for i in range(1, len(arr)):\n            max_prod_arr.append(max(arr[i], arr[i] * max_prod_arr[i-1], arr[i] * min_prod_arr[i-1]))\n            min_prod_arr.append(min(arr[i], arr[i] * max_prod_arr[i-1], arr[i] * min_prod_arr[i-1]))\n        return max_prod_arr[-1]\n",
        "num_ids": 216
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    global_max = [0 for i in xrange(len(arr))]\n    local_max = [0 for i in xrange(len(arr))]\n    #print global_max,local_max\n",
        "num_ids": 51
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    return max(arr[0]*arr[1]*arr[len(arr)-1],max_product(arr[1:]))\n",
        "num_ids": 65
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x = test_tup[0]\n    y = test_tup[1]\n    z = x + y\n    return z\n",
        "num_ids": 35
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(a+b for a,b in zip(test_tup,test_tup[1:])) + (test_tup[-1]+0,)\n",
        "num_ids": 42
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n_tup = len(test_tup)\n    for i in range(n_tup):\n        if i == n_tup-1:\n            return (test_tup[i] + test_tup[0])\n        else:\n            return (test_tup[i] + test_tup[i+1])\n",
        "num_ids": 84
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    return sum(tup[i] + tup[i+1] for i in range(len(tup)-1))\n",
        "num_ids": 34
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_of_pairs = 0\n    for idx, elem in enumerate(test_tup):\n        if idx == 0:\n            continue\n        sum_of_pairs += elem\n    return sum_of_pairs\n",
        "num_ids": 60
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a,b = test_tup\n    print a, b\n    print a+b, b+a\n",
        "num_ids": 28
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1], test_tup[1] + test_tup[2], test_tup[2] + test_tup[0]\n",
        "num_ids": 50
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            total += test_tup[i]\n            total += test_tup[i+1]\n        elif i == len(test_tup)-1:\n            total += test_tup[i-1]\n            total += test_tup[i]\n        else:\n            total += test_tup[i-1]\n            total += test_tup[i+1]\n    print(total)\n",
        "num_ids": 128
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup)):\n        total += test_tup[i]\n    return (total, test_tup)\n",
        "num_ids": 44
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] for i in range(len(test_tup)-1))\n",
        "num_ids": 28
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in arr:\n        res = (res * i) % n\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # your code here\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod\n",
        "num_ids": 38
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return n * prod([i % n for i in arr]) % n\n",
        "num_ids": 19
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n",
        "num_ids": 25
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    arr = list(arr)\n    arr_prod = 1\n    for i in arr:\n        arr_prod = (arr_prod * i) % n\n    return arr_prod\n",
        "num_ids": 51
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Brute force \n    # for i in range(len(arr)): \n    #     for j in range(i+1, len(arr)): \n    #         ans = (arr[i] * arr[j]) % n\n    #         if ans == 0: \n    #             return ans\n    #     # ans = (arr[i] * arr[j]) % n\n    #     # if ans == 0: \n    #     #     return ans\n",
        "num_ids": 114
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 1\n    for i in range(len(arr)):\n        remainder = (remainder * arr[i]) % n\n    return remainder\n",
        "num_ids": 42
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(0, n): \n        product = product * arr[i] % n\n    return product\n",
        "num_ids": 35
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    m = len(arr)\n    res = 1\n    arr.sort()\n    for i in range(m):\n        res = (res * (arr[i] % n)) % n\n    return res\n",
        "num_ids": 51
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in arr: \n        res = res * i % n \n    return res \n",
        "num_ids": 30
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l= sorted(l)\n    for i in range(1,len(l)):\n        if l[i]-l[i-1]!=1:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    s = 0\n    for x in l:\n        if s < x:\n            s = x\n        else:\n            break\n    if s == max(l):\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 1\n    while i < len(l):\n        if l[i] - l[i-1]!= 1:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1!= l[i+1]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #Your code here\n    for i in range(1,len(l)):\n        if l[i] - l[i-1]!=1:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    else:\n        if l[0] == 1:\n            return check_Consecutive(l[1:])\n        else:\n            return (l[0] == l[1] - 1) and check_Consecutive(l[1:])\n",
        "num_ids": 76
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return True\n    elif l[0] + 1 == l[1]:\n        return check_Consecutive(l[1:])\n    else: \n        return False\n",
        "num_ids": 55
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return True\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return True\n    if (l[0] + 1) == l[1]:\n        return check_Consecutive(l[1:])\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n",
        "num_ids": 22
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #Create a new list, comparing the elements in each tuple and finding the intersection\n    new_list = [tuple1 for tuple1 in test_list1 for tuple2 in test_list2 if tuple1 == tuple2]\n    return new_list\n    \ndef find_max_min(test_list):\n    '''\n    Write a function to find the maximum and minimum number from the given list\n    '''\n    #Find the maximum and minimum numbers\n    max_value = max(test_list)\n    min_value = min(test_list)\n    return max_value, min_value\n    \ndef find_length(test_list):\n    '''\n    Write a function to find the length of the given list\n    '''\n    #Find the length of the list\n    length = len(test_list)\n    return length\n    \ndef find_in_list(test_list, test_value):\n    '''\n    Write a function to find the index of the given value in the given list\n    '''\n    #Find the index of the given value\n    index = test_list.index(test_value)\n    return index\n    \ndef find_difference(test_list1, test_list2):\n    '''\n    Write a function to find the difference between the two given lists\n    '''\n    #Find the difference between the lists\n    difference = []\n    #Create a new list with the differences\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1!= tuple2:\n                difference.append(tuple1)\n    return difference\n    \ndef find_list_duplicates(test_list):\n    '''\n    Write a function to find the duplicates elements in the given list\n    '''\n    #Find the duplicates elements\n    duplicates = []\n    #Create a new list with the duplicates\n    for index, element in enumerate(test_list):\n        if index!= element:\n            duplicates.append(element)\n    return duplicates\n    \ndef find_string_duplicates(test_string):\n    '''\n    Write a function to find the duplicates characters in the given string\n    '''\n    #Find the duplicates characters\n    duplicates = []\n    #Create a new list with the duplicates\n    for index, element in enumerate(test_string):\n        if index!= element:\n            duplicates.append(element)\n    return duplicates\n    \ndef find_char_in_string(test_string, test_char):\n    '''\n    Write a function to find the occurrence of the given character in the given string\n    '''\n    #Find the occurrence of the given character\n    occurrences = test_string.count(test_char)\n    return occurrences\n    \ndef string_splitting(test_string):\n    '''\n    Write a function to split the given string into seperate words\n    '''\n    #Find the list of words\n    splitting_list = test_string.split()\n    return splitting_list\n    \ndef string_reversing(test_string):\n    '''\n    Write a function to reverse the given string\n    '''\n    #Find the reversed string\n    reversed_string = test_string[::-1]\n    return reversed_string\n    \ndef find_word_length(test_list):\n    '''\n    Write a function to find the length of the word from the given list\n    '''\n    #Find the length of the word\n    word_length = max(test_list)\n    return word_length\n    \ndef find_n_word_length(test_list, n):\n    '''\n    Write a function to find the n length words from the given list\n    '''\n    #Find the n length words\n    n_length_words = []\n    #Find the length of the words\n    for word in test_list:\n        length = len(word)\n        if length == n:\n            n_length_words.append(word)\n    return n_length_words\n    \ndef count_characters(test_string):\n    '''\n    Write a function to count the number of characters in the given string\n    '''\n    #Count the number of characters\n    count = 0\n    for char in test_string:\n        count += 1\n    return count\n    \ndef count_characters_in_string(test_string):\n    '''\n    Write a function to count the number of characters in the given string\n    '''\n    #Count the number of characters\n    count = 0\n    for char in test_string:\n        count += 1\n    return count\n    \ndef count_characters_in_list(test_list):\n    '''\n    Write a function to count the number of characters in the given string\n    '''\n    #Count the number of characters\n    count = 0\n    for char in test_list:\n        count += 1\n    return count\n    \ndef count_characters_in_list_string(test_string):\n    '''\n    Write a function to count the number of characters in the given string\n    '''\n    #Count the number of characters\n    count = 0\n    for char in test_string:\n        count += 1\n    return count\n    \ndef count_characters_in_tuple(test_tuple):\n    '''\n    Write a function to count the number of characters in the given string\n    '''\n    #Count the number of characters\n    count = 0\n    for char in test_tuple:\n        count += 1\n    return count\n    \ndef list_reversed(test_list):\n    '''\n    Write a function to reverse the given list\n    '''\n    #Reverse the given list\n    reversed_list = test_list[::-1]\n    return reversed_list\n    \ndef list_rotated(test_list):\n    '''\n    Write a function to rotate the given list\n    '''\n    #Rotate the given list\n    rotated_list = test_list[1:] + test_list[:1]\n    return rotated_list\n    \ndef find_rotated_index(test_list):\n    '''\n    Write a function to find the index of the given value in the given list\n    '''\n    #Find the index of the given value\n    index = test_list.index(test_list[-1])\n    return index\n    \ndef rotate_string(test_string):\n    '''\n    Write a function to rotate the given string\n    '''\n    #Rotate the given string\n    rotated_string = test_string[-1] + test_string[1:-1] + test_string[0]\n    return rotated_string\n    \ndef find_rotated_index_in_string(test_string):\n    '''\n    Write a function to find the index of the given value in the given string\n    '''\n    #Find the index of the given value\n    index = test_string.index(test_string[-1])\n    return index\n    \ndef find_rotated_string(test_string):\n    '''\n    Write a function to find the rotates string\n    '''\n    #Find the rotates string\n    rotated_string = test_string[-1] + test_string[1:-1] + test_string[0]\n    return rotated_string\n    \ndef find_rotated_string_in_string(test_string):\n    '''\n    Write a function to find the rotates string\n    '''\n    #Find the rotates string\n    rotated_string = test_string[-1] + test_string[1:-1] + test_string[0]\n    return rotated_string\n    \ndef rotate_string_in_string(test_string):\n    '''\n    Write a function to rotate the given string\n    '''\n    #Rotate the given string\n    rotated_string = test_string[-1] + test_string[1:-1] + test_string[0]\n    return rotated_string\n    \ndef find_rotated_characters(test_string):\n    '''\n    Write a function to find the rotates characters\n    '''\n    #Find the rotates characters\n    rotated_characters = []\n    for char in test_string:\n        if char == test_string[0]:\n            rotated_characters.append(char)\n    return rotated_characters\n    \ndef find_rotated_characters_in_strin",
        "num_ids": 73
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list=[]\n    for i in test_list1:\n        for j in test_list2:\n            if i==j:\n                new_list.append(i)\n                test_list2.remove(j)\n                break\n    return new_list\n",
        "num_ids": 66
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if not isinstance(test_list1, list):\n        print(\"Test list 1 is not a list.\")\n        return\n    elif not isinstance(test_list2, list):\n        print(\"Test list 2 is not a list.\")\n        return\n",
        "num_ids": 61
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1.intersection(set2))\n    #return list(set(test_list1).intersection(set(test_list2)))\n    ",
        "num_ids": 64
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    pass\n",
        "num_ids": 7
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = list(test_list1)\n    test_list2 = list(test_list2)\n    return list(set(test_list1) & set(test_list2))\n",
        "num_ids": 50
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n",
        "num_ids": 22
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    sorted_list1 = sorted(test_list1)\n    sorted_list2 = sorted(test_list2)\n    return list(set(sorted_list1) & set(sorted_list2))\n",
        "num_ids": 56
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1_set = set(test_list1)\n    test_list2_set = set(test_list2)\n    tuple_set = test_list1_set.intersection(test_list2_set)\n    return tuple(tuple_set)\n",
        "num_ids": 68
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    a = str1.split(ch)\n    str1 = newch.join(a)\n    return str1\n",
        "num_ids": 30
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = []\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            result.append(newch)\n        else:\n            result.append(str1[i])\n    return ''.join(result)\n    \ndef remove_chars(str1,chars):\n    '''\n    Write a function to remove all the characters in a string.\n    '''\n    result = []\n    for i in range(len(str1)):\n        if str1[i] not in chars:\n            result.append(str1[i])\n    return ''.join(result)\n    \ndef remove_chars_plus(str1,chars):\n    '''\n    Write a function to remove all the characters in a string.\n    '''\n    result = []\n    for i in range(len(str1)):\n        if str1[i] not in chars:\n            result.append(str1[i])\n    return ''.join(result)\n",
        "num_ids": 52
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for x in str1:\n        if x == ch:\n            str2 += newch\n        else:\n            str2 += x\n    return str2\n",
        "num_ids": 45
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_string = ''\n    for ch in str1:\n        if ch == chr(ord(ch)-ord('a')):\n            new_string += newch\n        else:\n            new_string += ch\n    return new_string\n",
        "num_ids": 59
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for ch in str1:\n        if ch == ch:\n            new_str += newch\n        else:\n            new_str += ch\n    return new_str\n",
        "num_ids": 49
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1.replace(ch,newch)\n    return str2\n",
        "num_ids": 22
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = []\n    c = Counter(dict1)\n    sorted_dict = dict(sorted(c.items(), key = lambda x : x[1], reverse = True))\n    return sorted_dict\n",
        "num_ids": 54
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #print(dict1)\n    if isinstance(dict1, dict):\n        if all(isinstance(x, int) for x in dict1.values()):\n            values = list(dict1.values())\n            keys = list(dict1.keys())\n            key_values = dict(zip(keys,values))\n            new_values = sorted(values)\n            new_keys = sorted(keys)\n            new_dict = dict(zip(new_keys, new_values))\n            #print(new_dict)\n            return new_dict\n        else:\n            return dict1\n    else:\n        return dict1\ndef group_by_date(dates):\n    '''\n    Write a function to group dates by month.\n    '''\n    if isinstance(dates, list):\n        group = [0,0,0,0,0,0,0,0,0,0,0,0]\n        count = 0\n        for date in dates:\n            group[count%13] += 1\n            count+=1\n        group = sort_counter(group)\n        return group\n    else:\n        return dates\ndef find_least_common_element(list1, list2):\n    '''\n    Write a function to find the least common element in two sorted lists.\n    '''\n    if isinstance(list1, list) and isinstance(list2, list):\n        list1.sort()\n        list2.sort()\n        count = 0\n        for num1 in list1:\n            for num2 in list2:\n                if num1 == num2:\n                    count += 1\n                    break\n        return count\n    else:\n        return False\ndef repeat_string(string, num):\n    '''\n    Write a function to repeat a string num times.\n    '''\n    if isinstance(string, str) and isinstance(num, int):\n        str_list = list(string)\n        leng = len(str_list)\n        l = len(str_list)\n        while l < num:\n            str_list.extend(str_list)\n            l += leng\n        return ''.join(str_list)\n    else:\n        return string\ndef sum_positive_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all positive numbers.\n    '''\n    if isinstance(nums, list):\n        return sum([x for x in nums if x > 0])\n    else:\n        return False\ndef sum_positive_numbers_dict(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all positive numbers.\n    '''\n    if isinstance(nums, list):\n        count = 0\n        dict1 = {}\n        for x in nums:\n            if x > 0:\n                count += x\n            dict1[x] = count\n        return dict1\n    else:\n        return False\ndef sum_positive_numbers_set(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all positive numbers.\n    '''\n    if isinstance(nums, list):\n        count = 0\n        set1 = set(nums)\n        for x in set1:\n            if x > 0:\n                count += x\n        return count\n    else:\n        return False\ndef sum_positive_numbers_generator(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all positive numbers.\n    '''\n    if isinstance(nums, list):\n        count = 0\n        for x in nums:\n            if x > 0:\n                count += x\n        return count\n    else:\n        return False\ndef word_lengths(sentence):\n    '''\n    Write a function to get all the lengths of words in a sentence.\n    '''\n    if isinstance(sentence, str):\n        sentence = sentence.split()\n        l = [len(x) for x in sentence]\n        return l\n    else:\n        return False\ndef word_lengths_set(sentence):\n    '''\n    Write a function to get all the lengths of words in a sentence.\n    '''\n    if isinstance(sentence, str):\n        sentence = sentence.split()\n        set1 = set(sentence)\n        l = [len(x) for x in set1]\n        return l\n    else:\n        return False\ndef sum_even_keys(d):\n    '''\n    Write a function that returns the sum of all even keys in a dictionary.\n    '''\n    if isinstance(d, dict):\n        return sum([x for x in d.keys() if x % 2 == 0])\n    else:\n        return False\ndef sum_even_keys_dict(d):\n    '''\n    Write a function that returns the sum of all even keys in a dictionary.\n    '''\n    if isinstance(d, dict):\n        count = 0\n        for x in d:\n            if x % 2 == 0:\n                count += x\n        return count\n    else:\n        return False\ndef sum_even_keys_set(d):\n    '''\n    Write a function that returns the sum of all even keys in a dictionary.\n    '''\n    if isinstance(d, dict):\n        count = 0\n        set1 = set(d)\n        for x in set1:\n            if x % 2 == 0:\n                count += x\n        return count\n    else:\n        return False\ndef sum_values_dict(d):\n    '''\n    Write a function that returns the sum of all values in a dictionary.\n    '''\n    if isinstance(d, dict):\n        count = 0\n        for x in d.values():\n            count += x\n        return count\n    else:\n        return False\ndef sum_values_set(d):\n    '''\n    Write a function that returns the sum of all values in a dictionary.\n    '''\n    if isinstance(d, dict):\n        count = 0\n        set1 = set(d)\n        for x in set1:\n            count += d[x]\n        return count\n    else:\n        return False\ndef even_values(d):\n    '''\n    Write a function that returns a list of all even values in a dictionary.\n    '''\n    if isinstance(d, dict):\n        return [x for x in d.values() if x % 2 == 0]\n    else:\n        return False\ndef odd_values(d):\n    '''\n    Write a function that returns a list of all odd values in a dictionary.\n    '''\n    if isinstance(d, dict):\n        return [x for x in d.values() if x % 2!= 0]\n    else:\n        return False\ndef even_values_dict(d):\n    '''\n    Write a function that returns a dictionary with all even values in a dictionary.\n    '''\n    if isinstance(d, dict):\n        new_dict = {}\n        for x in d:\n            if d[x] % 2 == 0:\n                new_dict[x] = d[x]\n        return new_dict\n    else:\n        return False\ndef odd_values_dict(d):\n    '''\n    Write a function that returns a dictionary with all odd values in a dictionary.\n    '''\n    if isinstance(d, dict):\n        new_dict = {}\n        for x in d:\n            if d[x] % 2!= 0:\n                new_dict[x] = d[x]\n        return new_dict\n    else:\n        return False\ndef count_letters(string):\n    '''\n    Write a function that returns a dictionary with all the letters in a string as keys and the number of times it appears as values.\n    '''\n    if isinstance(string, str):\n        d = {}\n        for x in string:\n            d[x] = d.get(x,0) + 1\n        return d\n    else:\n        return False\ndef count_letters_dict(string):\n    '''\n    Write a function that returns a dictionary with all the letters in a string as keys and the number of times it appears as values.\n    '''\n    if isinstance(string, str):\n        d = {}\n        for x in string:\n            d[x] = d.get(x,0) + 1\n        return d\n    else:\n        return False\ndef is_anagram(string1, string2):",
        "num_ids": 65
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    return sorted_dict\n",
        "num_ids": 31
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1 = dict1.items()\n    sorted_list = sorted(list1,key=lambda x:x[1])\n    return sorted_list\n",
        "num_ids": 39
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\ndef sort_dictionary_by_key(dictionary):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dictionary.items(),key=lambda x:x[0])\ndef sort_dictionary_by_value(dictionary):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dictionary.items(),key=lambda x:x[1])\ndef unique_values(dictionary):\n    '''\n    Write a function to find the unique values in a dictionary.\n    '''\n    return sorted(set(dictionary.values()))\ndef linear_search(value, list):\n    '''\n    Write a function that returns the first index in a list where the value occurs.\n    '''\n    for index, item in enumerate(list):\n        if item == value:\n            return index\n    return -1\ndef recursive_binary_search(value,list,start,end):\n    '''\n    Write a function that returns the index of the first occurrence of the value in a list. \n    The value will be in the list between index start and end (inclusive).\n    '''\n    if start > end:\n        return -1\n    else:\n        mid = (start + end)//2\n        if list[mid] == value:\n            return mid\n        elif list[mid] < value:\n            return recursive_binary_search(value, list, mid+1, end)\n        else:\n            return recursive_binary_search(value, list, start, mid-1)\ndef recursive_binary_search_v2(value,list,start,end):\n    '''\n    Write a function that returns the index of the first occurrence of the value in a list. \n    The value will be in the list between index start and end (inclusive).\n    '''\n    if start > end:\n        return -1\n    else:\n        mid = (start + end)//2\n        if list[mid] == value:\n            return mid\n        elif list[mid] < value:\n            return recursive_binary_search_v2(value, list, mid+1, end)\n        else:\n            return recursive_binary_search_v2(value, list, start, mid-1)\ndef binary_search(value, list, start, end):\n    '''\n    Write a function that returns the index of the first occurrence of the value in a list. \n    The value will be in the list between index start and end (inclusive).\n    '''\n    if start > end:\n        return -1\n    else:\n        mid = (start + end)//2\n        if list[mid] == value:\n            return mid\n        elif list[mid] < value:\n            return binary_search(value, list, mid+1, end)\n        else:\n            return binary_search(value, list, start, mid-1)\ndef binary_search_v2(value, list, start, end):\n    '''\n    Write a function that returns the index of the first occurrence of the value in a list. \n    The value will be in the list between index start and end (inclusive).\n    '''\n    if start > end:\n        return -1\n    else:\n        mid = (start + end)//2\n        if list[mid] == value:\n            return mid\n        elif list[mid] < value:\n            return binary_search_v2(value, list, mid+1, end)\n        else:\n            return binary_search_v2(value, list, start, mid-1)\ndef find_first(value, list):\n    '''\n    Write a function to find the first occurrence of a value in a list.\n    '''\n    for index, item in enumerate(list):\n        if item == value:\n            return index\n    return -1\ndef find_first_v2(value, list):\n    '''\n    Write a function to find the first occurrence of a value in a list.\n    '''\n    for index, item in enumerate(list):\n        if item == value:\n            return index\n        elif item > value:\n            return -1\ndef find_last(value, list):\n    '''\n    Write a function to find the last occurrence of a value in a list.\n    '''\n    for index, item in enumerate(list):\n        if item == value:\n            return index\n    return -1\ndef find_last_v2(value, list):\n    '''\n    Write a function to find the last occurrence of a value in a list.\n    '''\n    for index, item in enumerate(list):\n        if item == value:\n            return index\n        elif item > value:\n            return -1\ndef remove_duplicates(list):\n    '''\n    Write a function that removes duplicates from a list.\n    '''\n    temp_list = []\n    for item in list:\n        if item not in temp_list:\n            temp_list.append(item)\n    return temp_list\ndef remove_duplicates_v2(list):\n    '''\n    Write a function that removes duplicates from a list.\n    '''\n    temp_list = []\n    for item in list:\n        if item not in temp_list:\n            temp_list.append(item)\n    return temp_list\ndef palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string == string[::-1]\ndef palindrome_v2(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    for index in range(len(string)//2):\n        if string[index]!= string[len(string)-1-index]:\n            return False\n    return True\ndef vowel_count(string):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    vowel_count = 0\n    for char in string:\n        if char.lower() in vowels:\n            vowel_count += 1\n    return vowel_count\ndef vowel_count_v2(string):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    vowel_count = 0\n    for char in string:\n        if char.lower() in vowels:\n            vowel_count += 1\n    return vowel_count\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    reverse_string = ''\n    for index in range(len(string)-1, -1, -1):\n        reverse_string += string[index]\n    return reverse_string\ndef reverse_string_v2(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    reverse_string = ''\n    for index in range(len(string)-1, -1, -1):\n        reverse_string += string[index]\n    return reverse_string\ndef is_permutation(string1, string2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    return Counter(string1) == Counter(string2)\ndef is_permutation_v2(string1, string2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    return Counter(string1) == Counter(string2)\ndef longest_palindrome(string):\n    '''\n    Write a function to find the longest palindrome in a string.\n    '''\n    length = len(string)\n    longest_palindrome = []\n    for index in range(length):\n        odd_palindrome = check_palindrome(string, index, index)\n        even_palindrome = check_palindrome(string, index, index+1)\n        if len(odd_palindrome) > len(longest_palindrome):\n            longest_palindrome = odd_palindrome\n        if len(even_palindrome) > len(longest_palindrome):\n            longest_palindrome = even_palindrome\n    retur",
        "num_ids": 144
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\ndef sort_counter_with_key(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\ndef sort_dict(d):\n    '''\n    Write a function that takes in a dictionary and returns a sorted list\n    of tuples. Each tuple should contain a key and value. The keys should\n    be in alphabetical order. Use the built-in sorted() function to sort the\n    dictionary keys.\n    '''\n    return sorted(d.items(), key=lambda x: x[0])\ndef sort_dict_with_key(d):\n    '''\n    Write a function that takes in a dictionary and returns a sorted list\n    of tuples. Each tuple should contain a key and value. The keys should\n    be in alphabetical order. Use the built-in sorted() function to sort the\n    dictionary keys.\n    '''\n    return sorted(d.items(), key=lambda x: x[0])\ndef get_words_from_file(file_name):\n    '''\n    Write a function that takes in a file name and returns a list of all the\n    words in that file. You can assume that the file is not empty.\n    '''\n    with open(file_name, 'r') as f:\n        return f.read().split()\ndef count_words(words):\n    '''\n    Write a function that takes in a list of words and returns a dictionary\n    with the word as the key and the number of times it appeared in the list\n    as the value.\n    '''\n    return Counter(words)\ndef get_numbers(s):\n    '''\n    Write a function that takes in a string and returns a dictionary with each\n    number in the string as a key and the number of times that number appeared\n    as the value.\n    '''\n    return Counter(s)\ndef get_numbers_with_key(s):\n    '''\n    Write a function that takes in a string and returns a dictionary with each\n    number in the string as a key and the number of times that number appeared\n    as the value.\n    '''\n    return Counter(s)\ndef get_frequency_of_words(words, search):\n    '''\n    Write a function that takes in a list of words and a word and returns a\n    dictionary with the word as the key and the number of times it appeared\n    in the list as the value.\n    '''\n    return Counter(words)\ndef get_frequency_of_words_with_key(words, search):\n    '''\n    Write a function that takes in a list of words and a word and returns a\n    dictionary with the word as the key and the number of times it appeared\n    in the list as the value.\n    '''\n    return Counter(words)\ndef most_common_words(words, n):\n    '''\n    Write a function that takes in a list of words and a number n and returns\n    a list of tuples of the n most common words in the list. The tuples should\n    be in alphabetical order.\n    '''\n    return Counter(words).most_common(n)\ndef most_common_words_with_key(words, n):\n    '''\n    Write a function that takes in a list of words and a number n and returns\n    a list of tuples of the n most common words in the list. The tuples should\n    be in alphabetical order.\n    '''\n    return Counter(words).most_common(n)\ndef most_common_words_with_key_and_val(words, n):\n    '''\n    Write a function that takes in a list of words and a number n and returns\n    a list of tuples of the n most common words in the list. The tuples should\n    be in alphabetical order.\n    '''\n    return Counter(words).most_common(n)\ndef get_frequency_of_words_with_key_and_val(words, search, n):\n    '''\n    Write a function that takes in a list of words, a word, and a number n\n    and returns a dictionary with the word as the key and the number of times\n    it appeared in the list as the value.\n    '''\n    return Counter(words)\ndef get_frequency_of_words_with_key_and_val_with_key(words, search, n):\n    '''\n    Write a function that takes in a list of words, a word, and a number n\n    and returns a dictionary with the word as the key and the number of times\n    it appeared in the list as the value.\n    '''\n    return Counter(words)\ndef create_list_of_dicts(words):\n    '''\n    Write a function that takes in a list of words and returns a list of\n    dictionaries. Each dictionary in the list should have a word as the key\n    and a number of times it appeared in the list as the value.\n    '''\n    return [Counter(words).get(x) for x in words]\ndef sort_list_of_dicts_by_key(l):\n    '''\n    Write a function that takes in a list of dictionaries and returns a list\n    of dictionaries where each dictionary is sorted by key.\n    '''\n    return sorted(l, key=lambda x: x[0])\ndef sort_list_of_dicts_by_key_with_key(l):\n    '''\n    Write a function that takes in a list of dictionaries and returns a list\n    of dictionaries where each dictionary is sorted by key.\n    '''\n    return sorted(l, key=lambda x: x[0])\ndef sum_of_words_in_list(words):\n    '''\n    Write a function that takes in a list of words and returns the sum of\n    the numbers in the list.\n    '''\n    return sum(words)\ndef sum_of_words_in_list_with_key(words):\n    '''\n    Write a function that takes in a list of words and returns the sum of\n    the numbers in the list.\n    '''\n    return sum(words)\ndef sum_of_words_in_list_with_key_and_val(words):\n    '''\n    Write a function that takes in a list of words and returns the sum of\n    the numbers in the list.\n    '''\n    return sum(words)\ndef sum_of_words_in_list_with_key_and_val_with_key(words):\n    '''\n    Write a function that takes in a list of words and returns the sum of\n    the numbers in the list.\n    '''\n    return sum(words)\ndef largest_num_in_list_with_key(words):\n    '''\n    Write a function that takes in a list of words and returns the largest\n    number in the list.\n    '''\n    return max(words)\ndef largest_num_in_list_with_key_and_val(words):\n    '''\n    Write a function that takes in a list of words and returns the largest\n    number in the list.\n    '''\n    return max(words)\ndef most_common_words_in_list(words):\n    '''\n    Write a function that takes in a list of words and returns a list of tuples\n    where the first element of each tuple is the word and the second element\n    is the number of times the word appeared in the list. The tuples should\n    be sorted by the number of times the word appeared in the list.\n    '''\n    return sorted(words, key=lambda x: x[1])\ndef most_common_words_in_list_with_key(words):\n    '''\n    Write a function that takes in a list of words and returns a list of tuples\n    where the first element of each tuple is the word and the second element\n    is the number of times the word appeared in the list. The tuples should\n    be sorted by the number of times the word appeared in the list.\n    '''\n    return sorted(words, key=lambda x: x[1])\ndef most_common_words_in_list_with_key_and_val(words):\n    '''\n    Write a function that takes in a list of words and returns a list of tuples\n    where the first element of each tuple is the word and the second element\n    is the number of times the word appeared in the list. The tuples should\n    be sorted by the number of times the word appeared in th",
        "num_ids": 68
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = sorted(dict1.items(), key=lambda x:x[1],reverse=True)\n    return dict1\n",
        "num_ids": 32
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    key_list = []\n    value_list = []\n    for key, value in dict1.iteritems():\n        key_list.append(key)\n        value_list.append(value)\n    return key_list[value_list.index(max(value_list))]\n",
        "num_ids": 69
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = sorted(nums)\n    return nums[-1] + nums[0]\n",
        "num_ids": 27
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) + min(nums)\n",
        "num_ids": 35
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = 0\n    min = 0\n    for i in range(0, len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        elif nums[i] < min:\n            min = nums[i]\n    return max + min\n",
        "num_ids": 74
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(\"The sum of the largest and smallest value in a given array: \", (max(nums) + min(nums)))\n",
        "num_ids": 32
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # len_of_array = len(nums)\n    # max_num = max(nums)\n    # min_num = min(nums)\n    # print(max_num+min_num)\n    # return max_num+min_num\n",
        "num_ids": 64
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = min(nums)\n    largest = max(nums)\n    return largest + smallest\n",
        "num_ids": 27
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = nums[0]\n    min = nums[0]\n    for i in nums:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return max + min\n",
        "num_ids": 58
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    return max(nums) + min(nums)\n",
        "num_ids": 31
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    assert isinstance(string, str)\n    return string.lower()\n",
        "num_ids": 19
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n",
        "num_ids": 14
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]*','',str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return re.sub('[,.?!]*','',str1)\ndef remove_spaces(str1):\n    '''\n    Write a function to remove leading and trailing spaces in a given string.\n    '''\n    return re.sub('[ ]*','',str1)\ndef remove_upper(str1):\n    '''\n    Write a function to remove upper case letters from a given string.\n    '''\n    return re.sub('[A-Z]*','',str1)\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    stopwords = [line.rstrip('\\n') for line in open('stopwords.txt')]\n    return re.sub('[A-Za-z]+', '',str1)\ndef remove_digit(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return re.sub('[0-9]*', '',str1)\ndef remove_lower(str1):\n    '''\n    Write a function to remove lower case letters from a given string.\n    '''\n    return re.sub('[a-z]+', '',str1)\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return re.sub('[^A-Za-z]*', '',str1)\n",
        "num_ids": 25
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = re.sub(r'\\b([a-z])+\\b',r'',str1)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]+', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    str1 = re.sub(r'(.)\\1+',r'\\1',str1)\n    return str1\n",
        "num_ids": 34
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    a = list(str1)\n    for i in range(len(a)):\n        if (a[i].islower()):\n            a[i] =''\n    return ''.join(a)\n",
        "num_ids": 54
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # converting to string\n    n = str(n)\n    # the function to find the first digit\n    return n[0]\n",
        "num_ids": 33
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    return n[0]\n    \ndef find_first_digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    digit = []\n    for i in range(1, n+1) :\n        digit.append(first_Digit(i))\n    return digit\n    \ndef test_first_digit() :\n    if first_Digit(1234) == '1' :\n        print(\"Test 1 for first_Digit PASSED\")\n    else :\n        print(\"Test 1 for first_Digit FAILED\")\n",
        "num_ids": 98
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n < 0) :\n        n = n * (-1)\n    if (n == 0) :\n        return 0\n    while (n) :\n        r = n % 10\n        n = n / 10\n        return r\n",
        "num_ids": 58
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else:\n        first_digit = n % 10\n        return first_digit\n",
        "num_ids": 32
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % pow(10, len(str(n)) - 1)\ndef test_first_Digit() :  \n    '''\n    Test the first_Digit() function to make sure the result is correct.\n    '''\n    print(\"Test 1: first_Digit(9) -> 1\")\n    print(\"Test 2: first_Digit(101) -> 1\")\n    print(\"Test 3: first_Digit(10) -> 0\")\ndef test_last_Digit() :  \n    '''\n    Test the last_Digit() function to make sure the result is correct.\n    '''\n    print(\"Test 1: last_Digit(9) -> 9\")\n    print(\"Test 2: last_Digit(101) -> 2\")\n    print(\"Test 3: last_Digit(10) -> 0\")\n",
        "num_ids": 53
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    if int(n[0]) <= 9:\n        return int(n[0])\n    else :\n        return int(n[1])\n",
        "num_ids": 44
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/10)\n",
        "num_ids": 11
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "num_ids": 13
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/10**0)\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n/10**1)\n    \ndef third_Digit(n) :  \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    return int(n/10**2)\n    \ndef forth_Digit(n) :  \n    '''\n    Write a python function to find the forth digit of a given number.\n    '''\n    return int(n/10**3)\n    \ndef fifth_Digit(n) :  \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    return int(n/10**4)\n    \ndef sixth_Digit(n) :  \n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    return int(n/10**5)\n    \ndef seventh_Digit(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    return int(n/10**6)\n    \ndef eighth_Digit(n) :  \n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    return int(n/10**7)\n    \ndef ninth_Digit(n) :  \n    '''\n    Write a python function to find the ninth digit of a given number.\n    '''\n    return int(n/10**8)\n    \ndef tenth_Digit(n) :  \n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    return int(n/10**9)\n    \ndef number_Digits(n) :  \n    '''\n    Write a python function to find the number of digits of a given number.\n    '''\n    if n == 0 :\n        return 1\n    else :\n        return 1 + number_Digits(first_Digit(n))\n",
        "num_ids": 34
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i%2 == 1:\n            odds.append(i)\n    return odds\n",
        "num_ids": 37
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if list == []:\n        return []\n    else:\n        return [list[0]] + Split(list[1:])\n    \n    \ndef main():\n    print(Split([1,2,3,4,5,6,7,8,9,10,11,12]))\n    print(Split([]))\n    \nif __name__=='__main__':\n    main(",
        "num_ids": 96
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_num = []\n    for i in list:\n        if i % 2 == 1:\n            odd_num.append(i)\n    return odd_num\n",
        "num_ids": 41
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if(list[i] % 2!= 0):\n            odd.append(list[i])\n    return odd\n",
        "num_ids": 47
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    list2 = []\n    \n    for i in list:\n        if i % 2 == 1:\n            list2.append(i)\n    \n    return list2\n",
        "num_ids": 44
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return filter(lambda x:x%2!= 0, list)\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i % 2 == 1:\n            odds.append(i)\n    return odds\n",
        "num_ids": 37
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i % 2!= 0:\n            odds.append(i)\n    return odds\n",
        "num_ids": 38
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    newList = []\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            newList.append(list[i])\n    return newList\n",
        "num_ids": 49
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    oddList = []\n    for i in list:\n        if i % 2!= 0:\n            oddList.append(i)\n    return oddList\n",
        "num_ids": 41
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # return (n * (n + 1) * (2 * n + 1)) / 6\n    return n * (n + 1) * (2 * n + 1) / 6\n",
        "num_ids": 44
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1) :\n        sum1 += i**3\n    for j in range(1,n+1) :\n        sum2 += j\n    sum2 = sum2**3\n    return sum1 - sum2\n    \nif __name__ == \"__main__\" :\n    n = int(input(\"Enter the value of n : \"))\n    print(difference(n))",
        "num_ids": 111
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #print(n*(n+1)*(2*n+1))\n    return n*(n+1)*(2*n+1) - n*(n+1)**2/2\n",
        "num_ids": 50
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(n)\n    sum_of_cubes = (n * n * n) + (n * n) + (n)\n    sum_of_numbers = 0\n    for i in range(n) :\n        sum_of_numbers += i\n    \n    return sum_of_numbers - sum_of_cubes\n",
        "num_ids": 84
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(map(lambda x: x**3, range(1, n+1))) - sum(range(1, n+1))**3\n",
        "num_ids": 37
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summation = 0\n    for i in range(1, n+1):\n        summation += i**3\n    return summation**3 - sum([i for i in range(1, n+1)])\n",
        "num_ids": 54
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(n)\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + pow(i,3)\n    diff = pow(sum,3) - sum\n    return diff\n",
        "num_ids": 56
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes_of_n = 0\n    for i in range(1,n+1):\n        cubes_of_n = cubes_of_n + i**3\n    numbers_sum = 0\n    for i in range(1,n+1):\n        numbers_sum = numbers_sum + i\n    return (n*n*n) - (numbers_sum**3)\n",
        "num_ids": 95
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if (n < 1) :\n        return 0\n    else:\n        return (n*(n+1)*(2*n+1))/6 - difference(n-1)\n",
        "num_ids": 46
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i*i*i\n    return sum\n    \ndef factorial(n) :  \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    sum=1\n    for i in range(1,n+1):\n        sum=sum*i\n    return sum\n    \ndef fibonacci(n) :  \n    '''\n    Write a python function to find the nth fibonacci number (0-based)\n    '''\n    if n==0 or n==1 :\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef prime(n) :  \n    '''\n    Write a python function to find the nth prime number.\n    '''\n    for i in range(2,n+1):\n        if (n%i==0):\n            return False\n    return True\n    \ndef sum_of_even(n) :  \n    '''\n    Write a python function to find the sum of the even numbers from 1 to n.\n    '''\n    sum=0\n    for i in range(2,n+1):\n        if i%2==0:\n            sum=sum+i\n    return sum\n    \ndef sum_of_odd(n) :  \n    '''\n    Write a python function to find the sum of the odd numbers from 1 to n.\n    '''\n    sum=0\n    for i in range(2,n+1):\n        if i%2==1:\n            sum=sum+i\n    return sum\n    \ndef sum_of_digits(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    sum=0\n    while n>0:\n        sum=sum+n%10\n        n=n//10\n    return sum\n    \ndef sum_of_digits_recursive(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (recursive version)\n    '''\n    if n<10:\n        return n\n    else:\n        return (n%10) + sum_of_digits_recursive(n//10)\n    \ndef sum_of_digits_iterative(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (iterative version)\n    '''\n    sum=0\n    while n>0:\n        sum=sum+n%10\n        n=n//10\n    return sum\n    \ndef sum_of_digits_iterative2(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (iterative version)\n    '''\n    sum=0\n    while n>0:\n        sum=sum+n%10\n        n=n//10\n    return sum\n    \ndef sum_of_digits_iterative3(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (iterative version)\n    '''\n    sum=0\n    while n>0:\n        sum=sum+n%10\n        n=n//10\n    return sum\n    \ndef sum_of_digits_recursive2(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (recursive version)\n    '''\n    if n<10:\n        return n\n    else:\n        return (n%10) + sum_of_digits_recursive2(n//10)\n    \ndef sum_of_digits_recursive3(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (recursive version)\n    '''\n    if n<10:\n        return n\n    else:\n        return (n%10) + sum_of_digits_recursive3(n//10)\n    \ndef sum_of_digits_recursive4(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (recursive version)\n    '''\n    if n<10:\n        return n\n    else:\n        return (n%10) + sum_of_digits_recursive4(n//10)\n    \ndef sum_of_digits_recursive5(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (recursive version)\n    '''\n    if n<10:\n        return n\n    else:\n        return (n%10) + sum_of_digits_recursive5(n//10)\n    \ndef sum_of_digits_recursive6(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (recursive version)\n    '''\n    if n<10:\n        return n\n    else:\n        return (n%10) + sum_of_digits_recursive6(n//10)\n    \ndef sum_of_digits_recursive7(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (recursive version)\n    '''\n    if n<10:\n        return n\n    else:\n        return (n%10) + sum_of_digits_recursive7(n//10)\n    \ndef sum_of_digits_recursive8(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (recursive version)\n    '''\n    if n<10:\n        return n\n    else:\n        return (n%10) + sum_of_digits_recursive8(n//10)\n    \ndef sum_of_digits_recursive9(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (recursive version)\n    '''\n    if n<10:\n        return n\n    else:\n        return (n%10) + sum_of_digits_recursive9(n//10)\n    \ndef sum_of_digits_recursive10(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (recursive version)\n    '''\n    if n<10:\n        return n\n    else:\n        return (n%10) + sum_of_digits_recursive10(n//10)\n    \ndef sum_of_digits_recursive11(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (recursive version)\n    '''\n    if n<10:\n        return n\n    else:\n        return (n%10) + sum_of_digits_recursive11(n//10)\n    \ndef sum_of_digits_recursive12(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (recursive version)\n    '''\n    if n<10:\n        return n\n    else:\n        return (n%10) + sum_of_digits_recursive12(n//10)\n    \ndef sum_of_digits_recursive13(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (recursive version)\n    '''\n    if n<10:\n        return n\n    else:\n        return (n%10) + sum_of_digits_recursive13(n//10)\n    \ndef sum_of_digits_recursive14(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (recursive version)\n    '''\n    if n<10:\n        return n\n    else:\n        return (n%10) + sum_of_digits_recursive14(n//10)\n    \ndef sum_of_digits_recursive15(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number. (re",
        "num_ids": 21
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Hint: Use the xor operator\n    Cnt = 0\n    for i in range(0,N-1) : \n        for j in range(i+1,N) : \n            if A[i] ^ A[j] & 1 : \n                Cnt += 1\n    return Cnt\n",
        "num_ids": 76
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(N) :\n            if i!= j :\n                if A[i] ^ A[j] & 1 :\n                    count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # hash = {}\n    # for i in range(N):\n    #     for j in range(i+1, N):\n    #         if A[i]^A[j]%2 == 1 :\n    #             hash[A[i]^A[j]] = 1\n    # count = 0\n    # for i in range(N):\n    #     if A[i] in hash:\n    #         count += 1\n    # return count\n    # return len([x for x in A if x&1])\n    return len(set([x for x in A if x&1]))\n",
        "num_ids": 143
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    C=[]\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if (A[i]^A[j]) & 1 ==1 : \n                C.append((i,j))\n    print C\n    return len(C)\n",
        "num_ids": 73
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) & 1 :\n                count = count + 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] & 1 :\n                count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) & 1 :\n                count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) :\n            if ( A[i]^A[j] ) & 1 : \n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if (A[i]^A[j])%2 == 1 : \n                Count += 1\n    return Count\n",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if l[i] & 1 :\n            count = count + 1\n    return count\n    \ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if not l[i] & 1 :\n            count = count + 1\n    return count\n    \ndef find_Even_Pair_Alternate(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if (l[i] ^ l[i+1]) & 1 :\n            count = count + 1\n    return count\n    \ndef find_Odd_Pair_Alternate(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if (l[i] ^ l[i+1]) & 1 :\n            count = count + 1\n    return count\n    \ndef find_Odd_Pair_Alternate_2(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if not (l[i] ^ l[i+1]) & 1 :\n            count = count + 1\n    return count\n    \ndef find_Odd_Pair_Alternate_3(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if (l[i] ^ l[i+1]) & 1 :\n            count = count + 1\n    return count\n    \ndef find_Odd_Pair_Alternate_4(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if not (l[i] ^ l[i+1]) & 1 :\n            count = count + 1\n    return count\n    \ndef find_Odd_Pair_Alternate_5(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if (l[i] ^ l[i+1]) & 1 :\n            count = count + 1\n    return count\n    \ndef find_Odd_Pair_Alternate_6(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if not (l[i] ^ l[i+1]) & 1 :\n            count = count + 1\n    return count\n    \ndef find_Odd_Pair_Alternate_7(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if (l[i] ^ l[i+1]) & 1 :\n            count = count + 1\n    return count\n    \ndef find_Odd_Pair_Alternate_8(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if not (l[i] ^ l[i+1]) & 1 :\n            count = count + 1\n    return count\n    \ndef find_Odd_Pair_Alternate_9(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if (l[i] ^ l[i+1]) & 1 :\n            count = count + 1\n    return count\n    \ndef find_Odd_Pair_Alternate_10(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if not (l[i] ^ l[i+1]) & 1 :\n            count = count + 1\n    return count\n    \ndef find_Odd_Pair_Alternate_11(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if (l[i] ^ l[i+1]) & 1 :\n            count = count + 1\n    return count\n    \ndef find_Odd_Pair_Alternate_12(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if not (l[i] ^ l[i+1]) & 1 :\n            count = count + 1\n    return count\n    \ndef find_Odd_Pair_Alternate_13(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = []\n    count = 0\n    for i in xrange(N-1):\n        l.append(A[i]^A[i+1])\n    for i in xrange(N-1):\n        if (l[i] ^ l[i+1]) & 1 :\n            count = count + ",
        "num_ids": 77
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    str_ = string[:]\n    str_.lower()\n    return str_.upper()\n",
        "num_ids": 23
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    string_list = list(string)\n    new_string_list = []\n    \n    for i, char in enumerate(string_list):\n        if char.isupper():\n            new_string_list.append(char.lower())\n        elif char.islower():\n            new_string_list.append(char.upper())\n        else:\n            new_string_list.append(char)\n    \n    return ''.join(new_string_list)\n",
        "num_ids": 115
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([x.swapcase() for x in string])\n",
        "num_ids": 20
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for letter in string:\n        if letter.isupper():\n            new_string += letter.lower()\n        elif letter.islower():\n            new_string += letter.upper()\n        else:\n            new_string += letter\n    return new_string\n",
        "num_ids": 70
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([letter.lower() if letter.isupper() else letter.upper() for letter in string])\n",
        "num_ids": 29
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    newstring = ''\n    for character in string:\n        if character.isupper():\n            newstring += character.lower()\n        else:\n            newstring += character.upper()\n    return newstring\n",
        "num_ids": 50
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    #!/usr/bin/env python\n    # The function takes two arguments\n    # The first is the integer number\n    # The second is the integer number\n    # The function returns the sum of the per-digit difference between the two integers\n    #\n    # Example: digit_distance_nums(1234567, 54321) => 12\n    # Example: digit_distance_nums(12, 1234567) => 15\n    # Example: digit_distance_nums(123456789, 12345) => 0\n    # Example: digit_distance_nums(54321, 123456789) => 15\n    #\n    # Author: Marcelo G. Manzano\n    # - date: 09/13/2016\n    # - version: 1.0\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    ",
        "num_ids": 2005
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = int(str(n1)[0]) - int(str(n2)[0])\n    d2 = int(str(n1)[1]) - int(str(n2)[1])\n    d3 = int(str(n1)[2]) - int(str(n2)[2])\n    d4 = int(str(n1)[3]) - int(str(n2)[3])\n    return d1 + d2 + d3 + d4\n",
        "num_ids": 112
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1)) < len(str(n2)):\n        n1, n2 = n2, n1\n    return sum(int(i) - int(j) for i, j in zip(str(n1), str(n2)))\n",
        "num_ids": 65
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    len1 = len(str(n1))\n    len2 = len(str(n2))\n    if len1 > len2:\n        for i in range(len1 - len2):\n            n2 = '0' + str(n2)\n    else:\n        for i in range(len2 - len1):\n            n1 = '0' + str(n1)\n    num1 = str(n1)\n    num2 = str(n2)\n    num1 = num1[::-1]\n    num2 = num2[::-1]\n    arr1 = list(num1)\n    arr2 = list(num2)\n    ans = 0\n    for i in range(len(arr1)):\n        ans += abs(int(arr1[i]) - int(arr2[i]))\n    return ans\n",
        "num_ids": 201
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(map(operator.sub, [int(digit) for digit in str(n1)], [int(digit) for digit in str(n2)]))\n",
        "num_ids": 41
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < n2:\n        return sum([abs(n1%10-n2%10)]) + digit_distance_nums(n1//10, n2//10)\n    else:\n        return sum([abs(n1%10-n2%10)])\n",
        "num_ids": 69
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2))])\n",
        "num_ids": 36
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    int_1 = str(n1)\n    int_2 = str(n2)\n    dif_1 = int_1[1:]\n    dif_2 = int_2[1:]\n    n1 = int(dif_1)\n    n2 = int(dif_2)\n    total = n1 + n2\n    return total\n",
        "num_ids": 87
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1))!= len(str(n2)):\n        raise ValueError('Inputs must be same length')\n    return sum(abs(int(str(n1)[i]) - int(str(n2)[i])) for i in range(len(str(n1))))\n",
        "num_ids": 74
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def int_to_str(num):\n        return [int(x) for x in str(num)]\n    def digit_distance(num1, num2):\n        num1_str = int_to_str(num1)\n        num2_str = int_to_str(num2)\n        return sum([abs(x1-x2) for x1,x2 in zip(num1_str, num2_str)])\n    return digit_distance(n1, n2)\n",
        "num_ids": 119
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -sys.maxsize - 1\n    curr_sum = 0\n",
        "num_ids": 23
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n",
        "num_ids": 104
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n",
        "num_ids": 16
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    if size == 0:\n        return 0\n    else:\n        max_ending_here = a[0]\n        max_so_far = a[0]\n        for i in range(1, size):\n            max_ending_here = max(a[i], max_ending_here + a[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n",
        "num_ids": 108
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n    max_ending_here = max(a[0], a[1])\n    max_so_far = a[0]\n    for i in range(2, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "num_ids": 122
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
        "num_ids": 81
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    best_sum = 0\n    current_start = 0\n    current_end = 0\n    for i in range(0,size):\n        if current_sum <= 0:\n            current_sum = a[i]\n            current_end = i\n        else:\n            current_sum += a[i]\n        if current_sum > best_sum:\n            best_sum = current_sum\n            current_start = current_end-1\n    return best_sum\n",
        "num_ids": 118
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    sum_so_far = a[0]\n    for i in range(1, size):\n        sum_so_far = max(a[i], sum_so_far + a[i])\n        max_sum = max(sum_so_far, max_sum)\n    return max_sum\n",
        "num_ids": 83
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if not a:\n        return 0\n    elif size == 1:\n        return a[0]\n",
        "num_ids": 27
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = []\n    for i in test_tup1:\n        if i not in union_elements:\n            union_elements.append(i)\n    for i in test_tup2:\n        if i not in union_elements:\n            union_elements.append(i)\n    return sorted(union_elements)\n",
        "num_ids": 86
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n    else:\n        return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n",
        "num_ids": 90
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tup = list(set(test_tup1 + test_tup2))\n    return sorted(new_tup)\n",
        "num_ids": 35
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    for i in test_tup1:\n        if i not in union_list:\n            union_list.append(i)\n    for i in test_tup2:\n        if i not in union_list:\n            union_list.append(i)\n    return sorted(union_list)\n",
        "num_ids": 80
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create an empty list to hold the returned values\n    temp_lst = []\n    # Loop through each tuple and add each element of both tuples to the list\n    for i in test_tup1:\n        temp_lst.append(i)\n    for i in test_tup2:\n        temp_lst.append(i)\n    # Sort the list\n    temp_lst.sort()\n    # Return the sorted list\n    return temp_lst\n",
        "num_ids": 113
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(test_tup1)\n    union_list.extend(list(test_tup2))\n    union_list.sort()\n    return union_list\n",
        "num_ids": 47
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    for i in test_tup1:\n        if i not in union:\n            union.append(i)\n    for i in test_tup2:\n        if i not in union:\n            union.append(i)\n    return sorted(union)\n",
        "num_ids": 68
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # test_list1 = sorted(set(test_tup1))\n    # test_list2 = sorted(set(test_tup2))\n    #\n    # result = []\n    #\n    # for i in test_list1:\n    #     if i in test_list2:\n    #         result.append(i)\n    #\n    # print(result)\n",
        "num_ids": 93
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxlength = 0\n    for i in range(len(lst)):\n        count = 0\n        for j in range(i, len(lst)):\n            count = count + 1\n            if lst[j] == lst[i]:\n                maxlength = max(maxlength, count)\n    return maxlength\n",
        "num_ids": 79
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #longest_list = 0\n    #for i in range(len(lst)):\n    #    for j in range(i,len(lst)):\n    #        sublist = lst[i:j+1]\n    #        if(len(sublist)>longest_list):\n    #            longest_list = len(sublist)\n    #return longest_list\n    #lst = [1,2,3,1,2,3]\n    #print(Find_Max_Length(lst))\n    return max(map(len,lst))\n",
        "num_ids": 141
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    res=0\n    temp=0\n    for i in range(len(lst)):\n        temp=0\n        for j in range(i,len(lst)):\n            if lst[j]<lst[i]:\n                temp+=1\n        if temp>res:\n            res=temp\n    return res\n",
        "num_ids": 80
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = []\n    for i in range(len(lst)):\n        temp = []\n        for j in range(i,len(lst)):\n            temp.append(lst[j])\n            if sum(temp)==0:\n                result.append(len(temp))\n                break\n    if len(result)==0:\n        result.append(0)\n    return max(result)\n",
        "num_ids": 99
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    m = 0\n    count = 0\n    for i in lst:\n        if type(i)==type([]):\n            count+=1\n            if count > m:\n                m = count\n        else:\n            count = 0\n    return m\n",
        "num_ids": 62
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 1\n    maxCount = 1\n    l = len(lst)\n    for i in range(l-1):\n        if lst[i] == lst[i+1]:\n            count += 1\n        else:\n            count = 1\n        if maxCount < count:\n            maxCount = count\n    return maxCount\n",
        "num_ids": 82
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return 0\n    current_len = 0\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i:]) > current_len:\n            current_len = len(lst[i:])\n            max_len = current_len\n    return max_len\n",
        "num_ids": 85
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize maximum length of sublists and current_length to 0\n    max_length = 0\n    current_length = 0\n",
        "num_ids": 32
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    index = 0\n    for i in range(len(lst)):\n        if i == 0:\n            index = lst[i]\n            count = 1\n        elif lst[i] == index:\n            count += 1\n        else:\n            index = lst[i]\n            count = 1\n        if count > count:\n            count = count\n    return count\n",
        "num_ids": 97
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l=len(lst)\n    m=0\n    for i in range(l):\n        for j in range(i,l):\n            if j-i>m:\n                m=j-i\n                b=i\n                e=j\n    print(lst[b:e+1])\n    return m\n        \n",
        "num_ids": 81
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text[0]!= '\"' or text[-1]!= '\"':\n        raise ValueError(\"text must be enclosed in double quotation marks\")\n",
        "num_ids": 39
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        pos = text.index('\"')\n        return text[pos+1:text.rindex('\"')]\n    except ValueError:\n        return text\n",
        "num_ids": 43
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    v = re.findall(r'\\\"(.*?)\\\"', text)\n    #print v\n    return v\n",
        "num_ids": 30
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall(r'\\\"(.*?)\\\"', text)\n    return result\n    \n",
        "num_ids": 27
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('-',' ')\n    text = text.replace('+',' ')\n    text = text.replace('=',' ')\n    text = text.replace('/',' ')\n    text = text.replace('%',' ')\n    text = text.replace('*',' ')\n    text = text.replace('_',' ')\n    text = text.replace('@',' ')\n    text = text.replace('.',' ')\n    text = text.replace(':',' ')\n    text = text.replace(';',' ')\n    text = text.replace('>',' ')\n    text = text.replace('<',' ')\n    text = text.replace('\\\\',' ')\n    text = text.replace(']',' ')\n    text = text.replace('[',' ')\n    text = text.replace('`',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('{',' ')\n    text = text.replace('}',' ')\n    text = text.replace('\\\"',' ')\n    text = text.replace('\\'',' ')\n    text = text.replace('|',' ')\n    text = text.replace('#',' ')\n    text = text.replace('=',' ')\n    text = text.replace(',',' ')\n    text = text.replace('+',' ')\n    text = text.replace('|',' ')\n    text = text.replace('@',' ')\n    text = text.replace('!',' ')\n    text = text.replace('?',' ')\n    text = text.replace('[',' ')\n    text = text.replace(']',' ')\n    text = text.replace('.',' ')\n    text = text.replace('-',' ')\n    text = text.replace('+',' ')\n    text = text.replace('/',' ')\n    text = text.replace('%',' ')\n    text = text.replace('*',' ')\n    text = text.replace('_',' ')\n    text = text.replace('@',' ')\n    text = text.replace(':',' ')\n    text = text.replace(';',' ')\n    text = text.replace('>',' ')\n    text = text.replace('<',' ')\n    text = text.replace('\\\\',' ')\n    text = text.replace(']',' ')\n    text = text.replace('[',' ')\n    text = text.replace('`',' ')\n    text = text.replace('{',' ')\n    text = text.replace('}',' ')\n    text = text.replace('\"',' ')\n    text = text.replace('\\'',' ')\n    text = text.replace('~',' ')\n    text = text.replace('\\\\',' ')\n    text = text.replace('!',' ')\n    text = text.replace('?',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('{',' ')\n    text = text.replace('}',' ')\n    text = text.replace(';',' ')\n    text = text.replace('*',' ')\n    text = text.replace('/',' ')\n    text = text.replace('%',' ')\n    text = text.replace('$',' ')\n    text = text.replace('|',' ')\n    text = text.replace('#',' ')\n    text = text.replace('&',' ')\n    text = text.replace('+',' ')\n    text = text.replace('<',' ')\n    text = text.replace('>',' ')\n    text = text.replace('#',' ')\n    text = text.replace('@',' ')\n    text = text.replace('?',' ')\n    text = text.replace('-',' ')\n    text = text.replace('_',' ')\n    text = text.replace('|',' ')\n    text = text.replace('\\n',' ')\n    text = text.replace('\\r',' ')\n    text = text.replace('\\t',' ')\n    text = text.replace('\\f',' ')\n    text = text.replace('\\b',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')\n    text = text.replace('\\a',' ')",
        "num_ids": 2015
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.strip()\n    pattern = r'\\\"([^\\\"]*)\\\"'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches\n    else:\n        print('No quotation marks found in this string.')\n        return None\n",
        "num_ids": 68
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # match = re.search(r'(\\\"[^\\\"]*\\\"|\\'[^\\']*\\')', text)\n    # if match is not None:\n    #     start, end = match.span()\n    #     return text[start+1:end-1]\n    # return None\n",
        "num_ids": 74
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #text=\"\"\"Tibame'os sayfas\u0131\n    #di\u011fer sayfa'daki sayfa'lerin \u00f6zellikleri kar\u015f\u0131la\u015ft\u0131r\u0131l\u0131r\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131\"'nin sonuna \" \"\n    #\u00f6zelle\u015ftirilmi\u015f olan kelime i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda\n    #tibame'daki verilerinin birer boyutda kar\u015f\u0131la\u015ft\u0131r\u0131l\u0131r\n    #bunun i\u00e7in a,b,c'lerin veya b\u00fcy\u00fck k\u00fc\u00e7\u00fck harfleri ay\u0131r\u0131l\u0131r\n    #bunun i\u00e7in \"tibame'os sayfas\u0131'nin sonunda'\u0131n ba\u015f\u0131nda ve sonunda\n    #'i' karakteri dahil olup olmad\u0131\u011f\u0131n\u0131 kontrol edecek\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda\" i\u00e7in boyut kontrol\u00fc yapar\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda'i' ve \"Tibame'os sayfas\u0131'nin sonunda\"\n    #i\u00e7indeki ayr\u0131 ayr\u0131 aralar\u0131na - i\u015fareti koyar\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda a, b, c'lerin veya b\u00fcy\u00fck\n    #k\u00fc\u00e7\u00fck harflerin ba\u015f\u0131nda ve sonunda 'i' karakteri dahil olup olmad\u0131\u011f\u0131n\u0131\n    #kontrol edecek\"\"\"\n    #text=\"\"\"Tibame'os sayfas\u0131\n    #di\u011fer sayfa'daki sayfa'lerin \u00f6zellikleri kar\u015f\u0131la\u015ft\u0131r\u0131l\u0131r\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131\"'nin sonuna \" \"\n    #\u00f6zelle\u015ftirilmi\u015f olan kelime i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda\n    #tibame'daki verilerinin birer boyutda kar\u015f\u0131la\u015ft\u0131r\u0131l\u0131r\n    #bunun i\u00e7in a,b,c'lerin veya b\u00fcy\u00fck k\u00fc\u00e7\u00fck harfleri ay\u0131r\u0131l\u0131r\n    #bunun i\u00e7in \"tibame'os sayfas\u0131'nin sonunda'\u0131n ba\u015f\u0131nda ve sonunda\n    #'i' karakteri dahil olup olmad\u0131\u011f\u0131n\u0131 kontrol edecek\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda\" i\u00e7in boyut kontrol\u00fc yapar\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda'i' ve \"Tibame'os sayfas\u0131'nin sonunda\"\n    #i\u00e7indeki ayr\u0131 ayr\u0131 aralar\u0131na - i\u015fareti koyar\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda a, b, c'lerin veya b\u00fcy\u00fck\n    #k\u00fc\u00e7\u00fck harflerin ba\u015f\u0131nda ve sonunda 'i' karakteri dahil olup olmad\u0131\u011f\u0131n\u0131\n    #kontrol edecek\"\"\"\n    #text=\"\"\"Tibame'os sayfas\u0131\n    #di\u011fer sayfa'daki sayfa'lerin \u00f6zellikleri kar\u015f\u0131la\u015ft\u0131r\u0131l\u0131r\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131\"'nin sonuna \" \"\n    #\u00f6zelle\u015ftirilmi\u015f olan kelime i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda\n    #tibame'daki verilerinin birer boyutda kar\u015f\u0131la\u015ft\u0131r\u0131l\u0131r\n    #bunun i\u00e7in a,b,c'lerin veya b\u00fcy\u00fck k\u00fc\u00e7\u00fck harfleri ay\u0131r\u0131l\u0131r\n    #bunun i\u00e7in \"tibame'os sayfas\u0131'nin sonunda'\u0131n ba\u015f\u0131nda ve sonunda\n    #'i' karakteri dahil olup olmad\u0131\u011f\u0131n\u0131 kontrol edecek\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda\" i\u00e7in boyut kontrol\u00fc yapar\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda'i' ve \"Tibame'os sayfas\u0131'nin sonunda\"\n    #i\u00e7indeki ayr\u0131 ayr\u0131 aralar\u0131na - i\u015fareti koyar\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda a, b, c'lerin veya b\u00fcy\u00fck\n    #k\u00fc\u00e7\u00fck harflerin ba\u015f\u0131nda ve sonunda 'i' karakteri dahil olup olmad\u0131\u011f\u0131n\u0131\n    #kontrol edecek\"\"\"\n    #text=\"\"\"Tibame'os sayfas\u0131\n    #di\u011fer sayfa'daki sayfa'lerin \u00f6zellikleri kar\u015f\u0131la\u015ft\u0131r\u0131l\u0131r\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131\"'nin sonuna \" \"\n    #\u00f6zelle\u015ftirilmi\u015f olan kelime i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda\n    #tibame'daki verilerinin birer boyutda kar\u015f\u0131la\u015ft\u0131r\u0131l\u0131r\n    #bunun i\u00e7in a,b,c'lerin veya b\u00fcy\u00fck k\u00fc\u00e7\u00fck harfleri ay\u0131r\u0131l\u0131r\n    #bunun i\u00e7in \"tibame'os sayfas\u0131'nin sonunda'\u0131n ba\u015f\u0131nda ve sonunda\n    #'i' karakteri dahil olup olmad\u0131\u011f\u0131n\u0131 kontrol edecek\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda\" i\u00e7in boyut kontrol\u00fc yapar\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda'i' ve \"Tibame'os sayfas\u0131'nin sonunda\"\n    #i\u00e7indeki ayr\u0131 ayr\u0131 aralar\u0131na - i\u015fareti koyar\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda a, b, c'lerin veya b\u00fcy\u00fck\n    #k\u00fc\u00e7\u00fck harflerin ba\u015f\u0131nda ve sonunda 'i' karakteri dahil olup olmad\u0131\u011f\u0131n\u0131\n    #kontrol edecek\"\"\"\n    #text=\"\"\"Tibame'os sayfas\u0131\n    #di\u011fer sayfa'daki sayfa'lerin \u00f6zellikleri kar\u015f\u0131la\u015ft\u0131r\u0131l\u0131r\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131\"'nin sonuna \" \"\n    #\u00f6zelle\u015ftirilmi\u015f olan kelime i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda\n    #tibame'daki verilerinin birer boyutda kar\u015f\u0131la\u015ft\u0131r\u0131l\u0131r\n    #bunun i\u00e7in a,b,c'lerin veya b\u00fcy\u00fck k\u00fc\u00e7\u00fck harfleri ay\u0131r\u0131l\u0131r\n    #bunun i\u00e7in \"tibame'os sayfas\u0131'nin sonunda'\u0131n ba\u015f\u0131nda ve sonunda\n    #'i' karakteri dahil olup olmad\u0131\u011f\u0131n\u0131 kontrol edecek\n    #bunun i\u00e7in \"Tibame'os sayfas\u0131'nin sonunda\" i\u00e7in boyut kontrol\u00fc yapar\n    #bu",
        "num_ids": 2010
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\\\"(.*?)\\\"', text)\n",
        "num_ids": 18
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    return pattern.findall(text)\n",
        "num_ids": 30
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 0 and dictionary[arr[j]] > 0:\n                count += 1\n            dictionary[arr[i]] -= 1\n            dictionary[arr[j]] -= 1\n    return count\n    \n    \ndef count_Pairs_Worst(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 1 and dictionary[arr[j]] > 1:\n                count += 1\n            dictionary[arr[i]] -= 1\n            dictionary[arr[j]] -= 1\n    return count\n    \n    \ndef count_Pairs_Best(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 0 and dictionary[arr[j]] > 0:\n                count += 1\n            dictionary[arr[i]] -= 1\n            dictionary[arr[j]] -= 1\n    return count\n    \n    \ndef count_Pairs_Best_2(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 0 and dictionary[arr[j]] > 0:\n                count += 1\n            dictionary[arr[i]] -= 1\n            dictionary[arr[j]] -= 1\n    return count\n    \n    \ndef count_Pairs_Best_3(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 0 and dictionary[arr[j]] > 0:\n                if arr[i] < arr[j]:\n                    count += 1\n                elif arr[i] > arr[j]:\n                    count += 1\n                dictionary[arr[i]] -= 1\n                dictionary[arr[j]] -= 1\n    return count\n    \n    \ndef count_Pairs_Best_4(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 0 and dictionary[arr[j]] > 0:\n                if arr[i] < arr[j]:\n                    count += 1\n                elif arr[i] > arr[j]:\n                    count += 1\n                dictionary[arr[i]] -= 1\n                dictionary[arr[j]] -= 1\n    return count\n    \n    \ndef count_Pairs_Best_5(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 0 and dictionary[arr[j]] > 0:\n                if arr[i] < arr[j]:\n                    count += 1\n                elif arr[i] > arr[j]:\n                    count += 1\n                dictionary[arr[i]] -= 1\n                dictionary[arr[j]] -= 1\n    return count\n    \n    \ndef count_Pairs_Best_6(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # first of all, create a dictionary of the elements.\n    # in this dictionary, the key is the element and the value is the frequency of that element in the list.\n    dictionary = {}\n    for element in arr:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    \n    # now go through the list and count the pairs.\n    # we should have the values in descending order.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dictionary[arr[i]] > 0 and dictionary[arr[j]] > 0:\n                if arr[i] < arr[j]:\n                    count += 1\n                elif arr[i] > arr[j]:\n                    count += 1\n                dictionary[arr[i]] -= 1\n                ",
        "num_ids": 207
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n == 0:\n        return 0\n    else:\n        if n == 1:\n            return 1 if arr[0] == arr[1] else 0\n        else:\n            return count_Pairs(arr,n-1) + count_Pairs(arr,n-2) + count_Pairs(arr,n-3) if arr[n-1]!= arr[n-2] else count_Pairs(arr,n-2)\n",
        "num_ids": 109
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if len(arr) == 2:\n        return 1 if arr[0]!=arr[1] else 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2 if arr[0]!= arr[1] else 0\n    else:\n        return count_Pairs(arr[:-2],n-1) + count_Pairs(arr[:-1],n) + count_Pairs(arr[:-2],n-2)\n",
        "num_ids": 137
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #A counter to count the pairs.\n    count = 0\n    #An array to store the elements in the list.\n    arr.sort()\n    #Variable to store the elements in the list.\n    num = len(arr)\n    #Two pointers to point to each element.\n    i,j = 0,1\n    #Loop to count the pairs.\n    while j<num:\n        #If the elements are different increment the counter.\n        if arr[j]!= arr[i]:\n            count+=j-i\n            #Update the pointers to point to the next elements.\n            i+=1\n            j+=1\n        else:\n            #If the elements are same increment the pointers to point to next elements.\n            j+=1\n            i+=1\n    return count\n",
        "num_ids": 182
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count = count + 1\n    print count \n",
        "num_ids": 55
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # if n==0:\n    #     return 0\n    # elif n==1:\n    #     return 1\n    # else:\n    #     return arr[n-1]*(count_Pairs(arr,n-1)+count_Pairs(arr,n-2))\n    count=0\n    for i in xrange(n):\n        for j in xrange(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n",
        "num_ids": 122
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Your code here\n    # A solution can be found here: http://www.geeksforgeeks.org/counting-pairs-with-equal-sum/\n    # Note: a pair is defined as sum of two elements is equal to each other\n    # pair_count[i] = count pairs with sum i\n    pair_count = [0]*n\n",
        "num_ids": 86
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in xrange(n): \n        for j in xrange(i+1,n): \n            if arr[i]!= arr[j]: \n                count = count + 1\n    return count \n",
        "num_ids": 59
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #create an empty dictionary\n    count = {}\n    for i in range(n):\n        if arr[i] not in count:\n            count[arr[i]] = 0\n        count[arr[i]] += 1\n    #calculate the number of pairs with the same keys\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count[arr[i]] -= 1\n                break\n    #return the number of pairs\n    return sum([count[k]*(count[k]-1)/2 for k in count])\n",
        "num_ids": 146
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    i = 0\n    j = 1\n    count = 0\n    while j < n:\n        if arr[i] == arr[j]:\n            j = j + 1\n        else:\n            count = count + 1\n            i = j\n            j = j + 1\n    return count \n",
        "num_ids": 77
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n",
        "num_ids": 13
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    \n    # The regular expression pattern to check for words that are not palindromes\n    pattern = r'[^a-z]'\n    \n    # A simple regular expression to split the input word \n    return re.split(pattern, word)\n",
        "num_ids": 60
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n",
        "num_ids": 13
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    for c in word:\n        print c\n",
        "num_ids": 13
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    \ndef a(n):\n    return n + 1\n",
        "num_ids": 23
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int,str(n)))\n",
        "num_ids": 15
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = list(str(n))\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    #base case:\n    if n == 0:\n        return 0\n    #recursive case:\n    else:\n        return n % 10 + sum_digits(n / 10)\n",
        "num_ids": 46
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(x) for x in str(n))\n",
        "num_ids": 18
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Your Code Here\n    sum = 0\n    while n:\n        sum += n%10\n        n //= 10\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    if n == 0:\n        return 0\n    while n > 0:\n        s += n % 10\n        n /= 10\n    return s\n",
        "num_ids": 42
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n / 10)\n",
        "num_ids": 33
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    if n == 0:\n        return False\n    else:\n        for i in range(n-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n",
        "num_ids": 61
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n    \ndef is_anagram(str1,str2):\n    '''\n    Write a function to determine whether two words are anagrams of each other.\n    '''\n    dict1={}\n    dict2={}\n    for i in str1:\n        if i in dict1:\n            dict1[i]+=1\n        else:\n            dict1[i]=1\n    for i in str2:\n        if i in dict2:\n            dict2[i]+=1\n        else:\n            dict2[i]=1\n    if dict1==dict2:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    l1=len(str1)\n    if str1[0:l1/2]==str1[l1/2:l1][::-1]:\n        return True\n    return False\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    flag = 1\n    for i in range(1, len(list1)):\n        if list1[i-1] > list1[i]:\n            flag = 0\n            break\n        \n    return flag\n",
        "num_ids": 54
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        return list1[0] <= list1[1] and issort_list(list1[1:])\n",
        "num_ids": 47
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if sorted(list1) == list1:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    length = len(list1)\n    for i in range(length-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dicts = []\n    for i in range(length):\n        empty_dicts.append(dict())\n    return empty_dicts\n",
        "num_ids": 37
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in xrange(length)]\n",
        "num_ids": 16
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length <= 0:\n        return None\n    if length == 1:\n        return [{}]\n    res = [{} for _ in xrange(length)]\n    return res\n",
        "num_ids": 46
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted([sorted(sublist) for sublist in list1])\n",
        "num_ids": 20
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n    \n",
        "num_ids": 7
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n",
        "num_ids": 40
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    for i in list1:\n        sublists.append(i)\n    sublists.sort(key=lambda x:x[0])\n    return sublists\n",
        "num_ids": 46
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in list1]\n",
        "num_ids": 17
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key = lambda x: [len(i) for i in x])\n",
        "num_ids": 25
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n",
        "num_ids": 35
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    i=0\n    new_list=[]\n    while i<len(list1):\n        list1[i].sort()\n        new_list.append(list1[i])\n        i+=1\n    return new_list\n",
        "num_ids": 57
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for i in list1:\n        result.append(sorted(i))\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Initialize the new list\n    new_list = []\n    # For each sublist\n    for item in list1:\n        # Sort the sublist\n        item.sort()\n        # Append the sorted sublist to the new list\n        new_list.append(item)\n    # Return the new list\n    return new_list\n",
        "num_ids": 81
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for num in nums:\n        if num not in unique:\n            unique.append(num)\n    return unique\n",
        "num_ids": 35
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in nums:\n        if i not in unique_nums:\n            unique_nums.append(i)\n    return unique_nums\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return set(nums[0]) & set(nums[1])\n",
        "num_ids": 20
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n    \ndef remove_dups_in_lists(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n    \ndef make_string_beautiful(s):\n    '''\n    Write a python function to remove unnecessary whitespaces in a given string.\n    '''\n    s = s.strip()\n    return s\n    \ndef make_string_beautiful(s):\n    '''\n    Write a python function to remove unnecessary whitespaces in a given string.\n    '''\n    return s.strip()\n    \ndef to_celcius(temp):\n    '''\n    Write a python function to convert the given temperature in degree Fahrenheit to degree Celsius.\n    '''\n    return (temp - 32) / 1.8\n    \ndef to_celcius(temp):\n    '''\n    Write a python function to convert the given temperature in degree Fahrenheit to degree Celsius.\n    '''\n    return (temp - 32) / 1.8\n    \ndef to_fahrenheit(temp):\n    '''\n    Write a python function to convert the given temperature in degree Celsius to degree Fahrenheit.\n    '''\n    return temp * 1.8 + 32\n    \ndef to_fahrenheit(temp):\n    '''\n    Write a python function to convert the given temperature in degree Celsius to degree Fahrenheit.\n    '''\n    return temp * 1.8 + 32\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(s.count(v) for v in vowels)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum([1 for v in vowels if v in s])\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(s.count(v) for v in vowels)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(s.count(v) for v in vowels)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(s.count(v) for v in vowels)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return sum(1 for v in vowels if v in s)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '",
        "num_ids": 21
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    d = {}\n    for n in nums:\n        if n in d:\n            d[n] += 1\n        else:\n            d[n] = 1\n",
        "num_ids": 42
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    uniq_nums = []\n    for num in nums:\n        if num not in uniq_nums:\n            uniq_nums.append(num)\n    return uniq_nums\n",
        "num_ids": 51
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_dict = {}\n    for n in nums:\n        if n in nums_dict:\n            del nums_dict[n]\n        else:\n            nums_dict[n] = 1\n    return nums_dict.keys()\n",
        "num_ids": 63
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n    \n",
        "num_ids": 49
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = set(nums)\n    for i in unique:\n        if nums.count(i) > 1:\n            nums.remove(i)\n    return nums\n",
        "num_ids": 45
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    product = 1\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n            product = product * number\n    return product\n",
        "num_ids": 57
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dict_unique = {}\n    for i in list_data:\n        if i not in dict_unique:\n            dict_unique[i] = 1\n        else:\n            dict_unique[i] += 1\n    product = 1\n    for i in dict_unique:\n        product *= i**dict_unique[i]\n    return product\n",
        "num_ids": 83
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return_val = 1\n    for i in list_data:\n        return_val = return_val*i\n    return return_val\n",
        "num_ids": 35
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # list_data = [10,20,40,20,40,50,10,40,20]\n    product = 1\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    for i in unique_list:\n        product = product*i\n    return product\n",
        "num_ids": 89
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x, y: x * y, list(set(list_data)))\n    \n",
        "num_ids": 26
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    from functools import reduce\n    return reduce(lambda x,y: x*y, list(set(list_data)))\n",
        "num_ids": 32
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for elem in list_data:\n        if elem in list_data:\n            product *= elem\n    return product\n",
        "num_ids": 38
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_product = 1\n    for i in list_data:\n        unique_product = unique_product * i\n    return unique_product\n",
        "num_ids": 35
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # result = 1\n    # for i in list_data:\n    #     result *= i\n    # return result\n    return reduce(lambda x,y: x*y, list_data)\n",
        "num_ids": 49
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set()\n    product = 1\n    for data in list_data:\n        unique_numbers.add(data)\n    for number in unique_numbers:\n        product = product * number\n    return product\n",
        "num_ids": 57
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    return (2 * 3.14 * r * h) + (2 * 3.14 * (r ** 2))\n",
        "num_ids": 31
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = 2*pi*r*h + 2*pi*r**2\n    return S\n",
        "num_ids": 25
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area_cylinder = 2*pi*r*(r+h)\n    return surface_area_cylinder\n",
        "num_ids": 31
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*(r+h)\n",
        "num_ids": 22
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 2*pi*r*(r+h)\n    return s\n",
        "num_ids": 21
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    from math import pi,sqrt\n    \n    def cylinder_volume(r,h):\n        return (pi/4)*r**2*h\n    \n    def cylinder_surface_area(r,h):\n        return 2*pi*r*(r+h)\n    \n    def cylinder_surface_area_2(r,h):\n        return 2*pi*(r**2+r*h+h**2)\n    \n    def cylindrical_surface_area_2(r,h):\n        return 2*pi*r*(r+h)\n    \n    def cylindrical_surface_area_3(r,h):\n        return pi*r**2\n    \n    print cylinder_volume(r,h)\n    print cylinder_surface_area(r,h)\n    print cylinder_surface_area_2(r,h)\n    print cylindrical_surface_area_2(r,h)\n    print cylindrical_surface_area_3(r,h)\n    \n    \n    \n    ",
        "num_ids": 247
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate surface area with the formula:\n    # 2 * pi * r * (r + h)\n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n",
        "num_ids": 2015
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (pi * (r**2 + h**2))/4.0\n    ",
        "num_ids": 22
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    return pi*(r**2)+(pi*h*2)\n",
        "num_ids": 28
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * r**2 + 2*pi*r*h\n",
        "num_ids": 18
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    a = len(A)\n    b = len(B)\n    if a <= b: \n        return False\n    else: \n        for i in range(0,b):\n            if A[i] == B[i]:\n                continue\n            else:\n                return False\n        return True\n",
        "num_ids": 73
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(A)==list and type(B)==list:\n        if len(A)>len(B):\n            return False\n        else:\n            for i in range(len(A)):\n                if A[i] in B:\n                    B.remove(A[i])\n                    return is_Sub_Array(A,B)\n                else:\n                    return False\n    else:\n        return False\n    return True\n    \n",
        "num_ids": 106
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) <= len(B):\n        for i in range(len(B)):\n            if A[i] == B[i]:\n                if i == len(B)-1:\n                    return True\n            else:\n                return False\n    else:\n        return False\n        \n        \ndef is_Sub_String(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) <= len(B):\n        for i in range(len(B)):\n            if A[i] == B[i]:\n                if i == len(B)-1:\n                    return True\n            else:\n                return False\n    else:\n        return False\n",
        "num_ids": 69
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False\n    for i in range(len(B)): \n        if B[i] not in A: \n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) == 0:\n        return 1\n    else:\n        if A[0] in B:\n            return is_Sub_Array(A[1:],B)\n        else:\n            return 0\n",
        "num_ids": 54
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n1 = len(A)\n    n2 = len(B)\n    if n1 == n2:\n        for i in range(0,n1):\n            if A[i] == B[i]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 76
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    return sorted(A)==sorted(B)\ndef bsearch(A, x):\n    l = 0\n    r = len(A)-1\n    while l <= r:\n        mid = (l+r)/2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\ndef find_min_swaps(arr):\n    '''\n    Given an array of size n, find the minimum number of swaps required to sort the array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    if n == 2:\n        if arr[0] > arr[1]:\n            return 1\n        return 0\n    num_swaps = 0\n    for i in range(n):\n        temp = bsearch(arr, arr[i])\n        if temp!= i:\n            num_swaps += 1\n            arr[temp], arr[i] = arr[i], arr[temp]\n    return num_swaps\ndef merge(arr, start, mid, end):\n    i = start\n    j = mid+1\n    temp = []\n    while i <= mid and j <= end:\n        if arr[i] > arr[j]:\n            temp.append(arr[j])\n            j += 1\n        else:\n            temp.append(arr[i])\n            i += 1\n    while i <= mid:\n        temp.append(arr[i])\n        i += 1\n    while j <= end:\n        temp.append(arr[j])\n        j += 1\n    for i in range(start, end+1):\n        arr[i] = temp[i-start]\ndef merge_sort(arr, start, end):\n    if start < end:\n        mid = (start + end) / 2\n        merge_sort(arr, start, mid)\n        merge_sort(arr, mid+1, end)\n        merge(arr, start, mid, end)\n    return arr\ndef find_max_div(arr):\n    '''\n    Write a python function to find maximum of absolute values of array of elements.\n    '''\n    max_div = arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i]) > abs(max_div):\n            max_div = arr[i]\n    return max_div\ndef find_min_abs(arr):\n    '''\n    Write a python function to find minimum of absolute values of array of elements.\n    '''\n    min_abs = arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i]) < abs(min_abs):\n            min_abs = arr[i]\n    return min_abs\ndef find_max_sub_arr(arr):\n    '''\n    Write a python function to find max sub array.\n    '''\n    max_sum = arr[0]\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\ndef find_max_sub_arr_2(arr):\n    '''\n    Write a python function to find max sub array.\n    '''\n    max_sum = arr[0]\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum < 0:\n            current_sum = 0\n        else:\n            max_sum = max(max_sum, current_sum)\n    return max_sum\ndef find_min_sub_arr(arr):\n    '''\n    Write a python function to find min sub array.\n    '''\n    min_sum = arr[0]\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > 0:\n            current_sum = 0\n        else:\n            min_sum = min(min_sum, current_sum)\n    return min_sum\ndef find_min_sub_arr_2(arr):\n    '''\n    Write a python function to find min sub array.\n    '''\n    min_sum = arr[0]\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum < 0:\n            current_sum = 0\n        else:\n            min_sum = min(min_sum, current_sum)\n    return min_sum\ndef reverse_array(arr, start, end):\n    while start < end:\n        arr[start], arr[end-1] = arr[end-1], arr[start]\n        start += 1\n        end -= 1\n    return arr\ndef find_rotated_array(arr, k):\n    '''\n    Write a python function to find the index of the first element with given value.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left + right) / 2\n        if arr[mid] == k:\n            return mid\n        if arr[left] == arr[mid]:\n            left += 1\n        elif arr[mid] == arr[right]:\n            right -= 1\n        elif arr[left] > arr[mid]:\n            if (arr[left] - arr[mid]) < k - arr[mid]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            if (arr[mid] - arr[right]) < k - arr[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n    return -1\ndef find_rotated_array_2(arr, k):\n    '''\n    Write a python function to find the index of the first element with given value.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left < right:\n        mid = (left + right) / 2\n        if arr[mid] == k:\n            return mid\n        if arr[mid] > arr[left]:\n            if (arr[mid] - arr[left]) < k - arr[left]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            if (arr[right] - arr[mid]) < k - arr[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n    return -1\ndef find_rotated_array_3(arr, k):\n    '''\n    Write a python function to find the index of the first element with given value.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left < right:\n        mid = (left + right) / 2\n        if arr[mid] == k:\n            return mid\n        if arr[mid] > arr[left]:\n            if (arr[mid] - arr[left]) < k - arr[left]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            if (arr[right] - arr[mid]) < k - arr[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n    return -1\ndef find_rotated_array_4(arr, k):\n    '''\n    Write a python function to find the index of the first element with given value.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left < right:\n        mid = (left + right) / 2\n        if arr[mid] == k:\n            return mid\n        if arr[mid] < arr[left]:\n            if (arr[mid] - arr[left]) < k - arr[left]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            if (arr[right] - arr[mid]) < k - arr[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n    return -1\ndef find_rotated_array_5(arr, k):\n    '''\n    Write a python function to find the index of the first element with given value.\n    '",
        "num_ids": 22
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    sub_array = False\n    if len(A) <= len(B):\n        for index in xrange(len(A)):\n            if A[index] == B[index]:\n                index += 1\n            else:\n                sub_array = False\n                break\n            if index == len(A):\n                sub_array = True\n    else:\n        return False\n    return sub_array\n",
        "num_ids": 95
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    m,n=len(A),len(B)\n    for i in range(m-n+1):\n        for j in range(n):\n            if B[j]!= A[i+j]:\n                break\n        else:\n            return True\n    return False\n",
        "num_ids": 68
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A==B:\n        return True\n    elif len(A)<len(B):\n        return False\n    else:\n        return is_Sub_Array(A[1:],B)\n",
        "num_ids": 50
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = abs(n)\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return n % 10 * last_Digit_Factorial(n // 10)\n",
        "num_ids": 56
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = int(n) \n    if n == 0: \n        return 1\n    else: \n        return n * last_Digit_Factorial(n - 1) \n",
        "num_ids": 46
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return -1\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n % 10\n",
        "num_ids": 39
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    s = str(factorial(n)) \n    return int(s[-1])\n",
        "num_ids": 24
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * last_Digit_Factorial(n-1)\n",
        "num_ids": 36
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    f = 1\n    i = 1\n    while i<=n:\n        f *= i\n        i += 1\n    return f % 10\n",
        "num_ids": 37
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n - 1)\n",
        "num_ids": 34
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def last_Digit_Factorial(n):\n        '''\n        Write a python function to find the last digit in factorial of a given number.\n        '''\n        if n < 1:\n            return 1\n        else:\n            return n * last_Digit_Factorial(n-1)\n    return last_Digit_Factorial(n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1969
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for item in list1:\n        result.append(item)\n    for item in list2:\n        result.append(item)\n    for item in list3:\n        result.append(item)\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\n",
        "num_ids": 32
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # concatenate 3 lists\n    # use the interleave function to interleave the list\n    return None\n",
        "num_ids": 27
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) == len(list2) == len(list3):\n        return [list1[x] + [list2[x]] + [list3[x]] for x in range(len(list1))]\n    else:\n        return \"error: lengths don't match\"\n",
        "num_ids": 71
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n",
        "num_ids": 77
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_to_return = []\n    for i in range(len(list1)):\n        list_to_return.append(list1[i])\n        list_to_return.append(list2[i])\n        list_to_return.append(list3[i])\n    return list_to_return\n",
        "num_ids": 77
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved\n",
        "num_ids": 67
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #flatten list1\n    # list1 = flatten_list(list1)\n    # #flatten list2\n    # list2 = flatten_list(list2)\n    # #flatten list3\n    # list3 = flatten_list(list3)\n    # #interleave\n    # # [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\n    # return interleave_lists([list1,list2,list3])\n",
        "num_ids": 122
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    newlist = []\n    for x in range(len(list1)):\n        newlist.append(list1[x])\n        newlist.append(list2[x])\n        newlist.append(list3[x])\n    return newlist\n",
        "num_ids": 62
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + [list2[i]] + [list3[i]] for i in range(len(list1))]\n",
        "num_ids": 36
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    assert type(test_tup1) is tuple and type(test_tup2) is tuple\n    dissimilar = []\n    for i,j in zip(test_tup1, test_tup2):\n        if i!= j:\n            dissimilar.append((i,j))\n    return dissimilar\n",
        "num_ids": 79
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(x for x in test_tup1 if x not in test_tup2)\n    \n    \ndef find_distinct(test_tuple1, test_tuple2):\n    '''\n    Write a function to find the distinct elements in the given two tuples.\n    '''\n    return tuple(set(test_tuple1) ^ set(test_tuple2))\n    \n    \ndef find_most_common(test_tuple):\n    '''\n    Write a function to find the most common element in a tuple.\n    '''\n    return max(test_tuple, key=test_tuple.count)\n    \n",
        "num_ids": 23
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Invalid tuples given\")\n    if len(test_tup1) == 0:\n        return []\n    if len(test_tup1) == 1:\n        if test_tup1[0]!= test_tup2[0]:\n            return [test_tup1[0], test_tup2[0]]\n        else:\n            return []\n    else:\n        return find_dissimilar(test_tup1[1:], test_tup2[1:]) + [test_tup1[0], test_tup2[0]]\n",
        "num_ids": 163
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = [int(i) for i in test_tup1]\n    test_tup2 = [int(i) for i in test_tup2]\n    dissimilar_count = 0\n    for i in test_tup1:\n        for j in test_tup2:\n            if i!= j:\n                dissimilar_count += 1\n    return dissimilar_count\n",
        "num_ids": 101
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    set1 = set(tup1)\n    set2 = set(tup2)\n    set_diff = set1.difference(set2)\n    list_diff = list(set_diff)\n    return list_diff\n",
        "num_ids": 85
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # if the two tuples are the same, return an empty tuple\n    if test_tup1 == test_tup2:\n        return ()\n",
        "num_ids": 37
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return set(test_tup1).symmetric_difference(test_tup2)\n",
        "num_ids": 26
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1, test_tup2 = (sorted(test_tup1), sorted(test_tup2))\n    counter = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            counter += 1\n    return counter\n",
        "num_ids": 85
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(sorted(set(test_tup1) ^ set(test_tup2)))\n",
        "num_ids": 27
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        x = 0\n        y = 0\n        lst_diss = []\n        while x < len(test_tup1):\n            diss = abs(test_tup1[x] - test_tup2[x])\n            if diss!= 0:\n                lst_diss.append(diss)\n            x += 1\n        if len(lst_diss) == 0:\n            return False\n        elif len(lst_diss) == len(test_tup1):\n            return False\n        else:\n            return lst_diss\n    else:\n        return False\n",
        "num_ids": 167
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print \"\\nremove uneven elements from mixed tuple using function {}\".format(even_fnc.__name__)\n    # we need to create a new list\n    new_list = list()\n    for ele in test_tuple:\n        if even_fnc(ele):\n            new_list.append(ele)\n    return tuple(new_list)\n",
        "num_ids": 85
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc_result = []\n    for elem in test_tuple:\n        if even_fnc(elem):\n            even_fnc_result.append(elem)\n    return tuple(even_fnc_result)\n    \n    \ndef even_ele_return_filter(test_tuple):\n    return lambda x: x%2==0\n    \n    \ndef even_ele_return_filter_tuple(test_tuple):\n    return tuple(filter(lambda x: x%2==0, test_tuple))\n    \n    \ndef even_ele_return_filter_list(test_tuple):\n    return list(filter(lambda x: x%2==0, test_tuple))\n    \n    \ndef even_ele_return_filter_set(test_tuple):\n    return set(filter(lambda x: x%2==0, test_tuple))\n    \n    \ndef even_ele_return_filter_dict(test_tuple):\n    return dict(filter(lambda x: x%2==0, test_tuple))\n    \n    \ndef even_ele_return_filter_gen(test_tuple):\n    return (elem for elem in filter(lambda x: x%2==0, test_tuple))\n    \n    \ndef even_ele_return_filter_gen_return(test_tuple):\n    return tuple(filter(lambda x: x%2==0, test_tuple))\n    \n    \ndef even_ele_return_filter_gen_return_tuple(test_tuple):\n    return tuple(tuple(filter(lambda x: x%2==0, test_tuple)))\n    \n    \ndef even_ele_return_filter_gen_return_list(test_tuple):\n    return list(tuple(filter(lambda x: x%2==0, test_tuple)))\n    \n    \ndef even_ele_return_filter_gen_return_set(test_tuple):\n    return set(tuple(filter(lambda x: x%2==0, test_tuple)))\n    \n    \ndef even_ele_return_filter_gen_return_dict(test_tuple):\n    return dict(tuple(filter(lambda x: x%2==0, test_tuple)))\n    \n    \ndef even_ele_return_filter_gen_return_gen(test_tuple):\n    return (elem for elem in tuple(filter(lambda x: x%2==0, test_tuple)))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return(test_tuple):\n    return tuple((elem for elem in tuple(filter(lambda x: x%2==0, test_tuple))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_list(test_tuple):\n    return list(tuple((elem for elem in tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_set(test_tuple):\n    return set(tuple((elem for elem in tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_dict(test_tuple):\n    return dict(tuple((elem for elem in tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen(test_tuple):\n    return (elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return(test_tuple):\n    return tuple((elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_list(test_tuple):\n    return list(tuple((elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_set(test_tuple):\n    return set(tuple((elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_dict(test_tuple):\n    return dict(tuple((elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_gen(test_tuple):\n    return (elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_gen_return(test_tuple):\n    return tuple((elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_gen_return_list(test_tuple):\n    return list(tuple((elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_gen_return_set(test_tuple):\n    return set(tuple((elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_gen_return_dict(test_tuple):\n    return dict(tuple((elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_gen_return_gen(test_tuple):\n    return (elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_gen_return_gen_return(test_tuple):\n    return tuple((elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_gen_return_gen_return_list(test_tuple):\n    return list(tuple((elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_gen_return_gen_return_set(test_tuple):\n    return set(tuple((elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_gen_return_gen_return_dict(test_tuple):\n    return dict(tuple((elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple)))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_gen_return_gen_return_gen(test_tuple):\n    return (elem for elem in tuple(tuple(filter(lambda x: x%2==0, test_tuple))))\n    \n    \ndef even_ele_return_filter_gen_return_gen_return_gen_return_gen_return_gen_return_gen_return(test_tuple):",
        "num_ids": 2009
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(test_tuple)\n",
        "num_ids": 15
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(filter(lambda x: x % 2 == 0, test_tuple))\n",
        "num_ids": 26
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n",
        "num_ids": 19
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    temp_tuple = list(test_tuple)\n    for count in range(len(test_tuple)):\n        if not even_fnc(test_tuple[count]):\n            del temp_tuple[count]\n    return tuple(temp_tuple)\n",
        "num_ids": 68
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        return tuple([even_ele(elem, even_fnc) for elem in test_tuple])\n    else:\n        if test_tuple % 2 == 0:\n            return even_fnc(test_tuple)\n        else:\n            return test_tuple\n",
        "num_ids": 81
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_list = []\n    for ele in test_tuple:\n        if even_fnc(ele):\n            result_list.append(ele)\n    return tuple(result_list)\n",
        "num_ids": 48
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return (test_tuple[0], even_fnc(test_tuple[1]))\n",
        "num_ids": 26
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return (tuple((x for x in test_tuple if not even_fnc(x))))\n",
        "num_ids": 26
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)/2\n    return area\n",
        "num_ids": 16
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*b*s)\n",
        "num_ids": 12
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b * s * 2 + b * (b - 1) * 2 + (s - 1) * s\n    \ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b * s) * 2 + (b * (b - 1)) * 2 + (s - 1) * s\n",
        "num_ids": 31
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n",
        "num_ids": 8
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n",
        "num_ids": 8
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = b*s\n    return s*4\n",
        "num_ids": 15
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*b + 2*b*s + 2*s*s\n",
        "num_ids": 20
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = b * s\n    print(A)\n",
        "num_ids": 15
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)**2/4\n    return area\n",
        "num_ids": 19
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 29
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return False\n    return True\n",
        "num_ids": 21
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"dict1 is empty\")\n    else:\n        print(\"dict1 is not empty\")\n",
        "num_ids": 32
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    dict2={}\n    for key in dict1:\n        if key!= 'empid':\n            dict2[key] = dict1[key]\n    return dict2\n",
        "num_ids": 44
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n",
        "num_ids": 12
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    return False\n",
        "num_ids": 17
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return 2*catalan_number(num-1) - catalan_number(num-2)\n",
        "num_ids": 53
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1]\n    count = 1\n    while count < num:\n        count += 1\n        catalan.append(0)\n        for i in range(len(catalan) - 1):\n            catalan[i + 1] = catalan[i] + catalan[i + 1]\n    return catalan[num - 1]\n",
        "num_ids": 84
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise ValueError('Invalid Input')\n",
        "num_ids": 18
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        print('Invalid Input')\n        return\n    if num == 0:\n        return 1\n    \n    catalan_numbers = [0 for i in range(num + 1)]\n    catalan_numbers[0] = 1\n    catalan_numbers[1] = 1\n",
        "num_ids": 75
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        raise Exception(\"Invalid input\")\n    elif num == 1:\n        return 1\n    else:\n        return (4*((2*num) - 1) / (num + 1))\n",
        "num_ids": 53
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    def catalan_numbers(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        return catalan_numbers(n-1) + catalan_numbers(n-2)\n    return catalan_numbers(num)\n",
        "num_ids": 72
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # if num < 0:\n    #     return 0\n    if num == 0:\n        return 1\n    result = 0\n    for i in range(num):\n        result += 2 * row_catalan(i)\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [0 for i in range(num+1)]\n    catalan[0] = 1\n    for i in range(1, num+1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[num]\n",
        "num_ids": 89
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n    \ndef binomial_coefficient(n,k):\n    '''\n    Write a function which returns n choose k value\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1, 1]\n    for i in xrange(2, num+1):\n        catalan.append(sum(catalan[-2:]) + catalan[-1])\n    return catalan[num]\n",
        "num_ids": 57
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    a = re.search(r'(?<=ly)\\b.+?ly', text, flags=re.IGNORECASE)\n    if a:\n        return a.group(0)\n    else:\n        return None\n",
        "num_ids": 57
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    words = text.split(' ')\n    result = []\n    for word in words:\n        if word.endswith('ly') and word.rfind('ly') == len(word)-2:\n            result.append((word.rfind('ly'), word[-1]))\n    return result\n",
        "num_ids": 73
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if not text: return None\n    text = re.sub(r'[^\\w\\s]','', text)\n    start = 0\n    pos = None\n    while start < len(text):\n        if text[start] in 'aeiou':\n            start += 1\n            continue\n        elif text[start:start+2] in ['ly']:\n            pos = start\n            start += 2\n        else:\n            start += 1\n    return pos\n",
        "num_ids": 111
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # print(re.findall(r'ly?\\b',text))\n    pos_list = re.findall(r'ly?\\b', text)\n    if pos_list:\n        print(pos_list[0])\n    else:\n        print('-1')\n",
        "num_ids": 69
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    a=re.findall('ly\\b',text)\n    print a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2007
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #text = 'I am Iron Manly'\n    text = 'Look at my code'\n    return find_substrings(text, 'ly')\n",
        "num_ids": 37
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall('(?<=ly)\\w+', text)\n",
        "num_ids": 21
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if not text:\n        return []\n    if re.search(r'ly$', text):\n        return [text]\n    return find_adverbs(text[1:]) + find_adverbs(text[:-1])\n",
        "num_ids": 56
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    def find_ly_ending_pos(text):\n        '''\n        We use a regexp to find all the occurrences of a pattern in a given string.\n        We then return the positions of the found pattern.\n        '''\n        res = re.findall(r\"ly\\b\",text)\n        return [i for i in range(len(text)) if text.startswith(res[0], i)]\n    return find_ly_ending_pos(text)\n",
        "num_ids": 59
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r'(?<=\\sly\\b)',text)\n",
        "num_ids": 25
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda item:item[1])\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda item:item[1])\n    \nprint(expensive_items([('a',4),('b',2),('c',1),('d',5),('e',3),('f',4)],2))\n",
        "num_ids": 66
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for item in items:\n        heapq.heappush(heap,item)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return heap\n",
        "num_ids": 58
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # max_heap = []\n    # for item in items:\n    #     heapq.heappush(max_heap,(-1*item[1],item[0]))\n    # max_heap_list = []\n    # for i in range(n):\n    #     max_heap_list.append(heapq.heappop(max_heap)[1])\n    # return max_heap_list\n    # another way\n    # instead of list, return a dictionary\n    result = {}\n    for item in items:\n        if item[0] not in result:\n            result[item[0]] = -1*item[1]\n        else:\n            result[item[0]] = max(result[item[0]],-1*item[1])\n    result = sorted(result.items(),key = lambda x:-1*x[1])\n    return [item[0] for item in result]\n    # another way\n    # result = {}\n    # for item in items:\n    #     result[item[0]] = item[1]\n    # result = sorted(result.items(),key = lambda x:-1*x[1])\n    # return [item[0] for item in result]\n",
        "num_ids": 294
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return sorted(items,key = lambda x : x[1],reverse=True)[:n]\n",
        "num_ids": 25
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(item[1],item[0]))\n    top = heap[:n]\n    return top\n",
        "num_ids": 51
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    maxheap = []\n    for item,cost in items:\n        heapq.heappush(maxheap,(-cost,item))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(maxheap)[1])\n    return result\n",
        "num_ids": 75
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if not items:\n        return []\n    if len(items)<n:\n        return items\n    pq=[]\n    for item,price in items:\n        heapq.heappush(pq,(price,item))\n        if len(pq)>n:\n            heapq.heappop(pq)\n    return [item for _,item in pq]\ndef find_item_combinations(items,n,goal,path=[]):\n    '''\n    Write a function to find the n smallest combinations of items that sum to goal.\n    Example:\n    items = [\"abc\", \"a\", \"b\", \"c\"], goal = 8, n = 2\n    find_item_combinations(items, n, goal)\n    # Output: [[\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"]]\n    '''\n    if len(items)==0:\n        return []\n    if n==0:\n        if sum(path)==goal:\n            return [path]\n        else:\n            return []\n    small_options=find_item_combinations(items[1:],n-1,goal-items[0],path+[items[0]])\n    if small_options:\n        return small_options\n    large_options=find_item_combinations(items[1:],n,goal,path)\n    return large_options\n",
        "num_ids": 126
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    top=[]\n    for i in items:\n        heapq.heappush(top,i)\n        if len(top)>n:\n            heapq.heappop(top)\n    return top\n",
        "num_ids": 54
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n>len(items):\n        n=len(items)\n    a=[]\n    for i in items:\n        if i.price>0:\n            a.append(i)\n    a.sort(key=lambda x: x.price)\n    return a[-n:]\n    \ndef print_matrix(matrix):\n    '''\n    Write a function to print a matrix as a list of lists.\n    '''\n    for i in matrix:\n        print i\n    \ndef is_int(x):\n    '''\n    Write a function to determine if a value is a positive integer.\n    '''\n    if x>0:\n        return True\n    else:\n        return False\n    \ndef make_list(x):\n    '''\n    Write a function that takes a list of values and returns a list of\n    lists of integers where the values in the inner lists are the original\n    list values.\n    '''\n    if len(x)==0:\n        return [[]]\n    else:\n        return [[x[0]] + y for y in make_list(x[1:])] + make_list(x[1:])\n        \ndef make_list_of_lists(x):\n    '''\n    Write a function that takes a list of integers and returns a list of\n    lists where the outer lists are each a value and the inner lists are\n    each a list of the values at that index in the original input list.\n    '''\n    a=[]\n    if len(x)==0:\n        return [[]]\n    else:\n        a.append([x[0]])\n        return a + make_list_of_lists(x[1:])\n    \ndef make_list_of_lists_in_reverse(x):\n    '''\n    Write a function that takes a list of integers and returns a list of\n    lists where the outer lists are each a value and the inner lists are\n    each a list of the values at that index in the original input list in\n    reverse order.\n    '''\n    a=[]\n    if len(x)==0:\n        return [[]]\n    else:\n        a.append([x[-1]])\n        return a + make_list_of_lists_in_reverse(x[:-1])\n        \ndef make_list_of_tuples(x):\n    '''\n    Write a function that takes a list of integers and returns a list of\n    lists where the outer lists are each a value and the inner lists are\n    each a list of the values at that index in the original input list in\n    reverse order.\n    '''\n    a=[]\n    if len(x)==0:\n        return [[]]\n    else:\n        a.append([(x[-1],x[-2])])\n        return a + make_list_of_tuples(x[:-2])\n        \ndef make_list_of_tuples_in_reverse(x):\n    '''\n    Write a function that takes a list of integers and returns a list of\n    lists where the outer lists are each a value and the inner lists are\n    each a list of the values at that index in the original input list in\n    reverse order.\n    '''\n    a=[]\n    if len(x)==0:\n        return [[]]\n    else:\n        a.append([(x[0],x[1])])\n        return a + make_list_of_tuples_in_reverse(x[2:])\n        \ndef make_matrix(x,n):\n    '''\n    Write a function that takes a list of lists of integers and returns a\n    matrix of n rows and the original list as a column.\n    '''\n    a=[]\n    for i in x:\n        a.append([])\n    for i in x:\n        for j in i:\n            a[x.index(i)].append(j)\n    return a\n    \ndef make_matrix_with_sums(x):\n    '''\n    Write a function that takes a list of lists of integers and returns a\n    matrix of n rows and the original list as a column with sums added.\n    '''\n    a=[]\n    for i in x:\n        a.append([])\n    for i in x:\n        for j in i:\n            a[x.index(i)].append(j+sum(x[x.index(i)]))\n    return a\n    \ndef make_list_of_lists_from_matrix(x):\n    '''\n    Write a function that takes a matrix of n rows and returns a list of\n    lists where the outer lists are each a value and the inner lists are\n    each a list of the values at that index in the original input list.\n    '''\n    a=[]\n    if len(x[0])==0:\n        return [[]]\n    else:\n        a.append([x[0][0]])\n        return a + make_list_of_lists_from_matrix(x[1:])\n        \ndef make_list_of_tuples_from_matrix(x):\n    '''\n    Write a function that takes a matrix of n rows and returns a list of\n    lists where the outer lists are each a value and the inner lists are\n    each a list of the values at that index in the original input list in\n    reverse order.\n    '''\n    a=[]\n    if len(x[0])==0:\n        return [[]]\n    else:\n        a.append([(x[0][0],x[0][1])])\n        return a + make_list_of_tuples_from_matrix(x[1:])\n        \ndef find_nth_largest(x,n):\n    '''\n    Write a function that takes a list and a positive integer n and returns\n    the nth largest element in the list. If the list is not long enough,\n    return the original list.\n    '''\n    a=[]\n    if len(x)<n:\n        return x\n    for i in x:\n        a.append(i)\n    a.sort(reverse=True)\n    return a[n-1]\n    \ndef find_nth_largest_of_two(x,n):\n    '''\n    Write a function that takes a list and a positive integer n and returns\n    the nth largest element in the list. If the list is not long enough,\n    return the original list.\n    '''\n    a=[]\n    if len(x)<n:\n        return x\n    for i in x:\n        a.append(i)\n    a.sort(reverse=True)\n    return a[n/2]\n    \ndef is_list_of_tuples(x):\n    '''\n    Write a function that takes a list and returns True if the list is a\n    list of tuples and False otherwise.\n    '''\n    if type(x[0]) is tuple:\n        return True\n    else:\n        return False\n    \ndef return_second_item(x):\n    '''\n    Write a function that takes a list of tuples and returns a list of the\n    second items in each tuple.\n    '''\n    a=[]\n    for i in x:\n        a.append(i[1])\n    return a\n    \ndef find_item_with_multiple_occurences(x):\n    '''\n    Write a function that takes a list of lists and a positive integer n\n    and returns the item in the list with the nth occurrence. If the list\n    has less than n occurrences, return the original list.\n    '''\n    a=[]\n    if len(x)<n:\n        return x\n    for i in x:\n        a.append(i)\n    a.sort(key=lambda x: x[n-1])\n    return a[-1]\n    \ndef find_item_with_multiple_occurences_of_two(x):\n    '''\n    Write a function that takes a list of lists and a positive integer n\n    and returns the item in the list with the nth occurrence. If the list\n    has less than n occurrences, return the original list.\n    '''\n    a=[]\n    if len(x)<n:\n        return x\n    for i in x:\n        a.append(i)\n    a.sort(key=lambda x: x[n-1])\n    return a[n/2]\n    \ndef remove_item_with_multiple_occurences(x,n):\n    '",
        "num_ids": 84
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort items in descending order\n    items.sort(reverse=True)\n    return items[:n]\n",
        "num_ids": 28
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr=[]\n    for i in range(0, len(l), n):\n        arr.append(l[i:i+n])\n    arr.append(l[i+n:])\n    return arr\n",
        "num_ids": 53
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:]+l[:n]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr=[]\n    for i in range(0, len(l), n):\n        arr.append(l[i:i+n])\n    return arr\n",
        "num_ids": 40
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(l[i])\n    arr.extend(l[n:])\n    return arr\n",
        "num_ids": 42
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = [l[i:i+n] for i in range(0, len(l), n)]\n    return arr\n",
        "num_ids": 32
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # For example if l = [1, 2, 3, 4, 5, 6, 7] and n = 3 the function should return [1, 2, 3, 4, 5], [6, 7]\n    a, b = [], []\n    for i, val in enumerate(l):\n        if i % n == 0:\n            a.append(val)\n        else:\n            b.append(val)\n    return a, b\n",
        "num_ids": 105
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr=[]\n    arr.append(l[:n])\n    arr.append(l[n:])\n    return arr\n",
        "num_ids": 33
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[0:n]\n    l2 = l[n:]\n    return l1 + l2\n",
        "num_ids": 30
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    list_len = len(l)\n    if list_len % n == 0:\n        return l[:list_len/n], l[list_len/n:]\n    else:\n        return l[:list_len/n+1], l[list_len/n+1:]\n",
        "num_ids": 71
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex=tuple(listx)\n    return tuplex\n",
        "num_ids": 20
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums)<1:\n        return\n    big=0\n    small=0\n    for i in range(len(nums)):\n        if nums[i]>big:\n            big=nums[i]\n        if nums[i]<small:\n            small=nums[i]\n    return big-small\n",
        "num_ids": 85
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    return max(nums) - min(nums)\n",
        "num_ids": 18
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    #use max and min function\n    return max(nums) - min(nums)\n",
        "num_ids": 26
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n",
        "num_ids": 15
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    result = 0\n    for i in nums:\n        result = result + abs(i)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n",
        "num_ids": 15
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    big_diff = nums[-1]-nums[0]\n    return big_diff\n",
        "num_ids": 32
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    if a < b:\n        for i in range(a, b+1):\n            if i*i >= a:\n                result.append(i*i)\n    elif a > b:\n        for i in range(b, a+1):\n            if i*i >= b:\n                result.append(i*i)\n    else:\n        result.append(a*a)\n    return result\n",
        "num_ids": 104
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return sum(i*i for i in range(a, b+1) if i*i == i)\n",
        "num_ids": 28
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    num_sqr_a = int(a ** 0.5)\n    num_sqr_b = int(b ** 0.5)\n    all_perfect_squares = []\n    for i in range(num_sqr_a, num_sqr_b+1):\n        perfect_sqr = i ** 2\n        all_perfect_squares.append(perfect_sqr)\n    return all_perfect_squares\n",
        "num_ids": 104
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i*i for i in range(a, b+1) if i*i >= a and i*i <= b]\n",
        "num_ids": 33
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    output = []\n    for i in range(a, b+1):\n        # print(i)\n        if is_perfect_square(i):\n            output.append(i)\n    return output\n",
        "num_ids": 50
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i*i for i in range(a,b+1) if i*i<=b]\n",
        "num_ids": 28
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # corner case\n    if a == b:\n        return 1\n    # initialize result\n    perfect_squares = 0\n    # use binary search to find squares between a and b\n    # lower = a^2\n    # upper = b^2\n    lower = min(a, b)**2\n    upper = max(a, b)**2\n    while lower <= upper:\n        # get the square root of the number\n        # use binary search to find the lower bound of the perfect square\n        mid = int((lower + upper) / 2)\n        if mid * mid == lower:\n            perfect_squares += 1\n            lower = mid + 1\n        else:\n            upper = mid - 1\n    return perfect_squares\n",
        "num_ids": 171
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Since a^2 = b^2, a^2 - b^2 = 2ab, \n    # a^2 - b^2 = 2ab\n    # a^2 - b^2 = 2ab\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(b^2 - 2ab)\n    # a = b + sqrt(",
        "num_ids": 2016
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x*x for x in range(int(a), int(b)+1) if (x*x) == int(x*x)]\n",
        "num_ids": 37
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = cmath.rect(x,cmath.radians(90.0))\n    y = cmath.rect(y,cmath.radians(90.0))\n    print 'Polar coordinates to rectangular : ',x,' ',y\n",
        "num_ids": 59
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x1=x*(cmath.exp(1j*y))\n    y1=(-1)*y*(cmath.exp(1j*y))\n    return x1,y1\ndef rectangular_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x1=x*(cmath.exp(-1j*y))\n    y1=(-1)*y*(cmath.exp(-1j*y))\n    return x1,y1\ndef polar_rect_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x1=(-1)*y*(cmath.exp(-1j*y))\n    y1=x*(cmath.exp(1j*y))\n    return x1,y1\ndef rectangular_rect_2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x1=(-1)*y*(cmath.exp(1j*y))\n    y1=x*(cmath.exp(-1j*y))\n    return x1,y1\ndef convert_rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=x**2+y**2\n    theta=cmath.atan2(y,x)\n    return r,theta\ndef convert_polar_to_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=(r*cmath.cos(theta))\n    y=(r*cmath.sin(theta))\n    return x,y\ndef convert_rect_to_polar_2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=(x**2+y**2)**0.5\n    theta=(cmath.atan2(y,x))\n    return r,theta\ndef convert_polar_to_rect_2(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=(r*cmath.cos(theta))\n    y=(r*cmath.sin(theta))\n    return x,y\ndef test_rect_to_polar():\n    print(\"Testing rectangular_rect() function:\")\n    print(\"polar_rect(x,y):\")\n    print(\"0,0 should be: (1,0)\")\n    print(\"2,2 should be: (1,pi/2)\")\n    print(\"4,4 should be: (sqrt(8),pi/4)\")\n    print(\"7,7 should be: (sqrt(8),3*pi/4)\")\n    print(\"9,9 should be: (sqrt(17),3*pi/4)\")\n    print(\"10,10 should be: (sqrt(17),pi/4)\")\n    print(\"polar_rect(0,0):\")\n    print(polar_rect(0,0))\n    print(\"polar_rect(2,2):\")\n    print(polar_rect(2,2))\n    print(\"polar_rect(4,4):\")\n    print(polar_rect(4,4))\n    print(\"polar_rect(7,7):\")\n    print(polar_rect(7,7))\n    print(\"polar_rect(9,9):\")\n    print(polar_rect(9,9))\n    print(\"polar_rect(10,10):\")\n    print(polar_rect(10,10))\ndef test_polar_rect_2():\n    print(\"Testing polar_rect() function:\")\n    print(\"polar_rect(x,y):\")\n    print(\"0,0 should be: (1,0)\")\n    print(\"1,2 should be: (1,pi/2)\")\n    print(\"3,4 should be: (sqrt(8),pi/4)\")\n    print(\"5,6 should be: (sqrt(8),3*pi/4)\")\n    print(\"7,8 should be: (sqrt(17),3*pi/4)\")\n    print(\"polar_rect(0,0):\")\n    print(polar_rect_2(0,0))\n    print(\"polar_rect(1,2):\")\n    print(polar_rect_2(1,2))\n    print(\"polar_rect(3,4):\")\n    print(polar_rect_2(3,4))\n    print(\"polar_rect(5,6):\")\n    print(polar_rect_2(5,6))\n    print(\"polar_rect(7,8):\")\n    print(polar_rect_2(7,8))\ndef test_rect_to_polar_2():\n    print(\"Testing convert_rect_to_polar() function:\")\n    print(\"convert_rect_to_polar(x,y):\")\n    print(\"0,0 should be: (1,0)\")\n    print(\"1,2 should be: (1,pi/2)\")\n    print(\"3,4 should be: (sqrt(8),pi/4)\")\n    print(\"5,6 should be: (sqrt(8),3*pi/4)\")\n    print(\"7,8 should be: (sqrt(17),3*pi/4)\")\n    print(\"polar_rect(0,0):\")\n    print(convert_rect_to_polar_2(0,0))\n    print(\"polar_rect(1,2):\")\n    print(convert_rect_to_polar_2(1,2))\n    print(\"polar_rect(3,4):\")\n    print(convert_rect_to_polar_2(3,4))\n    print(\"polar_rect(5,6):\")\n    print(convert_rect_to_polar_2(5,6))\n    print(\"polar_rect(7,8):\")\n    print(convert_rect_to_polar_2(7,8))\ndef test_rect_to_polar_3():\n    print(\"Testing convert_rect_to_polar() function:\")\n    print(\"convert_rect_to_polar(x,y):\")\n    print(\"0,0 should be: (1,0)\")\n    print(\"1,2 should be: (1,pi/2)\")\n    print(\"3,4 should be: (sqrt(8),pi/4)\")\n    print(\"5,6 should be: (sqrt(8),3*pi/4)\")\n    print(\"7,8 should be: (sqrt(17),3*pi/4)\")\n    print(\"polar_rect(0,0):\")\n    print(convert_rect_to_polar(0,0))\n    print(\"polar_rect(1,2):\")\n    print(convert_rect_to_polar(1,2))\n    print(\"polar_rect(3,4):\")\n    print(convert_rect_to_polar(3,4))\n    print(\"polar_rect(5,6):\")\n    print(convert_rect_to_polar(5,6))\n    print(\"polar_rect(7,8):\")\n    print(convert_rect_to_polar(7,8))\ndef test_polar_rect_3():\n    print(\"Testing convert_polar_rect() function:\")\n    print(\"convert_polar_rect(r,theta):\")\n    print(\"0,0 should be: (1,0)\")\n    print(\"1,2 should be: (1,pi/2)\")\n    print(\"3,4 should be: (sqrt(8),pi/4)\")\n    print(\"5,6 should be: (sqrt(8),3*pi/4)\")\n    print(\"7,8 should be: (sqrt(17),3*pi/4)\")\n    print(\"polar_rect(0,0):\")\n    print(convert_polar_to_rect_2(0,0))\n    print(\"polar_rect(1,2):\")\n    print(convert_polar_to_rec",
        "num_ids": 1475
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)+abs(y)\n    angle = cmath.phase(complex(x,y))\n    if x < 0 and y < 0:\n        angle = abs(angle)\n    elif x < 0 and y > 0:\n        angle = abs(angle)+cmath.pi\n    elif x > 0 and y > 0:\n        angle = cmath.pi+abs(angle)\n    elif x > 0 and y < 0:\n        angle = abs(angle)+cmath.pi\n    elif x == 0 and y == 0:\n        angle = 0\n    return r,angle\n",
        "num_ids": 144
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=float(x)\n    y=float(y)\n    r=(x**2+y**2)**0.5\n    theta=cmath.atan2(y,x)\n    if theta<0:\n        theta+=2*math.pi\n    theta=int(theta*180/math.pi)\n    return (r,theta)\n",
        "num_ids": 92
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # The answer is a number in the form (x,y)\n    return complex(x,y)\n",
        "num_ids": 27
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import cmath\n    x,y=complex(x),complex(y)\n    return x*cmath.sqrt(x**2+y**2),y*cmath.sqrt(x**2+y**2)\ndef polar_rect1(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import cmath\n    x,y=complex(x),complex(y)\n    return x*cmath.sqrt(x**2+y**2),y*cmath.sqrt(x**2+y**2)\ndef rect_polar(a,b):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import cmath\n    a,b=complex(a),complex(b)\n    return a/cmath.sqrt(a**2+b**2),b/cmath.sqrt(a**2+b**2)\ndef rect_polar1(a,b):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import cmath\n    a,b=complex(a),complex(b)\n    return a/cmath.sqrt(a**2+b**2),b/cmath.sqrt(a**2+b**2)\ndef complex_to_polar(complex_num):\n    '''\n    Write a function to convert complex number to polar number.\n    '''\n    import cmath\n    return cmath.polar(complex_num)\ndef polar_to_complex(r,theta):\n    '''\n    Write a function to convert polar number to complex number.\n    '''\n    import cmath\n    return cmath.rect(r,theta)\ndef complex_to_polar1(complex_num):\n    '''\n    Write a function to convert complex number to polar number.\n    '''\n    import cmath\n    return cmath.polar(complex_num)\ndef polar_to_complex1(r,theta):\n    '''\n    Write a function to convert polar number to complex number.\n    '''\n    import cmath\n    return cmath.rect(r,theta)\ndef complex_to_rect(complex_num):\n    '''\n    Write a function to convert complex number to rectangular number.\n    '''\n    import cmath\n    return cmath.rect(complex_num)\ndef rect_to_complex(a,b):\n    '''\n    Write a function to convert rectangular number to complex number.\n    '''\n    import cmath\n    return cmath.rect(a,b)\ndef complex_to_rect1(complex_num):\n    '''\n    Write a function to convert complex number to rectangular number.\n    '''\n    import cmath\n    return cmath.rect(complex_num)\ndef rect_to_complex1(a,b):\n    '''\n    Write a function to convert rectangular number to complex number.\n    '''\n    import cmath\n    return cmath.rect(a,b)\ndef complex_to_rect_polar(complex_num):\n    '''\n    Write a function to convert complex number to rectangular number.\n    '''\n    import cmath\n    return cmath.rect(cmath.polar(complex_num))\ndef rect_polar_to_complex(r,theta):\n    '''\n    Write a function to convert rectangular number to polar number.\n    '''\n    import cmath\n    return cmath.rect(r,theta)\ndef complex_to_rect_polar1(complex_num):\n    '''\n    Write a function to convert complex number to rectangular number.\n    '''\n    import cmath\n    return cmath.rect(cmath.polar(complex_num))\ndef rect_polar_to_complex1(r,theta):\n    '''\n    Write a function to convert rectangular number to polar number.\n    '''\n    import cmath\n    return cmath.rect(r,theta)\ndef quadratic_equation(a,b,c):\n    '''\n    Write a function to solve a quadratic equation.\n    '''\n    import cmath\n    delta=(b**2)-(4*a*c)\n    if delta==0:\n        x=-b/(2*a)\n        return x\n    elif delta<0:\n        x1=(-b+cmath.sqrt(delta))/(2*a)\n        x2=(-b-cmath.sqrt(delta))/(2*a)\n        return x1,x2\n    else:\n        x1=(-b+cmath.sqrt(delta))/(2*a)\n        x2=(-b-cmath.sqrt(delta))/(2*a)\n        return x1,x2\ndef quadratic_equation1(a,b,c):\n    '''\n    Write a function to solve a quadratic equation.\n    '''\n    import cmath\n    delta=(b**2)-(4*a*c)\n    if delta==0:\n        x=-b/(2*a)\n        return x\n    elif delta<0:\n        x1=(-b+cmath.sqrt(delta))/(2*a)\n        x2=(-b-cmath.sqrt(delta))/(2*a)\n        return x1,x2\n    else:\n        x1=(-b+cmath.sqrt(delta))/(2*a)\n        x2=(-b-cmath.sqrt(delta))/(2*a)\n        return x1,x2\ndef quadratic_equation2(a,b,c):\n    '''\n    Write a function to solve a quadratic equation.\n    '''\n    import cmath\n    delta=(b**2)-(4*a*c)\n    if delta<0:\n        return 'no answer'\n    elif delta==0:\n        x=-b/(2*a)\n        return x\n    else:\n        x1=(-b+cmath.sqrt(delta))/(2*a)\n        x2=(-b-cmath.sqrt(delta))/(2*a)\n        return x1,x2\ndef quadratic_equation3(a,b,c):\n    '''\n    Write a function to solve a quadratic equation.\n    '''\n    import cmath\n    delta=(b**2)-(4*a*c)\n    if delta==0:\n        x=-b/(2*a)\n        return x\n    elif delta<0:\n        return 'no answer'\n    else:\n        x1=(-b+cmath.sqrt(delta))/(2*a)\n        x2=(-b-cmath.sqrt(delta))/(2*a)\n        return x1,x2\ndef quadratic_equation4(a,b,c):\n    '''\n    Write a function to solve a quadratic equation.\n    '''\n    import cmath\n    delta=(b**2)-(4*a*c)\n    if delta<0:\n        return 'no answer'\n    elif delta==0:\n        x=-b/(2*a)\n        return x\n    else:\n        x1=(-b+cmath.sqrt(delta))/(2*a)\n        x2=(-b-cmath.sqrt(delta))/(2*a)\n        return x1,x2\ndef quadratic_equation5(a,b,c):\n    '''\n    Write a function to solve a quadratic equation.\n    '''\n    import cmath\n    delta=(b**2)-(4*a*c)\n    if delta<0:\n        return 'no answer'\n    elif delta==0:\n        x=-b/(2*a)\n        return x\n    else:\n        x1=(-b+cmath.sqrt(delta))/(2*a)\n        x2=(-b-cmath.sqrt(delta))/(2*a)\n        return x1,x2\ndef quadratic_equation6(a,b,c):\n    '''\n    Write a function to solve a quadratic equation.\n    '''\n    import cmath\n    delta=(b**2)-(4*a*c)\n    if delta<0:\n        return 'n",
        "num_ids": 34
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return complex(x,y)\n",
        "num_ids": 11
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=max(abs(x),abs(y))\n    return [x*m/abs(x),y*m/abs(y)]\n",
        "num_ids": 36
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_distance(x,y):\n    '''\n    Write a function to calculate the distance between a point and the origin.\n    '''\n    return (x**2 + y**2) ** 0.5\ndef polar_rect_distance(x,y):\n    '''\n    Write a function to calculate the distance between a point and the origin.\n    '''\n    return (x**2 + y**2) ** 0.5\ndef rect_polar_angle(x,y):\n    '''\n    Write a function to calculate the angle between a point and the origin.\n    '''\n    return cmath.phase(complex(x,y))\ndef polar_rect_angle(x,y):\n    '''\n    Write a function to calculate the angle between a point and the origin.\n    '''\n    return cmath.phase(complex(x,y))\ndef rect_polar_magnitude(x,y):\n    '''\n    Write a function to calculate the magnitude of a point on the unit circle.\n    '''\n    return (x**2 + y**2) ** 0.5\ndef polar_rect_magnitude(x,y):\n    '''\n    Write a function to calculate the magnitude of a point on the unit circle.\n    '''\n    return (x**2 + y**2) ** 0.5\ndef rect_polar_angle_degree(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in degrees.\n    '''\n    return cmath.phase(complex(x,y)) / cmath.pi * 180\ndef polar_rect_angle_degree(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in degrees.\n    '''\n    return cmath.phase(complex(x,y)) / cmath.pi * 180\ndef rect_polar_angle_radian(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians.\n    '''\n    return cmath.phase(complex(x,y))\ndef polar_rect_angle_radian(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians.\n    '''\n    return cmath.phase(complex(x,y))\ndef rect_polar_radian_degree(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians in degrees.\n    '''\n    return cmath.phase(complex(x,y)) / cmath.pi * 180\ndef polar_rect_radian_degree(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians in degrees.\n    '''\n    return cmath.phase(complex(x,y)) / cmath.pi * 180\ndef polar_rect_distance_point(x,y):\n    '''\n    Write a function to calculate the distance between a point and the origin.\n    '''\n    return (x**2 + y**2) ** 0.5\ndef polar_rect_angle_point(x,y):\n    '''\n    Write a function to calculate the angle between a point and the origin.\n    '''\n    return cmath.phase(complex(x,y))\ndef polar_rect_magnitude_point(x,y):\n    '''\n    Write a function to calculate the magnitude of a point on the unit circle.\n    '''\n    return (x**2 + y**2) ** 0.5\ndef polar_rect_angle_degree_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in degrees.\n    '''\n    return cmath.phase(complex(x,y)) / cmath.pi * 180\ndef polar_rect_angle_radian_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians.\n    '''\n    return cmath.phase(complex(x,y))\ndef polar_rect_radian_degree_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians in degrees.\n    '''\n    return cmath.phase(complex(x,y)) / cmath.pi * 180\ndef polar_rect_magnitude_degree_point(x,y):\n    '''\n    Write a function to calculate the magnitude of a point on the unit circle in degrees.\n    '''\n    return (x**2 + y**2) ** 0.5\ndef rect_polar_angle_degree_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in degrees.\n    '''\n    return cmath.phase(complex(x,y)) / cmath.pi * 180\ndef rect_polar_radian_degree_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians.\n    '''\n    return cmath.phase(complex(x,y))\ndef rect_polar_radian_degree_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians in degrees.\n    '''\n    return cmath.phase(complex(x,y)) / cmath.pi * 180\ndef rect_polar_degree_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in degrees.\n    '''\n    return cmath.phase(complex(x,y)) / cmath.pi * 180\ndef rect_polar_degree_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in degrees.\n    '''\n    return cmath.phase(complex(x,y)) / cmath.pi * 180\ndef rect_polar_radian_degree_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians in degrees.\n    '''\n    return cmath.phase(complex(x,y))\ndef polar_rect_angle_degree_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in degrees.\n    '''\n    return cmath.phase(complex(x,y)) / cmath.pi * 180\ndef polar_rect_radian_degree_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians.\n    '''\n    return cmath.phase(complex(x,y))\ndef rect_polar_angle_radian_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians.\n    '''\n    return cmath.phase(complex(x,y))\ndef polar_rect_radian_angle_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians in degrees.\n    '''\n    return cmath.phase(complex(x,y)) / cmath.pi * 180\ndef polar_rect_magnitude_radian_point(x,y):\n    '''\n    Write a function to calculate the magnitude of a point on the unit circle.\n    '''\n    return (x**2 + y**2) ** 0.5\ndef polar_rect_angle_radian_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians in degrees.\n    '''\n    return cmath.phase(complex(x,y)) / cmath.pi * 180\ndef rect_polar_angle_radian_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians.\n    '''\n    return cmath.phase(complex(x,y))\ndef rect_polar_radian_angle_point(x,y):\n    '''\n    Write a function to calculate the angle of a point on the unit circle in radians in degrees",
        "num_ids": 22
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    if x == 0:\n        theta = cmath.pi/2\n    else:\n        theta = cmath.acos(y/r)\n    \n    x_rect = r*math.cos(theta)\n    y_rect = r*math.sin(theta)\n    print(x_rect,y_rect)\n    return x_rect,y_rect\n",
        "num_ids": 101
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n",
        "num_ids": 64
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    x = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = x\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    tmp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = tmp\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1]+' '+newList[1:len(newList)-1]+' '+newList[0]\n",
        "num_ids": 34
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return newList\n    elif len(newList) == 1:\n        return newList\n    else:\n        a = newList[0]\n        b = newList[len(newList)-1]\n        newList = [b] + newList[1:-1] + [a]\n        return newList\n",
        "num_ids": 87
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a,b = newList[0],newList[-1]\n    newList[0],newList[-1] = b,a\n    return newList\n",
        "num_ids": 41
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    newList[0],newList[length-1]=newList[length-1],newList[0]\n    return newList\n",
        "num_ids": 42
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length <= 0:\n        return\n    # first swap\n    newList[0],newList[length-1] = newList[length-1],newList[0]\n    # second swap\n    newList[1],newList[length-2] = newList[length-2],newList[1]\n    return newList\n",
        "num_ids": 90
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    if n>k:\n        for i in range(1,k+1):\n            res = res*(n-i+1)/i\n    elif n==k:\n        res = 1\n    else:\n        for i in range(1,n+1):\n            res = res*i/k\n    return res\n",
        "num_ids": 84
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(k):\n        res = res * (n - i)\n        res = res // (i + 1)\n    return res \n",
        "num_ids": 43
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for x in xrange(k+1)] for x in xrange(n+1)] \n    for i in xrange(n+1): \n        for j in xrange(min(i, k)+1): \n            if j == 0 or j == i: \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][k]\ndef combinations(iterable, r):\n    pool = tuple(iterable)\n    n = len(pool)\n    if r > n:\n        return\n    indices = range(r)\n    yield tuple(pool[i] for i in indices)\n    while True:\n        for i in reversed(range(r)):\n            if indices[i]!= i + n - r:\n                break\n        else:\n            return\n        indices[i] += 1\n        for j in range(i+1, r):\n            indices[j] = indices[j-1] + 1\n        yield tuple(pool[i] for i in indices)\ndef nCr(n,r):\n    return int(math.factorial(n)/(math.factorial(r)*math.factorial(n-r)))",
        "num_ids": 316
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(1,k+1):\n        result = result * (n - k + i) / i\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(1,k+1):\n        res = res*(n-i+1)/i\n    return res\n",
        "num_ids": 38
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    if (k > n - k):\n        k = n - k\n    for i in range(1, k + 1):\n        result = result * (n - i + 1) / i\n    return result\n    \ndef Factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * Factorial(n - 1)\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of_digits(n // 10)\n    \ndef check_palindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    if n < 10:\n        return True\n    else:\n        if n % 10 == n // 10 % 10:\n            return check_palindrome(n // 10)\n        else:\n            return False\n            \ndef reverse(n):\n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while n > 0:\n        rev = rev * 10 + n % 10\n        n = n // 10\n    return rev\n    \ndef palindrome_permutation(n):\n    '''\n    Write a python function to check whether a number is palindrome permutation or not.\n    '''\n    digit_count = [0] * 10\n    while n > 0:\n        digit_count[n % 10] += 1\n        n = n // 10\n    odd_count = 0\n    for i in range(10):\n        if digit_count[i] % 2!= 0:\n            odd_count += 1\n            if odd_count > 1:\n                return False\n    return True\n    \ndef binary_search(low, high, list, target):\n    '''\n    Write a python function to search a number in a sorted list.\n    '''\n    if high >= low:\n        mid = (high + low) // 2\n        if list[mid] == target:\n            return mid\n        elif list[mid] > target:\n            return binary_search(low, mid - 1, list, target)\n        else:\n            return binary_search(mid + 1, high, list, target)\n    else:\n        return -1\n    \ndef find_outlier(integers):\n    '''\n    Write a python function to search a number in a sorted list.\n    '''\n    n = len(integers)\n    if n % 2 == 0:\n        first = integers[n // 2]\n        second = integers[n // 2 - 1]\n        if first > second:\n            return second\n        else:\n            return first\n    else:\n        return integers[n // 2]\n    \ndef check_pangram(string):\n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    count = [0] * 26\n    for ch in string:\n        if ch.isalpha():\n            ch = ch.lower()\n            count[ord(ch) - ord('a')] += 1\n    for i in range(26):\n        if count[i] == 0:\n            return False\n    return True\n    \ndef matrix_chain_order(p):\n    '''\n    Write a python function to find the minimum number of matrix operations to multiply a number of matrices in order.\n    '''\n    n = len(p)\n    m = [[0 for x in range(n)] for x in range(n)]\n    s = [[0 for x in range(n)] for x in range(n)]\n    for l in range(2, n):\n        for i in range(1, n - l + 1):\n            j = i + l - 1\n            m[i][j] = sys.maxsize\n            for k in range(i, j):\n                q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j]\n                if q < m[i][j]:\n                    m[i][j] = q\n                    s[i][j] = k\n    return m[1][n - 1]\n    \ndef coin_change(n, denoms):\n    '''\n    Write a python function to find the minimum number of coins required to make a change of a given amount.\n    '''\n    table = [sys.maxsize] * (n + 1)\n    table[0] = 0\n    for denom in denoms:\n        for amount in range(1, n + 1):\n            if denom <= amount:\n                table[amount] = min(table[amount], 1 + table[amount - denom])\n    return table[n]\n    \ndef count_valleys(h):\n    '''\n    Write a python function to count the number of valleys in a histogram.\n    '''\n    count = 0\n    i = 0\n    while i < len(h) - 1:\n        if h[i] < h[i + 1]:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    return count\n    \ndef edit_distance(str1, str2):\n    '''\n    Write a python function to calculate the Edit Distance between two strings.\n    '''\n    n = len(str1)\n    m = len(str2)\n    table = [[0 for x in range(m + 1)] for x in range(n + 1)]\n    for i in range(n + 1):\n        table[i][0] = i\n    for j in range(m + 1):\n        table[0][j] = j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                table[i][j] = table[i - 1][j - 1]\n            else:\n                table[i][j] = 1 + min(table[i][j - 1], table[i - 1][j], table[i - 1][j - 1])\n    return table[n][m]\n    \ndef matrix_rotation(matrix):\n    '''\n    Write a python function to rotate a 2D matrix by 90 degree.\n    '''\n    n = len(matrix)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n - 1 - j][i]\n            matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n            matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n            matrix[j][n - 1 - i] = temp\n    return matrix\n    \ndef new_decorator(old_decorator):\n    def new_decorator(func):\n        def wrap_func():\n            print('**************')\n            func()\n            print('**************')\n        return wrap_func\n    return new_decorator\n    \ndef f(a, b, c):\n    print(a, b, c)\n    \nf = new_decorator(f)\nf()\n        \ndef vowel_count(string):\n    '''\n    Write a python function to count the vowels in a string.\n    '''\n    count = 0\n    for ch in string:\n        if ch in 'aeiouAEIOU':\n            count += 1\n    return count\n    \ndef parenthesis_checker(string):\n    '''\n    Write a python function to check whether a string has balanced parenthesis.\n    '''\n    stack = []\n    for ch in string:\n        if ch == '(':\n            stack.append('(')\n        elif ch == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n    return len(stack) == 0\n    \ndef math_simplifier(expr):\n    '''\n    Write a python function to simplify a mathematical expression.\n    '''\n    stack = []\n    for ch in expr:\n        if ch == '+':\n            stack",
        "num_ids": 24
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == k:\n        return 1\n    elif n == 0 or k == 0:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n    \n",
        "num_ids": 67
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(1,k+1):\n        res = res * (n-i+1) / i\n    return res\ndef binomial_coeff(n, k):\n    '''\n    Use the binomial coefficient to solve the problem in Exercise 19.\n    '''\n    res = 1\n    for i in range(1, k + 1):\n        res = res * (n - i + 1) / i\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C=1\n    for i in range(1,n+1):\n        C=C*i\n    D=1\n    for i in range(1,k+1):\n        D=D*i\n    return (C/D)\n",
        "num_ids": 60
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n * (n - 1) * ((n - k) * 1.0) / k\n",
        "num_ids": 25
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #ip=ip.lstrip('0')\n    ip=re.sub('0+','',ip)\n    return ip\ndef removezero_ip_list(ip_list):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list=map(lambda x:x.lstrip('0'),ip_list)\n    return ip_list\ndef make_range_list(ip_range):\n    '''\n    Write a function to create a list of start-end tuples representing the\n    start and end of each range in the given range.\n    '''\n    result=[]\n    ip_range=ip_range.split('-')\n    ip_range=removezero_ip_list(ip_range)\n    if len(ip_range)==2:\n        ip_range=range(ip_range[0],ip_range[1]+1)\n        result.append(ip_range[0])\n        result.append(ip_range[-1])\n    elif len(ip_range)==1:\n        result.append(ip_range[0])\n    else:\n        raise ValueError('%s is not a valid range'%ip_range)\n    return result\ndef make_range_list_v2(ip_range):\n    '''\n    Write a function to create a list of start-end tuples representing the\n    start and end of each range in the given range.\n    '''\n    result=[]\n    ip_range=ip_range.split('-')\n    ip_range=removezero_ip_list(ip_range)\n    if len(ip_range)==2:\n        ip_range=range(ip_range[0],ip_range[1]+1)\n        result.append((ip_range[0],ip_range[-1]))\n    elif len(ip_range)==1:\n        result.append((ip_range[0],ip_range[0]))\n    else:\n        raise ValueError('%s is not a valid range'%ip_range)\n    return result\ndef get_ip_from_int(ip_int):\n    '''\n    Write a function to convert a 32-bit positive integer into an IP address.\n    '''\n    return '%d.%d.%d.%d'%((ip_int>>24)&0xff,(ip_int>>16)&0xff,(ip_int>>8)&0xff,(ip_int)&0xff)\ndef get_ip_from_int_v2(ip_int):\n    '''\n    Write a function to convert a 32-bit positive integer into an IP address.\n    '''\n    return '%d.%d.%d.%d'%((ip_int>>24)&0xff,(ip_int>>16)&0xff,(ip_int>>8)&0xff,(ip_int)&0xff)\ndef get_int_from_ip(ip_str):\n    '''\n    Write a function to convert an IP address string to a 32-bit positive\n    integer.\n    '''\n    ip_parts=ip_str.split('.')\n    if len(ip_parts)==4:\n        ip_int=reduce(lambda x,y:x*256+y,map(lambda x:int(x),ip_parts))\n        return ip_int\n    raise ValueError('%s is not a valid ip address'%ip_str)\ndef get_int_from_ip_v2(ip_str):\n    '''\n    Write a function to convert an IP address string to a 32-bit positive\n    integer.\n    '''\n    ip_parts=ip_str.split('.')\n    if len(ip_parts)==4:\n        ip_int=reduce(lambda x,y:x*256+y,map(lambda x:int(x),ip_parts))\n        return ip_int\n    raise ValueError('%s is not a valid ip address'%ip_str)\ndef get_int_from_ip_v3(ip_str):\n    '''\n    Write a function to convert an IP address string to a 32-bit positive\n    integer.\n    '''\n    ip_parts=ip_str.split('.')\n    if len(ip_parts)==4:\n        ip_int=reduce(lambda x,y:x*256+y,map(lambda x:int(x),ip_parts))\n        return ip_int\n    raise ValueError('%s is not a valid ip address'%ip_str)\ndef get_int_from_ip_v4(ip_str):\n    '''\n    Write a function to convert an IP address string to a 32-bit positive\n    integer.\n    '''\n    ip_parts=ip_str.split('.')\n    if len(ip_parts)==4:\n        ip_int=reduce(lambda x,y:x*256+y,map(lambda x:int(x),ip_parts))\n        return ip_int\n    raise ValueError('%s is not a valid ip address'%ip_str)\ndef is_ip_in_range(ip_str,ip_range):\n    '''\n    Write a function to determine if an IP address falls within a range.\n    '''\n    ip_int=get_int_from_ip_v4(ip_str)\n    if ip_int>=ip_range[0] and ip_int<=ip_range[-1]:\n        return True\n    return False\ndef is_ip_in_range_v2(ip_str,ip_range):\n    '''\n    Write a function to determine if an IP address falls within a range.\n    '''\n    ip_int=get_int_from_ip_v4(ip_str)\n    if ip_int>=ip_range[0][0] and ip_int<=ip_range[0][1]:\n        return True\n    if ip_int>=ip_range[1][0] and ip_int<=ip_range[1][1]:\n        return True\n    return False\ndef ip_to_int(ip_str):\n    '''\n    Write a function to convert an IP address string to a 32-bit positive\n    integer.\n    '''\n    ip_parts=ip_str.split('.')\n    if len(ip_parts)==4:\n        ip_int=reduce(lambda x,y:x*256+y,map(lambda x:int(x),ip_parts))\n        return ip_int\n    raise ValueError('%s is not a valid ip address'%ip_str)\ndef ip_to_int_v2(ip_str):\n    '''\n    Write a function to convert an IP address string to a 32-bit positive\n    integer.\n    '''\n    ip_parts=ip_str.split('.')\n    if len(ip_parts)==4:\n        ip_int=reduce(lambda x,y:x*256+y,map(lambda x:int(x),ip_parts))\n        return ip_int\n    raise ValueError('%s is not a valid ip address'%ip_str)\ndef ip_to_int_v3(ip_str):\n    '''\n    Write a function to convert an IP address string to a 32-bit positive\n    integer.\n    '''\n    ip_parts=ip_str.split('.')\n    if len(ip_parts)==4:\n        ip_int=reduce(lambda x,y:x*256+y,map(lambda x:int(x),ip_parts))\n        return ip_int\n    raise ValueError('%s is not a valid ip address'%ip_str)\ndef ip_to_int_v4(ip_str):\n    '''\n    Write a function to convert an IP address string to a 32-bit positive\n    integer.\n    '''\n    ip_parts=ip_str.split('.')\n    if len(ip_parts)==4:\n        ip_int=reduce(lambda x,y:x*256+y,map(lambda x:int(x),ip_parts))\n        return ip_int\n    raise ValueError('%s is not a valid ip address'%ip_str)\ndef range_to_int(range_str):\n    '''\n    Write a function to convert a range string into a tuple of start and\n    end IP addresses.\n    '''\n    ip_range",
        "num_ids": 6
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if not ip:\n        return None\n    if ip.startswith('0.'):\n        ip = ip.replace('0.', '', 1)\n    return ip\n",
        "num_ids": 43
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('0*$','',ip)\n",
        "num_ids": 16
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    out = re.sub(r'^0','',ip)\n    return out\n",
        "num_ids": 22
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_clean = ip.lstrip('0')\n    return ip_clean\n",
        "num_ids": 21
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile('^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$')\n    res = re.match(pattern, ip)\n    if res:\n        return res.group(1)+'.'+res.group(2)+'.'+res.group(3)+'.'+res.group(4)\n    else:\n        return None\ndef removezero_mac(mac):\n    '''\n    Write a function to remove leading zeroes from a MAC address.\n    '''\n    pattern = re.compile('^(\\w{1,2}:\\w{2}:\\w{2}:\\w{2}:\\w{2}:\\w{2})(\\w{1,2})(\\w{1,2})$')\n    res = re.match(pattern, mac)\n    if res:\n        return res.group(1)+'.'+res.group(2)+'.'+res.group(3)\n    else:\n        return None\n",
        "num_ids": 114
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    return re.sub(r'0*(\\d)',r'\\1',ip)\n",
        "num_ids": 26
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile('[0-9]+')\n    try:\n        s = pattern.findall(ip)\n    except:\n        return False\n    result = ''\n    for i in s:\n        result += i\n    return result\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from a port.\n    '''\n    pattern = re.compile('[0-9]+')\n    try:\n        s = pattern.findall(port)\n    except:\n        return False\n    result = ''\n    for i in s:\n        result += i\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\.(0){2,}', '', ip)\n",
        "num_ids": 23
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('0*','',ip)\ndef is_valid_ip(s):\n    '''\n    Given a string, return True if it is a valid ip address.\n    '''\n    m = re.match(r'^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$', s)\n    if m is None:\n        return False\n    for n in s.split('.'):\n        if int(n) > 255:\n            return False\n    return True\ndef compute_ip_range(start,end):\n    '''\n    Given two ip addresses, compute the ip range and return it.\n    '''\n    return '%s.%s.%s.%s' % (start,end)\ndef compute_ip_range_v2(ip1,ip2):\n    '''\n    Given two ip addresses, compute the ip range and return it.\n    '''\n    #start = removezero_ip(ip1)\n    #end = removezero_ip(ip2)\n    start = ip1.split('.')\n    end = ip2.split('.')\n    start[3] = str(int(start[3])+1)\n    end[3] = str(int(end[3])-1)\n    start = '.'.join(start)\n    end = '.'.join(end)\n    return '%s-%s' % (start,end)\ndef is_valid_ip_range(s):\n    '''\n    Given a string, return True if it is a valid ip range.\n    '''\n    m = re.match(r'^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})-(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$', s)\n    if m is None:\n        return False\n    for n in s.split('-'):\n        if not is_valid_ip(n):\n            return False\n    return True\ndef is_valid_ip_range_v2(s):\n    '''\n    Given a string, return True if it is a valid ip range.\n    '''\n    m = re.match(r'^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})-(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$', s)\n    if m is None:\n        return False\n    for n in s.split('-'):\n        if not is_valid_ip(n):\n            return False\n    return True\ndef test_is_valid_ip_range():\n    assert is_valid_ip_range('1.1.1.1-1.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-1.1.1.1-2.1.1.1')\n    assert is_valid_ip_range('1.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-1.1.1.1-2.1.1.1')\n    assert is_valid_ip_range('1.1.1.1-1.1.1.1-2.1.1.1')\n    assert is_valid_ip_range('1.1.1.1-1.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-1.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-1.1.1.1-2.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1')\n    assert is_valid_ip_range('1.1.1.1-2.1.1.1')\n    assert is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1')\n    assert is_valid_ip_range('1.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1')\n    assert is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1')\n    assert is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1')\n    assert is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1')\n    assert is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1')\n    assert is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1')\n    assert is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1')\n    assert is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1')\n    assert not is_valid_ip_range('1.1.1.1-2.1.1.1-2.1.1.1-2.1.1.1')",
        "num_ids": 1457
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[1] - list1[0]\n",
        "num_ids": 16
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[1]\n",
        "num_ids": 16
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return abs(even[0] - odd[0])\n",
        "num_ids": 78
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # your code here\n    return list1[0] - list1[1]\n",
        "num_ids": 22
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    return even_num - odd_num\n",
        "num_ids": 61
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    return even - odd\n",
        "num_ids": 26
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        return list1[1] - list1[0]\n",
        "num_ids": 39
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Step 1: Find the First Even Number\n    for num in range(len(list1)):\n        if list1[num] % 2 == 0:\n            even_num = list1[num]\n            break\n    \n    # Step 2: Find the First Odd Number\n    for num in range(len(list1)):\n        if list1[num] % 2 == 1:\n            odd_num = list1[num]\n            break\n    \n    # Step 3: Print the Difference\n    print 'Difference = ', abs(even_num - odd_num)\n",
        "num_ids": 135
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    evens = [x for x in list1 if x % 2 == 0]\n    odds = [x for x in list1 if x % 2 == 1]\n    return evens[0] - odds[0]\n",
        "num_ids": 53
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num = i\n        elif i % 2!= 0:\n            odd_num = i\n    return (odd_num - even_num)\n",
        "num_ids": 70
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = str1 +''\n    str2 = str2 +''\n    str1 = str1.split()\n    str2 = str2.split()\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            str1[i], str2[i] = str2[i], str1[i]\n            count += 1\n    return count\n",
        "num_ids": 106
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    #Convert the strings to lists\n    list1 = list(str1)\n    list2 = list(str2)\n",
        "num_ids": 33
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    import copy\n",
        "num_ids": 6
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1, str2 = str1.lower(), str2.lower()\n    k = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] : \n            k += 1\n            str1 = str1[:i] + str1[i+1:] + str1[i] + str2[i+1:]\n            str2 = str2[:i] + str2[i+1:] + str2[i] + str1[i+1:]\n    return k\n",
        "num_ids": 130
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    for i in range(0,len(str1)):\n        if str1[i]!=str2[i]:\n            count=count+1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print \"Please enter the binary number in the form of an array of 0's and 1's\"\n    arr = list(str1)\n    print arr\n    arr2 = list(str2)\n    count = 0\n    for i in range(len(arr)) :\n        if arr[i]!= arr2[i] :\n            temp = arr[i]\n            arr[i] = arr2[i]\n            arr2[i] = temp\n            count += 1\n    return count\n",
        "num_ids": 117
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1,s2 = [],[]\n    for i in str1: s1.append(int(i))\n    for i in str2: s2.append(int(i))\n    count, i = 0, 0\n    while i < len(s1) :\n        if s1[i]!= s2[i]:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    return count\n",
        "num_ids": 105
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1) == len(str2) : \n        str1 = int(str1,2)\n        str2 = int(str2,2)\n        swaps = 0\n        for i in range(len(str1)) : \n            if str1[i]!= str2[i] : \n                swaps += 1\n                str1 = str1[:i] + str1[i+1:] + str1[i] + str1[i+1:] \n                str2 = str2[:i] + str2[i+1:] + str2[i] + str2[i+1:] \n        return swaps\n    return -1\n",
        "num_ids": 162
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Print the original strings\n    print (\"Original strings are : \", str1,str2)\n",
        "num_ids": 24
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n",
        "num_ids": 22
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    print \"Size in bytes of tuple is \", size\n",
        "num_ids": 40
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    res = 0\n    for elem in tuple_list:\n        res += sys.getsizeof(elem)\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size=0\n    for i in range(len(tuple_list)):\n        size+=sys.getsizeof(tuple_list[i])\n    return size\ndef reverse_list(tuple_list):\n    '''\n    Write a function to reverse the order of the elements in the tuple.\n    '''\n    rev_list=list(tuple_list)\n    rev_list.reverse()\n    return tuple(rev_list)\ndef rotate_list(tuple_list,n):\n    '''\n    Write a function to rotate the given tuple by n elements.\n    '''\n    if n==0:\n        return tuple_list\n    elif n>0:\n        n=n%len(tuple_list)\n        return tuple_list[n:]+tuple_list[:n]\n    elif n<0:\n        n=abs(n)%len(tuple_list)\n        return tuple_list[n:]+tuple_list[:n]\ndef insert_at_n(tuple_list,n,ele):\n    '''\n    Write a function to insert the given ele in tuple at nth index.\n    '''\n    return tuple_list[:n]+(ele,)+tuple_list[n:]\ndef insert_at_n_idx(tuple_list,n,ele):\n    '''\n    Write a function to insert the given ele in tuple at nth index.\n    '''\n    return tuple_list[:n]+(ele,)+tuple_list[n+1:]\ndef insert_nth(tuple_list,n,ele):\n    '''\n    Write a function to insert the given ele in tuple at nth index.\n    '''\n    if n==0:\n        return tuple_list+(ele,)\n    else:\n        return tuple_list[:n]+(ele,)+tuple_list[n:]\ndef delete_at_n(tuple_list,n):\n    '''\n    Write a function to delete the tuple at nth index.\n    '''\n    return tuple_list[:n]+tuple_list[n+1:]\ndef delete_at_n_idx(tuple_list,n):\n    '''\n    Write a function to delete the tuple at nth index.\n    '''\n    return tuple_list[:n]+tuple_list[n+1:]\ndef remove_duplicates(tuple_list):\n    '''\n    Write a function to remove the duplicate elements in the given tuple.\n    '''\n    list=[]\n    for ele in tuple_list:\n        if ele not in list:\n            list.append(ele)\n    return tuple(list)\ndef sort_list(tuple_list):\n    '''\n    Write a function to sort the given tuple.\n    '''\n    return sorted(tuple_list)\ndef sort_list_str(tuple_list):\n    '''\n    Write a function to sort the given tuple based on the alphabetical order of the elements.\n    '''\n    return sorted(tuple_list,key=str)\ndef sort_list_int(tuple_list):\n    '''\n    Write a function to sort the given tuple based on the integer value.\n    '''\n    return sorted(tuple_list,key=int)\ndef sort_list_reversed(tuple_list):\n    '''\n    Write a function to sort the given tuple based on the reverse order of the elements.\n    '''\n    return sorted(tuple_list,reverse=True)\ndef find_max(tuple_list):\n    '''\n    Write a function to find the maximum and the minimum element in the given tuple.\n    '''\n    max=tuple_list[0]\n    min=tuple_list[0]\n    for ele in tuple_list:\n        if ele>max:\n            max=ele\n        if ele<min:\n            min=ele\n    return max,min\ndef unique_tuple(tuple_list):\n    '''\n    Write a function to find the unique elements in the given tuple.\n    '''\n    uniq_list=[]\n    for ele in tuple_list:\n        if ele not in uniq_list:\n            uniq_list.append(ele)\n    return tuple(uniq_list)\ndef remove_duplicates(tuple_list):\n    '''\n    Write a function to remove the duplicate elements in the given tuple.\n    '''\n    list=[]\n    for ele in tuple_list:\n        if ele not in list:\n            list.append(ele)\n    return tuple(list)\ndef get_multiple_element(tuple_list):\n    '''\n    Write a function to get the elements with the count greater than 1.\n    '''\n    ele_dict={}\n    for ele in tuple_list:\n        if ele in ele_dict:\n            ele_dict[ele]+=1\n        else:\n            ele_dict[ele]=1\n    final_list=[]\n    for ele in ele_dict:\n        if ele_dict[ele]>1:\n            final_list.append(ele)\n    return tuple(final_list)\ndef remove_duplicates_dict(tuple_list):\n    '''\n    Write a function to remove the duplicate elements in the given tuple.\n    '''\n    ele_dict={}\n    for ele in tuple_list:\n        if ele in ele_dict:\n            ele_dict[ele]+=1\n        else:\n            ele_dict[ele]=1\n    final_list=[]\n    for ele in ele_dict:\n        if ele_dict[ele]==1:\n            final_list.append(ele)\n    return tuple(final_list)\ndef remove_duplicates_set(tuple_list):\n    '''\n    Write a function to remove the duplicate elements in the given tuple.\n    '''\n    ele_dict=set()\n    for ele in tuple_list:\n        if ele in ele_dict:\n            ele_dict.add(ele)\n        else:\n            ele_dict.add(ele)\n    return tuple(ele_dict)\ndef find_first_duplicate(tuple_list):\n    '''\n    Write a function to find the first duplicate element in the given tuple.\n    '''\n    for ele in tuple_list:\n        if ele in tuple_list[tuple_list.index(ele)+1:]:\n            return ele\n    return None\ndef find_last_duplicate(tuple_list):\n    '''\n    Write a function to find the last duplicate element in the given tuple.\n    '''\n    ele_dict={}\n    for ele in tuple_list:\n        if ele in ele_dict:\n            ele_dict[ele]+=1\n        else:\n            ele_dict[ele]=1\n    for ele in ele_dict:\n        if ele_dict[ele]==1:\n            return ele\n    return None\ndef find_permutation(tuple_list):\n    '''\n    Write a function to find the permutation of the given tuple.\n    '''\n    ele_dict={}\n    for ele in tuple_list:\n        if ele in ele_dict:\n            ele_dict[ele]+=1\n        else:\n            ele_dict[ele]=1\n    for ele in ele_dict:\n        if ele_dict[ele]>1:\n            return False\n    return True\ndef find_permutation_set(tuple_list):\n    '''\n    Write a function to find the permutation of the given tuple.\n    '''\n    ele_dict=set()\n    for ele in tuple_list:\n        if ele in ele_dict:\n            ele_dict.add(ele)\n        else:\n            ele_dict.add(ele)\n    for ele in ele_dict:\n        if ele_dict.count(ele)>1:\n            return False\n    return True\ndef remove_duplicate_elements(tuple_list):\n    '''\n    Write a function to remove the duplicate elements in the given tuple.\n    '''\n    ele_dict={}\n    for ele in tuple_list:\n        if ele in ele_dict:\n            pass\n        else:\n            ele_dict[ele]=1\n    return tuple(ele_dict)\ndef is_permutation(tuple_list1,tuple_list2):\n    '''\n    Write a function to check whether the given tuples are permutations.\n    '",
        "num_ids": 20
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_list = [1,2,3,4,5]\n    tuple_len = 0\n    for i in tuple_list:\n        tuple_len += sys.getsizeof(i)\n    print(tuple_len)\n    # 5\n    \ndef tuple_len(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_len = 0\n    for i in tuple_list:\n        tuple_len += sys.getsizeof(i)\n    print(tuple_len)\n    # 6\n",
        "num_ids": 47
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n    \ndef simple_list(lst):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return sys.getsizeof(lst)\n    \ndef slice_tuple(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list[1:])\n    \ndef nested_tuple(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list[1][1])\n    \ndef simple_dict(dic):\n    '''\n    Write a function to find the size in bytes of the given dictionary.\n    '''\n    return sys.getsizeof(dic)\n    \ndef nested_dict(dic):\n    '''\n    Write a function to find the size in bytes of the given dictionary.\n    '''\n    return sys.getsizeof(dic[1][1])\n    \ndef set_comprehension(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    return sys.getsizeof(set_list)\n    \ndef dict_comprehension(dic):\n    '''\n    Write a function to find the size in bytes of the given dictionary.\n    '''\n    return sys.getsizeof(dic)\n    \ndef list_comprehension(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return sys.getsizeof(list_list)\n    \ndef generator(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(generator_list)\n    \ndef generator_expressions(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10))\n    \ndef generator_function(generator_function_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(next(generator_function_list))\n    \ndef recursive_function(recursive_list):\n    '''\n    Write a function to find the size in bytes of the given recursive function.\n    '''\n    return sys.getsizeof(recursive_list(recursive_list))\n    \ndef generator_generator(generator_generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(generator_generator_list(recursive_list))\n    \ndef generator_expressions_with_if(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10) if x*y > 50)\n    \ndef generator_expressions_with_if_else(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10) if x*y > 50 if x*y < 100)\n    \ndef generator_expressions_with_if_else_nested(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10) if x*y > 50 if x*y < 100 if x*y > 100)\n    \ndef generator_expressions_with_nested_if(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10) if x*y > 50 if x*y < 100)\n    \ndef generator_expressions_with_nested_if_else(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10) if x*y > 50 if x*y < 100 if x*y > 100)\n    \ndef generator_expressions_with_nested_if_else_nested(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10) if x*y > 50 if x*y < 100 if x*y > 100 if x*y < 1000)\n    \ndef generator_expressions_with_nested_if_else_nested_generator(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10) if x*y > 50 if x*y < 100 if x*y > 100 if x*y < 1000)\n    \ndef generator_expressions_with_nested_for(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10))\n    \ndef generator_expressions_with_nested_for_else(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10) if x*y > 50)\n    \ndef generator_expressions_with_nested_for_else_nested(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10) if x*y > 50 if x*y < 100)\n    \ndef generator_expressions_with_nested_for_else_nested_generator(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10) if x*y > 50 if x*y < 100 if x*y > 100)\n    \ndef generator_expressions_with_nested_for_else_nested_generator_2(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10) if x*y > 50 if x*y < 100 if x*y > 100)\n    \ndef generator_expressions_with_nested_for_else_nested_generator_3(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10) if x*y > 50 if x*y < 100 if x*y > 100)\n    \ndef generator_expressions_with_nested_for_else_nested_generator_4(generator_list):\n    '''\n    Write a function to find the size in bytes of the given generator.\n    '''\n    return sys.getsizeof(x*y for x in range(10) for y in range(10) if x*y > 50 if x*y < 100 if x*y > 100)\n    \ndef generator_expressions_with_nested_for_else_nested_generator_5(gene",
        "num_ids": 74
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total=0\n    for i in tuple_list:\n        total+=sys.getsizeof(i)\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for value in tuple_list:\n        size += sys.getsizeof(value)\n    return size\n",
        "num_ids": 32
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s=0\n    for i in range(len(tuple_list)):\n        s=s+sys.getsizeof(tuple_list[i])\n    return s\n    \nprint tuple_size((1,2,3,4,5))\nprint tuple_size((1,2,3,4,5,6,7,8,9,10))\nprint tuple_size((1,2,3,4,5,6,7,8,9,10,11,12))\nprint tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887",
        "num_ids": 2010
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #print \"tuple_list\",tuple_list\n    n=len(tuple_list)\n    s=0\n    for i in xrange(n):\n        #print \"i\",i\n        s=s+sys.getsizeof(tuple_list[i])\n    return s\n",
        "num_ids": 73
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    if k == 0:\n        return arr1[0]\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if i + 1 == k:\n                return arr1[i]\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if j + 1 == k:\n                return arr2[j]\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return arr1[i] if i < len(arr1) else arr2[j]\n",
        "num_ids": 154
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while True:\n        if i == len(arr1) or j == len(arr2):\n            return None\n        if i < len(arr1) and j < len(arr2) and arr1[i] <= arr2[j]:\n            if arr1[i] == arr2[j]:\n                return arr1[i]\n            i += 1\n        else:\n            if arr2[j] == arr1[i]:\n                return arr2[j]\n            j += 1\n",
        "num_ids": 126
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    elif k == len(arr1):\n        return arr2[-1]\n    elif k == len(arr2):\n        return arr1[-1]\n    mid1 = len(arr1) / 2\n    mid2 = len(arr2) / 2\n    if arr1[mid1] > arr2[mid2]:\n        return find_kth(arr1[:mid1], arr2, k)\n    else:\n        return find_kth(arr1, arr2[:mid2], k)\n",
        "num_ids": 186
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n",
        "num_ids": 26
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    arr1.extend(arr2)\n    arr1.sort()\n",
        "num_ids": 22
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left = 0\n    right = len(arr1)\n    while left < right:\n        mid = (left + right) / 2\n        if arr1[mid] > arr2[0]:\n            right = mid\n        elif arr1[mid] < arr2[0]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr1[left]\n",
        "num_ids": 92
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if len1 == 0:\n        return arr2[k-1]\n    elif len2 == 0:\n        return arr1[k-1]\n    elif k > len1 + len2:\n        return -1\n    elif k == len1 + len2:\n        return max(arr1[-1], arr2[-1])\n    elif len1 > len2:\n        return find_kth(arr1[:-1], arr2, k)\n    elif len1 < len2:\n        return find_kth(arr1, arr2[:-1], k)\n    else:\n        if arr1[0] > arr2[0]:\n            return find_kth(arr1[1:], arr2, k)\n        else:\n            return find_kth(arr1, arr2[1:], k-1)\n",
        "num_ids": 225
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == [] or arr2 == []:\n        return -1\n",
        "num_ids": 20
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    for i in range(0, min(len(arr1), len(arr2))):\n        if arr1[i] == arr2[i]:\n            k -= 1\n        elif arr1[i] > arr2[i]:\n            k -= 1\n        else:\n            return arr2[i]\n",
        "num_ids": 75
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1:\n        return binary_search(arr1, arr2, k)\n    return k\n",
        "num_ids": 27
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    order = len(str(number))\n    sum = 0\n    while num:\n        digit = num % 10\n        sum += digit ** order\n        num //= 10\n    if number == sum:\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # return sum([int(digit) ** len(str(number)) for digit in str(number)]) == number\n    return str(number) == str(sum([int(digit) ** len(str(number)) for digit in str(number)]))\n",
        "num_ids": 60
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    while number > 0:\n        digit = number % 10\n        sum += digit ** 3\n        number //= 10\n    return sum == number\n",
        "num_ids": 40
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_list = list(str(number))\n    number_length = len(number_list)\n    total = 0\n    for i in number_list:\n        total += pow(int(i), number_length)\n    if number == total:\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum_of_digits = sum(digit ** 3 for digit in str(number))\n    return sum_of_digits == number\n",
        "num_ids": 34
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    original_number = number\n    sum_of_digit = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum_of_digit += digit ** 3\n        temp //= 10\n",
        "num_ids": 54
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #number = int(input('Enter a number: '))\n    sum = 0\n    temp = number\n    while temp > 0:\n        rem = temp % 10\n        sum += rem ** 3\n        temp //= 10\n    if sum == number:\n        return True\n    return False\n",
        "num_ids": 69
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    result = 0\n    for digit in str(number):\n        result += int(digit) ** 3\n    if number == result:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == number\n",
        "num_ids": 45
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum += i\n        average = sum / number\n    return [sum, average]\n",
        "num_ids": 45
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if type(number)!= int:\n        raise TypeError(\"input is not a natural number\")\n    if number < 1:\n        raise ValueError(\"input is less than 1\")\n    return (number * (number + 1)) / 2\n",
        "num_ids": 57
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    sum = 0\n    average = 0\n    \n    for i in range(1, number+1):\n        sum += i\n    \n    average = sum / number\n    \n    return sum, average\n",
        "num_ids": 51
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    assert type(number) == int and number > 0, 'n is not a positive integer'\n    sum_ = 0\n    average_ = 0\n    i = 1\n    while i <= number:\n        sum_ += i\n        average_ = sum_ / i\n        i += 1\n    return sum_, average_\n",
        "num_ids": 76
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 0:\n        raise ValueError\n    return sum(range(1, number+1)), (sum(range(1, number+1)))/number\n",
        "num_ids": 40
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    a = 0\n    for i in range(number+1):\n        s += i\n        a = s/number\n    return s, a\n",
        "num_ids": 41
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number <= 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < number:\n        sum += count\n        count += 1\n    average = sum / count\n    print 'Sum = %d\\nAverage = %d' % (sum,average)\n",
        "num_ids": 57
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average\n",
        "num_ids": 48
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True\n    else :\n        return False\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 :\n        for i in range(2, n) :\n            if (n % i) == 0 :\n                return False\n        return True\n    else :\n        return False\n    \ndef factorial(n) : \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if n == 0 :\n        return 1\n    else :\n        return n * factorial(n-1)\n",
        "num_ids": 29
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\ndef is_Odd(n) :\n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2 == 1 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n%2 == 0)\n    \n",
        "num_ids": 14
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n & 1) == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n    \n    \n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    return not is_Even(n)\n    \n    \ndef is_Perfect(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    divisor = 1\n    while divisor<n : \n        if n%divisor==0 : \n            divisor+=1\n        else : \n            return False\n    return True\n        \n        \n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    divisor = 2\n    while divisor<n : \n        if n%divisor==0 : \n            return False\n        else : \n            divisor+=1\n    return True\n    \n    \ndef is_Fibonacci(n) : \n    '''\n    Write a python function to check whether the given number is Fibonacci or not.\n    '''\n    if is_Perfect(n) and is_Prime(n+1) and is_Prime(n+2) : \n        return True\n    return False\n    \n    \ndef is_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    return str(n)==str(n)[::-1]\n    \n    \ndef is_Arithmetic(n) : \n    '''\n    Write a python function to check whether the given number is arithmetic or not.\n    '''\n    return is_Perfect(n) and is_Prime(n+2) and is_Prime(n+1)\n    \n    \ndef is_Pandigital(n) : \n    '''\n    Write a python function to check whether the given number is pandigital or not.\n    '''\n    d = 9\n    s = str(n)\n    while len(s)<d : \n        s+=str(d)\n        d-=1\n    return len(s)==d\n    \n    \ndef is_Harshad(n) : \n    '''\n    Write a python function to check whether the given number is harshad or not.\n    '''\n    d = 9\n    s = str(n)\n    while len(s)<d : \n        s+=str(d)\n        d-=1\n    n = int(s)\n    if n%9==0 : \n        return True\n    return False\n    \n    \ndef is_Strong(n) : \n    '''\n    Write a python function to check whether the given number is strong or not.\n    '''\n    d = 9\n    s = str(n)\n    while len(s)<d : \n        s+=str(d)\n        d-=1\n    n = int(s)\n    s = str(n)\n    sum1 = 0\n    sum2 = 0\n    for i in range(0,len(s)) : \n        sum1+=int(s[i])**5\n        sum2+=int(s[i])**3\n    if sum1==n and sum2==n : \n        return True\n    return False\n    \n    \ndef is_PandigitalPrime(n) : \n    '''\n    Write a python function to check whether the given number is pandigital prime or not.\n    '''\n    d = 9\n    s = str(n)\n    while len(s)<d : \n        s+=str(d)\n        d-=1\n    n = int(s)\n    s = str(n)\n    if is_Pandigital(n) and is_Prime(n) : \n        return True\n    return False\n    \n    \ndef is_Kaprekar(n) : \n    '''\n    Write a python function to check whether the given number is kaprekar number or not.\n    '''\n    d = 9\n    s = str(n)\n    while len(s)<d : \n        s+=str(d)\n        d-=1\n    n = int(s)\n    s = str(n)\n    if is_Pandigital(n) and is_Prime(n) : \n        s1 = str(n**2)\n        s2 = str(n**2+n)\n        return s1==s2\n    return False\n    \n    \ndef is_Mixed(n) : \n    '''\n    Write a python function to check whether the given number is mixed or not.\n    '''\n    return is_PandigitalPrime(n) and is_Perfect(n)\n    \n    \ndef is_Reverse(n) : \n    '''\n    Write a python function to check whether the given number is reverse number or not.\n    '''\n    return str(n)[::-1]==str(n)\n    \n    \ndef is_PalindromePrime(n) : \n    '''\n    Write a python function to check whether the given number is palindrome prime or not.\n    '''\n    d = 9\n    s = str(n)\n    while len(s)<d : \n        s+=str(d)\n        d-=1\n    n = int(s)\n    s = str(n)\n    if is_Pandigital(n) and is_Prime(n) : \n        s1 = str(n**2)\n        s2 = str(n**2+n)\n        if is_Reverse(s1) and is_Reverse(s2) : \n            return True\n    return False\n    \n    \ndef is_Lucas(n) : \n    '''\n    Write a python function to check whether the given number is Lucas number or not.\n    '''\n    d = 9\n    s = str(n)\n    while len(s)<d : \n        s+=str(d)\n        d-=1\n    n = int(s)\n    s = str(n)\n    if is_Pandigital(n) and is_Prime(n+2) and is_Prime(n+1) : \n        return True\n    return False\n    \n    \ndef is_Abundant(n) : \n    '''\n    Write a python function to check whether the given number is abundant or not.\n    '''\n    d = 9\n    s = str(n)\n    while len(s)<d : \n        s+=str(d)\n        d-=1\n    n = int(s)\n    s = str(n)\n    sum1 = 0\n    for i in range(0,len(s)) : \n        sum1+=int(s[i])\n    if sum1>n : \n        return True\n    return False\n    \n    \ndef is_SuperAbundant(n) : \n    '''\n    Write a python function to check whether the given number is super abundant or not.\n    '''\n    d = 9\n    s = str(n)\n    while len(s)<d : \n        s+=str(d)\n        d-=1\n    n = int(s)\n    s = str(n)\n    sum1 = 0\n    for i in range(0,len(s)) : \n        sum1+=int(s[i])\n    if sum1>n and sum1>2*n : \n        return True\n    return False\n    \n    \ndef is_Sumsquare(n) : \n    '''\n    Write a python function to check whether the given number is sumsquare or not.\n    '''\n    d = 9\n    s = str(n)\n    while len(s)<d : \n        s+=str(d)\n        d-=1\n    n = int(s)\n    s = str(n)\n    sum1 = 0\n    for i in range(0,len(s)) : \n        sum1+=int(s[i])\n    s1 = str(sum1*sum1)\n    s2 = str(sum1*sum1+n)\n    return s1==s2\n    \n    \ndef is_PalindromeAbundant(n) : \n    '''\n    Write a python function to check whether th",
        "num_ids": 11
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = {}\n    for i in str1:\n        if i in seen:\n            return i\n        else:\n            seen[i] = 1\n    return 'None'\n    ",
        "num_ids": 45
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for letter in str1:\n        if str1.count(letter) > 1:\n            return letter\n    return None\n",
        "num_ids": 31
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n",
        "num_ids": 27
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return None\n    return find_first_match(str1, str1, 0)\n",
        "num_ids": 34
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return None\n",
        "num_ids": 43
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    counts = {}\n    for c in str1:\n        counts[c] = counts.get(c, 0) + 1\n    return min(counts, key=counts.get)\n",
        "num_ids": 49
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        if i in dict1:\n            return i\n        else:\n            dict1[i] = 1\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i] in str1[i + 1:]:\n            return str1[i]\n    return None\n",
        "num_ids": 46
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    def char_count(str2):\n        return [str2.count(i) for i in set(str2)]\n    \n    def first_repeat_index(str3):\n        return [i for i in range(len(str3)) if str3.count(str3[i]) > 1][0]\n    \n    str1 = str1.lower()\n    str1 = str1.replace(\" \", \"\")\n    return str1[first_repeat_index(str1)]\n    \n    \ndef dfs(u, v, visited, graph, n):\n    '''\n    u is the current node, v is the destination node\n    visited is a list to keep track of visited nodes\n    graph is the graph\n    '''\n    if u == v:\n        return True\n    visited.append(u)\n    for i in graph[u]:\n        if i not in visited:\n            if dfs(i, v, visited, graph, n):\n                return True\n    return False\n",
        "num_ids": 63
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    counter = 1\n    str2 = ''\n",
        "num_ids": 15
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(2,n):\n        p = 2\n        while (i*p) < n:\n            p *= 2\n        if (i*p) == n:\n            lucids.append(i)\n    return lucids\n",
        "num_ids": 68
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_ludic(n):\n        return n < 4 and n % 2 == 0 or n < 9 and n % 3 == 0\n    return list(filter(is_ludic, range(1, n)))\n",
        "num_ids": 52
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def get_lucids(n):\n        lucids = []\n        for i in range(n+1):\n            for j in range(n+1):\n                if i*i + j*j == n:\n                    lucids.append(i*j)\n        return lucids\n",
        "num_ids": 72
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = [1,2]\n    for i in range(3,n+1):\n        if is_ludicrous(i):\n            ludic_nums.append(i)\n    return ludic_nums\n",
        "num_ids": 58
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 1:\n        return [n]\n    last = get_ludic(n-1)\n    return last + [x+1 for x in last if x+1 <= n]\n",
        "num_ids": 48
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [1]\n    while n > 1:\n        if n%2 == 0:\n            n = n/2\n            lucid.append(2*lucid[-1])\n        else:\n            n = 3*n + 1\n            lucid.append(lucid[-1] + 1)\n    return lucid\n",
        "num_ids": 86
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 4:\n        return [1, 2, 3]\n    elif n < 7:\n        return [1, 2, 3, 4]\n    elif n < 11:\n        return [1, 2, 3, 4, 5]\n    elif n < 19:\n        return [1, 2, 3, 4, 5, 6]\n    else:\n        return [1, 2, 3, 4, 5, 6, 7]\n",
        "num_ids": 107
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(0,n):\n        result.append(i*i)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1,2]\n    elif n == 3:\n        return [1,2,3]\n    else:\n        return get_ludic(n - 1) + get_ludic(n - 2) + get_ludic(n - 3)\n",
        "num_ids": 85
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    assert type(n) is int\n    if n == 1:\n        return [1]\n    lucid = []\n    lucid.extend(get_ludic(n-1))\n    if n % 2 == 1:\n        lucid.append(n)\n    for i in range(n-1, 0, -1):\n        if i % 2 == 1:\n            lucid.append(i)\n    return lucid\n",
        "num_ids": 107
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    return''.join(s)\n",
        "num_ids": 24
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    return''.join(words[::-1])\n",
        "num_ids": 22
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = s.split(' ')\n    return''.join(l[::-1])\n",
        "num_ids": 24
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # get list of strings\n    s = s.split(' ')\n    # reverse each string\n    for i in range(len(s)):\n        s[i] = s[i][::-1]\n    # join each string back into a string\n    return''.join(s)\n",
        "num_ids": 70
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # The final answer has to be a list of words\n    words = s.split()\n    # Reverse the list\n    words.reverse()\n    # Join the words in the reversed list and return\n    return''.join(words)\n",
        "num_ids": 55
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    s = s.split()\n    s.reverse()\n    return''.join(s)\n",
        "num_ids": 26
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n",
        "num_ids": 17
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, int(num/2)):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for n in range(2,num):\n            if num % n == 0:\n                return False\n            else:\n                return True\n",
        "num_ids": 61
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 1:\n        return False\n    elif num == 2:\n        return True\n    elif num > 2 and num % 2 == 0:\n        return False\n    elif num > 2 and num % 3 == 0:\n        return False\n    else:\n        return all(num % i!= 0 for i in range(5, int(num**0.5 + 1), 6))\n",
        "num_ids": 95
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # if num == 2 or num == 3:\n    #     return True\n    # if num % 2 == 0 or num % 3 == 0:\n    #     return False\n    # if num == 5:\n    #     return False\n    # for i in range(5, int(num ** 0.5) + 1, 6):\n    #     if num % i == 0 or num % (i + 2) == 0:\n    #         return False\n    # return True\n",
        "num_ids": 111
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n            else:\n                return True\n",
        "num_ids": 61
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # \u4ece2\u5f00\u59cb\u5230num/2\u7684\u6240\u6709\u6574\u6570\uff0c\u9664\u4e861\u548cnum\u672c\u8eab\n    for i in range(2, int(num**0.5)+1):\n        # \u5982\u679c\u80fd\u88ab\u6574\u9664\uff0c\u5219\u80af\u5b9a\u4e0d\u662f\u7d20\u6570\n        if num % i == 0:\n            return False\n    return True\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(",
        "num_ids": 143
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num<0:\n        num = -num\n    if num == 1 or num == 0:\n        return False\n    else:\n        for i in range(2,num):\n            if num%i == 0:\n                return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree2(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef radian_cos(x1,x2):\n    '''\n    Write a function to compute the value of cosine of radian angles.\n    '''\n    return math.cos(x1-x2)\ndef radian_sin(x1,x2):\n    '''\n    Write a function to compute the value of sine of radian angles.\n    '''\n    return math.sin(x1-x2)\ndef dist_line(x1,y1,x2,y2):\n    '''\n    Write a function to compute the distance between line segments.\n    '''\n    return math.sqrt((x2-x1)**2 + (y2-y1)**2)\ndef angle_between_line(x1,y1,x2,y2):\n    '''\n    Write a function to compute the angle between two line segments.\n    '''\n    v1 = [x2-x1,y2-y1]\n    v2 = [x1-x2,y1-y2]\n    return math.acos(radian_cos(v1[0],v2[0])*radian_cos(v1[1],v2[1]) + radian_sin(v1[0],v2[0])*radian_sin(v1[1],v2[1]))\ndef dist_point_point(x1,y1,x2,y2):\n    '''\n    Write a function to compute the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2 + (y2-y1)**2)\ndef dist_point_line(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to compute the distance between point and line segment.\n    '''\n    v1 = [x2-x1,y2-y1]\n    v2 = [x3-x1,y3-y1]\n    return dist_line(x1,y1,x2,y2) * radian_cos(radian_degree(v1[0]),radian_degree(v2[0]))\ndef distance_point_polygon(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the distance between point and polygon.\n    '''\n    d1 = dist_point_point(x1,y1,x2,y2)\n    d2 = dist_point_point(x1,y1,x3,y3)\n    d3 = dist_point_point(x2,y2,x4,y4)\n    d4 = dist_point_point(x3,y3,x4,y4)\n    if d1 > d2:\n        return d4\n    elif d1 > d3:\n        return d4\n    elif d2 > d3:\n        return d1\n    else:\n        return d2\ndef distance_line_polygon(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the distance between line and polygon.\n    '''\n    d1 = dist_line(x1,y1,x2,y2)\n    d2 = dist_line(x1,y1,x3,y3)\n    d3 = dist_line(x2,y2,x4,y4)\n    if d1 > d2:\n        return d3\n    elif d1 > d3:\n        return d3\n    elif d2 > d3:\n        return d1\n    else:\n        return d2\ndef area_triangle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to compute the area of a triangle.\n    '''\n    return abs((x2-x1)*(y3-y1) - (x3-x1)*(y2-y1))/2\ndef area_polygon(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the area of a polygon.\n    '''\n    return abs(area_triangle(x1,y1,x2,y2,x3,y3) + area_triangle(x2,y2,x3,y3,x4,y4) + area_triangle(x3,y3,x4,y4,x1,y1) - area_triangle(x1,y1,x2,y2,x4,y4))/2\ndef circle_area(x1,y1,r):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    return math.pi * r**2\ndef area_circle_circle(x1,y1,x2,y2,r1,r2):\n    '''\n    Write a function to compute the area of two circles.\n    '''\n    return abs(circle_area(x1,y1,r1) + circle_area(x2,y2,r2) - circle_area(x1,y1,r2) - circle_area(x2,y2,r1))\ndef is_between_angle(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to check if the point is inside the polygon or not.\n    '''\n    return (x4 - x1) * (y3 - y1) > (y4 - y1) * (x3 - x1) and (x3 - x1) * (y2 - y1) > (y3 - y1) * (x2 - x1) and (x2 - x1) * (y4 - y1) > (y2 - y1) * (x4 - x1)\ndef is_between_point_point(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to check if the point is inside the polygon or not.\n    '''\n    return (x3 - x1) * (y2 - y1) > (y3 - y1) * (x2 - x1) and (x2 - x1) * (y3 - y1) > (y2 - y1) * (x3 - x1)\ndef is_between_line_line(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to check if the point is inside the polygon or not.\n    '''\n    return (x4 - x1) * (y2 - y1) > (y4 - y1) * (x2 - x1) and (x2 - x1) * (y4 - y1) > (y2 - y1) * (x4 - x1)\ndef is_between_point_line(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to check if the point is inside the polygon or not.\n    '''\n    return (x4 - x1) * (y2 - y1) > (y4 - y1) * (x2 - x1) and (x2 - x1) * (y4 - y1) > (y2 - y1) * (x4 - x1)\ndef is_between_point_polygon(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to check if the point is inside the polygon or not.\n    '''\n    if is_between_point_point(x1,y1,x2,y2,x3,y3) or is_between_point_point(x1,y1,x2,y2,x4,y4) or is_between_point_point(x3,y3,x4,y4,x1,y1) or is_between_point_point(x3,y3,x",
        "num_ids": 100
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef radian_arcmin(arcmin):\n    '''\n    Write a function to convert arcmins to radians.\n    '''\n    return arcmin*(math.pi/180)*60\ndef radian_arcsec(arcsec):\n    '''\n    Write a function to convert arcsec to radians.\n    '''\n    return arcsec*(math.pi/180)*3600\ndef radian_ha(ha):\n    '''\n    Write a function to convert hours to radians.\n    '''\n    return ha*(math.pi/12)\ndef radian_lst(lst):\n    '''\n    Write a function to convert lst to radians.\n    '''\n    return lst*(math.pi/12)\n",
        "num_ids": 15
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\ndef distance_on_sphere(lat1, lon1, lat2, lon2):\n    '''\n    Write a function to compute the distance between two points on the Earth.\n    '''\n    R = 6371.0\n    dLat = radian_degree(lat2 - lat1)\n    dLon = radian_degree(lon2 - lon1)\n    a = math.sin(dLat / 2) * math.sin(dLat / 2) + math.cos(radian_degree(lat1)) * math.cos(radian_degree(lat2)) * math.sin(dLon / 2) * math.sin(dLon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = R * c\n    return d\ndef distance(lat1, lon1, lat2, lon2):\n    '''\n    Write a function to compute the distance between two points in the earth.\n    '''\n    R = 6371.0\n    dLat = lat2 - lat1\n    dLon = lon2 - lon1\n    a = math.sin(dLat / 2) * math.sin(dLat / 2) + math.cos(radian_degree(lat1)) * math.cos(radian_degree(lat2)) * math.sin(dLon / 2) * math.sin(dLon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = R * c\n    return d\ndef radius_of_curvature(lat, lon, curvature):\n    '''\n    Write a function to compute the radius of curvature for a spherical polygon.\n    '''\n    R = 6371.0\n    dLat = radian_degree(lat2 - lat1)\n    dLon = radian_degree(lon2 - lon1)\n    a = math.sin(dLat / 2) * math.sin(dLat / 2) + math.cos(radian_degree(lat1)) * math.cos(radian_degree(lat2)) * math.sin(dLon / 2) * math.sin(dLon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = R * c\n    return d\ndef is_clockwise(lat1, lon1, lat2, lon2):\n    '''\n    Write a function to determine if the points are in counter-clockwise order or not.\n    '''\n    R = 6371.0\n    dLat = radian_degree(lat2 - lat1)\n    dLon = radian_degree(lon2 - lon1)\n    a = math.sin(dLat / 2) * math.sin(dLat / 2) + math.cos(radian_degree(lat1)) * math.cos(radian_degree(lat2)) * math.sin(dLon / 2) * math.sin(dLon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return c > 0\ndef is_counter_clockwise(lat1, lon1, lat2, lon2):\n    '''\n    Write a function to determine if the points are in counter-clockwise order or not.\n    '''\n    R = 6371.0\n    dLat = radian_degree(lat2 - lat1)\n    dLon = radian_degree(lon2 - lon1)\n    a = math.sin(dLat / 2) * math.sin(dLat / 2) + math.cos(radian_degree(lat1)) * math.cos(radian_degree(lat2)) * math.sin(dLon / 2) * math.sin(dLon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return c < 0\ndef center_on_ellipse(lat, lon, curvature):\n    '''\n    Write a function to compute the center point of an ellipse.\n    '''\n    R = 6371.0\n    dLat = radian_degree(lat2 - lat1)\n    dLon = radian_degree(lon2 - lon1)\n    a = math.sin(dLat / 2) * math.sin(dLat / 2) + math.cos(radian_degree(lat1)) * math.cos(radian_degree(lat2)) * math.sin(dLon / 2) * math.sin(dLon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = R * c\n    return d\ndef is_on_ellipse(lat1, lon1, lat2, lon2, curvature):\n    '''\n    Write a function to determine if the points are on the ellipse or not.\n    '''\n    R = 6371.0\n    dLat = radian_degree(lat2 - lat1)\n    dLon = radian_degree(lon2 - lon1)\n    a = math.sin(dLat / 2) * math.sin(dLat / 2) + math.cos(radian_degree(lat1)) * math.cos(radian_degree(lat2)) * math.sin(dLon / 2) * math.sin(dLon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = R * c\n    return d\ndef is_in_ellipse(lat1, lon1, lat2, lon2, curvature):\n    '''\n    Write a function to determine if the points are in the ellipse or not.\n    '''\n    R = 6371.0\n    dLat = radian_degree(lat2 - lat1)\n    dLon = radian_degree(lon2 - lon1)\n    a = math.sin(dLat / 2) * math.sin(dLat / 2) + math.cos(radian_degree(lat1)) * math.cos(radian_degree(lat2)) * math.sin(dLon / 2) * math.sin(dLon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = R * c\n    return d\ndef is_in_ellipse_on_sphere(lat1, lon1, lat2, lon2, curvature):\n    '''\n    Write a function to determine if the points are on the ellipse or not.\n    '''\n    R = 6371.0\n    dLat = radian_degree(lat2 - lat1)\n    dLon = radian_degree(lon2 - lon1)\n    a = math.sin(dLat / 2) * math.sin(dLat / 2) + math.cos(radian_degree(lat1)) * math.cos(radian_degree(lat2)) * math.sin(dLon / 2) * math.sin(dLon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = R * c\n    return d\ndef is_in_ellipse_on_sphere_reverse(lat1, lon1, lat2, lon2, curvature):\n    '''\n    Write a function to determine if the points are in the ellipse or not.\n    '''\n    R = 6371.0\n    dLat = radian_degree(lat2 - lat1)\n    dLon = radian_degree(lon2 - lon1)\n    a = math.sin(dLat / 2) * math.sin(dLat / 2) + math.cos(radian_degree(lat1)) * math.cos(radian_degree(lat2)) * math.sin(dLon / 2) * math.sin(dLon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = R * c\n    return d\ndef is_in_square(lat1, lon1, lat2, lon2, curvature):\n    '''\n    Write a function to determine if the points are in the square or no",
        "num_ids": 17
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*(180/math.pi)\ndef number_to_binary(n):\n    '''\n    Write a function to convert an integer to a binary number.\n    '''\n    return n%2\ndef binary_to_number(n):\n    '''\n    Write a function to convert a binary number to an integer.\n    '''\n    return n/2\ndef binary_to_digit(n):\n    '''\n    Write a function to convert a binary number to a digit.\n    '''\n    return int(n)\ndef digit_to_binary(n):\n    '''\n    Write a function to convert a digit to a binary number.\n    '''\n    return int(n)*2\ndef base_to_number(n,base):\n    '''\n    Write a function to convert a number to a given base.\n    '''\n    total = 0\n    n = str(n)\n    for i in range(len(n)):\n        total+=int(n[i])*int(base**i)\n    return total\ndef number_to_base(n,base):\n    '''\n    Write a function to convert a number to a given base.\n    '''\n    total = ''\n    while n>=1:\n        total+=str(n%base)\n        n/=base\n    return total[::-1]\ndef to_decimal(n,base):\n    '''\n    Write a function to convert a number to a decimal number.\n    '''\n    return base_to_number(n,base)/base\ndef to_base(n,base):\n    '''\n    Write a function to convert a number to a given base.\n    '''\n    return number_to_base(n,base)\ndef to_scientific(n,base):\n    '''\n    Write a function to convert a number to a given base.\n    '''\n    return number_to_base(n,base)\ndef to_radian(n):\n    '''\n    Write a function to convert a number to a radian angle.\n    '''\n    return radian_degree(n)\ndef to_degree(n):\n    '''\n    Write a function to convert a radian angle to a degree angle.\n    '''\n    return degree_radian(n)\ndef to_binary(n):\n    '''\n    Write a function to convert a number to a binary number.\n    '''\n    return binary_to_number(n)\ndef to_digit(n):\n    '''\n    Write a function to convert a binary number to a digit.\n    '''\n    return digit_to_binary(n)\ndef to_base(n,base):\n    '''\n    Write a function to convert a number to a given base.\n    '''\n    return number_to_base(n,base)\ndef to_decimal(n,base):\n    '''\n    Write a function to convert a number to a decimal number.\n    '''\n    return to_base(n,base)\ndef to_radian(n):\n    '''\n    Write a function to convert a number to a radian angle.\n    '''\n    return to_radian(n)\ndef to_degree(n):\n    '''\n    Write a function to convert a radian angle to a degree angle.\n    '''\n    return to_degree(n)\ndef to_binary(n):\n    '''\n    Write a function to convert a number to a binary number.\n    '''\n    return to_binary(n)\ndef to_digit(n):\n    '''\n    Write a function to convert a binary number to a digit.\n    '''\n    return to_digit(n)\ndef to_base(n,base):\n    '''\n    Write a function to convert a number to a given base.\n    '''\n    return to_base(n,base)\ndef to_decimal(n,base):\n    '''\n    Write a function to convert a number to a decimal number.\n    '''\n    return to_decimal(n,base)\ndef to_radian(n):\n    '''\n    Write a function to convert a number to a radian angle.\n    '''\n    return to_radian(n)\ndef to_degree(n):\n    '''\n    Write a function to convert a radian angle to a degree angle.\n    '''\n    return to_degree(n)\ndef to_binary(n):\n    '''\n    Write a function to convert a number to a binary number.\n    '''\n    return to_binary(n)\ndef to_digit(n):\n    '''\n    Write a function to convert a binary number to a digit.\n    '''\n    return to_digit(n)\ndef to_base(n,base):\n    '''\n    Write a function to convert a number to a given base.\n    '''\n    return to_base(n,base)\ndef to_decimal(n,base):\n    '''\n    Write a function to convert a number to a decimal number.\n    '''\n    return to_decimal(n,base)\ndef to_radian(n):\n    '''\n    Write a function to convert a number to a radian angle.\n    '''\n    return to_radian(n)\ndef to_degree(n):\n    '''\n    Write a function to convert a radian angle to a degree angle.\n    '''\n    return to_degree(n)\ndef to_binary(n):\n    '''\n    Write a function to convert a number to a binary number.\n    '''\n    return to_binary(n)\ndef to_digit(n):\n    '''\n    Write a function to convert a binary number to a digit.\n    '''\n    return to_digit(n)\ndef to_base(n,base):\n    '''\n    Write a function to convert a number to a given base.\n    '''\n    return to_base(n,base)\ndef to_decimal(n,base):\n    '''\n    Write a function to convert a number to a decimal number.\n    '''\n    return to_decimal(n,base)\ndef to_radian(n):\n    '''\n    Write a function to convert a number to a radian angle.\n    '''\n    return to_radian(n)\ndef to_degree(n):\n    '''\n    Write a function to convert a radian angle to a degree angle.\n    '''\n    return to_degree(n)\ndef to_binary(n):\n    '''\n    Write a function to convert a number to a binary number.\n    '''\n    return to_binary(n)\ndef to_digit(n):\n    '''\n    Write a function to convert a binary number to a digit.\n    '''\n    return to_digit(n)\ndef to_base(n,base):\n    '''\n    Write a function to convert a number to a given base.\n    '''\n    return to_base(n,base)\ndef to_decimal(n,base):\n    '''\n    Write a function to convert a number to a decimal number.\n    '''\n    return to_decimal(n,base)\ndef to_radian(n):\n    '''\n    Write a function to convert a number to a radian angle.\n    '''\n    return to_radian(n)\ndef to_degree(n):\n    '''\n    Write a function to convert a radian angle to a degree angle.\n    '''\n    return to_degree(n)\ndef to_binary(n):\n    '''\n    Write a function to convert a number to a binary number.\n    '''\n    return to_binary(n)\ndef to_digit(n):\n    '''\n    Write a function to convert a binary number to a digit.\n    '''\n    return to_digit(n)\ndef to_base(n,base):\n    '''\n    Write a function to convert a number to a given base.\n    '''\n    return to_base(n,base)\ndef to_decimal(n,base):\n    '''\n    Write a function to convert a number to a decimal number.\n    '''\n    return to_decimal(n,base)\ndef to_radian(n):\n    '''\n    Write a functio",
        "num_ids": 8
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * (180/math.pi)\ndef angle_str_to_deg(angle):\n    '''\n    Write a function that takes a string of the format '1degrees 30minutes' or '1radians 45minutes' and returns the angle in degrees.\n    '''\n    if angle[-1].lower() == 'r':\n        return degree_radian(float(angle[:-2]))\n    else:\n        return float(angle[:-2])\ndef angle_deg_to_str(angle):\n    '''\n    Write a function to take a angle in degrees and return the string '1degrees 30minutes' or '1radians 45minutes'.\n    '''\n    deg = radian_degree(angle)\n    if deg == int(deg):\n        return str(int(deg)) + 'degrees'\n    else:\n        return str(deg) + 'radians'\ndef distance_str_to_rad(distance):\n    '''\n    Write a function that takes a string in the format '1.123km' and returns the distance in radians.\n    '''\n    return float(distance[:-2]) * 1.0e5\ndef distance_rad_to_str(distance):\n    '''\n    Write a function to take a distance in radians and return the string '1.123km'.\n    '''\n    return str(int(round(distance/1.0e5,0))) + 'km'\ndef angle_str_to_rad(angle):\n    '''\n    Write a function that takes a string of the format '1degrees 30minutes' or '1radians 45minutes' and returns the angle in radians.\n    '''\n    if angle[-1].lower() == 'r':\n        return float(angle[:-2])\n    else:\n        return degree_radian(float(angle[:-2]))\ndef angle_rad_to_str(angle):\n    '''\n    Write a function to take a angle in radians and return the string '1degrees 30minutes' or '1radians 45minutes'.\n    '''\n    deg = degree_radian(angle)\n    if deg == int(deg):\n        return str(int(deg)) + 'degrees'\n    else:\n        return str(deg) + 'radians'\ndef change_angle_rad(angle,change):\n    '''\n    Write a function that takes an angle in radians and returns the angle in radians plus/minus change.\n    '''\n    return angle + change\ndef change_angle_deg(angle,change):\n    '''\n    Write a function that takes an angle in degrees and returns the angle in degrees plus/minus change.\n    '''\n    return radian_degree(angle) + change\ndef points_to_deg(angle):\n    '''\n    Write a function that takes a number of points and returns the angle that the line between the first and last point is passing through.\n    '''\n    return radian_degree(angle)\ndef deg_to_points(angle):\n    '''\n    Write a function that takes an angle in degrees and returns the number of points that the line between the first and last point is passing through.\n    '''\n    return int(round(angle/radian_degree(90)))\ndef parallel_lines(angle1,angle2):\n    '''\n    Write a function to check if two lines are parallel.\n    '''\n    return abs(radian_degree(angle1) - radian_degree(angle2)) < 1e-6\ndef is_in_angle(angle,angle_lower,angle_upper):\n    '''\n    Write a function to check if a given angle is inside the range [angle_lower, angle_upper] or not.\n    '''\n    return angle_lower <= angle <= angle_upper\ndef is_point_on_line(point, line):\n    '''\n    Write a function that takes a point (x,y) and a line (x0,y0,x1,y1) and returns True if the point is on the line, False otherwise.\n    '''\n    return ((line[1] - line[3]) * (point[0] - line[0]) - (line[2] - line[0]) * (point[1] - line[1]) <= 0) and (line[1] - line[3] >= 0) and (line[2] - line[0] >= 0)\ndef is_point_on_line_squared(point, line):\n    '''\n    Write a function that takes a point (x,y) and a line (x0,y0,x1,y1) and returns True if the point is on the line, False otherwise.\n    '''\n    return (((line[1] - line[3]) * (line[1] - point[1]) + (line[2] - line[0]) * (line[2] - point[0])) >= 0) and (line[1] - line[3] >= 0) and (line[2] - line[0] >= 0)\ndef angle_line_to_point(angle, line):\n    '''\n    Write a function that takes an angle in radians and a line (x0,y0,x1,y1) and returns the angle between the line and the point (x,y).\n    '''\n    slope = (line[3] - line[1]) / (line[2] - line[0])\n    return math.atan(slope)\ndef angle_point_to_line(angle, point):\n    '''\n    Write a function that takes an angle in radians and a point (x,y) and returns the angle between the line and the point.\n    '''\n    slope = (point[1] - point[3]) / (point[0] - point[2])\n    return math.atan(slope)\ndef is_in_triangle(point, triangle):\n    '''\n    Write a function that takes a point (x,y) and a triangle (x0,y0,x1,y1,x2,y2) and returns True if the point is inside the triangle, False otherwise.\n    '''\n    if is_point_on_line_squared(point,triangle):\n        return True\n    if is_point_on_line_squared(point,triangle[::-1]):\n        return True\n    return (is_point_on_line(point,triangle[::-1]) and is_point_on_line(point,triangle))\ndef is_in_triangle_v2(point, triangle):\n    '''\n    Write a function that takes a point (x,y) and a triangle (x0,y0,x1,y1,x2,y2) and returns True if the point is inside the triangle, False otherwise.\n    '''\n    return (is_point_on_line(point,triangle[::-1]) and is_point_on_line(point,triangle))\ndef get_line_intersection(line1, line2):\n    '''\n    Write a function that takes two lines and returns the intersection point.\n    '''\n    return line1[1] * line2[2] - line1[2] * line2[1], line1[2] * line2[0] - line1[0] * line2[2], line1[0] * line2[1] - line1[1] * line2[0]\ndef get_triangle_area(triangle):\n    '''\n    Write a function that takes a triangle (x0,y0,x1,y1,x2,y2) and returns the area of the triangle.\n    '''\n    return abs(radian_degree(math.sqrt((triangle[1] - triangle[3])**2 + (triangle[2] - triangle[0])**2)) + radian_degree(math.sqrt((triangle[1] - triangle[3])**2 + (triangle[2] - triangle[0])**2)))\ndef get_triangle_angles(triangle):\n    '''\n    Write a function that takes a triangle (x0,y0,x1,y1,x2,y2) and returns a list of the angles (in degrees) of the three sides of the triangle.\n    '''\n    return [radian_degree(math.sqrt((triangle[1] ",
        "num_ids": 21
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef radian_to_degree(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*(180/math.pi)\ndef radian_to_decimal(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*(180/math.pi)\ndef decimal_to_radian(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*(math.pi/180)\ndef degree_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef radian_to_degree_on_360(radian):\n    '''\n    Write a function to convert radians to degrees on 360.\n    '''\n    return radian*(360/math.pi)\ndef degree_to_radian_on_360(degree):\n    '''\n    Write a function to convert degrees to radians on 360.\n    '''\n    return degree*(360/math.pi)\ndef degree_to_radian_on_360_on_360(degree):\n    '''\n    Write a function to convert degrees to radians on 360 on 360.\n    '''\n    return degree*(360/math.pi)\ndef radian_to_degree_on_360_on_360(radian):\n    '''\n    Write a function to convert radians to degrees on 360 on 360.\n    '''\n    return radian*(360/math.pi)\ndef radian_to_degree_on_360_on_360_on_360(radian):\n    '''\n    Write a function to convert radians to degrees on 360 on 360 on 360.\n    '''\n    return radian*(360/math.pi)\ndef radian_to_degree_on_360_on_360_on_360_on_360(radian):\n    '''\n    Write a function to convert radians to degrees on 360 on 360 on 360 on 360.\n    '''\n    return radian*(360/math.pi)\ndef radian_to_degree_on_360_on_360_on_360_on_360_on_360_on_360(radian):\n    '''\n    Write a function to convert radians to degrees on 360 on 360 on 360 on 360 on 360 on 360 on 360.\n    '''\n    return radian*(360/math.pi)\ndef degree_to_radian_on_360_on_360_on_360_on_360_on_360_on_360_on_360_on_360_on_360_on_360(degree):\n    '''\n    Write a function to convert degrees to radians on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 on 360 o",
        "num_ids": 1347
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef convert_to_radians(angle):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return radian_degree(angle)\ndef degree_to_radians(angle):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return radian_degree(angle)\ndef convert_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef convert_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef decimal_degrees_to_radians(angle):\n    '''\n    Write a function to convert decimal degrees to radians.\n    '''\n    return angle * (math.pi / 180)\ndef decimal_degrees_to_radians(angle):\n    '''\n    Write a function to convert decimal degrees to radians.\n    '''\n    return angle * (math.pi / 180)\ndef decimal_degrees_to_radians(angle):\n    '''\n    Write a function to convert decimal degrees to radians.\n    '''\n    return angle * (math.pi / 180)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_decimal_degrees(angle):\n    '''\n    Write a function to convert radians to decimal degrees.\n    '''\n    return angle * (180 / math.pi)\ndef radians_to_de",
        "num_ids": 21
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Get the position of all pattern matches\n    pos = [m.start() for m in re.finditer(pattern, text)]\n    # Find the indexes of all matching characters\n    pos_chars = [m.start() for m in re.finditer('[a-zA-Z0-9]+', pattern)]\n    # Find the indexes of all starting chars\n    pos_starts = [m.start() for m in re.finditer('^[a-zA-Z0-9]+', pattern)]\n",
        "num_ids": 122
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = []\n    m = re.search(pattern, text)\n    while m:\n        start = m.start()\n        end = m.end()\n        match = m.group(0)\n        matches.append((match, start, end))\n        m = re.search(pattern, text[end:])\n    return matches\n",
        "num_ids": 83
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    m = re.search(pattern, text)\n    if m:\n        return m.group()\n    else:\n        return None\n",
        "num_ids": 36
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literal = []\n    match = re.search(pattern, text)\n    if match:\n        literal.append(match.group(0))\n        index = match.start()\n        end = match.end()\n        literal.append(index)\n        literal.append(end)\n    return literal\n",
        "num_ids": 76
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if pattern == \"\":\n        return None\n    # O(n)\n    try:\n        index = 0\n        # O(n)\n        while index < len(text):\n            # O(1)\n            m = re.search(pattern, text[index:])\n            # O(m.end()-m.start())\n            if m:\n                return m.group(), index, index + m.end()\n            index += 1\n    except Exception as e:\n        print(\"Error: {0}\".format(e))\n    return None\n",
        "num_ids": 131
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # no match\n    if pattern is None:\n        return None, 0, 0\n",
        "num_ids": 22
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = len(text)\n    while (end - start > 0):\n        mid = (start + end) / 2\n        if re.search(pattern, text[start:end]):\n            return start, end\n        elif re.search(pattern, text[start:mid]):\n            start = mid\n        else:\n            end = mid\n    return -1, -1\n",
        "num_ids": 97
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.search(pattern,text)\n    if not matches:\n        return None, None, None\n    start,end = matches.start(), matches.end()\n    return matches.group(), start, end\n",
        "num_ids": 53
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    '''\n    This is an example regex that finds integers within a string\n    Match the following strings.\n    \n    1.    \"2A3B4C5D6E7F8\"\n    2.    \"1234567890\"\n    3.    \"1234567890\"\n    4.    \"1234567890\"\n    5.    \"1234567890\"\n    '''\n    \n    #Generate a list of possible matches in the text\n    match_list = re.findall(pattern,text)\n    \n    #Start and end indices\n    start_idx = 0\n    end_idx = 0\n    \n    #Lists for the start and end indices\n    start_idx_list = []\n    end_idx_list = []\n    \n    #Loop through the match list\n    for match in match_list:\n        #Find the start indices\n        start_idx = text.find(match,start_idx)\n        \n        #Find the end indices\n        end_idx = start_idx + len(match)\n        \n        #Add the start and end indices to the list\n        start_idx_list.append(start_idx)\n        end_idx_list.append(end_idx)\n        \n    #Return the start and end indices\n    return (start_idx_list,end_idx_list)\n",
        "num_ids": 234
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    # Uses a new list to store the results of the pattern search\n    results = []\n    \n    # The below code finds the start and end indices of the search pattern and adds them to results\n    # The search pattern is read one at a time\n    start = 0\n    while(True):\n        result = re.search(pattern, text[start:])\n        if result is not None:\n            results.append([result.group(0), result.start(0), result.end(0)])\n            start = result.end(0)\n        else:\n            break\n    \n    # The below code finds the start and end indices of the search pattern and adds them to results\n    # The search pattern is read one at a time\n    start = 0\n    while(True):\n        result = re.search(pattern, text[start:])\n        if result is not None:\n            results.append([result.group(0), result.start(0), result.end(0)])\n            start = result.end(0)\n        else:\n            break\n    \n    return results\n    \n",
        "num_ids": 254
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #nth bell number\n    bell_num = [[1, 1, 1, 1, 1, 1, 1], \\\n                [1, 1, 1, 1, 1, 1, 1], \\\n                [1, 1, 2, 3, 5, 8, 13], \\\n                [1, 1, 2, 5, 14, 42, 132], \\\n                [1, 1, 3, 10, 55, 276, 764], \\\n                [1, 2, 4, 15, 120, 560, 1764], \\\n                [2, 3, 6, 21, 210, 1140, 2832], \\\n                [3, 5, 10, 31, 900, 3820, 6512], \\\n                [4, 7, 13, 56, 2700, 7920, 10464], \\\n                [5, 9, 17, 77, 4500, 9480, 12288], \\\n                [6, 11, 19, 114, 6700, 10400, 14112], \\\n                [7, 13, 24, 167, 6100, 11200, 15360], \\\n                [8, 15, 26, 243, 10000, 12800, 16896], \\\n                [9, 17, 30, 575, 27000, 10800, 15360], \\\n                [10, 19, 34, 945, 10000, 15000, 17280], \\\n                [11, 21, 38, 1260, 10000, 17000, 20000], \\\n                [12, 23, 42, 1720, 10000, 17000, 20000], \\\n                [13, 25, 45, 2200, 10000, 17000, 20000], \\\n                [14, 27, 50, 3300, 10000, 17000, 20000], \\\n                [15, 29, 54, 4100, 10000, 17000, 20000], \\\n                [16, 31, 60, 5400, 10000, 17000, 20000], \\\n                [17, 33, 66, 6600, 10000, 17000, 20000], \\\n                [18, 35, 72, 8800, 10000, 17000, 20000], \\\n                [19, 37, 78, 9500, 10000, 17000, 20000], \\\n                [20, 39, 84, 10600, 10000, 17000, 20000], \\\n                [21, 41, 90, 11500, 10000, 17000, 20000], \\\n                [22, 43, 96, 12400, 10000, 17000, 20000], \\\n                [23, 45, 102, 13800, 10000, 17000, 20000], \\\n                [24, 47, 108, 15000, 10000, 17000, 20000], \\\n                [25, 49, 114, 15700, 10000, 17000, 20000], \\\n                [26, 51, 120, 16000, 10000, 17000, 20000], \\\n                [27, 53, 126, 16900, 10000, 17000, 20000], \\\n                [28, 55, 132, 17200, 10000, 17000, 20000], \\\n                [29, 57, 138, 17500, 10000, 17000, 20000], \\\n                [30, 59, 144, 17800, 10000, 17000, 20000], \\\n                [31, 61, 150, 18000, 10000, 17000, 20000], \\\n                [32, 63, 156, 18400, 10000, 17000, 20000], \\\n                [33, 65, 162, 18600, 10000, 17000, 20000], \\\n                [34, 67, 168, 18800, 10000, 17000, 20000], \\\n                [35, 69, 174, 19000, 10000, 17000, 20000], \\\n                [36, 71, 180, 19400, 10000, 17000, 20000], \\\n                [37, 73, 186, 19600, 10000, 17000, 20000], \\\n                [38, 75, 192, 19800, 10000, 17000, 20000], \\\n                [39, 77, 198, 20000, 10000, 17000, 20000], \\\n                [40, 79, 204, 20000, 10000, 17000, 20000], \\\n                [41, 81, 210, 20000, 10000, 17000, 20000], \\\n                [42, 83, 216, 20000, 10000, 17000, 20000], \\\n                [43, 85, 222, 20000, 10000, 17000, 20000], \\\n                [44, 87, 228, 20000, 10000, 17000, 20000], \\\n                [45, 89, 234, 20000, 10000, 17000, 20000], \\\n                [46, 91, 240, 20000, 10000, 17000, 20000], \\\n                [47, 93, 246, 20000, 10000, 17000, 20000], \\\n                [48, 95, 252, 20000, 10000, 17000, 20000], \\\n                [49, 97, 258, 20000, 10000, 17000, 20000], \\\n                [50, 99, 264, 20000, 10000, 17000, 20000], \\\n                [51, 101, 270, 20000, 10000, 17000, 20000], \\\n                [52, 103, 276, 20000, 10000, 17000, 20000], \\\n                [53, 105, 282, 20000, 10000, 17000, 20000], \\\n                [54, 107, 288, 20000, 10000, 17000, 20000], \\\n                [55, 109, 294, 20000, 10000, 17000, 20000], \\\n                [56, 111, 300, 20000, 10000, 17000, 20000], \\\n                [57, 113, 306, 20000, 10000, 17000, 20000], \\\n                [58, 115, 312, 20000, 10000, 17000, 20000], \\\n                [59, 117, 318, 20000, 10000, 17000, 20000], \\\n                [60, 119, 324, 20000, 10000, 17000, 20000], \\\n                [61, 121, 330, 20000, 10000, 17000, 20000], \\\n                [62, 123, 336, 20000, 10000, 17000, 20000], \\\n                [63, 125, 342, 20000, 10000, 17000, 20000], \\\n                [64, 127, 348, 20000, 10000, 17000, 20000], \\\n                [65, 129, 354, 20000, 10000, 17000, 20000], \\\n                [66, 131, 360, 20000, 10000, 17000, 20000], \\\n                [67, 133, 366, 20000, 10000, 17000, 20000], \\\n                [68, 135, 372, 20000, 10000, 17000, 20000], \\\n                [69, 137, 378, 20000, 10000, 17000, 20000], \\\n                [70, 139, 384, 20000, 10000, 17000, 20000], \\\n                [71, 141, 390, 20000, 10000, 17000, 20000], \\\n                [72, 143, 396, 20000, 10000, 17000, 20000], \\\n                [73, 145, 402, 20000, 10000, 17000, 20000], \\\n                [74, 147, 408, 20000, 10000, 17000, 20000], \\\n                [75, 149, 414, 20000, 10000, 17000, 20000], \\\n                [76, 151, 420, 20000, 10000, 17000, 20000], \\\n                [77, 153, 426, 20000, 10000, 17000, 20000], \\\n                [78, 155, 432, 20000, 10000, 17000, 20000], \\\n                [79, 157, 438, 20000, 10000, 17000, 20000], \\\n                [80, 159, 444, 20000, 10000, 17000, 20000], \\\n                [81, 161, 450, 20000, 10000, 17000, 20000], \\\n                [82, 163, 456, 20000, 10000, 17000, 20000], \\\n                [83, 165, 462, 20000, 10000, 17000, 20000], \\\n                [84, 167, 468, 20000, 10000, 17000, 20000], \\\n                [85, 169, 474, 20000, 10000, 17000, 20000], \\\n                [86, 171, 480, 20000, 10000, 17000, 20000], \\\n                [87, 173, 486, 20000, 10000, 17000, 20000], \\\n                [88, 175, 492, 20000, 10000, 17000, 20000], \\\n                [89, 177, 498, 20000, 10000, 17000, 20000], \\\n                [90, 179, 504, 20000, 10000, 17000, 20000], \\\n                [91, 181, 510, 20000, 10000, 17000, 20000], \\\n            ",
        "num_ids": 2020
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    for i in xrange(1,n+1):\n        bell += sum(i for i in range(1,i+1))\n    return bell\n",
        "num_ids": 43
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_n = 1\n    for i in range(1, n+1):\n        bell_n = bell_n * i\n    return bell_n\n",
        "num_ids": 39
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n<0:\n        return \"Enter a positive number\"\n    else:\n        n_factorial = 1\n        for i in range(1,n+1):\n            n_factorial = n_factorial*i\n        return n_factorial/2\n",
        "num_ids": 65
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n - 1) + n\n    \ndef tower_of_hanoi(n, source, destination, helper): \n    '''\n    Write a python function to find nth tower of hanoi algorithm.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        print 'Move disk 1 from',source,'to',destination\n        return 1\n    else:\n        return tower_of_hanoi(n - 1, source, helper, destination) + tower_of_hanoi(n - 1, helper, destination, source) + tower_of_hanoi(n - 1, source, helper, destination)\n    \n    \ndef circular_permutation(n, i, permutation):\n    '''\n    Write a python function to find nth circular permutation of the given array.\n    '''\n    \n    if n == 1:\n        return [i]\n    else:\n        return circular_permutation(n - 1, i, permutation) + [i]\n",
        "num_ids": 42
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    if n < 0: \n        return 0\n    return bell_Number(n-1) + bell_Number(n-2)\n",
        "num_ids": 46
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    else:\n        return bell_Number(n-1) + n \n",
        "num_ids": 32
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return ((1+5**0.5)/2)**n - (1-5**0.5)/2\n    \ndef find_factors(n):\n    '''\n    Write a python function to find all the factors of a number.\n    '''\n    factors = []\n    for i in range(1, n):\n        if n%i == 0:\n            factors.append(i)\n    return factors\n    \ndef find_factors_of_list(numbers):\n    '''\n    Write a python function to find all the factors of a list of numbers.\n    '''\n    all_factors = []\n    for i in numbers:\n        all_factors.append(find_factors(i))\n    return all_factors\n    \ndef largest_divisible_number(n):\n    '''\n    Write a python function to find the nth largest divisible number.\n    '''\n    largest_divisor = 1\n    for i in range(1, n):\n        if n%i == 0:\n            largest_divisor = i\n    return largest_divisor\n    \ndef first_n_smallest_divisors(n):\n    '''\n    Write a python function to find the first n smallest divisors.\n    '''\n    smallest_divisor = 1\n    for i in range(2, n+1):\n        if n%i == 0:\n            smallest_divisor = i\n    return smallest_divisor\n    \ndef all_divisors(n):\n    '''\n    Write a python function to find all the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors\n    \ndef sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    divisors = all_divisors(n)\n    divisors.remove(n)\n    return sum(divisors)\n    \ndef find_all_divisors_of_list(numbers):\n    '''\n    Write a python function to find the sum of all the divisors of a list.\n    '''\n    all_divisors = []\n    for i in numbers:\n        all_divisors.append(sum_of_divisors(i))\n    return all_divisors\n    \ndef find_sum_of_divisors_of_list(numbers):\n    '''\n    Write a python function to find the sum of divisors of a list.\n    '''\n    all_divisors = find_all_divisors_of_list(numbers)\n    all_divisors.append(1)\n    return sum(all_divisors)\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef find_n_factorial(n):\n    '''\n    Write a python function to find the nth factorial.\n    '''\n    return factorial(n)\n    \ndef all_factorials(n):\n    '''\n    Write a python function to find all the factorials of a number.\n    '''\n    all_factorials = []\n    for i in range(1, n+1):\n        all_factorials.append(find_n_factorial(i))\n    return all_factorials\n    \ndef find_n_th_factorial(n):\n    '''\n    Write a python function to find the nth factorial.\n    '''\n    return find_factorial(n)\n    \ndef multiply_factorial(n):\n    '''\n    Write a python function to multiply the nth and (n-1)th factorial.\n    '''\n    return n*find_n_th_factorial(n-1)\n    \ndef find_factorial_sum_of_list(numbers):\n    '''\n    Write a python function to find the sum of all the factorials of a list.\n    '''\n    all_factorials = find_all_factorials(numbers)\n    all_factorials.append(1)\n    return sum(all_factorials)\n    \ndef find_factorial_sum_of_number(n):\n    '''\n    Write a python function to find the sum of all the factorials of a number.\n    '''\n    return multiply_factorial(n)\n    \ndef find_factorial_of_number(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    return find_factorial(n)\n    \ndef find_all_factorials_of_list(numbers):\n    '''\n    Write a python function to find the sum of all the factorials of a list.\n    '''\n    all_factorials = find_all_factorials(numbers)\n    all_factorials.append(1)\n    return all_factorials\n    \ndef find_all_factorials(numbers):\n    '''\n    Write a python function to find the sum of all the factorials of a list.\n    '''\n    all_factorials = []\n    for i in numbers:\n        all_factorials.append(find_factorial(i))\n    return all_factorials\n    \ndef first_n_smallest_factorial(n):\n    '''\n    Write a python function to find the nth smallest factorial.\n    '''\n    return first_n_smallest_divisors(factorial(n))\n    \ndef find_n_smallest_factorial(n):\n    '''\n    Write a python function to find the nth smallest factorial.\n    '''\n    return first_n_smallest_factorial(n)\n    \ndef sum_of_n_smallest_factorials(n):\n    '''\n    Write a python function to find the sum of n smallest factorials.\n    '''\n    return sum(first_n_smallest_factorial(i) for i in range(1, n+1))\n    \ndef find_sum_of_n_smallest_factorials(n):\n    '''\n    Write a python function to find the sum of n smallest factorials.\n    '''\n    return sum_of_n_smallest_factorials(n)\n    \ndef nth_smallest_factorial(n):\n    '''\n    Write a python function to find the nth smallest factorial.\n    '''\n    return find_n_smallest_factorial(n)\n    \ndef find_nth_smallest_factorial(n):\n    '''\n    Write a python function to find the nth smallest factorial.\n    '''\n    return find_n_smallest_factorial(n)\n    \ndef nth_smallest_factorial_sum(n):\n    '''\n    Write a python function to find the sum of n smallest factorials.\n    '''\n    return find_sum_of_n_smallest_factorials(n)\n    \ndef find_nth_smallest_factorial_sum(n):\n    '''\n    Write a python function to find the sum of n smallest factorials.\n    '''\n    return nth_smallest_factorial_sum(n)\n    \ndef fibonacci_numbers(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_numbers(n-1) + fibonacci_numbers(n-2)\n    \ndef find_nth_fibonacci_number(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    return fibonacci_numbers(n)\n    \ndef find_nth_fibonacci_number_sum(n):\n    '''\n    Write a python function to find the sum of n fibonacci numbers.\n    '''\n    return find_nth",
        "num_ids": 8
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*bell_Number(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) <= L:\n        return list1\n    else:\n        return list1[L]\n",
        "num_ids": 30
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L[1])\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L>0:\n        k=list1.pop(L-1)\n        return k\n    else:\n        print('L must be a positive integer!')\n        return None\n        \n",
        "num_ids": 48
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 1:\n        return list1\n    elif len(list1) == 2:\n        if list1[0] == L:\n            return list1[1]\n        else:\n            return list1[0]\n    else:\n        a = remove_kth_element(list1[1:], L)\n        if a == list1[0]:\n            return a\n        else:\n            return [list1[0]] + a\n",
        "num_ids": 113
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    del list1[L]\n    return list1\n",
        "num_ids": 15
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n    ",
        "num_ids": 20
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1[L]\n    return list2\n",
        "num_ids": 17
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1[1:]\n    else:\n        return list1[:L-1] + list1[L:]\n",
        "num_ids": 38
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not test_list:\n        return\n    else:\n        col_list = list(zip(*test_list))\n        #print(col_list)\n        if not col_list:\n            return\n        else:\n            return max(col_list[N - 1])\n",
        "num_ids": 68
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_column = []\n    for row in test_list:\n        max_of_column.append(row[N-1])\n    return max_of_column\n",
        "num_ids": 44
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([num for num in test_list[N]])\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    column = []\n    \n    for i in test_list:\n        column.append(i[N-1])\n    return max(column)\n",
        "num_ids": 37
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    total = []\n    for i in range(0, len(test_list)):\n        total.append(max(test_list[i][N]))\n    return max(total)\n",
        "num_ids": 47
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    column = []\n    for row in test_list:\n        column.append(row[N-1])\n    return max(column)\n",
        "num_ids": 35
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not isinstance(test_list, list) or len(test_list) == 0 or not isinstance(test_list[0], list):\n        return None\n    \n    n = len(test_list)\n    m = len(test_list[0])\n    \n    if not m:\n        return None\n    \n    if N > m:\n        return None\n    \n    col = []\n    \n    for i in range(m):\n        col.append(test_list[i][N-1])\n        \n    return max(col)\n",
        "num_ids": 133
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = -1\n    for row in test_list:\n        if len(row) >= N:\n            if row[N-1] > max:\n                max = row[N-1]\n    return max\n    \ndef test_max_of_nth():\n    assert max_of_nth([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]], 2) == 11\n    assert max_of_nth([[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]], 3) == 15\n",
        "num_ids": 165
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(lambda row: row[N], test_list))\n",
        "num_ids": 20
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_num = test_list[0][N-1]\n    for row in test_list:\n        if max_num < row[N-1]:\n            max_num = row[N-1]\n    return max_num\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2001
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(0, len(lst))]\n    \ndef is_even(n):\n    '''\n    Write a python function which takes a non negative integer as input, and returns true if it is even, and false otherwise.\n    '''\n    return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [list(x[0]) + list(x[1]) for x in zip(lst[::2], lst[1::2])]\n",
        "num_ids": 38
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[x][0], lst[x][1]] for x in range(len(lst))]\ndef merge_sort(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a sorted list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) <= 1:\n        return lst\n    else:\n        mid = int(len(lst)/2)\n        left = merge_sort(lst[:mid])\n        right = merge_sort(lst[mid:])\n        return merge(left) + merge(right)\ndef fact(n):  \n    '''\n    Write a python function which takes a number and returns a list of the factorials of the number's digits.\n    '''\n    return merge_sort([str(x) for x in range(1,n+1)])\ndef fib(n):  \n    '''\n    Write a python function which takes a number and returns the nth number of the Fibonacci sequence.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)\ndef count_bits(n):  \n    '''\n    Write a python function which takes a number and returns the number of bits used to represent it in the binary system.\n    '''\n    return len(bin(n)[2:])\ndef hash(n):  \n    '''\n    Write a python function which takes a number and returns the hash of the number.\n    '''\n    return len(bin(n)[2:])\ndef is_perfect(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is perfect, and False otherwise.\n    '''\n    if (n == sum([int(x) for x in bin(n)[2:] if int(x) == 1])):\n        return True\n    else:\n        return False\ndef is_abundant(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is abundant, and False otherwise.\n    '''\n    if (n < sum([int(x) for x in bin(n)[2:] if int(x) == 1])):\n        return True\n    else:\n        return False\ndef is_deficient(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is deficient, and False otherwise.\n    '''\n    if (n < sum([int(x) for x in bin(n)[2:] if int(x) == 1])):\n        return True\n    else:\n        return False\ndef is_amicable(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is amicable, and False otherwise.\n    '''\n    if (n!= sum([int(x) for x in bin(n)[2:] if int(x) == 1])):\n        return False\n    else:\n        return (is_perfect(n) and is_abundant(n))\ndef is_perfect_square(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is perfect square, and False otherwise.\n    '''\n    return (n**(1/2.0) == int(n**(1/2.0)) )\ndef is_abundant_square(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is abundant square, and False otherwise.\n    '''\n    return (n > sum([int(x) for x in bin(n)[2:] if int(x) == 1]) and is_perfect_square(n))\ndef sum_square_diff(n):  \n    '''\n    Write a python function which takes a number and returns the sum of its square and the difference of its square from the number n.\n    '''\n    return ((n*(n+1))/2) + n\ndef is_pythagorean_triplet(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is a pythagorean triplet, and False otherwise.\n    '''\n    x, y = 1, 0\n    while (x < n):\n        x += 1\n        y = n-x\n        if (x**2 + y**2 == n**2):\n            return True\n    return False\ndef is_pythagorean_pentagonal_triplet(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is a pythagorean pentagonal triplet, and False otherwise.\n    '''\n    x, y = 1, 1\n    while (x < n):\n        x += 1\n        y = (n * x)/y\n        if (x**2 + y**2 == n**2):\n            return True\n    return False\ndef is_pythagorean_hexagonal_triplet(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is a pythagorean hexagonal triplet, and False otherwise.\n    '''\n    x, y = 1, 1\n    while (x < n):\n        x += 1\n        y = (n * x**2)/y\n        if (x**2 + y**2 == n**2):\n            return True\n    return False\ndef is_pythagorean_heptagonal_triplet(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is a pythagorean heptagonal triplet, and False otherwise.\n    '''\n    x, y = 1, 1\n    while (x < n):\n        x += 1\n        y = (n * x**3)/y\n        if (x**2 + y**2 == n**2):\n            return True\n    return False\ndef is_pythagorean_octagonal_triplet(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is a pythagorean octagonal triplet, and False otherwise.\n    '''\n    x, y = 1, 1\n    while (x < n):\n        x += 1\n        y = (n * x**4)/y\n        if (x**2 + y**2 == n**2):\n            return True\n    return False\ndef is_pythagorean_nonagonal_triplet(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is a pythagorean nonagonal triplet, and False otherwise.\n    '''\n    x, y = 1, 1\n    while (x < n):\n        x += 1\n        y = (n * x**5)/y\n        if (x**2 + y**2 == n**2):\n            return True\n    return False\ndef is_pythagorean_right_triangle(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is a pythagorean right-angled triplet, and False otherwise.\n    '''\n    x, y = 1, 1\n    while (x < n):\n        x += 1\n        y = (n * x**2)/y\n        if (x**2 == n**2 or y**2 == n**2):\n            return True\n    return False\ndef is_pythagorean_triple(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is a pythagorean triple, and False otherwise.\n    '''\n    return is_pythagorean_triplet(n) and is_pythagorean_triplet(sum_square_diff(n))\ndef is_pythagorean_pentagonal_triple(n):  \n    '''\n    Write a python function which takes a number and returns True if the number is a pythagorean pentagonal triple, and False otherwise.\n    '''\n    return is_pythagorean_triplet(n) and is_pythagorean_pentagonal_triplet(sum_square_diff(n))\ndef is_pythagorean_hexagonal_triple(n):  \n    '",
        "num_ids": 59
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [ [lst[i][0], lst[i][1]] for i in range(len(lst)) ]\n",
        "num_ids": 32
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[x[0],x[1]] for x in zip(*lst)]\n",
        "num_ids": 22
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [ [lst[i][0],lst[i][1]] for i in range(len(lst)) ]\n    \nprint merge([['a','b'],['c','d']])\n",
        "num_ids": 51
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst2 = []\n    for i in lst:\n        lst2.append(i[0])\n        lst2.append(i[1])\n    return lst2\n",
        "num_ids": 47
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst=[]\n    for sublist in lst:\n        new_lst.append([sublist[0],sublist[1]])\n    return new_lst\n",
        "num_ids": 46
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    x = [lst[i][0] for i in range(len(lst))]\n    y = [lst[i][1] for i in range(len(lst))]\n    return [[x[i],y[i]] for i in range(len(lst))]\n",
        "num_ids": 71
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return map(lambda x: [x[0], x[1]], lst)\n",
        "num_ids": 23
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum_list = []\n    cummulative_sum_list.append(test_list[0])\n    for i in range(1, len(test_list)):\n        cummulative_sum_list.append(test_list[i] + cummulative_sum_list[i-1])\n    return cummulative_sum_list\n",
        "num_ids": 88
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Make a new list with all values added up\n    new_list = []\n    for item in test_list:\n        # Add each item to the new list\n        new_list.append(item + new_list[-1] if new_list else item)\n",
        "num_ids": 64
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return list(map(lambda x,y:x+y, range(1,len(test_list)+1),test_list))\n",
        "num_ids": 34
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    list_sum = 0\n    for i in range(len(test_list)):\n        list_sum += test_list[i]\n    return list_sum\n",
        "num_ids": 41
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = []\n    for i in test_list:\n        cummulative_sum.append(sum(test_list))\n    return cummulative_sum\n",
        "num_ids": 44
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    list_sum = 0\n    for val in test_list:\n        list_sum += val\n",
        "num_ids": 25
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [(i[0], sum(i[1:])) for i in test_list]\n",
        "num_ids": 24
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    if len(test_list) == 0:\n        return 0\n    for index in range(len(test_list)):\n        cum_sum.append(test_list[index] + cum_sum[index-1])\n    return cum_sum\n",
        "num_ids": 68
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #return [sum(test_list[:i+1]) for i in range(len(test_list))]\n    test_list.sort()\n    return [sum(test_list[:i+1]) for i in range(len(test_list))]\n",
        "num_ids": 65
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum_list = [0]\n    for i in range(len(test_list)):\n        cumulative_sum_list.append(cumulative_sum_list[i] + test_list[i])\n    return cumulative_sum_list\n",
        "num_ids": 63
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(x)/len(x)) for x in nums]\n",
        "num_ids": 20
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for t in nums:\n        avg.append(float(sum(t)) / len(t))\n    return avg\n",
        "num_ids": 38
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Convert each tuple to a list\n    # TODO: make this more efficient\n    # Convert each value in the list into a float\n    # Sum the values in the list\n    # Divide the sum by the length of the list\n    # Return a list with the average values of each tuple in the list\n    \n    return [float(sum(x))/len(x) for x in zip(*nums)]\n",
        "num_ids": 95
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    a = list(map(lambda x:sum(x)/len(x),nums))\n    return a\n",
        "num_ids": 28
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(i)/len(i) for i in nums]\n",
        "num_ids": 20
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum_nums = 0\n    num_elements = 0\n    for t in nums:\n        for n in t:\n            sum_nums += n\n            num_elements += 1\n    return sum_nums/num_elements\n",
        "num_ids": 61
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for i in nums:\n        average.append(sum(i)/len(i))\n    return average\n",
        "num_ids": 33
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    results = []\n    for i in nums:\n        average = sum(i)/len(i)\n        results.append(average)\n    return results\n",
        "num_ids": 39
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in zip(*nums)]\n",
        "num_ids": 22
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(n)/len(n) for n in zip(*nums)]\n    \ndef split_list(data,chunk_size):\n    '''\n    Write a function which takes a list and a chunk size and returns a list of lists, each list being the chunk of the original list.\n    '''\n    return [data[i:i+chunk_size] for i in range(0,len(data),chunk_size)]\n    \ndef max_list(data):\n    '''\n    Write a function which takes a list of tuples and returns the tuple with the maximum value for each tuple as a list.\n    '''\n    return [max(n) for n in zip(*data)]\n    \ndef sort_tuples(tuples):\n    '''\n    Write a function which takes a list of tuples and sorts the tuples in alphabetical order on the first value.\n    '''\n    return sorted(tuples,key=lambda x:x[0])\n    \ndef is_palindrome(data):\n    '''\n    Write a function which takes a word and returns True if the word is a palindrome, False otherwise.\n    '''\n    return data == data[::-1]\n    \ndef count_chars(data):\n    '''\n    Write a function which takes a string and returns a dictionary of each unique character in the string as the key and the number of times that character appears in the string as the value.\n    '''\n    return {k:v for k,v in Counter(data).items()}\n    \ndef break_words(data):\n    '''\n    Write a function which takes a string and breaks it into a list of words.\n    '''\n    return data.split()\n    \ndef match_words(text,words):\n    '''\n    Write a function which takes a string and a list of words and returns a list of words that appear in the string and their positions, sorted by their positions.\n    '''\n    return sorted([(text.find(word),word) for word in words if word in text],key=lambda x:x[0])\n    \ndef word_match(text,words):\n    '''\n    Write a function which takes a string and a list of words and returns a list of words that appear in the string and their positions, sorted by their positions.\n    '''\n    return [word for word in words if word in text]\n    \ndef get_week_number(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns the corresponding week number in the format '%W'.\n    '''\n    return str(date.isocalendar()[1])\n    \ndef get_day_of_month(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns the corresponding day of the month in the format '%d'.\n    '''\n    return str(date.day)\n    \ndef get_day_of_week(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns the corresponding day of the week in the format '%A'.\n    '''\n    return str(date.isoweekday())\n    \ndef get_month_name(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns the corresponding month name in the format '%B'.\n    '''\n    return date.strftime('%B')\n    \ndef get_time_of_day(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns the corresponding time of day in the format '%H:%M'.\n    '''\n    return date.strftime('%H:%M')\n    \ndef is_leap_year(year):\n    '''\n    Write a function which takes a year as an integer and returns True if the year is a leap year, False otherwise.\n    '''\n    return year % 4 == 0 and year % 100!= 0 or year % 400 == 0\n    \ndef get_leap_years(start_year,end_year):\n    '''\n    Write a function which takes a range of years as a list of integers and returns a list of all leap years within those years.\n    '''\n    return [x for x in range(start_year,end_year+1) if is_leap_year(x)]\n    \ndef get_month_max_day(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns the maximum day of the month for that date.\n    '''\n    return max([d for d in date.timetuple()[:3]])\n    \ndef get_month_min_day(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns the minimum day of the month for that date.\n    '''\n    return min([d for d in date.timetuple()[:3]])\n    \ndef get_day_of_week_date(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns the day of the week for that date.\n    '''\n    return date.strftime('%A')\n    \ndef get_month_last_day(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns the last day of the month for that date.\n    '''\n    return calendar.monthrange(date.year,date.month)[1]\n    \ndef get_first_day_of_month(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns the first day of the month for that date.\n    '''\n    return date.replace(day=1)\n    \ndef get_last_day_of_month(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns the last day of the month for that date.\n    '''\n    return get_first_day_of_month(date).replace(day=get_month_max_day(date))\n    \ndef get_last_day_of_year(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns the last day of the year for that date.\n    '''\n    return get_first_day_of_month(date.replace(month=12,day=31)).replace(year=date.year)\n    \ndef get_first_day_of_year(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns the first day of the year for that date.\n    '''\n    return get_last_day_of_month(date.replace(month=1,day=1))\n    \ndef is_business_day(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns True if the date is a business day, False otherwise.\n    '''\n    return date.weekday() not in [5,6]\n    \ndef is_date_valid(date):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and returns True if the date is a valid date, False otherwise.\n    '''\n    return date.year < 2099 and date.month < 13 and date.day < 32\n    \ndef get_business_day_after(date,days):\n    '''\n    Write a function which takes a date as a string in the format '%Y-%m-%d' and a number of days as an integer and returns the date one business day later.\n    '''\n    return (date + timedelta(days=1)).replace(hour=0,minute=0,second=0,microsecond=0)\n    \ndef get_business_day_before(date,days):\n    '''\n    Write a function which takes a date as a string in the format ",
        "num_ids": 17
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([(a % b) for a, b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 32
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #Alternative solution:\n    #return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    #Can use map as a for loop\n",
        "num_ids": 47
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([x%y for x,y in zip(test_tup1,test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n",
        "num_ids": 26
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i]%test_tup2[i]\n    return test_tup1\n",
        "num_ids": 54
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for index, element in enumerate(test_tup1):\n        test_tup1[index] = test_tup1[index] % test_tup2[index]\n    return test_tup1\n",
        "num_ids": 54
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return [element1 % element2 for element1, element2 in zip(test_tup1, test_tup2)]\n    else:\n        return 'Tuples of unequal lengths'\n",
        "num_ids": 66
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a%b for (a,b) in zip(test_tup1, test_tup2)])\n",
        "num_ids": 32
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] % test_tup2[i],)\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d < 0:\n        return 0\n    if d == 0:\n        return 1\n    if d > steps:\n        return 0\n    if d == steps:\n        return 1\n",
        "num_ids": 46
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 0\n    if steps == 1: \n        return abs(d)\n    if d == 0: \n        return steps\n    return min(abs(d - 1), min_Jumps(steps - 1, d), min_Jumps(steps - 2, d - 1))\n",
        "num_ids": 76
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if len(steps) < 2:\n        return 0\n    elif steps[0] == 0:\n        return 0\n    else:\n        steps_map = {}\n        for i in xrange(len(steps)):\n            steps_map[steps[i]] = i\n",
        "num_ids": 67
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    d[0] = 0\n    d[1] = 0\n    for i in range(2, steps + 1):\n        d[i] = d[i-1] + 1\n        if (i % 3 == 0):\n            d[i] = min(d[i], d[i//3] + 1)\n        if (i % 2 == 0):\n            d[i] = min(d[i], d[i//2] + 1)\n    return d[steps]\n",
        "num_ids": 117
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    result = 0\n    return result\n",
        "num_ids": 11
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def helper(pos, steps, visited, d): \n        '''\n        The helper function is a recursive function that gives the path that leads to the form (d, 0) from the current position.\n        '''\n        if pos[0] == d and pos[1] == 0: \n            return True\n        if pos[0] < 0 or pos[0] >= len(steps) or pos[1] < 0 or pos[1] >= len(steps[0]):\n            return False\n        if pos[0] == d and pos[1] == 0:\n            return True\n        if pos[0] == d and pos[1] == 1:\n            return True\n        if pos[0] > d or pos[1] > 0:\n            return False\n        if (pos[0], pos[1]) in visited:\n            return False\n        visited.add((pos[0], pos[1]))\n        if helper(pos[0]+steps[pos[0]][pos[1]], steps, visited, d):\n            return True\n        visited.remove((pos[0], pos[1]))\n        if helper(pos[0]+steps[pos[0]][pos[1]+1], steps, visited, d):\n            return True\n        visited.remove((pos[0], pos[1]))\n        if helper(pos[0]+1, steps, visited, d):\n            return True\n        visited.remove((pos[0], pos[1]))\n        return False\n    if len(steps) == 0:\n        return False\n    visited = set()\n    return helper((0, 0), steps, visited, d)\n",
        "num_ids": 337
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    visited = {}\n    for i in range(steps):\n        visited[i] = False\n    return len(dij_recurse(0, 0, steps, visited))\n",
        "num_ids": 45
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    # first we are going to check whether there are any jumps left to take or not \n    if steps < 2:\n        return -1\n    minJumps = [0]*steps\n    if steps > 1:\n        minJumps[1] = 1\n    for step in range(2, steps):\n        if steps % step == 0:\n            # we can go to the end by taking 1 step\n            minJumps[step] = minJumps[step-1] + 1\n            if step > 2:\n                # we can go to the end by taking 2 steps\n                minJumps[step] = min(minJumps[step], minJumps[step-2] + 1)\n            # we can go to the end by taking all the step options available\n            for i in range(1, step):\n                minJumps[step] = min(minJumps[step], minJumps[i] + minJumps[step-i])\n    return minJumps[steps-1]\n    \ndef MinJumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    # first we are going to check whether there are any jumps left to take or not \n    if steps < 2:\n        return -1\n    minJumps = [0]*steps\n    if steps > 1:\n        minJumps[1] = 1\n    for step in range(2, steps):\n        if steps % step == 0:\n            # we can go to the end by taking 1 step\n            minJumps[step] = minJumps[step-1] + 1\n            if step > 2:\n                # we can go to the end by taking 2 steps\n                minJumps[step] = min(minJumps[step], minJumps[step-2] + 1)\n            # we can go to the end by taking all the step options available\n            for i in range(1, step):\n                minJumps[step] = min(minJumps[step], minJumps[i] + minJumps[step-i])\n    return minJumps[steps-1]\n",
        "num_ids": 243
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    dp = [0] * n\n    dp[0] = steps[0]\n    for i in range(1, n):\n        for j in range(i):\n            if abs(steps[i] - steps[j]) <= d:\n                dp[i] = min(dp[j] + steps[i], dp[i])\n    return dp[n - 1]\n",
        "num_ids": 100
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def check(steps, d, n): \n        if n < 0: \n            return False \n        if d == 0: \n            return True \n        return check(steps, d - 1, n - steps)\n",
        "num_ids": 55
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1_ = list()\n    nums2_ = list()\n    if len(nums1)>len(nums2):\n        bigger = nums1\n        smaller = nums2\n    else:\n        bigger = nums2\n        smaller = nums1\n",
        "num_ids": 72
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n    \ndef is_prime(n):\n    '''\n    Write a function that takes an integer and returns True if the integer is prime, \n    and False otherwise. Do not use any built-in functions such as mod, modulo, etc. \n    I recommend using a function called is_prime.\n    '''\n    if n == 2:\n        return True\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    length1 = len(nums1)\n    length2 = len(nums2)\n    if length1!= length2:\n        return False\n    else:\n        result = []\n        for i in range(length1):\n            result.append(nums1[i]/nums2[i])\n        return result\n",
        "num_ids": 80
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div = []\n    for i in range(len(nums1)):\n        div.append(nums1[i]/nums2[i])\n    return div\n",
        "num_ids": 44
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    answer = []\n    for i in range(len(nums1)):\n        answer.append(nums1[i] / nums2[i])\n    return answer\n",
        "num_ids": 44
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    ans = []\n    for i in range(len(nums1)):\n        ans.append(nums1[i] / nums2[i])\n    return ans\n",
        "num_ids": 44
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]/nums2[i])\n    return div_list\n",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    result = [0]*(n1)\n    for i in range(n1):\n        result[i] = nums1[i]/nums2[i]\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i] / nums2[i])\n    return new_list\n",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [a/b for a,b in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_list = []\n    for x in test_str:\n        if x.isdigit():\n            test_list.append(x)\n    return ''.join(test_list)+''.join(sorted(set(test_str).difference(test_list)))\n",
        "num_ids": 67
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return test_str\n    test_list = list(test_str)\n    move_str = ''\n    for item in test_list:\n        if item.isdigit():\n            move_str += item\n    return move_str\n",
        "num_ids": 66
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return \"\".join(sorted(test_str, key=int))\n",
        "num_ids": 20
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join(sorted(list(filter(lambda c: c.isdigit(), test_str))))\n",
        "num_ids": 29
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    str_list = list(test_str)\n    for i in range(len(str_list)):\n        if str_list[i].isdigit():\n            str_list.remove(str_list[i])\n            str_list.append(str_list[i])\n    return ''.join(str_list)\n",
        "num_ids": 80
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # if string is empty, it returns\n    if len(test_str) == 0:\n        return 0\n    # initialize a list for storing the characters\n    test_list = []\n    # loop through the string and store the non-digit characters in the list\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            test_list.append(test_str[i])\n    # loop through the list and insert the digit into the proper position\n    for i in range(len(test_list)):\n        test_str = test_str[:i] + test_list[i] + test_str[i + 1:]\n    return test_str\n",
        "num_ids": 167
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for char in test_str:\n        if char.isdigit():\n            result = result + char\n    return result + ''.join(list(reversed(result)))\n",
        "num_ids": 49
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    letters = []\n    digits = []\n    for i in test_str:\n        if i.isalpha():\n            letters.append(i)\n        else:\n            digits.append(i)\n    return letters + digits\n",
        "num_ids": 57
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    move_char_to_end(test_str)\n    return test_str\n",
        "num_ids": 22
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    my_list = list(test_str)\n    for index, char in enumerate(my_list):\n        if not char.isdigit():\n            my_list[index] = ''\n    for index, char in enumerate(my_list):\n        if char == '':\n            my_list[index] = '0'\n    for index, char in enumerate(my_list):\n        if char == '0':\n            my_list[index] = ''\n    my_str = ''.join(my_list)\n    return my_str\n",
        "num_ids": 133
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + largest_subset(a[:n-1])\n",
        "num_ids": 54
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    dict = {}\n    for i in a:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    out = []\n    for i in dict.keys():\n        out.append((dict[i],i))\n    out.sort(reverse=True)\n    for i in out:\n        print(i)\n    return out\n",
        "num_ids": 95
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = {-1}\n    for i in a:\n        if not s or max(s) >= i:\n            s.add(i)\n    return len(s)\n",
        "num_ids": 45
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_len = 1\n    a.sort()\n    for i in range(len(a) - 1, 0, -1):\n        for j in range(i - 1, -1, -1):\n            if a[i] % a[j] == 0:\n                a[j] = 0\n                max_len = max(max_len, i - j)\n                break\n    print(max_len)\n",
        "num_ids": 101
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def subset_of(s, k):\n        '''\n        Return the largest subset of s that is divisible by k.\n        '''\n        if k == 0:\n            return [[]]\n        else:\n            div = s[0] % k\n            l = subset_of(s[1:], k - div)\n            div2 = subset_of(s[1:], div)\n            return div2 + [[s[0]] + sub for sub in l]\n",
        "num_ids": 79
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    max_size = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            max_size = max(max_size, len(a[i:j])+len(a[j:]))\n    return max_size\n",
        "num_ids": 81
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    result = []\n    temp = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            temp.append((a[i] + a[j]) / 2)\n            if (a[i] + a[j]) % 2 == 0:\n                temp.append(a[i])\n                temp.append(a[j])\n            else:\n                temp.append(a[i])\n",
        "num_ids": 110
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # try:\n    #     a = set(a)\n    # except:\n    #     return None\n    # else:\n    #     return len(a)\n",
        "num_ids": 42
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 1:\n        return get_median(arr1, arr2, n / 2)\n    else:\n        return (get_median(arr1, arr2, n / 2) + get_median(arr1, arr2, n / 2 - 1)) / 2.0\n",
        "num_ids": 86
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    median = (arr1[n//2] + arr2[n//2])/2\n    \n    return median\n",
        "num_ids": 33
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return arr1[0]\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2.0\n    else:\n        arr1[0]\n        arr1[n-1]\n        arr2[0]\n        arr2[n-1]\n",
        "num_ids": 79
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    '''\n    Complexity of this solution is O(n).\n    '''\n    arr1 = arr1 + arr2\n    arr1.sort()\n    if n % 2!= 0:\n        return arr1[n/2]\n    else:\n        return (arr1[n/2 - 1] + arr1[n/2])/2.0\n",
        "num_ids": 68
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    return (arr1[n/2] + arr2[n/2])/2\n",
        "num_ids": 23
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return (arr1[0] + arr2[0])/2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1]))/2\n    \n    mid1 = n/2\n    mid2 = n/2 + 1\n    \n    if arr1[mid1] == arr2[mid2-1]:\n        return arr1[mid1]\n    elif arr1[mid1] > arr2[mid2-1]:\n        return get_median(arr1, arr2[:mid2], mid2)\n    else:\n        return get_median(arr1[:mid1], arr2, mid2)\n    \ndef get_median_main():\n    # arr1 = [1, 3, 5]\n    # arr2 = [2, 4, 6]\n    arr1 = [2, 3, 4, 5, 6]\n    arr2 = [1, 2, 3, 4, 5, 6]\n    \n    print get_median(arr1, arr2, len(arr1))\n    \nget_median_main()\n",
        "num_ids": 292
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return -1\n    elif n == 1:\n        return (arr1[0] + arr2[0])/2\n    else:\n        med1 = median(arr1, n)\n        med2 = median(arr2, n)\n",
        "num_ids": 67
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    pass\n    if n % 2 == 0:\n        return (get_median(arr1, arr2, n/2) + get_median(arr1, arr2, n/2 + 1)) / 2.0\n    else:\n        return get_median(arr1, arr2, n/2)\n",
        "num_ids": 77
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n==1:\n        return (arr1[0]+arr2[0])/2\n    if n==2:\n        return (max(arr1[0], arr2[0])+min(arr1[1], arr2[1]))/2\n    \n    mid = n/2\n    \n    if (n % 2 == 0):\n        return (get_median(arr1, arr2, mid) + get_median(arr1, arr2, mid+1))/2\n    else:\n        return get_median(arr1, arr2, mid)\n",
        "num_ids": 140
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0])/2\n    elif n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1]))/2\n    else:\n        return get_median(arr1[:(n+1)/2], arr2[:(n+1)/2], n/2)\n",
        "num_ids": 102
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums\n",
        "num_ids": 30
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    out = []\n    for i in nums:\n        out.append(i**n)\n    return out\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = [n**n for n in nums]\n    return result\n",
        "num_ids": 20
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n<0:\n        return [1/n for n in nums]\n    else:\n        return [n**n for n in nums]\n",
        "num_ids": 39
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    i = 0\n    nums_n = []\n    while i < n:\n        nums_n.append(nums[i] ** n)\n        i += 1\n    return nums_n\n",
        "num_ids": 51
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for x in nums:\n        x *= x\n    return nums\n",
        "num_ids": 21
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    ret = []\n    for num in nums:\n        ret.append(num**n)\n    return ret\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n",
        "num_ids": 30
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not string:\n        return ''\n    elif isinstance(string, str):\n        return string.upper()\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        if string == string.upper():\n            return True\n        else:\n            return False\n    if string[0].isupper():\n        return is_upper(string[1:])\n    else:\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return [newList[-1]] + newList[:-1] \n",
        "num_ids": 20
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    if length<=2:\n        return newList\n    else:\n        first=newList.pop(0)\n        last=newList.pop(length-1)\n        newList.insert(0,last)\n        newList.append(first)\n        return newList\n",
        "num_ids": 77
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n",
        "num_ids": 26
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    newList[0], newList[size-1] = newList[size-1], newList[0]\n    return newList\n",
        "num_ids": 43
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if (len(newList) < 2):\n        return newList\n    else:\n        return newList[-1] + newList[1:-1] + newList[0]\n    \ndef interweavingStrings(S1,S2,S3):\n    '''\n    Given three strings S1, S2, and S3, write a function that returns true if S3 is the interweaving of S1 and S2.\n    '''\n    if (len(S3)!= len(S1)+len(S2)):\n        return False\n    if len(S3)==0:\n        return True\n    \n    # Assign charcter by index\n    # The first character of S3 is the one corresponding to the first character of S1\n    # The first character of S2 is the one corresponding to the first character of S2\n    \n    # base case:\n    if len(S1) == 0 and len(S2) == 0:\n        return S3[0] == 'a'\n    if len(S1) == 0:\n        return S3[0] == 'a' or S3[0] == S2[0]\n    if len(S2) == 0:\n        return S3[0] == 'a' or S3[0] == S1[0]\n    \n    firstChar = S3[0]\n    \n    # Recursive case:\n    if len(S1) > 0 and S1[0] == S3[0]:\n        return interweavingStrings(S1[1:],S2,S3[1:])\n    if len(S2) > 0 and S2[0] == S3[0]:\n        return interweavingStrings(S1,S2[1:],S3[1:])\n    \n    return False\n    \ndef isPalindrome(s):\n    '''\n    Write a python function that takes a string S and returns true if the string is a palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        return s[0] == s[-1] and isPalindrome(s[1:-1])\n    \ndef findMinMax(nums):\n    '''\n    Write a python function that takes a list of integers nums and returns the smallest and largest values in nums.\n    '''\n    if (len(nums) == 0):\n        return [None,None]\n    else:\n        minNum = nums[0]\n        maxNum = nums[0]\n        for i in nums:\n            if i < minNum:\n                minNum = i\n            elif i > maxNum:\n                maxNum = i\n        return [minNum,maxNum]\n",
        "num_ids": 93
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n",
        "num_ids": 45
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if newList==None:\n        return None\n    if len(newList)==0:\n        return None\n    else:\n        return [newList[-1]]+newList[:-1]\n    \ndef two_swap_List(newList): \n    '''\n    Write a python function to interchange the second and third element in a given list.\n    '''\n    if newList==None:\n        return None\n    if len(newList)==0:\n        return None\n    else:\n        return [newList[1], newList[0]]+newList[2:]\n    \ndef left_rotate_List(newList, rotation_factor): \n    '''\n    Write a python function to rotate a given list left by rotation_factor.\n    '''\n    if newList==None:\n        return None\n    if len(newList)==0:\n        return None\n    else:\n        return newList[rotation_factor:]+newList[:rotation_factor]\n    \ndef right_rotate_List(newList, rotation_factor): \n    '''\n    Write a python function to rotate a given list right by rotation_factor.\n    '''\n    if newList==None:\n        return None\n    if len(newList)==0:\n        return None\n    else:\n        return newList[-rotation_factor:]+newList[:-rotation_factor]\n    \ndef reverse_List(newList): \n    '''\n    Write a python function to reverse the order of elements in a given list.\n    '''\n    if newList==None:\n        return None\n    if len(newList)==0:\n        return None\n    else:\n        return newList[::-1]\n    \ndef sum_List(newList): \n    '''\n    Write a python function to find the sum of all elements in a given list.\n    '''\n    if newList==None:\n        return None\n    if len(newList)==0:\n        return None\n    else:\n        return sum(newList)\n    \ndef sort_List(newList): \n    '''\n    Write a python function to sort the order of elements in a given list.\n    '''\n    if newList==None:\n        return None\n    if len(newList)==0:\n        return None\n    else:\n        newList.sort()\n        return newList\n    \ndef add_List(newList): \n    '''\n    Write a python function to add two lists.\n    '''\n    if newList==None:\n        return None\n    if len(newList)==0:\n        return None\n    else:\n        return newList+newList\n    \ndef add_Lists(list1, list2): \n    '''\n    Write a python function to add two lists.\n    '''\n    if list1==None or list2==None:\n        return None\n    if len(list1)==0 or len(list2)==0:\n        return None\n    else:\n        return list1+list2\n    \ndef add_List_to_List(list1, list2): \n    '''\n    Write a python function to add two lists.\n    '''\n    if list1==None or list2==None:\n        return None\n    if len(list1)==0 or len(list2)==0:\n        return None\n    else:\n        return list1+list2\n    \ndef intersection_List(list1, list2): \n    '''\n    Write a python function to get the intersection of two lists.\n    '''\n    if list1==None or list2==None:\n        return None\n    if len(list1)==0 or len(list2)==0:\n        return None\n    else:\n        intersection=[]\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                intersection.append(list1[i])\n        return intersection\n    \ndef find_union_List(list1, list2): \n    '''\n    Write a python function to get the union of two lists.\n    '''\n    if list1==None or list2==None:\n        return None\n    if len(list1)==0 or len(list2)==0:\n        return None\n    else:\n        union=list(list1)+list(list2)\n        return union\n    \ndef check_duplicates_List(newList): \n    '''\n    Write a python function to check whether the given list contains duplicates or not.\n    '''\n    if newList==None:\n        return None\n    if len(newList)==0:\n        return None\n    else:\n        list1=[]\n        for i in range(len(newList)):\n            if newList[i] in list1:\n                return True\n            else:\n                list1.append(newList[i])\n        return False\n    \ndef check_duplicates_Set(newSet): \n    '''\n    Write a python function to check whether the given set contains duplicates or not.\n    '''\n    if newSet==None:\n        return None\n    if len(newSet)==0:\n        return None\n    else:\n        list1=[]\n        for i in newSet:\n            if i in list1:\n                return True\n            else:\n                list1.append(i)\n        return False\n    \ndef power_set(newList): \n    '''\n    Write a python function to get the power set of the given list.\n    '''\n    if newList==None:\n        return None\n    if len(newList)==0:\n        return None\n    else:\n        powerSet=[]\n        for i in range(len(newList)):\n            powerSet.append([newList[i]])\n        for i in range(len(newList)):\n            for j in range(len(powerSet)):\n                powerSet.append(powerSet[j]+[newList[i]])\n        return powerSet\n    \ndef power_set_List(newList): \n    '''\n    Write a python function to get the power set of the given list.\n    '''\n    if newList==None:\n        return None\n    if len(newList)==0:\n        return None\n    else:\n        powerSet=[[]]\n        for i in range(len(newList)):\n            for j in range(len(powerSet)):\n                powerSet.append(powerSet[j]+[newList[i]])\n        return powerSet\n    \ndef subset_List(newList, newSet): \n    '''\n    Write a python function to check whether newList is a subset of newSet or not.\n    '''\n    if newList==None or newSet==None:\n        return None\n    if len(newList)==0 or len(newSet)==0:\n        return None\n    else:\n        for i in newList:\n            if i not in newSet:\n                return False\n        return True\n    \ndef subset_List_Set(newList, newSet): \n    '''\n    Write a python function to check whether newList is a subset of newSet or not.\n    '''\n    if newList==None or newSet==None:\n        return None\n    if len(newList)==0 or len(newSet)==0:\n        return None\n    else:\n        if set(newList) < set(newSet):\n            return True\n        else:\n            return False\n    \ndef is_Intersect_List_Set(newList, newSet): \n    '''\n    Write a python function to check whether newList is an intersection of newSet or not.\n    '''\n    if newList==None or newSet==None:\n        return None\n    if len(newList)==0 or len(newSet)==0:\n        return None\n    else:\n        if set(newList).intersection(set(newSet))==set([]):\n            return False\n        else:\n            return True\n    \ndef find_missing_List_Set(newList, newSet): \n    '''\n    Write a python function to find the missing elements of a given set.\n    '''\n    if newList==None or newSet==None:\n        return None\n    if len(newList)==0 or len(newSet)==0:\n        return None\n    else:\n        missing=[]\n        for i in ne",
        "num_ids": 56
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if newList == []:\n        return []\n    else:\n        if len(newList) == 1:\n            return newList\n        else:\n            temp = newList[0]\n            newList[0] = newList[-1]\n            newList[-1] = temp\n            return newList\n",
        "num_ids": 76
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return math.pi*r**2/4\n",
        "num_ids": 14
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 0.25*r*r*math.pi\n",
        "num_ids": 16
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # x is the centre of the semicircle\n    x = (r ** 2) / (8 * math.sqrt(2))\n    # y1 and y2 are the tangent points of the semicircle\n    y1 = math.sqrt(r ** 2 - x ** 2)\n    y2 = -y1\n    # y is the centre of the largest triangle inscribed in the semicircle\n    y = (((r ** 2) - (y1 ** 2) - (y2 ** 2)) / (2 * y1))\n    # t is the side length of the largest triangle\n    t = math.sqrt(((x - y) ** 2) + ((y - x) ** 2))\n    # s is the area of the largest triangle\n    s = (t * (x - y) / 2)\n    return s\n    \n    \n    \ndef rec_side(side) :\n    '''\n    Write a function to find the height and width of a rectangle given a side length.\n    '''\n    # h is the height\n    h = side / 2\n    # w is the width\n    w = side / 2\n    return h, w\n    \n    \n    \ndef box_area(side, h, w) :\n    '''\n    Write a function to find the area of a box given a side length and a height and a width.\n    '''\n    area = side * h + side * w\n    return area\n    \n    \n    \ndef triangle_area(side, h, w) :\n    '''\n    Write a function to find the area of a triangle given a side length and a height and a width.\n    '''\n    area = side * h / 2 + side * w / 2\n    return area\n    \n    \n    \ndef circle_area(r) :\n    '''\n    Write a function to find the area of a circle given a radius.\n    '''\n    area = math.pi * r ** 2\n    return area\n    \n    \n    \ndef rect_area(w, h) :\n    '''\n    Write a function to find the area of a rectangle given a width and a height.\n    '''\n    area = w * h\n    return area\n    \n    \n    \ndef sqr_area(side) :\n    '''\n    Write a function to find the area of a square given a side length.\n    '''\n    area = side ** 2\n    return area\n    \n    \n    \ndef sqr_perim(side) :\n    '''\n    Write a function to find the perimeter of a square given a side length.\n    '''\n    perim = side * 4\n    return perim\n    \n    \n    \ndef rect_perim(w, h) :\n    '''\n    Write a function to find the perimeter of a rectangle given a width and a height.\n    '''\n    perim = 2 * (w + h)\n    return perim\n    \n    \n    \ndef tri_perim(a, b, c) :\n    '''\n    Write a function to find the perimeter of a triangle given the lengths of three sides.\n    '''\n    perim = a + b + c\n    return perim\n    \n    \n    \ndef tri_area(a, b, c) :\n    '''\n    Write a function to find the area of a triangle given the lengths of three sides.\n    '''\n    area = (a * b) / 2\n    return area\n    \n    \n    \ndef hist_freq(s) :\n    '''\n    Write a function that takes a string and returns a dictionary where the keys are the unique letters of the string and the values are the number of times that letter is in the string.\n    '''\n    # make a copy of the string\n    str_copy = s\n    # make a dictionary\n    freq = {}\n    # iterate through the copy\n    for char in str_copy :\n        # check if the letter is in the dictionary\n        if char in freq :\n            # increment the counter\n            freq[char] += 1\n        # else, add it\n        else :\n            freq[char] = 1\n    # return the dictionary\n    return freq\n    \n    \n    \ndef is_anagram(s1, s2) :\n    '''\n    Write a function that takes two strings and returns True if s1 is an anagram of s2 and False otherwise.\n    '''\n    # make a copy of s1\n    str_copy1 = s1\n    # make a copy of s2\n    str_copy2 = s2\n    # make a dictionary\n    freq1 = {}\n    # iterate through the copy\n    for char in str_copy1 :\n        # check if the letter is in the dictionary\n        if char in freq1 :\n            # increment the counter\n            freq1[char] += 1\n        # else, add it\n        else :\n            freq1[char] = 1\n    # make a dictionary\n    freq2 = {}\n    # iterate through the copy\n    for char in str_copy2 :\n        # check if the letter is in the dictionary\n        if char in freq2 :\n            # increment the counter\n            freq2[char] += 1\n        # else, add it\n        else :\n            freq2[char] = 1\n    # check if freq1 == freq2\n    if freq1 == freq2 :\n        # return True\n        return True\n    else :\n        # return False\n        return False\n    \n    \n    \ndef anagram_score(s1, s2) :\n    '''\n    Write a function that takes two strings and returns a score based on the relative frequency of letters in the strings.\n    '''\n    # make a copy of s1\n    str_copy1 = s1\n    # make a copy of s2\n    str_copy2 = s2\n    # make a dictionary\n    freq1 = {}\n    # iterate through the copy\n    for char in str_copy1 :\n        # check if the letter is in the dictionary\n        if char in freq1 :\n            # increment the counter\n            freq1[char] += 1\n        # else, add it\n        else :\n            freq1[char] = 1\n    # make a dictionary\n    freq2 = {}\n    # iterate through the copy\n    for char in str_copy2 :\n        # check if the letter is in the dictionary\n        if char in freq2 :\n            # increment the counter\n            freq2[char] += 1\n        # else, add it\n        else :\n            freq2[char] = 1\n    # iterate through the dictionary\n    for key in freq1 :\n        # check if the key is in the dictionary\n        if key in freq2 :\n            # check if the counters are the same\n            if freq1[key] == freq2[key] :\n                # increment the score\n                score += 1\n    # return the score\n    return score\n    \n    \n    \ndef median(l) :\n    '''\n    Write a function that takes a list of numbers and returns the median number.\n    '''\n    # make a copy of the list\n    l_copy = l\n    # sort the list\n    l_copy.sort()\n    # find the length of the list\n    length = len(l_copy)\n    # if the length is odd\n    if length % 2 == 1 :\n        # find the median\n        median = (l_copy[int(length / 2)] + l_copy[int(length / 2) - 1]) / 2\n    # else if the length is even\n    else :\n        # find the median\n        median = (l_copy[int(length / 2) - 1] + l_copy[int(length / 2)]) / 2\n    # return the median\n    return median\n    \n    \n    \ndef mode(l) :\n    '''\n    Write a function that takes a list of numbers and returns the mode number.\n    '''\n    # make a copy of the list\n    l_copy = l\n    # sort the list\n    l_copy.sort()\n    # find the length of the list\n    length = len(l_copy)\n    # find the mode\n    mode = max(set(l), key=l.count)\n    # return the mode\n    return mode\n    \n    \n    \ndef last_first_last(s) :\n    '''\n    Write a function that takes a string and returns a new string with the last letter of the string first, th",
        "num_ids": 25
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    return 0.25 * r * r\n    \ndef triangle_perimeter(a, b, c) :\n    return a + b + c\n",
        "num_ids": 38
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3.14 * (r**2) * (3.0/2)\n",
        "num_ids": 22
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    return 0.25*pi*r**2\n",
        "num_ids": 20
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 1/2 * 3.14 * (r ** 2)\n    return area\n    \n    \ndef triangle_perimeter(b, h) :\n    '''\n    Write a python function to find the perimeter of the triangle with base b and height h.\n    '''\n    perimeter = b + b + h\n    return perimeter\n    \n",
        "num_ids": 18
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2)*(3.**0.5)/4.\n",
        "num_ids": 20
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = math.pi * r**2 / 4\n    return area\n    \ndef triangle_area_v2(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = 3 * r**2 / 4\n    return area\n    \ndef circle_area(r) :  \n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a square with a given side length.\n    '''\n    import math\n    area = math.pi * r**2\n    return area\n    \ndef circle_area_v2(r) :  \n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a square with a given side length.\n    '''\n    import math\n    area = 2 * r**2 * math.pi\n    return area\n    \ndef rectangle_area(r,s) :  \n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a square with a given side length.\n    '''\n    import math\n    area = s**2 * r\n    return area\n    \ndef rectangle_area_v2(r,s) :  \n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a square with a given side length.\n    '''\n    import math\n    area = r * s**2\n    return area\n    \ndef pentagon_area(r) :  \n    '''\n    Write a python function to find the area of the largest pentagon that can be inscribed in a square with a given side length.\n    '''\n    import math\n    area = (3 * r**2) / 2\n    return area\n    \ndef pentagon_area_v2(r) :  \n    '''\n    Write a python function to find the area of the largest pentagon that can be inscribed in a square with a given side length.\n    '''\n    import math\n    area = math.sqrt((3 * r**2) / 2)\n    return area\n    \ndef hexagon_area(r) :  \n    '''\n    Write a python function to find the area of the largest hexagon that can be inscribed in a square with a given side length.\n    '''\n    import math\n    area = (6 * r**2) / 4\n    return area\n    \ndef hexagon_area_v2(r) :  \n    '''\n    Write a python function to find the area of the largest hexagon that can be inscribed in a square with a given side length.\n    '''\n    import math\n    area = 3 * r**2 * math.sqrt(3) / 2\n    return area\n    \ndef diamond_area(r) :  \n    '''\n    Write a python function to find the area of the largest diamond that can be inscribed in a square with a given side length.\n    '''\n    import math\n    area = (1 / 2) * (3 * r**2)\n    return area\n    \ndef diamond_area_v2(r) :  \n    '''\n    Write a python function to find the area of the largest diamond that can be inscribed in a square with a given side length.\n    '''\n    import math\n    area = r * r * math.sqrt(3) / 4\n    return area\n    \ndef rhombus_area(r) :  \n    '''\n    Write a python function to find the area of the largest rhombus that can be inscribed in a square with a given side length.\n    '''\n    import math\n    area = r**2\n    return area\n    \ndef rhombus_area_v2(r) :  \n    '''\n    Write a python function to find the area of the largest rhombus that can be inscribed in a square with a given side length.\n    '''\n    import math\n    area = 2 * r * math.sqrt(2) / 2\n    return area\n    \ndef square_area(r) :  \n    '''\n    Write a python function to find the area of the largest square that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = math.pi * r**2\n    return area\n    \ndef square_area_v2(r) :  \n    '''\n    Write a python function to find the area of the largest square that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = r**2 * math.pi\n    return area\n    \ndef rhombus_area(r) :  \n    '''\n    Write a python function to find the area of the largest rhombus that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = r**2 * math.sqrt(3) / 4\n    return area\n    \ndef rhombus_area_v2(r) :  \n    '''\n    Write a python function to find the area of the largest rhombus that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = r * math.sqrt(3) / 2\n    return area\n    \ndef rectangle_area(r,s) :  \n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = s * r\n    return area\n    \ndef rectangle_area_v2(r,s) :  \n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = r * s\n    return area\n    \ndef rhombus_area(r) :  \n    '''\n    Write a python function to find the area of the largest rhombus that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = r**2 * math.sqrt(3) / 4\n    return area\n    \ndef rhombus_area_v2(r) :  \n    '''\n    Write a python function to find the area of the largest rhombus that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = r * math.sqrt(3) / 2\n    return area\n    \ndef rhombus_area(r) :  \n    '''\n    Write a python function to find the area of the largest rhombus that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = r**2 * math.sqrt(3) / 4\n    return area\n    \ndef rhombus_area_v2(r) :  \n    '''\n    Write a python function to find the area of the largest rhombus that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = r * math.sqrt(3) / 2\n    return area\n    \ndef rectangle_area(r,s) :  \n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = s * r\n    return area\n    \ndef rectangle_area_v2(r,s) :  \n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = r * s\n    return area\n    \ndef rhombus_area(r) :  \n    '''\n    Write a python function to find the area of the largest rhombus that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = r**2 * math.sqrt(3) / 4\n    return area\n    \ndef rhombus_area_v2(r) :  \n    '''\n    Write a python function to find the area of the largest rhombus that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = r * math.sqrt(3) / 2\n    return area\n    \ndef circle_area(r) :  \n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a square with a given side length.\n    '''\n    import math\n    area = mat",
        "num_ids": 10
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = r * r * (r + 1) / (4 * (r + 1))\n    return a\n",
        "num_ids": 28
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>=end:\n        return start\n    if array[start]!=start:\n        return start\n    if array[end]!=end:\n        return end\n    return find_First_Missing(array,start+1,end-1)\n",
        "num_ids": 78
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return start + 1\n    if array[start] == array[end] and start!= end:\n        return find_First_Missing(array,start+1,end)\n    elif array[start]!= array[end]:\n        return array[start] + 1\n    elif array[start] == array[end] and start == end:\n        return find_First_Missing(array,0,start-1)\n    else:\n        return find_First_Missing(array,start+1,end-1)\n",
        "num_ids": 146
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if array[start]!=start:\n        return start\n    elif array[end]!=end:\n        return end\n    else:\n        return find_First_Missing(array,start+1,end-1)\n",
        "num_ids": 71
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if array[end]==end+1:\n        return end+1\n    if array[start]!=start+1:\n        return start+1\n    mid = (start+end)/2\n    if array[mid]==mid+1:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n",
        "num_ids": 113
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start < end:\n        mid = int((start + end) / 2)\n        if array[mid]!= mid and array[mid]!= array[mid-1]:\n            return array[mid]\n        elif array[mid]!= mid:\n            return find_First_Missing(array,start,mid-1)\n        elif array[mid] == mid:\n            return find_First_Missing(array,mid+1,end)\n    return -1\n",
        "num_ids": 129
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if end<=start:\n        return start+1\n    if start>=end:\n        return start\n    mid=(start+end)//2\n    if mid>0 and array[mid-1]==array[mid]:\n        return find_First_Missing(array,mid+1,end)\n    if array[mid]<array[mid+1]:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n",
        "num_ids": 140
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start > end:\n        return None\n    if start == end:\n        if array[start] == start+1:\n            return start+1\n        else:\n            return None\n    mid = (start + end)//2\n    if array[mid] == mid+1:\n        return find_First_Missing(array,start=mid+1,end=end)\n    else:\n        return find_First_Missing(array,start=start,end=mid-1)\n",
        "num_ids": 131
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)\n    if start == end:\n        return end\n    mid = int((start+end)/2)\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n",
        "num_ids": 85
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start == end:\n        return start\n    elif start == end - 1:\n        if array[start]!= start + 1:\n            return start + 1\n        else:\n            return start\n    else:\n        mid = (start + end) // 2\n        if array[mid] == mid + 1:\n            return find_First_Missing(array,start,mid)\n        else:\n            return find_First_Missing(array,mid,end)\n",
        "num_ids": 126
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start == end:\n        return start\n    mid = (start+end)//2\n    if array[mid] - array[start-1] == 1:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\n",
        "num_ids": 92
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # Replace spaces with '%20'\n    return string.replace(' ','%20')\n",
        "num_ids": 24
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split(' '))\n",
        "num_ids": 15
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n",
        "num_ids": 17
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if type(string)!= str:\n        return None\n    return string.replace(' ', '%20')\n",
        "num_ids": 28
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_evens = []\n    list_odds = []\n",
        "num_ids": 18
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens=[]\n    for x in list:\n        if x%2==0:\n            evens.append(x)\n    return evens\n",
        "num_ids": 38
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenList = []\n    for item in list:\n        if item % 2 == 0:\n            evenList.append(item)\n    return evenList\n",
        "num_ids": 38
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list=[]\n    for num in list:\n        if (num%2==0):\n            even_list.append(num)\n    return even_list\n",
        "num_ids": 42
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = [] \n    for num in list: \n        if num % 2 == 0: \n            result.append(num) \n    return result \n",
        "num_ids": 40
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens=[]\n    for i in list:\n        if i%2==0:\n            evens.append(i)\n    return evens\n",
        "num_ids": 38
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    #l = filter(lambda x: x%2==0,list)\n    #print l\n    #for i in l:\n    #    print i\n    l = [x for x in list if x%2==0]\n    return l",
        "num_ids": 59
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    for i in list:\n        if i % 2 == 0:\n            list1.append(i)\n    return list1\n",
        "num_ids": 38
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_even = [i for i in list if i%2==0]\n    print list_even\n    return list_even\n",
        "num_ids": 33
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = [x for x in list if x%2 == 0]\n    return list1\n",
        "num_ids": 25
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x < 0 or y < 0:\n        return False\n    elif x >= len(grid[0]) or y >= len(grid):\n        return False\n    else:\n        sub.append((x, y))\n        if x!= 0:\n            adjac((x - 1, y), sub)\n        if x!= len(grid[0]) - 1:\n            adjac((x + 1, y), sub)\n        if y!= 0:\n            adjac((x, y - 1), sub)\n        if y!= len(grid) - 1:\n            adjac((x, y + 1), sub)\n        return sub\n",
        "num_ids": 161
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    return sub\n    \ndef test_adjac():\n    print adjac((2, 2))\n    print adjac((3, 2))\n    print adjac((4, 2))\n    print adjac((4, 3))\n    print adjac((4, 4))\n    print adjac((4, 5))\n    print adjac((3, 3))\n    print adjac((3, 4))\n    print adjac((3, 5))\n    print adjac((3, 6))\n    print adjac((4, 4))\n    print adjac((4, 5))\n    print adjac((4, 6))\n    print adjac((4, 7))\n    print adjac((5, 4))\n    print adjac((5, 5))\n    print adjac((5, 6))\n    print adjac((5, 7))\n    print adjac((6, 4))\n    print adjac((6, 5))\n    print adjac((6, 6))\n    print adjac((6, 7))\n    print adjac((7, 4))\n    print adjac((7, 5))\n    print adjac((7, 6))\n    print adjac((7, 7))\n    \ntest_adjac()\n",
        "num_ids": 291
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    neighbours = []\n    for i in range(len(ele)):\n        if ele[i] > 0:\n            neighbours.append((ele[0], ele[1], ele[2], ele[i] - 1))\n        if ele[i] < len(ele) - 1:\n            neighbours.append((ele[0], ele[1], ele[2], ele[i] + 1))\n    return neighbours\n",
        "num_ids": 107
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    i, j = ele\n    if i>0:\n        adj.append((i-1, j))\n    if i<3:\n        adj.append((i+1, j))\n    if j>0:\n        adj.append((i, j-1))\n    if j<3:\n        adj.append((i, j+1))\n    return adj\n",
        "num_ids": 94
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] > 0:\n        return ((ele[0] - 1, ele[1]),(ele[0] - 1, ele[1] + 1))\n    elif ele[1] > 0:\n        return ((ele[0], ele[1] - 1),(ele[0], ele[1] - 1))\n    else:\n        return ((ele[0], ele[1] + 1),(ele[0], ele[1] + 1))\n",
        "num_ids": 111
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    res = []\n    if len(ele) == 1:\n        if isinstance(ele[0], int):\n            res = [[i, j] for i in range(ele[0]-1, ele[0]+2) for j in range(ele[0]-1, ele[0]+2) if i!= ele[0] or j!= ele[0]]\n        elif isinstance(ele[0], str):\n            res = [[i, j] for i in ele[0][0] for j in ele[0][1]]\n        elif isinstance(ele[0], tuple):\n            res = [[i, j] for i in ele[0][0] for j in ele[0][1]]\n    elif len(ele) == 2:\n        if isinstance(ele[0], int) and isinstance(ele[1], int):\n            res = [[i, j] for i in range(ele[0]-1, ele[0]+2) for j in range(ele[1]-1, ele[1]+2) if i!= ele[0] or j!= ele[1]]\n        elif isinstance(ele[0], str) and isinstance(ele[1], int):\n            res = [[i, j] for i in ele[0][0] for j in range(ele[1]-1, ele[1]+2) if i!= ele[0] or j!= ele[1]]\n        elif isinstance(ele[0], int) and isinstance(ele[1], str):\n            res = [[i, j] for i in range(ele[0]-1, ele[0]+2) for j in ele[1][0] if i!= ele[0] or j!= ele[1]]\n        elif isinstance(ele[0], str) and isinstance(ele[1], str):\n            res = [[i, j] for i in ele[0][0] for j in ele[1][0] if i!= ele[0] or j!= ele[1]]\n        elif isinstance(ele[0], tuple) and isinstance(ele[1], int):\n            res = [[i, j] for i in ele[0][0] for j in range(ele[1]-1, ele[1]+2) if i!= ele[0] or j!= ele[1]]\n        elif isinstance(ele[0], int) and isinstance(ele[1], tuple):\n            res = [[i, j] for i in range(ele[0]-1, ele[0]+2) for j in ele[1][0] if i!= ele[0] or j!= ele[1]]\n        elif isinstance(ele[0], tuple) and isinstance(ele[1], tuple):\n            res = [[i, j] for i in ele[0][0] for j in ele[1][0] if i!= ele[0] or j!= ele[1]]\n    if sub!= []:\n        res = [sub+r for r in res]\n    return res\n",
        "num_ids": 713
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    result = []\n    for x in ele[0]:\n        if x < ele[1]:\n            result.append((x+1, ele[1]))\n        else:\n            result.append((x, ele[1]+1))\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in xrange(len(ele)):\n        for j in xrange(len(ele)):\n            if j!= i:\n                lst = list(ele)\n                lst[i] = j\n                lst[j] = i\n                sub.append(tuple(lst))\n    return tuple(sub)\n",
        "num_ids": 82
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if type(ele)!= tuple:\n        return []\n    if len(ele) < 2:\n        return []\n    return [(ele[0], ele[1] + 1), (ele[0], ele[1] - 1), (ele[0] + 1, ele[1]), (ele[0] - 1, ele[1])]\n",
        "num_ids": 82
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if isinstance(ele, tuple):\n        return [(ele[0] + dx, ele[1] + dy) for dy, dx in DIRS]\n    return [(ele[0] + dx, ele[1] + dy) for dy, dx in DIRS]\n",
        "num_ids": 66
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = text\n    if text == '':\n        return ''\n    elif text[0] =='':\n        result = '_' + text[1:]\n    elif text[-1] =='':\n        result = text[:-1] + '_'\n    else:\n        result = text\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "num_ids": 12
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\") + \"_\" + text.replace(\"_\", \" \")\n",
        "num_ids": 25
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.strip()\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        else:\n            new_text += char\n",
        "num_ids": 51
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.translate(str.maketrans(' ', '_',''))\n",
        "num_ids": 23
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_str = str(text)\n    text_str = text_str.replace(' ', '_')\n    text_str = text_str.replace('_','')\n    return text_str\n",
        "num_ids": 50
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new = text.replace(\" \", \"_\")\n    new = new.replace(\"_\", \" \")\n    return new\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\").replace(\"_\",\" \")\n    \ndef replace_spaces_nospace(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\").replace(\"_\",\" \")\n",
        "num_ids": 19
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros_to_move = 0\n    for index,num in enumerate(num_list):\n        if num == 0:\n            zeros_to_move += 1\n        else:\n            break\n    for zero_index in range(zeros_to_move):\n        num_list.append(0)\n    return num_list\n",
        "num_ids": 82
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = [i for i in num_list if i!= 0]\n    num_list.append(0)\n    return num_list\n",
        "num_ids": 38
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # break the list into two parts: 1. all non-zero numbers, 2. all zero numbers\n    # sort the list\n    # merge the two sorted lists\n",
        "num_ids": 39
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = num_list.count(0)\n    for i in range(zero_count):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n",
        "num_ids": 53
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    for j in range(len(num_list) - len(new_list)):\n        new_list.append(0)\n    return new_list\n",
        "num_ids": 73
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = 0\n    for i in num_list:\n        if i!= 0:\n            n += 1\n    \n    n -= 1\n    num_list[:] = [0] * n\n    num_list.append(0)\n",
        "num_ids": 59
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    non_zero_list = [i for i in num_list if i!= 0]\n    zero_list = [0] * (len(num_list) - len(non_zero_list))\n    return non_zero_list + zero_list\n",
        "num_ids": 62
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zeros += 1\n",
        "num_ids": 40
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return_list = []\n    for i in num_list:\n        if i!= 0:\n            return_list.append(i)\n    return_list = return_list + [0] * num_list.count(0)\n    return return_list\n",
        "num_ids": 64
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = [0]*num_list.count(0)\n    zero_list.extend([0 for i in range(num_list.count(0))])\n    return zero_list\n",
        "num_ids": 50
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    xor = 0\n    for i in range(n-1) : \n        xor += arr[i] ^ arr[i+1]\n    return xor\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2003
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # The len of arr is n and n is even.\n    return n*(n-1)/2\n",
        "num_ids": 27
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr1 = [0 for i in range(n)] \n    for i in range(n) : \n        arr1[i] = arr[i]\n    arr2 = arr1[:]\n    res = 0\n    for i in range(n) : \n        arr2[i] = arr[i]\n    for i in range(n) : \n        for j in range(n) : \n            if (i < j) : \n                res += arr[i] ^ arr[j] \n    return res \n    \ndef find_strongest_sum_subarray(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list and return the \n    sum of the first (n-1) subarray elements which is the strongest sum subarray.\n    '''\n    if (n < 2) : \n        return 0\n    elif (n == 2) : \n        return arr[0] ^ arr[1]\n    res = 0 \n    for i in range(n-1) : \n        res += arr[i]\n    for i in range(n-2) : \n        res += arr[i] ^ arr[i+1]\n    return res\n",
        "num_ids": 98
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # base case : no elements in the list, return 0\n    if n == 0 :\n        return 0\n",
        "num_ids": 27
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xored = 0\n    for i in range(0,len(arr)) : \n        for j in range(i+1,len(arr)) : \n            xored = xored ^ arr[i] ^ arr[j]\n    return xored \n",
        "num_ids": 63
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) < 2 : return 0\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            res = res ^ arr[i] ^ arr[j]\n    return res\n",
        "num_ids": 66
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    output = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            output = output ^ arr[i] ^ arr[j] \n    return output \n",
        "num_ids": 52
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            ans += arr[i] ^ arr[j]\n    return ans \n",
        "num_ids": 51
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res=0\n    for i in range(len(arr)-1) :\n        res += arr[i]^arr[i+1]\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i + 1,n):\n            if (arr[i] ^ arr[j]) in arr:\n                sum += arr[i] ^ arr[j]\n    return sum\n",
        "num_ids": 62
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        hq.heappush(heap,i)\n    for i in xrange(len(iterable)):\n        iterable[i] = hq.heappop(heap)\n    return iterable\n",
        "num_ids": 67
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in range(len(iterable)):\n        hq.heappush(h,iterable[i])\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 59
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h,item)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return list(hq.nlargest(len(iterable),iterable))\n",
        "num_ids": 33
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) > 1:\n        tmp = iterable[0]\n        iterable = iterable[1:]\n        for i in range(0, len(iterable)):\n            hq.heapify(iterable)\n            if iterable[0] > tmp:\n                iterable[0] = tmp\n                hq.heapify(iterable)\n        iterable.insert(0, tmp)\n        return iterable\n    else:\n        return iterable\n",
        "num_ids": 116
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # here is the list of items in the list to be sorted\n    l = [3, 7, 1, 2, 5, 4, 9, 8]\n    # here is the list of items in the list to be sorted\n    hq.heapify(l)\n    # here is the list of items in the list to be sorted\n    print(hq.nlargest(3, l))\n",
        "num_ids": 93
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    min_heap = []\n    for i in range(len(iterable)):\n        hq.heappush(min_heap, (iterable[i], i))\n    \n    sorted_list = []\n    while len(min_heap) > 0:\n        node = hq.heappop(min_heap)\n        sorted_list.append(node[0])\n    return sorted_list\n",
        "num_ids": 103
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(h))]\ndef merge_sort(array):\n    '''\n    Sort an array in O(nlogn) time complexity\n    '''\n    def merge(left, right):\n        result = []\n        while left and right:\n            if left[0] < right[0]:\n                result.append(left.pop(0))\n            else:\n                result.append(right.pop(0))\n        if left:\n            result += left\n        elif right:\n            result += right\n        return result\n    if len(array) < 2:\n        return array\n    mid = len(array) // 2\n    left = merge_sort(array[:mid])\n    right = merge_sort(array[mid:])\n    return merge(left, right)\ndef quick_sort(array):\n    '''\n    Sort an array in O(nlogn) time complexity\n    '''\n    def partition(array, left, right):\n        pivot = array[right]\n        store_index = left\n        for i in range(left, right):\n            if array[i] < pivot:\n                array[i], array[store_index] = array[store_index], array[i]\n                store_index += 1\n        array[store_index], array[right] = array[right], array[store_index]\n        return store_index\n    def sort(array, left, right):\n        if left < right:\n            partition_index = partition(array, left, right)\n            sort(array, left, partition_index - 1)\n            sort(array, partition_index + 1, right)\n    if len(array) < 2:\n        return array\n    sort(array, 0, len(array) - 1)\ndef radix_sort(array):\n    '''\n    Radix sort algorithm. This is used in counting sort, bucket sort and\n    bitonic sort.\n    '''\n    def count_sort(array, place):\n        buckets = [[] for i in range(10)]\n        for i in range(len(array)):\n            digit = (array[i] // (10**place)) % 10\n            buckets[digit].append(array[i])\n        for i in range(len(array)):\n            buckets[digit][i] = array[i]\n        for i in range(len(array)):\n            for j in range(len(buckets[digit])):\n                array[i] = buckets[digit][j]\n    def get_place(array, place):\n        max_num = max(array)\n        if max_num <= 9:\n            return 10\n        if max_num <= 99:\n            return 100\n        if max_num <= 999:\n            return 1000\n        return None\n    if len(array) < 2:\n        return array\n    place = 1\n    max_num = max(array)\n    while get_place(array, place):\n        count_sort(array, place)\n        place += 1\n    return array\ndef tim_sort(array):\n    '''\n    This is the Tim Sort algorithm.\n    '''\n    if len(array) < 2:\n        return array\n    min_heap, max_heap = [], []\n    result = []\n    for i in range(len(array)):\n        hq.heappush(min_heap,(array[i],i))\n    for i in range(len(array)):\n        hq.heappush(max_heap,(-array[i],i))\n    while len(min_heap) > 0 or len(max_heap) > 0:\n        if len(min_heap) > 0 and (len(max_heap) == 0 or -min_heap[0][0] > max_heap[0][0]):\n            num, index = hq.heappop(min_heap)\n            result.append(num)\n        else:\n            num, index = hq.heappop(max_heap)\n            result.append(-num)\n        if len(min_heap) > 0:\n            hq.heappush(min_heap,(array[index],index))\n        if len(max_heap) > 0:\n            hq.heappush(max_heap,(-array[index],index))\n    return result\ndef heapsort(iterable):\n    '''\n    Implement heapsort using heapq.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef bogo_sort(array):\n    '''\n    Sort an array in O(n^2) time complexity\n    '''\n    def is_sorted(array):\n        for i in range(1, len(array)):\n            if array[i] < array[i-1]:\n                return False\n        return True\n    if not is_sorted(array):\n        random.shuffle(array)\n    return array\ndef bubble_sort(array):\n    '''\n    Implement bubble sort.\n    '''\n    for i in range(len(array)):\n        for j in range(len(array)-1,i,-1):\n            if array[j] < array[j-1]:\n                array[j], array[j-1] = array[j-1], array[j]\n    return array\ndef insertion_sort(array):\n    '''\n    Implement insertion sort.\n    '''\n    for i in range(1,len(array)):\n        j = i\n        while j > 0 and array[j-1] > array[j]:\n            array[j],array[j-1] = array[j-1],array[j]\n            j -= 1\n    return array\ndef selection_sort(array):\n    '''\n    Implement selection sort.\n    '''\n    for i in range(len(array)):\n        min_index = i\n        for j in range(i, len(array)):\n            if array[j] < array[min_index]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n    return array\ndef shell_sort(array):\n    '''\n    Implement shell sort.\n    '''\n    def insertion_sort(array, start, gap):\n        for i in range(start+gap, len(array), gap):\n            temp = array[i]\n            j = i\n            while j >= gap and array[j-gap] > temp:\n                array[j] = array[j-gap]\n                j -= gap\n            array[j] = temp\n    def shell_sort(array, start, gap):\n        for i in range(start+gap, len(array), gap):\n            temp = array[i]\n            j = i\n            while j >= gap and array[j-gap] > temp:\n                array[j] = array[j-gap]\n                j -= gap\n            array[j] = temp\n    start, gap = 0,1\n    while gap < len(array):\n        insertion_sort(array, start, gap)\n        start += gap\n        gap *= 2\n    return array\ndef counting_sort(array, max_num):\n    '''\n    Implement counting sort.\n    '''\n    buckets = [0] * (max_num+1)\n    for i in array:\n        buckets[i] += 1\n    index = 0\n    for i in range(len(buckets)):\n        while buckets[i] > 0:\n            array[index] = i\n            buckets[i] -= 1\n            index += 1\n    return array\ndef heap_sort(array):\n    '''\n    Implement heap sort.\n    '''\n    def heapify(array, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and array[largest] < array[left]:\n            largest = left\n        if right < n and array[largest] < array[right]:\n            largest = right\n        if largest!= i:\n            array[largest], array[i] = array[i], array[largest]\n            h",
        "num_ids": 108
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def build_max_heap(iterable):\n        heap=[]\n        for item in iterable:\n            hq.heappush(heap,(-1*item,item))\n        return heap\n    \n    def heap_sort(heap):\n        sorted_list=[]\n        while heap:\n            top_item=hq.heappop(heap)\n            sorted_list.append(top_item[1])\n        return sorted_list\n    \n    return heap_sort(build_max_heap(iterable))\n",
        "num_ids": 133
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    return profit==0 and loss==0\n",
        "num_ids": 34
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost*0.05 >= sale_amount >= actual_cost*0.15:\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        return True\n    elif sale_amount == 0:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True\n",
        "num_ids": 53
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost > sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True\n",
        "num_ids": 41
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        return True\n    elif actual_cost > 0 and sale_amount > actual_cost:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return 'NO'\n    elif sale_amount < actual_cost:\n        return 'NO'\n    else:\n        return 'YES'\n",
        "num_ids": 47
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        return True\n    elif sale_amount < 0:\n        return False\n    return actual_cost < sale_amount\n",
        "num_ids": 39
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    elif sale_amount > actual_cost:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(35.74 + 0.6215*t + (35.75*v**0.16) - (0.4275*t)*v**0.16)\n",
        "num_ids": 44
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a=13.12\n    b=35.75\n    c=0.6215\n    d=11.37\n    return round(a + (b * t) - (c * v**d) + (d * t * v**d))\ndef wind_chill_closest(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a=13.12\n    b=35.75\n    c=0.6215\n    d=11.37\n    e=35\n    f=0\n    g=0\n    if t>=e:\n        if t>e:\n            f=e\n        else:\n            f=t\n    else:\n        f=t\n    if v>=e:\n        g=e\n    else:\n        g=v\n    return round(a + (b * f) - (c * g**d) + (d * f * g**d))\ndef wind_chill_closest2(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a=13.12\n    b=35.75\n    c=0.6215\n    d=11.37\n    e=35\n    f=0\n    g=0\n    h=0\n    if t>=e:\n        if t>e:\n            f=e\n        else:\n            f=t\n    else:\n        f=t\n    if v>=e:\n        g=e\n    else:\n        g=v\n    if f>=e:\n        h=e\n    else:\n        h=f\n    return round(a + (b * h) - (c * g**d) + (d * h * g**d))\ndef wind_chill_closest3(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a=13.12\n    b=35.75\n    c=0.6215\n    d=11.37\n    e=35\n    f=0\n    g=0\n    h=0\n    i=0\n    if t>=e:\n        if t>e:\n            f=e\n        else:\n            f=t\n    else:\n        f=t\n    if v>=e:\n        g=e\n    else:\n        g=v\n    if f>=e:\n        h=e\n    else:\n        h=f\n    if f>=e:\n        i=e\n    else:\n        i=f\n    return round(a + (b * h) - (c * g**d) + (d * h * g**d))\ndef wind_chill_closest4(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a=13.12\n    b=35.75\n    c=0.6215\n    d=11.37\n    e=35\n    f=0\n    g=0\n    h=0\n    i=0\n    j=0\n    k=0\n    l=0\n    if t>=e:\n        if t>e:\n            f=e\n        else:\n            f=t\n    else:\n        f=t\n    if v>=e:\n        g=e\n    else:\n        g=v\n    if f>=e:\n        h=e\n    else:\n        h=f\n    if f>=e:\n        i=e\n    else:\n        i=f\n    if f>=e:\n        j=e\n    else:\n        j=f\n    if f>=e:\n        k=e\n    else:\n        k=f\n    if f>=e:\n        l=e\n    else:\n        l=f\n    return round(a + (b * l) - (c * g**d) + (d * l * g**d))\ndef wind_chill_closest5(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a=13.12\n    b=35.75\n    c=0.6215\n    d=11.37\n    e=35\n    f=0\n    g=0\n    h=0\n    i=0\n    j=0\n    k=0\n    l=0\n    m=0\n    n=0\n    o=0\n    p=0\n    if t>=e:\n        if t>e:\n            f=e\n        else:\n            f=t\n    else:\n        f=t\n    if v>=e:\n        g=e\n    else:\n        g=v\n    if f>=e:\n        h=e\n    else:\n        h=f\n    if f>=e:\n        i=e\n    else:\n        i=f\n    if f>=e:\n        j=e\n    else:\n        j=f\n    if f>=e:\n        k=e\n    else:\n        k=f\n    if f>=e:\n        l=e\n    else:\n        l=f\n    if f>=e:\n        m=e\n    else:\n        m=f\n    if f>=e:\n        n=e\n    else:\n        n=f\n    if f>=e:\n        o=e\n    else:\n        o=f\n    if f>=e:\n        p=e\n    else:\n        p=f\n    return round(a + (b * h) - (c * g**d) + (d * h * g**d))\ndef wind_chill_closest6(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a=13.12\n    b=35.75\n    c=0.6215\n    d=11.37\n    e=35\n    f=0\n    g=0\n    h=0\n    i=0\n    j=0\n    k=0\n    l=0\n    m=0\n    n=0\n    o=0\n    p=0\n    q=0\n    r=0\n    s=0\n    t=0\n    u=0\n    v=0\n    if t>=e:\n        if t>e:\n            f=e\n        else:\n            f=t\n    else:\n        f=t\n    if v>=e:\n        g=e\n    else:\n        g=v\n    if f>=e:\n        h=e\n    else:\n        h=f\n    if f>=e:\n        i=e\n    else:\n        i=f\n    if f>=e:\n        j=e\n    else:\n        j=f\n    if f>=e:\n        k=e\n    else:\n        k=f\n    if f>=e:\n        l=e\n    else:\n        l=f\n    if f>=e:\n        m=e\n    else:\n        m=f\n    if f>=e:\n        n=e\n    else:\n        n=f\n    if f>=e:\n        o=e\n    else:\n        o=f\n    if f>=e:\n        p=e\n    else:\n        p=f\n    if f>=e:\n        q=e\n    else:\n        q=f\n    if f>=e:\n        r=e\n    else:\n        r=f\n    if f>=e:\n        s=e\n    else:\n        s=f\n    if f>=e:\n        t=e\n    else:\n        t=f\n    if f>=e:\n        u=e",
        "num_ids": 479
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<0:\n        raise ValueError('Wind velocity must be greater than 0')\n    if t<-50 or t>50:\n        raise ValueError('Temperature must be between -50 and 50')\n    elif t < 16:\n        wind_chill = 35.74 + 0.6215*t + ((0.4275*t) - 35.75)*(v**0.16)\n    elif t >= 16 and t < 22:\n        wind_chill = 22.49 + 0.6108*t + ((0.4275*t) - 22.48)*(v**0.16)\n    else:\n        wind_chill = 4.03 + 0.625*t + ((0.4275*t) - 4.03)*(v**0.16)\n    return int(round(wind_chill))\n",
        "num_ids": 199
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    if v < 3:\n        return t\n    elif v >= 3 and v < 5:\n        return math.ceil((t + ((13.12 * t) - 35.37) * (v - 3))/5)\n    else:\n        return math.ceil((t + ((12.75 * t) - 35.37) * (v - 5))/5)\n",
        "num_ids": 93
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    F = 1.8*(v**0.16)+35.5\n    if F >= t:\n        return t\n    else:\n        return int(F)\n",
        "num_ids": 42
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + 0.6215 * t + 11.37 * math.pow(v,0.16) - 35.75 * math.pow(t,0.16) + 0.4275 * t * math.pow(v,0.16)\n    return math.ceil(wci)\n",
        "num_ids": 79
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(35.74 + (0.6215 * t) - (35.75 * math.pow(v,0.16)) + (0.4275 * t) * (v ** 0.16))\ndef test_wind_chill():\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t=70))\n    print(wind_chill(v=99,t",
        "num_ids": 1996
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=float(v)\n    t=float(t)\n    v=v*5/9.0\n    t=t*(9/5)+32\n    return int(round(v*(t-35)*(35/t),0))\n",
        "num_ids": 62
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # wci = (35.74 + 0.6215 * t) - 35.75 * v**0.16 + 0.4275 * t - 0.0775 * t**2 + 0.00008 * t**3\n    # wci = (35.74 + 0.6215 * t) - 35.75 * v**0.16 + 0.4275 * t - 0.0775 * t**2 + 0.00008 * t**3 + 32\n    wci = (35.74 + 0.6215 * t) - 35.75 * v**0.16 + 0.4275 * t - 0.0775 * t**2 + 0.00008 * t**3 + 32 - 2.5594\n    return int(round(wci))\n    \ndef rel_hum(t,wci):\n    '''\n    Write a function to calculate the relative humidity rounded to the next integer given the wind chill index and a temperature in Celsius.\n    '''\n    rh = 100 * (wci / (35.74 + 0.6215 * t))\n    return int(round(rh))\n    \ndef vapor_pressure(t,rh):\n    '''\n    Write a function to calculate the vapor pressure rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mixture(t,rh):\n    '''\n    Write a function to calculate the vapor pressure mixture rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * (1 - 0.378 * (rh / 100)) * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mix_hPa(t,rh):\n    '''\n    Write a function to calculate the vapor pressure mixture in hPa rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * (1 - 0.378 * (rh / 100)) * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mix_mm(t,rh):\n    '''\n    Write a function to calculate the vapor pressure mixture in millimeters rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * (1 - 0.378 * (rh / 100)) * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mix_Pa(t,rh):\n    '''\n    Write a function to calculate the vapor pressure mixture in millimeters rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * (1 - 0.378 * (rh / 100)) * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mix_kPa(t,rh):\n    '''\n    Write a function to calculate the vapor pressure mixture in millimeters rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * (1 - 0.378 * (rh / 100)) * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mix_mb(t,rh):\n    '''\n    Write a function to calculate the vapor pressure mixture in millimeters rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * (1 - 0.378 * (rh / 100)) * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mix_hPa(t,rh):\n    '''\n    Write a function to calculate the vapor pressure mixture in millimeters rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * (1 - 0.378 * (rh / 100)) * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mix_mm(t,rh):\n    '''\n    Write a function to calculate the vapor pressure mixture in millimeters rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * (1 - 0.378 * (rh / 100)) * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mix_atm(t,rh):\n    '''\n    Write a function to calculate the vapor pressure mixture in millimeters rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * (1 - 0.378 * (rh / 100)) * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mix_mb(t,rh):\n    '''\n    Write a function to calculate the vapor pressure mixture in millimeters rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * (1 - 0.378 * (rh / 100)) * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mix_atm(t,rh):\n    '''\n    Write a function to calculate the vapor pressure mixture in millimeters rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * (1 - 0.378 * (rh / 100)) * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mix_kPa(t,rh):\n    '''\n    Write a function to calculate the vapor pressure mixture in millimeters rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * (1 - 0.378 * (rh / 100)) * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mix_Pa(t,rh):\n    '''\n    Write a function to calculate the vapor pressure mixture in millimeters rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * (1 - 0.378 * (rh / 100)) * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mix_mb(t,rh):\n    '''\n    Write a function to calculate the vapor pressure mixture in millimeters rounded to the next integer given the temperature in Celsius and the relative humidity in %.\n    '''\n    e = 6.112 * (1 - 0.378 * (rh / 100)) * math.exp( 17.62 * t / (243.12 + t) - 4030.78 / (t + 237.3) )\n    return int(round(e))\n    \ndef vapor_pressure_mix_hPa(t,rh):\n    '",
        "num_ids": 82
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74 + 0.6215*t + (35.75*math.pow(v,0.16)) - (0.4275*t*math.pow(v,0.16))\n    return round(a)\n",
        "num_ids": 60
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper() == False:\n            count += len(name)\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_l = []\n    for s in sample_names:\n        if s[0].islower():\n            sample_names_l.append(s)\n    return sum(map(len, sample_names_l))\n",
        "num_ids": 57
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n    \ndef test_sample_nam():\n    assert sample_nam(['Brennan', 'Mandy', 'Rebecca', 'Nathan', 'Samantha', 'Emily']) == 22\n    assert sample_nam(['Josh', 'Tina', 'Ian', 'Jeremy', 'Adam', 'Scott']) == 26\n    assert sample_nam(['Daniel', 'Erin', 'Nick', 'Nora', 'Andy', 'Ethan', 'Karen', 'Kurt', 'Linda', 'Logan']) == 36\n    assert sample_nam(['Laila', 'Lana', 'Raleigh', 'Sandra', 'Catherine', 'Sara', 'Katie', 'Samuel']) == 31\n    assert sample_nam(['Joana', 'Luiza', 'Dawn', 'Laura', 'Rafaela', 'Celeste', 'Jane', 'Laura', 'Cecelia', 'Sara']) == 29\n    \ndef rotate_list(a, n):\n    '''\n    Write a function that rotates a list by n elements.\n    '''\n    pass\n    \ndef test_rotate_list():\n    assert rotate_list([1,2,3,4,5,6,7], 3) == [3,4,5,6,7,1,2]\n    assert rotate_list([1,2,3,4,5,6,7], 5) == [7,1,2,3,4,5,6]\n    assert rotate_list([1,2,3,4,5,6,7], 4) == [4,5,6,7,1,2,3]\n    assert rotate_list([1,2,3,4,5,6,7], 0) == [1,2,3,4,5,6,7]\n    assert rotate_list([1,2,3,4,5,6,7], -4) == [7,1,2,3,4,5,6]\n    assert rotate_list([1,2,3,4,5,6,7], -1) == [1,2,3,4,5,6,7]\n    assert rotate_list([1,2,3,4,5,6,7], 1) == [7,1,2,3,4,5,6]\n    assert rotate_list([1,2,3,4,5,6,7], 2) == [2,3,4,5,6,7,1]\n    assert rotate_list([1,2,3,4,5,6,7], 3) == [3,4,5,6,7,1,2]\n    assert rotate_list([1,2,3,4,5,6,7], 4) == [4,5,6,7,1,2,3]\n    assert rotate_list([1,2,3,4,5,6,7], 5) == [5,6,7,1,2,3,4]\n    assert rotate_list([1,2,3,4,5,6,7], 6) == [6,7,1,2,3,4,5]\n    assert rotate_list([1,2,3,4,5,6,7], 7) == [7,1,2,3,4,5,6]\n    assert rotate_list([1,2,3,4,5,6,7], 8) == [1,2,3,4,5,6,7]\n    assert rotate_list([1,2,3,4,5,6,7], 9) == [2,3,4,5,6,7,1]\n    assert rotate_list([1,2,3,4,5,6,7], 10) == [3,4,5,6,7,1,2]\n    assert rotate_list([1,2,3,4,5,6,7], 11) == [4,5,6,7,1,2,3]\n    assert rotate_list([1,2,3,4,5,6,7], 12) == [5,6,7,1,2,3,4]\n    assert rotate_list([1,2,3,4,5,6,7], 13) == [6,7,1,2,3,4,5]\n    assert rotate_list([1,2,3,4,5,6,7], 14) == [7,1,2,3,4,5,6]\n    assert rotate_list([1,2,3,4,5,6,7], 15) == [1,2,3,4,5,6,7]\n    assert rotate_list([1,2,3,4,5,6,7], 16) == [2,3,4,5,6,7,1]\n    assert rotate_list([1,2,3,4,5,6,7], 17) == [3,4,5,6,7,1,2]\n    assert rotate_list([1,2,3,4,5,6,7], 18) == [4,5,6,7,1,2,3]\n    assert rotate_list([1,2,3,4,5,6,7], 19) == [5,6,7,1,2,3,4]\n    assert rotate_list([1,2,3,4,5,6,7], 20) == [6,7,1,2,3,4,5]\n    assert rotate_list([1,2,3,4,5,6,7], 21) == [7,1,2,3,4,5,6]\n    assert rotate_list([1,2,3,4,5,6,7], 22) == [1,2,3,4,5,6,7]\n    assert rotate_list([1,2,3,4,5,6,7], 23) == [2,3,4,5,6,7,1]\n    assert rotate_list([1,2,3,4,5,6,7], 24) == [3,4,5,6,7,1,2]\n    assert rotate_list([1,2,3,4,5,6,7], 25) == [4,5,6,7,1,2,3]\n    assert rotate_list([1,2,3,4,5,6,7], 26) == [5,6,7,1,2,3,4]\n    assert rotate_list([1,2,3,4,5,6,7], 27) == [6,7,1,2,3,4,5]\n    assert rotate_list([1,2,3,4,5,6,7], 28) == [7,1,2,3,4,5,6]\n    assert rotate_list([1,2,3,4,5,6,7], 29) == [1,2,3,4,5,6,7]\n    assert rotate_list([1,2,3,4,5,6,7], 30) == [2,3,4,5,6,7,1]\n    assert rotate_list([1,2,3,4,5,6,7], 31) == [3,4,5,6,7,1,2]\n    assert rotate_list([1,2,3,4,5,6,7], 32) == [4,5,6,7,1,2,3]\n    assert rotate_list([1,2,3,4,5,6,7], 33) == [5,6,7,1,2,3,4]\n    assert rotate_list([1,2,3,4,5,6,7], 34) == [6,7,1,2,3,4,5]\n    assert rotate_list([1,2,3,4,5,6,7], 35) == [7,1,2,3,4,5,6]\n    assert rotate_list([1,2,3,4,5,6,7], 36) == [1,2,3,4,5,6,7]\n    assert rotate_list([1,2,3,4,5,6,7], 37) == [2,3,4,5,6,7,1]\n    assert rotate_list([1,2,3,4,5,6,7], 38) == [3,4,5,6,7,1,2]\n    assert rotate_list([1,2,3,4,5",
        "num_ids": 1749
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n",
        "num_ids": 26
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    res = 0\n    for name in sample_names:\n        if name[0].isupper():\n            res += len(name)\n    return res\n",
        "num_ids": 38
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_sample_names = []\n    for name in sample_names:\n        if name[0].islower():\n            new_sample_names.append(name)\n    return sum(len(name) for name in new_sample_names)\n",
        "num_ids": 60
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_sample_names = []\n    for sample_name in sample_names:\n        if sample_name[0].isupper():\n            new_sample_names.append(sample_name)\n    return sum([len(sample_name) for sample_name in new_sample_names])\n",
        "num_ids": 70
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['David','Andrew','Bill','Wolf']\n    return sum([len(n) for n in sample_names if n[0].isupper()])\n",
        "num_ids": 41
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_len += len(name)\n    return sum_len\n",
        "num_ids": 44
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    cntr = 0\n    for name in sample_names:\n        if name[0].isupper():\n            cntr += len(name)\n    return cntr\n",
        "num_ids": 44
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub('\\([^\\)]*\\)', '', items)\n    items = items.replace('()', '')\n    return items\n",
        "num_ids": 38
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pairs = re.findall(r'\\((.*?)\\)', items)\n    for item in pairs:\n        items = items.replace(item, item[1:-1])\n    return items\n",
        "num_ids": 49
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    '''\n    Input is a list of strings, each string is in a list\n    Output is a list of strings, each string is in a list\n    '''\n    #check for parenthesis\n    if len(items) > 1:\n        if '(' in items[0] and ')' in items[0]:\n            items[0] = items[0].replace('(','')\n            items[0] = items[0].replace(')','')\n        elif '(' in items[1] and ')' in items[1]:\n            items[1] = items[1].replace('(','')\n            items[1] = items[1].replace(')','')\n        elif '(' in items[0] and ')' in items[1]:\n            items[0] = items[0].replace('(','')\n            items[0] = items[0].replace(')','')\n            items[1] = items[1].replace('(','')\n            items[1] = items[1].replace(')','')\n        elif '(' in items[1] and ')' in items[0]:\n            items[0] = items[0].replace('(','')\n            items[0] = items[0].replace(')','')\n            items[1] = items[1].replace('(','')\n            items[1] = items[1].replace(')','')\n        elif '(' in items[0] and ')' in items[1]:\n            items[0] = items[0].replace('(','')\n            items[0] = items[0].replace(')','')\n            items[1] = items[1].replace('(','')\n            items[1] = items[1].replace(')','')\n        elif '(' in items[1] and ')' in items[0]:\n            items[0] = items[0].replace('(','')\n            items[0] = items[0].replace(')','')\n            items[1] = items[1].replace('(','')\n            items[1] = items[1].replace(')','')\n        else:\n            pass\n    else:\n        pass\n    return items\n",
        "num_ids": 490
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub('[^A-Za-z0-9]','',items)\n    items = items.replace('(','')\n    items = items.replace(')','')\n    return items\n",
        "num_ids": 54
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        new_items.append(item.strip('()'))\n    return new_items\n",
        "num_ids": 39
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #items = '{item1}({\"item2\", item3})(item4, {\"item5\", item6})'\n    #items = items.replace('(', '')\n    #items = items.replace(')', '')\n    #items = items.replace('{', '')\n    #items = items.replace('}', '')\n    #items = items.replace('[', '')\n    #items = items.replace(']', '')\n    #items = items.replace('\"', '')\n    #items = items.replace('\\'', '')\n    #items = items.replace(',', '')\n    #items = items.replace(' ', '')\n    #items = items.replace('\\n', '')\n    return items\n",
        "num_ids": 179
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    def remove_parenthesis_aux(items):\n        if items[0] == '(':\n            items = items[1:]\n        elif items[-1] == ')':\n            items = items[:-1]\n        return items\n    return remove_parenthesis_aux(items)\n",
        "num_ids": 70
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # We are going to find everything that is between the parentheses and store it in a list.\n    # We will then return the value of the list as a string.\n    # Example: \"(((foo)bar))\" --> \"foo,bar\"\n    list_of_strings = []\n    list_of_numbers = []\n    string_list = []\n    new_string = []\n    for i in items:\n        if i == '(':\n            continue\n        elif i == ')':\n            continue\n        elif i == ',':\n            continue\n        else:\n            list_of_strings.append(i)\n    for j in list_of_strings:\n        if j == ')':\n            continue\n        elif j == '(':\n            continue\n        elif j == ',':\n            continue\n        else:\n            list_of_numbers.append(j)\n    list_of_numbers.append(list_of_strings[-1])\n    list_of_numbers.append(list_of_strings[0])\n    del list_of_strings[0]\n    del list_of_strings[-1]\n    for k in range(0,len(list_of_numbers),2):\n        new_string.append(list_of_numbers[k])\n        new_string.append(list_of_numbers[k+1])\n    for l in new_string:\n        string_list.append(l)\n    return ''.join(string_list)\n",
        "num_ids": 358
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if not items:\n        return items\n    new_items = []\n    items = items.strip().split('(')\n    for item in items:\n        if item[-1] == ')':\n            item = item[:-1]\n        new_items.append(item)\n    return''.join(new_items)\n",
        "num_ids": 79
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items[0] == '(' and items[-1] == ')':\n        if len(items) == 1:\n            return items[0]\n        else:\n            return remove_parenthesis(items[1:-1])\n    else:\n        return items\n",
        "num_ids": 65
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n - 1\n    if n == 0:\n        return 1\n    else:\n        return n*(n+1) + n + 1\n",
        "num_ids": 38
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    else:\n        return 5*(n-2) + 7*(n-1)\n",
        "num_ids": 61
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    #return n*(n+1)/2\n    return n**2 + n + 1\n",
        "num_ids": 24
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0: return 1\n    elif n == 1: return 2\n    elif n == 2: return 3\n    else:\n        result = 2\n        i = 3\n        while i < n:\n            result += 4 * (i - 2)\n            i += 1\n        return result\n",
        "num_ids": 72
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        return n * (n - 1) // 2 + n - 1\n",
        "num_ids": 45
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    if n == 1: \n        return 1 \n    \n    if n == 2: \n        return 3 \n    \n    if n % 2 == 1: \n        return (n/2 + 1)*(n/2 + 2)\n    else: \n        return ((n/2)**2 + 1)*(n/2 + 1)\n",
        "num_ids": 86
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n * (n + 1)) / 2) % 3 == 1\n",
        "num_ids": 20
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n * (n + 1)) / 2) % ((n + 1) * (n + 2)) == 0\n",
        "num_ids": 30
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def get_next_number(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 1:\n            return 2 * (n - 1)\n        else:\n            return 2 * n\n",
        "num_ids": 54
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    x = re.search(\"z.{1}z\",text)\n    return x\n",
        "num_ids": 23
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if not re.search(r'z', text):\n        return False\n    if re.search(r'z', text[0:1]) and re.search(r'z', text[-1:]):\n        return True\n    if re.search(r'z', text[1:2]) and re.search(r'z', text[-2:]):\n        return True\n    if re.search(r'z', text[2:3]) and re.search(r'z', text[-3:]):\n        return True\n    if re.search(r'z', text[3:4]) and re.search(r'z', text[-4:]):\n        return True\n    if re.search(r'z', text[4:5]) and re.search(r'z', text[-5:]):\n        return True\n    if re.search(r'z', text[5:6]) and re.search(r'z', text[-6:]):\n        return True\n    if re.search(r'z', text[6:7]) and re.search(r'z', text[-7:]):\n        return True\n    if re.search(r'z', text[7:8]) and re.search(r'z', text[-8:]):\n        return True\n    if re.search(r'z', text[8:9]) and re.search(r'z', text[-9:]):\n        return True\n    if re.search(r'z', text[9:10]) and re.search(r'z', text[-10:]):\n        return True\n    if re.search(r'z', text[10:11]) and re.search(r'z', text[-11:]):\n        return True\n    if re.search(r'z', text[11:12]) and re.search(r'z', text[-12:]):\n        return True\n    if re.search(r'z', text[12:13]) and re.search(r'z', text[-13:]):\n        return True\n    if re.search(r'z', text[13:14]) and re.search(r'z', text[-14:]):\n        return True\n    if re.search(r'z', text[14:15]) and re.search(r'z', text[-15:]):\n        return True\n    if re.search(r'z', text[15:16]) and re.search(r'z', text[-16:]):\n        return True\n    if re.search(r'z', text[16:17]) and re.search(r'z', text[-17:]):\n        return True\n    if re.search(r'z', text[17:18]) and re.search(r'z', text[-18:]):\n        return True\n    if re.search(r'z', text[18:19]) and re.search(r'z', text[-19:]):\n        return True\n    if re.search(r'z', text[19:20]) and re.search(r'z', text[-20:]):\n        return True\n    if re.search(r'z', text[20:21]) and re.search(r'z', text[-21:]):\n        return True\n    if re.search(r'z', text[21:22]) and re.search(r'z', text[-22:]):\n        return True\n    if re.search(r'z', text[22:23]) and re.search(r'z', text[-23:]):\n        return True\n    if re.search(r'z', text[23:24]) and re.search(r'z', text[-24:]):\n        return True\n    if re.search(r'z', text[24:25]) and re.search(r'z', text[-25:]):\n        return True\n    if re.search(r'z', text[25:26]) and re.search(r'z', text[-26:]):\n        return True\n    if re.search(r'z', text[26:27]) and re.search(r'z', text[-27:]):\n        return True\n    if re.search(r'z', text[27:28]) and re.search(r'z', text[-28:]):\n        return True\n    if re.search(r'z', text[28:29]) and re.search(r'z', text[-29:]):\n        return True\n    if re.search(r'z', text[29:30]) and re.search(r'z', text[-30:]):\n        return True\n    if re.search(r'z', text[30:31]) and re.search(r'z', text[-31:]):\n        return True\n    if re.search(r'z', text[31:32]) and re.search(r'z', text[-32:]):\n        return True\n    if re.search(r'z', text[32:33]) and re.search(r'z', text[-33:]):\n        return True\n    if re.search(r'z', text[33:34]) and re.search(r'z', text[-34:]):\n        return True\n    if re.search(r'z', text[34:35]) and re.search(r'z', text[-35:]):\n        return True\n    if re.search(r'z', text[35:36]) and re.search(r'z', text[-36:]):\n        return True\n    if re.search(r'z', text[36:37]) and re.search(r'z', text[-37:]):\n        return True\n    if re.search(r'z', text[37:38]) and re.search(r'z', text[-38:]):\n        return True\n    if re.search(r'z', text[38:39]) and re.search(r'z', text[-39:]):\n        return True\n    if re.search(r'z', text[39:40]) and re.search(r'z', text[-40:]):\n        return True\n    if re.search(r'z', text[40:41]) and re.search(r'z', text[-41:]):\n        return True\n    if re.search(r'z', text[41:42]) and re.search(r'z', text[-42:]):\n        return True\n    if re.search(r'z', text[42:43]) and re.search(r'z', text[-43:]):\n        return True\n    if re.search(r'z', text[43:44]) and re.search(r'z', text[-44:]):\n        return True\n    if re.search(r'z', text[44:45]) and re.search(r'z', text[-45:]):\n        return True\n    if re.search(r'z', text[45:46]) and re.search(r'z', text[-46:]):\n        return True\n    if re.search(r'z', text[46:47]) and re.search(r'z', text[-47:]):\n        return True\n    if re.search(r'z', text[47:48]) and re.search(r'z', text[-48:]):\n        return True\n    if re.search(r'z', text[48:49]) and re.search(r'z', text[-49:]):\n        return True\n    if re.search(r'z', text[49:50]) and re.search(r'z', text[-50:]):\n        return True\n    if re.search(r'z', text[50:51]) and re.search(r'z', text[-51:]):\n        return True\n    if re.search(r'z', text[51:52]) and re.search(r'z', text[-52:]):\n        return True\n    if re.search(r'z', text[52:53]) and re.search(r'z', text[-53:]):\n        return True\n    if re.search(r'z', text[53:54]) and re.search(r'z', text[-54:]):\n        return True\n    if re.search(r'z', text[54:55]) and re.search(r'z', text[-55:]):\n        return True\n    i",
        "num_ids": 2002
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    patterns = ['z', 'Z', 'dz', 'Dz', 'xz', 'Xz']\n    pattern = re.compile('|'.join(patterns))\n    x = pattern.search(text)\n    return x\n",
        "num_ids": 59
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # regex_for_a = re.compile(r'[^A-Za-z]')\n    # regex_for_z = re.compile(r'[A-Za-z][^A-Za-z]')\n    # regex_for_z = re.compile(r'[^A-Za-z]+[A-Za-z]+[^A-Za-z]')\n    # regex_for_z = re.compile(r'[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]')\n    # regex_for_z = re.compile(r'[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]')\n    # regex_for_z = re.compile(r'[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]')\n    # regex_for_z = re.compile(r'[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^A-Za-z]+[A-Za-z]+[^",
        "num_ids": 2001
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == \"\":\n        return False\n    else:\n        return re.search(\"z\", text) and re.search(\"z\", text[-1]) and re.search(\"z\", text[0])\n",
        "num_ids": 51
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z' or text[-1] == 'z' or text[len(text)-1] == 'z':\n        return False\n    else:\n        return True\n",
        "num_ids": 48
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.lower()[0]!= 'z':\n        return False\n    if text.lower()[-1]!= 'z':\n        return False\n    if len(text) <= 2:\n        return False\n    if re.search(r'\\wz$', text):\n        return False\n    if re.search(r'^z\\w', text):\n        return False\n    return True\n",
        "num_ids": 99
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'^z', text) or re.search(r'z$', text):\n        return False\n    else:\n        return True\n",
        "num_ids": 40
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) < 3:\n        return False\n    if text[0] == 'z' and text[-1]!= 'z':\n        return True\n    if text[0]!= 'z' and text[-1] == 'z':\n        return True\n    if text[0]!= 'z' and text[-1]!= 'z' and text[1]!= 'z' and text[-2]!= 'z':\n        return False\n    if text[0] == 'z' and text[-1] == 'z' and text[1]!= 'z' and text[-2]!= 'z':\n        return True\n    if text[0]!= 'z' and text[-1] == 'z' and text[1] == 'z' and text[-2]!= 'z':\n        return True\n    if text[0] == 'z' and text[-1]!= 'z' and text[1] == 'z' and text[-2] == 'z':\n        return True\n    if text[0]!= 'z' and text[-1]!= 'z' and text[1]!= 'z' and text[-2] == 'z':\n        return True\n    return False\ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) < 3:\n        return False\n    if text[0] == 'z' and text[-1]!= 'z':\n        return True\n    if text[0]!= 'z' and text[-1] == 'z':\n        return True\n    if text[0]!= 'z' and text[-1]!= 'z' and text[1]!= 'z' and text[-2]!= 'z':\n        return False\n    if text[0] == 'z' and text[-1] == 'z' and text[1]!= 'z' and text[-2]!= 'z':\n        return True\n    if text[0]!= 'z' and text[-1] == 'z' and text[1] == 'z' and text[-2]!= 'z':\n        return True\n    if text[0] == 'z' and text[-1]!= 'z' and text[1] == 'z' and text[-2] == 'z':\n        return True\n    if text[0]!= 'z' and text[-1]!= 'z' and text[1]!= 'z' and text[-2] == 'z':\n        return True\n    return False\ndef text_match_wordz_middle3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) < 3:\n        return False\n    if text[0] == 'z' and text[-1]!= 'z':\n        return True\n    if text[0]!= 'z' and text[-1] == 'z':\n        return True\n    if text[0]!= 'z' and text[-1]!= 'z' and text[1]!= 'z' and text[-2]!= 'z':\n        return False\n    if text[0] == 'z' and text[-1] == 'z' and text[1]!= 'z' and text[-2]!= 'z':\n        return True\n    if text[0]!= 'z' and text[-1] == 'z' and text[1] == 'z' and text[-2]!= 'z':\n        return True\n    if text[0] == 'z' and text[-1]!= 'z' and text[1] == 'z' and text[-2] == 'z':\n        return True\n    if text[0]!= 'z' and text[-1]!= 'z' and text[1]!= 'z' and text[-2] == 'z':\n        return True\n    return False\ndef text_match_wordz_middle4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) < 3:\n        return False\n    if text[0] == 'z' and text[-1]!= 'z':\n        return True\n    if text[0]!= 'z' and text[-1] == 'z':\n        return True\n    if text[0]!= 'z' and text[-1]!= 'z' and text[1]!= 'z' and text[-2]!= 'z':\n        return False\n    if text[0] == 'z' and text[-1] == 'z' and text[1]!= 'z' and text[-2]!= 'z':\n        return True\n    if text[0]!= 'z' and text[-1] == 'z' and text[1] == 'z' and text[-2]!= 'z':\n        return True\n    if text[0] == 'z' and text[-1]!= 'z' and text[1] == 'z' and text[-2] == 'z':\n        return True\n    if text[0]!= 'z' and text[-1]!= 'z' and text[1]!= 'z' and text[-2] == 'z':\n        return True\n    return False\ndef text_match_wordz_middle5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) < 3:\n        return False\n    if text[0] == 'z' and text[-1]!= 'z':\n        return True\n    if text[0]!= 'z' and text[-1] == 'z':\n        return True\n    if text[0]!= 'z' and text[-1]!= 'z' and text[1]!= 'z' and text[-2]!= 'z':\n        return False\n    if text[0] == 'z' and text[-1] == 'z' and text[1]!= 'z' and text[-2]!= 'z':\n        return True\n    if text[0]!= 'z' and text[-1] == 'z' and text[1] == 'z' and text[-2]!= 'z':\n        return True\n    if text[0] == 'z' and text[-1]!= 'z' and text[1] == 'z' and text[-2] == 'z':\n        return True\n    if text[0]!= 'z' and text[-1]!= 'z' and text[1]!= 'z' and text[-2] == 'z':\n        return True\n    return False\ndef text_match_wordz_middle6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) < 3:\n        return False\n    if text[0] == 'z' and text[-1]!= 'z':\n        return True\n    if text[0]!= 'z' and text[-1] == 'z':\n        return True\n    if text[0]!= 'z' and text[-1]!= 'z' and text[1]!= 'z' and text[-2]!= 'z':\n        return False\n    if text[0] == 'z' and text[-1] == 'z' and text[1]!= 'z' and text[-2]!= 'z':\n        return True\n    if text[0]!= 'z' and text[-1] == 'z' and text[1] == 'z' and text[-2]!= 'z':\n        return True\n    if text[0] == 'z' and text[-1]!= 'z' and text[1] == 'z' and text[-2] == 'z':\n        return True\n    if text[0]!= 'z' and text[-1]!= 'z' and text[1]!= 'z' and text[-2] == 'z':\n        return True\n    return False\ndef text_match_wordz_middle7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "num_ids": 25
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    return bool(re.search('z\\w{1}', text))\n",
        "num_ids": 24
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = [None] * len(input)\n    output[:k] = input[:k]\n    output[k:] = input[len(input)-k:]\n    return output\n",
        "num_ids": 46
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    first_k = input[0:k]\n    first_k.reverse()\n    second_k = input[k:len(input)]\n    second_k.reverse()\n    return first_k + second_k\n",
        "num_ids": 54
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input\n    return input[len(input)-k:len(input)]+reverse_Array_Upto_K(input, k+1)\n",
        "num_ids": 47
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k+1] + input[:k+1][::-1]\n",
        "num_ids": 24
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input=input[::-1]\n    return input[:k]\n",
        "num_ids": 20
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if input == None or len(input) == 0:\n        return None\n    elif k < 1:\n        return input\n    else:\n        return reverse_Array_Upto_K(input[1:], k-1) + input[:1]\n",
        "num_ids": 64
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    return input\n",
        "num_ids": 12
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k<0:\n        return []\n    if k == 0:\n        return [input[k]]\n    if k == 1:\n        return [input[k-1],input[k]]\n    if k == len(input):\n        return input[::-1]\n    if k > len(input):\n        return reverse_Array_Upto_K(input, k-1)\n    return reverse_Array_Upto_K(input, k-1) + [input[k-1]]\n",
        "num_ids": 122
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    return input\n",
        "num_ids": 12
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return\n    else:\n        input[:k] = input[::-1]\n        return input\n",
        "num_ids": 36
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup[i] + test_dict[i] for i in range(len(test_tup)))\n",
        "num_ids": 33
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + tuple(test_dict)\n",
        "num_ids": 19
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    assert isinstance(test_tup, tuple)\n    assert isinstance(test_dict, dict)\n    return tuple([test_tup[i] + test_dict[i] for i in range(len(test_tup))])\n",
        "num_ids": 59
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n",
        "num_ids": 18
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple([*test_tup, test_dict])\n",
        "num_ids": 17
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n",
        "num_ids": 18
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = list(test_tup)\n    new_tup.append(test_dict)\n    return tuple(new_tup)\n",
        "num_ids": 39
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tup += (key, value)\n    return new_tup\n",
        "num_ids": 48
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    m = len(cost[0])\n    # base case\n    if n == 0 or m == 0:\n        return 0\n    max_average = -1\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                max_average = max(max_average, cost[i][j])\n            elif i == 0:\n                max_average = max(max_average, cost[i][j] + maxAverageOfPath(cost, i, j - 1))\n            elif j == 0:\n                max_average = max(max_average, cost[i][j] + maxAverageOfPath(cost, i - 1, j))\n            else:\n                max_average = max(max_average, cost[i][j] + maxAverageOfPath(cost, i - 1, j) + maxAverageOfPath(cost, i, j - 1) - cost[i][j])\n    return max_average\n",
        "num_ids": 238
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    # 3-d grid where each value is a list of costs to reach that cell\n    grid = [[[0 for j in xrange(cols)] for i in xrange(rows)] for k in xrange(2)]\n    for i in xrange(rows):\n        for j in xrange(cols):\n            grid[0][i][j] = grid[1][i][j] = cost[i][j]\n    for i in xrange(1,rows):\n        grid[i][0][0] = grid[i-1][0][0] + cost[i][0]\n    for i in xrange(1,rows):\n        grid[i][0][1] = grid[i-1][0][1] + cost[i][1]\n    for i in xrange(1,rows):\n        for j in xrange(2,cols):\n            grid[i][0][j] = grid[i-1][0][j] + cost[i][j]\n    for j in xrange(1,cols):\n        grid[0][0][j] = grid[0][0][j-1] + cost[0][j]\n    for j in xrange(1,cols):\n        grid[0][1][j] = grid[0][1][j-1] + cost[0][j]\n    for i in xrange(1,rows):\n        for j in xrange(2,cols):\n            grid[i][1][j] = min(grid[i-1][0][j], grid[i-1][1][j-1]) + cost[i][j]\n    return grid[rows-1][cols-1] / float(rows * cols)\n",
        "num_ids": 421
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if cost==[]:\n        return 0\n    return max(maxAverageOfPath(cost[1:]), maxAverageOfPath(cost[:-1])) + cost[0][0]\n",
        "num_ids": 46
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    for i in range(1, m):\n        cost[i][0] += cost[i-1][0]\n    for j in range(1, n):\n        cost[0][j] += cost[0][j-1]\n",
        "num_ids": 76
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_average = 0\n    max_path = []\n",
        "num_ids": 16
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    if len(cost) == 1:\n        return cost[0][0]\n    temp = [0 for i in range(len(cost))]\n    for i in range(len(cost[0])):\n        temp[i] = cost[0][i]\n    for j in range(1, len(cost)):\n        temp[0] += cost[j][0]\n    for i in range(1, len(cost)):\n        for j in range(1, len(cost[i])):\n            temp[j] = max(temp[j - 1], temp[j]) + cost[i][j]\n    return temp[len(cost) - 1] / (len(cost) * len(cost[0]))\n",
        "num_ids": 187
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for i in range(n):\n        dp[0][i] = cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1] / float(n*n)\n",
        "num_ids": 156
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0 or len(cost[0]) == 0:\n        return 0\n    max_sum = -1\n    m, n = len(cost), len(cost[0])\n    dp = [[0 for j in range(n)] for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    print dp\n    return dp[m-1][n-1] / float(m*n)\n",
        "num_ids": 244
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    students = {student: (float(height), float(weight)) for student, (height, weight) in students.items()}\n    \n    def filter_data(students, h, w):\n        return {student: (height, weight) for student, (height, weight) in students.items() if height > h and weight > w}\n    \n    return filter_data(students, h, w)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1970
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    temp = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            temp[student] = students[student]\n    return temp\n",
        "num_ids": 50
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    output=[]\n    for s in students.keys():\n        if students[s][0]>=h and students[s][1]>=w:\n            output.append(s)\n    return output\n",
        "num_ids": 51
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    output = {}\n    for i in students:\n        if students[i][0] > h and students[i][1] > w:\n            output[i] = students[i]\n    return output\n",
        "num_ids": 50
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [student for student in students if student[1][0] >= h and student[1][1] >= w]\n",
        "num_ids": 30
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for k,v in students.items():\n        if v[0] > h and v[1] > w:\n            print k\n",
        "num_ids": 34
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            result[student] = students[student]\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, val in students.items():\n        if (val[0] > h) and (val[1] > w):\n            result[name] = val\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    student_dict={}\n    \n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            student_dict[student] = data\n    return student_dict\n            \ndef get_data():\n    '''\n    Get the input and run filter_data()\n    '''\n    \n    students = {}\n    n = int(input())\n    for _ in range(n):\n        name = input()\n        student_height, student_weight = map(float, input().split())\n        students[name] = (student_height,student_weight)\n    h, w = map(float, input().split())\n    student_dict = filter_data(students,h,w)\n    for student, data in student_dict.items():\n        print(student)\n        print(\"{:.2f} {:.2f}\".format(data[0],data[1]))\n",
        "num_ids": 145
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            result[student] = students[student]\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return False\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n = len(nums1)\n    count = 0\n    for i in range(n):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # list1 = nums1\n    # list2 = nums2\n    count = 0\n    #for i in range(len(list1)):\n    #    for j in range(len(list2)):\n    #        if list1[i] == list2[j]:\n    #            print list1[i], list2[j]\n    #            count += 1\n    #            break\n    #return count\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n",
        "num_ids": 155
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            return i\n    return -1\n",
        "num_ids": 43
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i!= j and nums1[i] == nums2[j]:\n                counter += 1\n    return counter\n",
        "num_ids": 65
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = 0\n    for i in range(0, len(nums1)):\n        for j in range(0, len(nums2)):\n            if(eq(nums1[i], nums2[j])):\n                result += 1\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    ans = 0\n    for i in range(0, len(nums1)):\n        if nums1[i] == nums2[i]:\n            ans += 1\n    return ans\n",
        "num_ids": 72
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pair_count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            pair_count += 1\n    return pair_count\n",
        "num_ids": 52
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power:\n        result += power % 10\n        power //= 10\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(num)**power for num in str(base)])\n",
        "num_ids": 21
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(i) ** power for i in str(base))\n",
        "num_ids": 20
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 1:\n        return 0\n    return sum(int(i) for i in str(base**power))\n",
        "num_ids": 31
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    def power_sum(base, power):\n        return 0 if power == 0 else (base * power_sum(base, power - 1))\n    return power_sum(base, power)\n",
        "num_ids": 46
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # base_sum = 0\n    # for i in str(base):\n    #     base_sum += int(i)**power\n",
        "num_ids": 34
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        power *= -1\n        base = 1 / base\n    total = 0\n    for i in range(power):\n        total += int(str(base)[i])\n    return total\n",
        "num_ids": 53
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    return int(str(base) * power)\n",
        "num_ids": 25
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if not base:\n        return 0\n    return int(str(base) * power)\n",
        "num_ids": 24
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    m = re.search(r'\"(.*?)\"', text1)\n    if m:\n        print(m.group())\n        print(m.group(1))\n",
        "num_ids": 43
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    output = re.findall(r'\"([^\"]*)\"', text1)\n    return output\n",
        "num_ids": 27
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(\"\\\"(.*?)\\\"\",text1)\n    \ndef extract_apostrophe(text1):\n    '''\n    Write a function to extract values between apostrophe'' of the given string.\n    '''\n    return re.findall(\"\\'(.*?)\\'\",text1)\n    \ndef extract_parenthesis(text1):\n    '''\n    Write a function to extract values between parenthesis ( ) of the given string.\n    '''\n    return re.findall(\"\\((.*?)\\)\",text1)\n    \ndef extract_left_parenthesis(text1):\n    '''\n    Write a function to extract values between left parenthesis ( ) of the given string.\n    '''\n    return re.findall(\"\\{(.*?)\\}\",text1)\n    \ndef extract_right_parenthesis(text1):\n    '''\n    Write a function to extract values between right parenthesis ) of the given string.\n    '''\n    return re.findall(\"\\)\\s*?(.*)\",text1)\n    \ndef extract_left_square_bracket(text1):\n    '''\n    Write a function to extract values between left square bracket [ ] of the given string.\n    '''\n    return re.findall(\"\\[(.*?)\\]\",text1)\n    \ndef extract_right_square_bracket(text1):\n    '''\n    Write a function to extract values between right square bracket ] of the given string.\n    '''\n    return re.findall(\"\\]\\s*?(.*)\",text1)\n    \ndef extract_left_curly_bracket(text1):\n    '''\n    Write a function to extract values between left curly bracket {{ of the given string.\n    '''\n    return re.findall(\"\\{\\{(.*?)\\}\\}\",text1)\n    \ndef extract_right_curly_bracket(text1):\n    '''\n    Write a function to extract values between right curly bracket } of the given string.\n    '''\n    return re.findall(\"\\}\\s*?(.*)\",text1)\n    \ndef extract_symbol(text1):\n    '''\n    Write a function to extract values between symbol ; or : of the given string.\n    '''\n    return re.findall(\":|;\",text1)\n    \ndef extract_comma(text1):\n    '''\n    Write a function to extract values between comma, of the given string.\n    '''\n    return re.findall(\",\",text1)\n    \ndef extract_full_stop(text1):\n    '''\n    Write a function to extract values between full stop. of the given string.\n    '''\n    return re.findall(\"\\.\",text1)\n    \ndef extract_colon(text1):\n    '''\n    Write a function to extract values between colon : of the given string.\n    '''\n    return re.findall(\":\\s*?(.*)\",text1)\n    \ndef extract_question_mark(text1):\n    '''\n    Write a function to extract values between question mark? of the given string.\n    '''\n    return re.findall(\"\\?\",text1)\n    \ndef extract_exclamation_mark(text1):\n    '''\n    Write a function to extract values between exclamation mark! of the given string.\n    '''\n    return re.findall(\"\\!\",text1)\n    \ndef extract_backslash(text1):\n    '''\n    Write a function to extract values between backslash \\ of the given string.\n    '''\n    return re.findall(\"\\\\\",text1)\n    \ndef extract_dollar_sign(text1):\n    '''\n    Write a function to extract values between dollar sign $ of the given string.\n    '''\n    return re.findall(\"\\$\",text1)\n    \ndef extract_percentage(text1):\n    '''\n    Write a function to extract values between percentage % of the given string.\n    '''\n    return re.findall(\"\\%\",text1)\n    \ndef extract_hash(text1):\n    '''\n    Write a function to extract values between hash # of the given string.\n    '''\n    return re.findall(\"\\#\",text1)\n    \ndef extract_hash_sign(text1):\n    '''\n    Write a function to extract values between hash sign # of the given string.\n    '''\n    return re.findall(\"\\#\",text1)\n    \ndef extract_ampersand(text1):\n    '''\n    Write a function to extract values between ampersand & of the given string.\n    '''\n    return re.findall(\"&\",text1)\n    \ndef extract_ampersand_sign(text1):\n    '''\n    Write a function to extract values between ampersand & of the given string.\n    '''\n    return re.findall(\"&\",text1)\n    \ndef extract_at_sign(text1):\n    '''\n    Write a function to extract values between at sign @ of the given string.\n    '''\n    return re.findall(\"@\",text1)\n    \ndef extract_at_sign_sign(text1):\n    '''\n    Write a function to extract values between at sign @ of the given string.\n    '''\n    return re.findall(\"@\",text1)\n    \ndef extract_equal_sign(text1):\n    '''\n    Write a function to extract values between equal sign = of the given string.\n    '''\n    return re.findall(\"=\",text1)\n    \ndef extract_equal_sign_sign(text1):\n    '''\n    Write a function to extract values between equal sign = of the given string.\n    '''\n    return re.findall(\"=\",text1)\n    \ndef extract_arrow_sign(text1):\n    '''\n    Write a function to extract values between arrow sign -> of the given string.\n    '''\n    return re.findall(\"->\",text1)\n    \ndef extract_arrow_sign_sign(text1):\n    '''\n    Write a function to extract values between arrow sign -> of the given string.\n    '''\n    return re.findall(\"->\",text1)\n    \ndef extract_left_angle_bracket(text1):\n    '''\n    Write a function to extract values between left angle bracket < of the given string.\n    '''\n    return re.findall(\"\\<\",text1)\n    \ndef extract_left_angle_bracket_sign(text1):\n    '''\n    Write a function to extract values between left angle bracket < of the given string.\n    '''\n    return re.findall(\"\\<\",text1)\n    \ndef extract_right_angle_bracket(text1):\n    '''\n    Write a function to extract values between right angle bracket > of the given string.\n    '''\n    return re.findall(\"\\>\",text1)\n    \ndef extract_right_angle_bracket_sign(text1):\n    '''\n    Write a function to extract values between right angle bracket > of the given string.\n    '''\n    return re.findall(\"\\>\",text1)\n    \ndef extract_greater_than(text1):\n    '''\n    Write a function to extract values between greater than sign > of the given string.\n    '''\n    return re.findall(\"\\>\",text1)\n    \ndef extract_greater_than_sign(text1):\n    '''\n    Write a function to extract values between greater than sign > of the given string.\n    '''\n    return re.findall(\"\\>\",text1)\n    \ndef extract_less_than(text1):\n    '''\n    Write a function to extract values between less than sign < of the given string.\n    '''\n    return re.findall(\"\\<\",text1)\n    \ndef extract_less_than_sign(text1):\n    '''\n    Write a function to extract values between less than sign < of the given string.\n    '''\n    return re.findall(\"\\<\",text1)\n    \ndef extract_less_than_or_equal_to(text1):\n    '''\n    Write a function to extract values between less than or equal to sign <= of the given string.\n    '''\n    return re.findall(\"\\<=\",text1)\n    \ndef extract_less_than_or_equal_to_sign(text1):\n    ''",
        "num_ids": 39
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    reg_quotation = re.compile('\\\"[^\\\"]*\\\"|\\'[^\\']*\\'|[^\\\"\\']([^\\\"\\']*)')\n    quotation_list = re.findall(reg_quotation, text1)\n    return quotation_list\n",
        "num_ids": 68
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    a = re.findall(r\"\\\"(.+?)\\\"\",text1)\n    return a\n",
        "num_ids": 27
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    s = text1.split('\\\"')\n    if len(s)==2:\n        return s[1]\n    else:\n        return ''\n",
        "num_ids": 38
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\\"(.+?)\\\"')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No quotation marks\"\n    except Exception as e:\n        return e\ndef extract_email_id(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}\\b')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No email id\"\n    except Exception as e:\n        return e\ndef extract_date(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\b([0-9]{4}|[0-9]{1,2})/([0-9]{2})/([0-9]{2})\\b')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No date\"\n    except Exception as e:\n        return e\ndef extract_time(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\b([0-9]{2}):([0-9]{2})\\b')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No time\"\n    except Exception as e:\n        return e\ndef extract_phone(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\b\\d{10}\\b')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No phone number\"\n    except Exception as e:\n        return e\ndef extract_word(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'[\\w]+')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No word\"\n    except Exception as e:\n        return e\ndef extract_number(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\d+')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No number\"\n    except Exception as e:\n        return e\ndef extract_camelcase(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\b[A-Z]{1}[a-z]+\\b')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No camel case\"\n    except Exception as e:\n        return e\ndef extract_title(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\b[A-Z][a-z]+\\b')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No title\"\n    except Exception as e:\n        return e\ndef extract_alnum(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\w+')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No alphanumeric\"\n    except Exception as e:\n        return e\ndef extract_whitespace(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\s+')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No space\"\n    except Exception as e:\n        return e\ndef extract_numerals(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\d+')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No numerals\"\n    except Exception as e:\n        return e\ndef extract_percent(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\d+')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No percent\"\n    except Exception as e:\n        return e\ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\s+')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No space\"\n    except Exception as e:\n        return e\ndef extract_new_line(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\n+')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No new line\"\n    except Exception as e:\n        return e\ndef extract_line_feed(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\n+')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No new line\"\n    except Exception as e:\n        return e\ndef extract_tab(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\t+')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No tab\"\n    except Exception as e:\n        return e\ndef extract_backspace(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\b\\b')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No backspace\"\n    except Exception as e:\n        return e\ndef extract_end_quote(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r'\\\"\\b')\n        l = p.findall(text1)\n        if l:\n            return l\n        else:\n            return \"No end quote\"\n    except Exception as e:\n        return e\ndef extract_back_quote(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        p = re.compile(r",
        "num_ids": 15
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1.count('\"') == 1:\n        quot = re.search('\"(.*?)\"', text1)\n        quot2 = re.search('\"(.*)\"', text1)\n        if quot:\n            print(\"Quotation marks are in a string.\", quot.group(1))\n        elif quot2:\n            print(\"Quotation marks are in a string.\", quot2.group(1))\n        else:\n            print(\"No quotation marks in a string\")\n    elif text1.count('\"') > 1:\n        quot = re.search('\"(.*)\"', text1)\n        if quot:\n            print(\"Quotation marks are in a string.\", quot.group(1))\n        else:\n            print(\"No quotation marks in a string\")\n    else:\n        print(\"No quotation marks in a string\")\n",
        "num_ids": 196
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text1 = '\"Aspirin \" can be purchased by Ticor\" for $1,850. \"Aroosto \" can be purchased by Ticor\" for $1,850. \"Phenylephrine \" can be purchased by Ticor\" for $1,850. \"Hydromorphone \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Etiline \" can be purchased by Ticor\" for $1,850. \"Hydromorphone \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Dulosine \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" can be purchased by Ticor\" for $1,850. \"Naproxen \" ca",
        "num_ids": 2010
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    arr1=re.findall(\"\\\"(.*?)\\\"\",text1)\n    return arr1\n",
        "num_ids": 26
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    assert isinstance(test_tup, tuple),'must input a tuple'\n    assert len(test_tup) > 1,'must have at least two elements'\n    assert all(isinstance(x, int) for x in test_tup), 'all elements must be integers'\n    return tuple(x * y for x, y in zip(test_tup, test_tup[1:]))\n",
        "num_ids": 96
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        if i == 0:\n            new_tup = new_tup + (test_tup[i],)\n        else:\n            new_tup = new_tup + (test_tup[i]*test_tup[i-1],)\n    return new_tup\n",
        "num_ids": 95
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) < 2:\n        return tuple([0])\n    new_list = []\n    for i in range(len(test_tup)-1):\n        new_list.append(test_tup[i]*test_tup[i+1])\n    return tuple(new_list)\n",
        "num_ids": 79
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = len(test_tup)\n    out = []\n    for i in range(l):\n        out.append(test_tup[i] * test_tup[i+1])\n    return tuple(out)\n",
        "num_ids": 57
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(x*y for x, y in zip(test_tup, test_tup[1:]))\n",
        "num_ids": 30
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if test_tup == ():\n        return ()\n    return (test_tup[0]*test_tup[1],) + multiply_elements(test_tup[1:])\n    \n    \n    \n",
        "num_ids": 56
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    out = (1,)*(len(test_tup) + 1)\n    for i in range(len(test_tup)):\n        out[i+1] = test_tup[i] * out[i]\n    return tuple(out)\n",
        "num_ids": 64
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    result = ()\n    \n    for i in range(0, len(test_tup)):\n        result = result + (test_tup[i] * test_tup[i+1],)\n    \n    return result\n    \n    \n",
        "num_ids": 63
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x*y for x,y in zip(test_tup,test_tup[1:])])\n",
        "num_ids": 31
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # your code here\n    return [x+y for x,y in zip(lst1,lst2)]\n",
        "num_ids": 30
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert type(lst1) == list\n    assert type(lst2) == list\n    n = len(lst1)\n    sum_list = []\n    for i in range(n):\n        sum_list.append(lst1[i] + lst2[i])\n    return sum_list\n",
        "num_ids": 77
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n",
        "num_ids": 30
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n",
        "num_ids": 46
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(0,len(lst1)):\n        lst1[i] = lst1[i] + lst2[i]\n    return lst1\n",
        "num_ids": 46
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k,g in groupby(nums):\n        yield list(g)\n",
        "num_ids": 23
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped = groupby(nums)\n    return [k for k, _ in grouped]\n",
        "num_ids": 25
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(g) for i, g in groupby(nums)]\n",
        "num_ids": 21
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) < 2:\n        return nums\n    nums[1:] = [a for a, b in groupby(nums[1:])]\n    return nums\n",
        "num_ids": 48
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    l=len(nums)\n    if l==1:\n        return 1\n    if l==0:\n        return 0\n    \n    i=0\n    j=1\n    while j<l:\n        if nums[i]!=nums[j]:\n            i+=1\n            nums[i]=nums[j]\n        j+=1\n    return i+1\n",
        "num_ids": 95
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(x) for x in groupby(nums)]\n    \ndef next_palindrome(num):\n    '''\n    A palindromic number is a number that remains the same when its digits are reversed.\n    Given a positive integer,  find the smallest palindrome greater than.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        return int(num[:-1] + num[::-1])\n    return int(num + num[::-1])\n",
        "num_ids": 51
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        print(list(g))\n",
        "num_ids": 23
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n",
        "num_ids": 18
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) <= 1:\n        return nums\n    start = 0\n    end = 1\n    while end < len(nums):\n        if nums[start]!= nums[end]:\n            start += 1\n            nums[start] = nums[end]\n            end += 1\n        else:\n            end += 1\n    return nums[:start+1]\n",
        "num_ids": 96
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return 1\n    nums.sort()\n    print(nums)\n    output = [nums[0]]\n    prev = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i]!= prev:\n            output.append(nums[i])\n            prev = nums[i]\n    return output\n",
        "num_ids": 112
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi=math.pi\n    l=pi*r\n    r=r\n    a=(1/2)*math.sqrt(h**2+r**2)\n    b=(1/2)*h\n    s=l**2+2*l*a+a**2\n    return s\n",
        "num_ids": 72
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*math.pow(r,2)/4+math.pi*math.pow(r,2)/4+math.pi*math.pow(h,2)/2-math.pi*math.pow(r,2)/4-math.pi*math.pow(h,2)/4\n    return s\ndef lateral_surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    s=4*math.pi*math.pow(r,2)\n    return s\ndef lateral_surface_cube(a):\n    '''\n    Write a function to find the lateral surface area of a cube given length a.\n    '''\n    s=6*a*a\n    return s\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and height h.\n    '''\n    v=math.pi*math.pow(r,2)*h\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and height h.\n    '''\n    v=math.pi*math.pow(r,2)*h/3\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    v=4/3*math.pi*math.pow(r,3)\n    return v\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube given length a.\n    '''\n    v=a*a*a\n    return v\ndef compound_interest(principle,rate,time):\n    '''\n    Write a function to find compound interest given principle, rate, and time.\n    '''\n    c=(principle*rate*time)/100\n    return c\ndef acceleration(v,t):\n    '''\n    Write a function to find acceleration given initial velocity v and time t.\n    '''\n    a=v*v/(2*t)\n    return a\ndef velocity(a,t):\n    '''\n    Write a function to find velocity given acceleration a and time t.\n    '''\n    v=math.sqrt(2*a*t)\n    return v\ndef position(v,t):\n    '''\n    Write a function to find position given velocity v and time t.\n    '''\n    p=v*t\n    return p\ndef distance(v,t):\n    '''\n    Write a function to find distance given velocity v and time t.\n    '''\n    d=v*t\n    return d\ndef time(a,v):\n    '''\n    Write a function to find time given acceleration a and velocity v.\n    '''\n    t=math.sqrt(2*a*v/a)\n    return t\ndef speed(d,t):\n    '''\n    Write a function to find speed given distance d and time t.\n    '''\n    s=d/t\n    return s\ndef time_to_fall(v,h):\n    '''\n    Write a function to find time to fall given initial velocity v and height h.\n    '''\n    t=math.sqrt(2*h/v)\n    return t\ndef time_to_land(v,h):\n    '''\n    Write a function to find time to land given initial velocity v and height h.\n    '''\n    t=math.sqrt(v*v/2-2*h)\n    return t\ndef force(m,a):\n    '''\n    Write a function to find force given mass m and acceleration a.\n    '''\n    f=m*a\n    return f\ndef power(f,t):\n    '''\n    Write a function to find power given force f and time t.\n    '''\n    p=f*t\n    return p\ndef kinetic_energy(m,v):\n    '''\n    Write a function to find kinetic energy given mass m and velocity v.\n    '''\n    ke=0.5*m*v*v\n    return ke\ndef potential_energy(m,h):\n    '''\n    Write a function to find potential energy given mass m and height h.\n    '''\n    pe=m*h\n    return pe\ndef momentum(m,v):\n    '''\n    Write a function to find momentum given mass m and velocity v.\n    '''\n    p=m*v\n    return p\ndef work(m,d,f):\n    '''\n    Write a function to find work given mass m, distance d, and force f.\n    '''\n    w=m*d*f\n    return w\ndef angular_momentum(m,v,theta):\n    '''\n    Write a function to find angular momentum given mass m, velocity v, and angle theta.\n    '''\n    j=m*v*math.sin(theta)\n    return j\ndef change_in_angle(theta,t):\n    '''\n    Write a function to find change in angle given angle theta and time t.\n    '''\n    da=theta*t\n    return da\ndef change_in_velocity(v,t):\n    '''\n    Write a function to find change in velocity given initial velocity v and time t.\n    '''\n    dv=v*t\n    return dv\ndef change_in_height(h,t):\n    '''\n    Write a function to find change in height given initial height h and time t.\n    '''\n    dh=h*t\n    return dh\ndef change_in_distance(d,t):\n    '''\n    Write a function to find change in distance given initial distance d and time t.\n    '''\n    dd=d*t\n    return dd\ndef change_in_time(a,v):\n    '''\n    Write a function to find change in time given initial acceleration a and velocity v.\n    '''\n    dt=math.sqrt(2*a*v/a)\n    return dt\ndef change_in_speed(d,t):\n    '''\n    Write a function to find change in speed given initial distance d and time t.\n    '''\n    ds=d/t\n    return ds\ndef change_in_acceleration(a,v):\n    '''\n    Write a function to find change in acceleration given initial acceleration a and velocity v.\n    '''\n    da=a*v/v\n    return da\ndef change_in_momentum(m,v,theta):\n    '''\n    Write a function to find change in momentum given initial mass m, velocity v, and angle theta.\n    '''\n    dm=m*v*math.sin(theta)\n    return dm\ndef quadratic_solver(a,b,c):\n    '''\n    Write a function to find quadratic equation's solutions given constants a, b, and c.\n    '''\n    s=(-b+math.sqrt(math.pow(b,2)-(4*a*c)))/(2*a)\n    return s\ndef cube_root(x):\n    '''\n    Write a function to find cube root of given number x.\n    '''\n    if x>0:\n        r=(math.pow(x,1/3))\n    if x<0:\n        r=(-math.pow(-x,1/3))\n    return r\ndef cube_root2(x):\n    '''\n    Write a function to find cube root of given number x.\n    '''\n    if x>0:\n        r=(math.pow(x,1/3))\n    if x<0:\n        r=(-math.pow(-x,1/3))\n    return r\ndef mean(numbers):\n    '''\n    Write a function to find mean of given numbers.\n    '''\n    t=float(sum(numbers))\n    m=t/float(len(numbers))\n    return m\ndef median(numbers):\n    '''\n    Write a function to find median of given numbers.\n    '''\n    numbers.sort()\n    mid=len(numbers)/2\n    if len(numbers)%2==0:\n        m=(numbers[mid]+numbers[mid-1])",
        "num_ids": 47
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    if(r<=0):\n        return 0\n    elif(r>0 and r<1):\n        return math.pi*r**2 + math.pi*h\n    elif(r>=1 and r<2):\n        return math.pi*r**2 + math.pi*h + math.pi*r*h\n    elif(r>=2 and r<3):\n        return math.pi*r**2 + math.pi*h + 2*math.pi*r*h\n    elif(r>=3):\n        return math.pi*r**2 + math.pi*h + 2*math.pi*r*h\n    return 0\ndef lateralarea_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    if(r<=0):\n        return 0\n    elif(r>0 and r<1):\n        return math.pi*r**2 + math.pi*h\n    elif(r>=1 and r<2):\n        return math.pi*r**2 + math.pi*h + math.pi*r*h\n    elif(r>=2 and r<3):\n        return math.pi*r**2 + math.pi*h + 2*math.pi*r*h\n    elif(r>=3):\n        return math.pi*r**2 + math.pi*h + 2*math.pi*r*h\n    return 0\ndef lateralvolume_cone(r,h):\n    '''\n    Write a function to find the lateral volume of a cone given radius r and the height h.\n    '''\n    \n    if(r<=0):\n        return 0\n    elif(r>0 and r<1):\n        return math.pi*r**2*h\n    elif(r>=1 and r<2):\n        return math.pi*r**2*h + math.pi*r*h**2\n    elif(r>=2 and r<3):\n        return math.pi*r**2*h + math.pi*r*h**2 + math.pi*r*h*h\n    elif(r>=3):\n        return math.pi*r**2*h + math.pi*r*h**2 + math.pi*r*h*h\n    return 0\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    \n    if(r<=0):\n        return 0\n    elif(r>0 and r<1):\n        return 2*math.pi*r*h\n    elif(r>=1 and r<2):\n        return math.pi*r**2*h\n    elif(r>=2 and r<3):\n        return math.pi*r**2*h + math.pi*r*h**2\n    elif(r>=3):\n        return math.pi*r**2*h + math.pi*r*h**2 + math.pi*r*h*h\n    return 0\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    \n    if(r<=0):\n        return 0\n    elif(r>0 and r<1):\n        return math.pi*r*h**2\n    elif(r>=1 and r<2):\n        return math.pi*r**2*h**2\n    elif(r>=2 and r<3):\n        return math.pi*r**2*h**2 + math.pi*r*h*h**2\n    elif(r>=3):\n        return math.pi*r**2*h**2 + math.pi*r*h*h**2 + math.pi*r*h*h*h\n    return 0\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    \n    return 4/3*math.pi*r**3\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given radius r.\n    '''\n    \n    return 4*math.pi*r**2\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    \n    return 4*math.pi*r**2\ndef lateralvolume_sphere(r):\n    '''\n    Write a function to find the lateral volume of a sphere given radius r.\n    '''\n    \n    return 4/3*math.pi*r**3\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given radius r.\n    '''\n    \n    return 4*math.pi*r**2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    \n    return 4/3*math.pi*r**3\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given radius r and height h.\n    '''\n    \n    return math.pi*r*(r+h)\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    \n    return math.pi*r*h\ndef lateralvolume_cylinder(r,h):\n    '''\n    Write a function to find the lateral volume of a cylinder given radius r and height h.\n    '''\n    \n    return math.pi*r**2*h\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given radius r and height h.\n    '''\n    \n    return math.pi*r*(r+h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and height h.\n    '''\n    \n    return math.pi*r**2*h\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and height h.\n    '''\n    \n    return math.pi*r*h + lateralsurface_cone(r,h)\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    \n    return lateralsurface_cone(r,h)\ndef lateralvolume_cone(r,h):\n    '''\n    Write a function to find the lateral volume of a cone given radius r and height h.\n    '''\n    \n    return lateralvolume_cone(r,h)\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and height h.\n    '''\n    \n    return surfacearea_cone(r,h)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and height h.\n    '''\n    \n    return volume_cone(r,h)\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given radius r.\n    '''\n    \n    return surfacearea_sphere(r)\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    \n    return lateralsurface_sphere(r)\ndef lateralvolume_sphere(r):\n    '''\n    Write a function to find the lateral volume of a sphere given radius r.\n    '''\n    \n    return lateralvolume_sphere(r)\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given radius r.\n    '''\n    \n    return surfacearea_sphere(r)\ndef volume_sphere(r):\n    '",
        "num_ids": 26
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi*r**2+math.pi*r**2*h\n    return s\n",
        "num_ids": 27
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r <= 0:\n        return 0\n    elif r < h:\n        return math.pi*(r**2 + r*math.sqrt(h**2 - r**2))\n    else:\n        return math.pi*(r**2)\n    \ndef lateralsurface_sphere(r,n):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and the number of sides n.\n    '''\n    if r < 0:\n        return 0\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 4*math.pi*(r**2)\n    elif n > 1:\n        return 4*math.pi*r**2\n    else:\n        return 0\n",
        "num_ids": 75
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #print \"R: \",r\n    #print \"H: \",h\n    lateral_surface_area=math.pi*r*r+math.pi*r*r*h/2.0\n    #print \"lateral surface area of cone: \",lateral_surface_area\n    return lateral_surface_area\n",
        "num_ids": 77
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Check radius\n    if r <= 0:\n        raise ValueError(\"Radius must be greater than zero.\")\n",
        "num_ids": 28
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    s = math.pi*(r**2 + r*h)\n    return s\n    \ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    \n    s = math.pi*(r**2 + h)\n    return s\n    \ndef lateral_surface_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and the height h.\n    '''\n    \n    s = 4*math.pi*r**2 + 2*math.pi*r*h\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (math.pi*(r**2))/2 + (math.pi*r*h)\n    return area\n",
        "num_ids": 32
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2.0 / 4.0 * h\n",
        "num_ids": 20
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # to avoid error like :.text:000014160\n    specialchar = \":~\"\n    text = text.replace(\" \",\":~\")\n    text = text.replace(\",\",\":~\")\n    text = text.replace(\".\",\":~\")\n    return text\n",
        "num_ids": 67
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #solution\n    #list_of_char=[' ','.',',']\n    #for char in list_of_char:\n    #    text=re.sub(char,':',text)\n    #return text\n    return text.replace(' ',':').replace('.',':').replace(',',':')\n",
        "num_ids": 79
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"\\s\", \":\", text)\n    text = re.sub(r\"\\s\", \":\", text)\n    text = re.sub(r\"\\s\", \":\", text)\n    return text\n",
        "num_ids": 60
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':').replace(' ', '')\n",
        "num_ids": 32
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special = (':',',', '.')\n    for sp in special:\n        text = text.replace(sp,':')\n    return text\n",
        "num_ids": 37
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace spaces with :\n    text = text.replace(' ',':')\n    # replace commas with :\n    text = text.replace(',','::')\n    # replace dots with :\n    text = text.replace('.','::')\n    return text\n",
        "num_ids": 64
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.lower()\n    text = re.sub('[ \\n\\r\\t\\,]', '', text)\n    text = re.sub('[a-zA-Z]', '', text)\n    text = re.sub('[\\'\\-]', '', text)\n    return text\n",
        "num_ids": 75
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if isinstance(text,unicode):\n        return re.sub('[ :,\\.]','',text)\n    else:\n        return re.sub('[ :,\\.]','',text)\n",
        "num_ids": 49
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if re.search(r\"\\s\",text):\n        text = text.replace(\" \",\":\")\n    if re.search(r\",\",text):\n        text = text.replace(\",\",\":\")\n    if re.search(r\"\\.\",text):\n        text = text.replace(\".\",\":\")\n    return text\n",
        "num_ids": 80
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'([A-Za-z0-9\\s,\\.\\s])',r'\\1:', text)\n    return text\n",
        "num_ids": 42
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    left = 0\n    right = n-1\n",
        "num_ids": 22
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first = 0\n    last = len(A)-1\n    while first <= last:\n        mid = (first + last) // 2\n        if A[mid] == x:\n            first = mid + 1\n        elif A[mid] > x:\n            last = mid - 1\n        else:\n            first = mid + 1\n    return first\n",
        "num_ids": 84
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n    if A[-1] == x:\n        return len(A) - 1\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            if left == mid:\n                return -1\n            right = mid - 1\n        else:\n            if right == mid:\n                return -1\n            left = mid + 1\n    return -1\n",
        "num_ids": 141
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    if n == 0:\n        return -1\n    low = 0\n    high = n-1\n    while low <= high:\n        mid = (low+high)//2\n        if x < A[mid]:\n            high = mid-1\n        elif A[mid] < x:\n            low = mid+1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid-1\n    return -1\n",
        "num_ids": 127
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    N = len(A)\n    if x > A[N-1]:\n        return -1\n    if x < A[0]:\n        return -1\n",
        "num_ids": 40
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the first occurrence of x in A\n    left, right = 0, len(A) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if A[mid] > x:\n            right = mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n",
        "num_ids": 94
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n    return None\n",
        "num_ids": 89
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    low = 0\n    high = n - 1\n    first_occurrence = -1\n    while low <= high:\n        mid = low + (high - low) / 2\n        if A[mid] == x:\n            first_occurrence = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return first_occurrence\n    \ndef partition(A, start, end):\n    pivot = A[end]\n    i = start - 1\n    for j in xrange(start, end):\n        if A[j] < pivot:\n            i += 1\n            A[i], A[j] = A[j], A[i]\n    A[i + 1], A[end] = A[end], A[i + 1]\n    return i + 1\n    \ndef quick_sort(A, start, end):\n    if start < end:\n        pivot_pos = partition(A, start, end)\n        quick_sort(A, start, pivot_pos - 1)\n        quick_sort(A, pivot_pos + 1, end)\n    return A\n    \ndef find_median_of_medians(A):\n    n = len(A)\n    m = n/5\n    medians = []\n    for i in xrange(5):\n        if i == 0:\n            medians.append(A[i])\n        else:\n            medians.append(find_first_occurrence(A, medians[i - 1]))\n    return medians\n",
        "num_ids": 385
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n",
        "num_ids": 94
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n    \ndef find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n    \ndef find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n    \ndef find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n",
        "num_ids": 83
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    res = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        res = res * arr[i]\n",
        "num_ids": 55
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #    Time - O(n^3)\n    #    Space - O(n)\n    \n    prod_arr = [1]\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            prod_arr.append(prod_arr[-1]*arr[j])\n    return sum(prod_arr)\n",
        "num_ids": 94
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum([reduce(lambda x, y: x*y, arr[i:j]) for i in range(len(arr)) for j in range(i, len(arr) + 1)])\n",
        "num_ids": 49
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod = prod * arr[i]\n    result = prod\n    for i in range(len(arr)):\n        prod = 1\n        for j in range(i, len(arr)):\n            prod = prod * arr[j]\n            result = result + prod\n    return result\n",
        "num_ids": 90
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    m = len(arr)\n    res = [0]*(m+1)\n    res[0] = 1\n    for i in range(1, m+1):\n        res[i] = res[i-1]*arr[i-1]\n    tmp = 1\n    for i in range(1, m+1):\n        tmp *= arr[i-1]\n        res[i] = res[i] // tmp\n    return res[m]\n",
        "num_ids": 113
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subarrays = []\n    if len(arr) == 1:\n        return 0\n    elif len(arr) == 2:\n        return arr[0]*arr[1]\n    else:\n        for i in range(len(arr)):\n            if i == 0:\n                subarrays.append(arr[i])\n                continue\n            elif i == 1:\n                subarrays.append(arr[i]*arr[0])\n                continue\n            else:\n                subarrays.append(arr[i]*arr[i-1]*arr[i-2])\n        return sum(subarrays)\n",
        "num_ids": 151
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum(arr) - max(arr)\n",
        "num_ids": 14
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum([reduce(lambda x,y:x*y, arr[i:i+j]) for i in range(len(arr)) for j in range(1,len(arr) - i + 1)])\n",
        "num_ids": 53
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 1\n",
        "num_ids": 16
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_len = len(arr)\n    print(arr_len)\n    temp_sum = 1\n    for i in range(arr_len):\n        temp_sum = temp_sum*arr[i]\n        for j in range(i+1,arr_len):\n            print(temp_sum)\n            print(arr[i:j+1])\n            temp_sum = temp_sum*arr[i:j+1]\n            print(temp_sum)\n    return temp_sum\n",
        "num_ids": 119
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return int('{0:b}'.format(n)[1:len(bin(n))-1]+'1'+'0'*(len(bin(n))-3), 2)\n",
        "num_ids": 48
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(n&(~0))\n",
        "num_ids": 12
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return int(\"{:b}\".format(n)[1:-1]) | int(\"{:b}\".format(n)[0]) | int(\"{:b}\".format(n)[-1])\n    \ndef set_last_bit(n):  \n    '''\n    Write a python function to toggle the last bit of a number. https://www.geeksforgeeks.org/toggle-the-last-bit-of-a-number/\n    '''\n    return n | (1<<(n.bit_length()-1))\n    \ndef clear_bit(n,b):  \n    '''\n    Write a python function to clear the nth bit of a number. https://www.geeksforgeeks.org/clear-nth-bit-of-number/\n    '''\n    return n & ~(1<<b)\n    \ndef flip_bit(n,b):  \n    '''\n    Write a python function to flip the nth bit of a number. https://www.geeksforgeeks.org/flip-nth-bit-of-number/\n    '''\n    return n ^ (1<<b)\n    \ndef set_bit(n,b):  \n    '''\n    Write a python function to set the nth bit of a number. https://www.geeksforgeeks.org/set-nth-bit-of-number/\n    '''\n    return n | (1<<b)\n    \ndef unset_bit(n,b):  \n    '''\n    Write a python function to unset the nth bit of a number. https://www.geeksforgeeks.org/unset-nth-bit-of-number/\n    '''\n    return n & ~(1<<b)\n    \ndef get_first_bit(n):  \n    '''\n    Write a python function to get the first bit of a number. https://www.geeksforgeeks.org/get-the-first-bit-of-number/\n    '''\n    return n&1\n    \ndef get_last_bit(n):  \n    '''\n    Write a python function to get the last bit of a number. https://www.geeksforgeeks.org/get-the-last-bit-of-number/\n    '''\n    return n&(n-1)\n    \ndef get_middle_bits(n):  \n    '''\n    Write a python function to get the middle bits of a number. https://www.geeksforgeeks.org/get-the-middle-bits-of-number/\n    '''\n    return n&n-1\n    \ndef toggle_bit(n,b):  \n    '''\n    Write a python function to toggle the nth bit of a number. https://www.geeksforgeeks.org/toggle-nth-bit-of-number/\n    '''\n    return n ^ (1<<b)\n    \ndef test():\n    print \"Testing: \"\n    for i in range(32):\n        print set_middle_bits(i)\n        print get_middle_bits(i)\n        print set_last_bit(i)\n        print get_last_bit(i)\n        print set_bit(i,1)\n        print get_first_bit(i)\n        print get_last_bit(i)\n        print clear_bit(i,1)\n        print get_last_bit(i)\n        print flip_bit(i,1)\n        print get_first_bit(i)\n        print get_last_bit(i)\n        print get_last_bit(i)\n        print get_last_bit(i)\n        print set_bit(i,0)\n        print get_first_bit(i)\n        print get_last_bit(i)\n        print get_middle_bits(i)\n        print get_last_bit(i)\n        print toggle_bit(i,1)\n        print get_first_bit(i)\n        print get_last_bit(i)\n        print get_last_bit(i)\n        print get_last_bit(i)\n    return\n",
        "num_ids": 301
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    s=bin(n)\n    return int(s[2:len(s)-1]+'0'+s[0]+s[len(s)-1]+s[3:len(s)-2],2)\n    \n",
        "num_ids": 55
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & 0x55555555) << 1) | ((n & 0x55555555) >> 1)\n",
        "num_ids": 32
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle_bits(n):\n        binary_n = bin(n)\n        string_n = binary_n[2:]\n        left_bit_str = string_n[1:]\n        right_bit_str = string_n[:-1]\n        new_n = int(left_bit_str,2)^int(right_bit_str,2)\n        return new_n\n    return toggle_bits(n)\n",
        "num_ids": 104
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n >> 1)\n",
        "num_ids": 12
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    num = n\n    count = 0\n    while num > 1:\n        if num % 2 == 0:\n            num = num / 2\n        else:\n            num = num - 1\n        count += 1\n    print(count)\n    ",
        "num_ids": 58
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 1\n    for i in range(1,32):\n        mask <<= 1\n    n = (n ^ mask)\n    return n\n",
        "num_ids": 37
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = (n & 0x1)\n    n = n ^ 0x1\n    n = n >> 1\n    n = n | first_bit\n    return n\n",
        "num_ids": 44
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #TODO: ADD YOUR CODE HERE\n    return bisect.bisect_left(a, x)\n",
        "num_ids": 28
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i==0 or a[i-1]!= x:\n        return i\n    else:\n        return i-1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i==len(a):\n        return i\n    elif a[i]!= x:\n        return i\n    else:\n        return i+1\ndef left_insertion_recursive(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i==0:\n        return i\n    elif a[i-1]!= x:\n        return i\n    else:\n        return i-1\ndef right_insertion_recursive(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i==len(a):\n        return i\n    elif a[i]!= x:\n        return i\n    else:\n        return i+1\ndef left_insertion_iterative(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i==0:\n        return i\n    else:\n        return i-1\ndef right_insertion_iterative(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i==len(a):\n        return i\n    else:\n        return i+1\ndef find_range(arr, target):\n    '''\n    https://www.hackerrank.com/challenges/range-module/problem\n    '''\n    start = arr.index(target)\n    end = arr.index(target, start+1)\n    return (start, end)\ndef find_range_iterative(arr, target):\n    '''\n    https://www.hackerrank.com/challenges/range-module/problem\n    '''\n    start = None\n    end = None\n    for i in range(len(arr)):\n        if arr[i]==target:\n            if start==None:\n                start = i\n            else:\n                end = i\n    if start==None:\n        return None\n    else:\n        return (start, end)\ndef merge(arr, start, mid, end):\n    '''\n    https://www.hackerrank.com/challenges/merge-sort/problem\n    '''\n    left = arr[start:mid+1]\n    right = arr[mid+1:end+1]\n    left.append(float('inf'))\n    right.append(float('inf'))\n    i = start\n    j = mid+1\n    for k in range(start, end+1):\n        if left[i]<=right[j]:\n            arr[k] = left[i]\n            i+=1\n        else:\n            arr[k] = right[j]\n            j+=1\ndef merge_sort(arr, start, end):\n    '''\n    https://www.hackerrank.com/challenges/merge-sort/problem\n    '''\n    if start<end:\n        mid = (start+end)//2\n        merge_sort(arr, start, mid)\n        merge_sort(arr, mid+1, end)\n        merge(arr, start, mid, end)\ndef quick_sort(arr, start, end):\n    '''\n    https://www.hackerrank.com/challenges/quick-sort/problem\n    '''\n    if start<end:\n        pivot = arr[end]\n        pivot_index = end\n        i = start\n        for j in range(start, pivot_index):\n            if arr[j]>pivot:\n                arr[j], arr[i] = arr[i], arr[j]\n                i+=1\n        arr[pivot_index], arr[i] = arr[i], arr[pivot_index]\n        quick_sort(arr, start, i-1)\n        quick_sort(arr, i+1, end)\ndef count_occurances(arr, target):\n    '''\n    https://www.hackerrank.com/challenges/counting-valleys/problem\n    '''\n    st = 0\n    i = 0\n    count = 0\n    while i<len(arr):\n        if arr[i]==target:\n            if arr[i-1]==target:\n                st=i\n                i+=1\n            else:\n                count+=1\n                i+=1\n        else:\n            i+=1\n    return count\ndef count_occurances_iterative(arr, target):\n    '''\n    https://www.hackerrank.com/challenges/counting-valleys/problem\n    '''\n    st = 0\n    i = 0\n    count = 0\n    while i<len(arr):\n        if arr[i]==target:\n            if arr[i-1]==target:\n                st=i\n                i+=1\n            else:\n                count+=1\n                i+=1\n        else:\n            i+=1\n    return count\ndef insertion_sort(arr):\n    '''\n    https://www.hackerrank.com/challenges/insertion-sort/problem\n    '''\n    for i in range(1, len(arr)):\n        temp = arr[i]\n        j = i\n        while j>0 and temp < arr[j-1]:\n            arr[j] = arr[j-1]\n            j-=1\n        arr[j] = temp\ndef insertion_sort_iterative(arr):\n    '''\n    https://www.hackerrank.com/challenges/insertion-sort/problem\n    '''\n    for i in range(1, len(arr)):\n        temp = arr[i]\n        j = i\n        while j>0 and temp < arr[j-1]:\n            arr[j] = arr[j-1]\n            j-=1\n        arr[j] = temp\ndef bubblesort(arr):\n    '''\n    https://www.hackerrank.com/challenges/bubble-sort/problem\n    '''\n    for i in range(len(arr)-1, 0, -1):\n        for j in range(i):\n            if arr[j]>arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\ndef bubblesort_iterative(arr):\n    '''\n    https://www.hackerrank.com/challenges/bubble-sort/problem\n    '''\n    for i in range(len(arr)-1, 0, -1):\n        for j in range(i):\n            if arr[j]>arr[j+1]:\n                arr[j], arr[j+1] = arr",
        "num_ids": 56
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0 or a[0] > x:\n        a.insert(0, x)\n        return 0\n    else:\n        i = 0\n        for i in range(len(a)):\n            if a[i] < x:\n                a.insert(i, x)\n                return i\n    a.append(x)\n    return i+1\n",
        "num_ids": 92
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if a[index] == x:\n        return index\n    else:\n        if index == 0:\n            return 0\n        elif a[index-1] < x and a[index] > x:\n            return index\n        else:\n            return index - 1\n",
        "num_ids": 81
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    pos = bisect.bisect_left(a, x)\n    if pos == l or a[pos]!= x:\n        return pos\n    return pos - 1\n",
        "num_ids": 51
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        if a[0] > x:\n            return 0\n    elif a[i-1] < x <= a[i]:\n        return i\n    else:\n        return i - 1\n",
        "num_ids": 70
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    insert = bisect.bisect_left(a, x)\n    return insert\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    insert = bisect.bisect_right(a, x)\n    return insert\ndef left_insert(a, x):\n    insert = bisect.bisect_left(a, x)\n    return insert\ndef right_insert(a, x):\n    insert = bisect.bisect_right(a, x)\n    return insert\n",
        "num_ids": 82
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx\n",
        "num_ids": 24
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    print(i)\n    return a[:i] + [x] + a[i:]\n",
        "num_ids": 41
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)\ndef main():\n    s = raw_input('Enter the string: ')\n    print check_str(s)\nif __name__ == '__main__':\n    main()",
        "num_ids": 55
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match: \n        print \"Match found\"\n    else: \n        print \"Match not found\"\n",
        "num_ids": 41
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    print re.match(regex, string)\ncheck_str('Anuj')\ncheck_str('John')\ncheck_str('ABC')\ncheck_str('Abc')\ncheck_str('a')\ncheck_str('A')\ncheck_str('a!')\ncheck_str('Hello')\n",
        "num_ids": 73
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)\n",
        "num_ids": 14
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string) is not None\n",
        "num_ids": 17
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex,string)\n",
        "num_ids": 14
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    reg_obj = re.search(regex, string)\n    if reg_obj:\n        print \"Yes\"\n    else:\n        print \"No\"\ncheck_str(string)",
        "num_ids": 46
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n",
        "num_ids": 22
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False",
        "num_ids": 27
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * geometric_sum(n-1)\n",
        "num_ids": 34
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return pow(2,n-1)\n",
        "num_ids": 13
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    #\n    # Write your code here.\n    #\n    if n <= 1:\n        return 1\n    else:\n        return (1 / n) * (geometric_sum(n-1))\n    pass\n",
        "num_ids": 53
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1 + (1 / n)\n",
        "num_ids": 12
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # print('n = {0}'.format(n))\n    return n * (1 + geometric_sum(n-1))\n    # print('n = {0}'.format(n))\n",
        "num_ids": 48
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (n - 1)\n",
        "num_ids": 12
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1/n if n == 0 else (1/n) * geometric_sum(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n)*geometric_sum(n-1)\n",
        "num_ids": 34
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    num = 1\n    while index < n:\n        num += 1\n        index += 1\n        if num < 10:\n            continue\n        elif num % 10!= 0:\n            continue\n        elif int(math.ceil(math.log(num, 10))) == n:\n            return index\n    return index\n",
        "num_ids": 83
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 1\n    i = 1\n    while i < n:\n        i += 1\n    return i\n",
        "num_ids": 34
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 0\n    else:\n        #Searches for all possible indices of smallest triangular number with n digits.\n        return int((math.ceil(n*(n+1)/2))/n) \ndef Count_Digits(n):\n    '''\n    Write a python function to count the digits in a given number. https://www.geeksforgeeks.org/python-program-to-count-the-digits-of-a-number/\n    '''\n    if n==0:\n        return 1\n    elif n<0:\n        return -1\n    else:\n        return (int(math.ceil(math.log10(n))+1))\ndef Truncate_Int(n,r):\n    '''\n    Write a python function to truncate an integer by removing the fractional part. https://www.geeksforgeeks.org/python-program-to-truncate-an-integer-by-removing-the-fractional-part/\n    '''\n    return n // 10**r\ndef Reverse_Int(n):\n    '''\n    Write a python function to reverse an integer. https://www.geeksforgeeks.org/python-program-to-reverse-an-integer/\n    '''\n    if n==0:\n        return 0\n    else:\n        return n%10*10**(Count_Digits(n)-1)+(n//10)\ndef Reverse_Decimal(n):\n    '''\n    Write a python function to reverse a decimal number. https://www.geeksforgeeks.org/python-program-to-reverse-a-decimal-number/\n    '''\n    if n==0:\n        return 0\n    else:\n        return int(str(n)[::-1])\ndef Bin_To_Decimal(n):\n    '''\n    Write a python function to convert binary number to decimal number. https://www.geeksforgeeks.org/python-program-convert-binary-number-to-decimal/\n    '''\n    n=int(n)\n    if n==0:\n        return 0\n    else:\n        return int(n%10*(2**(Count_Digits(n)-1)))+Bin_To_Decimal(Truncate_Int(n,Count_Digits(n)-1))\ndef Decimal_To_Bin(n):\n    '''\n    Write a python function to convert decimal number to binary number. https://www.geeksforgeeks.org/python-program-to-convert-decimal-number-to-binary-number/\n    '''\n    n=int(n)\n    if n==0:\n        return 0\n    else:\n        return (n%2)*10**(Count_Digits(n)-1)+Decimal_To_Bin(Truncate_Int(n,Count_Digits(n)-1))\ndef Two_Adder(a,b):\n    '''\n    Write a python function to add two binary numbers. https://www.geeksforgeeks.org/python-program-to-add-two-binary-numbers/\n    '''\n    if len(a)>len(b):\n        b='0'*(len(a)-len(b))+b\n    else:\n        a='0'*(len(b)-len(a))+a\n    c=''\n    for i in range(len(a)-1,-1,-1):\n        if a[i]=='1' or b[i]=='1':\n            c='1'+c\n        else:\n            c='0'+c\n    return c\ndef Addition(n,k):\n    '''\n    Write a python function to add two binary numbers. https://www.geeksforgeeks.org/python-program-to-add-two-binary-numbers/\n    '''\n    n=int(n,2)\n    k=int(k,2)\n    return bin(n+k)[2:]\ndef Carry_Rear(a,b,m):\n    '''\n    Write a python function to carry the remaining bits of two binary numbers and return the carry. https://www.geeksforgeeks.org/python-program-to-carry-the-remaining-bits-of-two-binary-numbers-and-return-the-carry/\n    '''\n    if len(a)>len(b):\n        b='0'*(len(a)-len(b))+b\n    else:\n        a='0'*(len(b)-len(a))+a\n    c=''\n    for i in range(len(a)-1,-1,-1):\n        if a[i]=='1' or b[i]=='1':\n            c='1'+c\n        elif m[i]=='1':\n            c='0'+c\n        else:\n            c='0'+c\n    return c\ndef And(a,b):\n    '''\n    Write a python function to perform the bitwise AND operation on two binary numbers. https://www.geeksforgeeks.org/python-program-to-perform-bitwise-and-operation-on-two-binary-numbers/\n    '''\n    if len(a)>len(b):\n        b='0'*(len(a)-len(b))+b\n    else:\n        a='0'*(len(b)-len(a))+a\n    c=''\n    for i in range(len(a)-1,-1,-1):\n        if a[i]=='1' and b[i]=='1':\n            c='1'+c\n        else:\n            c='0'+c\n    return c\ndef Complement(a):\n    '''\n    Write a python function to perform the complement operation on a binary number. https://www.geeksforgeeks.org/python-program-to-perform-complement-operation-on-a-binary-number/\n    '''\n    if len(a)>=2:\n        return '1'*len(a)-a\n    else:\n        return '1'*len(a)+a\ndef Multiplier(a,b):\n    '''\n    Write a python function to multiply two binary numbers. https://www.geeksforgeeks.org/python-program-to-multiply-two-binary-numbers/\n    '''\n    c=''\n    if len(a)>len(b):\n        b='0'*(len(a)-len(b))+b\n    else:\n        a='0'*(len(b)-len(a))+a\n    for i in range(len(a)):\n        if a[i]=='1' or b[i]=='1':\n            c=c+'1'\n        else:\n            c=c+'0'\n    return c\ndef Divide(a,b):\n    '''\n    Write a python function to divide two binary numbers. https://www.geeksforgeeks.org/python-program-to-divide-two-binary-numbers/\n    '''\n    i=len(a)-1\n    c=0\n    while i>=0:\n        if a[i]=='1':\n            c+=1\n        i-=1\n    i=len(b)-1\n    d=0\n    while i>=0:\n        if b[i]=='1':\n            d+=1\n        i-=1\n    if c>d:\n        return '0'\n    elif c==d:\n        return '1'\n    else:\n        return '0'\ndef Plus(a,b):\n    '''\n    Write a python function to perform the bitwise OR operation on two binary numbers. https://www.geeksforgeeks.org/python-program-to-perform-bitwise-or-operation-on-two-binary-numbers/\n    '''\n    if len(a)>len(b):\n        b='0'*(len(a)-len(b))+b\n    else:\n        a='0'*(len(b)-len(a))+a\n    c=''\n    for i in range(len(a)-1,-1,-1):\n        if a[i]=='1' or b[i]=='1':\n        ",
        "num_ids": 97
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n -= 1\n    result = 1\n    for i in range(1, n + 1): \n        result += i * 10**(i - 1) \n    return result \n",
        "num_ids": 45
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    n = int(n)\n    if n == 1:\n        return 0\n    else:\n        for i in range(int(math.pow(10, n-1))):\n            p = str(int(math.pow(10, n-1))+i)\n            if p[-1] == '0':\n                continue\n            if p[0] == '0':\n                t = int(p) + int(str(int(p)+int(p))+str(int(p)+int(str(int(p))+p)))\n            else:\n                t = int(p) + int(str(int(p)+int(p))+str(int(p)+int(str(int(p))+p)))\n            if int(math.pow(10, n)) < t < int(math.pow(10, n+1)):\n                return i\n        return None\n",
        "num_ids": 217
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 1:\n        return -1\n    triangle_number = 0\n    for i in range(1, n + 1):\n        triangle_number += i\n    return triangle_number\n",
        "num_ids": 49
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return sum(map(math.factorial, (i for i in range(1,n+1))))\n",
        "num_ids": 27
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = int(n * (n + 1) / 2)\n    for i in range(1, count + 1):\n        s = str(i)\n        if len(s) == n:\n            return i\n    return 0\n",
        "num_ids": 57
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    result = \"\"\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"12\"\n    else:\n        for i in range(1,n):\n            j = i\n            result = result + \"0\"\n            while j > 0:\n                temp = j * (j + 1) // 2\n                if temp == i:\n                    result = result + \"1\"\n                    j = j - 1\n                else:\n                    result = result + \"0\"\n                    j = j - 1\n        return result\n",
        "num_ids": 130
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0\n    if n == 2: \n        return 1\n    if n == 3: \n        return 2\n    temp = 0\n    for i in range(1,n-1):\n        temp = temp + i \n        if temp == n-1:\n            return i \n    return 0\n",
        "num_ids": 82
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key = ''\n    val = ''\n    dic = {}\n    for ele in test_tup:\n        key += str(ele)\n        val += str(ele)\n    key = key[:len(key)-1]\n    val = val[:len(val)-1]\n    dic[key] = val\n    return dic\n",
        "num_ids": 84
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key = test_tup[0]\n    value = test_tup[1]\n    return {key:value}\n",
        "num_ids": 32
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0,len(test_tup)):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n",
        "num_ids": 55
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {a:b for a,b in zip(test_tup[::2], test_tup[1::2])}\n",
        "num_ids": 34
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n",
        "num_ids": 22
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {i:j for i,j in enumerate(test_tup)}\n",
        "num_ids": 22
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {'a':test_tup[0], 'b':test_tup[1]}\n",
        "num_ids": 26
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    #number of elements in tuple is odd\n    if len(test_tup)%2!=0:\n        key_index = 0\n        value_index = 1\n        #unzip tuple to create dictionary\n        dictionary = dict(zip(test_tup[key_index::value_index],test_tup[value_index::value_index]))\n        #returns dictionary\n        return dictionary\n    else:\n        #number of elements in tuple is even\n        key_index = 0\n        value_index = 1\n        #unzip tuple to create dictionary\n        dictionary = dict(zip(test_tup[key_index::value_index],test_tup[value_index::value_index]))\n        #returns dictionary\n        return dictionary\n",
        "num_ids": 180
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # test_tup = ('a', 1)\n    # test_tup = ('b', 2)\n    # test_tup = ('c', 3)\n    # test_tup = ('d', 4)\n    # test_tup = ('e', 5)\n    # test_tup = ('f', 6)\n    # test_tup = ('g', 7)\n    # test_tup = ('h', 8)\n    # test_tup = ('i', 9)\n    # test_tup = ('j', 10)\n    # test_tup = ('k', 11)\n    # test_tup = ('l', 12)\n    # test_tup = ('m', 13)\n    # test_tup = ('n', 14)\n    # test_tup = ('o', 15)\n    # test_tup = ('p', 16)\n    # test_tup = ('q', 17)\n    # test_tup = ('r', 18)\n    # test_tup = ('s', 19)\n    # test_tup = ('t', 20)\n    # test_tup = ('u', 21)\n    # test_tup = ('v', 22)\n    # test_tup = ('w', 23)\n    # test_tup = ('x', 24)\n    # test_tup = ('y', 25)\n    # test_tup = ('z', 26)\n    # test_tup = (' ', 27)\n    # test_tup = ('!', 28)\n    # test_tup = ('?', 29)\n    # test_tup = ('A', 30)\n    # test_tup = ('B', 31)\n    # test_tup = ('C', 32)\n    # test_tup = ('D', 33)\n    # test_tup = ('E', 34)\n    # test_tup = ('F', 35)\n    # test_tup = ('G', 36)\n    # test_tup = ('H', 37)\n    # test_tup = ('I', 38)\n    # test_tup = ('J', 39)\n    # test_tup = ('K', 40)\n    # test_tup = ('L', 41)\n    # test_tup = ('M', 42)\n    # test_tup = ('N', 43)\n    # test_tup = ('O', 44)\n    # test_tup = ('P', 45)\n    # test_tup = ('Q', 46)\n    # test_tup = ('R', 47)\n    # test_tup = ('S', 48)\n    # test_tup = ('T', 49)\n    # test_tup = ('U', 50)\n    # test_tup = ('V', 51)\n    # test_tup = ('W', 52)\n    # test_tup = ('X', 53)\n    # test_tup = ('Y', 54)\n    # test_tup = ('Z', 55)\n    # test_tup = ('0', 56)\n    # test_tup = ('1', 57)\n    # test_tup = ('2', 58)\n    # test_tup = ('3', 59)\n    # test_tup = ('4', 60)\n    # test_tup = ('5', 61)\n    # test_tup = ('6', 62)\n    # test_tup = ('7', 63)\n    # test_tup = ('8', 64)\n    # test_tup = ('9', 65)\n    # test_tup = ('-', 66)\n    # test_tup = ('=', 67)\n    # test_tup = ('/', 68)\n    # test_tup = ('(', 69)\n    # test_tup = (')', 70)\n    # test_tup = ('_', 71)\n    # test_tup = ('[', 72)\n    # test_tup = (']', 73)\n    # test_tup = ('{', 74)\n    # test_tup = ('}', 75)\n    # test_tup = ('\\'', 76)\n    # test_tup = ('\\\"', 77)\n    # test_tup = ('@', 78)\n    # test_tup = ('#', 79)\n    # test_tup = ('&', 80)\n    # test_tup = ('*', 81)\n    # test_tup = ('+', 82)\n    # test_tup = ('|', 83)\n    # test_tup = (':', 84)\n    # test_tup = (';', 85)\n    # test_tup = (',', 86)\n    # test_tup = ('<', 87)\n    # test_tup = ('>', 88)\n    # test_tup = ('.', 89)\n    # test_tup = ('`', 90)\n    # test_tup = ('~', 91)\n    # test_tup = ('-', 92)\n    # test_tup = ('|', 93)\n    # test_tup = ('\\\\', 94)\n    # test_tup = ('|', 95)\n    # test_tup = ('|', 96)\n    # test_tup = ('|', 97)\n    # test_tup = ('|', 98)\n    # test_tup = ('|', 99)\n    # test_tup = ('|', 100)\n    # test_tup = ('|', 101)\n    # test_tup = ('|', 102)\n    # test_tup = ('|', 103)\n    # test_tup = ('|', 104)\n    # test_tup = ('|', 105)\n    # test_tup = ('|', 106)\n    # test_tup = ('|', 107)\n    # test_tup = ('|', 108)\n    # test_tup = ('|', 109)\n    # test_tup = ('|', 110)\n    # test_tup = ('|', 111)\n    # test_tup = ('|', 112)\n    # test_tup = ('|', 113)\n    # test_tup = ('|', 114)\n    # test_tup = ('|', 115)\n    # test_tup = ('|', 116)\n    # test_tup = ('|', 117)\n    # test_tup = ('|', 118)\n    # test_tup = ('|', 119)\n    # test_tup = ('|', 120)\n    # test_tup = ('|', 121)\n    # test_tup = ('|', 122)\n    # test_tup = ('|', 123)\n    # test_tup = ('|', 124)\n    # test_tup = ('|', 125)\n    # test_tup = ('|', 126)\n    # test_tup = ('|', 127)\n    # test_tup = ('|', 128)\n    # test_tup = ('|', 129)\n    # test_tup = ('|', 130)\n    # test_tup = ('|', 131)\n    # test_tup = ('|', 132)\n    # test_tup = ('|', 133)\n    # test_tup = ('|', 134)\n    # test_tup = ('|', 135)\n    # test_tup = ('|', 136)\n    # test_tup = ('|', 137)\n    # test_tup = ('|', 138)\n    # test_tup = ('|', 139)\n    # test_tup = ('|', 140)\n    # test_tup = ('|', 141)\n    # test_tup = ('|', 142)\n    # test_tup = ('|', 143)\n    # test_tup = ('|', 144)\n    # test_tup = ('|', 145)\n    # test_tup = ('|', 146)\n    # test_tup = ('|', 147)\n    # test_tup = ('|', 148)\n    # test_tup = ('|', 149)\n    # test_tup = ('|', 150)\n    # test_tup = ('|', 151)\n    # test_tup = ('|', 152)\n    # tes",
        "num_ids": 1981
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    if len(test_tup) % 2 == 0:\n        for i in range(0, len(test_tup), 2):\n            d[test_tup[i]] = test_tup[i + 1]\n    else:\n        for i in range(0, len(test_tup) - 1, 2):\n            d[test_tup[i]] = test_tup[i + 1]\n    return d\n",
        "num_ids": 111
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # return len(set(s)) == 1\n    return not len(set(s))\n",
        "num_ids": 24
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    a = ''.join(s)\n    \n    if (a.count(a[0])) == len(s) :\n        return True\n    else :\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    all_equal = True\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            all_equal = False\n            break\n    return all_equal\n",
        "num_ids": 55
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(x==s[0] for x in s)\n",
        "num_ids": 18
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(s[i] == s[0] for i in range(1, len(s)))\n",
        "num_ids": 27
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    if s.count(s[0]) == len(s) :\n        return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = len(s)\n    if l <= 1 :\n        return True\n    elif s[0] == s[1] :\n        return all_Characters_Same(s[1:])\n    else :\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    cnt = 0\n    for i in s :\n        if i == 'a' :\n            cnt += 1\n    if cnt == len(s) :\n        return True\n    else :\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s))==1 :\n        return True\n    else :\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) > 1:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False\n    else:\n        return True\n",
        "num_ids": 54
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3) * side ** 2) / 4\n",
        "num_ids": 20
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/4*(side**2)\n    \ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return side**2\n",
        "num_ids": 8
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*(math.sqrt(3))/4*side**2)\n",
        "num_ids": 23
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side * (side - 1)) / 6\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return side * side\ndef area_right_triangle(base, height):\n    '''\n    Write a function to caluclate the area of a right triangle.\n    '''\n    return (base * height) / 2\ndef area_para_triangle(base, height):\n    '''\n    Write a function to caluclate the area of a right triangle.\n    '''\n    return (base * height) / 2\ndef area_rectangle(width, height):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return width * height\ndef area_rhombus(diagonal):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    return diagonal * diagonal / 2\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return math.pi * radius * radius\ndef area_trapezoid(base_one, base_two, height):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return (base_one + base_two) * height / 2\ndef area_conic(radius):\n    '''\n    Write a function to caluclate the area of a conic.\n    '''\n    return math.pi * radius * radius\ndef area_ellipse(major, minor):\n    '''\n    Write a function to caluclate the area of an ellipse.\n    '''\n    return (major * minor) / 2\ndef area_ellipsoid(major, minor, height):\n    '''\n    Write a function to caluclate the area of an ellipsoid.\n    '''\n    return math.pi * (major * minor * height) / 3\ndef area_sphere(radius):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    return math.pi * radius * radius\ndef area_hexagon(side):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return side * (3 * (side ** 2) - (side * 3)) / 2\ndef area_triangle(base, height):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return (base * height) / 2\ndef area_triangle_by_angle(base, height, angle):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return (base * height) / 2 * angle\ndef area_triangle_by_angle_and_side(base, height, angle, side):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return (base * height) / 2 * angle\ndef area_triangle_by_angle_and_side_and_diagonal(base, height, angle, side, diagonal):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return (base * height) / 2 * angle * diagonal\ndef area_triangle_by_angle_and_side_and_diagonal_and_height(base, height, angle, side, diagonal, height):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return (base * height) / 2 * angle * diagonal * height\ndef area_hexagon_by_side(side):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return side * (6 * (side ** 2) - (side * 6)) / 2\ndef area_hexagon_by_side_and_diagonal(side, diagonal):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return side * (6 * (side ** 2) - (side * 6)) / 2 * diagonal\ndef area_hexagon_by_side_and_diagonal_and_height(side, diagonal, height):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return side * (6 * (side ** 2) - (side * 6)) / 2 * diagonal * height\ndef area_octagon(side):\n    '''\n    Write a function to caluclate the area of a octagon.\n    '''\n    return side * (8 * (side ** 2) - (side * 8)) / 2\ndef area_octagon_by_side_and_diagonal(side, diagonal):\n    '''\n    Write a function to caluclate the area of a octagon.\n    '''\n    return side * (8 * (side ** 2) - (side * 8)) / 2 * diagonal\ndef area_octagon_by_side_and_diagonal_and_height(side, diagonal, height):\n    '''\n    Write a function to caluclate the area of a octagon.\n    '''\n    return side * (8 * (side ** 2) - (side * 8)) / 2 * diagonal * height\ndef area_octagon_by_side_and_diagonal_and_height_and_diagonal(side, diagonal, height, diagonal):\n    '''\n    Write a function to caluclate the area of a octagon.\n    '''\n    return side * (8 * (side ** 2) - (side * 8)) / 2 * diagonal * height * diagonal\ndef area_octagon_by_side_and_diagonal_and_height_and_diagonal_and_height(side, diagonal, height, diagonal, height):\n    '''\n    Write a function to caluclate the area of a octagon.\n    '''\n    return side * (8 * (side ** 2) - (side * 8)) / 2 * diagonal * height * diagonal * height\ndef area_hexagon_by_side_and_height(side, height):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return side * (6 * (side ** 2) - (side * 6)) * height / 2\ndef area_hexagon_by_side_and_height_and_diagonal(side, height, diagonal):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return side * (6 * (side ** 2) - (side * 6)) * height / 2 * diagonal\ndef area_hexagon_by_side_and_height_and_diagonal_and_diagonal(side, height, diagonal, diagonal):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return side * (6 * (side ** 2) - (side * 6)) * height / 2 * diagonal * diagonal\ndef area_hexagon_by_side_and_height_and_diagonal_and_diagonal_and_height(side, height, diagonal, diagonal, height):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return side * (6 * (side ** 2) - (side * 6)) * height / 2 * diagonal * height * diagonal\ndef area_hexagon_by_side_and_height_and_diagonal_and_diagonal_and_height_and_diagonal(side, height, diagonal, diagonal, height, diagonal):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return side * (6 * (side ** 2) - (side * 6)) * height / 2 * diagonal * height * diagonal * diagonal\ndef area_octagon_by_side_and_diagonal_and_height_and_diagonal(side, diagonal, height, diagonal):\n    '''\n    Write a function to caluclate the area of a octagon.\n    '''\n    return side * (8 * (side ** 2) - (side * 8)) * height / 2 * diagonal * height\ndef area_octagon_by_side_and_diagonal_and_height_and_diagonal_and_height(side, diagonal, height, diagonal, height):\n    '''\n    Write a function to caluclate the area of a octagon.\n    '''\n    return side ",
        "num_ids": 6
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side < 3:\n        raise ValueError('Tetrahedron area is not defined for sides less than 3.')\n    return (3*((side**2)*math.sqrt(3)/4))\n",
        "num_ids": 51
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)*(3**0.5)*side**2\n",
        "num_ids": 22
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3**0.5)/4.0 * side**2\n",
        "num_ids": 19
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3*math.sqrt(3)/4)*side*side\n    return area\n",
        "num_ids": 25
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)*((side**2) / 4))\n    return area\n",
        "num_ids": 26
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    assert isinstance(side, int) or isinstance(side, float)\n    assert side > 0\n    return (1.0/6.0) * pow(side, 3)\n",
        "num_ids": 45
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[m:] + list[:m]\n    return temp\n",
        "num_ids": 20
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    r = n - m\n    return list[r:] + list[:r]\n",
        "num_ids": 30
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    if l == 0:\n        return list\n    else:\n        return list[m:] + list[:m]\n",
        "num_ids": 38
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    res = [None] * m\n    j = 0\n    for i in range(len(list)):\n        res[j] = list[i]\n        j = (j + 1) % m\n    return res\n",
        "num_ids": 54
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0 or m == len(list):\n        return list\n    else:\n        return list[m:] + list[:m]\n",
        "num_ids": 36
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_len = len(list)\n    new_list = []\n    # create new list of size m with same contents\n    for i in range(m):\n        new_list.append(list[i])\n    # move elements to right\n    for i in range(list_len - m):\n        new_list.append(list[i + m])\n    return new_list\n",
        "num_ids": 92
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return True if None in test_tup else False\n",
        "num_ids": 15
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for ele in test_tup:\n        if ele == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum) if all([x % int(y) == 0 for y in str(x)])]\n    \n",
        "num_ids": 40
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum) if not any(map(lambda d:num%int(d)!= 0, str(num))) ]\n    \ndef func_answer(t):\n    return [t.start(0),t.start(1),t.start(2),t.start(3),t.start(4),t.start(5)]\n    \ndef l_n(n):\n    return [i for i in range(1,n) if n % i == 0]\n    \ndef l_num(n):\n    return [i for i in range(1,n) if n % i == 0 and i < 10]\n    \ndef l_num_reverse(n):\n    return [i for i in range(n,0,-1) if n % i == 0 and i < 10]\n    \ndef l_palindrome(n):\n    return n == int(str(n)[::-1])\n    \ndef l_palindrome_reverse(n):\n    return n == int(str(n)[::-1])\n    \ndef l_palindrome_reverse_digits(n):\n    return n == int(str(n)[::-1]) and n < 100\n    \ndef l_palindrome_reverse_digits_reverse(n):\n    return n == int(str(n)[::-1]) and n > 100\n    \ndef l_palindrome_digits(n):\n    return n == int(str(n))\n    \ndef l_palindrome_digits_reverse(n):\n    return n == int(str(n)) and n < 100\n    \ndef l_palindrome_digits_reverse_reverse(n):\n    return n == int(str(n)) and n > 100\n    \ndef l_sqrt(n):\n    return n**(1/2)\n    \ndef l_sqrt_reverse(n):\n    return n**(1/2) == int(str(n)[::-1])\n    \ndef l_sqrt_reverse_reverse(n):\n    return n**(1/2) == int(str(n)[::-1]) and n > 100\n    \ndef l_square(n):\n    return n**2\n    \ndef l_square_reverse(n):\n    return n**2 == int(str(n)[::-1])\n    \ndef l_square_reverse_reverse(n):\n    return n**2 == int(str(n)[::-1]) and n > 100\n    \ndef l_simple_digit_count(n):\n    return len(set(str(n)))\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 1\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 1 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 1\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 1 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) < 4\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) < 4 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) < 4\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) < 4 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) < 4\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) < 4 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) < 3\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) < 3 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) < 2\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) < 2 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) < 1\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) < 1 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 0\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 0 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 0\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 0 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 0\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 0 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 0\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 0 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 0\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 0 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 0\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 0 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 0\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 0 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 0\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 0 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 0\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 0 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 0\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 0 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 0\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 0 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 0\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 0 and n > 100\n    \ndef l_simple_digit_count_reverse(n):\n    return len(set(str(n))) == 0\n    \ndef l_simple_digit_count_reverse_reverse(n):\n    return len(set(str(n))) == 0 and n > 100\n    \ndef l_simpl",
        "num_ids": 1969
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum_list = [i for i in str(startnum)]\n    endnum_list = [i for i in str(endnum)]\n    for num in startnum_list:\n        if int(num) not in endnum_list:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    return list(filter(lambda x: x % int(str(x)[0]) == 0, range(startnum, endnum + 1)))\n",
        "num_ids": 37
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum) if not (i % 2) and not (i % 3) and not (i % 4) and not (i % 5) and not (i % 6) and not (i % 7) and not (i % 8) and not (i % 9) and not (i % 10) and not (i % 11) and not (i % 12) and not (i % 13) and not (i % 14) and not (i % 15) and not (i % 16) and not (i % 17) and not (i % 18) and not (i % 19) and not (i % 20)]\n",
        "num_ids": 151
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum + 1) if x % (x / (len(str(x)) + 1)) == 0]\n",
        "num_ids": 39
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum+1) if num % sum(map(int, str(num))) == 0]\n",
        "num_ids": 36
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    div_lst = []\n    start = int(startnum)\n    end = int(endnum)\n",
        "num_ids": 28
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    lst = [i for i in range(startnum, endnum+1) if not i % int(''.join([str(x) for x in list(str(i))]))]\n    return lst\n",
        "num_ids": 52
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if startnum > endnum:\n        return False\n    else:\n        return sorted([i for i in range(startnum,endnum+1) if i%sum([int(x) for x in str(i)]) == 0])\n",
        "num_ids": 58
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area = 3.14159265358979 * (r**2) * (math.sin((a*3.14159265358979)/180))\n        return area\n",
        "num_ids": 58
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return a*math.pi*r**2\nprint(sector_area(1,360))\nprint(sector_area(1,0))\nprint(sector_area(1,90))\nprint(sector_area(1,-90))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,90))\nprint(sector_area(0,-90))\nprint(sector_area(2,360))\nprint(sector_area(2,0))\nprint(sector_area(2,90))\nprint(sector_area(2,-90))\n",
        "num_ids": 161
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        return (math.pi*r**2)*a/360\n",
        "num_ids": 32
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area=math.pi*r*r*a/180\n        return area\n",
        "num_ids": 36
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*(a/360)\n",
        "num_ids": 33
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #a = angle_to_radians(a)\n    a = math.radians(a)\n    print math.pi*r**2*math.cos(a)\n    #return math.pi*r**2*math.cos(a)\n    ",
        "num_ids": 63
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    return math.pi * r * r * (a/360)\n    \n    \ndef area_of_circle(r):\n    '''\n    Write a function to find area of circle. The function takes the radius as input. Function should return None if the radius is less than 0.\n    '''\n    if r < 0:\n        return None\n    return math.pi * r * r\n",
        "num_ids": 23
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a == 0:\n        return math.pi*r*r\n    elif a > 0 and a < 180:\n        return math.pi*r*r\n    elif a >= 180 and a < 360:\n        return math.pi*r*r\ndef sector_perimeter(r,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a == 0:\n        return 2*math.pi*r\n    elif a > 0 and a < 180:\n        return 2*math.pi*r\n    elif a >= 180 and a < 360:\n        return 2*math.pi*r\n    \n    \n    \ndef total_area_of_circle(r,area):\n    '''\n    Write a function to calculate the area of a circle. The function takes the radius and area as inputs. The function should return None if the area is a non-integer.\n    '''\n    if area%1!= 0:\n        return None\n    else:\n        return math.pi*r*r\ndef total_perimeter_of_circle(r,perimeter):\n    '''\n    Write a function to calculate the perimeter of a circle. The function takes the radius and perimeter as inputs. The function should return None if the perimeter is a non-integer.\n    '''\n    if perimeter%1!= 0:\n        return None\n    else:\n        return 2*math.pi*r\ndef circular_packing(r,area):\n    '''\n    Write a function that calculates the circular packing of a circle. The function takes the radius and area as inputs. Function should return None if the area is a non-integer.\n    '''\n    if area%1!= 0:\n        return None\n    else:\n        return area/math.pi*r\ndef total_packing_coefficient(r,packing):\n    '''\n    Write a function to calculate the packing coefficient of a circle. The function takes the radius and packing as inputs. Function should return None if the packing is a non-integer.\n    '''\n    if packing%1!= 0:\n        return None\n    else:\n        return packing/math.pi*r\ndef circular_packing_coefficient(r,packing):\n    '''\n    Write a function to calculate the circular packing coefficient of a circle. The function takes the radius and packing as inputs. Function should return None if the packing is a non-integer.\n    '''\n    if packing%1!= 0:\n        return None\n    else:\n        return packing/math.pi*r\ndef total_packing_efficiency(r,packing):\n    '''\n    Write a function to calculate the circular packing efficiency of a circle. The function takes the radius and packing as inputs. Function should return None if the packing is a non-integer.\n    '''\n    if packing%1!= 0:\n        return None\n    else:\n        return packing/math.pi*r\ndef circular_packing_efficiency(r,packing):\n    '''\n    Write a function to calculate the circular packing efficiency of a circle. The function takes the radius and packing as inputs. Function should return None if the packing is a non-integer.\n    '''\n    if packing%1!= 0:\n        return None\n    else:\n        return packing/math.pi*r\ndef total_packing_efficiency_coefficient(r,packing):\n    '''\n    Write a function to calculate the circular packing efficiency coefficient of a circle. The function takes the radius and packing as inputs. Function should return None if the packing is a non-integer.\n    '''\n    if packing%1!= 0:\n        return None\n    else:\n        return packing/math.pi*r\ndef circular_packing_efficiency_coefficient(r,packing):\n    '''\n    Write a function to calculate the circular packing efficiency coefficient of a circle. The function takes the radius and packing as inputs. Function should return None if the packing is a non-integer.\n    '''\n    if packing%1!= 0:\n        return None\n    else:\n        return packing/math.pi*r\ndef area_of_disk(r,a):\n    '''\n    Write a function to find area of a disk. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a == 0:\n        return math.pi*r*r\n    elif a > 0 and a < 180:\n        return math.pi*r*r\n    elif a >= 180 and a < 360:\n        return math.pi*r*r\ndef perimeter_of_disk(r,a):\n    '''\n    Write a function to find perimeter of a disk. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a == 0:\n        return 2*math.pi*r\n    elif a > 0 and a < 180:\n        return 2*math.pi*r\n    elif a >= 180 and a < 360:\n        return 2*math.pi*r\n    \n    \n    \ndef total_area_of_disk(r,area):\n    '''\n    Write a function to calculate the area of a disk. The function takes the radius and area as inputs. Function should return None if the area is a non-integer.\n    '''\n    if area%1!= 0:\n        return None\n    else:\n        return math.pi*r*r\ndef total_perimeter_of_disk(r,perimeter):\n    '''\n    Write a function to calculate the perimeter of a disk. The function takes the radius and perimeter as inputs. Function should return None if the perimeter is a non-integer.\n    '''\n    if perimeter%1!= 0:\n        return None\n    else:\n        return 2*math.pi*r\ndef circular_packing(r,area):\n    '''\n    Write a function to calculate the circular packing of a disk. The function takes the radius and area as inputs. Function should return None if the area is a non-integer.\n    '''\n    if area%1!= 0:\n        return None\n    else:\n        return area/math.pi*r\ndef total_packing_coefficient(r,packing):\n    '''\n    Write a function to calculate the packing coefficient of a disk. The function takes the radius and packing as inputs. Function should return None if the packing is a non-integer.\n    '''\n    if packing%1!= 0:\n        return None\n    else:\n        return packing/math.pi*r\ndef circular_packing_coefficient(r,packing):\n    '''\n    Write a function to calculate the circular packing coefficient of a disk. The function takes the radius and packing as inputs. Function should return None if the packing is a non-integer.\n    '''\n    if packing%1!= 0:\n        return None\n    else:\n        return packing/math.pi*r\ndef total_packing_efficiency(r,packing):\n    '''\n    Write a function to calculate the circular packing efficiency of a disk. The function takes the radius and packing as inputs. Function should return None if the packing is a non-integer.\n    '''\n    if packing%1!= 0:\n        return None\n    else:\n        return packing/math.pi*r\ndef circular_packing_efficiency(r,packing):\n    '''\n    Write a function to calculate the circular packing efficiency of a disk. The function takes the radius and packing as inputs. Function should return None if the packing is a non-integer.\n    '''\n    if packing%1!= 0:\n        return None\n    else:\n        return packing/math.pi*r\ndef total_packing_efficiency_coefficient(r,packing):\n    '''\n    Write a function to calculate the circular packing efficiency coefficient of a disk. The function takes the radius and packing as inputs. Function should return None if the packing is a non-integer.\n    '''\n    if packing%1!= 0:\n        return None\n    else:\n        return packing/math.pi*r\ndef circular_packing_efficiency_coefficient(r,packing):\n    '''\n    Write a function to calculate the circular packing efficiency coefficient of a disk. The function takes the radius and packing as inputs. Function should return None if the packing is a non-integer.\n    '''\n    if packin",
        "num_ids": 6
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*math.sin(math.radians(a))\n",
        "num_ids": 36
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*(a/360)\n",
        "num_ids": 33
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    '''\n    To solve this problem, we can try to think in terms of the DP problem. For this, we need to add an additional dimension, i.e., array Z (the third string), in order to make it a 3D array. The additional dimension will be used to track the sequences to be found, which is the length of the longest common subsequence.\n    We will have to fill the array as we proceed. The key is that we need to find the longest common subsequence for three strings, not three distinct subsequences. Thus, the DP array will have three dimensions.\n    '''\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return 0\n    \n    lcs_matrix = [[[0 for i in range(len(X)+1)] for j in range(len(Y)+1)] for k in range(len(Z)+1)]\n    \n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs_matrix[i][j][k] = 1 + lcs_matrix[i-1][j-1][k-1]\n                else:\n                    lcs_matrix[i][j][k] = max(lcs_matrix[i-1][j][k], lcs_matrix[i][j-1][k], lcs_matrix[i][j][k-1])\n    \n    return lcs_matrix[i][j][k]\n",
        "num_ids": 261
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n",
        "num_ids": 26
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n",
        "num_ids": 29
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of strings X and Y \n    m = len(X)\n    n = len(Y)\n     \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in xrange(m+1)] \n \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n \n    # L[m][n] contains the length of LCS for the given input \n    return L[m][n] \n",
        "num_ids": 276
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[None]*(o+1) for i in xrange(n+1)] for j in xrange(m+1)] \n    for i in xrange(m+1): \n        for j in xrange(n+1): \n            for k in xrange(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    return L[m][n][o]\n",
        "num_ids": 243
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the string\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n",
        "num_ids": 38
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return lcs(X, Y, Z)\n",
        "num_ids": 14
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    L = [[[0 for k in xrange(n+1)] for j in xrange(m+1)] for i in xrange(3)] \n    for i in xrange(m+1): \n        for j in xrange(n+1): \n            if i == 0 or j == 0: \n                L[0][i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[1][i][j] = L[0][i-1][j-1] + 1\n            else: \n                L[1][i][j] = max(L[0][i-1][j], L[0][i][j-1]) \n    \n    max_length = L[1][i][j] \n    print 'The length of LCS of',X,' and ',Y,' is ', max_length \n",
        "num_ids": 227
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    L = [[[0 for k in range(n+1)] \n            for i in range(m+1)] \n            for j in range(n+1)] \n",
        "num_ids": 61
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M = len(X)\n    N = len(Y)\n    O = len(Z)\n",
        "num_ids": 26
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    regex = re.compile('[A-Z][a-z]*')\n    res = regex.findall(str1)\n    for i in res:\n        print(i, end=' ')\n        \ncapital_words_spaces('Lets say Hi How are you')\n",
        "num_ids": 70
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('[A-Z][a-z]*[^ ]','\\g<0> ', str1)\n",
        "num_ids": 32
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s = re.sub(r'\\b([A-Z][a-z]*\\s*[A-Z][a-z]*[A-Z][a-z]*)',r'\\1',str1)\n    return s\ndef xyz_there(str1):\n    '''\n    Given a string, return True if there is at least one substring that \n    contains the characters \"xyz\".\n    '''\n    return re.search('xyz',str1) is not None\ndef fizz_buzz(str1):\n    '''\n    Write a function that takes an integer and returns the \n    appropriate string as described by the table below:\n    '''\n    d = {\n        3:'Fizz',\n        5:'Buzz',\n        7:'Fizz',\n        11:'Fizz',\n        13:'Fizz',\n        17:'Fizz'\n    }\n    return d.get(str1)\ndef palindrome(str1):\n    '''\n    Write a function that checks whether a string is a palindrome. \n    A palindrome is a string that reads the same forwards and backwards.\n    '''\n    return str1 == str1[::-1]\ndef binary_to_decimal(str1):\n    '''\n    Write a function that takes a binary string and returns the decimal equivalent.\n    '''\n    return int(str1,2)\ndef is_palindrome(str1):\n    '''\n    Write a function that takes a string and returns True if it is a palindrome. \n    Do not use Python\u2019s built-in reverse function or a method.\n    '''\n    return str1 == str1[::-1]\ndef is_leap_year(str1):\n    '''\n    Given a year, return True if year is a leap year and False otherwise. \n    A year is a leap year if it is evenly divisible by 4 but not divisible by 100, \n    unless it is also evenly divisible by 400.\n    '''\n    return re.search('^[1-2][0-9][0-9][0-9]$',str1) is not None\ndef three_vowels(str1):\n    '''\n    Write a function that returns True if the given string contains a \n    three consecutive vowels in a row, and False otherwise.\n    '''\n    return re.search(r'[aeiou]{3}',str1) is not None\ndef is_pangram(str1):\n    '''\n    Write a function that checks whether a string is pangram or not. \n    A pangram (Greek:\u03c0\u03b1\u03bd \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1, pan gramma, \"every letter\") is a sentence \n    using every letter of the alphabet at least once. For example, the string \n    \"The quick brown fox jumps over the lazy dog\" is a pangram, but the string \n    \"The quick grey wolf jumps over the tired tiger\" is not a pangram.\n    '''\n    return len(set(str1.lower())) == 26\ndef is_valid_pangram(str1):\n    '''\n    Write a function that checks whether a string is a valid pangram or not. \n    A pangram (Greek:\u03c0\u03b1\u03bd \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1, pan gramma, \"every letter\") is a sentence \n    using every letter of the alphabet at least once. For example, the string \n    \"The quick brown fox jumps over the lazy dog\" is a pangram, but the string \n    \"The quick grey wolf jumps over the tired tiger\" is not a pangram.\n    '''\n    return is_pangram(str1) and set(str1.lower()) <= set(string.ascii_lowercase)\ndef is_valid_palindrome(str1):\n    '''\n    Write a function that checks whether a string is a valid palindrome or not. \n    A palindrome is a string that reads the same forwards as backwards. \n    For example, \"racecar\" is a valid palindrome, but \"abac\" is not. \n    '''\n    return str1 == str1[::-1]\ndef is_anagram(str1,str2):\n    '''\n    Write a function that checks whether two strings are anagrams or not. \n    Two strings are anagrams if they contain the same letters, but the order \n    of the letters can be different. For example, \"act\" and \"cat\" are anagrams, \n    but \"heart\" and \"earth\" are not.\n    '''\n    return sorted(str1.lower()) == sorted(str2.lower())\ndef is_anagram_sorted(str1,str2):\n    '''\n    Write a function that checks whether two strings are anagrams or not. \n    Two strings are anagrams if they contain the same letters, but the order \n    of the letters can be different. For example, \"act\" and \"cat\" are anagrams, \n    but \"heart\" and \"earth\" are not.\n    '''\n    return sorted(str1.lower()) == sorted(str2.lower())\ndef is_rotation(str1,str2):\n    '''\n    Write a function that checks whether a string is a rotation of another string \n    by only one letter, like rotation. For example, \"waterbottle\" is a rotation \n    of \"erbottlewat\" because the first letter of \"erbottlewat\" is the same as the \n    first letter of \"waterbottle\".\n    '''\n    return str1[0] == str2[0] and str1[1:] == str2[1:]\ndef unique_in_order(str1):\n    '''\n    Write a function that takes a string and returns a string in which the \n    same characters are in the same positions, like the original string. \n    However, if a character duplicates that of another character in the \n    original string, count the number of times the same character occurs in \n    the original string. \n    For example, \"aaaabbc\" yields \"a3b2c1\".\n    '''\n    i = 0\n    d = {}\n    result = []\n    for c in str1:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    for k,v in d.iteritems():\n        result.append(str(v) + k)\n    return ''.join(result)\ndef is_permutation(str1,str2):\n    '''\n    Write a function that checks whether two strings are permutations of \n    each other.\n    '''\n    return sorted(str1.lower()) == sorted(str2.lower())\ndef is_permutation_dict(str1,str2):\n    '''\n    Write a function that checks whether two strings are permutations of \n    each other.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for c in str1.lower():\n        d[c] += 1\n    for c in str2.lower():\n        if d[c] == 0:\n            return False\n        else:\n            d[c] -= 1\n    return True\ndef is_palindrome_permutation(str1):\n    '''\n    Write a function that checks whether a string is a palindrome \n    permutation of another string.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for c in str1.lower():\n        d[c] += 1\n    return sorted(d.values()) == list(range(1,len(d)+1))\ndef is_palindrome_permutation_dict(str1):\n    '''\n    Write a function that checks whether a string is a palindrome \n    permutation of another string.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for c in str1.lower():\n        d[c] += 1\n    return sorted(d.values()) == list(range(1,len(d)+1))\ndef is_rotation_permutation(str1,str2):\n    '''\n    Write a function that checks whether a string is a rotation \n    permutation of another string.\n    '''\n    return sorted(str1.lower()) == sorted(str2.lower())\ndef is_rotation_permutation_dict(str1,str2):\n",
        "num_ids": 38
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    capitals=''\n    for word in str1:\n        if word.isalpha() and word.isupper():\n            capitals = capitals +'' + word\n    return capitals\ndef merge_string_in_list(lst):\n    '''\n    Write a function to merge a list of strings to a single string.\n    '''\n    str1=''\n    for string in lst:\n        str1 = str1 + string\n    return str1\ndef convert_to_int_list(lst):\n    '''\n    Write a function to convert a list of strings to a list of integers.\n    '''\n    return [int(item) for item in lst]\ndef even_odd_list(lst):\n    '''\n    Write a function to find the even-odd pairs in a given list.\n    '''\n    even_odd_pairs=[]\n    for i in range(len(lst)):\n        if lst[i]%2==0:\n            even_odd_pairs.append([lst[i],1])\n        else:\n            even_odd_pairs.append([lst[i],0])\n    return even_odd_pairs\ndef count_substring(string, sub_string):\n    '''\n    Write a function to count the number of times a substring appears in a given string.\n    '''\n    count = 0\n    for i in range(len(string)-len(sub_string)+1):\n        if string[i:i+len(sub_string)] == sub_string:\n            count = count + 1\n    return count\ndef find_digits(string):\n    '''\n    Write a function to find the digits in a given string.\n    '''\n    digit=''\n    for char in string:\n        if char.isdigit():\n            digit = digit + char\n    return digit\ndef find_digits_in_list(lst):\n    '''\n    Write a function to find the digits in a given list.\n    '''\n    digit=''\n    for num in lst:\n        if num.isdigit():\n            digit = digit + str(num)\n    return digit\ndef find_digits_in_string(string):\n    '''\n    Write a function to find the digits in a given string.\n    '''\n    digit=''\n    for char in string:\n        if char.isdigit():\n            digit = digit + char\n    return digit\ndef find_digits_in_list(lst):\n    '''\n    Write a function to find the digits in a given list.\n    '''\n    digit=''\n    for num in lst:\n        if num.isdigit():\n            digit = digit + str(num)\n    return digit\ndef find_digits_in_string(string):\n    '''\n    Write a function to find the digits in a given string.\n    '''\n    digit=''\n    for char in string:\n        if char.isdigit():\n            digit = digit + char\n    return digit\ndef find_substring_in_list(lst,sub_string):\n    '''\n    Write a function to find the substring in a given list.\n    '''\n    count = 0\n    for string in lst:\n        if sub_string in string:\n            count = count + 1\n    return count\ndef is_palindrome(string):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    return string == string[::-1]\ndef find_palindrome(string):\n    '''\n    Write a function to find the first palindrome in a given string.\n    '''\n    index = 0\n    while string[index]!= string[-index-1]:\n        index = index + 1\n    return string[index:-index]\ndef count_alphabet(string):\n    '''\n    Write a function to count the alphabet in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isalpha():\n            count = count + 1\n    return count\ndef is_numeric(string):\n    '''\n    Write a function to check whether a given string is numeric or not.\n    '''\n    return string.isdigit()\ndef is_alphabetical(string):\n    '''\n    Write a function to check whether a given string is alphabetical or not.\n    '''\n    return string.isalpha()\ndef is_capital(string):\n    '''\n    Write a function to check whether a given string is a capital or not.\n    '''\n    return string.isupper()\ndef is_alphanumeric(string):\n    '''\n    Write a function to check whether a given string is alphanumeric or not.\n    '''\n    return string.isalnum()\ndef is_punctuation(string):\n    '''\n    Write a function to check whether a given string is punctuation or not.\n    '''\n    return string.isalpha()\ndef is_space(string):\n    '''\n    Write a function to check whether a given string is space or not.\n    '''\n    return string.isspace()\ndef is_lower(string):\n    '''\n    Write a function to check whether a given string is lowercase or not.\n    '''\n    return string.islower()\ndef is_upper(string):\n    '''\n    Write a function to check whether a given string is uppercase or not.\n    '''\n    return string.isupper()\ndef capitalize_words(string):\n    '''\n    Write a function to capitalize the first letter of the words in a given string.\n    '''\n    capitals=''\n    for word in string.split(' '):\n        capitals = capitals + word[0].upper() + word[1:] +''\n    return capitals\ndef remove_extra_space(string):\n    '''\n    Write a function to remove extra spaces in a given string.\n    '''\n    new_string = re.sub(' +','',string)\n    return new_string\ndef substring_length_k_times(string,k):\n    '''\n    Write a function to print a substring that is repeated k times in a given string.\n    '''\n    #code here\n    len1=len(string)\n    i=0\n    j=0\n    count=0\n    while j<len1:\n        if count>=k:\n            j=j+1\n            count=0\n        else:\n            if string[i]==string[j]:\n                count=count+1\n                i=i+1\n                j=j+1\n            else:\n                i=i+1\n                j=j+1\n    return string[i-1]\ndef compress_string(string):\n    '''\n    Write a function to compress a string.\n    '''\n    compressed_string = \"\"\n    count=1\n    i=1\n    while i<len(string):\n        if string[i]==string[i-1]:\n            count=count+1\n        else:\n            compressed_string = compressed_string + string[i-1] + str(count)\n            count=1\n        i=i+1\n    compressed_string = compressed_string + string[i-1] + str(count)\n    return compressed_string\ndef remove_last_chars(string, n):\n    '''\n    Write a function to remove the last n characters in a given string.\n    '''\n    return string[:-n]\ndef longest_prefix_suffix(string, n):\n    '''\n    Write a function to find the longest prefix and suffix of a given string.\n    '''\n    prefix_str = \"\"\n    suffix_str = \"\"\n    for i in range(n):\n        prefix_str = prefix_str + string[i]\n        suffix_str = suffix_str + string[-i-1]\n    return prefix_str + suffix_str\ndef sorted_dict(dictionary):\n    '''\n    Write a function to return a sorted list of dictionary values using the Python sort() method.\n    '''\n    return sorted(dictionary.values())\ndef invert_dict(dictionary):\n    '''\n    Write a function to invert a given dictionary.\n    '''\n    inverted_dict = {}\n    for key in dictionary:\n        if dictionary[key] in inverted_dict:\n            inverted_dict[dictionary[key]]",
        "num_ids": 40
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    print''.join(w for w in str1.split() if w[0].isupper())\n    \ndef phone_number_extractor(str1):\n    '''\n    Write a program to extract phone number from a string\n    '''\n    res=re.findall('\\d{3}-\\d{3}-\\d{4}',str1)\n    if res:\n        print res[0]\n    else:\n        print -1\ndef phone_number_extractor2(str1):\n    '''\n    Write a program to extract phone number from a string\n    '''\n    res=re.findall('(\\d{3})-(\\d{3})-(\\d{4})',str1)\n    if res:\n        print res[0]\n    else:\n        print -1\ndef email_extractor(str1):\n    '''\n    Write a program to extract email id from a string\n    '''\n    res=re.findall('\\w+@\\w+\\.\\w+',str1)\n    if res:\n        print res[0]\n    else:\n        print -1\ndef email_extractor2(str1):\n    '''\n    Write a program to extract email id from a string\n    '''\n    res=re.findall('[\\w\\.]{1,}@[\\w\\.]{1,}\\.[\\w]{1,}',str1)\n    if res:\n        print res[0]\n    else:\n        print -1\ndef simple_calculator(str1):\n    '''\n    Write a program to solve a basic calculator.\n    '''\n    s=str1.split()\n    res=0\n    for i in range(len(s)):\n        if s[i]=='+':\n            res+=int(s[i-1])+int(s[i-2])\n        elif s[i]=='-':\n            res-=int(s[i-1])-int(s[i-2])\n        elif s[i]=='*':\n            res*=int(s[i-1])*int(s[i-2])\n        elif s[i]=='/':\n            res/=int(s[i-1])/int(s[i-2])\n    print res\ndef palindrome_checker(str1):\n    '''\n    Write a program to check if the string is a palindrome\n    '''\n    if str1==str1[::-1]:\n        print 1\n    else:\n        print 0\ndef palindrome_checker2(str1):\n    '''\n    Write a program to check if the string is a palindrome\n    '''\n    str1=str1.lower()\n    l=len(str1)\n    for i in range(l/2):\n        if str1[i]!=str1[l-1-i]:\n            print 0\n            return\n    print 1\ndef palindrome_checker3(str1):\n    '''\n    Write a program to check if the string is a palindrome\n    '''\n    str1=str1.lower()\n    if str1==str1[::-1]:\n        print 1\n    else:\n        print 0\ndef palindrome_checker4(str1):\n    '''\n    Write a program to check if the string is a palindrome\n    '''\n    str1=str1.lower()\n    if str1==str1[::-1]:\n        print 1\n    else:\n        str1=str1.replace(' ','')\n        print str1==str1[::-1]\ndef arithmetic_arranger(str1,str2,str3,str4):\n    '''\n    Write a program to display an arithmetic progression\n    '''\n    if str4:\n        if len(str1)>5 or len(str2)>5:\n            print \"Error! Too long.\"\n            return\n        res=eval(str1+str2+str3)\n        print''.join(str1.rjust(4),str2.rjust(4),str3.rjust(4),str4.rjust(4),str(res).rjust(4))\n    else:\n        if len(str1)>16 or len(str2)>16:\n            print \"Error! Too long.\"\n            return\n        res=eval(str1+str2)\n        print''.join(str1.rjust(4),str2.rjust(4),str3.rjust(4),str4.rjust(4),str(res).rjust(4))\ndef arithmetic_arranger2(str1,str2,str3,str4):\n    '''\n    Write a program to display an arithmetic progression\n    '''\n    if str4:\n        if len(str1)>5 or len(str2)>5:\n            print \"Error! Too long.\"\n            return\n        res=eval(str1+str2+str3)\n        print''.join(str1.rjust(4),str2.rjust(4),str3.rjust(4),str4.rjust(4),str(res).rjust(4))\n    else:\n        if len(str1)>16 or len(str2)>16:\n            print \"Error! Too long.\"\n            return\n        res=eval(str1+str2)\n        print''.join(str1.rjust(4),str2.rjust(4),str3.rjust(4),str4.rjust(4),str(res).rjust(4))\ndef arithmetic_arranger3(str1,str2,str3,str4):\n    '''\n    Write a program to display an arithmetic progression\n    '''\n    if str4:\n        if len(str1)>5 or len(str2)>5:\n            print \"Error! Too long.\"\n            return\n        res=eval(str1+str2+str3)\n        print''.join(str1.rjust(4),str2.rjust(4),str3.rjust(4),str4.rjust(4),str(res).rjust(4))\n    else:\n        if len(str1)>16 or len(str2)>16:\n            print \"Error! Too long.\"\n            return\n        res=eval(str1+str2)\n        print''.join(str1.rjust(4),str2.rjust(4),str3.rjust(4),str4.rjust(4),str(res).rjust(4))\ndef arithmetic_arranger4(str1,str2,str3,str4):\n    '''\n    Write a program to display an arithmetic progression\n    '''\n    if str4:\n        if len(str1)>5 or len(str2)>5:\n            print \"Error! Too long.\"\n            return\n        res=eval(str1+str2+str3)\n        print''.join(str1.rjust(4),str2.rjust(4),str3.rjust(4),str4.rjust(4),str(res).rjust(4))\n    else:\n        if len(str1)>16 or len(str2)>16:\n            print \"Error! Too long.\"\n            return\n        res=eval(str1+str2)\n        print''.join(str1.rjust(4),str2.rjust(4),str3.rjust(4),str4.rjust(4),str(res).rjust(4))\ndef arithmetic_arranger5(str1,str2,str3,str4):\n    '''\n    Write a program to display an arithmetic progression\n    '''\n    if str4:\n        if len(str1)>5 or len(str2)>5:\n            print \"Error! Too long.\"\n            return\n        res=eval(str1+str2+str3)\n        print''.join(str1.rjust(4),str2.rjust(4),str3.rjust(4),str4.rjust(4),str(res).rjust(4))\n    else:\n        if len(str1)>16 or len(str2)>16:\n            print \"Error! Too long.\"\n            return\n        res=eval(str1+str2)\n        print''.join(str1.rjust(4),str2.",
        "num_ids": 164
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # string to return\n    res = ''\n    # split the string based on spaces\n    str1 = str1.split(' ')\n    # iterate over the string\n    for i in str1:\n        # if first letter is capital, add space\n        if i[0].isupper():\n            res += i +''\n        # else add the word as is\n        else:\n            res += i\n    # return the string\n    return res\n",
        "num_ids": 106
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    match = re.findall('[A-Z][a-z]+',str1)\n    for word in match:\n        print ''.join([' '+i if not i.isupper() and i!=''else i for i in word])\n",
        "num_ids": 61
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    capital_word = re.findall(r'[A-Z][A-Za-z]+', str1)\n    for i in capital_word:\n        print i.ljust(len(i) + 1),\n",
        "num_ids": 55
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    count = 0\n    for x in str1:\n        if x.isupper():\n            count += 1\n            if count > 1:\n                return''.join(str1.split(' ')[1:]) +''\n    return str1\n",
        "num_ids": 58
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # method 1\n    #pattern = re.compile('(?<![A-Z])([A-Z][a-z]+)')\n    #return pattern.sub(r' \\1',str1)\n",
        "num_ids": 54
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(i) for i in nums_str]\n    sorted_nums = sorted(nums)\n    return [str(i) for i in sorted_nums]\n",
        "num_ids": 49
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for nums_str in nums_str:\n        nums = [int(num) for num in nums_str.split()]\n        nums.sort()\n        print(nums)\n",
        "num_ids": 50
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def sort(nums_str):\n        nums = []\n        for i in nums_str:\n            nums.append(int(i))\n        return sorted(nums)\n",
        "num_ids": 47
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for item in nums_str:\n        nums.append(int(item))\n    nums.sort()\n    return nums\n",
        "num_ids": 41
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    sorted_nums = sorted(nums)\n    sorted_nums_str = []\n    for num in sorted_nums:\n        sorted_nums_str.append(str(num))\n    return sorted_nums_str\n",
        "num_ids": 92
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return nums\n",
        "num_ids": 45
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        for j in range(i, len(nums_str)):\n            if nums_str[i] > nums_str[j]:\n                nums_str[i], nums_str[j] = nums_str[j], nums_str[i]\n    return nums_str\n",
        "num_ids": 90
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        for j in range(i+1, len(nums_str)):\n            if int(nums_str[i]) > int(nums_str[j]):\n                nums_str[i], nums_str[j] = nums_str[j], nums_str[i]\n    return nums_str\n",
        "num_ids": 97
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        nums.append(int(i))\n    nums = sorted(nums)\n    return [str(i) for i in nums]\n",
        "num_ids": 53
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Copy the given list.\n    temp_list = test_list[:]\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    return test_list.append(test_tup)\n",
        "num_ids": 18
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if len(test_list) == 0:\n        test_list.append(test_tup)\n    else:\n        for x in range(len(test_list)):\n            if len(test_tup) < len(test_list[x]):\n                test_list.insert(x, test_tup)\n                break\n        if len(test_list) == len(test_tup):\n            test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 119
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    # If the element at left and right is less than the parent, then the given array is not a min-heap\n    if left < arr_len and arr[i] > arr[left]:\n        return False\n    if right < arr_len and arr[i] > arr[right]:\n        return False\n    return True\n",
        "num_ids": 95
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] > arr[(i+1)//2 - 1]:\n        return False\n    if (i+1)*2-1 < len(arr):\n        if arr[(i+1)*2-1] > arr[i]:\n            return False\n    if (i+1)*2 < len(arr):\n        if arr[(i+1)*2] > arr[i]:\n            return False\n    return True\n",
        "num_ids": 104
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    #arr = arr[:]\n    if len(arr) == 0:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i >= len(arr)):\n        return True\n",
        "num_ids": 17
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    n = len(arr)\n    \n    if i >= (n/2):\n        return True\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < n and arr[left] < arr[i]:\n        return False\n    \n    if right < n and arr[right] < arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n",
        "num_ids": 126
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) - 1:\n        return\n    if i * 2 + 1 > len(arr) - 1:\n        return check_min_heap_helper(arr, i * 2)\n",
        "num_ids": 52
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] < arr[(i-1)/2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1)\n",
        "num_ids": 57
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if arr[i] < arr[int(math.floor(i/2))]:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If the parent of the node is less than the current node, then its not a min heap\n    if arr[i] < arr[(i - 1) // 2]:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 0 and i <= len(arr) - 1:\n        if arr[i] > arr[2*i+1] and arr[i] > arr[2*i+2]:\n            return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n == 0 or n == 1): \n        return n\n",
        "num_ids": 19
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (jacobsthal_num(n-2) + jacobsthal_num(n-1))\n",
        "num_ids": 57
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # number of terms to be found\n    K = n\n",
        "num_ids": 16
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0: return 0\n    if n==1: return 1\n    if n==2: return 1\n    if n==3: return 2\n    if n==4: return 4\n    if n==5: return 4\n    if n%2==0:\n        return (2*jacobsthal_num(n-1) + 4*jacobsthal_num(n-2))%10\n    else:\n        return (jacobsthal_num(n-1) + 3*jacobsthal_num(n-2))%10\n",
        "num_ids": 133
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 4\n    if n == 4: return 7\n    if n == 5: return 11\n    if n == 6: return 18\n    if n == 7: return 29\n    if n == 8: return 47\n    if n == 9: return 76\n    if n == 10: return 123\n    if n == 11: return 193\n    if n == 12: return 326\n    if n == 13: return 687\n    if n == 14: return 1266\n    if n == 15: return 2209\n    if n == 16: return 3726\n    if n == 17: return 7407\n    if n == 18: return 9732\n    if n == 19: return 13450\n    if n == 20: return 4704\n    if n == 21: return 7434\n    if n == 22: return 9761\n    if n == 23: return 16792\n    if n == 24: return 2785\n    if n == 25: return 4979\n    if n == 26: return 8097\n    if n == 27: return 9760\n    if n == 28: return 15731\n    if n == 29: return 28302\n    if n == 30: return 52266\n    if n == 31: return 71432\n    if n == 32: return 77897\n    if n == 33: return 109069\n    if n == 34: return 150645\n    if n == 35: return 211257\n    if n == 36: return 274828\n    if n == 37: return 420791\n    if n == 38: return 699095\n    if n == 39: return 126493\n    if n == 40: return 173498\n    if n == 41: return 294121\n    if n == 42: return 478005\n    if n == 43: return 718790\n    if n == 44: return 895878\n    if n == 45: return 145428\n    if n == 46: return 2215089\n    if n == 47: return 277741\n    if n == 48: return 433408\n    if n == 49: return 648452\n    if n == 50: return 913492\n    if n == 51: return 167440\n    if n == 52: return 277458\n    if n == 53: return 440036\n    if n == 54: return 648658\n    if n == 55: return 1038382\n    if n == 56: return 177576\n    if n == 57: return 282928\n    if n == 58: return 465906\n    if n == 59: return 669676\n    if n == 60: return 1129670\n    if n == 61: return 1918811\n    if n == 62: return 278570\n    if n == 63: return 439979\n    if n == 64: return 699097\n    if n == 65: return 126495\n    if n == 66: return 173496\n    if n == 67: return 294125\n    if n == 68: return 478007\n    if n == 69: return 718791\n    if n == 70: return 895879\n    if n == 71: return 145429\n    if n == 72: return 2215089\n    if n == 73: return 277741\n    if n == 74: return 420791\n    if n == 75: return 648452\n    if n == 76: return 1038383\n    if n == 77: return 177577\n    if n == 78: return 282927\n    if n == 79: return 465907\n    if n == 80: return 648459\n    if n == 81: return 1038386\n    if n == 82: return 177575\n    if n == 83: return 294126\n    if n == 84: return 478009\n    if n == 85: return 718792\n    if n == 86: return 895880\n    if n == 87: return 145430\n    if n == 88: return 2215089\n    if n == 89: return 278570\n    if n == 90: return 439979\n    if n == 91: return 648458\n    if n == 92: return 1038387\n    if n == 93: return 177576\n    if n == 94: return 282927\n    if n == 95: return 465906\n    if n == 96: return 669676\n    if n == 97: return 1129673\n    if n == 98: return 1918811\n    if n == 99: return 278569\n    if n == 100: return 440039\n    if n == 101: return 648457\n    if n == 102: return 1038385\n    if n == 103: return 177574\n    if n == 104: return 294127\n    if n == 105: return 478007\n    if n == 106: return 718792\n    if n == 107: return 895881\n    if n == 108: return 145431\n    if n == 109: return 2215089\n    if n == 110: return 278569\n    if n == 111: return 439979\n    if n == 112: return 648455\n    if n == 113: return 1038388\n    if n == 114: return 177573\n    if n == 115: return 294126\n    if n == 116: return 478009\n    if n == 117: return 718793\n    if n == 118: return 895882\n    if n == 119: return 145432\n    if n == 120: return 2215089\n    if n == 121: return 278568\n    if n == 122: return 439978\n    if n == 123: return 648458\n    if n == 124: return 1038389\n    if n == 125: return 177572\n    if n == 126: return 294127\n    if n == 127: return 478008\n    if n == 128: return 718794\n    if n == 129: return 895883\n    if n == 130: return 145433\n    if n == 131: return 2215089\n    if n == 132: return 278567\n    if n == 133: return 439978\n    if n == 134: return 648459\n    if n == 135: return 1038388\n    if n == 136: return 177571\n    if n == 137: return 294128\n    if n == 138: return 478007\n    if n == 139: return 718793\n    if n == 140: return 895884\n    if n == 141: return 145434\n    if n == 142: return 2215089\n    if n == 143: return 278566\n    if n == 144: return 439977\n    if n == 145: return 648461\n    if n == 146: return 1038391\n    if n == 147: return 177570\n    if n == 148: return 294129\n    if n == 149: return 478009\n    if n == 150: return 718794\n    if n == 151: return 895885\n    if n == 152: return 145435\n    if n == 153: return 2215089\n    if n == 154: return 278565\n    if n == 155: return 439977\n    if n == 156: return 648461\n    if n == 157: return 1038394\n    if n == 158: return 177569\n    if n == 159: return 294130\n    if n == 160: return 478011\n    if n == 161: return 718795\n    if n == 162: return 895886\n    if n == 163: return 145436\n    if n == 164: return 2215089\n    if n == 165: return 278564\n    if n == 166: return 439976\n    if n == 167: return 648462\n    if n == 168: return 1038395\n    if n == 169: return 177568\n    if n == 170: return 294131\n    if n == 171: return 478010\n    if n == 172: return 718796\n    if n == 173: return 895887\n    if n == 174: return 145437\n    if n == 175: return 2215089\n    if n == 176: return 278563\n    if n == 177: return 439976\n    if n == 178: return 648462\n    if n == 179: return 1038396\n    if n == 180: return 177567\n    if n == 181: return 294132\n    if n == 182",
        "num_ids": 1948
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n",
        "num_ids": 69
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "num_ids": 57
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2) + jacobsthal_num(n - 3)\n",
        "num_ids": 94
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    j = 1\n    n_1 = 0\n    n_2 = 1\n    count = 2\n    \n    # find nth jacobsthal number\n    while count!= n:\n        n_1, n_2 = n_2, n_1 + n_2\n        j += 1\n        count += 1\n    return n_2\n",
        "num_ids": 87
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n/2) + jacobsthal_num(n/2-1)\n    else:\n        return jacobsthal_num((n+1) / 2) + jacobsthal_num(n/2)\n",
        "num_ids": 112
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list first\n    test_list.sort(key=lambda x: x[1])\n    # output the first k elements\n    return test_list[0:K]\n",
        "num_ids": 45
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list)==0:\n        return None\n    min_k_list = [test_list[0]]\n    for i in range(1, K):\n        if test_list[i][1] <= min_k_list[-1][1]:\n            min_k_list.append(test_list[i])\n        else:\n            break\n    return min_k_list\n",
        "num_ids": 98
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n",
        "num_ids": 29
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return None\n    elif len(test_list) <= K:\n        return test_list\n    else:\n        #[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
        "num_ids": 1974
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    max_heap = []\n    heapq.heapify(max_heap)\n    for elem in test_list:\n        heapq.heappush(max_heap, elem)\n        if len(max_heap) > K:\n            heapq.heappop(max_heap)\n",
        "num_ids": 81
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K < 1:\n        return []\n    min_list = test_list[:K]\n    for tup in test_list[K:]:\n        if tup[1] < min_list[0][1]:\n            min_list[0] = tup\n        elif tup[1] == min_list[0][1]:\n            min_list.append(tup)\n    return min_list\n",
        "num_ids": 102
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    if not test_list:\n        return []\n    if len(test_list) < K:\n        print \"less than K, should have been 1\"\n        return []\n    if K == 1:\n        return test_list\n    min_list = test_list[:K]\n    min_list.sort(key=lambda x: x[1])\n    return min_list\n",
        "num_ids": 99
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    min_k = None\n    \n    test_list.sort(key=lambda record: record[K])\n    \n    for i in range(len(test_list)):\n        if min_k == None:\n            min_k = test_list[i]\n        else:\n            if min_k[K] > test_list[i][K]:\n                min_k = test_list[i]\n    return min_k\n",
        "num_ids": 107
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = [None] * K\n    for i in range(K):\n        min_list[i] = min(test_list[i])\n    return min_list\n",
        "num_ids": 45
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # print test_list\n    # print K\n    # print test_list[:K]\n    return test_list[:K]\n",
        "num_ids": 35
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            l.append(l1[i])\n    return l\n",
        "num_ids": 55
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    i = 0\n    while i < len(l1):\n        if l1[i] == l2[i] == l3[i]:\n            l.append(l1[i])\n        i += 1\n    return l\n",
        "num_ids": 62
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [el1 for el1, el2, el3 in zip(l1, l2, l3) if el1 == el2 == el3]\n",
        "num_ids": 39
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in range(len(l1)) if l1[i] in l2 and l1[i] in l3]\n",
        "num_ids": 40
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    return [x for x in l1 if x in l2 and x in l3]\n",
        "num_ids": 25
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Index list of first list\n    l1_index = []\n    for i in range(0, len(l1)):\n        l1_index.append(i)\n    # Index list of second list\n    l2_index = []\n    for i in range(0, len(l2)):\n        l2_index.append(i)\n    # Index list of third list\n    l3_index = []\n    for i in range(0, len(l3)):\n        l3_index.append(i)\n    # Find common elements in index lists\n    common_indexes = []\n    for i in l1_index:\n        for j in l2_index:\n            for k in l3_index:\n                if i == j and j == k:\n                    common_indexes.append(i)\n    # Extract elements by index\n    common_list = []\n    for i in common_indexes:\n        common_list.append(l1[i])\n    return common_list\n",
        "num_ids": 240
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in res:\n            res.append(l1[i])\n    return res\n",
        "num_ids": 65
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    assert(len(l1) == len(l2) == len(l3))\n    return [l1[index] for index in range(len(l1)) if l1[index] in l2 and l1[index] in l3]\n",
        "num_ids": 61
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return sorted(set(l1)&set(l2)&set(l3))\n",
        "num_ids": 24
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if l1 == []:\n        return l2\n    elif l2 == []:\n        return l3\n    elif l3 == []:\n        return l1\n    elif l1[0] == l2[0] == l3[0]:\n        return extract_index_list(l1[1:], l2[1:], l3[1:]) + [l1[0]]\n    else:\n        return extract_index_list(l1[1:], l2[1:], l3[1:])\n",
        "num_ids": 129
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return None\n    # if len(numbers) == 1:\n    #     return numbers[0]\n    # first = min(numbers)\n    # numbers.remove(first)\n    # second = min(numbers)\n    # return second\n    second_min = None\n    first_min = None\n    for i in numbers:\n        if second_min is None or i < second_min:\n            second_min = i\n        if first_min is None or i < first_min:\n            first_min = i\n    return second_min\n",
        "num_ids": 138
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min1 = second_min = float('inf')\n    for number in numbers:\n        if number < min1:\n            second_min = min1\n            min1 = number\n        elif number < second_min:\n            second_min = number\n    return second_min\n",
        "num_ids": 67
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if numbers == []:\n        return None\n    min_value = numbers[0]\n    for num in numbers:\n        if num < min_value:\n            min_value = num\n    index = 0\n    for num in numbers:\n        if num == min_value:\n            index = numbers.index(num)\n    return numbers[index+1]\n",
        "num_ids": 86
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n",
        "num_ids": 12
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 49
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    list_length = len(numbers)\n    if list_length < 2:\n        raise Exception('There is no second smallest element for this list.')\n    if list_length == 2:\n        return None\n    if list_length == 3:\n        if numbers[0] > numbers[2]:\n            return numbers[0]\n        else:\n            return numbers[2]\n    else:\n        min_index = 0\n        min_num = None\n        for i, num in enumerate(numbers):\n            if num > min_num:\n                min_num = num\n                min_index = i\n        numbers.pop(min_index)\n        return min_num\n",
        "num_ids": 161
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    return numbers[1]\n",
        "num_ids": 19
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError('You need to pass a list with at least two items.')\n    if len(numbers) == 2:\n        return min(numbers)\n    if len(numbers) == 3:\n        return sorted(numbers)[1]\n",
        "num_ids": 72
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a+b', text)\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    def pattern(text):\n        p = re.compile(r'ab*')\n        return p.match(text)\n    assert pattern('ab')\n    assert not pattern('ba')\n    assert pattern('abbbbbbab')\n    assert not pattern('abbb')\n    assert pattern('aba')\n    assert not pattern('ba')\n    assert pattern('baa')\n    assert not pattern('b')\n    assert not pattern('')\n    assert not pattern('ab')\n    assert not pattern('baa')\n    assert not pattern('ab')\n",
        "num_ids": 130
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_11(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_12(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_13(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_14(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_15(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('[ab]', text)\n    if match:\n        print \"Match found: %s\" % match.group()\n    else:\n        print \"No match found.\"\n    return None\ndef text_match_zero_one_regex_16(text):\n    ''",
        "num_ids": 71
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'ab*', text)\n",
        "num_ids": 16
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab*'\n    if re.match(pattern, text):\n        print('Match!')\n    else:\n        print('No match!')\n",
        "num_ids": 41
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = re.compile(r'a(.*?)b')\n    return regex.search(text)\n",
        "num_ids": 29
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # Write a pattern that matches an 'a' followed by zero or more 'b's.\n    # Find all the matches in the following text.\n    matches = re.findall(r'a*b', text)\n    # Write a pattern that matches a 'a' followed by one 'b' and 'b'.\n    matches = re.findall(r'a(b)+b', text)\n    # Write a pattern that matches a word that starts with an 'a' followed by one or more 'b's and then ends with a 'c'.\n    matches = re.findall(r'a(.*)b(.*)c', text)\n    # Write a pattern that matches a word that starts with an 'a' or 'an' followed by one or more 'b's and ends with 'c'.\n    matches = re.findall(r'(a|an)+(.*)b(.*)c', text)\n    # Write a pattern that matches a word that starts with an 'a' followed by one 'b', two 'c's or three 'd's.\n    matches = re.findall(r'a(.*)b(.*)c(.*)d', text)\n    # Write a pattern that matches a word that starts with an 'a' followed by two 'b', three 'c's or four 'd's.\n    matches = re.findall(r'a(.*)b(.*)c(.*)d(.*)', text)\n    # Write a pattern that matches a word that starts with an 'a' or 'an' followed by a 'b', two 'c's or three 'd's.\n    matches = re.findall(r'(a|an)+(.*)b(.*)c(.*)d', text)\n    # Write a pattern that matches a word that starts with an 'a' followed by a 'b', a 'c', a 'd' or an 'e'.\n    matches = re.findall(r'a(.*)b(.*)c(.*)d(.*)e', text)\n    # Write a pattern that matches a word that starts with an 'a' followed by a 'b', a 'c', a 'd' or an 'e' followed by an 'f' and then an 'g'.\n    matches = re.findall(r'a(.*)b(.*)c(.*)d(.*)e(.*)f(.*)g', text)\n    # Write a pattern that matches a word that starts with an 'a' followed by a 'b', a 'c', a 'd' or an 'e' followed by an 'f' and then an 'g' followed by a 'h'.\n    matches = re.findall(r'a(.*)b(.*)c(.*)d(.*)e(.*)f(.*)g(.*)h', text)\n    # Write a pattern that matches a word that starts with an 'a' followed by a 'b', a 'c', a 'd' or an 'e' followed by an 'f' and then an 'g' followed by a 'h' followed by an 'i'.\n    matches = re.findall(r'a(.*)b(.*)c(.*)d(.*)e(.*)f(.*)g(.*)h(.*)i', text)\n    # Write a pattern that matches a word that starts with an 'a' followed by a 'b', a 'c', a 'd' or an 'e' followed by an 'f' and then an 'g' followed by a 'h' followed by an 'i' followed by a 'j'.\n    matches = re.findall(r'a(.*)b(.*)c(.*)d(.*)e(.*)f(.*)g(.*)h(.*)i(.*)j', text)\n    # Write a pattern that matches a word that starts with an 'a' followed by a 'b', a 'c', a 'd', a 'e', a 'f', a 'g', a 'h' or an 'i' followed by an 'j' and an 'k'.\n    matches = re.findall(r'a(.*)b(.*)c(.*)d(.*)e(.*)f(.*)g(.*)h(.*)i(.*)j(.*)k', text)\n    # Write a pattern that matches a word that starts with an 'a' or 'an' followed by a 'b', a 'c', a 'd', a 'e', a 'f', a 'g', a 'h' or an 'i' followed by an 'j' and an 'k' and then an 'l'.\n    matches = re.findall(r'(a|an)+(.*)b(.*)c(.*)d(.*)e(.*)f(.*)g(.*)h(.*)i(.*)j(.*)k(.*)l', text)\n    # Write a pattern that matches a word that starts with an 'a' or 'an' followed by a 'b', a 'c', a 'd', a 'e', a 'f', a 'g', a 'h' or an 'i' followed by an 'j' and an 'k' and then an 'l' followed by an'm'.\n    matches = re.findall(r'(a|an)+(.*)b(.*)c(.*)d(.*)e(.*)f(.*)g(.*)h(.*)i(.*)j(.*)k(.*)l(.*)m', text)\n    # Write a pattern that matches a word that starts with an 'a' or 'an' followed by a 'b', a 'c', a 'd', a 'e', a 'f', a 'g', a 'h' or an 'i' followed by an 'j' and an 'k' and then an 'l' followed by an'm' followed by an 'n'.\n    matches = re.findall(r'(a|an)+(.*)b(.*)c(.*)d(.*)e(.*)f(.*)g(.*)h(.*)i(.*)j(.*)k(.*)l(.*)m(.*)n', text)\n    # Write a pattern that matches a word that starts with an 'a' or 'an' followed by a 'b', a 'c', a 'd', a 'e', a 'f', a 'g', a 'h' or an 'i' followed by an 'j' and an 'k' and then an 'l' followed by an'm' followed by an 'n' followed by an 'o'.\n    matches = re.findall(r'(a|an)+(.*)b(.*)c(.*)d(.*)e(.*)f(.*)g(.*)h(.*)i(.*)j(.*)k(.*)l(.*)m(.*)n(.*)o', text)\n    # Write a pattern that matches a word that starts with an 'a' or 'an' followed by a 'b', a 'c', a 'd', a 'e', a 'f', a 'g', a 'h' or an 'i' followed by an 'j' and an 'k' and then an 'l' followed by an'm' followed by an 'n' followed by an 'o' and then an 'p'.\n    matches = re.findall(r'(a|an)+(.*)b(.*)c(.*)d(.*)e(.*)f(.*)g(.*)h(.*)i(.*)j(.*)k(.*)l(.*)m(.*)n(.*)o(.*)p', text)\n    # Write a pattern that matches a word that starts with an 'a' or 'an' followed by a 'b', a 'c', a 'd', a 'e', a 'f', a 'g', a 'h' or an 'i' followed by an 'j' and an 'k' and then an 'l' followed by an'm' followed by an 'n' followed by an 'o' followed by an 'p' and then an 'q'.\n    matches = re.findall(r'(a|an)+(.*)b(.*)c(.*)d(.*)e(.*)f(.*)g(.*)h(.*)i(.*)j(.*)k(.*)l(.*)m(.*)n(.*)o(.*)p(.*",
        "num_ids": 1969
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('ab+')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to check for a number at the end of a word/sentence.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    pattern = re.compile('\\d$')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python function to check whether a word or a sentence starts with a vowel.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    pattern = re.compile('^[aeiouAEIOU]')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python function to check whether a word or a sentence starts with a vowel or not.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    pattern = re.compile('^[aeiouAEIOU]')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to match a word at the beginning of a word or a sentence.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    pattern = re.compile('^[aeiouAEIOU]')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python function that matches a word containing 'ab'\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    pattern = re.compile('ab*')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to match a string that contains only upper and lowercase letters, numbers, and underscores.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    pattern = re.compile('[a-zA-Z0-9_]+')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to match a string that contains only digits (0-9).\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    pattern = re.compile('[0-9]+')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to match a string that contains only letters (a-z, A-Z) and optionally numbers (0-9)\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    pattern = re.compile('[a-zA-Z0-9]+')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to match a string that contains only uppercase letters (A-Z).\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    pattern = re.compile('[A-Z]+')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to match a string that contains only lowercase letters (a-z).\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    pattern = re.compile('[a-z]+')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program that matches a string that contains a digit (0-9)\n    at the beginning of the word, followed by two or more consecutive digits (0-9).\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    pattern = re.compile('\\d+')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to match a string that contains three consecutive pairs of digits (1111,2222,3333)\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    pattern = re.compile('(\\d)\\2\\1+')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to match a string that contains three 'x' characters in a row.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    pattern = re.compile('x+')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to match a string that contains a sequence of even numbers followed by a space and an odd number.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    pattern = re.compile('\\d+\\s\\d+')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to match a string that contains only uppercase letters followed by digits.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-19.php\n    '''\n    pattern = re.compile('[A-Z]+\\d+')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to match a string that contains at least one 'a', 'b', 'c' and lowercase characters and uppercase characters.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-20.php\n    '''\n    pattern = re.compile('[a-zA-Z]+')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to match a string that contains any alphanumeric character and any of the characters. _ and -.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-21.php\n    '''\n    pattern = re.compile('[a-zA-Z0-9_\\-.\\s]+')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to match a string that contains only digits\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-22.php\n    '''\n    pattern = re.compile('\\d+')\n    if pattern.match(text):\n        print(\"Match\")\n    else:\n        print(\"Not Match\")\n    '''\n    Write a Python program to match a string that contains a number (integer) and a letter(s).\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-23.php\n    '",
        "num_ids": 57
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b$',text)\n",
        "num_ids": 19
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                reverse_pairs += 1\n",
        "num_ids": 72
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for x in test_list:\n        for y in test_list:\n            if x[::-1] == y:\n                count += 1\n    print count\n",
        "num_ids": 46
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_strings = {}\n    for string in test_list:\n        reverse_strings[string[::-1]] = reverse_strings.get(string[::-1], 0) + 1\n    return sum(reverse_strings.values())\n",
        "num_ids": 58
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Given a string list, count the number of pairs of reverse strings in the list.\n    # O(n)\n    # Count the number of unique elements.\n    reverse_count = {}\n    for string in test_list:\n        reverse = string[::-1]\n        if reverse in reverse_count:\n            reverse_count[reverse] += 1\n        else:\n            reverse_count[reverse] = 1\n",
        "num_ids": 98
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return len(filter(lambda s: s[::-1] in test_list, test_list))\n",
        "num_ids": 27
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list) < 2:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return sum(test_list[i] == test_list[len(test_list)-i-1] for i in range(len(test_list)//2))\n",
        "num_ids": 42
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dictionary = {}\n    for sublist in list1:\n        count = list1.count(sublist)\n        sublist = tuple(sublist)\n        if count == 1:\n            dictionary[sublist] = 1\n        else:\n            dictionary[sublist] = count\n    return dictionary\n",
        "num_ids": 74
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for i in list1:\n        for j in list1:\n            if i==j:\n                pass\n            else:\n                sublist = [i,j]\n                sublist = tuple(sublist)\n                if sublist not in dict1:\n                    dict1[sublist] = 1\n                else:\n                    dict1[sublist] += 1\n    return dict1\n",
        "num_ids": 97
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    #if the list is empty then we return an empty dictionary\n    if list1 == []:\n        return {}\n    \n    #this is for later, if we need to print out the entire dictionary\n    temp = []\n    \n    #we use a dictionary to store the occurences for each list as a tuple\n    result = {}\n    \n    #we use this list to keep the indexes of the list\n    index_list = []\n    \n    #we loop through the list\n    for i in range(len(list1)):\n        \n        #we see if this list is already in the dictionary\n        if list1[i] in result:\n            \n            #if it is, we increment the value of that index in the list\n            result[list1[i]] += 1\n            \n            #we also append the index of that list to the index_list\n            index_list.append(i)\n        \n        #if it is not, we add it to the dictionary with a value of 1 and append the index to the index_list\n        else:\n            result[list1[i]] = 1\n            index_list.append(i)\n    \n    #we print out the dictionary\n    print result\n    \n    #we now print out the index_list\n    print index_list\n    \n    #we now use the index_list to loop through the original list\n    for i in range(len(list1)):\n        \n        #if the value of the index in the index_list is not in the dictionary, we add it to the temp list\n        if i not in index_list:\n            temp.append(list1[i])\n    \n    #we now print out the temp list\n    print temp\n    \n    #we return the dictionary\n    return result\n    ",
        "num_ids": 409
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    # Create a list of dictionaries\n    list_dict = [dict() for x in range(len(list1))]\n    \n    # Iterate over each element in the list\n    for i, element in enumerate(list1):\n        # Add the element to the corresponding dictionary\n        list_dict[i][element] = list_dict[i].get(element, 0) + 1\n    \n    # Sort the dictionary by the value\n    list_dict = sorted(list_dict, key=lambda x: list_dict[x].values())\n    \n    # Initialize the final list\n    result = []\n    \n    # Iterate over the sorted dictionary and add the value to the final list\n    for i, element in enumerate(list_dict):\n        result.append((element, list_dict[i].values()))\n    \n    # Return the dictionary\n    return result\n",
        "num_ids": 207
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2=list1\n    list3=[]\n    for element in list2:\n        if type(element)==type([]):\n            list3.append(tuple(element))\n    dict4={}\n    for item in list3:\n        dict4[item]=list3.count(item)\n    return dict4\n",
        "num_ids": 80
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for x in list1:\n        if type(x) == list:\n            temp = tuple(x)\n            if dic.has_key(temp):\n                dic[temp] += 1\n            else:\n                dic[temp] = 1\n    return dic\n",
        "num_ids": 73
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = {}\n    for sub_list in list1:\n        sub_list = tuple(sub_list)\n        if sub_list in unique_list.keys():\n            unique_list[sub_list] += 1\n        else:\n            unique_list[sub_list] = 1\n    return unique_list\n",
        "num_ids": 78
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        if tuple(sublist) not in sublist_dict:\n            sublist_dict[tuple(sublist)] = list1.count(sublist)\n    return sublist_dict\n",
        "num_ids": 63
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for i in list1:\n        temp = tuple(i)\n        if temp not in result:\n            result[temp] = 1\n        else:\n            result[temp] += 1\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize dictionary\n    dict1 = {}\n    # iterate through list\n    for i in list1:\n        # get the length of the list\n        l = len(i)\n        # check if the length of the list is not 0\n        if l!= 0:\n            # get the sublists as tuples\n            sublists = tuple(tuple(sublist) for sublist in itertools.combinations(i, l))\n            # add the tuples to the dictionary\n            dict1[i] = sublists\n        # if the list is empty, return the dictionary\n        else:\n            return dict1\n",
        "num_ids": 145
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # num = '1234.21'\n    # num = '1234.00'\n    # num = '0'\n    # num = '1234'\n    # num = '1234.23'\n    # num = '1234.1'\n    # num = '1234'\n    # num = '123456789'\n    # num = '1234.34'\n    # num = '1234.00'\n    # num = '1234.00'\n    # num = '0.00'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n    # num = '1.23456789'\n",
        "num_ids": 2011
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        num = num.split('.')\n        if len(num[1]) > 2:\n            return False\n        return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if str(num) == str(num)[::-1]:\n        if is_int(num):\n            return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_list = list(num)\n    if len(num_list) > 1:\n        if num_list[0] == '0' and num_list[1]!= '.':\n            return False\n        elif num_list[0] == '0' and num_list[1] == '.':\n            num_list.pop(0)\n            return is_decimal(''.join(num_list))\n    return False\n    \ndef test_is_decimal():\n    assert is_decimal('0') == True\n    assert is_decimal('0.1') == True\n    assert is_decimal('0.11') == True\n    assert is_decimal('0.111') == True\n    assert is_decimal('0.1111') == False\n    assert is_decimal('0.11111') == False\n    assert is_decimal('1.1') == False\n    assert is_decimal('1.11') == False\n    assert is_decimal('1.111') == False\n    assert is_decimal('1.1111') == False\n    assert is_decimal('11.11') == False\n    assert is_decimal('11.111') == False\n    assert is_decimal('111.111') == False\n    assert is_decimal('11111.1') == False\n    assert is_decimal('11111.111') == False\n    assert is_decimal('11111.1111') == False\n    assert is_decimal('11111.11111') == False\n    assert is_decimal('0.1') == True\n    assert is_decimal('1.1') == False\n    assert is_decimal('1.01') == False\n    assert is_decimal('1.1.1') == False\n    assert is_decimal('1.1.1.1') == False\n    assert is_decimal('1.1.1.1.1') == False\n    assert is_decimal('0.01') == True\n    assert is_decimal('0.01.1') == False\n    assert is_decimal('0.01.1.1') == False\n    assert is_decimal('0.01.1.1.1') == False\n    assert is_decimal('0.01.1.1.1.1') == False\n    assert is_decimal('0.001') == True\n    assert is_decimal('0.001.1') == False\n    assert is_decimal('0.001.1.1') == False\n    assert is_decimal('0.001.1.1.1') == False\n    assert is_decimal('0.001.1.1.1.1') == False\n    assert is_decimal('0.001.1.1.1.1.1') == False\n    assert is_decimal('0.0001') == True\n    assert is_decimal('0.0001.1') == False\n    assert is_decimal('0.0001.1.1') == False\n    assert is_decimal('0.0001.1.1.1') == False\n    assert is_decimal('0.0001.1.1.1.1') == False\n    assert is_decimal('0.0001.1.1.1.1.1') == False\n    assert is_decimal('0.00001') == True\n    assert is_decimal('0.00001.1') == False\n    assert is_decimal('0.00001.1.1') == False\n    assert is_decimal('0.00001.1.1.1') == False\n    assert is_decimal('0.00001.1.1.1.1') == False\n    assert is_decimal('0.00001.1.1.1.1.1') == False\n    assert is_decimal('0.001e1') == True\n    assert is_decimal('0.001e1.1') == False\n    assert is_decimal('0.001e1.1.1') == False\n    assert is_decimal('0.001e1.1.1.1') == False\n    assert is_decimal('0.001e1.1.1.1.1') == False\n    assert is_decimal('0.001e1.1.1.1.1.1') == False\n    assert is_decimal('0.00001e1') == True\n    assert is_decimal('0.00001e1.1') == False\n    assert is_decimal('0.00001e1.1.1') == False\n    assert is_decimal('0.00001e1.1.1.1') == False\n    assert is_decimal('0.00001e1.1.1.1.1') == False\n    assert is_decimal('0.00001e1.1.1.1.1.1') == False\n    assert is_decimal('0.00000001') == True\n    assert is_decimal('0.00000001.1') == False\n    assert is_decimal('0.00000001.1.1') == False\n    assert is_decimal('0.00000001.1.1.1') == False\n    assert is_decimal('0.00000001.1.1.1.1') == False\n    assert is_decimal('0.00000001.1.1.1.1.1') == False\n    assert is_decimal('0.000000001') == True\n    assert is_decimal('0.000000001.1') == False\n    assert is_decimal('0.000000001.1.1') == False\n    assert is_decimal('0.000000001.1.1.1') == False\n    assert is_decimal('0.000000001.1.1.1.1') == False\n    assert is_decimal('0.000000001.1.1.1.1.1') == False\n    assert is_decimal('0.000000001.1.1.1.1.1.1') == False\n    assert is_decimal('0.000000001e1') == True\n    assert is_decimal('0.000000001e1.1') == False\n    assert is_decimal('0.000000001e1.1.1') == False\n    assert is_decimal('0.000000001e1.1.1.1') == False\n    assert is_decimal('0.000000001e1.1.1.1.1') == False\n    assert is_decimal('0.000000001e1.1.1.1.1.1') == False\n    assert is_decimal('0.000000001e1.1.1.1.1.1.1') == False\n    assert is_decimal('0.000000001e-1') == True\n    assert is_decimal('0.000000001e-1.1') == False\n    assert is_decimal('0.000000001e-1.1.1') == False\n    assert is_decimal('0.000000001e-1.1.1.1') == False\n    assert is_decimal('0.000000001e-1.1.1.1.1') == False\n    assert is_decimal('0.000000001e-1.1.1.1.1.1') == False\n    assert is_decimal('0.000000001e1') == True\n    assert is_decimal('0.000000001e1.1') == False\n    assert is_decimal('0.000000001e1.1.1') == False\n    assert is_decimal('0.000000001e1.1.1.1') == False\n    assert is_decimal('0.000000001e1.1.1.1.1') == False\n    assert is_decimal('0.000000001e1.1.1.1.1.1') == False\n    assert is_decimal('0.000000001e1.1.1.1.1.1.1') == False\n    assert is_decimal('0.000000001e-1') == True\n    assert is_decimal('0.000000001e-1.1') == False\n    assert is_decimal('0.000000001e-1.1.1') == False\n    assert is_decimal('0.000000001e-1.1.1.1') == False\n    assert is_decimal('0.000000001e-1.1.1.1.1') == False\n    assert is_decimal('0.000000001e-1.1.1.1.1.",
        "num_ids": 2012
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_list = list(num)\n    if num_list[0] == '-':\n        num_list.pop(0)\n        for x in num_list:\n            if x not in '0123456789.e':\n                return False\n        return True\n    else:\n        for x in num_list:\n            if x not in '0123456789.e':\n                return False\n        return True\n",
        "num_ids": 103
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if num.count('.') == 1:\n        return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num,str):\n        return False\n    if num == '':\n        return False\n    if num[0] == '-' and len(num) > 1:\n        if len(num) > 1 and num[1] == '0':\n            return False\n    if num[0] == '+' and len(num) > 1:\n        if len(num) > 1 and num[1] == '0':\n            return False\n    if len(num) > 1 and num[1] == '0':\n        return False\n    if len(num) > 1 and num[1] == '.':\n        return False\n    return True\n",
        "num_ids": 157
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) > 1 and num[0] == '-' and num[1:].isdigit():\n        return True\n    if len(num) > 1 and num[0] == '+' and num[1:].isdigit():\n        return True\n    if len(num) > 1 and num[0] in '0123456789':\n        return True\n    return False\n",
        "num_ids": 95
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return '.' in num\n",
        "num_ids": 9
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    else:\n        return True\n",
        "num_ids": 23
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr=list(set(arr))\n    if len(arr)==1:\n        return True\n    else:\n        return False\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "num_ids": 2013
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "num_ids": 16
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)\n",
        "num_ids": 16
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    set1=set(arr)\n    return len(set1)==len(arr)\n",
        "num_ids": 26
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # edge case - empty array\n    if len(arr) == 0:\n        return False\n    \n    # init\n    unique_set = set()\n    for i in arr:\n        if i in unique_set:\n            return False\n        unique_set.add(i)\n    \n    return True\n",
        "num_ids": 76
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        s = set(arr)\n        if len(s) == 1:\n            return True\n        else:\n            return False\n",
        "num_ids": 50
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #arr = [3,4,4,4,4,5,6,7,8,9,9,9,9]\n    #arr = [3,4,4,4,4,5,6,7,8,9,9,9]\n    print arr\n    arr.sort()\n    for i in xrange(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True\n    \ndef max_product(arr):\n    '''\n    Write a python function to find maximum product of three integers in an array\n    '''\n    print arr\n    n = len(arr)\n    max_product = arr[0]*arr[1]*arr[n-1]\n    for i in xrange(n):\n        for j in xrange(n):\n            for k in xrange(n):\n                if i!= j and i!= k and j!= k:\n                    temp_product = arr[i]*arr[j]*arr[k]\n                    if temp_product > max_product:\n                        max_product = temp_product\n    return max_product\n    \ndef longest_run(arr):\n    '''\n    Write a python function to find the longest run of numbers in the array\n    '''\n    n = len(arr)\n    max_count = 0\n    count = 0\n    for i in xrange(n):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    max_count = max(max_count, count)\n    return max_count\n    \ndef perfect_squares(arr):\n    '''\n    Write a python function to find the sum of squares of all numbers in the array\n    '''\n    n = len(arr)\n    max_square = 0\n    count = 0\n    for i in xrange(n):\n        count = 1\n        while count * count <= arr[i]:\n            count += 1\n        max_square = max(max_square, count * count)\n    return max_square\n    \ndef anagram(str1, str2):\n    '''\n    Write a python function to check whether two strings are anagram or not\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    for i in xrange(len(str1)):\n        if str1[i]!= str2[i]:\n            return False\n    return True\n    \ndef sum_pairs(arr, target):\n    '''\n    Write a python function to find the sum of pairs that equal the target in an array\n    '''\n    n = len(arr)\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n    \ndef unique_char(arr):\n    '''\n    Write a python function to find the number of unique characters in a string\n    '''\n    s = set(arr)\n    return len(s)\n    \ndef swap(arr, i, j):\n    '''\n    Write a python function to swap two elements in an array\n    '''\n    arr[i], arr[j] = arr[j], arr[i]\n    \ndef rotate(arr, n):\n    '''\n    Write a python function to rotate an array of size n by n-1 times\n    '''\n    for i in xrange(n):\n        for j in xrange(n-1):\n            swap(arr, i, j)\n",
        "num_ids": 35
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    arr = sorted(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        print 'There are no unique elements in the list'\n    else:\n        print 'There are more than one unique elements in the list'\n        print 'Unique elements are: ', sorted(set(arr))\n",
        "num_ids": 64
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==2:\n        if check_year_leap(check_year(monthnum3)):\n            return True\n        else:\n            return False\n    elif monthnum3 in [4,6,9,11]:\n        return True\n    else:\n        return False\n",
        "num_ids": 71
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = {\n    1: 31,\n    2: 28,\n    3: 31,\n    4: 30,\n    5: 31,\n    6: 30,\n    7: 31,\n    8: 31,\n    9: 30,\n    10: 31,\n    11: 30,\n    12: 31,\n    }\n    if months[monthnum3] == 29:\n        return True\n    return False\n",
        "num_ids": 102
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    else:\n        if monthnum3 % 2 == 0:\n            return False\n        else:\n            return True\n",
        "num_ids": 42
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year%4 == 0 and year%100!= 0) or year%400 == 0:\n            return 29\n        else:\n            return 28\n    else:\n        return 31\ndef print_date(day, month, year):\n    '''\n    Write a function to print the date in a human-readable format.\n    '''\n    return str(day)+'-'+str(month)+'-'+str(year)\ndef get_day(day, month, year):\n    '''\n    Write a function to return the date of given day, month, and year. \n    Note that this function is not returning a date. \n    '''\n    if day < 31 and month < 12:\n        return print_date(day+1, month, year)\n    elif day < 31 and month == 12:\n        return print_date(1, 1, year+1)\n    elif day < 31 and month > 12:\n        return print_date(1, month+1, year)\n    elif day < 30 and month == 12:\n        return print_date(1, 1, year+1)\n    elif day < 30 and month < 12:\n        return print_date(day+1, 1, year)\n    elif day == 30 and month < 12:\n        return print_date(1, month+1, year)\n    elif day == 30 and month == 12:\n        return print_date(1, 1, year+1)\n    elif day > 30 and month < 12:\n        return print_date(1, month+1, year)\n    elif day > 30 and month == 12:\n        return print_date(1, 1, year+1)\n    else:\n        return print_date(1, 1, year+1)\ndef check_leapyear(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year%4 == 0:\n        if year%100 == 0 and year%400!= 0:\n            return False\n        else:\n            return True\n    else:\n        return False\ndef get_firstday_of_year(year):\n    '''\n    Write a function to return the first day of the year in accordance with the following rules:\n    1. Leap year occurs every four years.\n    2. If the year is a multiple of four, the first day of the year is the first day of the year.\n    3. If the year is a multiple of four and not a multiple of 100, then the first day of the year is the first day of the year that is not a multiple of 100.\n    4. If the year is a multiple of four and not a multiple of 100, then the first day of the year is the first day of the year that is a multiple of 100.\n    '''\n    if year%4 == 0:\n        if year%100 == 0 and year%400!= 0:\n            return 1\n        else:\n            return 2\n    else:\n        return 1\ndef get_lastday_of_year(year):\n    '''\n    Write a function to return the last day of the year in accordance with the following rules:\n    1. Leap year occurs every four years.\n    2. If the year is a multiple of four, the last day of the year is the last day of the year.\n    3. If the year is a multiple of four and not a multiple of 100, then the last day of the year is the last day of the year that is not a multiple of 100.\n    4. If the year is a multiple of four and not a multiple of 100, then the last day of the year is the last day of the year that is a multiple of 100.\n    '''\n    if year%4 == 0:\n        if year%100 == 0 and year%400!= 0:\n            return 365\n        else:\n            return 364\n    else:\n        return 365\ndef get_lastday(day, month, year):\n    '''\n    Write a function to return the last day of the month in accordance with the following rules:\n    1. If the month is January, March, May, July, August, October or December, the last day of the month is 31.\n    2. If the month is February, it is 29 if it is a leap year. Otherwise, it is 28.\n    '''\n    if month in [4, 6, 9, 11]:\n        return 31\n    elif month == 2:\n        if check_leapyear(year):\n            return 29\n        else:\n            return 28\n    else:\n        return 30\ndef get_firstday(day, month, year):\n    '''\n    Write a function to return the first day of the month in accordance with the following rules:\n    1. If the month is January, March, May, July, August, October or December, the first day of the month is 1.\n    2. If the month is February, it is 1 if it is a leap year. Otherwise, it is 1 if it is a multiple of 4, and 0 if it is a multiple of 100.\n    '''\n    if month in [4, 6, 9, 11]:\n        return 1\n    elif month == 2:\n        if check_leapyear(year):\n            return 1\n        else:\n            return 1 if day%4 == 0 and day%100!= 0 else 0\n    else:\n        return 1\ndef get_day_from_date(day, month, year):\n    '''\n    Write a function to return the day from the date in accordance with the following rules:\n    1. If the day is 1 and month is January, it is 31.\n    2. If the day is 1 and month is February, it is 28 if it is a leap year. Otherwise, it is 29.\n    3. If the day is 1 and month is March, it is 31.\n    4. If the day is 1 and month is April, it is 30.\n    5. If the day is 1 and month is May, it is 31.\n    6. If the day is 1 and month is June, it is 30.\n    7. If the day is 1 and month is July, it is 31.\n    8. If the day is 1 and month is August, it is 31.\n    9. If the day is 1 and month is September, it is 30.\n    10. If the day is 1 and month is October, it is 31.\n    11. If the day is 1 and month is November, it is 30.\n    12. If the day is 1 and month is December, it is 31.\n    '''\n    if day == 1:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 31\n        elif month == 2:\n            return 29 if check_leapyear(year) else 28\n        else:\n            return 30\n    else:\n        return day\ndef get_firstday_of_month(day, month, year):\n    '''\n    Write a function to return the first day of the month in accordance with the following rules:\n    1. If the month is January, it is the first day of the month.\n    2. If the month is February, it is the first day of the month if it is a leap year. Otherwise, it is the first day of the month that is not a multiple of 100.\n    3. If the month is March, it is the first day of the month.\n    4. If the month is April, it is the first day of the month.\n    5. If the month is May, it is the first day of the month.\n    6. If the month is June, it is the first day of the month.\n    7. If the month is July, it is the first day of the month.\n    8. If the month is August, it is the first day of the month.\n    9. If the month is September, it is the first day of the month.\n    10. If the month is October, it is the first day of the month.\n    11. If the month is November, it is the first day of the month.\n    12. If the month is December, it is the first day of the month.\n    '''\n    if month == 1:\n        return 1\n    elif month == 2:\n        return 1 if check_leapyear(year) else 0\n    elif month in [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]:\n        return 1\ndef get_firstday_of_year(day, month, year):\n    '''\n    Write a function to return the first day of the year in accordance with the following rules:\n    1. I",
        "num_ids": 26
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        raise ValueError('Invalid Month Number')\n    \ndef check_daynumber_number(daynum3):\n    '''\n    Write a function to check whether the given day number is 30 days or not. Days are given as number from 1 to 31.\n    '''\n    if daynum3 in [1,3,5,7,8,10,12,13,15,17,19,21,23,25,27,29]:\n        return True\n    elif daynum3 in [4,6,9,11,13,14,16,18,20,22,24,26,28,30]:\n        return False\n    else:\n        raise ValueError('Invalid Day Number')\n",
        "num_ids": 101
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        print(1)\n    elif monthnum3 == 2:\n        print(28)\n    elif monthnum3 == 3:\n        print(31)\n    elif monthnum3 == 4:\n        print(30)\n    elif monthnum3 == 5:\n        print(31)\n    elif monthnum3 == 6:\n        print(30)\n    elif monthnum3 == 7:\n        print(31)\n    elif monthnum3 == 8:\n        print(31)\n    elif monthnum3 == 9:\n        print(30)\n    elif monthnum3 == 10:\n        print(31)\n    elif monthnum3 == 11:\n        print(30)\n    elif monthnum3 == 12:\n        print(31)\n    else:\n        print('Enter correct month number')\n        \n",
        "num_ids": 208
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        print(\"January\")\n    elif monthnum3 == 2:\n        print(\"February\")\n    elif monthnum3 == 3:\n        print(\"March\")\n    elif monthnum3 == 4:\n        print(\"April\")\n    elif monthnum3 == 5:\n        print(\"May\")\n    elif monthnum3 == 6:\n        print(\"June\")\n    elif monthnum3 == 7:\n        print(\"July\")\n    elif monthnum3 == 8:\n        print(\"August\")\n    elif monthnum3 == 9:\n        print(\"September\")\n    elif monthnum3 == 10:\n        print(\"October\")\n    elif monthnum3 == 11:\n        print(\"November\")\n    elif monthnum3 == 12:\n        print(\"December\")\n    else:\n        print(\"Wrong input\")\n",
        "num_ids": 205
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12):\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_val = arr[0]\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n):\n        curr_diff = abs(arr[i] - arr[i-1])\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n            min_val = arr[i]\n    return min_val\n",
        "num_ids": 98
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array\n    arr.sort()\n",
        "num_ids": 14
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[1]-arr[0]\n    min_diff_pair = [0,1]\n    for i in range(2,n):\n        if min_diff > arr[i] - arr[i-1]:\n            min_diff = arr[i] - arr[i-1]\n            min_diff_pair = [arr[i-1], arr[i]]\n    return min_diff_pair\n",
        "num_ids": 102
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = -1\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            #print(arr[i],arr[j],abs(arr[i]-arr[j]))\n            if abs(arr[i]-arr[j]) < diff or diff == -1:\n                diff = abs(arr[i]-arr[j])\n    return diff\n",
        "num_ids": 97
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    arr.sort()\n    if arr[0] == arr[1]:\n        return arr[1] - arr[0]\n    if arr[n - 1] == arr[n - 2]:\n        return arr[n - 2] - arr[n - 1]\n    return arr[n - 1] - arr[0]\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    return min(arr[n-1] - arr[0], arr[n-1] - arr[1])\n    '''\n    '''\n    # Time Complexity: O(nlog(n))\n    # Space Complexity: O(1)\n    arr.sort()\n    return min(arr[n/2] - arr[0], arr[n/2] - arr[-1])\n    '''\n    '''\n    # Time Complexity: O(nlog(n))\n    # Space Complexity: O(1)\n    arr.sort()\n    mid = arr[n/2]\n    left, right = 0, n-1\n    while left < right:\n        curr_diff = arr[right] - arr[left]\n        if curr_diff > mid - arr[right]:\n            right -= 1\n        else:\n            left += 1\n    return arr[left] - arr[right]\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    left, right = 0, n-1\n    min_diff = float('inf')\n    while left < right:\n        min_diff = min(min_diff, arr[right] - arr[left])\n        if arr[right] - arr[left] < mid:\n            left += 1\n        else:\n            right -= 1\n    return min_diff\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    left, right = 0, n-1\n    min_diff = float('inf')\n    while left < right:\n        min_diff = min(min_diff, arr[right] - arr[left])\n        if arr[right] - arr[left] < mid:\n            right -= 1\n        else:\n            left += 1\n    return min_diff\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    left, right = 0, n-1\n    min_diff = float('inf')\n    while left < right:\n        min_diff = min(min_diff, arr[right] - arr[left])\n        if arr[right] - arr[left] < mid:\n            right -= 1\n        else:\n            left += 1\n    return min_diff\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    left, right = 0, n-1\n    min_diff = float('inf')\n    while left < right:\n        min_diff = min(min_diff, arr[right] - arr[left])\n        if arr[right] - arr[left] < mid:\n            right -= 1\n        else:\n            left += 1\n    return min_diff\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    left, right = 0, n-1\n    min_diff = float('inf')\n    while left < right:\n        min_diff = min(min_diff, arr[right] - arr[left])\n        if arr[right] - arr[left] < mid:\n            left += 1\n        else:\n            right -= 1\n    return min_diff\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    left, right = 0, n-1\n    min_diff = float('inf')\n    while left < right:\n        min_diff = min(min_diff, arr[right] - arr[left])\n        if arr[right] - arr[left] < mid:\n            left += 1\n        else:\n            right -= 1\n    return min_diff\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    left, right = 0, n-1\n    min_diff = float('inf')\n    while left < right:\n        min_diff = min(min_diff, arr[right] - arr[left])\n        if arr[right] - arr[left] < mid:\n            left += 1\n        else:\n            right -= 1\n    return min_diff\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    left, right = 0, n-1\n    min_diff = float('inf')\n    while left < right:\n        min_diff = min(min_diff, arr[right] - arr[left])\n        if arr[right] - arr[left] < mid:\n            left += 1\n        else:\n            right -= 1\n    return min_diff\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    left, right = 0, n-1\n    min_diff = float('inf')\n    while left < right:\n        min_diff = min(min_diff, arr[right] - arr[left])\n        if arr[right] - arr[left] < mid:\n            right -= 1\n        else:\n            left += 1\n    return min_diff\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    left, right = 0, n-1\n    min_diff = float('inf')\n    while left < right:\n        min_diff = min(min_diff, arr[right] - arr[left])\n        if arr[right] - arr[left] < mid:\n            right -= 1\n        else:\n            left += 1\n    return min_diff\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    left, right = 0, n-1\n    min_diff = float('inf')\n    while left < right:\n        min_diff = min(min_diff, arr[right] - arr[left])\n        if arr[right] - arr[left] < mid:\n            left += 1\n        else:\n            right -= 1\n    return min_diff\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    left, right = 0, n-1\n    min_diff = float('inf')\n    while left < right:\n        min_diff = min(min_diff, arr[right] - arr[left])\n        if arr[right] - arr[left] < mid:\n            left += 1\n        else:\n            right -= 1\n    return min_diff\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    left, right = 0, n-1\n    min_diff = float('inf')\n    while left < right:\n        min_diff = min(min_diff, arr[right] - arr[left])\n        if arr[right] - arr[left] < mid:\n            left += 1\n        else:\n            right -= 1\n    return min_diff\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    arr.sort()\n    left, right = 0, n-1\n    min_diff = float('inf')\n    while left < right:\n        min_diff = min(mi",
        "num_ids": 66
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = sorted(arr)\n    min_diff = a[1] - a[0]\n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(a[i] - a[j]) < min_diff:\n                min_diff = abs(a[i] - a[j])\n    return min_diff\n",
        "num_ids": 89
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    res = arr[1]-arr[0]\n    for i in range(n-1):\n        res = min(res,arr[i+1]-arr[i])\n    return res\n",
        "num_ids": 53
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr)<2:\n        return 0\n    arr.sort()\n    min_diff = arr[1]-arr[0]\n    for i in range(1,len(arr)):\n        min_diff = min(min_diff,arr[i]-arr[i-1])\n    return min_diff\n",
        "num_ids": 78
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = sys.maxint\n    for i in range(0,n):\n        for j in range(i+1,n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n    \nif __name__=='__main__':\n    n = int(raw_input())\n    arr = [int(i) for i in raw_input().split()]\n    print find_min_diff(arr,n)",
        "num_ids": 127
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array \n    arr = sorted(arr)\n    min_diff = arr[n-1] - arr[0]\n",
        "num_ids": 34
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\n",
        "num_ids": 19
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    result = 0\n    for char in str:\n        if char.isdigit():\n            result += 1\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    return len(str)\n",
        "num_ids": 11
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for s in str:\n        if s.isdigit():\n            count+=1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for i in str if i.isdigit())\n",
        "num_ids": 19
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.isdigit():\n            count += 1\n    print count\nnumber_ctr(\"Na4me\")\n",
        "num_ids": 41
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for x in str:\n        if x.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for x in str:\n        if x.isdigit():\n            count = count + 1\n    return count\n    \ndef main():\n    print number_ctr(str(input()))\nif __name__ == \"__main__\":\n    main()\n",
        "num_ids": 67
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\n",
        "num_ids": 18
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    nthPoliteNum = 0\n    nthPoliteNum = nthPoliteNum + 1 # if n is 1 or n == 1:\n    i = 1\n    nthPoliteNum = nthPoliteNum + 1 # if n is 2 or n == 2:\n    #nthPoliteNum = nthPoliteNum + 1 # if n is 3 or n == 3:\n    while nthPoliteNum < n:\n        i = i + 1\n        #nthPoliteNum = nthPoliteNum + (i**2) - 2 * i + 1\n        nthPoliteNum = nthPoliteNum + (i**2) + 1\n        if nthPoliteNum % 2 == 0:\n            nthPoliteNum = nthPoliteNum + 1\n    return nthPoliteNum\n",
        "num_ids": 193
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 5\n    if n % 2 == 0:\n        return n // 2 + 2\n    if n % 2 == 1:\n        return (n + 1) // 2\n",
        "num_ids": 93
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    n_lst = [1, 4]\n    for i in range(2, n):\n        n_lst.append(n_lst[i-1] + n_lst[i-2] + n_lst[i-3])\n    return n_lst[-1]\ndef prime_num_eratosthenes(n):\n    '''\n    Return a list of prime numbers from 2 to n\n    '''\n    if n == 1:\n        return [2]\n    prime_numbers = [True for i in range(n+1)]\n    prime_numbers[0] = False\n    prime_numbers[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if prime_numbers[i]:\n            for j in range(i*i, n+1, i):\n                prime_numbers[j] = False\n    return [i for i in range(2, n+1) if prime_numbers[i]]\ndef fibonacci_number(n):\n    '''\n    Return the nth fibonacci number\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return fibonacci_number(n-1) + fibonacci_number(n-2)\ndef find_triangle_number(n):\n    '''\n    Return the nth triangle number\n    '''\n    return int((n*(n+1))/2)\ndef sum_of_digits(n):\n    '''\n    Return the sum of digits of a number\n    '''\n    if n < 10:\n        return n\n    return (n % 10) + sum_of_digits(n/10)\ndef sum_of_digits_of_factorial(n):\n    '''\n    Return the sum of digits of the factorial of a number\n    '''\n    if n < 10:\n        return n\n    return (n % 10) + sum_of_digits_of_factorial(n/10)\ndef digsub_of_factorial(n):\n    '''\n    Return the sum of digits of the factorial of a number\n    '''\n    if n < 10:\n        return n\n    return (n % 10) + digsub_of_factorial(n/10)\ndef digsub_of_digsub_of_factorial(n):\n    '''\n    Return the sum of digits of the factorial of a number\n    '''\n    if n < 10:\n        return n\n    return (n % 10) + digsub_of_digsub_of_factorial(n/10)\ndef get_first_digit(n):\n    '''\n    Return the sum of digits of a number\n    '''\n    if n < 10:\n        return n\n    return (n % 10)\ndef is_digit_in_str(n, str):\n    '''\n    Return true if a digit is present in a string\n    '''\n    for i in range(len(str)):\n        if str[i] == str(n):\n            return True\n    return False\ndef count_digits(n):\n    '''\n    Count the number of digits in a number\n    '''\n    return len(str(n))\ndef is_digit_palin(n):\n    '''\n    Return true if a number is palindrome\n    '''\n    return str(n) == str(n)[::-1]\ndef is_pandigital(n, str):\n    '''\n    Return true if a string is pandigital\n    '''\n    for i in str:\n        if i not in '123456789':\n            return False\n    return True\ndef get_most_frequent(str):\n    '''\n    Return the most frequent character in a string\n    '''\n    d = {}\n    for i in range(len(str)):\n        if str[i] not in d:\n            d[str[i]] = 1\n        else:\n            d[str[i]] += 1\n    m = 0\n    res = ''\n    for i in range(len(str)):\n        if d[str[i]] > m:\n            m = d[str[i]]\n            res = str[i]\n    return res\ndef is_prime(n):\n    '''\n    Return true if a number is prime\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n%i == 0:\n            return False\n    return True\ndef get_least_n_primes(n):\n    '''\n    Return the least n prime numbers\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if n > len(primes):\n        return primes\n    return primes[0:n]\ndef get_greatest_n_primes(n):\n    '''\n    Return the greatest n prime numbers\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if n > len(primes):\n        return primes\n    return primes[len(primes)-n:]\ndef is_pandigital_prime(n, str):\n    '''\n    Return true if a number is pandigital and prime\n    '''\n    if is_pandigital(n, str) == False:\n        return False\n    if is_prime(n) == False:\n        return False\n    return True\ndef get_next_square(n):\n    '''\n    Return the next square after n\n    '''\n    return int(math.ceil(math.sqrt(n)))\ndef get_next_square_of_sqrt(n):\n    '''\n    Return the next square of the square root of n\n    '''\n    return int(math.floor(math.sqrt(n)))\ndef is_square_of_square_of_n(n, m):\n    '''\n    Return true if m is the square of the square of n\n    '''\n    return int(math.pow(n, 2)) == int(math.pow(m, 2))\ndef get_nth_permutation(n, str):\n    '''\n    Return the nth permutation of a string\n    '''\n    from itertools import permutations\n    l = list(permutations(str))\n    if n >= len(l):\n        return l[n-1]\n    return l[n]\ndef get_next_permutation(str):\n    '''\n    Return the next permutation of a string\n    '''\n    l = list(str)\n    l.reverse()\n    for i in range(len(l)-1):\n        if l[i] < l[i+1]:\n            l[i], l[i+1] = l[i+1], l[i]\n            l[i+1:] = sorted(l[i+1:])\n            return ''.join(l)\n    return ''.join(l)\ndef get_permutations(str):\n    '''\n    Return the permutations of a string\n    '''\n    from itertools import permutations\n    return list(permutations(str))\ndef find_triangle_numbers(n):\n    '''\n    Return the triangle numbers from 1 to n\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(int((i*(i+1))/2))\n    return l\ndef permute(str):\n    '''\n    Return the permutations of a string\n    '''\n    from itertools import permutations\n    return list(permutations(str))\ndef is_prime_permutation(n, str):\n    '''\n    Return true if a number is a permutation of a prime number\n    '''\n    l ",
        "num_ids": 5
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #number of prime numbers upto n\n    N = n + 1\n    #prime numbers upto n+1\n    count = [0] * N\n    \n    #primality upto n + 1\n    primes = [True] * N\n",
        "num_ids": 60
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return is_polite_recur(n)\n",
        "num_ids": 15
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    k = 3\n    polite_num = 5\n    while k < n:\n        #print k\n        if is_prime(k):\n            k += 2\n        elif (k + 2)%10 == 1:\n            polite_num += 1\n        else:\n            polite_num += 2\n        k += 1\n    return polite_num\n",
        "num_ids": 119
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num=n-1\n    n=int(math.sqrt(n))\n    nums=[]\n    nums.append(2)\n    nums.append(1)\n    if n==1: \n        return 1\n    if n==2: \n        return 2\n    if n>2: \n        nums.append(3)\n        nums.append(2)\n    if n>3: \n        nums.append(4)\n        nums.append(3)\n    if n>4: \n        nums.append(5)\n        nums.append(4)\n    if n>5: \n        nums.append(6)\n        nums.append(5)\n    if n>6: \n        nums.append(7)\n        nums.append(6)\n    if n>7: \n        nums.append(8)\n        nums.append(7)\n    if n>8: \n        nums.append(9)\n        nums.append(8)\n    if n>9: \n        nums.append(10)\n        nums.append(9)\n    if n>10: \n        nums.append(11)\n        nums.append(10)\n    if n>11: \n        nums.append(12)\n        nums.append(11)\n    if n>12: \n        nums.append(13)\n        nums.append(12)\n    if n>13: \n        nums.append(14)\n        nums.append(13)\n    if n>14: \n        nums.append(15)\n        nums.append(14)\n    if n>15: \n        nums.append(16)\n        nums.append(15)\n    if n>16: \n        nums.append(17)\n        nums.append(16)\n    if n>17: \n        nums.append(18)\n        nums.append(17)\n    if n>18: \n        nums.append(19)\n        nums.append(18)\n    if n>19: \n        nums.append(20)\n        nums.append(19)\n    if n>20: \n        nums.append(21)\n        nums.append(20)\n    if n>21: \n        nums.append(22)\n        nums.append(21)\n    if n>22: \n        nums.append(23)\n        nums.append(22)\n    if n>23: \n        nums.append(24)\n        nums.append(23)\n    if n>24: \n        nums.append(25)\n        nums.append(24)\n    if n>25: \n        nums.append(26)\n        nums.append(25)\n    if n>26: \n        nums.append(27)\n        nums.append(26)\n    if n>27: \n        nums.append(28)\n        nums.append(27)\n    if n>28: \n        nums.append(29)\n        nums.append(28)\n    if n>29: \n        nums.append(30)\n        nums.append(29)\n    if n>30: \n        nums.append(31)\n        nums.append(30)\n    if n>31: \n        nums.append(32)\n        nums.append(31)\n    if n>32: \n        nums.append(33)\n        nums.append(32)\n    if n>33: \n        nums.append(34)\n        nums.append(33)\n    if n>34: \n        nums.append(35)\n        nums.append(34)\n    if n>35: \n        nums.append(36)\n        nums.append(35)\n    if n>36: \n        nums.append(37)\n        nums.append(36)\n    if n>37: \n        nums.append(38)\n        nums.append(37)\n    if n>38: \n        nums.append(39)\n        nums.append(38)\n    if n>39: \n        nums.append(40)\n        nums.append(39)\n    if n>40: \n        nums.append(41)\n        nums.append(40)\n    if n>41: \n        nums.append(42)\n        nums.append(41)\n    if n>42: \n        nums.append(43)\n        nums.append(42)\n    if n>43: \n        nums.append(44)\n        nums.append(43)\n    if n>44: \n        nums.append(45)\n        nums.append(44)\n    if n>45: \n        nums.append(46)\n        nums.append(45)\n    if n>46: \n        nums.append(47)\n        nums.append(46)\n    if n>47: \n        nums.append(48)\n        nums.append(47)\n    if n>48: \n        nums.append(49)\n        nums.append(48)\n    if n>49: \n        nums.append(50)\n        nums.append(49)\n    if n>50: \n        nums.append(51)\n        nums.append(50)\n    if n>51: \n        nums.append(52)\n        nums.append(51)\n    if n>52: \n        nums.append(53)\n        nums.append(52)\n    if n>53: \n        nums.append(54)\n        nums.append(53)\n    if n>54: \n        nums.append(55)\n        nums.append(54)\n    if n>55: \n        nums.append(56)\n        nums.append(55)\n    if n>56: \n        nums.append(57)\n        nums.append(56)\n    if n>57: \n        nums.append(58)\n        nums.append(57)\n    if n>58: \n        nums.append(59)\n        nums.append(58)\n    if n>59: \n        nums.append(60)\n        nums.append(59)\n    if n>60: \n        nums.append(61)\n        nums.append(60)\n    if n>61: \n        nums.append(62)\n        nums.append(61)\n    if n>62: \n        nums.append(63)\n        nums.append(62)\n    if n>63: \n        nums.append(64)\n        nums.append(63)\n    if n>64: \n        nums.append(65)\n        nums.append(64)\n    if n>65: \n        nums.append(66)\n        nums.append(65)\n    if n>66: \n        nums.append(67)\n        nums.append(66)\n    if n>67: \n        nums.append(68)\n        nums.append(67)\n    if n>68: \n        nums.append(69)\n        nums.append(68)\n    if n>69: \n        nums.append(70)\n        nums.append(69)\n    if n>70: \n        nums.append(71)\n        nums.append(70)\n    if n>71: \n        nums.append(72)\n        nums.append(71)\n    if n>72: \n        nums.append(73)\n        nums.append(72)\n    if n>73: \n        nums.append(74)\n        nums.append(73)\n    if n>74: \n        nums.append(75)\n        nums.append(74)\n    if n>75: \n        nums.append(76)\n        nums.append(75)\n    if n>76",
        "num_ids": 1999
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # polte number is a number which when divided by 2 gives remainder 0\n    # and when divided by 4 gives remainder 1.\n    # this function is to be defined recursively.\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n%4==0:\n        return (n//4)*2\n    elif n%4==1:\n        return (n//4)*2+1\n    else:\n        return is_polite(n-1)\n",
        "num_ids": 123
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = n*(n-1)\n    n = n//2\n    num = (10**(n-1))\n    return num\n",
        "num_ids": 36
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = math.factorial(n)\n    n = (n // (2 * math.factorial(n // 2)))\n    return n\ndef solve(n, k, o):\n    # print(n,k,o)\n    count = 0\n    r = int(n ** 0.5)\n    if n == 1:\n        return 0\n    if n % o == 0:\n        return 1\n    if n < r:\n        return 2\n    if n == r:\n        return 3\n    if n % 2 == 0:\n        return 2\n    for i in range(k, 0, -1):\n        if n % i == 0:\n            count = count + solve(n // i, k, o)\n            if count >= o:\n                return count\n    return count\ndef solve_test(n, k, o):\n    count = 0\n    r = int(n ** 0.5)\n    if n == 1:\n        return 0\n    if n % o == 0:\n        return 1\n    if n < r:\n        return 2\n    if n == r:\n        return 3\n    if n % 2 == 0:\n        return 2\n    for i in range(k, 0, -1):\n        if n % i == 0:\n            count = count + solve_test(n // i, k, o)\n            if count >= o:\n                return count\n    return count\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\ndef lcm(a, b):\n    return a * b // gcd(a, b)\ndef gcd_list(x):\n    if len(x) == 1:\n        return x[0]\n    return gcd_list(x[0::])\ndef lcm_list(x):\n    if len(x) == 1:\n        return x[0]\n    return lcm_list(x[0::])\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_num(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef to_binary(n):\n    '''\n    Write a function to convert a non-negative integer to binary (base-2). \n    geeksforgeeks.org/convert-a-non-negative-integer-to-binary-number/\n    '''\n    if n == 0:\n        return 0\n    return (n - 1) * (to_binary(n - 1)) + 1\ndef to_binary_reverse(n):\n    '''\n    Write a function to convert a non-negative integer to binary (base-2). \n    geeksforgeeks.org/convert-a-non-negative-integer-to-binary-number/\n    '''\n    if n == 0:\n        return 0\n    return 1 + to_binary_reverse(n // 2) * 10\ndef to_binary_reverse_iter(n):\n    '''\n    Write a function to convert a non-negative integer to binary (base-2). \n    geeksforgeeks.org/convert-a-non-negative-integer-to-binary-number/\n    '''\n    if n == 0:\n        return 0\n    return 1 + to_binary_reverse_iter(n // 2) * 10\ndef to_binary_iter(n):\n    '''\n    Write a function to convert a non-negative integer to binary (base-2). \n    geeksforgeeks.org/convert-a-non-negative-integer-to-binary-number/\n    '''\n    if n == 0:\n        return 0\n    s = ''\n    while n > 0:\n        s += str(n % 2)\n        n = n // 2\n    return s[::-1]\ndef prime_factors(n):\n    '''\n    Write a function to find all prime factors of n. geeksforgeeks.org/prime-factors-of-an-integer/\n    '''\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\ndef count_prime_factors(n):\n    '''\n    Write a function to find all prime factors of n. geeksforgeeks.org/prime-factors-of-an-integer/\n    '''\n    factors = []\n    count = 0\n    if n == 1:\n        return 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i not in factors:\n                factors.append(i)\n            while n % i == 0:\n                count += 1\n                n = n // i\n    if n > 2:\n        factors.append(n)\n    return count + 1\ndef prime_factors_count(n):\n    '''\n    Write a function to find all prime factors of n. geeksforgeeks.org/prime-factors-of-an-integer/\n    '''\n    factors = []\n    count = 0\n    if n == 1:\n        return 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i not in factors:\n                factors.append(i)\n            while n % i == 0:\n                count += 1\n                n = n // i\n    if n > 2:\n        factors.append(n)\n    return count + 1\ndef prime_factors_count_iter(n):\n    '''\n    Write a function to find all prime factors of n. geeksforgeeks.org/prime-factors-of-an-integer/\n    '''\n    factors = []\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count\ndef count_prime_factors_iter(n):\n    '''\n    Write a function to find all prime factors of n. geeksforgeeks.org/prime-factors-of-an-integer/\n    '''\n    factors = []\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count\ndef get_sum_to(n):\n    '''\n    Write a function to find the sum of the first n terms of the series (1/1 + 1/2 +... + 1/n)\n    geeksforgeeks.org/get-sum-of-the-first-n-terms-of-the-series\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += 1 / i\n    return sum\ndef get_sum_to_iter(n):\n    '''\n    Write a function to find the sum of the first n terms of the series (1/1 + 1/2 +... + 1/n)\n    geeksforgeeks.org/get-sum-of-the-first-n-terms-of-the-series\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += 1 / i\n    return sum\ndef sum_to_10(n):\n    '''\n    Write a function to find the sum of the first n terms of the series (1/1 + 1/2 +... + 1/n)\n    geek",
        "num_ids": 37
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n",
        "num_ids": 30
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    from itertools import chain, tee\n    a, b = tee(l1)\n    next(b, None)\n    return zip(a,b)\n",
        "num_ids": 40
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1_len = len(l1)\n    res = []\n    for i in range(l1_len-1):\n        res.append([l1[i], l1[i+1]])\n    return res\n",
        "num_ids": 56
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(l1, l1[1:])\n",
        "num_ids": 16
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return l2\n",
        "num_ids": 47
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    def func(item):\n        return list(range(item-1, item+2))\n    return list(map(func, l1))\n",
        "num_ids": 36
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) % 2:\n        return zip(l1, l1[1:])\n    else:\n        return zip(l1, l1[1:])\n",
        "num_ids": 45
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n",
        "num_ids": 32
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n",
        "num_ids": 30
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    newList = []\n    for i in range(0, len(l1)-1):\n        newList.append([l1[i], l1[i+1]])\n    return newList\n",
        "num_ids": 49
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    from collections import defaultdict\n    res = defaultdict(int)\n    for i in arr:\n        res[i] += 1\n    pairs = 0\n    for i in res:\n        if sum - i in res:\n            pairs += res[i] * res[sum - i]\n    return pairs\n",
        "num_ids": 75
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    low, high = 0, len(arr)-1\n    count = 0\n    while low<high:\n        if arr[low] + arr[high] == sum:\n            count += 1\n            low += 1\n            high -= 1\n        elif arr[low] + arr[high] > sum:\n            high -= 1\n        else:\n            low += 1\n",
        "num_ids": 93
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if arr == []:\n        return 0\n    if len(arr) == 1:\n        return int(arr[0] == sum)\n    return int(get_pairs_count(arr[1:], sum-arr[0]) + get_pairs_count(arr[1:], sum))\n",
        "num_ids": 73
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    n = len(arr)\n    count = 0\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr)<2:\n        return 0\n    pairs = 0\n    arr.sort()\n    i = 0\n    j = 1\n    while i < len(arr) and j < len(arr):\n        if arr[i] + arr[j] == sum:\n            pairs += 1\n            i += 1\n            j += 1\n        elif arr[i] + arr[j] < sum:\n            i += 1\n        else:\n            j += 1\n",
        "num_ids": 115
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    n = len(arr)\n    pairs = 0\n    for i in range(n):\n        low = i + 1\n        high = n - 1\n        while low < high:\n            if arr[i] + arr[low] + arr[high] == sum:\n                pairs += 1\n                low += 1\n                high -= 1\n            elif arr[i] + arr[low] + arr[high] < sum:\n                low += 1\n            else:\n                high -= 1\n    return pairs\n",
        "num_ids": 127
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    dict_count = {}\n    for i in xrange(len(arr)):\n        if sum - arr[i] in dict_count:\n            return dict_count[sum-arr[i]] + 1\n        else:\n            dict_count[arr[i]] = 1\n",
        "num_ids": 67
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    from collections import Counter\n    return len([c for c in Counter(arr).values() if c>1])\n",
        "num_ids": 28
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    dict = {}\n    for num in arr:\n        if sum-num in dict:\n            return (sum-num, num)\n        dict[num] = True\n",
        "num_ids": 41
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n    \n",
        "num_ids": 19
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1+li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1) - set(li2)))\n",
        "num_ids": 19
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1) - set(li2)))\n    \ndef DictToString(Dict):\n    '''\n    Write a python function to convert a dictionary to string.\n    '''\n    String = ''\n    for k,v in Dict.iteritems():\n        String = String + '{}:{}\\t'.format(k,v)\n    return(String)\n    \ndef DictFromString(String):\n    '''\n    Write a python function to convert a string to a dictionary.\n    '''\n    Dict = {}\n    for line in String.split('\\n'):\n        if line.strip()!= '':\n            a = line.split(':')\n            Dict[a[0].strip()] = a[1].strip()\n    return(Dict)\n    \ndef CheckExist(Path):\n    '''\n    Write a python function to check if a path exist.\n    '''\n    if os.path.exists(Path):\n        return(True)\n    else:\n        return(False)\n    \ndef DeleteFile(Path):\n    '''\n    Write a python function to delete a file.\n    '''\n    os.remove(Path)\n    \ndef WriteFile(Path,Data):\n    '''\n    Write a python function to write a file.\n    '''\n    with open(Path,'w') as f:\n        f.write(Data)\n    \ndef ReadFile(Path):\n    '''\n    Write a python function to read a file.\n    '''\n    with open(Path,'r') as f:\n        Data = f.read()\n    return(Data)\n    \ndef GetExePath(FullPath):\n    '''\n    Write a python function to get the path of an executable file.\n    '''\n    return(os.path.dirname(os.path.abspath(FullPath)))\n    \ndef GetFileName(FullPath):\n    '''\n    Write a python function to get the name of a file.\n    '''\n    return(os.path.basename(FullPath))\n    \ndef GetFileExtension(FullPath):\n    '''\n    Write a python function to get the extension of a file.\n    '''\n    return(os.path.splitext(FullPath)[1])\n    \ndef GetParentDir(Path):\n    '''\n    Write a python function to get the parent directory of a file.\n    '''\n    return(os.path.dirname(Path))\n    \ndef ListDir(Dir,Ext = None,Recursive = False):\n    '''\n    Write a python function to list all files in a directory.\n    '''\n    if Ext == None:\n        List = os.listdir(Dir)\n    else:\n        List = []\n        for i in os.listdir(Dir):\n            if os.path.splitext(i)[1] == Ext:\n                List.append(i)\n    if not Recursive:\n        return(List)\n    else:\n        List2 = []\n        for i in List:\n            List2.extend(ListDir(Dir + '/' + i,Ext,Recursive))\n        return(List2)\n    \ndef ListDirFull(Dir):\n    '''\n    Write a python function to list all files and directories in a directory.\n    '''\n    DirList = []\n    for i in os.listdir(Dir):\n        DirList.append(Dir + '/' + i)\n    return(DirList)\n    \ndef ListDirFullRecursive(Dir):\n    '''\n    Write a python function to list all files and directories in a directory.\n    '''\n    DirList = []\n    for i in os.listdir(Dir):\n        DirList.append(Dir + '/' + i)\n        DirList.extend(ListDirFullRecursive(Dir + '/' + i))\n    return(DirList)\n    \ndef WriteAllFiles(Dir,Data,Ext = None,NewDir = None):\n    '''\n    Write a python function to write all files in a directory.\n    '''\n    if NewDir == None:\n        Dir = Dir + '/'\n    else:\n        Dir = NewDir + '/'\n    DirList = ListDir(Dir,Ext)\n    for i in DirList:\n        with open(Dir + i,'w') as f:\n            f.write(Data)\n    \ndef ReadAllFiles(Dir,Ext = None):\n    '''\n    Write a python function to read all files in a directory.\n    '''\n    DirList = ListDir(Dir,Ext)\n    Data = ''\n    for i in DirList:\n        Data = Data + ReadFile(Dir + i)\n    return(Data)\n    \ndef ListDirRecursive(Dir,Ext = None):\n    '''\n    Write a python function to list all files in a directory.\n    '''\n    if Ext == None:\n        List = os.listdir(Dir)\n    else:\n        List = []\n        for i in os.listdir(Dir):\n            if os.path.splitext(i)[1] == Ext:\n                List.append(i)\n    return(List)\n    \ndef ListDirRecursiveFull(Dir,Ext = None):\n    '''\n    Write a python function to list all files in a directory.\n    '''\n    if Ext == None:\n        List = os.listdir(Dir)\n    else:\n        List = []\n        for i in os.listdir(Dir):\n            if os.path.splitext(i)[1] == Ext:\n                List.append(Dir + '/' + i)\n    return(List)\n    \ndef ListDirRecursiveFullRecursive(Dir,Ext = None):\n    '''\n    Write a python function to list all files in a directory.\n    '''\n    if Ext == None:\n        List = os.listdir(Dir)\n    else:\n        List = []\n        for i in os.listdir(Dir):\n            if os.path.splitext(i)[1] == Ext:\n                List.append(Dir + '/' + i)\n                List.extend(ListDirRecursiveFullRecursive(Dir + '/' + i,Ext))\n    return(List)\n    \ndef CopyDir(Src,Dst):\n    '''\n    Write a python function to copy a directory.\n    '''\n    shutil.copytree(Src,Dst)\n    \ndef CopyFile(Src,Dst):\n    '''\n    Write a python function to copy a file.\n    '''\n    shutil.copy(Src,Dst)\n    \ndef MoveDir(Src,Dst):\n    '''\n    Write a python function to move a directory.\n    '''\n    shutil.move(Src,Dst)\n    \ndef MoveFile(Src,Dst):\n    '''\n    Write a python function to move a file.\n    '''\n    shutil.move(Src,Dst)\n    \ndef RemoveDir(Dir):\n    '''\n    Write a python function to remove a directory.\n    '''\n    shutil.rmtree(Dir)\n    \ndef RemoveFile(Dir):\n    '''\n    Write a python function to remove a file.\n    '''\n    os.remove(Dir)\n    \ndef MakeDir(Dir):\n    '''\n    Write a python function to create a directory.\n    '''\n    os.mkdir(Dir)\n    \ndef MakeEmptyDir(Dir):\n    '''\n    Write a python function to create an empty directory.\n    '''\n    os.makedirs(Dir)\n    \ndef ListDirFullRecursive(Dir,Ext = None):\n    '''\n    Write a python function to list all files and directories in a directory.\n    '''\n    DirList = []\n    for i in os.listdir(Dir):\n        DirList.append(Dir + '/' + i)\n        DirList.extend(ListDirFullRecursive(Dir + '/' + i,Ext))\n    return(DirList)\n    \ndef RemoveEmptyDir(Dir):\n    '''\n    Write a python function to remove empty directories.\n    '''\n    if CheckExist(Dir):\n        if not os.listdir(Dir):\n            os.rmdir(Dir)\n        else:\n            RemoveEmptyDir(Dir + '/' + ListDir(Dir)[0])\n    \ndef CreateDir(Dir):\n    '''\n    Write a python function t",
        "num_ids": 8
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n",
        "num_ids": 19
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum( x**4 for x in range(1, n, 2) )\n",
        "num_ids": 22
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    if n == 1 : \n        return 1\n    sum = 0\n    for i in range(1,n+1) : \n        sum += i**4\n    return sum\n",
        "num_ids": 57
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if (n == 0) : \n        return 0\n    else : \n        return (n**4 + odd_num_sum(n-1))\n",
        "num_ids": 39
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1) : \n        if i % 2!= 0 : \n            total = total + (i**4)\n    return total \n",
        "num_ids": 49
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i**4 for i in range(1, n+1) if i%2 == 1])\n",
        "num_ids": 28
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if (i % 2)!= 0 : \n            sum += i**4\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([x*x*x for x in range(1, n, 2)])\n",
        "num_ids": 24
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    else : \n        return n*n + odd_num_sum(n-1)\n    \nprint odd_num_sum(10)\n    \n    ",
        "num_ids": 51
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 :\n        return 0\n    return n**4 + odd_num_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(i*i*i for i in range(1, n, 2) if i % 4 == 1)\n    \ndef div_by_even(n):\n    '''\n    Write a python function to find the sum of all the divisors of n\n    '''\n    return sum(i for i in range(1, n, 2) if n % i == 0)\n    \ndef last_2_vowels(s):\n    '''\n    Write a python function to find the number of words in a string\n    whose first letter is vowel and the last two letters are vowels\n    '''\n    return sum(1 for i in s.split() if i[0] in 'aeiou' and i[-2:] == 'aeiou')\n    \ndef roman_numerals(n):\n    '''\n    Write a python function to convert a decimal integer into Roman numerals\n    \n    '''\n    rom_num = {1:'I', 2:'II', 3:'III', 4:'IV', 5:'V', 6:'VI', 7:'VII', 8:'VIII', 9:'IX', 10:'X', 50:'L', 100:'C', 500:'D', 1000:'M'}\n    result = \"\"\n    for i in rom_num:\n        while n//i > 0:\n            result += rom_num[i]\n            n -= i\n    return result\n    \ndef is_pangram(s):\n    '''\n    Write a python function to check whether a string is panagram or not\n    '''\n    return set(s.lower()) >= set('abcdefghijklmnopqrstuvwxyz')\n    \ndef is_square(n):\n    '''\n    Write a python function to check whether a number is square or not\n    '''\n    return int(n**0.5)**2 == n\n",
        "num_ids": 17
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return True if not stack else False\n",
        "num_ids": 65
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in \"([{\":\n            stack.append(i)\n        elif i in \")]}\":\n            if not stack:\n                return False\n            popped = stack.pop()\n            if (popped+i) not in [\"()\", \"{}\", \"[]\"]:\n                return False\n    return not stack\n",
        "num_ids": 91
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for c in exp:\n        if c in '({':\n            stack.append(c)\n        else:\n            if not stack:\n                return False\n            open = stack.pop()\n            if c == ')':\n                if open!= '(':\n                    return False\n            else:\n                if open!= '{':\n                    return False\n    return not stack\n",
        "num_ids": 94
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_brackets = {'(':1, '[':2, '{':3}\n    closed_brackets = {')':1, ']':2, '}':3}\n    if len(exp) == 1:\n        return True\n    for i in exp:\n        if i in open_brackets:\n            stack.append(i)\n        elif i in closed_brackets:\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= closed_brackets[i]:\n                return False\n    return not len(stack)\n",
        "num_ids": 150
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    dic = {')':'(',']':'[','}':'{'}\n    for char in exp:\n        if char in dic.values():\n            stack.append(char)\n        elif char in dic.keys():\n            if dic[char] == stack.pop():\n                continue\n            else:\n                return False\n    return not stack\n",
        "num_ids": 94
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in ('(', ')', '[', ']', '{', '}', '<', '>', '^'):\n            if char == '{':\n                stack.append(['{'])\n            elif char == '}':\n                if len(stack) == 0:\n                    return False\n                last_stack_item = stack.pop()\n                if last_stack_item[0] == '{' and last_stack_item[1]!= '}':\n                    return False\n            elif char == ']':\n                if len(stack) == 0:\n                    return False\n                last_stack_item = stack.pop()\n                if last_stack_item[0] == '[' and last_stack_item[1]!= ']':\n                    return False\n            elif char == ')':\n                if len(stack) == 0:\n                    return False\n                last_stack_item = stack.pop()\n                if last_stack_item[0] == '(' and last_stack_item[1]!= ')':\n                    return False\n            elif char == '<':\n                if len(stack) == 0:\n                    return False\n                last_stack_item = stack.pop()\n                if last_stack_item[0] == '>' and last_stack_item[1]!= '<':\n                    return False\n            elif char == '>':\n                if len(stack) == 0:\n                    return False\n                last_stack_item = stack.pop()\n                if last_stack_item[0] == '<' and last_stack_item[1]!= '>':\n                    return False\n            elif char == '^':\n                if len(stack) == 0:\n                    return False\n                last_stack_item = stack.pop()\n                if last_stack_item[0] == '<' and last_stack_item[1]!= '>':\n                    return False\n        else:\n            continue\n    if len(stack) > 0:\n        return False\n    return True\n",
        "num_ids": 495
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == '':\n        return False\n    stack = []\n    for i in exp:\n        if i == '{':\n            stack.append('{')\n        elif i == '(':\n            stack.append('(')\n        elif i == '[':\n            stack.append('[')\n        elif i == '}':\n            if stack:\n                if stack.pop() == '{':\n                    pass\n                else:\n                    return False\n            else:\n                return False\n        elif i == ')':\n            if stack:\n                if stack.pop() == '(':\n                    pass\n                else:\n                    return False\n            else:\n                return False\n        elif i == ']':\n            if stack:\n                if stack.pop() == '[':\n                    pass\n                else:\n                    return False\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False\n",
        "num_ids": 221
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    op = {'[': 1, '{': 2, '(': 3, '<': 4, '=': 5, '>': 6, ')': 7, ']': 8, '}': 9, ')': 10, '>': 11, '<': 12, '=': 13, '+': 14, '-': 15, '*': 16}\n    stk = deque()\n    for ch in exp:\n        if ch in op:\n            stk.append(ch)\n        else:\n            if not len(stk) or (op[stk.pop()] > op[ch]):\n                return False\n    if len(stk):\n        return False\n    return True\n",
        "num_ids": 166
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_brackets = deque()\n    for c in exp:\n        if c == '(':\n            open_brackets.append(c)\n        elif c == ')':\n            try:\n                open_brackets.pop()\n            except IndexError:\n                return False\n    return True if len(open_brackets) == 0 else False\n",
        "num_ids": 85
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append('(')\n        elif i == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n",
        "num_ids": 59
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    n = len(test_str)\n    num_words = 0\n    while n > 0:\n        if test_str[n-K:n] ==''*K:\n            test_str = test_str[:n-K]\n            n -= K\n        else:\n            n -= 1\n    return test_str\n",
        "num_ids": 79
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join(test_str.split(' ')[K:])\n",
        "num_ids": 19
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    i = 0\n    test_str = test_str.split(' ')\n    res = []\n    for item in test_str:\n        if len(item)!= K:\n            res.append(item)\n    return res\n",
        "num_ids": 57
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    result = []\n    for word in test_str:\n        if len(word) == K:\n            pass\n        else:\n            result.append(word)\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) == 0:\n        return []\n    if K > len(test_str):\n        return [test_str]\n    if K == len(test_str):\n        return []\n",
        "num_ids": 52
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    if K <= 0:\n        return test_str\n",
        "num_ids": 17
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = ''\n    for i in range(len(test_str)):\n        if len(test_str[i:]) >= K:\n            result += test_str[i:] +''\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = ''\n    for i in range(len(test_str)):\n        if test_str[i] =='':\n            new_str +=''\n            continue\n        if i == len(test_str)-1:\n            new_str += test_str[i]\n        if i == len(test_str)-K:\n            break\n        else:\n            new_str += test_str[i]\n            continue\n    return new_str\n",
        "num_ids": 111
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    pass\n    pass\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return \" \".join([word for word in test_str.split() if len(word)!= K])\n",
        "num_ids": 27
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if(text and pattern):\n        occurance = 0\n        length = len(text)\n        position = None\n        if(text and pattern and length>=len(pattern)):\n            for i in range(length):\n                if(text[i:i+len(pattern)] == pattern):\n                    occurance += 1\n                    position = i\n        return occurance,position\n    else:\n        return None\n",
        "num_ids": 97
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_length=len(pattern)\n    text_length=len(text)\n    i=0\n    while i+pattern_length<=text_length:\n        match=text[i:i+pattern_length]\n        if match==pattern:\n            pos=i\n            break\n        i+=1\n    return pos\n",
        "num_ids": 79
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=0\n    m = re.search(pattern, text)\n    if m:\n        occurance = m.group(1)\n    return occurance\n",
        "num_ids": 41
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #we are checking for a substring in a string\n    return re.search(pattern,text)\n",
        "num_ids": 26
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    if pattern in text:\n        substring = re.search(pattern,text)\n        start = substring.start()\n        end = substring.end()\n        print('\\noccurance_substring')\n        print('start position: ',start)\n        print('end position: ',end)\n    else:\n        print('\\noccurance_substring')\n        print('No match found')\n",
        "num_ids": 112
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance = []\n    match = re.findall(pattern,text)\n    if match:\n        for match in match:\n            occurance.append(match)\n        return occurance\n    else:\n        return None\n",
        "num_ids": 55
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_length = len(pattern)\n    for i in range(len(text) - pattern_length + 1):\n        if text[i:i+pattern_length] == pattern:\n            return [i,i+pattern_length]\n    return None\n",
        "num_ids": 62
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_occ = []\n    for i in range(0,len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            pattern_occ.append(i)\n    return pattern_occ\ndef find_longest_palindrome(text):\n    '''\n    Write a function to find the longest palindromic substring in a string.\n    '''\n    current_palindrome = ''\n    for i in range(0,len(text)):\n        if i<len(text)-1:\n            if text[i]==text[i+1]:\n                current_palindrome = current_palindrome + text[i]\n            else:\n                if len(current_palindrome)>len(text[i:]):\n                    return current_palindrome\n                else:\n                    current_palindrome = ''\n        else:\n            if len(current_palindrome)>len(text[i:]):\n                return current_palindrome\n            else:\n                current_palindrome = ''\ndef find_longest_palindromic_substring(text):\n    '''\n    Write a function to find the longest palindromic substring in a string.\n    '''\n    longest_palindrome = ''\n    for i in range(0,len(text)):\n        if i<len(text)-1:\n            if text[i]==text[i+1]:\n                current_palindrome = text[i:i+2]\n                for j in range(0,len(text)-len(current_palindrome)+1):\n                    if text[j:j+len(current_palindrome)] == current_palindrome:\n                        if len(current_palindrome)>len(longest_palindrome):\n                            longest_palindrome = current_palindrome\n            else:\n                current_palindrome = ''\n        else:\n            if len(current_palindrome)>len(longest_palindrome):\n                longest_palindrome = current_palindrome\n            current_palindrome = ''\n    return longest_palindrome\ndef find_longest_palindromic_substring_with_spaces(text):\n    '''\n    Write a function to find the longest palindromic substring in a string.\n    '''\n    longest_palindrome = ''\n    for i in range(0,len(text)):\n        if i<len(text)-1:\n            if text[i]==text[i+1]:\n                current_palindrome = text[i:i+2]\n                for j in range(0,len(text)-len(current_palindrome)+1):\n                    if text[j:j+len(current_palindrome)] == current_palindrome:\n                        if len(current_palindrome)>len(longest_palindrome):\n                            longest_palindrome = current_palindrome\n            else:\n                current_palindrome = ''\n        else:\n            if len(current_palindrome)>len(longest_palindrome):\n                longest_palindrome = current_palindrome\n            current_palindrome = ''\n    return longest_palindrome\ndef find_longest_palindromic_substring_with_reverse_comp(text):\n    '''\n    Write a function to find the longest palindromic substring in a string.\n    '''\n    longest_palindrome = ''\n    for i in range(0,len(text)):\n        if i<len(text)-1:\n            if text[i]==text[i+1]:\n                current_palindrome = text[i:i+2]\n                for j in range(0,len(text)-len(current_palindrome)+1):\n                    if text[j:j+len(current_palindrome)] == current_palindrome:\n                        if len(current_palindrome)>len(longest_palindrome):\n                            longest_palindrome = current_palindrome\n            else:\n                current_palindrome = ''\n        else:\n            if len(current_palindrome)>len(longest_palindrome):\n                longest_palindrome = current_palindrome\n            current_palindrome = ''\n    return longest_palindrome\ndef find_longest_palindromic_substring_with_reverse_comp_and_spaces(text):\n    '''\n    Write a function to find the longest palindromic substring in a string.\n    '''\n    longest_palindrome = ''\n    for i in range(0,len(text)):\n        if i<len(text)-1:\n            if text[i]==text[i+1]:\n                current_palindrome = text[i:i+2]\n                for j in range(0,len(text)-len(current_palindrome)+1):\n                    if text[j:j+len(current_palindrome)] == current_palindrome:\n                        if len(current_palindrome)>len(longest_palindrome):\n                            longest_palindrome = current_palindrome\n            else:\n                current_palindrome = ''\n        else:\n            if len(current_palindrome)>len(longest_palindrome):\n                longest_palindrome = current_palindrome\n            current_palindrome = ''\n    return longest_palindrome\ndef find_longest_palindromic_substring_with_reverse_comp_and_spaces_2(text):\n    '''\n    Write a function to find the longest palindromic substring in a string.\n    '''\n    longest_palindrome = ''\n    for i in range(0,len(text)):\n        if i<len(text)-1:\n            if text[i]==text[i+1]:\n                current_palindrome = text[i:i+2]\n                for j in range(0,len(text)-len(current_palindrome)+1):\n                    if text[j:j+len(current_palindrome)] == current_palindrome:\n                        if len(current_palindrome)>len(longest_palindrome):\n                            longest_palindrome = current_palindrome\n            else:\n                current_palindrome = ''\n        else:\n            if len(current_palindrome)>len(longest_palindrome):\n                longest_palindrome = current_palindrome\n            current_palindrome = ''\n    return longest_palindrome\ndef find_longest_palindromic_substring_with_reverse_comp_2(text):\n    '''\n    Write a function to find the longest palindromic substring in a string.\n    '''\n    longest_palindrome = ''\n    for i in range(0,len(text)):\n        if i<len(text)-1:\n            if text[i]==text[i+1]:\n                current_palindrome = text[i:i+2]\n                for j in range(0,len(text)-len(current_palindrome)+1):\n                    if text[j:j+len(current_palindrome)] == current_palindrome:\n                        if len(current_palindrome)>len(longest_palindrome):\n                            longest_palindrome = current_palindrome\n            else:\n                current_palindrome = ''\n        else:\n            if len(current_palindrome)>len(longest_palindrome):\n                longest_palindrome = current_palindrome\n            current_palindrome = ''\n    return longest_palindrome\ndef find_longest_palindromic_substring_with_reverse_comp_2_method_2(text):\n    '''\n    Write a function to find the longest palindromic substring in a string.\n    '''\n    longest_palindrome = ''\n    for i in range(0,len(text)):\n        if i<len(text)-1:\n            if text[i]==text[i+1]:\n                current_palindrome = text[i:i+2]\n                for j in range(0,len(text)-len(current_palindrome)+1)",
        "num_ids": 89
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pat = re.compile(pattern)\n    print(pat.findall(text))\n",
        "num_ids": 24
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match=re.search(pattern,text)\n    if match:\n        print(match.start())\n    else:\n        print('None')\n",
        "num_ids": 37
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    list_size = len(nums)\n    for i in range(0, list_size, 2):\n        if (nums[i] % 2!= 0):\n            print(nums[i])\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    lst = nums\n    for i in range(0, len(lst), 2):\n        if not (lst[i] % 2):\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in xrange(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    n = len(nums)\n    for i in range(1, n, 2):\n        if i >= n:\n            break\n        if nums[i] % 2!= 1:\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i + 1) % 2!= 0 and nums[i] % 2!= 0:\n            return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return True\n    if len(nums) == 1:\n        return True\n    if len(nums) == 2:\n        return nums[1]%2 == 0 and nums[0]%2 == 0\n    else:\n        return nums[0]%2 == 0 and nums[1]%2 == 0 and odd_position(nums[2:])\n",
        "num_ids": 102
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(nums[i] % 2 == 1 for i in range(1, len(nums), 2))\n",
        "num_ids": 30
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return (nums[0]%2==1 and nums[1]%2==1 and nums[2]%2==1) or (nums[3]%2==1 and nums[4]%2==1 and nums[5]%2==1)\n",
        "num_ids": 68
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(num % 2 for num in nums[1::2])\n",
        "num_ids": 20
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 102
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    test_str = test_str.lower()\n    count = 0\n    for i in range(0,len(test_str)-1):\n        if test_str[i]+test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # O(n) time complexity, we need to iterate over each character\n    vowels = 'AEIOUaeiou'\n    vowel_count = 0\n    for i in xrange(1, len(test_str)):\n        if test_str[i] in vowels and test_str[i-1] in vowels:\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 100
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiouAEIOU':\n            if i-1 >= 0 and test_str[i-1] in 'aeiouAEIOU':\n                vowels += 1\n            if i+1 < len(test_str) and test_str[i+1] in 'aeiouAEIOU':\n                vowels += 1\n    return vowels\n",
        "num_ids": 117
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return sum(test_str.count(i) for i in ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'))\n",
        "num_ids": 49
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowel_count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 94
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = ['a','e','i','o','u']\n    test_str = test_str.lower()\n    \n    counter = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            for j in range(i-1, i+2):\n                if j >= 0 and j < len(test_str):\n                    if test_str[j] in vowels:\n                        counter += 1\n    return counter\n",
        "num_ids": 119
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    vowel_count = 0\n    for i in range(0,len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 85
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(0, len(test_str) - 1):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n            if test_str[i + 1] in ['a', 'e', 'i', 'o', 'u']:\n                vowel_count += 1\n    print vowel_count\n",
        "num_ids": 98
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for i in arr:\n        if i not in arr[1:]:\n            total = total + i\n    print total\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum = sum + i\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum([x for x in arr if arr.count(x)==1])\n",
        "num_ids": 22
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = [1,2,3,4,5,4,3,5,3,6,7,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,7,6,5,4,3,2,1]\n    arr_set = set(arr)\n    count = 0\n    for i in arr_set:\n        count += i\n    print count\n",
        "num_ids": 106
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(arr) - sum(set(arr))\n",
        "num_ids": 16
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "num_ids": 11
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for element in arr:\n        if arr.count(element) == 1:\n            sum += element\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if arr == []:\n        return 0\n    else:\n        return arr[0] + find_sum(arr[1:])\n",
        "num_ids": 34
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # we can do this by using set(), but that would be O(n) complexity\n    s = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            s += i\n    return s\n",
        "num_ids": 55
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = sum(set(arr))\n    return s\n",
        "num_ids": 16
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    list2 = list1\n    # creating new list\n    count = 0\n    result = []\n    length = len(list2)\n    while count<length:\n        result.append(list2[count])\n        # grouping consecutive element\n        group = list2[count+1:]\n        consecutive_duplicate = [list2[count]]\n        count1 = 0\n        for count1 in group:\n            if count1 == consecutive_duplicate[0]:\n                consecutive_duplicate.append(count1)\n            else:\n                break\n        if consecutive_duplicate!= []:\n            result.append(consecutive_duplicate)\n        count = count + len(consecutive_duplicate) + 1\n",
        "num_ids": 181
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    for k, g in groupby(list1):\n        res.append(list(g))\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist = []\n    for k, g in groupby(list1):\n        sublist.append(list(g))\n    return sublist\n",
        "num_ids": 37
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = []\n    for k, g in groupby(enumerate(list1), lambda x:x[0]-x[1]):\n        group = list(map(lambda x:x[1], g))\n        groups.append(group)\n    return groups\n",
        "num_ids": 65
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = []\n    for k, g in groupby(enumerate(list1), lambda x:x[0]-x[1]):\n        groups.append(map(itemgetter(1), g))\n    return groups\n",
        "num_ids": 56
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    output = [[list1[0]]]\n    for k, g in groupby(enumerate(list1), lambda x:x[0]-x[1]):\n        output.append(map(itemgetter(1), g))\n    return output\ndef get_date_time(list1):\n    '''\n    Write a function to take in a list of datetime strings and return the list sorted by time.\n    '''\n    converted_list = []\n    for date_time in list1:\n        converted_list.append(datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S'))\n    converted_list.sort()\n    return converted_list\ndef get_date_time_reverse(list1):\n    '''\n    Write a function to take in a list of datetime strings and return the list sorted by time.\n    '''\n    converted_list = []\n    for date_time in list1:\n        converted_list.append(datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S'))\n    converted_list.sort(reverse=True)\n    return converted_list\ndef get_date_range(list1):\n    '''\n    Write a function to take in a list of datetime strings and return the list sorted by time.\n    '''\n    converted_list = []\n    for date_time in list1:\n        converted_list.append(datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S'))\n    return [x for x in list(converted_list) if x.minute == 0 and x.hour == 0]\ndef get_date_range_reverse(list1):\n    '''\n    Write a function to take in a list of datetime strings and return the list sorted by time.\n    '''\n    converted_list = []\n    for date_time in list1:\n        converted_list.append(datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S'))\n    return [x for x in list(converted_list) if x.minute == 0 and x.hour == 0 and x.day == 25]\ndef convert_to_object(list1):\n    '''\n    Write a function to convert a list of datetime strings to datetime objects.\n    '''\n    converted_list = []\n    for date_time in list1:\n        converted_list.append(datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S'))\n    return converted_list\ndef convert_to_object_reverse(list1):\n    '''\n    Write a function to convert a list of datetime strings to datetime objects.\n    '''\n    converted_list = []\n    for date_time in list1:\n        converted_list.append(datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S'))\n    converted_list.sort(reverse=True)\n    return converted_list\ndef get_date_range_reverse_2(list1):\n    '''\n    Write a function to take in a list of datetime strings and return the list sorted by time.\n    '''\n    converted_list = []\n    for date_time in list1:\n        converted_list.append(datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S'))\n    return [x for x in list(converted_list) if x.minute == 0 and x.hour == 0 and x.day == 25]\ndef get_date_range_reverse_3(list1):\n    '''\n    Write a function to take in a list of datetime strings and return the list sorted by time.\n    '''\n    converted_list = []\n    for date_time in list1:\n        converted_list.append(datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S'))\n    return [x for x in list(converted_list) if x.minute == 0 and x.hour == 0 and x.day == 25 and x.year >= 2016]\ndef get_date_range_reverse_4(list1):\n    '''\n    Write a function to take in a list of datetime strings and return the list sorted by time.\n    '''\n    converted_list = []\n    for date_time in list1:\n        converted_list.append(datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S'))\n    return [x for x in list(converted_list) if x.minute == 0 and x.hour == 0 and x.day == 25 and x.year >= 2016 and x.month <= 9]\ndef get_date_range_reverse_5(list1):\n    '''\n    Write a function to take in a list of datetime strings and return the list sorted by time.\n    '''\n    converted_list = []\n    for date_time in list1:\n        converted_list.append(datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S'))\n    return [x for x in list(converted_list) if x.minute == 0 and x.hour == 0 and x.day == 25 and x.year >= 2016 and x.month <= 9 and x.month >= 1]\ndef get_date_range_reverse_6(list1):\n    '''\n    Write a function to take in a list of datetime strings and return the list sorted by time.\n    '''\n    converted_list = []\n    for date_time in list1:\n        converted_list.append(datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S'))\n    return [x for x in list(converted_list) if x.minute == 0 and x.hour == 0 and x.day == 25 and x.year >= 2016 and x.month <= 9 and x.month >= 1 and x.day <= 25]\ndef get_date_range_reverse_7(list1):\n    '''\n    Write a function to take in a list of datetime strings and return the list sorted by time.\n    '''\n    converted_list = []\n    for date_time in list1:\n        converted_list.append(datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S'))\n    return [x for x in list(converted_list) if x.minute == 0 and x.hour == 0 and x.day == 25 and x.year >= 2016 and x.month <= 9 and x.month >= 1 and x.day <= 25 and x.day >= 1]\ndef get_date_range_reverse_8(list1):\n    '''\n    Write a function to take in a list of datetime strings and return the list sorted by time.\n    '''\n    converted_list = []\n    for date_time in list1:\n        converted_list.append(datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S'))\n    return [x for x in list(converted_list) if x.minute == 0 and x.hour == 0 and x.day == 25 and x.year >= 2016 and x.month <= 9 and x.month >= 1 and x.day <= 25 and x.day >= 1 and x.day <= 19]\ndef get_date_range_reverse_9(list1):\n    '''\n    Write a function to take in a list of datetime strings and return the list sorted by time.\n    '''\n    converted_list = []\n    for date_time in list1:\n        converted_list.append(datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S'))\n    return [x for x in list(converted_list) if x.minute == 0 and x.hour == 0 and x.day == 25 and x.year >= 2016 and x.month <= 9 and x.month >= 1 an",
        "num_ids": 110
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # the list of consecutive duplicates of the list\n    list2 = []\n",
        "num_ids": 20
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    newlist = []\n    for k, g in groupby(list1):\n        newlist.append(list(g))\n    return newlist\n",
        "num_ids": 37
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #return [ list(g) for k,g in groupby(list1)]\n    return [list(g) for k,g in groupby(list1)]\n    #return [list(g) for k,g in groupby(list1)]\n",
        "num_ids": 61
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        yield [x for x in group]\n",
        "num_ids": 26
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #count = {}\n    #for i in list1:\n    #    if i in count:\n    #        count[i] += 1\n    #    else:\n    #        count[i] = 1\n    #return count\n    \n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1987
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Example: list1 = [[1, 1, 2], [2, 3, 4], [3, 4, 5]]\n    # Output: {(1, 1, 2): 1, (2, 3, 4): 2, (3, 4, 5): 1}\n    \n    d = {}\n    for x in list1:\n        if tuple(x) not in d:\n            d[tuple(x)] = 1\n        else:\n            d[tuple(x)] += 1\n    return d\n",
        "num_ids": 120
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_of_lists = {}\n    for list_index in range(len(list1)):\n        if tuple(list1[list_index]) in list_of_lists:\n            list_of_lists[tuple(list1[list_index])] += 1\n        else:\n            list_of_lists[tuple(list1[list_index])] = 1\n    return list_of_lists\n",
        "num_ids": 99
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    myDict = {}\n    for i in list1:\n        i = tuple(i)\n        if i in myDict.keys():\n            myDict[i] += 1\n        else:\n            myDict[i] = 1\n    return myDict\n",
        "num_ids": 66
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_sub_count = {}\n    for i in list1:\n        if tuple(i) not in list_sub_count:\n            list_sub_count[tuple(i)] = 1\n        else:\n            list_sub_count[tuple(i)] += 1\n    print(list_sub_count)\n    return list_sub_count\n",
        "num_ids": 86
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        if tuple(sublist) not in counts:\n            counts[tuple(sublist)] = 1\n        else:\n            counts[tuple(sublist)] += 1\n    return counts\n",
        "num_ids": 63
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if type(item) == list:\n            tuple_item = tuple(item)\n            if tuple_item in count:\n                count[tuple_item] += 1\n            else:\n                count[tuple_item] = 1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    mylist = []\n    for i in list1:\n        mylist.append(tuple(i))\n    tuple_list = tuple(mylist)\n    dict1 = {}\n    for i in tuple_list:\n        dict1[i] = tuple_list.count(i)\n    return dict1\n",
        "num_ids": 76
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for i in range(0, len(list1)):\n        if list1[i] in sublist_dict:\n            sublist_dict[list1[i]] += 1\n        else:\n            sublist_dict[list1[i]] = 1\n    return sublist_dict\n",
        "num_ids": 78
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = tuple(list1)\n    return {list1: list1.count(list1)}\n",
        "num_ids": 27
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if test_list==[]:\n        return \n    if len(test_list)==1:\n        return [(0,),(test_list[0],)]\n    comb = find_combinations(test_list[:-1])\n    result = []\n    for i in comb:\n        result.append((i[0]+test_list[-1],)+i)\n    result.extend(comb)\n    return result\ndef find_max_sub_array(arr):\n    '''\n    Write a function to find the maximum sum sub array and corresponding index in an array\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return (arr[0],0,1)\n    else:\n        max_ending_here = max(arr[0],0)\n        max_so_far = max_ending_here\n        i = 1\n        while i<len(arr):\n            max_ending_here = max(max_ending_here+arr[i], arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n            i+=1\n        return (max_so_far,max_ending_here,i)\ndef find_max_sub_array_length(arr):\n    '''\n    Write a function to find the maximum length of the sub array of a given array with maximum sum\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return 1\n    else:\n        max_ending_here = max(arr[0],0)\n        max_so_far = max_ending_here\n        i = 1\n        while i<len(arr):\n            max_ending_here = max(max_ending_here+arr[i], arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n            i+=1\n        return i\ndef longest_palindromic_subsequence(s):\n    '''\n    Write a function to find the longest palindromic subsequence in an array. https://www.geeksforgeeks.org/longest-palindromic-subsequence-substring-set-2-linear-time-algorithm/\n    '''\n    if len(s)==0:\n        return 0\n    if len(s)==1:\n        return 1\n    else:\n        max_ending_here = 1\n        max_so_far = 1\n        for i in range(len(s)):\n            max_ending_here = max(max_ending_here+1, 1)\n            max_so_far = max(max_so_far, max_ending_here)\n            if i-1>=0 and s[i]==s[i-1]:\n                max_ending_here = max(max_ending_here,2)\n                max_so_far = max(max_so_far, max_ending_here)\n            if i+1<len(s) and s[i]==s[i+1]:\n                max_ending_here = max(max_ending_here,2)\n                max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\ndef longest_palindromic_subsequence_2(s):\n    '''\n    Write a function to find the longest palindromic sub string in a given string. https://www.geeksforgeeks.org/longest-palindromic-substring-set-1-linear-time-algorithm/\n    '''\n    if len(s)==0:\n        return 0\n    if len(s)==1:\n        return 1\n    else:\n        max_ending_here = 1\n        max_so_far = 1\n        dp = [[0 for x in range(len(s))] for x in range(len(s))]\n        for i in range(len(s)):\n            dp[i][i]=1\n            max_ending_here = 1\n        for l in range(2,len(s)+1):\n            for i in range(len(s)-l+1):\n                end = i+l-1\n                if s[i]==s[end] and l==2:\n                    dp[i][end]=2\n                elif s[i]==s[end]:\n                    dp[i][end]=2+dp[i+1][end-1]\n                else:\n                    dp[i][end]= max(dp[i+1][end],dp[i][end-1])\n                max_ending_here = max(max_ending_here,dp[i][end])\n                max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\ndef longest_palindromic_subsequence_3(s):\n    '''\n    Write a function to find the longest palindromic substring in a given string. https://www.geeksforgeeks.org/longest-palindromic-substring-set-1-linear-time-algorithm/\n    '''\n    if len(s)==0:\n        return 0\n    if len(s)==1:\n        return 1\n    else:\n        max_ending_here = 1\n        max_so_far = 1\n        dp = [[0 for x in range(len(s))] for x in range(len(s))]\n        for i in range(len(s)):\n            dp[i][i]=1\n        for l in range(2,len(s)+1):\n            for i in range(len(s)-l+1):\n                end = i+l-1\n                if s[i]==s[end] and l==2:\n                    dp[i][end]=2\n                elif s[i]==s[end]:\n                    dp[i][end]=2+dp[i+1][end-1]\n                else:\n                    dp[i][end]= max(dp[i+1][end],dp[i][end-1])\n                max_ending_here = max(max_ending_here,dp[i][end])\n                max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\ndef find_max_product_of_adjacent_elements(arr):\n    '''\n    Write a function to find the maximum product of two adjacent elements in an array\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]*arr[1]\n        max_so_far = arr[0]*arr[1]\n        i = 2\n        while i<len(arr):\n            max_ending_here = max(max_ending_here*arr[i], arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n            i+=1\n        return max_so_far\ndef find_max_product_of_adjacent_elements_2(arr):\n    '''\n    Write a function to find the maximum product of two adjacent elements in an array\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]*arr[1]\n        max_so_far = arr[0]*arr[1]\n        i = 2\n        while i<len(arr):\n            max_ending_here = max(arr[i-1]*arr[i], arr[i])\n            max_so_far = max(max_ending_here, max_so_far)\n            i+=1\n        return max_so_far\ndef count_binary_substrings(arr):\n    '''\n    Write a function to count the number of substrings that appear as a binary number in a given array of digits. https://www.geeksforgeeks.org/count-number-substrings-given-binary-numbers/\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return 1\n    else:\n    ",
        "num_ids": 35
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    test_list = [item for t in test_list for item in t]\n    print test_list\n    return list(combinations(test_list,6))\n",
        "num_ids": 53
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list=[]\n    for a,b,c in test_list:\n        final_list+=list(combinations([a,b,c],2))\n    return final_list\n",
        "num_ids": 47
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # cnt = 1\n    # for i in test_list:\n    #     print(cnt)\n    #     for j in combinations(test_list, cnt):\n    #         print(j)\n    #     cnt += 1\n    res = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            res.append(sum(j))\n    return res\n",
        "num_ids": 109
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = []\n    for num in range(len(test_list)):\n        comb_list = list(combinations(test_list,num+1))\n        for item in comb_list:\n            final_list.append(item)\n    return final_list\n",
        "num_ids": 67
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in range(1,len(test_list)):\n        comb = combinations(test_list,i)\n        for j in list(comb):\n            if sum(j) == 0:\n                sum_list.append(j)\n    return sum_list\n",
        "num_ids": 72
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    l = len(test_list)\n    if l == 0:\n        return []\n    elif l == 1:\n        return [(test_list[0])]\n    else:\n        res = []\n        for i in range(1, l+1):\n            for item in combinations(test_list, i):\n                res.append(sum(item))\n        return res\n    \n    \ndef find_combinations_2(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    l = len(test_list)\n    if l == 0:\n        return []\n    elif l == 1:\n        return [(test_list[0])]\n    else:\n        res = []\n        for i in range(1, l+1):\n            for item in combinations(test_list, i):\n                res.append(sum(item))\n        return res\n",
        "num_ids": 91
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuples_list = [(), (1,), (1,2), (1,2,3), (1,2,3,4), (1,2,3,4,5)]\n    res = []\n    for i in test_list:\n        res.extend(list(combinations(tuples_list, i)))\n    return res\n",
        "num_ids": 84
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    list_of_tuples = []\n    for i in test_list:\n        list_of_tuples.append(tuple(i))\n    combinations_list = list(combinations(list_of_tuples, 4))\n    combinations_list.sort(key = lambda x: sum(x))\n    return combinations_list\n",
        "num_ids": 82
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    len_list = []\n    for item in test_list:\n        len_list.append(len(item))\n        sum_list.append(sum(item))\n",
        "num_ids": 49
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            divisors.append(i)\n    return len(divisors)\n",
        "num_ids": 51
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            count += 1\n    return count % 2 == 0\ndef is_prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not\n    '''\n    if n <= 1 :\n        return False\n    if n == 2 :\n        return True\n    if n > 2 and n % 2 == 0 :\n        return False\n    max = math.floor(math.sqrt(n))\n    for i in range(3, 1 + max, 2) :\n        if n % i == 0 :\n            return False\n    return True\ndef sum_of_digits(n) : \n    '''\n    Write a python function to sum of digits of a number\n    '''\n    if n <= 0 :\n        return 0\n    res = 0\n    while n :\n        res += n % 10\n        n //= 10\n    return res\ndef sum_of_digits_rec(n) :\n    '''\n    Write a python function to sum of digits of a number using recursion\n    '''\n    if n <= 0 :\n        return 0\n    if n == 1 :\n        return n\n    return n % 10 + sum_of_digits_rec(n // 10)\ndef is_perfect(n) : \n    '''\n    Write a python function to check whether a given number is perfect or not\n    '''\n    if n == sum_of_digits(n) :\n        return True\n    return False\ndef is_perfect_rec(n) : \n    '''\n    Write a python function to check whether a given number is perfect or not using recursion\n    '''\n    if n == sum_of_digits_rec(n) :\n        return True\n    return False\ndef check_palindrome(n) : \n    '''\n    Write a python function to check whether a given number is palindrome or not\n    '''\n    temp = n\n    res = 0\n    while temp :\n        res = res * 10 + temp % 10\n        temp //= 10\n    return n == res\ndef check_palindrome_rec(n) : \n    '''\n    Write a python function to check whether a given number is palindrome or not using recursion\n    '''\n    if n == 0 :\n        return True\n    if n % 10 == 0 :\n        return False\n    return check_palindrome_rec(n // 10)\ndef rotate_left_rec(n, k) : \n    '''\n    Write a python function to rotate a given number to left by k times\n    '''\n    if k > n :\n        return 0\n    if k == n :\n        return 1\n    return n * 10 ** (k - 1) + rotate_left_rec(n, k + 1)\ndef rotate_left(n, k) : \n    '''\n    Write a python function to rotate a given number to left by k times\n    '''\n    k = k % n\n    res = 0\n    for i in range(k) :\n        res = res * 10 + n % 10\n        n //= 10\n    return res\ndef rotate_right_rec(n, k) : \n    '''\n    Write a python function to rotate a given number to right by k times\n    '''\n    if k > n :\n        return 0\n    if k == n :\n        return 1\n    return rotate_right_rec(n, k + 1) * 10 + n % 10\ndef rotate_right(n, k) : \n    '''\n    Write a python function to rotate a given number to right by k times\n    '''\n    k = k % n\n    res = 0\n    for i in range(k) :\n        res = res * 10 + n % 10\n        n //= 10\n    return res\ndef is_rotation(a, b) : \n    '''\n    Write a python function to check whether a given number is rotation of another number or not\n    '''\n    if len(a)!= len(b) :\n        return False\n    return rotate_right_rec(a, len(a)) == rotate_right_rec(b, len(a))\ndef is_rotation_rec(a, b) : \n    '''\n    Write a python function to check whether a given number is rotation of another number or not using recursion\n    '''\n    if len(a)!= len(b) :\n        return False\n    return rotate_right_rec(a, len(a)) == rotate_right_rec(b, len(a))\ndef fibonacci_iterative(n) : \n    '''\n    Write a python function to return nth number of fibonacci series\n    '''\n    if n <= 1 :\n        return n\n    first = 0\n    second = 1\n    res = 0\n    for i in range(n-1) :\n        res = first + second\n        first = second\n        second = res\n    return res\ndef fibonacci_rec(n) : \n    '''\n    Write a python function to return nth number of fibonacci series using recursion\n    '''\n    if n <= 1 :\n        return n\n    return fibonacci_rec(n-1) + fibonacci_rec(n-2)\ndef fibonacci_memoization(n) : \n    '''\n    Write a python function to return nth number of fibonacci series using memoization\n    '''\n    table = [0 for i in range(n+1)]\n    table[0] = 0\n    table[1] = 1\n    return fibonacci_rec(n, table)\ndef fibonacci_rec_dp(n) : \n    '''\n    Write a python function to return nth number of fibonacci series using recursion and DP\n    '''\n    table = [0 for i in range(n+1)]\n    table[0] = 0\n    table[1] = 1\n    for i in range(2, n+1) :\n        table[i] = table[i-1] + table[i-2]\n    return table[n]\ndef fibonacci_dp(n) : \n    '''\n    Write a python function to return nth number of fibonacci series using DP\n    '''\n    table = [0 for i in range(n+1)]\n    table[0] = 0\n    table[1] = 1\n    for i in range(2, n+1) :\n        table[i] = table[i-1] + table[i-2]\n    return table[n]\ndef is_power_of_2(n) : \n    '''\n    Write a python function to check whether a given number is power of 2 or not\n    '''\n    if n == 0 :\n        return True\n    if n == 1 :\n        return False\n    temp = 1\n    while temp <= n :\n        temp *= 2\n    return temp == n\ndef is_power_of_2_rec(n) : \n    '''\n    Write a python function to check whether a given number is power of 2 or not using recursion\n    '''\n    if n == 0 :\n        return True\n    if n == 1 :\n        return True\n    return is_power_of_2_rec(n / 2)\ndef is_power_of_2_memoization(n) : \n    '''\n    Write a python function to check whether a given number is power of 2 or not using memoization\n    '''\n    table = [1 for i in range(n+1)]\n    table[0] = 1\n    table[1] = 0\n    for i in range(2, n+1) :\n        table[i] = (table[i-1] + table[i-2]) % 2\n    return table[n]\ndef is_power_of_2_rec_dp(n) : \n    '''\n    Write a python function to check whether a given number is power of 2 or not using recursion and DP\n    '''\n    table = [1 for i in range(n+1)]\n    table[0] = 1\n    table[1] = 0\n    for i in range(2, n+1) :\n        table[i] = (table[i-1] + table[i",
        "num_ids": 64
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, (n//2)+1) :\n        if (n%i == 0) :\n            divisors = divisors + 1\n    if (divisors % 2 == 0) :\n        return True\n    else :\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            divisors += 1\n    return divisors % 2 == 0\n",
        "num_ids": 57
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            divisors += 1\n    return divisors\ndef factorial(n) :\n    '''\n    Write a python function to find the factorial of a number https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    factorial = 1\n    for i in range(1, n+1) :\n        factorial *= i\n    return factorial\ndef is_prime(n) :\n    '''\n    Write a python function to check whether a given number is prime or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n == 1 :\n        return False\n    else :\n        for i in range(2, int(math.sqrt(n))+1) :\n            if n % i == 0 :\n                return False\n        return True\ndef is_palindrome(n) :\n    '''\n    Write a python function to check whether a given number is palindrome or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    s = str(n)\n    length = len(s)\n    for i in range(length/2) :\n        if s[i]!= s[length-i-1] :\n            return False\n    return True\ndef reverse(n) :\n    '''\n    Write a python function to reverse a number https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    rev = 0\n    while n > 0 :\n        rev = rev * 10 + n % 10\n        n //= 10\n    return rev\ndef is_perfect(n) :\n    '''\n    Write a python function to check whether a given number is perfect or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            sum += i\n    if sum == n :\n        return True\n    else :\n        return False\ndef is_perfect_square(n) :\n    '''\n    Write a python function to check whether a given number is perfect square or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    root = math.sqrt(n)\n    if int(root) == root :\n        return True\n    else :\n        return False\ndef is_super_prime(n) :\n    '''\n    Write a python function to check whether a given number is super prime or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if n < 2 :\n        return False\n    elif n == 2 :\n        return True\n    else :\n        for i in range(2, int(math.sqrt(n))+1) :\n            if n % i == 0 :\n                return False\n        return True\ndef is_super_perfect(n) :\n    '''\n    Write a python function to check whether a given number is super perfect or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if is_perfect(n) and is_super_prime(n) :\n        return True\n    else :\n        return False\ndef is_super_perfect_square(n) :\n    '''\n    Write a python function to check whether a given number is super perfect square or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    root = math.sqrt(n)\n    if int(root) == root :\n        if is_perfect_square(n) and is_super_prime(n) :\n            return True\n        else :\n            return False\n    else :\n        return False\ndef is_super_prime_square(n) :\n    '''\n    Write a python function to check whether a given number is super prime square or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if is_super_prime(n) and is_perfect_square(n) :\n        return True\n    else :\n        return False\ndef is_super_palindrome(n) :\n    '''\n    Write a python function to check whether a given number is super palindrome or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    s = str(n)\n    length = len(s)\n    for i in range(length/2) :\n        if s[i]!= s[length-i-1] :\n            return False\n    return True\ndef is_super_perfect_square(n) :\n    '''\n    Write a python function to check whether a given number is super perfect square or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    root = math.sqrt(n)\n    if int(root) == root :\n        if is_super_perfect(n) and is_perfect_square(n) :\n            return True\n        else :\n            return False\n    else :\n        return False\ndef is_super_perfect_square_square(n) :\n    '''\n    Write a python function to check whether a given number is super perfect square square or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if is_super_perfect(n) and is_perfect_square(n) :\n        return True\n    else :\n        return False\ndef is_super_perfect_square_square_square(n) :\n    '''\n    Write a python function to check whether a given number is super perfect square square square or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-38.php\n    '''\n    if is_super_perfect_square(n) and is_perfect_square(n) :\n        return True\n    else :\n        return False\ndef is_super_perfect_square_square_square(n) :\n    '''\n    Write a python function to check whether a given number is super perfect square square square or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    if is_super_perfect_square(n) and is_perfect_square(n) :\n        return True\n    else :\n        return False\ndef is_super_perfect_square_square_square(n) :\n    '''\n    Write a python function to check whether a given number is super perfect square square square or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-40.php\n    '''\n    if is_super_perfect_square(n) and is_perfect_square(n) :\n        return True\n    else :\n        return False\ndef is_super_perfect_square_square_square(n) :\n    '''\n    Write a python function to check whether a given number is super perfect square square square or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-41.php\n    '''\n    if is_super_perfect_square(n) and is_perfect_square(n) :\n        return True\n    else :\n        return False\ndef is_super_perfect_square_square_square(n) :\n    '''\n    Write a python function to check whether a given number is super perfect square square square or not https://ww",
        "num_ids": 24
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for x in range(1,n):\n        if n%x==0:\n            count += 1\n    return count%2==0\n",
        "num_ids": 40
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : \n        return 1\n    return sum(i for i in range(2,math.ceil(math.sqrt(n)) + 1) if n % i == 0)\ndef nth_fibonacci(n) : \n    '''\n    Write a python function to calculate the nth Fibonacci number where n >= 3\n    '''\n    if n == 2 : \n        return 1\n    return nth_fibonacci(n-2) + nth_fibonacci(n-1)\ndef nth_fibonacci(n) : \n    '''\n    Write a python function to calculate the nth Fibonacci number where n >= 3\n    '''\n    if n == 2 : \n        return 1\n    a, b = 1, 1\n    for _ in range(n-2) : \n        a, b = b, a+b\n    return b\ndef is_palindrome(n) : \n    '''\n    Write a python function to check whether the number is palindrome or not.\n    '''\n    if str(n) == str(n)[::-1] : \n        return True\n    return False\ndef factorial(n) : \n    '''\n    Write a python function to calculate the factorial of a number. \n    '''\n    return math.prod(range(2,n+1))\ndef mr_prime(n) : \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    if n == 1 : \n        return False\n    if n == 2 : \n        return True\n    if n % 2 == 0 : \n        return False\n    return all(n % i for i in range(3,math.ceil(math.sqrt(n)) + 1, 2))\ndef get_primes(n) : \n    '''\n    Write a python function to calculate all the primes below a number.\n    '''\n    primes = []\n    for i in range(2, n+1) : \n        if mr_prime(i) : \n            primes.append(i)\n    return primes\ndef get_primes_till_n(n) : \n    '''\n    Write a python function to calculate all the primes below a number.\n    '''\n    primes = []\n    for i in range(2, n+1) : \n        if mr_prime(i) : \n            primes.append(i)\n    return primes\ndef get_perfect_squares(n) : \n    '''\n    Write a python function to calculate all the perfect squares below a number.\n    '''\n    perfect_squares = []\n    for i in range(1, n+1) : \n        if math.sqrt(i).is_integer() : \n            perfect_squares.append(i)\n    return perfect_squares\ndef is_perfect_square(n) : \n    '''\n    Write a python function to check whether the number is a perfect square or not.\n    '''\n    if math.sqrt(n).is_integer() : \n        return True\n    return False\ndef get_perfect_squares_till_n(n) : \n    '''\n    Write a python function to calculate all the perfect squares below a number.\n    '''\n    perfect_squares = []\n    for i in range(1, n+1) : \n        if math.sqrt(i).is_integer() : \n            perfect_squares.append(i)\n    return perfect_squares\ndef get_perfect_squares_till_n_less_than_n(n) : \n    '''\n    Write a python function to calculate all the perfect squares below a number.\n    '''\n    perfect_squares = []\n    for i in range(1, n) : \n        if math.sqrt(i).is_integer() : \n            perfect_squares.append(i)\n    return perfect_squares\ndef is_prime(n) : \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    if n == 1 : \n        return False\n    if n == 2 : \n        return True\n    if n % 2 == 0 : \n        return False\n    return all(n % i for i in range(3, math.ceil(math.sqrt(n)) + 1, 2))\ndef get_primes_till_n(n) : \n    '''\n    Write a python function to calculate all the primes below a number.\n    '''\n    primes = []\n    for i in range(2, n+1) : \n        if mr_prime(i) : \n            primes.append(i)\n    return primes\ndef is_prime_till_n(n) : \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    if n == 1 : \n        return False\n    if n == 2 : \n        return True\n    if n % 2 == 0 : \n        return False\n    return all(n % i for i in range(3, math.ceil(math.sqrt(n)) + 1, 2))\ndef get_primes_till_n_less_than_n(n) : \n    '''\n    Write a python function to calculate all the primes below a number.\n    '''\n    primes = []\n    for i in range(2, n) : \n        if mr_prime(i) : \n            primes.append(i)\n    return primes\ndef get_primes_in_range(n, m) : \n    '''\n    Write a python function to calculate all the primes in a given range.\n    '''\n    primes = []\n    for i in range(n, m+1) : \n        if mr_prime(i) : \n            primes.append(i)\n    return primes\ndef is_nth_prime(n) : \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    if n == 1 : \n        return False\n    if n == 2 : \n        return True\n    if n % 2 == 0 : \n        return False\n    return all(n % i for i in range(3,math.ceil(math.sqrt(n)) + 1, 2))\ndef get_nth_prime(n) : \n    '''\n    Write a python function to calculate the nth prime number.\n    '''\n    primes = []\n    for i in range(1, n+1) : \n        if mr_prime(i) : \n            primes.append(i)\n    return primes[n-1]\ndef get_nth_prime_till_n(n) : \n    '''\n    Write a python function to calculate the nth prime number.\n    '''\n    primes = []\n    for i in range(1, n+1) : \n        if mr_prime(i) : \n            primes.append(i)\n    return primes\ndef get_nth_prime_till_n_less_than_n(n) : \n    '''\n    Write a python function to calculate the nth prime number.\n    '''\n    primes = []\n    for i in range(1, n) : \n        if mr_prime(i) : \n            primes.append(i)\n    return primes\ndef get_nth_prime_till_n_less_than_n_in_range(n, m) : \n    '''\n    Write a python function to calculate the nth prime number.\n    '''\n    primes = []\n    for i in range(n, m+1) : \n        if mr_prime(i) : \n            primes.append(i)\n    return primes\ndef get_number_of_divisors(n) : \n    '''\n    Write a python function to check whether the number has odd or even divisors.\n    '''\n    divisors = []\n    for i in range(2, n+1",
        "num_ids": 20
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    cnt = 0\n    for i in range(1,(n//2)+1) :\n        if n % i == 0 :\n            cnt = cnt + 1\n    return cnt \n",
        "num_ids": 49
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,n):\n        if n%i==0:\n            divisors+=1\n    return divisors%2==0\n",
        "num_ids": 46
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return 1\n    divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors += 1\n            if i!= n / i:\n                divisors += 1\n    return divisors\ndef print_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef print_perfect_number(n):\n    '''\n    Write a python function to check whether a number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    if sum_of_divisors == n:\n        return True\n    return False\ndef print_armstrong_number(n):\n    '''\n    Write a python function to check whether a number is armstrong or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    temp = n\n    sum_of_divisors = 0\n    while temp > 0:\n        sum_of_divisors += temp % 10\n        temp /= 10\n    if n == sum_of_divisors:\n        return True\n    return False\ndef print_num_prime_factors(n):\n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1:\n        return 1\n    divisors = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\ndef print_permutations(str):\n    '''\n    Write a python function to print all permutations of a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-8.php\n    '''\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    prev_permutations = print_permutations(str[1:])\n    permutations = []\n    for permutation in prev_permutations:\n        for i in range(len(permutation) + 1):\n            new_permutation = permutation[:i] + str[0] + permutation[i:]\n            permutations.append(new_permutation)\n    return permutations\ndef print_pairs(arr):\n    '''\n    Write a python function to print all pairs in an array. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-17.php\n    '''\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            print(arr[i], arr[j])\ndef print_triples(arr):\n    '''\n    Write a python function to print all triples in an array. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-18.php\n    '''\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                print(arr[i], arr[j], arr[k])\ndef print_harshad_numbers(num):\n    '''\n    Write a python function to print all harshad numbers in an array. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(len(num)):\n        if num[i] % 3 == 0 and num[i] % 5 == 0:\n            print(num[i])\ndef print_letter_count(str):\n    '''\n    Write a python function to print the count of each letter in a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    letter_dict = {}\n    for letter in str:\n        if letter not in letter_dict:\n            letter_dict[letter] = 1\n        else:\n            letter_dict[letter] += 1\n    for key, value in letter_dict.items():\n        print(key, value)\ndef print_factorial(n):\n    '''\n    Write a python function to print the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if n == 0:\n        return 1\n    return n * print_factorial(n - 1)\ndef print_prime_factors(n):\n    '''\n    Write a python function to print all prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    prime_factors = []\n    if n == 1:\n        return [1]\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            prime_factors.append(i)\n            n /= i\n    prime_factors.append(n)\n    return prime_factors\ndef print_combinations(str, n):\n    '''\n    Write a python function to print all combinations of a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 0:\n        return [[]]\n    combinations = []\n    for i in range(len(str)):\n        new_str = str[:i] + str[i + 1:]\n        old_combo = print_combinations(new_str, n - 1)\n        for j in range(len(old_combo)):\n            combo = [str[i]]\n            combo.extend(old_combo[j])\n            combinations.append(combo)\n    return combinations\ndef print_combinations_without_repetition(str, n):\n    '''\n    Write a python function to print all combinations of a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 0:\n        return [[]]\n    combinations = []\n    for i in range(len(str)):\n        new_str = str[:i] + str[i + 1:]\n        old_combo = print_combinations_without_repetition(new_str, n - 1)\n        for j in range(len(old_combo)):\n            combo = [str[i]]\n            combo.extend(old_combo[j])\n            if combo not in combinations:\n                combinations.append(combo)\n    return combinations\ndef print_permutations_with_repetition(str):\n    '''\n    Write a python function to print all permutations of a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-8.php\n    '''\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    prev_permutations = print_permutations_with_repetition(str[1:])\n    permutations = []\n    for per",
        "num_ids": 64
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) % 2!= 0:\n        return sum(arr)\n    return sum(arr[0::2])\n",
        "num_ids": 47
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + odd_length_sum(arr[1:])\n",
        "num_ids": 42
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if (j-i+1) % 2 == 1:\n                res.append(sum(arr[i:j+1]))\n",
        "num_ids": 67
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr_len = len(arr)\n    if arr_len == 1:\n        return arr[0]\n    elif arr_len == 2:\n        return sum(arr)\n    else:\n        return sum(arr[0:arr_len:2]) + odd_length_sum(arr[1:])\n",
        "num_ids": 76
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # method 1\n    # res = []\n    # for i in range(0, len(arr)):\n    #     for j in range(i, len(arr)):\n    #         if j - i + 1 % 2 == 1:\n    #             res.append(sum(arr[i:j+1]))\n    # return res\n",
        "num_ids": 83
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            s += sum(arr[i:j+1])\n    return s\n",
        "num_ids": 55
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    def _sum_odd_length_subarrays(arr, start, end):\n        total = 0\n        for i in range(start, end, 2):\n            total += arr[i]\n        return total\n",
        "num_ids": 52
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    start = 0\n    end = len(arr) - 1\n    sum = 0\n    while start < end:\n        if arr[start] % 2 == 1:\n            sum += arr[start]\n        if arr[end] % 2 == 1:\n            sum += arr[end]\n        start += 1\n        end -= 1\n    return sum\n",
        "num_ids": 83
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr)==0:\n        return 0\n    #Store odd length subarrays in a dictionary\n    store = {}\n    i,j = 0,0\n    summation = 0\n    while j<len(arr):\n        if j-i+1%2==0:\n            store[j-i+1] = arr[j]\n        if j-i+1%2==1:\n            store[j-i+1] = arr[j]*-1\n        i = i+1\n        j = j+1\n    #Store sum of all odd length subarrays in a list\n    for k,v in store.items():\n        summation = summation + v\n    return summation\ndef majority_element(arr):\n    '''\n    Write a python function to find the majority element. https://www.geeksforgeeks.org/majority-element/\n    '''\n    if len(arr)==0:\n        return None\n    store = {}\n    for i in arr:\n        if i not in store:\n            store[i] = 1\n        else:\n            store[i] = store[i] + 1\n    count = 0\n    #Return maximum value of store dictionary\n    for k,v in store.items():\n        if v>count:\n            count = v\n            key = k\n    return key\ndef maximum_swap(arr,k):\n    '''\n    Write a python function to find the maximum k-difference between 2 elements. https://www.geeksforgeeks.org/maximum-k-difference-between-2-elements/\n    '''\n    if len(arr)==0:\n        return None\n    store = {}\n    for i in arr:\n        if i not in store:\n            store[i] = 1\n        else:\n            store[i] = store[i] + 1\n    count = 0\n    #Return maximum value of store dictionary\n    for k,v in store.items():\n        if v>count:\n            count = v\n            key = k\n    #Return maximum element with k difference\n    for i in arr:\n        if abs(i-key)==k:\n            return i\ndef perfect_squares(arr):\n    '''\n    Write a python function to find the perfect squares. https://www.geeksforgeeks.org/perfect-squares/\n    '''\n    if len(arr)==0:\n        return None\n    store = {}\n    for i in arr:\n        if i not in store:\n            store[i] = 1\n        else:\n            store[i] = store[i] + 1\n    #Store sum of all perfect squares in a list\n    for k,v in store.items():\n        if v == k*k:\n            print k\ndef longest_binary_substring(arr):\n    '''\n    Write a python function to find the length of the longest common substring. https://www.geeksforgeeks.org/longest-common-substring/\n    '''\n    if len(arr)==0:\n        return None\n    store = {}\n    for i in arr:\n        if i not in store:\n            store[i] = 1\n        else:\n            store[i] = store[i] + 1\n    #Return length of longest substring\n    for i in arr:\n        for j in arr:\n            if i == j:\n                store[i] = store[i] + 1\n    for k,v in store.items():\n        if v==len(arr):\n            return v\ndef longest_common_prefix(arr):\n    '''\n    Write a python function to find the longest common prefix. https://www.geeksforgeeks.org/longest-common-prefix/\n    '''\n    if len(arr)==0:\n        return None\n    store = {}\n    for i in arr:\n        if i not in store:\n            store[i] = 1\n        else:\n            store[i] = store[i] + 1\n    prefix = \"\"\n    for k,v in store.items():\n        if v==len(arr):\n            prefix = prefix + k\n    return prefix\ndef palindrome_pairs(arr):\n    '''\n    Write a python function to find the palindrome pairs. https://www.geeksforgeeks.org/palindrome-pairs/\n    '''\n    if len(arr)==0:\n        return None\n    store = {}\n    for i in arr:\n        if i not in store:\n            store[i] = 1\n        else:\n            store[i] = store[i] + 1\n    #Return list of all palindromes\n    for i in arr:\n        if i==i[::-1]:\n            print i,i[::-1]\ndef group_equal_number(arr):\n    '''\n    Write a python function to find the groups of equal elements. https://www.geeksforgeeks.org/groups-equal-number-arrays/\n    '''\n    if len(arr)==0:\n        return None\n    store = {}\n    for i in arr:\n        if i not in store:\n            store[i] = 1\n        else:\n            store[i] = store[i] + 1\n    #Return list of groups of equal elements\n    for k,v in store.items():\n        if v>1:\n            print k\ndef rot_matrix(arr):\n    '''\n    Write a python function to find the number of rows and columns in a matrix. https://www.geeksforgeeks.org/rotate-a-matrix-by-90-degrees/\n    '''\n    if len(arr)==0:\n        return None\n    store = {}\n    for i in arr:\n        if i not in store:\n            store[i] = 1\n        else:\n            store[i] = store[i] + 1\n    #Return list of groups of equal elements\n    for k,v in store.items():\n        if v>1:\n            print k\ndef magic_square(arr):\n    '''\n    Write a python function to check whether a given matrix is a magic square. https://www.geeksforgeeks.org/magic-square/\n    '''\n    if len(arr)==0:\n        return None\n    store = {}\n    for i in arr:\n        if i not in store:\n            store[i] = 1\n        else:\n            store[i] = store[i] + 1\n    #Return list of groups of equal elements\n    for k,v in store.items():\n        if v!=len(arr)**0.5:\n            print False\n        else:\n            print True\ndef string_matrix(arr):\n    '''\n    Write a python function to find the string formed by matrix. https://www.geeksforgeeks.org/string-formed-by-matrix/\n    '''\n    if len(arr)==0:\n        return None\n    store = {}\n    for i in arr:\n        if i not in store:\n            store[i] = 1\n        else:\n            store[i] = store[i] + 1\n    #Return list of groups of equal elements\n    for k,v in store.items():\n        if v!=len(arr)**0.5:\n            print False\n        else:\n            print True\ndef char_matrix(arr):\n    '''\n    Write a python function to find the char matrix formed by a string. https://www.geeksforgeeks.org/char-matrix-formed-by-string/\n    '''\n    if len(arr)==0:\n        return None\n    store = {}\n    for i in arr:\n        if i not in store:\n            store[i] = 1\n        else:\n            store[i] = store[i] + 1\n    #Return list of groups of equal elements\n    for k,v in store.items():\n        if v!=len(arr)**0.5:\n            print False\n        else:\n            print True\ndef sum_matrix(arr):\n    '''\n    Write a python function to find the sum of a matrix. https://www.geeksforgeeks.org/sum-of-a-matrix/\n    '''\n    if len(arr)==0:\n        return None\n    store = {}\n    for i in arr:\n        if i not in store:\n            store[",
        "num_ids": 39
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (g-b)/df\n    elif mx == g:\n        h = (b-r)/df + 2\n    else:\n        h = (r-g)/df + 4\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n",
        "num_ids": 167
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n",
        "num_ids": 26
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255\n    g = g/255\n    b = b/255\n    max_ = max(r, g, b)\n    min_ = min(r, g, b)\n    diff = max_ - min_\n    # hue\n    if max_ == min_:\n        h = 0\n    elif max_ == r:\n        h = 60 * (((g-b)/diff)%6)\n    elif max_ == g:\n        h = 60 * (((b-r)/diff) + 2)\n    elif max_ == b:\n        h = 60 * (((r-g)/diff) + 4)\n    if h < 0:\n        h += 360\n",
        "num_ids": 166
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import math\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_ = max(r, g, b)\n    min_ = min(r, g, b)\n    diff = max_ - min_\n    h = 0\n    if max_ == min_:\n        h = 0\n    elif max_ == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_ == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif max_ == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n    if max_ == 0:\n        s = 0\n    else:\n        s = diff / max_\n    v = max_\n    h /= 2\n    return h, s, v\n",
        "num_ids": 217
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n",
        "num_ids": 195
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    h, s, v = hsv = colorsys.rgb_to_hsv(r, g, b)\n    h *= 360\n    s *= 100\n    v *= 100\n    return hsv\n",
        "num_ids": 77
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    def R(r, g, b):\n        if r == g and g == b:\n            return 0\n        if r == g:\n            return (b-g)/float(b-r)\n        if g == b:\n            return 2.0*r/float(g-r)\n        m = max(r, g, b)\n        m_idx = r.index(m)\n        return 1.0*(b-m)/float(m-r) + 1.0*(g-m)/float(m-g)\n    def G(r, g, b):\n        return 0.5*R(r, g, b)\n    def B(r, g, b):\n        return 1.0 - G(r, g, b)\n    return round(R(r, g, b), 2), round(G(r, g, b), 2), round(B(r, g, b), 2)\n",
        "num_ids": 221
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60*((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60*((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60*((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return (h, s, v)\n",
        "num_ids": 197
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    diff = max_rgb - min_rgb\n    \n    # if color is pure, return it\n    if diff == 0:\n        return [0, 0, 1]\n",
        "num_ids": 74
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # define hue (H)\n    # [0.0, 2.0] - [0.0, 1.0]\n    # Hue is the color spectrum. Defines how distinct the colors are in HSV space.\n    # Hue is the spectral model, one of the three axes that allow a colour to be perceived in relation to the other two axes.\n    # All three axes contribute to the total colour spectrum and can be found in the HSV model.\n    # Hue is the primary color spectrum.\n",
        "num_ids": 114
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    for i in list1:\n        if i % 2 == 0:\n            even_prod *= i\n        else:\n            odd_prod *= i\n    return [even_prod, odd_prod]\n",
        "num_ids": 71
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum_odd = 0\n    sum_even = 0\n    for i in list1:\n        if i%2:\n            sum_odd = sum_odd + i\n        else:\n            sum_even = sum_even + i\n    print \"The sum of odd numbers is {0}\".format(sum_odd)\n    print \"The sum of even numbers is {0}\".format(sum_even)\n    print \"The product of even and odd numbers is {0}\".format(sum_even*sum_odd)\n",
        "num_ids": 123
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list_even_odd = []\n    for ele in list1:\n        if ele % 2 == 0:\n            list_even_odd.append(ele)\n        else:\n            list_even_odd.append(ele)\n    list_even_odd.sort()\n    final_result = list_even_odd[0] * list_even_odd[-1]\n    return final_result\n",
        "num_ids": 96
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # sum_even = 0\n    # sum_odd = 0\n    # for i in range(0, len(list1), 2):\n    #     sum_even += list1[i]\n    # for j in range(1, len(list1), 2):\n    #     sum_odd += list1[j]\n    # return [sum_even * sum_odd]\n",
        "num_ids": 91
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Your code here\n    return None\n",
        "num_ids": 12
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 0\n    for i in list1:\n        if i%2==0:\n            result = result*i\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    newlist = []\n    for i in list1:\n        if i % 2 == 0:\n            newlist.append(i)\n    even = reduce(lambda x, y: x*y, newlist)\n    newlist = []\n    for i in list1:\n        if i % 2!= 0:\n            newlist.append(i)\n    odd = reduce(lambda x, y: x*y, newlist)\n    print('The product of first even and odd number of', list1,'is', (even, odd))\n",
        "num_ids": 127
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    a = 1\n    b = 1\n    for i in list1:\n        if i%2 == 0:\n            a *= i\n        else:\n            b *= i\n    print a, b\n",
        "num_ids": 51
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum1 = 1\n    for i in list1:\n        if i % 2 == 0:\n            sum1 *= i\n    return sum1\n",
        "num_ids": 37
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    product_odd = 1\n    product_even = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            product_even *= num\n        else:\n            product_odd *= num\n    \n    return product_even, product_odd\n",
        "num_ids": 69
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # for i in range(len(test_str)):\n    #     if '(' in test_str[i]:\n    #         start = test_str[i].index('(')\n    #         if test_str[i][start+1] in ['(','']:\n    #             end = test_str[i].index(')', start+1)\n    #         else:\n    #             end = test_str[i].index(')', start+1)\n    #     elif '[' in test_str[i]:\n    #         start = test_str[i].index('[')\n    #         end = test_str[i].index(']')\n    #         if test_str[i][start+1] in ['[','']:\n    #             end = test_str[i].index(']', start+1)\n    #         else:\n    #             end = test_str[i].index(']', start+1)\n    #     else:\n    #         end = len(test_str[i])\n    #     test_str[i] = int(test_str[i][start+1:end])\n    # return tuple(test_str)\n",
        "num_ids": 283
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    res = []\n    test_str = test_str.replace('(', '')\n    test_str = test_str.replace(')', '')\n    test_str = test_str.split(',')\n    for i in test_str:\n        res.append(int(i))\n    return tuple(res)\n",
        "num_ids": 79
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    return tuple(int(x) for x in test_str.split(',') if x)\n    \n    \ndef tuple_int_str(test_int):\n    '''\n    Write a function to convert integer tuple to tuple string.\n    '''\n    \n    return ','.join(str(x) for x in test_int)\n",
        "num_ids": 23
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    #Initialize list of digits\n    digit_list = []\n    for i in test_str:\n        digit_list.append(i)\n",
        "num_ids": 38
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace(')', '')\n    test_str = test_str.replace('(', '')\n    return tuple(map(int, test_str.split(',')))\n",
        "num_ids": 51
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split('/')))\n",
        "num_ids": 20
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n    \ndef tuple_int_str(test_int):\n    '''\n    Write a function to convert integer tuple to string tuple.\n    '''\n    return str(tuple(test_int)).replace('(', '').replace(')', '')\n",
        "num_ids": 26
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    import re\n    test_str = re.sub(r'[\\[\\]\\(\\)]', '', test_str)\n    res = re.split(', | ', test_str)\n    return tuple(map(int, res))\n",
        "num_ids": 59
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str[1:-1].split(','))\n",
        "num_ids": 26
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str[1:-1].split(',')))\n",
        "num_ids": 23
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    a.insert(i, x)\n    return a\n",
        "num_ids": 30
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    a.append(float('inf'))\n    pos = bisect.bisect(a, x)\n    return pos\n",
        "num_ids": 39
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    l,r = 0, len(a)-1\n    while l <= r:\n        m = (l+r)//2\n        if a[m] >= x:\n            r = m-1\n        else:\n            l = m+1\n    return l\n",
        "num_ids": 79
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect(a, x)\n",
        "num_ids": 15
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0 or a[-1] < x:\n        a.append(x)\n        return\n    b = a[:]\n    b.append(x)\n    bisect.insort(b, x)\n    if b[-2] == x:\n        del b[-1]\n    return\n",
        "num_ids": 80
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect(a, x)\n    return pos\n    \ndef find_min_index(a):\n    '''\n    Given an array of integers, find the index of the smallest value.\n    Return -1 if the array is empty.\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        return a.index(min(a))\n        \ndef find_min_value(a):\n    '''\n    Given an array of integers, find the smallest value.\n    Return -1 if the array is empty.\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        return min(a)\n",
        "num_ids": 28
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] > x:\n        return i\n    return len(a)\n",
        "num_ids": 47
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    if n == 1:\n        if a[0] > x:\n            return 0\n        else:\n            return 1\n    \n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    if left == n and a[left] <= x:\n        return left + 1\n    elif left == 0 and a[left] > x:\n        return left\n    elif a[left] > x:\n        return left\n    else:\n        return left + 1\n",
        "num_ids": 191
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos\n",
        "num_ids": 22
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search('a(.*)b{3}',text)\n",
        "num_ids": 20
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search(r'ab{3}', text):\n        return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a(.{1,5})b\"\n    print re.findall(pattern, text)\n",
        "num_ids": 30
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    matches = pattern.findall(text)\n    return matches\n",
        "num_ids": 34
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a{3}b')\n    if pattern.search(text):\n        return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search('ab{3}', text)\n",
        "num_ids": 16
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_object = re.match(r'^a(.*)b$', text)\n    return match_object.group(1) if match_object else None\n",
        "num_ids": 41
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"(?<=\\s)(ab{3})(?=\\s)\")\n    return pattern.search(text)\n",
        "num_ids": 39
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r'ab{3}', text)\n    return match!= None\n",
        "num_ids": 26
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'(?<=a).{3}(?=b)')\n    match = pattern.search(text)\n    if match:\n        print('Found the pattern')\n    else:\n        print('Did not find the pattern')\n",
        "num_ids": 65
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert to list\n    test_list = list(test_list)\n    # Find the first sign of a comma\n    sign_comma = test_list.index(',')\n    # Insert the sign in the list\n    test_list.insert(sign_comma, ',')\n    # Replace the original tuple\n    test_list[sign_comma] = test_str\n    # Convert back to tuple\n    return tuple(test_list)\n",
        "num_ids": 108
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # first: convert the string to a list\n    # 2nd: remove the ','\n    # 3rd: add each item to the list\n    # 4th: convert the list to a tuple\n    return tuple(test_list)\n",
        "num_ids": 56
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n",
        "num_ids": 16
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + tuple(test_str)\n",
        "num_ids": 18
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n",
        "num_ids": 16
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list[:test_list.index(test_str)] + test_list[test_list.index(test_str)+1:])\n",
        "num_ids": 40
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n",
        "num_ids": 15
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_list = test_str.split(',')\n    tuple_list.append(test_list)\n    return tuple(tuple_list)\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    print(all([(i%2 == 0) for i in range(len(nums)) if i < len(nums)/2]))\n",
        "num_ids": 36
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0 and i % 2 == 0:\n            return False\n    return True\n    \n    \ndef is_palindrome(nums):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    if str(nums)[::-1] == str(nums):\n        return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    for i in range(0, len(nums), 2):\n        if i == 0:\n            if nums[i] % 2 == 0:\n                return 1\n        if nums[i] % 2 == 0 and nums[i - 1] % 2 == 0:\n            return 1\n    return 0\n",
        "num_ids": 90
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for num in nums:\n        if num%2==0:\n            if nums[num-1]%2!=0:\n                return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(len(nums)):\n        if index % 2 == 0:\n            if nums[index] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return (len(nums) / 2) * 2 == len(nums)\n",
        "num_ids": 22
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = True\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            result = False\n            break\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) % 2 == 0:\n        for i in range(0, len(nums), 2):\n            if nums[i] % 2!= 0:\n                return False\n        return True\n    else:\n        for i in range(0, len(nums), 2):\n            if nums[i] % 2!= 0:\n                return False\n        return True\n",
        "num_ids": 95
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #return tuple(list(remove_nested(tup) for tup in tup_list))\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(x) for x in test_tup)\n    return test_tup\n",
        "num_ids": 67
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
        "num_ids": 24
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        for t in test_tup:\n            remove_nested(t)\n    else:\n        del test_tup\n",
        "num_ids": 45
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_nested_1(test_tup):\n        if type(test_tup) is tuple:\n            return remove_nested_1(test_tup[0]) + remove_nested_1(test_tup[1])\n        return test_tup\n    return remove_nested_1(test_tup)\n",
        "num_ids": 84
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        for item in test_tup:\n            if isinstance(item, tuple):\n                remove_nested(item)\n            else:\n                pass\n            \n    return test_tup\n",
        "num_ids": 60
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(tup[0] for tup in test_tup)\n",
        "num_ids": 21
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            tup.extend(remove_nested(item))\n        else:\n            tup.append(item)\n    return tuple(tup)\n",
        "num_ids": 64
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for tup in test_tup:\n        if type(tup) is tuple:\n            remove_nested(tup)\n        else:\n            test_tup.remove(tup)\n    return test_tup\n",
        "num_ids": 57
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        if len(test_tup) == 1:\n            return test_tup[0]\n        else:\n            return tuple([remove_nested(x) for x in test_tup])\n    else:\n        return test_tup\n",
        "num_ids": 73
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(element) for element in test_tup)\n    else:\n        return test_tup\n",
        "num_ids": 46
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for element in input_list: \n        if type(element) == list:\n            counter += 1 \n    return counter \n",
        "num_ids": 38
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if len(input_list) == 0:\n        return 0\n    else:\n        return 1 + count_list(input_list[1:])\n",
        "num_ids": 38
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    if input_list == []:\n        count = 0\n    elif isinstance(input_list[0],list):\n        for x in input_list:\n            if x!= []:\n                count += 1\n        return count\n    else:\n        for x in input_list:\n            if x!= []:\n                count += 1\n        return count\n",
        "num_ids": 92
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # my_list = [1,2,[3,4],5,[6,7],8]\n    # print my_list\n    # print type(my_list)\n    count = 0\n    for element in input_list:\n        # print element\n        if type(element) == type([]):\n            count += 1\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n    \n    \n    \ndef find_max_list(input_list): \n    '''\n    Write a python function to find the max list in a list of lists\n    '''\n    max = 0\n    max_index = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max:\n            max = len(input_list[i])\n            max_index = i\n    return input_list[max_index]\n    \n    \n    \ndef max_list(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list2(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list3(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \n    \ndef max_list4(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list5(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list6(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \n    \ndef max_list7(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \n    \ndef max_list8(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list9(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \n    \ndef max_list10(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \n    \ndef max_list11(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list12(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list13(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list14(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list15(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list16(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list17(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list18(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list19(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list20(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list21(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list22(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list23(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list24(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list:\n        if max < max(i):\n            max = max(i)\n    return max\n    \n    \ndef max_list25(input_list): \n    '''\n    Write a python function to return the max element of a list of lists\n    '''\n    max = 0\n    for i in input_list",
        "num_ids": 14
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_counter = 0\n    for x in input_list:\n        if type(x) is list:\n            list_counter += 1\n    return list_counter\n",
        "num_ids": 41
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list == []:\n        return 0\n    if type(input_list[0]) == type([]):\n        return 1 + count_list(input_list[0])\n    else:\n        return 0 + count_list(input_list[1:])\n",
        "num_ids": 66
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    if isinstance(input_list, list):\n        if len(input_list) > 1:\n            for i in range(len(input_list)):\n                if isinstance(input_list[i], list):\n                    count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[-1]==x:\n        return len(arr)-1\n    for i in range(len(arr)-2,-1,-1):\n        if arr[i]==x:\n            return i\n    return -1\n    \n",
        "num_ids": 59
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)\n    while low < high:\n        mid = (high+low)//2\n        if arr[mid] > x:\n            high = mid\n        else:\n            low = mid+1\n    return low\n",
        "num_ids": 63
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    high = len(arr)-1\n    low = 0\n    while low <= high:\n        mid = (high+low)//2\n        if (arr[mid] == x) & (mid==high):\n            return mid\n        elif arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid-1\n        elif arr[mid] < x:\n            low = mid+1\n    return -1\n    \ndef max_square(arr):\n    '''\n    Write a python function to find the max square in a binary matrix.\n    '''\n    if not arr:\n        return 0\n    n = len(arr)\n    m = len(arr[0])\n    arr2 = [[0 for i in range(m+1)] for j in range(n+1)]\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j]==1:\n                arr2[i+1][j+1] = min(arr2[i][j+1],arr2[i+1][j],arr2[i][j])+1\n    return max(arr2[-1])\n    \ndef fib_memo(n):\n    if n < 2:\n        return n\n    return fib_memo(n-1) + fib_memo(n-2)\n    \ndef fib_tab(n):\n    a = [0,1]\n    for i in range(n):\n        a.append(a[-1]+a[-2])\n    return a[n]\n    \ndef fib(n):\n    a,b = 0,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\n",
        "num_ids": 275
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    if arr[l-1]==x:\n        return l-1\n    else:\n        return l\n",
        "num_ids": 36
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr == []:\n        return None\n    return arr[-1]\n",
        "num_ids": 21
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr)-bisect_left(arr,x)\n",
        "num_ids": 18
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    start, end = 0, len(arr)-1\n    while start <= end:\n        mid = (start+end)/2\n        if arr[mid] == x and (mid == len(arr)-1 or arr[mid+1] > x):\n            return mid\n        elif arr[mid] < x:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1\n",
        "num_ids": 113
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if arr[n-1] == x:\n        return n-1\n    elif arr[0] > x:\n        return -1\n    else:\n        left,right = 0,n-1\n        while left <= right:\n            mid = (left + right) / 2\n            if arr[mid] == x:\n                return mid\n            elif arr[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n",
        "num_ids": 125
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[-1]==x:\n        return len(arr)-1\n    elif arr[-1]>x:\n        return last(arr[:-1],x)\n    else:\n        return last(arr[1:],x)\n",
        "num_ids": 61
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    if l == 0:\n        return -1\n    low = 0\n    high = l-1\n    while low <= high:\n        mid = (low + high) / 2\n        if arr[mid] == x:\n            if mid == l-1:\n                return mid\n            else:\n                if arr[mid+1] == x:\n                    return mid+1\n                else:\n                    return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\ndef isSorted(arr):\n    '''\n    Write a python function to determine if an array is sorted or not.\n    '''\n    l = len(arr)\n    if l <= 1:\n        return True\n    for i in range(l-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\ndef binarySearch(arr,l,r,x):\n    '''\n    Write a python function to search an element in a sorted array.\n    The function should return the index of the element if it is present in the array.\n    If it is not present, the function should return -1.\n    '''\n    if l == r:\n        return l\n    else:\n        mid = (l+r) / 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid, x)\n        else:\n            return binarySearch(arr, mid, r, x)\ndef maxProduct(arr):\n    '''\n    Write a python function to find the maximum product subarray in a given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    curr_product = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] >= 0:\n            curr_product = max(arr[i],arr[i]*curr_product)\n        else:\n            curr_product = min(arr[i],arr[i]*curr_product)\n        max_product = max(max_product,curr_product)\n    return max_product\ndef rotateArray(arr,k):\n    '''\n    Write a python function to rotate an array by k elements.\n    For example, [1,2,3,4,5,6,7] and k = 3, rotate it to [5,6,7,1,2,3,4]\n    '''\n    if k == 0:\n        return\n    k %= len(arr)\n    arr[:k],arr[k:] = arr[-k:],arr[:-k]\ndef reverse(arr):\n    '''\n    Write a python function to reverse an array.\n    For example, [1,2,3,4,5] should return [5,4,3,2,1]\n    '''\n    arr[:],arr[:] = arr[::-1],arr[::-1]\ndef rotateArrayUsingStack(arr,k):\n    '''\n    Write a python function to rotate an array by k elements.\n    For example, [1,2,3,4,5,6,7] and k = 3, rotate it to [5,6,7,1,2,3,4]\n    '''\n    if k == 0:\n        return\n    k %= len(arr)\n    stack = []\n    for i in range(len(arr)):\n        stack.append(arr[i])\n        if len(stack) > k:\n            stack.pop(0)\n    for i in range(len(arr)):\n        arr[i] = stack[i]\ndef rotateArrayUsingTwoPointers(arr,k):\n    '''\n    Write a python function to rotate an array by k elements.\n    For example, [1,2,3,4,5,6,7] and k = 3, rotate it to [5,6,7,1,2,3,4]\n    '''\n    if k == 0:\n        return\n    k %= len(arr)\n    left,right = 0,len(arr)-1\n    while left <= right:\n        arr[left],arr[right] = arr[right],arr[left]\n        left += 1\n        right -= 1\n    left = 0\n    right = len(arr)-k-1\n    while left < right:\n        arr[left],arr[right] = arr[right],arr[left]\n        left += 1\n        right -= 1\ndef countInversion(arr):\n    '''\n    Write a python function to find the number of inversions in an array.\n    An inversion is a pair of elements (arr[i],arr[j]) such that i < j and arr[i] > arr[j].\n    For example, [5,4,3,2,1] has 3 inversions:\n    (1,5), (1,4), (1,3)\n    '''\n    def merge(arr,l,r):\n        n1 = r-l+1\n        n2 = r-l\n        left = [0] * n1\n        right = [0] * n2\n        for i in range(n1):\n            left[i] = arr[l+i]\n        for i in range(n2):\n            right[i] = arr[l+i+n1]\n        left.append(sys.maxint)\n        right.append(sys.maxint)\n        i,j = 0,0\n        for k in range(l,l+n1+n2):\n            if left[i] > right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n    def mergeSort(arr,l,r):\n        if l < r:\n            mid = (l+r) / 2\n            mergeSort(arr,l,mid)\n            mergeSort(arr,mid+1,r)\n            merge(arr,l,r)\n    def countInversionHelper(arr,l,r):\n        if l >= r:\n            return 0\n        mid = (l+r) / 2\n        left = countInversionHelper(arr,l,mid)\n        right = countInversionHelper(arr,mid+1,r)\n        i = j = 0\n        inversion_count = 0\n        while i < mid - l + 1 and j < r - mid:\n            if arr[i] > arr[j]:\n                inversion_count += mid - i\n                j += 1\n            else:\n                i += 1\n        inversion_count += left + right\n        return inversion_count\n    return countInversionHelper(arr,0,len(arr)-1)\ndef binarySearchRecursive(arr,l,r,x):\n    if l == r:\n        return l\n    else:\n        mid = (l+r) / 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid, x)\n        else:\n            return binarySearch(arr, mid, r, x)\ndef findNextGreaterElement(arr):\n    '''\n    Write a python function to find the next greater element of every element in an array.\n    Return the next greater element for each element in the array.\n    If there is no greater element then return -1.\n    For example, for [4,5,2,25], the function should return [-1,5,5,-1]\n    '''\n    next_greater_element = []\n    for i in range(len(arr)):\n        next_greater_element.append(-1)\n    stack = []\n    for i in range(len(arr)-1,-1,-1):\n        while len(stack) > 0 and stack[-1] <= arr[i]:\n            stack.pop()\n        if len(stack) > 0:\n            next_greater_element[i] = stack[-1]\n        stack.append(arr[i])\n    return next_greater_element\ndef findNextSmallerElement(arr):\n    '''\n    Write a python function to find the next smaller element of every element in an array.\n    Return the next smaller element for each element in the array.\n    If there is no smaller element then return -1.\n    For example, fo",
        "num_ids": 53
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    myRegex = re.compile(r'^a.*b$')\n    mo = myRegex.search(text)\n    if mo!= None:\n        return True\n    else:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    pattern = re.compile(r\"^a.*(?=b)\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \n    # Use the following code to test your function.\n    # First, define input and output.\n    print(text_starta_endb(\"a\")) # True\n    print(text_starta_endb(\"abb\")) # False\n    print(text_starta_endb(\"aab\")) # True\n    print(text_starta_endb(\"aabb\")) # True\n    print(text_starta_endb(\"b\")) # False\n    print(text_starta_endb(\"bab\")) # True\n    print(text_starta_endb(\"babb\")) # True\n    print(text_starta_endb(\"bb\")) # False\n    print(text_starta_endb(\"bbbb\")) # False\n    print(text_starta_endb(\"ab\")) # False\n    print(text_starta_endb(\"aab\")) # False\n    ",
        "num_ids": 252
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start = r'(?<=a)'.lower()\n    end = r'(?=b)'\n    return re.findall(start+end,text,re.I)\n",
        "num_ids": 46
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=a).*b$')\n    result = pattern.search(text)\n    print(result)\n",
        "num_ids": 39
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search(\"^a.*b$\",text):\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search(r'^a.*b$', text)\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'ab'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\b(a[a-z]+[b]*)\\b')\n    matches = pattern.findall(text)\n    return matches\n",
        "num_ids": 45
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"^a[^b]*b$\"\n    if re.match(pattern, text):\n        return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n    \n",
        "num_ids": 13
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for x in dict.values():\n        sum += x\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if isinstance(dict, dict):\n        sum = 0\n        for key in dict:\n            sum += dict[key]\n        return sum\n    else:\n        return None\n",
        "num_ids": 44
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if l > r:\n        print(\"The lower number cannot be greater than the upper number\")\n    else:\n        sum = 0\n        for i in range(l,r+1):\n            if i % 2!= 0:\n                sum += i\n        print(sum)\nsum_odd(10,20)\nprint(\"\\n\")\n",
        "num_ids": 82
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return (n * (n + 1)) / 2\n",
        "num_ids": 15
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    for x in range(n,0,-1):\n        if x%2!= 0:\n            sum += x\n    return sum\n",
        "num_ids": 61
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(n+1)[1::2])\n",
        "num_ids": 17
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n % 2!= 0:\n        return n\n    else:\n        return n + sum_odd(n+1)\n",
        "num_ids": 33
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(l,r+1) if i%2==1)\n",
        "num_ids": 26
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([x for x in range(l,r+1) if x%2!=0])\n",
        "num_ids": 27
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(n+1)[1::2])\n",
        "num_ids": 17
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + _sum(arr[1:])\n",
        "num_ids": 39
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # use the sum() function to find the sum of the elements in array 'arr'\n    return sum(arr)\n",
        "num_ids": 29
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    res = 0.0\n    for i in arr:\n        res = res + float(i)\n    return res\n",
        "num_ids": 30
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return arr.sum()\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for x in arr:\n        total = total + x\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n",
        "num_ids": 18
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n",
        "num_ids": 24
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d)|(n>>(32-d)))&0xffffffff\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n>>d)|(n<<(32-d))&0xffffffff\n    \ndef Bitwise_AND(n1,n2):\n    '''\n    Write a function to that returns the bitwise AND of two numbers.\n    '''\n    return n1&n2\n",
        "num_ids": 10
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n",
        "num_ids": 19
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d) | (n>>(32-d))) & 0xffffffff\n",
        "num_ids": 24
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d)|(n >> (32 - d)) \n    \ndef xor_operation(a, b):\n    '''\n    Return the result of the xor operation on two 32 bit numbers.\n    '''\n    return a^b\n",
        "num_ids": 8
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    return (n << d) | (n >> (32-d))\n",
        "num_ids": 21
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    print \"I am about to rotate \",n,\" by \",d\n    \n    return (n<<d)|(n>>(32-d))\n",
        "num_ids": 35
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    a = n<<d\n    return (a | (n>>(32-d))) & 0xffffffff\n",
        "num_ids": 28
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | ((n & (2**32 - 1)) >> (32 - d))\n",
        "num_ids": 27
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\",\"\",text)\n",
        "num_ids": 16
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    if text == \"\":\n        return text\n    else:\n        new_text = text.replace(\" \", \"\")\n        return new_text\n",
        "num_ids": 36
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Create a new variable\n    new_text = ''\n    # for each character in the text\n    for i in text:\n        # If i is not a space\n        if i!='':\n            # Add i to the new_text variable\n            new_text += i\n    # Return the new_text variable\n    return new_text\n",
        "num_ids": 82
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n",
        "num_ids": 13
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('[\\s]', '', text)\n",
        "num_ids": 18
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \"\", text)\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)\n",
        "num_ids": 14
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or y==z or x==z:\n        return 2\n    else:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or x==z or y==z:\n        return 2\n    else:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n",
        "num_ids": 45
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    else:\n        return 0\n",
        "num_ids": 23
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # given\n    # assert(x == y)\n    # assert(x == z)\n    # assert(y == z)\n",
        "num_ids": 33
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    return count\nprint(test_three_equal(2,2,2))\nprint(test_three_equal(2,2,1))\nprint(test_three_equal(3,2,2))\nprint(test_three_equal(3,2,3))\nprint(test_three_equal(3,3,2))\nprint(test_three_equal(3,3,3))\nprint(test_three_equal(3,2,1))\nprint(test_three_equal(2,2,3))",
        "num_ids": 165
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and x == z:\n        return 3\n    else:\n        return 0\n",
        "num_ids": 25
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count = count + 1\n    if x == y and x == z:\n        count = count + 1\n    if x == y and y == x:\n        count = count + 1\n    if x == z and y == z:\n        count = count + 1\n    if x == z and x == y:\n        count = count + 1\n    if y == z and x == z:\n        count = count + 1\n    return count\n",
        "num_ids": 119
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    l = 0\n    r = n - 1\n    while (r - l > 1):\n        m = l + ((r - l) >> 1)\n        if (arr[l] <= arr[m] and arr[m] <= arr[r]):\n            l = m\n        elif (arr[l] >= arr[m] and arr[m] >= arr[r]):\n            r = m\n        elif (arr[l] > arr[m]):\n            l = m\n        elif (arr[m] > arr[r]):\n            r = m\n        else:\n            r = m - 1\n    return (r - l + 1)\n",
        "num_ids": 166
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0\n",
        "num_ids": 39
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0\n",
        "num_ids": 39
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Initialize swapped as False\n    swapped = False\n    \n    # Loop till array is not sorted\n    for i in range(0, len(arr)-1):\n    \n        # If current element is greater than next element, swap them\n        if arr[i] > arr[i+1]:\n            swapped = True\n            temp = arr[i+1]\n            arr[i+1] = arr[i]\n            arr[i] = temp\n            \n    # If array is not rotated return 0\n    if not swapped:\n        return 0\n    \n    # Else, search for a pivot and if found, count no. of times element less than next element is there\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n",
        "num_ids": 194
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    mid = len(arr) / 2\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[mid]:\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    num_rotations = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[i+1]:\n            num_rotations += 1\n",
        "num_ids": 44
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return 0\n",
        "num_ids": 43
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr) - 1):\n            if arr[j] > arr[j + 1]:\n                return j + 1\n    return 0\n    \ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left\n    for j in range(left, right):\n        if arr[j] < pivot:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n    arr[i], arr[right] = arr[right], arr[i]\n    return i\n",
        "num_ids": 146
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    i = 0\n    j = n-1\n    count = 0\n    while i <= j:\n        if arr[i] > arr[j]:\n            count += 1\n            j -= 1\n        else:\n            i += 1\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 1 :\n        return False\n    for i in range(1, int(n / 2) + 1) :\n        if i * i == n :\n            return True\n        elif i * i > n :\n            return False\n    return False\n",
        "num_ids": 63
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = int(math.sqrt(n))\n    return sqrt*sqrt == n\n",
        "num_ids": 26
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 :\n        return True\n    if n == 0 :\n        return False\n    if n < 0 :\n        n = -n\n    return pow(n, 1/2) == int(pow(n, 1/2))\n",
        "num_ids": 60
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    if n == 1 :\n        return True\n    if n == 0 :\n        return False\n    if n % 2 == 0 :\n        return False\n    sqrt = int(n**0.5)\n    return (sqrt * sqrt == n)\n",
        "num_ids": 73
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    if n == 0 or n == 1 :\n        return True\n    x = n // 2\n    while x * x!= n :\n        if x * x > n :\n            return False\n        x = (x + (n // x)) // 2\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # A number is said to be a perfect square if it is a perfect square rooted to a power of two, so it is perfect if its square root is a power of two. \n    # (sqrt(x) is an integer if x is a perfect square)\n    return ((int)(math.sqrt(n)) ** 2) == n\n",
        "num_ids": 79
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    r = n ** (0.5)\n    if (r - int(r) == 0) :\n        return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    temp = math.sqrt(n)\n    if temp == int(temp) :\n        return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n==0) :\n        return true\n    x = int(math.sqrt(n))\n    if (math.pow(x,2)==n) :\n        return true\n    else :\n        return false\n",
        "num_ids": 57
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = int(math.sqrt(n))\n    return s*s == n\n",
        "num_ids": 23
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product%2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x*y, arr) % 2 == 0\n",
        "num_ids": 22
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # print(arr)\n    prod = 1\n    for val in arr:\n        prod *= val\n    if prod % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x,y: x*y, arr)%2==0\n",
        "num_ids": 22
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    l = len(arr)\n    prod = 1\n    for i in range(l):\n        prod *= arr[i]\n    if prod%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in range(0,len(arr)):\n        product = product * arr[i]\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    p = 1\n    for item in arr:\n        p = p * item\n    if p%2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    arr = [int(x) for x in arr]\n    if len(arr)==0:\n        return False\n    return arr[0] % 2 == 0 and is_product_even(arr[1:])\n",
        "num_ids": 53
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    for i in xrange(0, len(arr), 2):\n        if arr[i]*arr[i+1]%2!= 0:\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    curr_max = 0\n    for l in lists:\n        curr_sum = sum(l)\n        if curr_sum > curr_max:\n            curr_max = curr_sum\n            result = [l]\n        elif curr_sum == curr_max:\n            result.append(l)\n    return result\n",
        "num_ids": 90
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max([sum(x) for x in lists])\n",
        "num_ids": 16
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for list in lists:\n        if sum(list) > max_sum:\n            max_sum = sum(list)\n            max_list = list\n    return max_list\n",
        "num_ids": 58
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sums = []\n    for each_list in lists:\n        sums.append(sum(each_list))\n    return max(sums)\n",
        "num_ids": 38
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = []\n    for l in lists:\n        sum = 0\n        for i in l:\n            sum += i\n        if sum > max_sum:\n            max_sum = sum\n            max_sum_list = l\n    return max_sum_list\n",
        "num_ids": 75
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n",
        "num_ids": 58
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if lists == []:\n        return []\n    if type(lists[0]) == list:\n        return max_sum_list(lists[0])\n    else:\n        return lists[0]\n",
        "num_ids": 49
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    lists.sort(key=sum, reverse=True)\n    return lists\n",
        "num_ids": 20
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n    else:\n        m = [max(x) for x in zip(*lists)]\n        return lists[m.index(max(m))]\n",
        "num_ids": 46
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        total = sum(i)\n        if total > max_sum:\n            max_sum = total\n            max_list = [i]\n        elif total == max_sum:\n            max_list.append(i)\n    return max_list\n",
        "num_ids": 82
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            max_run = max(max_run, curr_run)\n            curr_run = 0\n    return max(max_run, curr_run)\n",
        "num_ids": 94
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    temp_count = 0\n    for i in range(0, len(test_str)):\n        if test_str[i].isupper():\n            temp_count += 1\n        elif temp_count > max_count:\n            max_count = temp_count\n        else:\n            temp_count = 0\n    return max_count\n",
        "num_ids": 89
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    res = 0\n    cur_max = 0\n    for c in test_str:\n        if c.isupper():\n            cur_max += 1\n        else:\n            cur_max = 0\n        res = max(res, cur_max)\n    return res\n",
        "num_ids": 65
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    if len(test_str) == 1:\n        return 1 if test_str[0].isupper() else 0\n    if len(test_str) == 2:\n        return 2 if test_str[0].isupper() and test_str[1].isupper() else 1\n",
        "num_ids": 84
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    for i in test_str:\n        if i.isupper():\n            uppercase_count += 1\n    return uppercase_count\n",
        "num_ids": 45
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    if len(test_str) == 1:\n        if test_str[0].isupper():\n            return 1\n        else:\n            return 0\n    if test_str[0].isupper():\n        return 1 + max_run_uppercase(test_str[1:])\n    else:\n        return max_run_uppercase(test_str[1:])\n",
        "num_ids": 108
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # curr_max_run is a helper function that is used to determine the max run of uppercase characters in a substring\n    # we traverse the string one character at a time, and check whether it is uppercase or not. If it is uppercase, we\n    # increase the count, else we decrease the count\n    def curr_max_run(s, i):\n        count = 1\n        while i < len(s) and s[i].isupper():\n            count += 1\n            i += 1\n        return count, i\n",
        "num_ids": 128
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    if len(test_str) == 0:\n        return 0\n    for i in test_str:\n        if i.isupper():\n            count+=1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return max_count\n",
        "num_ids": 81
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    cur_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            cur_run += 1\n        else:\n            max_run = max(max_run, cur_run)\n            cur_run = 0\n    return max_run\n",
        "num_ids": 82
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    i=0\n    j=0\n    m=0\n    while i<len(test_str):\n        if test_str[i].isupper():\n            j=i\n            m=m+1\n        else:\n            i=i+1\n    print(m)\n    return m\n",
        "num_ids": 73
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return -1\n    \ndef first_even(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2 == 0:\n            return i\n    return -1\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            return n\n    raise ValueError('no odd number found')\n",
        "num_ids": 35
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0] for nums in nums if nums % 2!= 0\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2 == 1:\n            return num\n    return None\n",
        "num_ids": 27
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!= 0:\n            return num\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = False\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    # Your Code Here\n    \n    if test_tup[K] == None:\n        return True\n    else:\n        return False\n    \ndef check_K_range(test_tup, K, I):\n    '''\n    Write a function to check if the given tuple contains the Kth tuple in the given range or not.\n    '''\n    \n    # Your Code Here\n    \n    if test_tup[K] == None:\n        return False\n    else:\n        return I\n",
        "num_ids": 37
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return (test_tup[0] == test_tup[K])\n",
        "num_ids": 21
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #base condition\n    if K < 0:\n        print(\"K must be non-negative\")\n        return\n    if K == 0:\n        print(\"K must be non-zero\")\n        return\n    \n    #checking tuples is None\n    if not isinstance(test_tup, tuple):\n        print(\"K value is not valid, K must be a tuple\")\n        return\n    if len(test_tup) == 0:\n        print(\"K value is not valid, K must be a tuple\")\n        return\n",
        "num_ids": 124
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i[0] == K:\n            return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if test_tup[1][K] == test_tup[0][K] else False\n",
        "num_ids": 28
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[1] == K\n",
        "num_ids": 14
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return True\n    elif test_tup[0] > K:\n        return False\n    else:\n        return check_K((test_tup[1], test_tup[2]), K)\n",
        "num_ids": 64
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    word, count = test_tup\n    return word[0:K] == K\n",
        "num_ids": 23
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in hash_table:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for idx in range(len(test_tup1)):\n        if test_tup1[idx] < test_tup2[idx]:\n            return True\n        elif test_tup1[idx] > test_tup2[idx]:\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return [test_tup1[i]<test_tup2[i] for i in range(len(test_tup1))]\n",
        "num_ids": 37
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for index in range(0, len(test_tup1)):\n        if test_tup2[index] > test_tup1[index]:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] or test_tup1[1] < test_tup2[1] or test_tup1[2] < test_tup2[2]:\n        return True\n    else:\n        return False\n",
        "num_ids": 70
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for x in range(len(test_tup1)):\n        if test_tup1[x] > test_tup2[x]:\n            return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple(map(lambda x, y: x < y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 46
    }
]