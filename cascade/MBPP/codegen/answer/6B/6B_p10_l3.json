[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    import collections\n    return collections.Counter(test_tup1) & collections.Counter(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    return tup1.intersection(tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # print \"similar_elements\"\n    # print test_tup1, test_tup2\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    # print s1, s2\n    \n    return s1.intersection(s2)\n    \ndef get_common_tup(list_of_tuples):\n    '''\n    Write a function to find the common tuple elements from a list of tuples.\n    '''\n    # print \"get_common_tup\"\n    # print list_of_tuples\n    res_list = []\n    for i in range(0,len(list_of_tuples)):\n        for j in range(0,len(list_of_tuples)):\n            if i!= j:\n                if similar_elements(list_of_tuples[i], list_of_tuples[j]):\n                    res_list.append(list_of_tuples[i])\n                    break\n    return res_list\n    \ndef get_tup_list_from_tup_list(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_tup_list_from_tup_list\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(list(list_of_tups[i]))\n    return res_list\n    \ndef get_list_of_lists_from_tuples(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_lists_from_tuples\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(list(list_of_tups[i]))\n    return res_list\n    \ndef get_tup_list_from_list_of_lists(list_of_lists):\n    '''\n    Write a function to convert a list of lists to a list of tuples.\n    '''\n    # print \"get_tup_list_from_list_of_lists\"\n    res_list = []\n    for i in range(0,len(list_of_lists)):\n        res_list.append(tuple(list_of_lists[i]))\n    return res_list\n    \ndef get_list_of_tuples_from_list_of_lists(list_of_lists):\n    '''\n    Write a function to convert a list of lists to a list of tuples.\n    '''\n    # print \"get_list_of_tuples_from_list_of_lists\"\n    res_list = []\n    for i in range(0,len(list_of_lists)):\n        res_list.append(tuple(list_of_lists[i]))\n    return res_list\n    \ndef get_list_of_tuples_from_tup_list(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_tuples_from_tup_list\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(list(list_of_tups[i]))\n    return res_list\n    \ndef get_list_of_tuples_from_list_of_tuples(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_tuples_from_list_of_tuples\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(list(list_of_tups[i]))\n    return res_list\n    \ndef get_tuple_list_from_list_of_tuples(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_tuple_list_from_list_of_tuples\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(tuple(list_of_tups[i]))\n    return res_list\n    \ndef get_list_of_lists_from_list_of_tuples(list_of_tuples):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_lists_from_list_of_tuples\"\n    res_list = []\n    for i in range(0,len(list_of_tuples)):\n        res_list.append(list(list_of_tuples[i]))\n    return res_list\n    \ndef get_list_of_tuples_from_list_of_lists(list_of_lists):\n    '''\n    Write a function to convert a list of lists to a list of tuples.\n    '''\n    # print \"get_list_of_tuples_from_list_of_lists\"\n    res_list = []\n    for i in range(0,len(list_of_lists)):\n        res_list.append(tuple(list_of_lists[i]))\n    return res_list\n    \ndef get_tuple_list_from_list_of_lists(list_of_lists):\n    '''\n    Write a function to convert a list of lists to a list of tuples.\n    '''\n    # print \"get_tuple_list_from_list_of_lists\"\n    res_list = []\n    for i in range(0,len(list_of_lists)):\n        res_list.append(tuple(list_of_lists[i]))\n    return res_list\n    \ndef get_list_of_tuples_from_list_of_tuples(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_tuples_from_list_of_tuples\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(list(list_of_tups[i]))\n    return res_list\n    \ndef get_list_of_lists_from_tup_list(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_lists_from_tup_list\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(list(list_of_tups[i]))\n    return res_list\n    \ndef get_list_of_tuples_from_tup_list(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_tuples_from_tup_list\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(tuple(list_of_tups[i]))\n    return res_list\n    \ndef get_list_of_tuples_from_list_of_tuples(list_of_tups):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    # print \"get_list_of_tuples_from_list_of_tuples\"\n    res_list = []\n    for i in range(0,len(list_of_tups)):\n        res_list.append(list(list_of_tups[i]))\n    return res_list"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result_set = []\n    for element in test_tup1:\n        if element in test_tup2:\n            result_set.append(element)\n    return result_set\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1 == elem2:\n            common_elements.append(elem1)\n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return similar_elements(test_tup2, test_tup1)\n    else:\n        return (test_tup1[0], [el for el in test_tup1[1] if el in test_tup2[1]])\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for i in test_tup1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    for i in test_tup2:\n        if i not in dict2:\n            dict2[i] = 1\n        else:\n            dict2[i] += 1\n    return len(dict1.keys() & dict2.keys())\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = test_tup1[0]\n    list2 = test_tup2[0]\n    shared_elements = list(set(list1) & set(list2))\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for i in range(0, len(test_tup1)):\n        for j in range(0, len(test_tup2)):\n            if(test_tup1[i] == test_tup2[j]):\n                return (test_tup1[i])\n            else:\n                continue\n    return ('There are no similar elements')\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    i = j = 0\n    list_one = list(test_tup1)\n    list_two = list(test_tup2)\n    while i < len(list_one) and j < len(list_two):\n        if list_one[i] == list_two[j]:\n            print list_one[i]\n            i += 1\n            j += 1\n        elif list_one[i] > list_two[j]:\n            j += 1\n        else:\n            i += 1\n    return\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.ceil(math.sqrt(n))) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return True\n            break\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # if n < 2:\n    #     return True\n    # else:\n    #     for i in range(2,n):\n    #         if n % i == 0:\n    #             return True\n    # return False\n    if n<2:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return True\n    return False\ndef nth_prime_number(n):\n    '''\n    Write a python function to generate nth prime number.\n    '''\n    if n == 1:\n        return 2\n    p = 3\n    if n == 2:\n        return 2\n    i = 3\n    while n>i:\n        if is_not_prime(p):\n            n = n-1\n        else:\n            p = p+2\n        i = i+2\n    return p\ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a number.\n    '''\n    fact = 1\n    for i in range(2,n+1):\n        fact = fact * i\n    return fact\ndef get_permutations(n):\n    '''\n    Write a python function to get permutations of a list.\n    '''\n    perm = []\n    if n == 1:\n        perm.append([1])\n    else:\n        for i in range(n):\n            perm.append([i+1])\n        for j in range(n-1):\n            for i in range(j+1,n):\n                temp = perm[j]\n                perm[j] = perm[i]\n                perm[i] = temp\n    return perm\ndef find_max_p(n):\n    '''\n    Write a python function to find largest prime factor of a number.\n    '''\n    for i in range(n,1,-1):\n        if is_not_prime(i):\n            if n%i == 0:\n                return i\ndef find_min_p(n):\n    '''\n    Write a python function to find smallest prime factor of a number.\n    '''\n    for i in range(2,n):\n        if is_not_prime(i):\n            if n%i == 0:\n                return i\ndef reverse_number(n):\n    '''\n    Write a python function to reverse an integer.\n    '''\n    r = 0\n    while n:\n        r = r*10+n%10\n        n = n//10\n    return r\ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    s = str(n)\n    if s == s[::-1]:\n        return True\n    return False\ndef palindrome_checker(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    if is_palindrome(n):\n        return True\n    return False\ndef nth_palindrome(n):\n    '''\n    Write a python function to find nth palindrome.\n    '''\n    if n == 1:\n        return 1\n    p = 0\n    while p < n:\n        p = p+1\n        i = n-p\n        if is_palindrome(i):\n            return i\ndef fibonacci_number(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    a = 0\n    b = 1\n    for i in range(n-1):\n        a,b = b,a+b\n    return b\ndef fibonacci_series(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    a = 0\n    b = 1\n    series = [a,b]\n    for i in range(n-1):\n        a,b = b,a+b\n        series.append(b)\n    return series\ndef is_perfect(n):\n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    s = 0\n    for i in range(1,n):\n        if n%i == 0:\n            s = s+i\n    if s == n:\n        return True\n    return False\ndef perfect_checker(n):\n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    if is_perfect(n):\n        return True\n    return False\ndef nth_perfect(n):\n    '''\n    Write a python function to find nth perfect number.\n    '''\n    if n == 1:\n        return 6\n    p = 0\n    while p < n:\n        p = p+1\n        i = n-p\n        if is_perfect(i):\n            return i\ndef lcm(a,b):\n    '''\n    Write a python function to find the lcm of two numbers.\n    '''\n    return a*b//math.gcd(a,b)\ndef factorial_of_number(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    f = 1\n    for i in range(2,n+1):\n        f = f*i\n    return f\ndef is_perfect_number(n):\n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    if is_perfect(n):\n        return True\n    return False\ndef is_abundant_number(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    s = 0\n    for i in range(1,n):\n        if n%i == 0:\n            s = s+i\n    if s > n:\n        return True\n    return False\ndef abundant_checker(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if is_abundant_number(n):\n        return True\n    return False\ndef nth_abundant(n):\n    '''\n    Write a python function to find nth abundant number.\n    '''\n    if n == 1:\n        return 1\n    p = 0\n    while p < n:\n        p = p+1\n        i = n-p\n        if abundant_checker(i):\n            return i\ndef lcm_of_two_numbers(n):\n    '''\n    Write a python function to find lcm of two numbers.\n    '''\n    return n*n*n//math.gcd(n,n,n)\ndef is_perfect_number(n):\n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    if is_perfect(n):\n        return True\n    return False\ndef is_abundant_number(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if abundant_checker(n):\n        return True\n    return False\ndef get_amicable_numbers(n):\n    '''\n    Write a python function to find all the amicable numbers.\n    '''\n    a = 0\n    b = 0\n    if is_abundant_number(n):\n        return [n]\n    while n >= a:\n        if n == a:\n            return [a,b]\n        a = a+1\n        b = n\n        if is_abundant_number(b):\n            if a%b == 0:\n                return [a,b]\n    return [a,b]\ndef get_amicable_sum(n):\n    '''\n    Write a python function to find sum of amicable numbers.\n    '''\n    a = 0\n    b = 0\n    if is_abundant_number(n):\n        return [n]\n    while n >= a:\n        if n == a:\n            return a\n        a = a+1\n        b = n\n        if is_abundant_number(b):\n            if a%b == 0:\n                return a+b\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef find_all_primes(n):\n    '''\n    Write a python function to find al"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 2:\n        return False\n    elif n % 2 == 0:\n        return n == 2\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef gcd(a, b):\n    '''\n    Write a python function to find the gcd of a and b.\n    '''\n    if a == 0:\n        return b\n    return gcd(b % a, a)\ndef is_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n    return True\ndef get_factors(n):\n    '''\n    Write a python function to find the factors of a given number.\n    '''\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\ndef lcm(a, b):\n    '''\n    Write a python function to find the lcm of two numbers.\n    '''\n    return a * b / gcd(a, b)\ndef find_digit(n, x):\n    '''\n    Write a python function to find the xth digit of a given number.\n    '''\n    return (n // (10**(x - 1))) % 10\ndef find_digit_b(n, x):\n    '''\n    Write a python function to find the xth digit of a given number using bit manipulation.\n    '''\n    if x > 32:\n        return None\n    else:\n        res = 0\n        for i in range(x):\n            bit = n & 1\n            res = 10 * res + bit\n            n = n >> 1\n        return res\ndef to_digit(n):\n    '''\n    Write a python function to convert a number to a digit.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10\ndef to_digit_b(n):\n    '''\n    Write a python function to convert a number to a digit using bit manipulation.\n    '''\n    if n == 0:\n        return 0\n    else:\n        res = 0\n        while n:\n            res = 10 * res + n % 10\n            n = n // 10\n        return res\ndef to_str(n, x):\n    '''\n    Write a python function to convert a number to a string.\n    '''\n    if x == 1:\n        return str(n)\n    else:\n        res = []\n        while n:\n            res.append(str(n % 10))\n            n = n // 10\n        return ''.join(res[::-1])\ndef to_str_b(n):\n    '''\n    Write a python function to convert a number to a string using bit manipulation.\n    '''\n    if n == 0:\n        return 0\n    else:\n        res = 0\n        while n:\n            res = 10 * res + n % 10\n            n = n // 10\n        return res\ndef add_two_str(a, b):\n    '''\n    Write a python function to add two strings.\n    '''\n    return to_str_b(to_digit_b(a) + to_digit_b(b))\ndef add_two_num(a, b):\n    '''\n    Write a python function to add two numbers.\n    '''\n    if b < 0:\n        return add_two_num(a, -b)\n    return a + b\ndef power(a, b):\n    '''\n    Write a python function to calculate a^b.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b - 1)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\ndef factorial_b(n):\n    '''\n    Write a python function to find the factorial of a given number using bit manipulation.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        res = 1\n        while n:\n            res = res * n\n            n = n - 1\n        return res\ndef p(n):\n    '''\n    Write a python function to calculate p(n).\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return n * p(n - 1)\ndef p_b(n):\n    '''\n    Write a python function to calculate p(n) using bit manipulation.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        res = 1\n        while n:\n            res = res * n\n            n = n - 1\n        return res\ndef combination(n, r):\n    '''\n    Write a python function to calculate the combination of n and r.\n    '''\n    if r < 0 or r > n:\n        return None\n    if r == 0:\n        return 1\n    return combination(n - 1, r - 1) + combination(n - 1, r)\ndef combination_b(n, r):\n    '''\n    Write a python function to calculate the combination of n and r using bit manipulation.\n    '''\n    if r < 0 or r > n:\n        return None\n    if r == 0:\n        return 1\n    res = 1\n    while r:\n        res = res * (n - r + 1)\n        n = n - 1\n        r = r - 1\n    return res\ndef binary_to_decimal(n):\n    '''\n    Write a python function to convert a binary number to a decimal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + 2 * (binary_to_decimal(n // 10))\ndef binary_to_decimal_b(n):\n    '''\n    Write a python function to convert a binary number to a decimal number using bit manipulation.\n    '''\n    if n == 0:\n        return 0\n    else:\n        res = 0\n        while n:\n            bit = n & 1\n            res = 10 * res + bit\n            n = n >> 1\n        return res\ndef remove_zero(n):\n    '''\n    Write a python function to remove leading zeros from a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n // 10\ndef remove_zero_b(n):\n    '''\n    Write a python function to remove leading zeros from a given number using bit manipulation.\n    '''\n    if n == 0:\n        return 0\n    else:\n        res = 0\n        while n:\n            bit = n & 1\n            res = 1 * res + bit\n            n = n >> 1\n        return res\ndef remove_common_digits(a, b):\n    '''\n    Write a python function to remove common digits from a and b.\n    '''\n    if a < b:\n        small = a\n        big = b\n    else:\n        small = b\n        big = a\n    while small:\n        if small & 1 == 1 and big & 1 == 1:\n            small = small >> 1\n            big = big >> 1\n        else:\n            small = small >> 1\n            big = big >> 1\n    return small\ndef is_equal_b(a, b):\n    '''\n    Write a python function to determine whether a and b are equal using bit manipulation.\n    '''\n    return not a ^ b\ndef is_equal(a, b):\n    '''\n    Write a python function to determine whether a and b are equal.\n    '''\n    if a < 0 or b < 0:\n        return None\n    if a == b:\n        return True\n    elif a > b:\n        return is_equal(a - b, b)"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n%2 == 0:\n        return True\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n%i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    elif n%2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n%i == 0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return True\n    if n==2:\n        return False\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            return True\n    return False\ndef reverse_str(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    s = s.strip()\n    return s[::-1]\ndef factorial_iterative(n):\n    '''\n    Write a python function to compute the factorial of a number\n    using iteration.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    return fact\ndef factorial_recursive(n):\n    '''\n    Write a python function to compute the factorial of a number\n    using recursion.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function that returns the nth number in fibonacci sequence.\n    '''\n    if n==0 or n==1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef fibonacci_dynamic(n):\n    '''\n    Write a python function that returns the nth number in fibonacci sequence\n    using dynamic programming.\n    '''\n    if n==0 or n==1:\n        return n\n    a = 0\n    b = 1\n    for i in range(n-1):\n        a, b = b, a+b\n    return b\ndef factorial_dynamic(n):\n    '''\n    Write a python function to compute the factorial of a number\n    using dynamic programming.\n    '''\n    if n==0 or n==1:\n        return 1\n    a = 1\n    for i in range(n,1,-1):\n        a = a * i\n    return a\ndef power_iterative(base, exp):\n    '''\n    Write a python function to compute the power of a number using iteration.\n    '''\n    if exp==0:\n        return 1\n    if exp == 1:\n        return base\n    res = 1\n    for i in range(exp):\n        res = res * base\n    return res\ndef power_recursive(base, exp):\n    '''\n    Write a python function to compute the power of a number using recursion.\n    '''\n    if exp==0:\n        return 1\n    elif exp==1:\n        return base\n    else:\n        return base * power_recursive(base,exp-1)\ndef power_builtin(base, exp):\n    '''\n    Write a python function to compute the power of a number using ** operator.\n    '''\n    return pow(base, exp)\ndef power_recur_comp(base, exp):\n    '''\n    Write a python function to compute the power of a number using recursion\n    using comparison\n    '''\n    if exp==0:\n        return 1\n    elif exp==1:\n        return base\n    if exp % 2 == 0:\n        return power_recur_comp(base*base, exp/2)\n    else:\n        return power_recur_comp(base*base, (exp-1)/2)\ndef find_rotation(s1, s2):\n    '''\n    Write a python function to determine if two strings are a rotation of each other\n    '''\n    if len(s1)!= len(s2):\n        return False\n    temp = s1+s1\n    if temp.find(s2)!= -1:\n        return True\n    return False\ndef is_substring(s1, s2):\n    '''\n    Write a python function to determine if s1 is a substring of s2\n    '''\n    if s1 in s2:\n        return True\n    return False\ndef find_permutation(s1, s2):\n    '''\n    Write a python function to find permutation of s2 in s1\n    '''\n    if len(s1)!=len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1.find(s2[i])!= -1:\n            s1 = s1.replace(s2[i], '', 1)\n    if len(s1) == 0:\n        return True\n    return False\ndef find_permutation_recursive(s1, s2):\n    '''\n    Write a python function to find permutation of s2 in s1\n    using recursion\n    '''\n    if s1=='':\n        return True\n    if len(s1) == 0:\n        return False\n    for i in range(len(s1)):\n        if s1.find(s2[i])!= -1:\n            s1 = s1.replace(s2[i], '', 1)\n        if len(s1) == 0:\n            return True\n    return False\ndef count_vowels(s):\n    '''\n    Write a python function to count vowels in a string\n    '''\n    vowels = 0\n    for i in range(len(s)):\n        if s[i] in 'aeiouAEIOU':\n            vowels += 1\n    return vowels\ndef count_consonants(s):\n    '''\n    Write a python function to count consonants in a string\n    '''\n    consonants = 0\n    for i in range(len(s)):\n        if s[i] not in 'aeiouAEIOU':\n            consonants += 1\n    return consonants\ndef count_vowels_recursive(s):\n    '''\n    Write a python function to count vowels in a string\n    using recursion\n    '''\n    if s == '':\n        return 0\n    if s[0] in 'aeiouAEIOU':\n        return 1 + count_vowels_recursive(s[1:])\n    else:\n        return count_vowels_recursive(s[1:])\ndef count_consonants_recursive(s):\n    '''\n    Write a python function to count consonants in a string\n    using recursion\n    '''\n    if s == '':\n        return 0\n    if s[0] not in 'aeiouAEIOU':\n        return 1 + count_consonants_recursive(s[1:])\n    else:\n        return count_consonants_recursive(s[1:])\ndef is_anagram_iterative(s1, s2):\n    '''\n    Write a python function to determine if two strings are anagrams\n    using iteration\n    '''\n    if len(s1)!=len(s2):\n        return False\n    a = sorted(s1)\n    b = sorted(s2)\n    if a==b:\n        return True\n    return False\ndef is_anagram_recursive(s1, s2):\n    '''\n    Write a python function to determine if two strings are anagrams\n    using recursion\n    '''\n    if s1=='' or s2=='':\n        return True\n    if len(s1)!= len(s2):\n        return False\n    if s1[0]!= s2[0]:\n        return False\n    return is_anagram_recursive(s1[1:], s2[1:])\ndef is_anagram_builtin(s1, s2):\n    '''\n    Write a python function to determine if two strings are anagrams\n    using builtin functions\n    '''\n    if len(s1)!=len(s2):\n        return False\n    return sorted(s1)==sorted(s2)\ndef find_rotation_iterative(s1, s2):\n    '''\n    Write a python function to find the rotation of s2 in s1\n    using iteration\n    '''\n    if len(s1)!=len(s2):\n        return False\n    for i in range(len(s1)-1):\n        temp = s1[i:]\n        if temp.find(s2)!= -1:\n            return True\n    return False\ndef find_rotation_recursive(s1, s2):\n    '''\n    Write a python function to find the rotation o"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    for x in range(2, int(math.sqrt(n))+1):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q = []\n    hq.heapify(q)\n    for i in range(n):\n        hq.heappush(q, nums[i])\n    for i in range(n, len(nums)):\n        if nums[i] > q[0]:\n            hq.heapreplace(q, nums[i])\n    return q\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    q = []\n    hq.heapify(q)\n    for i in range(n):\n        hq.heappush(q, nums[i])\n    for i in range(n, len(nums)):\n        if nums[i] < q[0]:\n            hq.heapreplace(q, nums[i])\n    return q\n    \ndef heap_sort(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of that list in\n    descending order using a heap data structure.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(len(nums))]\n    \ndef heap_sort_largest(nums, n):\n    '''\n    Write a function to sort a list of numbers in descending order using a min-heap.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        hq.heappushpop(nums, hq.heappop(nums))\n    return nums\n    \ndef heap_sort_smallest(nums,n):\n    '''\n    Write a function to sort a list of numbers in ascending order using a min-heap.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        hq.heappushpop(nums, hq.heappop(nums))\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    if n==0:\n        return []\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    res=[]\n    for i in range(n-1,-1,-1):\n        res.append(hq.heappop(h))\n    return res\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h=[]\n    if n==0:\n        return []\n    for i in range(n):\n        hq.heappush(h,-nums[i])\n    res=[]\n    for i in range(n-1,-1,-1):\n        res.append(-hq.heappop(h))\n    return res\ndef heap_queue_kth(nums,n):\n    '''\n    Write a function that returns the nth largest integer in the array.\n    '''\n    h=[]\n    if n==0:\n        return -1\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    return -hq.heappop(h)\ndef heap_queue_count_smaller(nums,n):\n    '''\n    Write a function to count the number of elements in a given array that are smaller than a given number.\n    '''\n    h=[]\n    res=0\n    for i in range(n):\n        hq.heappush(h,-nums[i])\n    for i in range(n-1,-1,-1):\n        if nums[i]>-hq.heappop(h):\n            res+=1\n    return res\ndef heap_queue_count_larger(nums,n):\n    '''\n    Write a function to count the number of elements in a given array that are larger than a given number.\n    '''\n    h=[]\n    res=0\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    for i in range(n-1,-1,-1):\n        if nums[i]<-hq.heappop(h):\n            res+=1\n    return res\ndef heap_queue_count_equal(nums,n):\n    '''\n    Write a function to count the number of elements in a given array that are equal to a given number.\n    '''\n    h=[]\n    res=0\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    for i in range(n-1,-1,-1):\n        if nums[i]!=hq.heappop(h):\n            res+=1\n    return res\ndef heap_queue_count_smaller_equal(nums,n):\n    '''\n    Write a function to count the number of elements in a given array that are smaller than or equal to a given number.\n    '''\n    h=[]\n    res=0\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    for i in range(n-1,-1,-1):\n        if nums[i]>hq.heappop(h):\n            res+=1\n    return res\ndef heap_queue_count_larger_equal(nums,n):\n    '''\n    Write a function to count the number of elements in a given array that are larger than or equal to a given number.\n    '''\n    h=[]\n    res=0\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    for i in range(n-1,-1,-1):\n        if nums[i]<hq.heappop(h):\n            res+=1\n    return res\ndef heap_queue_count_occurence(nums,k):\n    '''\n    Write a function to count the number of distinct elements in an array.\n    '''\n    h=[]\n    for i in range(k):\n        hq.heappush(h,nums[i])\n    res=1\n    for i in range(k,len(nums)):\n        if nums[i]!=hq.heappop(h):\n            hq.heappush(h,nums[i])\n            res+=1\n    return res\ndef heap_queue_count_occurence_2(nums,k):\n    '''\n    Write a function to count the number of distinct elements in an array.\n    '''\n    h=[]\n    res=0\n    for i in range(k):\n        hq.heappush(h,nums[i])\n    for i in range(k,len(nums)):\n        if nums[i]!=hq.heappop(h):\n            hq.heappush(h,nums[i])\n            res+=1\n    return res\ndef heap_queue_count_occurence_3(nums,k):\n    '''\n    Write a function to count the number of distinct elements in an array.\n    '''\n    h=[]\n    res=0\n    for i in range(k):\n        hq.heappush(h,-nums[i])\n    for i in range(k,len(nums)):\n        if nums[i]!=-hq.heappop(h):\n            hq.heappush(h,-nums[i])\n            res+=1\n    return res\ndef heap_queue_count_occurence_4(nums,k):\n    '''\n    Write a function to count the number of distinct elements in an array.\n    '''\n    h=[]\n    res=0\n    for i in range(k):\n        hq.heappush(h,nums[i])\n    for i in range(k,len(nums)):\n        if nums[i]!=hq.heappop(h):\n            hq.heappush(h,nums[i])\n            res+=1\n    return res\ndef heap_queue_count_occurence_5(nums,k):\n    '''\n    Write a function to count the number of distinct elements in an array.\n    '''\n    h=[]\n    res=0\n    for i in range(k):\n        hq.heappush(h,nums[i])\n    for i in range(k,len(nums)):\n        if nums[i]!=hq.heappop(h):\n            hq.heappush(h,nums[i])\n            res+=1\n    return res\ndef heap_queue_count_occurence_6(nums,k):\n    '''\n    Write a function to count the number of distinct elements in an array.\n    '''\n    h=[]\n    res=0\n    for i in range(k):\n        hq.heappush(h,nums[i])\n    for i in range(k,len(nums)):\n        if nums[i]!=hq.heappop(h):\n            hq.heappush(h,nums[i])\n            res+=1\n    return res\ndef heap_queue_count_occurence_7(nums,k):\n    '''\n    Write a function to count the number of distinct elements in an array.\n    '''\n    h=[]\n    res=0\n    for i in range(k):\n        hq.heappush(h,nums[i])\n    for i in range(k,len(nums)):\n        if nums[i]!=hq.heappop(h):\n            hq.heappush(h,nums[i])\n            res+=1\n    return res\ndef heap_queue_count_occurence_8(nums,k):\n    '''\n    Write a function to count the number of distinct elements in an array.\n    '''\n    h=[]\n    res=0\n    for i in range(k):\n        hq.heappush(h,nums[i])\n    for i in range(k,len(nums)):\n        if nums[i]!=hq.heappop("
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        n=len(nums)\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(n)]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n > len(nums):\n        n=len(nums)\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(n)]\ndef heap_delete(nums,n):\n    '''\n    Write a function to delete the smallest element from a list of integers.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    return h\ndef heap_insert(nums,n):\n    '''\n    Write a function to insert an element into a list of integers.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,n)\n    return h\ndef heap_increase_key(nums,n,k):\n    '''\n    Write a function to increase the value of a number in a list of integers by k.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,k)\n    return h\ndef heap_decrease_key(nums,n,k):\n    '''\n    Write a function to decrease the value of a number in a list of integers by k.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,-k)\n    return h\ndef heap_empty(nums):\n    '''\n    Write a function to check if a list of integers is empty or not.\n    '''\n    return not len(nums)\ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of integers in ascending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(nums))]\ndef heap_max_heapify(nums,i):\n    '''\n    Write a function to create a max heap from an unsorted list of integers.\n    '''\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < len(nums) and nums[i] < nums[left]:\n        largest = left\n    if right < len(nums) and nums[largest] < nums[right]:\n        largest = right\n    if largest!= i:\n        nums[i],nums[largest] = nums[largest],nums[i]\n        heap_max_heapify(nums,largest)\ndef heap_build_max_heap(nums):\n    '''\n    Write a function to create a max heap from an unsorted list of integers.\n    '''\n    for i in range(len(nums)/2-1,-1,-1):\n        heap_max_heapify(nums,i)\ndef heap_sort_max_heap(nums):\n    '''\n    Write a function to sort a list of integers in descending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(nums))]\ndef heap_create_max_heap(nums):\n    '''\n    Write a function to create a max heap from an unsorted list of integers.\n    '''\n    n = len(nums)\n    for i in range(n/2-1,-1,-1):\n        heap_max_heapify(nums,i)\ndef heap_delete_max(nums):\n    '''\n    Write a function to delete the maximum number from a list of integers.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    return h\ndef heap_insert_max(nums,n):\n    '''\n    Write a function to insert a number into a list of integers.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,n)\n    return h\ndef heap_increase_key_max(nums,n,k):\n    '''\n    Write a function to increase the value of a number in a list of integers by k.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,k)\n    return h\ndef heap_decrease_key_max(nums,n,k):\n    '''\n    Write a function to decrease the value of a number in a list of integers by k.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,-k)\n    return h\ndef heap_empty_max(nums):\n    '''\n    Write a function to check if a list of integers is empty or not.\n    '''\n    return not len(nums)\ndef heap_sort_max_heap(nums):\n    '''\n    Write a function to sort a list of integers in descending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(nums))]\ndef heap_build_max_heap(nums):\n    '''\n    Write a function to create a max heap from an unsorted list of integers.\n    '''\n    for i in range(len(nums)/2-1,-1,-1):\n        heap_max_heapify(nums,i)\ndef max_heap_insert(nums,n):\n    '''\n    Write a function to insert a number into a list of integers.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,n)\n    return h\ndef max_heap_increase_key(nums,n,k):\n    '''\n    Write a function to increase the value of a number in a list of integers by k.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,k)\n    return h\ndef max_heap_decrease_key(nums,n,k):\n    '''\n    Write a function to decrease the value of a number in a list of integers by k.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    hq.heappop(h)\n    hq.heappush(h,-k)\n    return h\ndef max_heap_delete(nums):\n    '''\n    Write a function to delete the maximum number from a list of integers.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush("
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    hq=[]\n    #Insert all elements to a heap\n    for i in range(n):\n        hq.append(nums[i])\n    #Extract elements from a heap and store them in a new array\n    new_arr=[]\n    for i in range(n):\n        x=hq.pop()\n        new_arr.append(x)\n    return new_arr\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq=[]\n    #Insert all elements to a heap\n    for i in range(n):\n        hq.append(nums[i])\n    #Extract elements from a heap and store them in a new array\n    new_arr=[]\n    for i in range(n):\n        x=hq.pop(0)\n        new_arr.append(x)\n    return new_arr\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in nums:\n        hq.heappush(heap,i)\n        if len(heap)>n:\n            hq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # if n==0 or len(nums)==0:\n    #     return []\n    # mq = []\n    # m = nums[0]\n    # i = 0\n    # while len(mq)<n:\n    #     if len(mq)<n:\n    #         hq.heappush(mq,(-m,i))\n    #     else:\n    #         if m>nums[i]:\n    #             hq.heappush(mq,(-m,i))\n    #         else:\n    #             hq.heappush(mq,-(nums[i]))\n    #     m = nums[i]\n    #     i+=1\n    # while len(mq)>n:\n    #     hq.heappop(mq)\n    # return [hq.heappop(mq)[0] for i in range(len(mq))]\n    # mq = []\n    # m = nums[0]\n    # i = 0\n    # while len(mq)<n:\n    #     if len(mq)<n:\n    #         hq.heappush(mq,(m,i))\n    #     else:\n    #         if m>nums[i]:\n    #             hq.heappush(mq,(m,i))\n    #         else:\n    #             hq.heappush(mq,-(nums[i]))\n    #     m = nums[i]\n    #     i+=1\n    # while len(mq)>n:\n    #     hq.heappop(mq)\n    # return [hq.heappop(mq)[0] for i in range(len(mq))]\n    mq = []\n    m = nums[0]\n    i = 0\n    while len(mq)<n:\n        if len(mq)<n:\n            hq.heappush(mq,(-m,i))\n        else:\n            if m>nums[i]:\n                hq.heappush(mq,(-m,i))\n            else:\n                hq.heappush(mq,-(nums[i]))\n        m = nums[i]\n        i+=1\n    while len(mq)>n:\n        hq.heappop(mq)\n    return [hq.heappop(mq)[0] for i in range(len(mq))]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)<n:\n        return False\n    else:\n        hq=[]\n        for i in range(n):\n            hq.append(nums[i])\n        hq.sort()\n        hq.reverse()\n        return hq\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    #print nums\n    for i in range(n):\n        hq.append(nums[i])\n    while len(hq) > 1:\n        hq.append(hq[0] + hq[1])\n        hq.pop(0)\n        hq.pop(0)\n    return hq\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq = []\n    #print nums\n    for i in range(n):\n        hq.append(nums[i])\n    while len(hq) > 1:\n        hq.append(hq[0] + hq[1])\n        hq.pop(0)\n        hq.pop(0)\n    return hq\n    \ndef heap_sort(nums):\n    '''\n    Write a function that takes in an unsorted array of integers and returns a sorted version of that array.\n    The function should return the same array and should not modify the original array.\n    '''\n    hq = []\n    #print nums\n    for i in range(len(nums)):\n        hq.append(nums[i])\n    while len(hq) > 1:\n        hq.append(hq[0] + hq[1])\n        hq.pop(0)\n        hq.pop(0)\n    return hq\n    \ndef heapsort(nums):\n    '''\n    Write a function that takes in an unsorted array of integers and returns a sorted version of that array.\n    The function should return the same array and should not modify the original array.\n    '''\n    hq = []\n    #print nums\n    for i in range(len(nums)):\n        hq.append(nums[i])\n    while len(hq) > 1:\n        hq.append(hq[0] + hq[1])\n        hq.pop(0)\n        hq.pop(0)\n    return hq\n    \ndef find_median(nums):\n    '''\n    Write a function that takes in an array of numbers and returns the median of the numbers.\n    If the array is even, return the average of the middle two numbers.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return (nums[0] + nums[1]) / 2\n    else:\n        return (nums[0] + nums[1] + nums[len(nums)-1]) / 3\n        \ndef find_median_low(nums):\n    '''\n    Write a function that takes in an array of numbers and returns the median of the numbers.\n    If the array is even, return the average of the middle two numbers.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return (nums[0] + nums[1]) / 2\n    else:\n        s = sorted(nums)\n        if len(s) % 2 == 0:\n            return (s[len(s)/2 - 1] + s[len(s)/2]) / 2\n        else:\n            return s[len(s)/2]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n>len(nums):\n        print \"Sorry, there are only {} elements in this list\".format(len(nums))\n        return\n    return hq.nlargest(n,nums)\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n>len(nums):\n        print \"Sorry, there are only {} elements in this list\".format(len(nums))\n        return\n    return hq.nsmallest(n,nums)\ndef sort_merge(nums1,nums2):\n    '''\n    Write a function to merge 2 sorted arrays of integers. You should not modify the array given, instead you should return a sorted array.\n    '''\n    if len(nums1)==0:\n        return nums2\n    if len(nums2)==0:\n        return nums1\n    i=0\n    j=0\n    res=[]\n    while i<len(nums1) and j<len(nums2):\n        if nums1[i]>nums2[j]:\n            res.append(nums2[j])\n            j+=1\n        else:\n            res.append(nums1[i])\n            i+=1\n    while i<len(nums1):\n        res.append(nums1[i])\n        i+=1\n    while j<len(nums2):\n        res.append(nums2[j])\n        j+=1\n    return res\ndef sort_quick(nums):\n    '''\n    Write a function to sort an array of integers using quick sort. You should not modify the array given, instead you should return the sorted array.\n    '''\n    if len(nums)<=1:\n        return nums\n    pivot=nums[0]\n    left=[x for x in nums[1:] if x<=pivot]\n    right=[x for x in nums[1:] if x>pivot]\n    return sort_quick(left)+[pivot]+sort_quick(right)\ndef sort_binary(nums):\n    '''\n    Write a function to sort an array of integers using a binary search. You should not modify the array given, instead you should return the sorted array.\n    '''\n    if len(nums)==0 or len(nums)==1:\n        return nums\n    pivot=nums[0]\n    left=[x for x in nums[1:] if x<=pivot]\n    right=[x for x in nums[1:] if x>pivot]\n    return sort_binary(left)+[pivot]+sort_binary(right)\ndef sort_bubble(nums):\n    '''\n    Write a function to sort an array of integers using a bubble sort. You should not modify the array given, instead you should return the sorted array.\n    '''\n    if len(nums)==0:\n        return nums\n    for i in range(len(nums)):\n        for j in range(len(nums)-1,i,-1):\n            if nums[j]<nums[j-1]:\n                nums[j],nums[j-1]=nums[j-1],nums[j]\n    return nums\ndef sort_insertion(nums):\n    '''\n    Write a function to sort an array of integers using a insertion sort. You should not modify the array given, instead you should return the sorted array.\n    '''\n    if len(nums)==0:\n        return nums\n    for i in range(1,len(nums)):\n        val=nums[i]\n        pos=i\n        while pos>0 and nums[pos-1]>val:\n            nums[pos]=nums[pos-1]\n            pos-=1\n        nums[pos]=val\n    return nums\ndef sort_shell(nums):\n    '''\n    Write a function to sort an array of integers using a shell sort. You should not modify the array given, instead you should return the sorted array.\n    '''\n    if len(nums)==0:\n        return nums\n    gap=len(nums)//2\n    while gap>0:\n        for i in range(gap,len(nums)):\n            val=nums[i]\n            pos=i\n            while pos>=gap and nums[pos-gap]>val:\n                nums[pos]=nums[pos-gap]\n                pos-=gap\n            nums[pos]=val\n        gap//=2\n    return nums\ndef sort_selection(nums):\n    '''\n    Write a function to sort an array of integers using a selection sort. You should not modify the array given, instead you should return the sorted array.\n    '''\n    if len(nums)==0:\n        return nums\n    for i in range(len(nums)):\n        min_pos=i\n        for j in range(i+1,len(nums)):\n            if nums[j]<nums[min_pos]:\n                min_pos=j\n        nums[i],nums[min_pos]=nums[min_pos],nums[i]\n    return nums\ndef sort_merge_iter(nums):\n    '''\n    Write a function to sort an array of integers using a merge sort. You should not modify the array given, instead you should return the sorted array.\n    '''\n    if len(nums)==0:\n        return nums\n    def merge_iter(a,b):\n        res=[]\n        i=0\n        j=0\n        while i<len(a) and j<len(b):\n            if a[i]<b[j]:\n                res.append(a[i])\n                i+=1\n            else:\n                res.append(b[j])\n                j+=1\n        while i<len(a):\n            res.append(a[i])\n            i+=1\n        while j<len(b):\n            res.append(b[j])\n            j+=1\n        return res\n    if len(nums)<=1:\n        return nums\n    mid=len(nums)//2\n    a=nums[:mid]\n    b=nums[mid:]\n    return merge_iter(sort_merge_iter(a),sort_merge_iter(b))\ndef sort_counting_sort(nums):\n    '''\n    Write a function to sort an array of integers using a counting sort. You should not modify the array given, instead you should return the sorted array.\n    '''\n    if len(nums)==0:\n        return nums\n    count=[0]*(max(nums)+1)\n    for x in nums:\n        count[x]+=1\n    res=[]\n    for i in range(len(count)):\n        for _ in range(count[i]):\n            res.append(i)\n    return res\ndef sort_radix(nums):\n    '''\n    Write a function to sort an array of strings by the length of the strings. You should not modify the array given, instead you should return the sorted array.\n    '''\n    if len(nums)==0:\n        return nums\n    digit=[chr(i) for i in range(97,123)]\n    def radix_sort(nums):\n        for i in range(len(nums)):\n            d=1\n            while i>=d:\n                count=[0]*26\n                for char in nums[i]:\n                    count[digit.index(char)]+=1\n                for j in range(1,d):\n                    count[j]+=count[j-1]\n                for k in range(len(nums[i])):\n                    char=nums[i][k]\n                    pos=digit.index(char)\n                    nums[i][k]=digit[count[pos]]\n                for char in nums[i]:\n                    pos=digit.index(char)\n                    count[pos]+=1\n                d*=10\n        return nums\n    return radix_sort(nums)\ndef sort_counting_sort_char(nums):\n    '''\n    Write a function to sort an array of strings by th"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums == None or len(nums) == 0:\n        return None\n    nums=list(set(nums))\n    nums.sort()\n    return nums[-n:]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ( x & (x-1) == 0)\ndef PrimeFactors(n): \n    '''\n    Input the number n, return all the prime factors of n\n    '''\n    PrimeFactors = []\n    while n % 2 == 0:\n        PrimeFactors.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            PrimeFactors.append(i)\n            n = n / i\n    if n > 2:\n        PrimeFactors.append(n)\n    return PrimeFactors\ndef is_Prime(x): \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if (x < 2): \n        return False\n    for i in range(2, int(math.sqrt(x)) + 1): \n        if (x % i == 0): \n            return False\n    return True\ndef is_Palindrome(num): \n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    return (str(num) == str(num)[::-1])\ndef MatrixMult(A, B): \n    '''\n    Write a python function to multiply two matrices A and B.\n    '''\n    res = [[0 for row in range(len(B[0]))] for col in range(len(A))] \n    for i in range(len(A)): \n        for j in range(len(B[0])): \n            for k in range(len(B)): \n                res[i][j] += A[i][k] * B[k][j] \n    return res\ndef fib(n): \n    '''\n    Write a python function to calculate nth Fibonacci number.\n    '''\n    if n < 0: \n        print (\"Incorrect input\")\n    # First Fibonacci number is 0 \n    elif n == 1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n == 2: \n        return 1\n    else: \n        return fib(n-1) + fib(n-2)\ndef sum_Digits(n): \n    '''\n    Write a python function to calculate sum of digits of given number.\n    '''\n    if n < 10: \n        return n\n    return (n % 10) + sum_Digits(n / 10)\ndef sum_Digits_List(n): \n    '''\n    Write a python function to calculate sum of digits of given list.\n    '''\n    if not isinstance(n, list): \n        return \"Invalid List!\"\n    sum = 0\n    for i in n: \n        sum = sum + sum_Digits(i)\n    return sum\ndef is_Odd_Odd_Odd(x): \n    '''\n    Write a python function to check whether the given number is odd, odd, odd or not.\n    '''\n    if (x % 2 == 0):\n        return \"Even\"\n    else:\n        return \"Odd\"\ndef is_Multiple_Three(x): \n    '''\n    Write a python function to check whether the given number is multiple of three or not.\n    '''\n    return (x % 3 == 0)\ndef is_Even(x): \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (x % 2 == 0)\ndef is_Prime_Number(x): \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if (x < 2): \n        return False\n    for i in range(2, int(math.sqrt(x)) + 1): \n        if (x % i == 0): \n            return False\n    return True\ndef is_Integer(x): \n    '''\n    Write a python function to check whether the given number is integer or not.\n    '''\n    return isinstance(x, int)\ndef is_Digit(x): \n    '''\n    Write a python function to check whether the given number is digit or not.\n    '''\n    if x >= 0: \n        return isinstance(x, int)\n    else: \n        return isinstance(x, long)\ndef is_Digit_List(x): \n    '''\n    Write a python function to check whether the given number is digit or not.\n    '''\n    if isinstance(x, list): \n        return all(is_Digit(i) for i in x)\n    else: \n        return is_Digit(x)\ndef is_Digit_List_Sum_Digits(x): \n    '''\n    Write a python function to calculate sum of digits of given list.\n    '''\n    if isinstance(x, list): \n        return sum(is_Digit_List(i) for i in x)\n    else: \n        return is_Digit_List(x)\ndef is_Digit_List_Sum_Digits_List(x): \n    '''\n    Write a python function to calculate sum of digits of given list.\n    '''\n    if isinstance(x, list): \n        return sum(is_Digit_List_Sum_Digits(i) for i in x)\n    else: \n        return is_Digit_List_Sum_Digits(x)\ndef is_Digit_List_Sum_Digits_List_List(x): \n    '''\n    Write a python function to calculate sum of digits of given list.\n    '''\n    if isinstance(x, list): \n        return sum(is_Digit_List_Sum_Digits_List(i) for i in x)\n    else: \n        return is_Digit_List_Sum_Digits_List(x)\ndef is_Digit_List_Sum_Digits_List_List_List(x): \n    '''\n    Write a python function to calculate sum of digits of given list.\n    '''\n    if isinstance(x, list): \n        return sum(is_Digit_List_Sum_Digits_List_List(i) for i in x)\n    else: \n        return is_Digit_List_Sum_Digits_List_List(x)\ndef get_Digits_Count(x): \n    '''\n    Write a python function to calculate count of digits in given number.\n    '''\n    if is_Digit_List(x): \n        return len(str(x))\n    else: \n        return -1\ndef get_Digits_Count_List(x): \n    '''\n    Write a python function to calculate count of digits in given list.\n    '''\n    if isinstance(x, list): \n        return sum(get_Digits_Count(i) for i in x)\n    else: \n        return get_Digits_Count(x)\ndef get_Digits_Count_List_List(x): \n    '''\n    Write a python function to calculate count of digits in given list.\n    '''\n    if isinstance(x, list): \n        return sum(get_Digits_Count_List(i) for i in x)\n    else: \n        return get_Digits_Count_List(x)\ndef get_Digits_Count_List_List_List(x): \n    '''\n    Write a python function to calculate count of digits in given list.\n    '''\n    if isinstance(x, list): \n        return sum(get_Digits_Count_List_List(i) for i in x)\n    else: \n        return get_Digits_Count_List_List(x)\ndef is_Permutation(str1, str2): \n    '''\n    Write a python function to check whether the given two strings are permutation or not.\n    '''\n    if len(str1)!= len(str2): \n        return False\n    list1 = list(str1)\n    list2 = list(str2)\n    list1.sort()\n    list2.sort()\n    if list1 == list2: \n        return True\n    return False\ndef is_Permutation_List(str1, str2): \n    '''\n   "
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0;\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1) == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1)) == 0: \n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return Power_Of_Two (x - 1)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1) == 0)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((x & (x - 1)) == 0)\n    \ndef is_Power_Of_Two_Iterative (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    while x > 1:\n        if x & 1!= 1: return False\n        x = x >> 1\n    return True\n    \ndef is_Power_Of_Two_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: return False\n    return is_Power_Of_Two_Recursive_Recursive_Recursive_Recursive_Recursive(x / 2)\n    \ndef is_Power_Of_Two_Recursive_Recursive_Recursiv"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #\u7b80\u5355\u5b9e\u73b0\u4e86\u5224\u65ad\u5b57\u7b26\u4e32\u957f\u5ea6\u4ee5\u53ca\u67e5\u627e\u5b50\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u4f7f\u7528\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u627e\uff0c\u4f46\u662f\u5982\u679c\u662f\u6700\u957f\u5b57\u7b26\u4e32\uff0c\u5219\u65e0\u6cd5\u8fbe\u5230\u6240\u9700\u8981\u7684\u7ed3\u679c\n    char_long_list = []\n    for i in range(len(text)):\n        if len(text[i:]) >= 4:\n            char_long_list.append(text[i:])\n    return char_long_list\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in text.split():\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    output=[]\n    \n    for i in text.split():\n        if len(i)>=4:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [i for i in re.findall(r'\\w{4,}', text)]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b',text)\ndef is_valid_email(email):\n    '''\n    Write a function that takes an email address and validates the syntax of the address, returns True or False.\n    '''\n    if(len(email)>=6 and email[0]!=\".\") and (\"@\" in email and \"@.\" not in email):\n        return True\n    return False\ndef validate_email(email):\n    '''\n    Write a function that takes an email address and validates the syntax of the address, returns True or False.\n    '''\n    return is_valid_email(email)\ndef validate_phone_number(phone):\n    '''\n    Write a function that takes a phone number and validates the syntax of the number, returns True or False.\n    '''\n    if re.match(r'^(\\+)?[0-9]+$',phone):\n        return True\n    return False\ndef validate_phone_number(phone):\n    '''\n    Write a function that takes a phone number and validates the syntax of the number, returns True or False.\n    '''\n    return is_valid_phone_number(phone)\ndef is_valid_phone_number(phone):\n    '''\n    Write a function that takes a phone number and validates the syntax of the number, returns True or False.\n    '''\n    return len(phone)==10 and re.match(r'^\\d{10}$',phone)\ndef is_valid_name(name):\n    '''\n    Write a function to check the validity of a name, returns True or False.\n    '''\n    return name.isalpha()\ndef is_valid_password(password):\n    '''\n    Write a function to check the validity of a password, returns True or False.\n    '''\n    return re.match(r'\\b[A-Za-z0-9@#$%^&+=]{6,}\\b',password)\ndef is_valid_username(username):\n    '''\n    Write a function to check the validity of a username, returns True or False.\n    '''\n    return len(username)>=6 and len(username)<=15 and username.isalnum()\ndef is_valid_username(username):\n    '''\n    Write a function to check the validity of a username, returns True or False.\n    '''\n    return username.isalnum()\ndef validate_username(username):\n    '''\n    Write a function to check the validity of a username, returns True or False.\n    '''\n    return is_valid_username(username)\ndef validate_password(password):\n    '''\n    Write a function to check the validity of a password, returns True or False.\n    '''\n    return is_valid_password(password)\ndef validate_username(username):\n    '''\n    Write a function to check the validity of a username, returns True or False.\n    '''\n    return is_valid_username(username)\ndef validate_username_password(username, password):\n    '''\n    Write a function to check the validity of a username and password, returns True or False.\n    '''\n    if is_valid_username(username) and is_valid_password(password):\n        return True\n    return False\ndef validate_password_username(password, username):\n    '''\n    Write a function to check the validity of a password and username, returns True or False.\n    '''\n    if is_valid_password(password) and is_valid_username(username):\n        return True\n    return False\ndef validate_user_name_password(username, password):\n    '''\n    Write a function to check the validity of a username and password, returns True or False.\n    '''\n    if is_valid_username(username) and is_valid_password(password):\n        return True\n    return False\ndef validate_password(password):\n    '''\n    Write a function to check the validity of a password, returns True or False.\n    '''\n    return is_valid_password(password)\ndef validate_username(username):\n    '''\n    Write a function to check the validity of a username, returns True or False.\n    '''\n    return is_valid_username(username)\ndef validate_username_password(username, password):\n    '''\n    Write a function to check the validity of a username and password, returns True or False.\n    '''\n    if is_valid_username(username) and is_valid_password(password):\n        return True\n    return False\ndef validate_password_username(password, username):\n    '''\n    Write a function to check the validity of a password and username, returns True or False.\n    '''\n    if is_valid_password(password) and is_valid_username(username):\n        return True\n    return False\ndef validate_user_name_password(username, password):\n    '''\n    Write a function to check the validity of a username and password, returns True or False.\n    '''\n    if is_valid_username(username) and is_valid_password(password):\n        return True\n    return False\ndef validate_password(password):\n    '''\n    Write a function to check the validity of a password, returns True or False.\n    '''\n    return is_valid_password(password)\ndef validate_username(username):\n    '''\n    Write a function to check the validity of a username, returns True or False.\n    '''\n    return is_valid_username(username)\ndef validate_username_password(username, password):\n    '''\n    Write a function to check the validity of a username and password, returns True or False.\n    '''\n    if is_valid_username(username) and is_valid_password(password):\n        return True\n    return False\ndef validate_password_username(password, username):\n    '''\n    Write a function to check the validity of a password and username, returns True or False.\n    '''\n    if is_valid_password(password) and is_valid_username(username):\n        return True\n    return False\ndef validate_user_name_password(username, password):\n    '''\n    Write a function to check the validity of a username and password, returns True or False.\n    '''\n    if is_valid_username(username) and is_valid_password(password):\n        return True\n    return False\ndef validate_password(password):\n    '''\n    Write a function to check the validity of a password, returns True or False.\n    '''\n    return is_valid_password(password)\ndef validate_username(username):\n    '''\n    Write a function to check the validity of a username, returns True or False.\n    '''\n    return is_valid_username(username)\ndef validate_username_password(username, password):\n    '''\n    Write a function to check the validity of a username and password, returns True or False.\n    '''\n    if is_valid_username(username) and is_valid_password(password):\n        return True\n    return False\ndef validate_password_username(password, username):\n    '''\n    Write a function to check the validity of a password and username, returns True or False.\n    '''\n    if is_valid_password(password) and is_valid_username(username):\n        return True\n    return False\ndef validate_user_name_password(username, password):\n    '''\n    Write a function to check the validity of a username and password, returns True or False.\n    '''\n    if is_valid_username(username) and is_valid_password(password):\n        return True\n    return False\ndef validate_password(password):\n    '''\n    Write a function to check the validity of a password, returns True or False.\n    '''\n    return is_valid_password(password)\ndef validate_username(username):\n    '''\n    Write a function to check the validity of a username, returns True or False.\n    '''\n    return is_valid_username(username)\ndef validate_username_password(username, password):\n    '''\n    Write a function to check the validity of a username and password, returns True or False.\n    '''\n    if is_valid_username(username) and is_valid_password(password):\n        return True\n    return False\ndef validate_password_username(password, username):\n    '''\n    Write a function to check the validity of a password and username, returns True or False.\n    '''\n    if is_valid_password"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word = re.compile(r'\\w{4,}')\n    match = word.findall(text)\n    return match\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    new_list = []\n    for word in re.findall(\"[a-zA-Z]+\", text):\n        if len(word) >= 4:\n            new_list.append(word)\n    return new_list\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    results = []\n    text = text.split(' ')\n    for word in text:\n        if len(word) >= 4:\n            results.append(word)\n    return results\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b(\\w{4,})\\b')\n    result = pattern.findall(text)\n    return result\ndef find_char_long_2(text):\n    return [i for i in text.split() if len(i)>=4]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for word in re.split(r'\\W+', text):\n        if len(word) >= 4:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i*i)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = [num ** 2 for num in nums]\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] * nums[i]\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] * nums[i]\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n    \n    \n    \ndef squares(nums):\n    '''\n    Write a function to find the squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    if n<=1:\n        return n\n    smaller,larger=[0]*n,[0]*n\n    smaller[0],smaller[1]=str[0],str[1]\n    larger[n-1],larger[n-2]=str[n-1],str[n-2]\n    for i in range(2,n):\n        if smaller[i]>smaller[i-1]:\n            smaller[i]=smaller[i-1]\n        else:\n            smaller[i]=smaller[i]\n    for j in range(n-3,-1,-1):\n        if larger[j]>larger[j+1]:\n            larger[j]=larger[j+1]\n        else:\n            larger[j]=larger[j]\n    min_rotations=min(smaller[i+1],larger[i+1])\n    for i in range(2,n):\n        if min_rotations>=i:\n            min_rotations=min(min_rotations,smaller[i]+larger[i])\n    return min_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    if str_len == 0:\n        return 0\n    if str_len == 1:\n        return 0\n    if str_len == 2:\n        if str[0]==str[1]:\n            return 0\n        else:\n            return 1\n    if str_len == 3:\n        if str[0]==str[2]:\n            return 1\n        if str[1]==str[2]:\n            return 1\n        else:\n            return 2\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    if len(str) == 1:\n        return rotations\n    else:\n        for x in range(len(str)):\n            y = len(str) - 1 - x\n            if str[x] == str[y]:\n                rotations += 1\n            else:\n                break\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Base Case\n    if len(str) == 0 or len(str) == 1:\n        return 0\n    # Find a string that has a string[0] as a prefix\n    prefix = str[0]\n    # The whole string is a prefix of another string\n    if str == prefix:\n        return 0\n    # Find the smallest rotation starting with prefix\n    for i in range(len(str)):\n        if str[i:] == prefix[:len(str)-i]:\n            return i\n    # If there are no rotation, return -1\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length = len(str)\n    if length<=1:\n        return 0\n    if str == str[::-1]:\n        return 0\n    return 1 + find_Rotations(str[1:])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == str[::-1]:\n        return 0\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    strs = [str]\n    count = 0\n    for i in range(1,n):\n        for j in range(0,i+1):\n            if str[j:i+1] not in strs:\n                strs.append(str[j:i+1])\n                count += 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0 or len(str) == 1:\n        return 0\n    if len(str) == 2 and str == str[::-1]:\n        return 0\n    result = 2\n    for i in range(len(str)-1):\n        if str[i:] == str[i:][::-1]:\n            result = i\n            break\n    return result\n    \n    "
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #base case\n    if len(str) == 1:\n        return 0\n    if str[0] == str[-1]:\n        return find_Rotations(str[1:-1])\n    else:\n        #split into two substrings and recurse\n        newstr = str[1:] + str[0]\n        return 1 + min(find_Rotations(newstr),find_Rotations(str[1:-1]))\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    N = len(str)\n    # no rotations\n    if N == 1:\n        return 0\n    # 2 rotations\n    if str[0] == str[N-1]:\n        return 2\n    # more than 2 rotations\n    else:\n        for i in range(1,N):\n            if str[0] == str[i]:\n                return i\n        return -1\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    p = ch + ch\n    return s.replace(p,'')\n    \ndef even(s):\n    '''\n    Write a python function to check if a string is even or odd.\n    '''\n    return s[0] == s[-1]\n    \ndef sum_digits(n):\n    '''\n    Write a python function to calculate the sum of digits in a given number.\n    '''\n    return sum(int(x) for x in str(n))\n    \ndef reverse(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef f(n):\n    '''\n    Write a python function to print first n odd numbers.\n    '''\n    for i in range(1,n+1,2):\n        print(i,end ='')\n    print()\n    \ndef f_iter(n):\n    '''\n    Write a python function to print first n odd numbers using iteration.\n    '''\n    for i in range(1,n+1,2):\n        print(i,end ='')\n    print()\n    \ndef f_rec(n):\n    '''\n    Write a python function to print first n odd numbers using recursion.\n    '''\n    if n == 0:\n        return\n    print(2*n,end ='')\n    if n == 1:\n        return\n    f_rec(n-1)\n    \ndef bin_to_dec(s):\n    '''\n    Write a python function to convert a binary number to its decimal equivalent.\n    '''\n    l = len(s)\n    dec = 0\n    for i in range(l):\n        dec = dec + int(s[i])*(2**(l-i-1))\n    return dec\n    \ndef dec_to_bin(s):\n    '''\n    Write a python function to convert a decimal number to its binary equivalent.\n    '''\n    if s == 0:\n        return ''\n    elif s == 1:\n        return '1'\n    else:\n        return dec_to_bin(s//2) + str(s%2)\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    s = str(n)\n    l = len(s)\n    for i in range(l//2):\n        if s[i]!= s[l-i-1]:\n            return False\n    return True\n    \ndef fib(n):\n    '''\n    Write a python function to return n-th fibonacci number.\n    '''\n    a,b = 1,1\n    for i in range(n-1):\n        a,b = b,a+b\n    return a\n    \ndef fact(n):\n    '''\n    Write a python function to return n factorial.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * fact(n-1)\n    \ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    for i in range(3,n,2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_superprime(n):\n    '''\n    Write a python function to check if a number is super prime or not.\n    '''\n    if is_prime(n):\n        if n > 1:\n            l = len(str(n))\n            for i in range(l//2):\n                if str(n)[i]!= str(n)[l-i-1]:\n                    return False\n            return True\n        else:\n            return True\n    else:\n        return False\n    \ndef is_abundant(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    s = 0\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            s += i\n    return s > n\n    \ndef is_circular(n):\n    '''\n    Write a python function to check if a number is circular or not.\n    '''\n    s = 0\n    while n:\n        s = s*10 + n%10\n        n //= 10\n    return s == n\n    \ndef is_circular_prime(n):\n    '''\n    Write a python function to check if a number is circular prime or not.\n    '''\n    if is_prime(n):\n        if is_circular(n):\n            return True\n    return False\n    \ndef is_circular_prime_factor(n):\n    '''\n    Write a python function to check if a number is circular prime factor or not.\n    '''\n    if is_prime(n):\n        if n == 1:\n            return False\n        elif n == 2:\n            return True\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\n    else:\n        return False\n    \ndef is_pandigital(n,s):\n    '''\n    Write a python function to check if a number is pandigital or not.\n    '''\n    l = len(str(n))\n    for i in range(1,l+1):\n        if str(i) not in str(n):\n            return False\n    return True\n    \ndef is_pandigital_prime(n):\n    '''\n    Write a python function to check if a number is pandigital prime or not.\n    '''\n    if is_prime(n):\n        if is_pandigital(n,str(n)):\n            return True\n    return False\n    \ndef is_super_pandigital(n):\n    '''\n    Write a python function to check if a number is super pandigital or not.\n    '''\n    s = ''\n    for i in range(1,10):\n        s = s + str(i)\n    l = len(str(n))\n    for i in range(1,l+1):\n        if str(i) not in s:\n            return False\n    return True\n    \ndef is_super_pandigital_prime(n):\n    '''\n    Write a python function to check if a number is super pandigital prime or not.\n    '''\n    if is_prime(n):\n        if is_super_pandigital(n):\n            return True\n    return False\n    \ndef check_strings(s1,s2):\n    '''\n    Write a python function to check if two strings are permutations of each other or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            return False\n    return True\n    \ndef check_strings_iter(s1,s2):\n    '''\n    Write a python function to check if two strings are permutations of each other or not using iteration.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            return False\n    return True\n    \ndef check_strings_rec(s1,s2,n,m):\n    '''\n    Write a python function to check if two strings are permutations of each other or not using recursion.\n    '''\n    if n == len(s1) and m == len(s2):\n        return True\n    if n >= len(s1):\n        return False\n    if s1[n] == s2[m]:\n        return check_strings_rec(s1,s2,n+1,m+1)\n    else:\n        return check_strings_rec(s1,s2,n+1,m)\n    \ndef check_strings_mem(s1,s2):\n    '''\n    Write a python function to check if two strings are permutations o"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\").replace(ch,\"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,'')\n    s=s.replace(ch,'')\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[s.find(ch)+1:s.rfind(ch)]\ndef remove_front_back(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[s.find(ch):s.rfind(ch)+1]\n    \ndef ispalindrome(s): \n    '''\n    Write a python function to check if the string is a palindrome.\n    '''\n    return s == s[::-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    if ch in s:\n        s = s[s.index(ch):s.rindex(ch)]\n        return s\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,'')\n    s=s[1:len(s)-1]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        x=s.find(ch)\n        y=len(s)-x-1\n        return s[:x]+s[y:]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s_len=len(s)\n    if s.find(ch)==-1:\n        return s\n    else:\n        first_occ=s.find(ch)\n        last_occ=s_len-s[::-1].find(ch)\n        return s[:first_occ]+s[last_occ:]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch)>1:\n        return s.replace(ch,\"\").replace(ch[-1],\"\")\n    else:\n        return s.replace(ch,\"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        return s.replace(ch,'',1).replace(ch,'',1)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    # Write your code here\n    for i in range(N):\n        row = sorted(M[i])\n        M[i] = row\n    return M\n    \n    \ndef sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its columns.\n    '''\n    N = len(M)\n    # Write your code here\n    for j in range(N):\n        col = [M[k][j] for k in range(N)]\n        col = sorted(col)\n        for k in range(N):\n            M[k][j] = col[k]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = []\n    for i in range(len(M)):\n        sum_rows = 0\n        for j in range(len(M[0])):\n            sum_rows += M[i][j]\n        row_sums.append(sum_rows)\n    l = []\n    for i in range(len(row_sums)):\n        l.append((row_sums[i], i))\n    l.sort()\n    res = []\n    for i in range(len(l)):\n        res.append(M[l[i][1]])\n    return res\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    res = []\n    for row in M:\n        res.append(sum(row))\n    res.sort()\n    res.reverse()\n    for i in range(len(M)):\n        row = M[i]\n        row.sort()\n        row.reverse()\n        M[i] = row\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix = [ [ M[i][j] for j in range(len(M[i])) ] for i in range(len(M)) ]\n    return [ sorted(row) for row in matrix ]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        M[i] = sorted(M[i])\n    M = sorted(M)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [0] * len(M)\n    for row in range(len(M)):\n        row_sum = 0\n        for col in range(len(M[0])):\n            row_sum += M[row][col]\n        row_sums[row] = row_sum\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if row_sums[i] < row_sums[j]:\n                temp = row_sums[i]\n                row_sums[i] = row_sums[j]\n                row_sums[j] = temp\n                temp = M[i]\n                M[i] = M[j]\n                M[j] = temp\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=lambda x: sum(x))\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(rows-1-i):\n            if M[j][cols-1] > M[j+1][cols-1]:\n                temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)-1):\n        for j in range(len(M[i])):\n            for k in range(len(M[j])):\n                if M[i][k] > M[i][j]:\n                    temp = M[i][j]\n                    M[i][j] = M[i][k]\n                    M[i][k] = temp\n    print M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # take the transpose of the matrix\n    row = len(M)\n    column = len(M[0])\n    transpose = []\n    for i in range(0, column):\n        transpose.append([])\n        for j in range(0, row):\n            transpose[i].append(M[j][i])\n    \n    # convert the list into a tuple\n    transpose = tuple(transpose)\n    \n    # get the index of the tuple and sort it according to the sum of row\n    sort = sorted(range(len(transpose)), key=lambda k: sum(transpose[k]))\n    \n    # convert the index back into a list and return the sorted matrix\n    return list(transpose[i] for i in sort)\n    \ndef main():\n    '''\n    input:\n    [1,2,3]\n    [4,5,6]\n    [7,8,9]\n    [1,3,5]\n    [2,4,6]\n    \n    output:\n    [1,4,7,3,5,8,2,6,9]\n    '''\n    # initialize the test matrices\n    test1 = [[1,2,3], [4,5,6], [7,8,9], [1,3,5], [2,4,6]]\n    test2 = [[3,4,5], [6,7,8], [9,1,2]]\n    \n    # sort the matrices\n    print('Test 1:', sort_matrix(test1))\n    print('Test 2:', sort_matrix(test2))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 1/3 * (l*b*h)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/6\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5*l*b*h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #l = float(input(\"Enter length of the base: \"))\n    #b = float(input(\"Enter length of the height: \"))\n    #h = float(input(\"Enter height of the prism: \"))\n    #if (b <= 0 or l <= 0 or h <= 0):\n    #    print(\"Enter valid lengths\")\n    #    return\n    #V = 0.5 * l * b * h\n    #print(\"The volume of the prism is\",V)\n    V = (l * b * h)/6\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return abs(l*b*h)/6.0\n    \n    \ndef find_Surface_Area(l,b,h) : \n    '''\n    Write a python function to find the surface area of a rectangular prism.\n    '''\n    return 2*(l*b+b*h+l*h)\n    \n    \ndef find_Circumference(r) : \n    '''\n    Write a python function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n    \n    \ndef find_Area_of_Circle(r) : \n    '''\n    Write a python function to find the area of a circle.\n    '''\n    return 3.14*r*r\n    \n    \ndef find_Surface_Area_of_Circle(r) : \n    '''\n    Write a python function to find the surface area of a circle.\n    '''\n    return 3.14*r*r\n    \n    \ndef find_Circumference_of_Sphere(r) : \n    '''\n    Write a python function to find the circumference of a sphere.\n    '''\n    return 4*3.14*r\n    \n    \ndef find_Area_of_Sphere(r) : \n    '''\n    Write a python function to find the surface area of a sphere.\n    '''\n    return 4*3.14*r*r\n    \n    \ndef find_Surface_Area_of_Sphere(r) : \n    '''\n    Write a python function to find the surface area of a sphere.\n    '''\n    return 4*3.14*r*r\n    \n    \ndef find_Volume_of_Cylinder(r,h) : \n    '''\n    Write a python function to find the volume of a cylinder.\n    '''\n    return 3.14*r*r*h\n    \n    \ndef find_Surface_Area_of_Cylinder(r,h) : \n    '''\n    Write a python function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*r+2*3.14*r*h\n    \n    \ndef find_Volume_of_Cone(r,h) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return (1/3)*(3.14*r*r*h+3.14*r*h*(r+h))\n    \n    \ndef find_Surface_Area_of_Cone(r,h) : \n    '''\n    Write a python function to find the surface area of a cone.\n    '''\n    return 2*3.14*r*r+2*3.14*r*r*h+(3.14*r*r*(h+r))\n    \n    \ndef find_Volume_of_Tetrahedron(a,b,c,d) : \n    '''\n    Write a python function to find the volume of a tetrahedron.\n    '''\n    return 1/6.0*a*b*c*d\n    \n    \ndef find_Surface_Area_of_Tetrahedron(a,b,c,d) : \n    '''\n    Write a python function to find the surface area of a tetrahedron.\n    '''\n    return 2*(a+b+c+d)\n    \n    \ndef find_Volume_of_Octahedron(a,b,c,d,e) : \n    '''\n    Write a python function to find the volume of an octahedron.\n    '''\n    return 1/6.0*a*b*c*d*e\n    \n    \ndef find_Surface_Area_of_Octahedron(a,b,c,d,e) : \n    '''\n    Write a python function to find the surface area of an octahedron.\n    '''\n    return 2*(a+b+c+d+e)\n    \n    \ndef find_Volume_of_Dodecahedron(a,b,c,d,e,f,g,h,i) : \n    '''\n    Write a python function to find the volume of a dodecahedron.\n    '''\n    return 1/12.0*a*b*c*d*e*f*g*h*i\n    \n    \ndef find_Surface_Area_of_Dodecahedron(a,b,c,d,e,f,g,h,i) : \n    '''\n    Write a python function to find the surface area of a dodecahedron.\n    '''\n    return 2*(a+b+c+d+e+f+g+h+i)\n    \n    \ndef find_Volume_of_Icosahedron(a,b,c,d,e,f,g,h,i,j,k,l,m) : \n    '''\n    Write a python function to find the volume of an icosahedron.\n    '''\n    return 1/12.0*a*b*c*d*e*f*g*h*i*j*k*l*m\n    \n    \ndef find_Surface_Area_of_Icosahedron(a,b,c,d,e,f,g,h,i,j,k,l,m) : \n    '''\n    Write a python function to find the surface area of an icosahedron.\n    '''\n    return 2*(a+b+c+d+e+f+g+h+i+j+k+l+m)\n    \n    \ndef find_Volume_of_Tetrahedron_2(a,b,c,d) : \n    '''\n    Write a python function to find the volume of a tetrahedron.\n    '''\n    return (1/6.0)*a*b*c*d\n    \n    \ndef find_Surface_Area_of_Tetrahedron_2(a,b,c,d) : \n    '''\n    Write a python function to find the surface area of a tetrahedron.\n    '''\n    return 2*(a+b+c+d)\n    \n    \ndef find_Volume_of_Cube(a,b,c,d) : \n    '''\n    Write a python function to find the volume of a cube.\n    '''\n    return a*b*c*d\n    \n    \ndef find_Surface_Area_of_Cube(a,b,c,d) : \n    '''\n    Write a python function to find the surface area of a cube.\n    '''\n    return 6*a*b*c\n    \n    \ndef find_Volume_of_Rectangular_Prism(l,b,h) : \n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return l*b*h\n    \n    \ndef find_Surface_Area_of_Rectangular_Prism(l,b,h) : \n    '''\n    Write a python function to find the surface area of a rectangular prism.\n    '''\n    return 2*(l*b+b*h+l*h)\n    \n    \ndef find_Volume_of_Prism_2(a,b,c) : \n    '''\n    Write a python function to find the volume of a prism.\n    '''\n    return (a*b*c)**(1/2)\n    \n    \ndef find_Surface_Area_of_Prism_2(a,b,c) : \n    '''\n    Write a python function to find the surface area of a prism.\n    '''\n    return (a+b+c)\n    \n    \ndef find_Volume_of_Prism_3(a,b,c,d) : \n    '''\n    Write a python function to find the volume of a prism.\n    '''\n    return a*b*c*d\n    \n    \ndef find_Surface_Area_of_Prism_3(a,b,c,d) : \n    '''\n    Write a python function to find the surface area of a prism.\n    '''\n    return 2*(a+b+c+d)\n    \n    \ndef find_Volume_of_Sphere(r) "
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 1/6*(l*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/6\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (h*b*l)/3\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    return (b*l + l*b + h*b)/2\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.islower()\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lowercase_count=0\n    for i in range(len(text)):\n        if text[i].islower():\n            lowercase_count+=1\n        else:\n            if lowercase_count>0:\n                return True\n            else:\n                lowercase_count=0\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # pattern = re.compile(r'[a-z]+_[a-z]+', re.IGNORECASE)\n    # print(pattern.search(text))\n    return re.search(r'[a-z]+_[a-z]+', text, re.IGNORECASE)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    string = text.lower()\n    string = re.sub('[^a-zA-Z0-9]+','_',string)\n    if string == text:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+',text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return '_'.join(text.split(' ')).islower()\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if '_' not in text:\n        return False\n    for ch in text:\n        if not ch.islower():\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return '_' in text.lower()\ndef remove_diacritics(text):\n    '''\n    Write a function that accepts a string and removes all the diacritics.\n    '''\n    return re.sub('[\\u0301-\\u036F]+','',text)\ndef text_split(text):\n    '''\n    Write a function that accepts a string and returns a list of words, where each word is separated by a single space.\n    '''\n    return re.split('\\s',text)\ndef text_remove_punctuation(text):\n    '''\n    Write a function that accepts a string and returns a string that has all the punctuation characters removed.\n    '''\n    return re.sub('[^\\w\\s]','',text)\ndef text_remove_non_alphanumerics(text):\n    '''\n    Write a function that accepts a string and returns a string that has all the non-alphanumeric characters removed.\n    '''\n    return re.sub('[^0-9a-zA-Z]+','',text)\ndef text_join(words):\n    '''\n    Write a function that accepts a list of words and returns a string with those words joined by a space.\n    '''\n    return''.join(words)\ndef text_join_spaces(words):\n    '''\n    Write a function that accepts a list of words and returns a string with those words joined by a space, with all the words separated by a space.\n    '''\n    return''.join(words)\ndef text_capitalize(text):\n    '''\n    Write a function that accepts a string and returns a string with the first letter of each word capitalized.\n    '''\n    return''.join([word.capitalize() for word in text.split()])\ndef text_swap(text):\n    '''\n    Write a function that accepts a string and returns a string with all the letters in lower case and the rest in upper case.\n    '''\n    return text.lower().upper()\ndef text_to_number(text):\n    '''\n    Write a function that accepts a string and returns a number that represents the input string.\n    '''\n    return int(text) if text.isdigit() else float(text)\ndef text_to_int(text):\n    '''\n    Write a function that accepts a string and returns a number that represents the input string.\n    '''\n    return int(text)\ndef text_to_float(text):\n    '''\n    Write a function that accepts a string and returns a number that represents the input string.\n    '''\n    return float(text)\ndef text_to_float_or_int(text):\n    '''\n    Write a function that accepts a string and returns a number that represents the input string.\n    '''\n    return int(text) if text.isdigit() else float(text)\ndef text_to_bool(text):\n    '''\n    Write a function that accepts a string and returns a Boolean value that represents the input string.\n    '''\n    return True if text.lower() == 'true' else False\ndef text_to_bool_or_none(text):\n    '''\n    Write a function that accepts a string and returns a Boolean value that represents the input string.\n    '''\n    return True if text.lower() == 'true' else None\ndef text_to_list(text):\n    '''\n    Write a function that accepts a string and returns a list of strings that represent the input string.\n    '''\n    return [word for word in text.split()]\ndef text_to_list_or_none(text):\n    '''\n    Write a function that accepts a string and returns a list of strings that represent the input string.\n    '''\n    if text is not None:\n        return [word for word in text.split()]\n    return None\ndef text_to_dict(text):\n    '''\n    Write a function that accepts a string and returns a dictionary that represents the input string.\n    '''\n    return dict([word.split('=') for word in text.split(',')])\ndef text_to_dict_or_none(text):\n    '''\n    Write a function that accepts a string and returns a dictionary that represents the input string.\n    '''\n    if text is not None:\n        return dict([word.split('=') for word in text.split(',')])\n    return None\ndef text_to_dict_or_empty_dict(text):\n    '''\n    Write a function that accepts a string and returns a dictionary that represents the input string.\n    '''\n    return {} if text is None or text == '' else dict([word.split('=') for word in text.split(',')])\ndef text_to_dict_or_none_or_empty_dict(text):\n    '''\n    Write a function that accepts a string and returns a dictionary that represents the input string.\n    '''\n    return {} if text is None or text == '' else dict([word.split('=') for word in text.split(',')])\ndef text_to_dict_or_empty_dict_or_none(text):\n    '''\n    Write a function that accepts a string and returns a dictionary that represents the input string.\n    '''\n    return {} if text is None or text == '' else dict([word.split('=') for word in text.split(',')])\ndef text_to_dict_or_none_or_empty_dict_or_none(text):\n    '''\n    Write a function that accepts a string and returns a dictionary that represents the input string.\n    '''\n    return {} if text is None or text == '' else dict([word.split('=') for word in text.split(',')])\ndef text_to_set(text):\n    '''\n    Write a function that accepts a string and returns a set that represents the input string.\n    '''\n    return set([word for word in text.split()])\ndef text_to_set_or_none(text):\n    '''\n    Write a function that accepts a string and returns a set that represents the input string.\n    '''\n    if text is not None:\n        return set([word for word in text.split()])\n    return None\ndef text_to_set_or_empty_set(text):\n    '''\n    Write a function that accepts a string and returns a set that represents the input string.\n    '''\n    return set([]) if text is None or text == '' else set([word for word in text.split()])\ndef text_to_set_or_none_or_empty_set(text):\n    '''\n    Write a function that accepts a string and returns a set that represents the input string.\n    '''\n    return set([]) if text is None or text == '' else set([word for word in text.split()])\ndef text_to_set_or_none_or_empty_set_or_none(text):\n    '''\n    Write a function that accepts a string and returns a set that represents the input string.\n    '''\n    return set([]) if text is None or text == '' else set([word for word in text.split()])\ndef text_to_list_or_none_or_empty_list(text):\n    '''\n    Write a function that accepts a string and returns a list that represents the input string.\n    '''\n    return [] if text is None or text == '' else [word for word in text.split()]\ndef text_to_list_or_none_or_none_list(text):\n    '''\n    Write a function that accepts a string and returns a list that represents the input string.\n    '''\n    return [] if text is None or text == '' else [word for word in text.split()]\ndef text_to_list_or_none_or_none_list_or_none(text):\n    '''\n    Write a function that accepts a string and returns a list that represents the input string.\n    '''\n    return [] if text is None or text == '' else [word for word in text.split()]\ndef text_to_list_or_none_or_none_list_or_none_or_none(text):\n    '''\n    Write a function that accepts a string and returns a list that represents the input string.\n    '''\n    return [] if text is None or text == '' else [word for word in text.split()]\ndef text_to_dict_or_none_or_empty"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+',text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return True if re.match(pattern,text) else False\ndef date_range(date):\n    '''\n    Write a function that will return true if the input date is in the form YYYY-MM-DD and false otherwise.\n    '''\n    pattern = r'\\d{4}[-/]\\d{2}[-/]\\d{2}'\n    return True if re.match(pattern,date) else False\ndef text_message(text):\n    '''\n    Write a function that returns true if the input text contains sequences of uppercase and lowercase letters and false otherwise.\n    '''\n    pattern = r'[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+'\n    return True if re.match(pattern,text) else False\ndef text_is_pangram(text):\n    '''\n    Write a function that returns true if the input string contains sequences of letters of the alphabet, and false otherwise.\n    '''\n    pattern = r'[a-z]+'\n    return True if re.match(pattern,text) else False\ndef text_is_palindrome(text):\n    '''\n    Write a function that returns true if the input string is a palindrome and false otherwise.\n    '''\n    pattern = r'[a-z]+'\n    return True if re.match(pattern,text) else False\ndef text_is_anagram(text1,text2):\n    '''\n    Write a function that returns true if the input strings are anagrams and false otherwise.\n    '''\n    return True if sorted(text1.lower()) == sorted(text2.lower()) else False\ndef text_is_valid_date(date):\n    '''\n    Write a function that returns true if the input date is valid and false otherwise.\n    A valid date is of the form YYYY-MM-DD.\n    '''\n    pattern = r'\\d{4}[-/]\\d{2}[-/]\\d{2}'\n    return True if re.match(pattern,date) else False\ndef text_is_a_number(text):\n    '''\n    Write a function that returns true if the input string is a number and false otherwise.\n    '''\n    pattern = r'\\d+'\n    return True if re.match(pattern,text) else False\ndef text_is_even(text):\n    '''\n    Write a function that returns true if the input string is an even number and false otherwise.\n    '''\n    pattern = r'\\d+'\n    return True if re.match(pattern,text) and int(text) % 2 == 0 else False\ndef text_is_odd(text):\n    '''\n    Write a function that returns true if the input string is an odd number and false otherwise.\n    '''\n    pattern = r'\\d+'\n    return True if re.match(pattern,text) and int(text) % 2 == 1 else False\ndef text_is_float(text):\n    '''\n    Write a function that returns true if the input string is a float and false otherwise.\n    '''\n    pattern = r'[+-]?\\d*\\.\\d+'\n    return True if re.match(pattern,text) else False\ndef text_is_integer(text):\n    '''\n    Write a function that returns true if the input string is an integer and false otherwise.\n    '''\n    pattern = r'\\d+'\n    return True if re.match(pattern,text) else False\ndef text_is_valid_email(email):\n    '''\n    Write a function that returns true if the input email is valid and false otherwise.\n    An email is valid if it contains an @-symbol and a domain name.\n    '''\n    pattern = r'[a-z]+@[a-z]+\\.[a-z]+'\n    return True if re.match(pattern,email) else False\ndef text_is_valid_phone(phone):\n    '''\n    Write a function that returns true if the input phone is valid and false otherwise.\n    A valid phone is of the form NNN-NNNNNN where NNN is a digit and the rest of the input is filled with dashes.\n    '''\n    pattern = r'\\d{3}-\\d{3}-\\d{3}'\n    return True if re.match(pattern,phone) else False\ndef text_is_valid_password(password):\n    '''\n    Write a function that returns true if the input password is valid and false otherwise.\n    A valid password is at least 8 characters long and contains at least one upper case letter, lower case letter, and number.\n    '''\n    pattern = r'[a-z]+'\n    return True if re.match(pattern,password) and len(password) >= 8 else False\ndef text_is_valid_zipcode(zipcode):\n    '''\n    Write a function that returns true if the input zipcode is valid and false otherwise.\n    A valid zipcode is of the form NNN-NNNNN or NNNNNN.\n    '''\n    pattern = r'\\d{3}-\\d{4}'\n    return True if re.match(pattern,zipcode) else False\ndef text_is_valid_twitter(twitter):\n    '''\n    Write a function that returns true if the input twitter handle is valid and false otherwise.\n    A valid twitter handle is of the form @username where username is a string of at least 1 letter.\n    '''\n    pattern = r'[a-z]+'\n    return True if re.match(pattern,twitter) and twitter.count('@') == 1 and twitter.count('.') == 0 else False\ndef text_is_valid_name(name):\n    '''\n    Write a function that returns true if the input string is a valid name and false otherwise.\n    A valid name is a string of at least 3 alphanumeric characters.\n    '''\n    pattern = r'[a-z]+'\n    return True if re.match(pattern,name) and len(name) >= 3 else False\ndef text_is_valid_month(month):\n    '''\n    Write a function that returns true if the input string is a month and false otherwise.\n    A valid month is a string of a 3-character month abbreviation, e.g. 'jan', 'feb', etc.\n    '''\n    pattern = r'\\b[a-z]{3}\\b'\n    return True if re.match(pattern,month) else False\ndef text_is_valid_year(year):\n    '''\n    Write a function that returns true if the input year is a valid four-digit year and false otherwise.\n    A valid year is a string of four digits, e.g. '1900', '1800', etc.\n    '''\n    pattern = r'\\d{4}'\n    return True if re.match(pattern,year) else False\ndef text_is_valid_username(username):\n    '''\n    Write a function that returns true if the input username is a valid username and false otherwise.\n    A valid username is a string of at least 3 alphanumeric characters.\n    '''\n    pattern = r'[a-z]+'\n    return True if re.match(pattern,username) and len(username) >= 3 else False\ndef text_is_valid_integer(text):\n    '''\n    Write a function that returns true if the input text is an integer and false otherwise.\n    '''\n    pattern = r'\\d+'\n    return True if re.match(pattern,text) else False\ndef text_is_valid_float(text):\n    '''\n    Write a function that returns true if the input text is a float and false otherwise.\n    '''\n    pattern = r'[+-]?\\d*\\.\\d+'\n    return True if re.match(pattern,text) else False\ndef text_is_valid_positive_integer(text):\n    '''\n    Write a function that returns true if the input text is a positive integer and false otherwise.\n    '''\n    pattern = r'\\d+'\n    return True if re.match(pattern,text) and int(text) > 0 else False\ndef text_is_valid_positive_float(text):\n    '''\n    Write a function that returns true if the input tex"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \ndef largest_square_perimeter(a):\n    '''\n    Write a function that returns the area of the largest square that can be formed by the corners of a rectangle\n    given the length and width as input.\n    '''\n    return a**2\n    \ndef fibonacci(a):\n    '''\n    Write a function that returns the nth number in the Fibonacci sequence. \n    '''\n    if a == 0:\n        return 0\n    if a == 1:\n        return 1\n    if a < 0:\n        return \"Error\"\n    return fibonacci(a-1) + fibonacci(a-2)\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        if i not in string:\n            list.append(i)\n    return list\n    \ndef encrypt(string):\n    '''\n    Encrypt the string\n    '''\n    if len(string) == 0:\n        return string\n    final = []\n    for i in string:\n        x = ord(i) + 3\n        if i.isupper():\n            if x > 90:\n                x -= 26\n        elif i.islower():\n            if x > 122:\n                x -= 26\n        final.append(chr(x))\n    return ''.join(final)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1,str2 = string.lower(),string.lower()\n    for char in str1:\n        if char in str2:\n            str1 = str1.replace(char,'',1)\n    return str1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = [] \n    for i in range(len(string)): \n        if string[i] not in result: \n            result.append(string[i])\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = list(string)\n    for i in range(len(li)):\n        if li[i] in string2:\n            li[i] = ''\n    return ''.join(li)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = [0] * NO_OF_CHARS \n    for i in xrange(len(string)): \n        li[ord(string[i])] = 1\n    return li \n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string.replace(string,\"\",\"\"))\ndef isPalindrome(string): \n    '''\n    Write a function to check whether the input string is a palindrome or not.\n    '''\n    for i in range(len(string)//2):\n        if string[i]!=string[len(string)-1-i]:\n            return False\n    return True\ndef string_reverse(string):\n    '''\n    Write a function to reverse a string. You can assume that the string is a non-empty string.\n    '''\n    return string[::-1]\ndef substring(string, start, end):\n    '''\n    Write a function to find the longest substring in a given string.\n    '''\n    return string[start:end]\ndef check_substring(string, sub_string):\n    '''\n    Write a function to check whether the input string is present in the input string or not.\n    '''\n    return (string.find(sub_string)!=-1)\ndef is_unique(string):\n    '''\n    Write a function to determine if all the characters of a string are unique or not.\n    '''\n    arr = [False]*NO_OF_CHARS\n    for char in string:\n        if arr[ord(char)]:\n            return False\n        else:\n            arr[ord(char)] = True\n    return True\ndef is_permutation(string1, string2):\n    '''\n    Write a function to check whether two strings are permutations of each other or not.\n    '''\n    if len(string1)!=len(string2):\n        return False\n    string1 = str_to_list(string1)\n    string2 = str_to_list(string2)\n    string1.sort()\n    string2.sort()\n    return string1==string2\ndef check_permutation(string1, string2):\n    '''\n    Write a function to check whether two strings are permutations of each other or not.\n    '''\n    if len(string1)!=len(string2):\n        return False\n    string1 = str_to_list(string1)\n    string2 = str_to_list(string2)\n    string1.sort()\n    string2.sort()\n    return string1==string2\ndef is_anagram(string1, string2):\n    '''\n    Write a function to check whether two strings are anagrams of each other or not.\n    '''\n    string1 = str_to_list(string1)\n    string2 = str_to_list(string2)\n    return string1==string2\ndef check_anagram(string1, string2):\n    '''\n    Write a function to check whether two strings are anagrams of each other or not.\n    '''\n    if len(string1)!=len(string2):\n        return False\n    string1 = str_to_list(string1)\n    string2 = str_to_list(string2)\n    return string1==string2\ndef are_anagrams(string1, string2):\n    '''\n    Write a function to check whether two strings are anagrams of each other or not.\n    '''\n    if len(string1)!=len(string2):\n        return False\n    string1 = str_to_list(string1)\n    string2 = str_to_list(string2)\n    for i in string1:\n        if string1.count(i)<string2.count(i):\n            return False\n    return True\ndef smallest_substring(string, k):\n    '''\n    Write a function to find the smallest substring in a given string that has all the characters of k.\n    '''\n    window_start = 0\n    min_length = len(string)\n    char_freq = {}\n    for window_end in range(len(string)):\n        char = string[window_end]\n        if char not in char_freq:\n            char_freq[char]=0\n        char_freq[char]+=1\n        while len(char_freq)>k:\n            char_to_remove = string[window_start]\n            char_freq[char_to_remove]-=1\n            if char_freq[char_to_remove]<=0:\n                del char_freq[char_to_remove]\n            window_start+=1\n        min_length = min(min_length, window_end-window_start+1)\n    return min_length\ndef is_substring(string, sub_string):\n    '''\n    Write a function to check whether the input string is a substring of the input string or not.\n    '''\n    return (string.find(sub_string)!=-1)\ndef longest_substring(string):\n    '''\n    Write a function to find the longest substring in a given string.\n    '''\n    window_start = 0\n    max_length = 0\n    char_freq = {}\n    for window_end in range(len(string)):\n        char = string[window_end]\n        if char not in char_freq:\n            char_freq[char]=0\n        char_freq[char]+=1\n        while len(char_freq)>1:\n            char_to_remove = string[window_start]\n            char_freq[char_to_remove]-=1\n            if char_freq[char_to_remove]<=0:\n                del char_freq[char_to_remove]\n            window_start+=1\n        max_length = max(max_length, window_end-window_start+1)\n    return max_length\ndef longest_substring_2(string):\n    '''\n    Write a function to find the longest substring in a given string.\n    '''\n    window_start = 0\n    max_length = 0\n    char_freq = {}\n    for window_end in range(len(string)):\n        char = string[window_end]\n        if char not in char_freq:\n            char_freq[char]=0\n        char_freq[char]+=1\n        while len(char_freq)>2:\n            char_to_remove = string[window_start]\n            char_freq[char_to_remove]-=1\n            if char_freq[char_to_remove]<=0:\n                del char_freq[char_to_remove]\n            window_start+=1\n        max_length = max(max_length, window_end-window_start+1)\n    return max_length\ndef longest_substring_3(string):\n    '''\n    Write a function to find the longest substring in a given string.\n    '''\n    window_start = 0\n    max_length = 0\n    char_freq = {}\n    for window_end in range(len(string)):\n        char = string[window_end]\n        if char not in char_freq:\n            char_freq[char]=0\n        char_freq[char]+=1\n        while len(char_freq)>3:\n            char_to_remove = string[window_start]\n            char_freq[char_to_remove]-=1\n            if char_freq[char_to_remove]<=0:\n                del char_freq[char_to_remove]\n            window_start+=1\n        max_length = max(max_length, window_end-window_start+1)\n    return max_length\ndef longest_substring_4(string):\n    '''\n    Write a function to find the longest substring in a given string.\n    '''\n    window_start = 0\n    max_length = 0\n    char_freq = {}\n    for window_end in range(len(string)):\n        char = string[window_end]\n        if char not in char_freq:\n            char_freq[char]=0\n        char_freq[char]+=1\n        while len(char_freq)>3:\n            char_to_remove = string[window_start]\n            char_freq[char_to_remove]-=1\n            if char_freq[char_to_remove]<=0:\n                del char_freq[char_to_remove]\n            window_start+=1\n        max_length = max(max_length, window_end"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [None] * len(string) \n    list2 = [None] * len(string) \n    for i in range(len(string)): \n        list1[i] = string[i]\n        list2[i] = string[i]\n    for i in range(len(string)): \n        for j in range(len(string)): \n            if(list1[i] == list2[j]): \n                list1[i] = None\n    for i in range(len(string)): \n        if(list1[i]!= None): \n            return list1[i]\n    return -1\ndef solve(string, query):\n    ans = str_to_list(query)\n    if(ans == -1):\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #return string.replace(string[0], \"\")\n    return [i for i in string if i not in string[0]]\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_characters = [] \n    for i in range(len(string)):\n        if string[i] not in list_of_characters:\n            list_of_characters.append(string[i])\n    return list_of_characters\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    ls = []\n    for i in range(len(string)):\n        ls.append(ord(string[i]))\n    return ls\ndef list_to_str(list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = ''\n    for i in range(len(list)):\n        res += chr(list[i])\n    return res\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # using hash table\n    # O(n) time, O(n) space\n    hashtable = {}\n    for num in arraynums:\n        if num in hashtable:\n            return True\n        else:\n            hashtable[num] = True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique = True\n    for x in arraynums:\n        if arraynums.count(x) > 1:\n            unique = False\n            break\n    return unique\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(\"Test case: {}\".format(arraynums))\n    result = set(arraynums)\n    if len(result) < len(arraynums):\n        print(\"Contains duplicate elements\")\n    else:\n        print(\"Doesn't contain duplicate elements\")\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = arraynums\n    n = len(nums)\n    if n < 2:\n        return False\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] == nums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    count = {}\n    for i in arraynums:\n        if i in count.keys():\n            return True\n        else:\n            count[i] = 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    d = {}\n    for n in arraynums:\n        if n in d:\n            return True\n        d[n] = True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    d = {}\n    for num in arraynums:\n        if num in d:\n            return True\n        else:\n            d[num] = True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #compare list with dictionary\n    # if value at dictionary, add 1\n    # if not, add value at dictionary, set to 1\n    \n    # time complexity: O(n)\n    # space complexity: O(n)\n    dic = {}\n    for n in arraynums:\n        if dic.get(n):\n            dic[n] += 1\n        else:\n            dic[n] = 1\n    \n    for k, v in dic.items():\n        if v > 1:\n            return True\n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(x) == 6 and x[0] == '0':\n        return True\n    elif len(x) == 8 and x[0] == '1':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(str(x)) == 6 and str(x)[0] == str(x)[1] and str(x)[2] == str(x)[3] and str(x)[4] == str(x)[5]: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1:\n        return False\n    elif x == 1:\n        return True\n    elif x == 2:\n        return False\n    else:\n        for i in range(3,x):\n            if x%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return any(map(lambda x: x in 'qwertzuiop', x))\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 101 and x <= 111: \n        return True\n    return False\n    \n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(str(x)) == 6:\n        if (x%2 == 0 and x%10 == 2) or x%10 == 3 or x%10 == 4:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x in [1,4,7,8,9,10,11,14,15,16,17,19,20]\n    \ndef is_pallindrome(x): \n    '''\n    Write a function to check if the given number is a pallindrome or not.\n    '''\n    if len(str(x))<2:\n        return True\n    else:\n        return x[0]==x[-1] and is_pallindrome(x[1:-1])\n    \ndef is_paran(x): \n    '''\n    Write a function to check if the given number is a paran or not.\n    '''\n    if len(str(x))<2:\n        return True\n    else:\n        return x[0]=='(' and x[-1]==')' and is_paran(x[1:-1])\n    \ndef is_reverse(x): \n    '''\n    Write a function to check if the given number is a reverse or not.\n    '''\n    if len(str(x))<2:\n        return True\n    else:\n        return x[0]==x[-1] and is_reverse(x[1:-1])\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    str_x = str(x)\n    num_digs = len(str_x)\n    if num_digs < 2:\n        return False\n    elif num_digs == 2:\n        if str_x[0] == '1':\n            return True\n    else:\n        # first 2 digits are <100\n        if int(str_x[0]+str_x[1]) < 100:\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    import re\n    wood = re.compile(r'[a-zA-Z]')\n    result = wood.search(x)\n    if result!= None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if type(x) == type(1) and len(str(x)) > 2 and len(str(x)) <= 6:\n        if x >= 0 and x <= 26:\n            if x == 0 or x == 11 or x == 22 or x == 33:\n                return False\n            elif x == 1 or x == 5 or x == 6 or x == 7 or x == 8 or x == 9 or x == 10:\n                return True\n            elif x == 4 or x == 12 or x == 13 or x == 14 or x == 15 or x == 16:\n                return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    reverse = 0\n    while num > 0:\n        reverse *= 10\n        reverse += num % 10\n        num /= 10\n    return reverse == num - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if (num - int(num/2) == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    r = num%10\n    return r*2 == (num/10)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num > 0) and (num == num[::-1])\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num==0:\n        return 1\n    rev=0\n    while num:\n        rem=num%10\n        rev=(rev*10)+rem\n        num=num//10\n    if rev==2*num:\n        return 1\n    else:\n        return 0\ndef isPrime(num):\n    '''\n    Write a python function to check if a given number is prime number.\n    '''\n    if num<2:\n        return 0\n    if num==2:\n        return 1\n    if num%2==0:\n        return 0\n    for x in range(3,num):\n        if num%x==0:\n            return 0\n    return 1\ndef isEven(num):\n    '''\n    Write a python function to check if a given number is even number.\n    '''\n    if num%2==0:\n        return 1\n    return 0\ndef isPerfect(num):\n    '''\n    Write a python function to check if a given number is a perfect number.\n    '''\n    sum=0\n    for x in range(1,num):\n        if num%x==0:\n            sum+=x\n    if sum==num:\n        return 1\n    return 0\ndef primeFactor(num):\n    '''\n    Write a python function to return the prime factors of a given number.\n    '''\n    if isPrime(num):\n        return num\n    if num%2==0:\n        return 2\n    for x in range(3,num//2,2):\n        if num%x==0:\n            return x\ndef isOdd(num):\n    '''\n    Write a python function to check if a given number is odd number.\n    '''\n    if num%2==1:\n        return 1\n    return 0\ndef digitFactorial(num):\n    '''\n    Write a python function to return the factorial of a given digit.\n    '''\n    if num==0:\n        return 1\n    else:\n        fact=1\n        for x in range(1,num+1):\n            fact*=x\n        return fact\ndef isPalindrome(num):\n    '''\n    Write a python function to check if a given number is a palindrome number.\n    '''\n    rev=0\n    n=num\n    while n:\n        rem=n%10\n        rev=(rev*10)+rem\n        n=n//10\n    if num==rev:\n        return 1\n    return 0\ndef isPrimeFactors(num):\n    '''\n    Write a python function to return the prime factors of a given number.\n    '''\n    if isPrime(num):\n        return num\n    if num%2==0:\n        return 2\n    for x in range(3,num//2,2):\n        if num%x==0:\n            return x\ndef isPermuted(num):\n    '''\n    Write a python function to check if a given number is permuted number.\n    '''\n    rev=0\n    n=num\n    while n:\n        rem=n%10\n        rev=(rev*10)+rem\n        n=n//10\n    if num==rev:\n        return 1\n    return 0\ndef isMagic(num):\n    '''\n    Write a python function to check if a given number is a magic number.\n    '''\n    if isPrime(num):\n        return 1\n    if num%2==0:\n        return 0\n    s=0\n    for x in range(1,num//2+1):\n        if num%x==0:\n            s+=x\n    if s==num:\n        return 1\n    return 0\ndef isArmstrong(num):\n    '''\n    Write a python function to check if a given number is an Armstrong number.\n    '''\n    rev=0\n    n=num\n    while n:\n        rem=n%10\n        rev=(rev*10)+rem\n        n=n//10\n    if num==rev:\n        return 1\n    if num==0:\n        return 1\n    else:\n        return 0\ndef isPerfectSquare(num):\n    '''\n    Write a python function to check if a given number is a perfect square number.\n    '''\n    if num==0:\n        return 1\n    if num*num==num:\n        return 1\n    else:\n        return 0\ndef isPerfectCube(num):\n    '''\n    Write a python function to check if a given number is a perfect cube number.\n    '''\n    if isPerfectSquare(num):\n        return 1\n    else:\n        return 0\ndef isPalindromePerm(num):\n    '''\n    Write a python function to check if a given number is a palindromic permutation.\n    '''\n    rev=0\n    n=num\n    while n:\n        rem=n%10\n        rev=(rev*10)+rem\n        n=n//10\n    if num==rev:\n        return 1\n    else:\n        return 0\ndef isFactorial(num):\n    '''\n    Write a python function to check if a given number is a factorial number.\n    '''\n    if num==0 or num==1:\n        return 1\n    if num*(num-1)==num:\n        return 1\n    return 0\ndef isPentagonal(num):\n    '''\n    Write a python function to check if a given number is a pentagonal number.\n    '''\n    if isPerfectSquare(num):\n        return 1\n    else:\n        return 0\ndef isHexagonal(num):\n    '''\n    Write a python function to check if a given number is a hexagonal number.\n    '''\n    if isPerfectSquare(num):\n        return 1\n    else:\n        return 0\ndef isHeptagonal(num):\n    '''\n    Write a python function to check if a given number is a heptagonal number.\n    '''\n    if isPerfectSquare(num):\n        return 1\n    else:\n        return 0\ndef isOctagonal(num):\n    '''\n    Write a python function to check if a given number is a octagonal number.\n    '''\n    if isPerfectSquare(num):\n        return 1\n    else:\n        return 0\ndef isPentagonalNumber(num):\n    '''\n    Write a python function to check if a given number is a pentagonal number.\n    '''\n    if num==0:\n        return 1\n    if isPerfectSquare(num):\n        return 1\n    else:\n        return 0\ndef isHexagonalNumber(num):\n    '''\n    Write a python function to check if a given number is a hexagonal number.\n    '''\n    if num==0:\n        return 1\n    if isPerfectSquare(num):\n        return 1\n    else:\n        return 0\ndef isHeptagonalNumber(num):\n    '''\n    Write a python function to check if a given number is a heptagonal number.\n    '''\n    if num==0:\n        return 1\n    if isPerfectSquare(num):\n        return 1\n    else:\n        return 0\ndef isOctagonalNumber(num):\n    '''\n    Write a python function to check if a given number is a octagonal number.\n    '''\n    if num==0:\n        return 1\n    if isPerfectSquare(num):\n        return 1\n    else:\n        return 0\ndef isHexagonalNumber(num):\n    '''\n    Write a python function to check if a given number is a hexagonal number.\n    '''\n    if num==0:\n        return 1\n    if isPerfectSquare(num):\n        return 1\n    else:\n        return 0\ndef isHexagonalNumber(num):\n    '''\n    Write a python function to check if a given number is a hexagonal number.\n    '''\n    if num==0:\n        return 1\n    if isPerfectSquare(num):\n        return 1\n    else:\n        return 0\ndef isHexagonalNumber(num):\n    '''\n    Write a python function to check if a given number is a hexagonal number.\n    '''\n    if num==0:\n        return 1\n    if isPerfectSquare(num):\n        return 1\n    else:\n        return 0\ndef isHexagonalNumber(num):\n    '''\n    Write a python function to check if a given number is a hexagonal number.\n    '''\n    if num==0:\n        return 1\n    if isPerfectSquare(num):\n        return 1\n    else:"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1]) * 2\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) == (2 * num) - 1\n    \ndef rev(num):    \n    '''\n    Write a python function to chec"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    rev_num = rev(num%10)\n    if num%10 == (num//10)%10:\n        return 0\n    else:\n        return 1\n    \ndef rev_check(num):\n    return num == rev(num)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    global max_num\n    if not arr : \n        return \n    max_num = arr[0]\n    for i in arr : \n        if i > max_num : \n            max_num = i\n    return \n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in arr : \n        if int(i) > max_num :\n            max_num = int(i)\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in arr : \n        if i > max : \n            max = i\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = sorted(arr)\n    max_num = arr[-1]\n    print(\"Largest number is: \", max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : \n        return 0\n    num = 1\n    for i in range(len(arr)) : \n        if arr[i] == 0 : \n            return 0\n        else : \n            num *= arr[i]\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    assert (isinstance(arr, list)), \"Arr should be a list\"\n    assert (all(isinstance(x, int) for x in arr)), \"All elements should be integers\"\n    assert (all(x >= 0 for x in arr)), \"All elements should be positive or zero\"\n    \n    if (len(arr) == 0) : \n        return None\n    \n    if (len(arr) == 1) : \n        return arr[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    global ans\n    for i in range(len(arr)) : \n        arr[i] = str(arr[i])\n    arr = list(map(int,arr))\n    a = sorted(arr)\n    if a == arr : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    tmp = len(arr)\n    if tmp == 1 : \n        return arr[0]\n    elif arr[0] > arr[1] : \n        return arr[0]\n    else : \n        return arr[1]\n    \ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    tmp = len(arr)\n    if tmp == 1 : \n        return arr[0]\n    elif arr[0] < arr[1] : \n        return arr[0]\n    else : \n        return arr[1]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if not arr :\n        return None\n    if len(arr) == 1 :\n        return arr[0]\n    if len(arr) == 2 :\n        return max(arr[0], arr[1])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    max_num = arr[0]\n    for item in arr : \n        if item > max_num : \n            max_num = item\n    return max_num\n    \n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y < 0:\n        return True\n    elif x < 0 and y >= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return False\n    else:\n        return False\n    \ndef opposite_Sgn(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False\n    \ndef EqualsSign(x,y):\n    '''\n    Write a python function to check whether the given two integers have same sign or not.\n    '''\n    if x>0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False\n    \ndef test_EqualsSign():\n    assert EqualsSign(1,1)==True\n    assert EqualsSign(-1,1)==False\n    assert EqualsSign(-1,-1)==True\n    assert EqualsSign(1,-1)==False\n    \ndef test_Opposite_Signs():\n    assert opposite_Signs(1,1)==False\n    assert opposite_Signs(-1,-1)==False\n    assert opposite_Signs(1,-1)==True\n    assert opposite_Signs(-1,1)==True\n    \ndef test_Opposite_Sgn():\n    assert opposite_Sgn(1,1)==False\n    assert opposite_Sgn(-1,-1)==False\n    assert opposite_Sgn(1,-1)==True\n    assert opposite_Sgn(-1,1)==True\n    \ndef test_Equals_Sign():\n    assert EqualsSign(1,1)==True\n    assert EqualsSign(-1,-1)==True\n    assert EqualsSign(-1,1)==False\n    assert EqualsSign(1,-1)==False\n    \ndef test_Opposite_Sgn():\n    assert opposite_Sgn(1,1)==False\n    assert opposite_Sgn(-1,-1)==False\n    assert opposite_Sgn(1,-1)==True\n    assert opposite_Sgn(-1,1)==True\n    \ndef test_All_Signs():\n    assert EqualsSign(1,1)==True\n    assert EqualsSign(-1,-1)==True\n    assert EqualsSign(1,-1)==False\n    assert EqualsSign(-1,1)==False\n    assert opposite_Signs(1,1)==False\n    assert opposite_Signs(-1,-1)==False\n    assert opposite_Signs(1,-1)==True\n    assert opposite_Signs(-1,1)==True\n    assert opposite_Sgn(1,1)==False\n    assert opposite_Sgn(-1,-1)==False\n    assert opposite_Sgn(1,-1)==True\n    assert opposite_Sgn(-1,1)==True\n    assert EqualsSign(1,1)==True\n    assert EqualsSign(-1,-1)==True\n    assert EqualsSign(1,-1)==False\n    assert EqualsSign(-1,1)==False\n    assert opposite_Signs(1,1)==False\n    assert opposite_Signs(-1,-1)==False\n    assert opposite_Signs(1,-1)==True\n    assert opposite_Signs(-1,1)==True\n    assert opposite_Sgn(1,1)==False\n    assert opposite_Sgn(-1,-1)==False\n    assert opposite_Sgn(1,-1)==True\n    assert opposite_Sgn(-1,1)==True\n    \ndef test_test_All_Signs():\n    assert test_EqualsSign()==True\n    assert test_Opposite_Signs()==True\n    assert test_Opposite_Sgn()==True\n    assert test_Equals_Sign()==True\n    assert test_Opposite_Sgn()==True\n    assert test_All_Signs()==True\n    \ndef test_find_Max():\n    lst=[2,3,5,1,8,9]\n    lst1=[2,3,5,1,8,9]\n    assert find_Max(lst)==9\n    assert find_Max(lst1)==9\n    \ndef test_find_Min():\n    lst=[2,3,5,1,8,9]\n    lst1=[2,3,5,1,8,9]\n    assert find_Min(lst)==1\n    assert find_Min(lst1)==1\n    \ndef test_range_list():\n    lst=[2,3,5,1,8,9]\n    lst1=[2,3,5,1,8,9]\n    assert range_list(lst)==True\n    assert range_list(lst1)==True\n    \ndef test_find_Sum():\n    lst=[2,3,5,1,8,9]\n    lst1=[2,3,5,1,8,9]\n    assert find_Sum(lst)==18\n    assert find_Sum(lst1)==18\n    \ndef test_find_Sum_List():\n    lst=[2,3,5,1,8,9]\n    lst1=[2,3,5,1,8,9]\n    assert find_Sum_List(lst)==18\n    assert find_Sum_List(lst1)==18\n    \ndef test_find_Average():\n    lst=[2,3,5,1,8,9]\n    lst1=[2,3,5,1,8,9]\n    assert find_Average(lst)==6\n    assert find_Average(lst1)==6\n    \ndef test_find_Average_List():\n    lst=[2,3,5,1,8,9]\n    lst1=[2,3,5,1,8,9]\n    assert find_Average_List(lst)==6\n    assert find_Average_List(lst1)==6\n    \ndef test_find_Mean():\n    lst=[2,3,5,1,8,9]\n    lst1=[2,3,5,1,8,9]\n    assert find_Mean(lst)==6\n    assert find_Mean(lst1)==6\n    \ndef test_find_Mean_List():\n    lst=[2,3,5,1,8,9]\n    lst1=[2,3,5,1,8,9]\n    assert find_Mean_List(lst)==6\n    assert find_Mean_List(lst1)==6\n    \ndef test_find_Median():\n    lst=[2,3,5,1,8,9]\n    lst1=[2,3,5,1,8,9]\n    assert find_Median(lst)==6\n    assert find_Median(lst1)==6\n    \ndef test_find_Median_List():\n    lst=[2,3,5,1,8,9]\n    lst1=[2,3,5,1,8,9]\n    assert find_Median_List(lst)==6\n    assert find_Median_List(lst1)==6\n    \ndef test_find_Mode():\n    lst=[2,3,5,1,8,9]\n    lst1=[2,3,5,1,8,9]\n    assert find_Mode(lst)==[2,5]\n    assert find_Mode(lst1)==[2,5]\n    \ndef test_find_Mode_List():\n    lst=[2,3,5,1,8,9]\n    lst1=[2,3,5,1,8,9]\n    assert find_Mode_List(lst)==[2,5]\n    assert find_Mode_List(lst1)==[2,5]\n    \ndef test_find_Range():\n    lst=[2,3,5,1,8,9]\n    lst1=[2,3,5,1,8,9]\n    assert find_Range(lst)==9\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    return False\n    \n    \ndef CheckIfCoPrime(x,y): \n    '''\n    Write a python function to check whether the given two integers are co-prime or not.\n    '''\n    if gcd(x,y) == 1:\n        return True\n    return False\n    \n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x = int(x)\n    y = int(y)\n    if x * y > 0:\n        return \"The two integers have opposite signs\"\n    else:\n        return \"The two integers have same sign\"\n    \ndef is_even(x):\n    '''\n    Write a python function to check whether the given integer is even or not.\n    '''\n    x = int(x)\n    if x % 2 == 0:\n        return \"The given integer is even\"\n    else:\n        return \"The given integer is odd\"\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\ndef opposite_Signs1(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False\ndef Same_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have the same sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\ndef Same_Signs1(x,y):\n    '''\n    Write a python function to check whether the given two integers have the same sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\ndef Maximum(x,y):\n    '''\n    Write a python function to find maximum value among two numbers.\n    '''\n    if x > y:\n        return x\n    elif x < y:\n        return y\n    else:\n        return \"Both the values are equal\"\ndef Minimum(x,y):\n    '''\n    Write a python function to find minimum value among two numbers.\n    '''\n    if x < y:\n        return x\n    elif x > y:\n        return y\n    else:\n        return \"Both the values are equal\"\ndef Floating_Point_Addition(x,y):\n    '''\n    Write a python function to add two floating point numbers.\n    '''\n    return float(format(x + y,\".2f\"))\ndef Floating_Point_Subtraction(x,y):\n    '''\n    Write a python function to subtract two floating point numbers.\n    '''\n    return float(format(x - y,\".2f\"))\ndef Floating_Point_Multiplication(x,y):\n    '''\n    Write a python function to multiply two floating point numbers.\n    '''\n    return float(format(x * y,\".2f\"))\ndef Floating_Point_Division(x,y):\n    '''\n    Write a python function to divide two floating point numbers.\n    '''\n    return float(format(x / y,\".2f\"))\ndef Modulus(x,y):\n    '''\n    Write a python function to find the modulus of two numbers.\n    '''\n    return float(format(x % y,\".2f\"))\ndef Power(x,y):\n    '''\n    Write a python function to find the power of two numbers.\n    '''\n    return float(format(x ** y,\".2f\"))\ndef Floor_Division(x,y):\n    '''\n    Write a python function to find the floor division of two numbers.\n    '''\n    return float(format(x // y,\".2f\"))\ndef Logarithm(x,y):\n    '''\n    Write a python function to find the logarithm of two numbers.\n    '''\n    return float(format(log(x,y),\".2f\"))\ndef Sqrt(x):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    return float(format(sqrt(x),\".2f\"))\ndef Sine(x):\n    '''\n    Write a python function to find the sine of a number.\n    '''\n    return float(format(sin(x),\".2f\"))\ndef Cosine(x):\n    '''\n    Write a python function to find the cosine of a number.\n    '''\n    return float(format(cos(x),\".2f\"))\ndef Tangent(x):\n    '''\n    Write a python function to find the tangent of a number.\n    '''\n    return float(format(tan(x),\".2f\"))\ndef pi():\n    '''\n    Write a python function to find the value of pi.\n    '''\n    return float(format(pi,\".2f\"))\ndef e():\n    '''\n    Write a python function to find the value of e.\n    '''\n    return float(format(e,\".2f\"))\ndef Factorial(x):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    factorial = 1\n    for i in range(1,x+1):\n        factorial = factorial * i\n    return factorial\ndef Square_root(x):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    return float(format(sqrt(x),\".2f\"))\ndef cuberoot(x):\n    '''\n    Write a python function to find the cube root of a number.\n    '''\n    return float(format(cbrt(x),\".2f\"))\ndef cuberoot2(x):\n    '''\n    Write a python function to find the cube root of a number.\n    '''\n    return float(format(x ** (1/3),\".2f\"))\ndef nth_root(x,n):\n    '''\n    Write a python function to find the nth root of a number.\n    '''\n    return float(format(x**(1/n),\".2f\"))\ndef Decimal_to_Binary(x):\n    '''\n    Write a python function to convert a decimal number to binary.\n    '''\n    if x < 0:\n        return \"Binary representation of a negative number can't be found\"\n    elif x == 0:\n        return 0\n    else:\n        decimal_to_binary = []\n        while x > 0:\n            if x % 2 == 0:\n                decimal_to_binary.insert(0,0)\n            else:\n                decimal_to_binary.insert(0,1)\n            x = int(x/2)\n        return decimal_to_binary\ndef Decimal_to_Octal(x):\n    '''\n    Write a python function to convert a decimal number to octal.\n    '''\n    if x < 0:\n        return \"Octal representation of a negative number can't be found\"\n    elif x == 0:\n        return 0\n    else:\n        decimal_to_octal = []\n        while x > 0:\n            if x % 8 == 0:\n                decimal_to_octal.insert(0,0)\n            else:\n                decimal_to_octal.insert(0,1)\n            x = int(x/8)\n        return decimal_to_octal\ndef Decimal_to_Hexa(x):\n    '''\n    Write a python function to convert a decimal number to hexadecimal.\n    '''\n    if x < 0:\n        return \"Hexadecimal representation of a negative number can't be found\"\n    elif x == 0:\n        return 0\n    else:\n        decimal_to_hexadecimal = []\n        while x > 0:\n            if x % 16 == 0:\n                decimal_to_hexadecimal.insert(0,0)\n            else:\n                decimal_to_hexadecimal.insert(0,1)\n            x = int(x/16)\n        decimal_to_hexadecimal.reverse()\n        binary_representation = []\n        for i in decimal_to_hexadecimal:\n            binary_representation.insert(0,i)\n        decimal_to_hexadecimal = \"\".join(map(str,binary_representation))\n        return decimal_to_hexadecimal\ndef Octal_to_Binary(x):\n    '''\n    Write a python function to convert a octal number to binary.\n    '''\n    if x < 0:\n        return \"Binary representation of a negative number can't be found\"\n    elif x == 0:\n        return 0\n    else:\n        octal_to_binary = []\n        while x > 0:\n            if x % 2 == 0:\n                octal_to_binary.insert(0,0)\n            else:\n                octal_to_binary.insert(0,1)\n            x = int"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x * y > 0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y>=0) or (x>0 and y<0):\n        return True\n    else:\n        return False\n    \ndef filter_by_str(lst, str):\n    '''\n    Write a python function to filter out the list elements that are of string type.\n    '''\n    lst2 = []\n    for ele in lst:\n        if type(ele)!= str:\n            lst2.append(ele)\n    return lst2\n    \ndef print_Sorted_dict_by_Value(d):\n    '''\n    Write a python function to print the dictionary with the key and value sorted by value.\n    '''\n    for k,v in sorted(d.items(), key=lambda x:x[1]):\n        print k,v\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n    \ndef arrange_string(str):\n    '''\n    Write a python function to rearrange a string in such a way that the even and odd characters are in the same string \n    and their position is alternately alternativly. \n    '''\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n        else:\n            new_string += str[i][::-1]\n    return new_string\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((n*(3*n - 1))/2)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return octagonal(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((3 * n + 1) ** 2 + n) // 2 == (3 * n + 1) ** 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += i\n        if result**2 == n*(3*(result**2) + 1):\n            return result\n        \ndef get_octagonals(n):\n    '''\n    Write a function to find the first n octagonals numbers.\n    '''\n    result = []\n    for i in range(1,n+1):\n        result.append(i**2)\n    return result\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((n**2) + (n - 2)) % 3 == 0\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # The first 8 octagon numbers are 1, 1/2, 1/4, 1/8, 1/16, 1/32, 1/64, 1/128.\n    # The nth octagonal number is the nth number that is 1/n. \n    # This function returns true if the nth octagonal number is an integer.\n    # Note: in python, integer division performs floor integer division.\n    # This means you can also use int(n) to return the floor of n.\n    # You may need to import math for this solution. \n    # If you do not import it, you may get a name error.\n    # You may assume n is a positive integer.\n    return n == int(n*(3*n-1)/2)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += (i * (3 * i - 1)) / 2\n    return s\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Don't be curious about the old solution.\n    n = n*(3*n + 1) // 2\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n + 1) ** 2 + 1 - 2 * n ** 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    i = 1\n    while True:\n        if i**2 == n * (3 * i - 1):\n            return True\n        elif i**2 > n * (3 * i - 1):\n            return False\n        i += 1\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    for i in range(len(s)):\n        for j in range(len(s) - i + 1):\n            if sum(map(int, list(s[i:i + j]))) == j:\n                result += 1\n    return result\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            temp = s[i:j+1]\n            if sum(int(x) for x in temp) == len(temp):\n                result += 1\n    return result\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #get the count of substrings with sum of digits equal to length\n    def substrings(s):\n        dic = {}\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                dic[s[i:j+1]] = dic.get(s[i:j+1], 0) + 1\n        return dic\n    def check_Substrings(s, count_dic):\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                count = 0\n                for k in range(i, j+1):\n                    if s[k] in count_dic:\n                        count += count_dic[s[k]]\n                if count == j-i+1:\n                    return True\n        return False\n    count_dic = substrings(s)\n    return check_Substrings(s, count_dic)\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        count += count_string(s,i,i)\n    for i in range(len(s)-1):\n        count += count_string(s,i,i+1)\n    return count\ndef count_string(s,start,end):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    length = end-start+1\n    if length == 1:\n        if int(s[start]) == length:\n            return 1\n        return 0\n    if int(s[start]) == length/2:\n        return 1\n    for i in range(start+1,end+1):\n        if int(s[start]) + int(s[i]) == length:\n            count += count_string(s,start+1,i)\n    return count\ndef solve_one(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        count += count_string(s,i,i)\n    for i in range(len(s)-1):\n        count += count_string(s,i,i+1)\n    return count\ndef solve_two(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if sum(int(x) for x in s[i:i+1]) == len(s[i:i+1]):\n            count += 1\n    for i in range(len(s)-1):\n        if sum(int(x) for x in s[i:i+2]) == len(s[i:i+2]):\n            count += 1\n    return count\ndef permutations(s,n):\n    '''\n    Write a python function to count the number of permutations of a string\n    '''\n    count = 1\n    for i in range(1,n):\n        count *= (s[i-1]!= s[n-i])\n    return count\ndef count_digits(s):\n    '''\n    Write a python function to count the number of digits in a number\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] in '0123456789':\n            count += 1\n    return count\ndef find_permutation(s1,s2):\n    '''\n    Write a python function to find the permutations of 2 strings\n    '''\n    if len(s1)!= len(s2):\n        return False\n    d1 = defaultdict(int)\n    d2 = defaultdict(int)\n    for i in s1:\n        d1[i] += 1\n    for i in s2:\n        d2[i] += 1\n    for i in d1:\n        if d1[i]!= d2[i]:\n            return False\n    return True\ndef find_substring(s1,s2):\n    '''\n    Write a python function to find the number of substrings\n    '''\n    if len(s1)!= len(s2):\n        return 0\n    d1 = defaultdict(int)\n    d2 = defaultdict(int)\n    for i in s1:\n        d1[i] += 1\n    for i in s2:\n        d2[i] += 1\n    count = 0\n    for i in d1:\n        if d1[i] <= d2[i]:\n            count += (d1[i] - d2[i]) + 1\n    return count\ndef common_elements(s1,s2):\n    '''\n    Write a python function to find the number of common elements\n    '''\n    d1 = defaultdict(int)\n    d2 = defaultdict(int)\n    for i in s1:\n        d1[i] += 1\n    for i in s2:\n        d2[i] += 1\n    count = 0\n    for i in d1:\n        if d1[i] > 0 and d2[i] > 0:\n            count += 1\n    return count\ndef find_common_prefix(s1,s2):\n    '''\n    Write a python function to find the common prefix between two strings\n    '''\n    if len(s1) < len(s2):\n        s1,s2 = s2,s1\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            return s1[:i]\n    return s1\ndef find_suffix(s1,s2):\n    '''\n    Write a python function to find the common suffix between two strings\n    '''\n    if len(s1) < len(s2):\n        s1,s2 = s2,s1\n    for i in range(len(s2)):\n        if s1[-i-1]!= s2[-i-1]:\n            return s2[i:]\n    return s2\ndef find_non_common_suffix(s1,s2):\n    '''\n    Write a python function to find the non common suffix between two strings\n    '''\n    s1 = s1[::-1]\n    s2 = s2[::-1]\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            return s1[i:]\n    return s1\ndef replace_all(s,old,new):\n    '''\n    Write a python function to replace all occurrences of old with new in a string\n    '''\n    if old == new:\n        return s\n    i = 0\n    j = 0\n    new_string = []\n    while j < len(s):\n        if s[j] == old[i]:\n            j += 1\n            i += 1\n            if i == len(old):\n                new_string.append(new)\n                i = 0\n        else:\n            new_string.append(s[j])\n            j += 1\n    return ''.join(new_string)\ndef can_convert_1(s1,s2):\n    '''\n    Write a python function to convert a string to another string using only one of the 4 operations from above\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s3 = s1[::-1]\n    s4 = s2[::-1]\n    return s1 == s2 and s3 == s4 or s1 == s4 and s3 == s2\ndef replace_char(s,old,new):\n    '''\n    Write a python function to replace the old char with new char in a string\n    '''\n    if old == new:\n        return s\n    i = 0\n    j = 0\n    new_string = []\n    while j < len(s):\n        if s[j] == old[i]:\n            j += 1\n            i += 1\n            if i == len(old):\n                new_string.append(new)\n                i = 0\n        else:\n            new_string.append(s[j])\n            j += 1\n    return ''.join(new_string)\ndef string_compression(s):\n    '''\n    Write a python function to convert a string to another string using only one of the 4 operations from above\n    '''\n    if len(s) == 0:\n        return s\n    i = 0\n    j = 0\n    new_string = []\n    while j < len(s):\n        if s[j] == s[i]:\n            j += 1\n            i += 1\n            if i == len(s):\n                new_string.append(s[j])\n                i = 0\n        else:\n            new_string.append(s[j])\n            j += 1\n    return ''.join(new_string)\ndef remove_char(s,old):\n    '''\n    Write a python function to remove all the characters from a string which are present in the given string\n    '''\n    if old == '':\n        return s\n    i = 0\n    j = 0\n    new_string = []\n    while j < len("
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count += len(s[i:])\n        else:\n            count += len(s[i:]) + len(s[i:]) - (int(s[i]) - 1)\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dict_ = defaultdict(int)\n    for i in range(len(s)):\n        dict_[s[i]] += 1\n    \n    count = 0\n    for key in dict_:\n        if dict_[key] == len(s):\n            count += 1\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if int(s[i]) == len(s):\n            count += 1\n        for j in range(i+1, len(s)):\n            if int(s[i:j]) == len(s):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i,n):\n            d[s[i:j+1]]+=1\n    return sum([val*val for key,val in d.items()])\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    start = 0\n    length = 1\n    for end in range(1, len(s)):\n        if s[end] >= s[end-1]:\n            length += 1\n        else:\n            if length > 1:\n                print length, start, end\n                start = end - length\n            length = 1\n    if length > 1:\n        print length, start, end\n    return int(length)\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_Substrings_Helper(s, start, end, count, length):\n        if start > end:\n            return count\n        if start == end:\n            if sum(map(int, s[start:end+1])) == length:\n                return count + 1\n            else:\n                return count\n        if sum(map(int, s[start:end+1])) == length:\n            count = count_Substrings_Helper(s, start+1, end, count+1, length)\n        return count\n    return count_Substrings_Helper(s, 0, len(s)-1, 0, len(s))\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs[0], smallest_num(xs[1:]))\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # xs = [1,2,5,3,4,6,9,7]\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Assume all pairs are distinct\n    # Time Complexity: O(n^2)\n    # Space Complexity: O(n)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    return max([abs(x-y) for x,y in combinations(test_list,2)])\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # return max(abs(a[0] - a[1]) for a in combinations(test_list, 2))\n    return max(abs(a[0] - a[1]) for a in itertools.combinations(test_list, 2))\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = []\n    for i in test_list:\n        for j in test_list:\n            if i[0] > j[0] and i[1] > j[1]:\n                result.append(abs(i[0] - j[0]))\n    return max(result)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(abs(x[0] - x[1]) for x in zip(test_list, test_list[1:]))\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    length = len(test_list)\n    if length <= 2:\n        return 0\n    else:\n        min_diff = test_list[0] + test_list[1]\n        max_diff = test_list[0] + test_list[1]\n        for i in range(2, length):\n            min_diff = min(min_diff, test_list[i] + test_list[i - 1])\n            max_diff = max(max_diff, test_list[i] + test_list[i - 1])\n    return max_diff - min_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in xrange(len(test_list)):\n        for j in xrange(i + 1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x: x[1], reverse = True)\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks,key = lambda x:x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    if type(subjectmarks)==type(tuple()):\n        l1=[]\n        for (subject,marks) in subjectmarks:\n            l1.append((marks,subject))\n        l1.sort(reverse=True)\n        \n        return [subject for (marks,subject) in l1]\n    else:\n        return 'argument is not a list'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n    return sorted(subjectmarks, key = lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #import pdb\n    #pdb.set_trace()\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    #return sum(data_list)\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for d in data_list:\n        if isinstance(d, list):\n            result += recursive_list_sum(d)\n        else:\n            result += d\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return_sum = 0\n    for element in data_list:\n        if isinstance(element,list):\n            return_sum += recursive_list_sum(element)\n        else:\n            return_sum += element\n    return return_sum\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    if not data_list:\n        return total\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for element in data_list:\n        if isinstance(element, list):\n            result += recursive_list_sum(element)\n        else:\n            result += element\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data_list_sum = 0\n    for data in data_list:\n        if isinstance(data, list):\n            data_list_sum += recursive_list_sum(data)\n        else:\n            data_list_sum += data\n    return data_list_sum\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #if we've gotten to the end of the list, return the sum\n    if data_list == []:\n        return 0\n    #otherwise, return the sum of the next element and the sum of the rest of the list\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    \n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos += 1\n    print pos\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for element in list if element>0)\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(i > 0 for i in list)\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([i for i in list if i > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_nums = 0\n    for i in list:\n        if i > 0:\n            positive_nums += 1\n    return positive_nums\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_numbers = 0\n    for item in list:\n        if item > 0:\n            positive_numbers += 1\n    return positive_numbers\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1, 1, 2]\n    if n == 0: return 0\n    if n < 3: return bell[n]\n    for i in range(3, n):\n        bell.append(bell[i-1] + bell[i-2] + bell[i-3])\n    return bell[n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = [1,1]\n    for i in range(2,n):\n        count.append(sum(count[i-2:i]))\n    return count[n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def find_bell_numbers(x):\n        if x == 1:\n            return 1\n        return find_bell_numbers(x - 1) + find_bell_numbers(x - 2)\n    \n    numbers = [find_bell_numbers(i) for i in range(n)]\n    return numbers[n - 1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_nums = [1]\n    for i in range(1,n+1):\n        bell_nums.append(sum(bell_nums[i-j]*j for j in range(1,i+1)))\n    return bell_nums[-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def s(n):\n        if n == 0:\n            return 1\n        else:\n            return n * s(n-1)\n    return s(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell_number_bottom_up(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # From http://en.wikipedia.org/wiki/Bell_number\n    return 1 if n < 2 else n * bell_number(n - 1)\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    def isMonotonic(A):\n        l=len(A)\n        if l==0:\n            return True\n        elif l==1:\n            return True\n        else:\n            if A[0]<=A[1]:\n                return isMonotonic(A[1:])\n            else:\n                return False\n    return isMonotonic(A)\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    if A[0] > A[1]:\n        return False\n    for i in range(2,len(A)):\n        if A[i-1] > A[i]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1: return True\n    if A[0] > A[1]: return False\n    for i in range(1, n):\n        if A[i] > A[i-1]: return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    if A[0] > A[-1]:\n        for i in range(1,len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1,len(A)):\n            if A[i] > A[i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=2: \n        return True\n    else: \n        return A[0]<=A[1] and A[-1]<=A[-2]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (len(A)<3): return True\n    for i in range(1,len(A)):\n        if A[i]<A[i-1]: return False\n    return True\ndef is_Monotonic_Alternate(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (len(A)<3): return True\n    i=0\n    while i<len(A)-1:\n        if A[i]<A[i+1]: return False\n        i+=1\n    return True\ndef is_Monotonic_Alternate2(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (len(A)<3): return True\n    i=1\n    while i<len(A):\n        if A[i]<A[i-1]: return False\n        i+=1\n    return True\ndef is_Monotonic_Alternate3(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (len(A)<3): return True\n    if (len(A)==3): return (A[0]<=A[1] and A[1]<=A[2])\n    if (len(A)==4): return (A[0]<=A[1] and A[1]<=A[2] and A[2]<=A[3])\n    if (len(A)>4):\n        for i in range(len(A)-2):\n            if A[i]<=A[i+1] and A[i+1]<=A[i+2]: return False\n        return True\ndef is_Monotonic_Alternate4(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (len(A)<3): return True\n    if (len(A)==3): return (A[0]<=A[1] and A[1]<=A[2])\n    if (len(A)==4): return (A[0]<=A[1] and A[1]<=A[2] and A[2]<=A[3])\n    if (len(A)>4):\n        for i in range(len(A)-3):\n            if A[i]<=A[i+1] and A[i+1]<=A[i+2] and A[i+2]<=A[i+3]: return False\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    elif len(A) == 1:\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] < A[i - 1]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A is None or len(A) < 2:\n        return True\n    if A[0] > A[-1]:\n        return False\n    for i in range(1, len(A) - 1):\n        if A[i] < A[i - 1] or A[i] < A[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    d = {}\n    l = []\n    \n    for i in A:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n            \n    for k,v in d.items():\n        l.append(v)\n    \n    l.sort()\n    \n    if l == A:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)))\n    \ndef is_Consecutive(A):\n    '''\n    Write a python function to check whether the given array is consecutive or not.\n    '''\n    return all(A[i]-A[i-1] == 1 for i in range(1,len(A)))\n    \ndef is_Strobogrammatic(num):\n    '''\n    Write a python function to check whether the given number is strobogrammatic or not.\n    '''\n    if len(num)%2 == 0:\n        return False\n    return num[len(num)//2] in ['0','1','8']\n    \ndef is_BalancedParenthesis(s):\n    '''\n    Write a python function to check whether the given string is a balanced parenthesis or not.\n    '''\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n    \ndef is_ValidParenthesis(s):\n    '''\n    Write a python function to check whether the given string is a valid parenthesis or not.\n    '''\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack or stack[-1]!= '(':\n                return False\n            stack.pop()\n    return not stack\n    \ndef find_Special_digit(n):\n    '''\n    Write a python function to find the special digit in the given number.\n    '''\n    num = n\n    s = set()\n    while num!= 0:\n        s.add(num%10)\n        num //= 10\n    return min(s)\n    \ndef find_Special_digit2(n):\n    '''\n    Write a python function to find the special digit in the given number.\n    '''\n    n_str = str(n)\n    digit = n_str[-1]\n    for i in range(len(n_str)-2, -1, -1):\n        if n_str[i] > digit:\n            digit = n_str[i]\n    return int(digit)\n    \ndef find_Special_digit3(n):\n    '''\n    Write a python function to find the special digit in the given number.\n    '''\n    n_str = str(n)\n    digit = n_str[0]\n    for i in range(1, len(n_str)):\n        if n_str[i] > digit:\n            digit = n_str[i]\n    return int(digit)\n    \ndef is_Palin(n):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    n_str = str(n)\n    return n_str[0] == n_str[len(n_str)-1] and is_Palin(n_str[1:len(n_str)-1])\n    \ndef is_Palin(n):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    if len(n) <= 1:\n        return True\n    if n[0]!= n[-1]:\n        return False\n    return is_Palin(n[1:len(n)-1])\n    \ndef is_Palindrome(n):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    if len(n) <= 1:\n        return True\n    if n[0]!= n[-1]:\n        return False\n    return is_Palindrome(n[1:len(n)-1])\n    \ndef is_Palindrome2(n):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    if n == 0:\n        return True\n    if n%10 == n/100:\n        return is_Palindrome(n//10)\n    return False\n    \ndef is_Palindrome3(n):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    if n < 0:\n        return False\n    num = n\n    reverse_num = 0\n    while num:\n        reverse_num = reverse_num*10 + num%10\n        num //= 10\n    return n == reverse_num\n    \ndef is_Palindrome4(n):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    if n < 0:\n        return False\n    num = n\n    reverse_num = 0\n    while num:\n        reverse_num = reverse_num*10 + num%10\n        num //= 10\n    return n == reverse_num\n    \ndef reverse(n):\n    '''\n    Write a python function to reverse the given number.\n    '''\n    reverse_num = 0\n    while n:\n        reverse_num = reverse_num*10 + n%10\n        n //= 10\n    return reverse_num\n    \ndef is_Palindrome5(n):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    if n < 0:\n        return False\n    num = n\n    reverse_num = 0\n    while num:\n        reverse_num = reverse_num*10 + num%10\n        num //= 10\n    return n == reverse_num\n    \ndef is_Palindrome6(n):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    if n < 0:\n        return False\n    s = str(n)\n    l = len(s)\n    if l == 1:\n        return True\n    if s[0]!= s[l-1]:\n        return False\n    return is_Palindrome(s[1:l-1])\n    \ndef is_Palindrome7(n):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    if n < 0:\n        return False\n    if n == reverse(n):\n        return True\n    return False\n    \ndef is_Anagram(n):\n    '''\n    Write a python function to check whether the given number is anagram or not.\n    '''\n    if len(n)!= len(set(n)):\n        return False\n    s = sorted(n)\n    return s == list(n)\n    \ndef is_Anagram2(n):\n    '''\n    Write a python function to check whether the given number is anagram or not.\n    '''\n    s = set(n)\n    return sorted(n) == list(s)\n    \ndef is_Anagram3(n):\n    '''\n    Write a python function to check whether the given number is anagram or not.\n    '''\n    if len(n)!= len(set(n)):\n        return False\n    n_str = str(n)\n    digit = n_str[0]\n    n_str = n_str[1:]\n    for i in n_str:\n        if i > digit:\n            return False\n        digit = i\n    return True\n    \ndef is_Anagram4(n):\n    '''\n    Write a python function to check whether the given number is anagram or not.\n    '''\n    if len(n)!= len(set(n)):\n        return False\n    n_str = str(n)\n    digit = n_str[0]\n    n_str = n_str[1:]\n    for i in n_str:\n        if i < digit:\n            return False\n        digit = i\n    return True\n    \ndef is_Anagram5(n):\n    '''\n    Write a python function to check whether the given number is anagram or not.\n    '''\n    if len(n)!= len(set(n)):\n        return False\n    s = set(n)\n    n_str = str(n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(0, len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # your code goes here\n    if len(s) > len(l):\n        return False\n    if s == l:\n        return True\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l1 = l[:]\n    l1.sort()\n    l2 = s[:]\n    l2.sort()\n    return l1 == l2\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    #if l == s:\n    #    return True\n    #else:\n    #    return False\n    try:\n        return l.index(s)!= -1\n    except ValueError:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i: i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(0, len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l[len(s):] == s\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(l) < len(s):\n        return False\n    if l[:len(s)] == s:\n        return True\n    return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in xrange(0, len(l)):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i not in l:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    from collections import defaultdict\n    output = defaultdict(int)\n    for i in Input:\n        output[len(i)]+=1\n    for i in output:\n        if output[i]>1:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 2:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal = True\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            equal = False\n            break\n    return equal\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return (len(set([len(i) for i in Input])) == 1)\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return Input[0][0] == Input[1][0] and Input[2][0] == Input[3][0] and Input[4][0] == Input[5][0]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Tuple = Input[:]\n    for i in range(0,len(Tuple)-1):\n        for j in range(i+1,len(Tuple)):\n            if len(Tuple[i])!= len(Tuple[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i) == len(Input[0]):\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(Input[i])==len(Input[i+1]) for i in range(len(Input)-1))\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 2:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 1:\n        return True\n    else:\n        return len(set([len(t) for t in Input])) == 1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    while gap > 1:\n        gap = gap // 1.3\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    '''\n    Comb sort is a famous algorithm for sorting small numbers,\n    and it can be used to make a more efficient sorting algorithm.\n    It is a comparison sort, and divides the list into two sub-lists.\n    In the first sub-list, we compare each element with the next\n    element and exchange them if necessary. The second sub-list\n    is then sorted. Since each sub-list is already sorted,\n    we can move on to the next sub-list.\n    We keep doing this until we reach the end of the list.\n    '''\n    '''\n    This algorithm runs in O(n log n) time\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                # swap\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    \n    length = len(nums)\n    gap = length\n    \n    while gap > 1:\n        gap = gap // 2\n        for i in range(length - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                \n    return nums\n                \n                \ndef shell_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    \n    length = len(nums)\n    gap = length // 2\n    \n    while gap > 0:\n        for i in range(gap, length):\n            while i >= gap and nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                i -= gap\n        gap = gap // 2\n    \n    return nums\n                \n                \ndef heapify(nums, length, i):\n    '''\n    Use min_heap to sort a list of elements.\n    '''\n    min_index = i\n    \n    left = i * 2 + 1\n    if left < length and nums[left] < nums[min_index]:\n        min_index = left\n    \n    right = i * 2 + 2\n    if right < length and nums[right] < nums[min_index]:\n        min_index = right\n    \n    if min_index!= i:\n        nums[min_index], nums[i] = nums[i], nums[min_index]\n        heapify(nums, length, min_index)\n        \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    global comp_count\n    global swap_count\n    comps = 0\n    swaps = 0\n    if len(nums) == 1:\n        return nums\n    pivot = nums[0]\n    left = []\n    right = []\n    for n in nums[1:]:\n        if n < pivot:\n            left.append(n)\n        elif n > pivot:\n            right.append(n)\n        else:\n            comp_count += 1\n            nums[nums.index(n)] = random.choice([left, right])[0]\n    swap_count += len(left) + len(right)\n    return comb_sort(left) + [pivot] + comb_sort(right)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    N = len(nums)\n    gap = N\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, N-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums == []:\n        return nums\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped == True:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0,n-gap):\n            if nums[i] > nums[i + gap]:\n                nums[i],nums[i + gap] = nums[i + gap],nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # run it n/2 times, so that the last n/2 items will be in the correct position\n    for i in range(0, len(nums)/2):\n        # run it n/2 times, so that the last n/2 items will be in the correct position\n        for j in range(len(nums)-1, i, -1):\n            if nums[j] < nums[j-1]:\n                nums[j], nums[j-1] = nums[j-1], nums[j]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    h = 1\n    h1 = nums[0]\n    while h < len(nums):\n        if nums[h] < h1:\n            nums[h], nums[h-1] = nums[h-1], nums[h]\n        h = h + 1\n        h1 = nums[h]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Find the maximum length of the list.\n    max_len = max(nums)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if int(math.sqrt(n))**2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n%4==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n**2 < 4:\n        return True\n    for i in range(3,int(n**0.5)+1,2):\n        if (n - i*i)**0.5 == int((n - i*i)**0.5):\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**.5) + 1):\n        if n - i * i == i * i:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    arr = []\n    for i in range(n+1): \n        for j in range(n+1): \n            arr.append(i**2 + j**2)\n    arr = set(arr)\n    \n    for i in range(len(arr)): \n        if i**2 - i in arr: \n            pass\n        else: \n            return 0\n    return 1\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(i):\n            if i**2 - j**2 == n:\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    squares = [i**2 for i in range(1,n+1)]\n    for i in range(1,n+1):\n        for j in range(1,i):\n            if (squares[i]-squares[j]) in squares:\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 3:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if (n - i*i) % (2*i) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i**2 - j**2 == n:\n                print(True)\n                break\n            elif i**2 - j**2 > n:\n                print(False)\n                break\n        else:\n            continue\n        break\n    else:\n        print(False)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    count = 1\n    while count*count <= n:\n        if count*count == n:\n            return True\n        count += 1\n    for count in range(1, n):\n        if n-count*count == count*count:\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    length = len(colors)\n    while i < length:\n        if i < length - 1:\n            if patterns[i] == patterns[i+1]:\n                if patterns[i] == 'RRGGBB':\n                    return True\n                elif patterns[i] == 'BGRGRB':\n                    return False\n                i += 2\n            else:\n                i += 1\n        else:\n            if patterns[i] == patterns[i-1]:\n                if patterns[i] == 'RRGGBB':\n                    return True\n                elif patterns[i] == 'BGRGRB':\n                    return False\n                i += 2\n            else:\n                i += 1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(patterns) < 1:\n        return False\n    \n    if len(patterns) == 1:\n        return True\n    \n    return is_samepatterns_rec(colors, patterns, 0)\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if len(patterns[i])!= len(colors):\n            return False\n        for j in range(len(patterns[i])):\n            if patterns[i][j] == \"*\":\n                continue\n            else:\n                if patterns[i][j]!= colors[j]:\n                    return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        # iterate through the given pattern\n        for i in xrange(0, len(pattern)):\n            # use the pattern to see if the colors match\n            if colors[i]!= pattern[i]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        for j in range(len(colors)):\n            if patterns[i] == colors[j]:\n                return True\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        for j in range(len(patterns[i])):\n            if patterns[i][j] == 'r':\n                if j == 0:\n                    if colors[j] == colors[j+1]:\n                        return False\n                elif j == len(patterns[i])-1:\n                    if colors[j] == colors[j-1]:\n                        return False\n                else:\n                    if colors[j]!= colors[j+1] or colors[j]!= colors[j-1]:\n                        return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    is_followed = True\n    if len(colors)!= len(patterns):\n        is_followed = False\n    for i in range(len(patterns)):\n        if patterns[i] == 'R' and colors[i]!= colors[i+1]:\n            is_followed = False\n        if patterns[i] == 'G' and colors[i]!= colors[i+1]:\n            is_followed = False\n        if patterns[i] == 'B' and colors[i]!= colors[i+1]:\n            is_followed = False\n    return is_followed\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    if len(colors) == 1:\n        return True\n    else:\n        for i in range(len(colors)-1):\n            if patterns[i] == 'r' and patterns[i+1] == 'u':\n                return is_samepatterns(colors[i+1:], patterns[i+1:])\n            elif patterns[i] == 'u' and patterns[i+1] == 'r':\n                return is_samepatterns(colors[i+1:], patterns[i+1:])\n            elif patterns[i] == 'g' and patterns[i+1] == 'r':\n                return is_samepatterns(colors[i+1:], patterns[i+1:])\n            elif patterns[i] == 'r' and patterns[i+1] == 'g':\n                return is_samepatterns(colors[i+1:], patterns[i+1:])\n            elif patterns[i] == 'u' and patterns[i+1] == 'g':\n                return is_samepatterns(colors[i+1:], patterns[i+1:])\n            elif patterns[i] == 'g' and patterns[i+1] == 'u':\n                return is_samepatterns(colors[i+1:], patterns[i+1:])\n            elif patterns[i] == 'r' and patterns[i+1] == 'r':\n                return is_samepatterns(colors[i+1:], patterns[i+1:])\n            elif patterns[i] == 'u' and patterns[i+1] == 'u':\n                return is_samepatterns(colors[i+1:], patterns[i+1:])\n            elif patterns[i] == 'g' and patterns[i+1] == 'g':\n                return is_samepatterns(colors[i+1:], patterns[i+1:])\n            elif patterns[i] == 'r' and patterns[i+1] == 'r':\n                return is_samepatterns(colors[i+1:], patterns[i+1:])\n        return False\n    \nassert is_samepatterns(['r','u','g','r','u','r','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r','u','g','r',"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    for i in test_list:\n        if i[0]%K==0 and i[1]%K==0:\n            print i\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    #Find all tuples which have all elements divisible by k\n    divisible = []\n    for item in test_list:\n        temp = True\n        for elem in item:\n            if elem % K!= 0:\n                temp = False\n        if temp:\n            divisible.append(item)\n    \n    #Tally for each divisible tuple\n    tally = {}\n    for item in divisible:\n        tally[item] = tally.get(item, 0) + 1\n    \n    #Return the list of divisible tuples\n    return tally.items()\n    \n    \ndef find_divisible_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    #Create list of tuples where each element is divisible by K\n    divisible = [item for item in test_list if item[0] % K == 0]\n    \n    #Tally for each divisible tuple\n    tally = {}\n    for item in divisible:\n        tally[item] = tally.get(item, 0) + 1\n    \n    #Return the list of divisible tuples\n    return tally.items()\n    \n    \ndef find_divisible_tuples2(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    #Create list of tuples where each element is divisible by K\n    divisible = []\n    for item in test_list:\n        temp = True\n        for elem in item:\n            if elem % K!= 0:\n                temp = False\n        if temp:\n            divisible.append(item)\n    \n    #Tally for each divisible tuple\n    tally = {}\n    for item in divisible:\n        tally[item] = tally.get(item, 0) + 1\n    \n    #Return the list of divisible tuples\n    return tally.items()\n    \n    \ndef sum_tuple(tup):\n    '''\n    Write a function to sum a tuple\n    '''\n    \n    #Sum all elements in tuple\n    return sum(tup)\n    \n    \ndef sum_tuple2(tup):\n    '''\n    Write a function to sum a tuple\n    '''\n    \n    #Sum all elements in tuple\n    return sum(tup)\n    \n    \ndef sum_tuple3(tup):\n    '''\n    Write a function to sum a tuple\n    '''\n    \n    #Sum all elements in tuple\n    return reduce(lambda x, y: x + y, tup)\n    \n    \ndef sum_tuple4(tup):\n    '''\n    Write a function to sum a tuple\n    '''\n    \n    #Sum all elements in tuple\n    return reduce(lambda x, y: x + y, tup)\n    \n    \ndef sum_tuple5(tup):\n    '''\n    Write a function to sum a tuple\n    '''\n    \n    #Sum all elements in tuple\n    return sum(tup)\n    \n    \ndef find_largest_tuple(test_list):\n    '''\n    Write a function to find the largest tuple.\n    '''\n    \n    #Find maximum tuple\n    max_tup = max(test_list, key = sum_tuple)\n    \n    #Return the tuple\n    return max_tup\n    \n    \ndef find_largest_tuple2(test_list):\n    '''\n    Write a function to find the largest tuple.\n    '''\n    \n    #Find maximum tuple\n    max_tup = max(test_list, key = sum_tuple2)\n    \n    #Return the tuple\n    return max_tup\n    \n    \ndef find_largest_tuple3(test_list):\n    '''\n    Write a function to find the largest tuple.\n    '''\n    \n    #Find maximum tuple\n    max_tup = max(test_list, key = sum_tuple3)\n    \n    #Return the tuple\n    return max_tup\n    \n    \ndef find_largest_tuple4(test_list):\n    '''\n    Write a function to find the largest tuple.\n    '''\n    \n    #Find maximum tuple\n    max_tup = max(test_list, key = sum_tuple4)\n    \n    #Return the tuple\n    return max_tup\n    \n    \ndef find_largest_tuple5(test_list):\n    '''\n    Write a function to find the largest tuple.\n    '''\n    \n    #Find maximum tuple\n    max_tup = max(test_list, key = sum_tuple5)\n    \n    #Return the tuple\n    return max_tup\n    \n    \ndef find_smallest_tuple(test_list):\n    '''\n    Write a function to find the smallest tuple.\n    '''\n    \n    #Find minimum tuple\n    min_tup = min(test_list, key = sum_tuple)\n    \n    #Return the tuple\n    return min_tup\n    \n    \ndef find_smallest_tuple2(test_list):\n    '''\n    Write a function to find the smallest tuple.\n    '''\n    \n    #Find minimum tuple\n    min_tup = min(test_list, key = sum_tuple2)\n    \n    #Return the tuple\n    return min_tup\n    \n    \ndef find_smallest_tuple3(test_list):\n    '''\n    Write a function to find the smallest tuple.\n    '''\n    \n    #Find minimum tuple\n    min_tup = min(test_list, key = sum_tuple3)\n    \n    #Return the tuple\n    return min_tup\n    \n    \ndef find_smallest_tuple4(test_list):\n    '''\n    Write a function to find the smallest tuple.\n    '''\n    \n    #Find minimum tuple\n    min_tup = min(test_list, key = sum_tuple4)\n    \n    #Return the tuple\n    return min_tup\n    \n    \ndef find_smallest_tuple5(test_list):\n    '''\n    Write a function to find the smallest tuple.\n    '''\n    \n    #Find minimum tuple\n    min_tup = min(test_list, key = sum_tuple5)\n    \n    #Return the tuple\n    return min_tup\n    \n    \ndef find_greater_than_tuple(test_list, val):\n    '''\n    Write a function to find tuples which are greater than a given value.\n    '''\n    \n    #Find tuples greater than val\n    greater = [item for item in test_list if sum_tuple(item) > val]\n    \n    #Return the list of tuples\n    return greater\n    \n    \ndef find_greater_than_tuple2(test_list, val):\n    '''\n    Write a function to find tuples which are greater than a given value.\n    '''\n    \n    #Find tuples greater than val\n    greater = [item for item in test_list if sum_tuple2(item) > val]\n    \n    #Return the list of tuples\n    return greater\n    \n    \ndef find_greater_than_tuple3(test_list, val):\n    '''\n    Write a function to find tuples which are greater than a given value.\n    '''\n    \n    #Find tuples greater than val\n    greater = [item for item in test_list if sum_tuple3(item) > val]\n    \n    #Return the list of tuples\n    return greater\n    \n    \ndef find_greater_than_tuple4(test_list, val):\n    '''\n    Write a function to find tuples which are greater than a given value.\n    '''\n    \n    #Find tuples greater than val\n    greater = [item for item in test_list if sum_tuple4(item) > val]\n    \n    #Return the list of tuples\n    return greater\n    \n    \ndef find_greater_than_tuple5(test_list, val):\n    '''\n    Write a function to find tuples which are greater than a give"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(i,j) for i, j in test_list if j%K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for x in test_list:\n        if sum(x) % K == 0:\n            ans.append(x)\n    return ans\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    def is_divisible(tup):\n        for i in tup:\n            if not i%k:\n                pass\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in test_list:\n        if (i[0] % K == 0) and (i[1] % K == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        flag = True\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K!= 0:\n                flag = False\n                break\n        if flag:\n            count += 1\n    return count\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible = filter(lambda x: all(y % K == 0 for y in x), test_list)\n    return divisible\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ret_list = []\n    for each in test_list:\n        if K in each:\n            ret_list.append(each)\n    return ret_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    #print (n)\n    return (n%11 == 0)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\ndef is_Div(n):\n    '''\n    Write a python function to find whether a number is divisible by 17.\n    '''\n    return n%17==0\ndef is_Div2(n):\n    '''\n    Write a python function to find whether a number is divisible by 13.\n    '''\n    return n%13==0\ndef is_Div3(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div4(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\ndef is_Div5(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div6(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div7(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div8(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div9(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div10(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div11(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div12(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div13(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div14(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div15(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div16(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div17(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div18(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div19(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div20(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div21(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div22(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div23(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div24(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div25(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div26(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div27(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div28(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div29(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div30(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div31(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div32(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div33(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div34(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div35(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div36(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div37(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div38(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div39(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div40(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div41(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div42(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div43(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div44(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div45(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div46(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div47(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    '''\n    return n%19==0\ndef is_Div48(n):\n    '''\n    Write a python function to find whether a number is divisible by 19.\n    ''"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    return False \n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    # Check for 1 as the number is divisible by 1\n    if n == 1:\n        return True\n    \n    # Check for all other numbers (from 2 to 10)\n    for x in range(2,11):\n        if n % x == 0:\n            return True\n    \n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!= 0\n    \ndef max_len_word(s):\n    '''\n    Write a python function to check whether the length of the word is greater than 5.\n    '''\n    return len(s) > 5\n    \ndef reverse(s):\n    '''\n    Write a python function to reverse the string.\n    '''\n    return s[::-1]\n    \ndef reverse_word(s):\n    '''\n    Write a python function to reverse the words in the string.\n    '''\n    return \" \".join(s.split()[::-1])\n    \ndef reverse_sentence(s):\n    '''\n    Write a python function to reverse the words in the sentence.\n    '''\n    return \" \".join(s.split()[::-1])\n    \ndef palindrome(s):\n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef count_letter(s, l):\n    '''\n    Write a python function to count the number of times a letter occurs in the string.\n    '''\n    return s.count(l)\n    \ndef count_letter_string(s, l):\n    '''\n    Write a python function to count the number of times a letter occurs in the string.\n    '''\n    return s.lower().count(l.lower())\n    \ndef find_last_occurence(s, l):\n    '''\n    Write a python function to find the last occurence of a letter in the string.\n    '''\n    return s.rfind(l)\n    \ndef longest_word(s):\n    '''\n    Write a python function to find the longest word in the string.\n    '''\n    return max(s.split(), key=len)\n    \ndef longest_word_in_string(s):\n    '''\n    Write a python function to find the longest word in the string.\n    '''\n    return len(max(s.split(), key=len))\n    \ndef find_first_occurence(s, l):\n    '''\n    Write a python function to find the first occurence of a letter in the string.\n    '''\n    return s.find(l)\n    \ndef replace(s, old, new):\n    '''\n    Write a python function to replace all occurrences of old with new in the string.\n    '''\n    return s.replace(old, new)\n    \ndef convert_to_upper(s):\n    '''\n    Write a python function to convert the string to upper case.\n    '''\n    return s.upper()\n    \ndef convert_to_lower(s):\n    '''\n    Write a python function to convert the string to lower case.\n    '''\n    return s.lower()\n    \ndef remove_spaces(s):\n    '''\n    Write a python function to remove spaces from the string.\n    '''\n    return s.replace(\" \", \"\")\n    \ndef remove_spaces_except_one(s):\n    '''\n    Write a python function to remove spaces from the string except one.\n    '''\n    return s.replace(\" \", \"\", 1)\n    \ndef find_max(s):\n    '''\n    Write a python function to find the max number in the string.\n    '''\n    return max(s.split())\n    \ndef count_digits(s):\n    '''\n    Write a python function to count the number of digits in the string.\n    '''\n    return len(s.split()[0])\n    \ndef replace_letter(s, old, new):\n    '''\n    Write a python function to replace a letter in the string with another letter.\n    '''\n    return s.replace(old, new)\n    \ndef remove_letter(s, l):\n    '''\n    Write a python function to remove a letter from the string.\n    '''\n    return s.replace(l, \"\")\n    \ndef reverse_sentence_in_string(s):\n    '''\n    Write a python function to reverse the words in the sentence.\n    '''\n    return \" \".join(s.split()[::-1])\n    \ndef make_readable(n):\n    '''\n    Write a python function to convert the given number to the given readable format.\n    '''\n    return str(n) + \" Thousand \" + str(n/1000) + \" Hundred \" + str(n%1000)\n    \ndef reverse_number(n):\n    '''\n    Write a python function to reverse the given number.\n    '''\n    s = str(n)\n    l = len(s)\n    rev = int(s[::-1])\n    return rev\n    \ndef sort_number(n):\n    '''\n    Write a python function to sort the given number.\n    '''\n    return int(\"\".join(sorted(str(n))))\n    \ndef sort_number_reverse(n):\n    '''\n    Write a python function to sort the given number.\n    '''\n    return int(\"\".join(sorted(str(n), reverse=True)))\n    \ndef sort_number_array(a):\n    '''\n    Write a python function to sort the given array of numbers.\n    '''\n    return sorted(a)\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of the given number.\n    '''\n    s = 1\n    for i in range(1, n+1):\n        s *= i\n    return s\n    \ndef fib(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a+b\n    return a\n    \ndef fib_two(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    f = [0, 1]\n    if n < 2:\n        return f[n]\n    else:\n        for i in range(2, n):\n            f.append(f[i-1] + f[i-2])\n        return f[n-1]\n    \ndef fib_rec(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n < 2:\n        return n\n    else:\n        return fib_rec(n-1) + fib_rec(n-2)\n    \ndef is_unique(s):\n    '''\n    Write a python function to check whether the given string contains all unique characters.\n    '''\n    return len(s) == len(set(s))\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_pangram(s):\n    '''\n    Write a python function to check whether the given string is a pangram or not.\n    '''\n    return set(s.lower()) <= set(\"abcdefghijklmnopqrstuvwxyz\")\n    \ndef roman_to_int(s):\n    '''\n    Write a python function to convert a roman number to integer.\n    '''\n    m = {\"I\": 1, \"V\": 5, \"X\": 10, \"L\": 50, \"C\": 100, \"D\": 500, \"M\": 1000}\n    r = m[s[-1]]\n    for i in range(len(s)-1):\n        if m[s[i]] < m[s[i+1]]:\n            r -= m[s[i]]\n        else:\n            r += m[s[i]]\n    return r\n    \ndef int_to_roman(n):\n    '''\n    Write a python function to convert an integer to roman number.\n    '''\n    d = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    r = \"\"\n    for i in range(len(d)):\n        r += \"M\"*(n//d[i])\n        n %= d[i]\n    return r\n    \ndef rotate_number(n, d):\n    '''\n    Write a python function t"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(\"The word is even\")\n    else:\n        print(\"The word is odd\")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print(\"The word is even\")\n    else:\n        print(\"The word is odd\")\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l % 2 == 0:\n        return True\n    else:\n        return False\ndef find_uppercase(s):\n    '''\n    Write a python function to return a string containing all the uppercase letters.\n    '''\n    l = len(s)\n    for i in range(l):\n        if s[i].isupper():\n            return s[i]\ndef rev_string(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    l = len(s)\n    rev = ''\n    for i in range(l):\n        rev = rev + s[l - i - 1]\n    return rev\ndef is_palin(s):\n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    l = len(s)\n    for i in range(l):\n        if s[i]!= s[l - i - 1]:\n            return False\n    return True\ndef pangram(s):\n    '''\n    Write a python function to check whether the string is a pangram or not.\n    '''\n    l = len(s)\n    for i in range(l):\n        if s[i].isalpha():\n            continue\n        else:\n            return False\n    return True\ndef missing_char(s, c):\n    '''\n    Write a python function to find the missing character in the string\n    '''\n    l = len(s)\n    for i in range(l):\n        if s[i] == c:\n            return False\n    return True\ndef is_abecedarian(s):\n    '''\n    Write a python function to check whether the string is a abecedarian or not.\n    '''\n    l = len(s)\n    for i in range(l):\n        if s[i] <= s[i+1]:\n            continue\n        else:\n            return False\n    return True\ndef vigenere_encrypt(s, k):\n    '''\n    Write a python function to encrypt the given string using Vigenere Cipher\n    '''\n    l = len(s)\n    s = s.replace(' ', '')\n    for i in range(l):\n        if s[i].isupper():\n            s = s[:i] + chr((ord(s[i]) + ord(k[i % len(k)]) - 65) % 26 + 65) + s[i+1:]\n    return s\ndef vigenere_decrypt(s, k):\n    '''\n    Write a python function to decrypt the given string using Vigenere Cipher\n    '''\n    l = len(s)\n    s = s.replace(' ', '')\n    for i in range(l):\n        if s[i].isupper():\n            s = s[:i] + chr((ord(s[i]) - ord(k[i % len(k)]) - 65) % 26 + 65) + s[i+1:]\n    return s\ndef is_anagram(s, t):\n    '''\n    Write a python function to check whether the two strings are anagram or not.\n    '''\n    l = len(s)\n    for i in range(l):\n        if s[i] not in t:\n            return False\n    return True\ndef pig_latin(s):\n    '''\n    Write a python function to convert a string to pig latin.\n    '''\n    s = s.replace(' ', '')\n    l = len(s)\n    for i in range(l):\n        if s[i].isupper():\n            if i == 0:\n                return s[i] + 'yay'\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    l = len(s)\n    for i in range(l):\n        if s[i]!= s[l - i - 1]:\n            return False\n    return True\ndef ordinal_num(n):\n    '''\n    Write a python function to return the ordinal number of the given number.\n    '''\n    l = len(str(n))\n    for i in range(l):\n        if str(n)[i] == '1':\n            return (n + 1)\ndef get_max(a, b):\n    '''\n    Write a python function to return the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    return b\ndef get_min(a, b):\n    '''\n    Write a python function to return the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    return b\ndef max_of_3(a, b, c):\n    '''\n    Write a python function to return the maximum of three numbers.\n    '''\n    return max(a, max(b, c))\ndef sum_of_nums(n):\n    '''\n    Write a python function to return the sum of the first n numbers.\n    '''\n    l = len(str(n))\n    s = 0\n    for i in range(l):\n        s = s + int(str(n)[i])\n    return s\ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n % 2 == 0 and n!= 2:\n        return False\n    else:\n        l = 3\n        while l < n:\n            if n % l == 0:\n                return False\n            l = l + 2\n        return True\ndef max_diff(a):\n    '''\n    Write a python function to return the maximum difference of the given list.\n    '''\n    m = a[0]\n    for i in range(len(a)):\n        if m < a[i]:\n            m = a[i]\n    return max(a) - min(a)\ndef is_anagram(s, t):\n    '''\n    Write a python function to check whether the two strings are anagram or not.\n    '''\n    l = len(s)\n    for i in range(l):\n        if s[i] not in t:\n            return False\n    return True\ndef rot13(s):\n    '''\n    Write a python function to return the string after applying rot13 encryption on it.\n    '''\n    l = len(s)\n    for i in range(l):\n        if ord(s[i]) > 122:\n            s = s[:i] + chr(ord(s[i]) - 13) + s[i+1:]\n        elif ord(s[i]) < 97:\n            s = s[:i] + chr(ord(s[i]) + 13) + s[i+1:]\n    return s\ndef sb(s):\n    '''\n    Write a python function to check whether the string is a subsequence of another string or not.\n    '''\n    l = len(s)\n    for i in range(l):\n        if s[i]!= s[l - i - 1]:\n            return False\n    return True\ndef sb_2(s, t):\n    '''\n    Write a python function to check whether the string is a subsequence of another string or not.\n    '''\n    l = len(s)\n    for i in range(l):\n        if s[i]!= t[l - i - 1]:\n            return False\n    return True\ndef sb_3(s, t):\n    '''\n    Write a python function to check whether the string is a subsequence of another string or not.\n    '''\n    l = len(s)\n    for i in range(l):\n        if s[i]!= t[i]:\n            return False\n    return True\ndef sb_4(s, t):\n    '''\n    Write a python function to check whether the string is a subsequence of another string or not.\n    '''\n    l = len(s)\n    for i in range(l):\n        if s[i]!= t[i]:\n            return False\n    return True\ndef sb_5(s, t):\n    '''\n    Write a python functio"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    if len(s) % 2 == 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if (len(s) % 2) == 0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        print \"The word length is even\"\n    else: \n        print \"The word length is odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    for a in range(1,n+1):\n        for b in range(a,n+1):\n            for c in range(b,n+1):\n                for d in range(c,n+1):\n                    if a**3 + b**3 + c**3 + d**3 == a*b*c*d:\n                        count += 1\n    return count\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1)) * ((n + 1) * (2 * n + 1)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n+1)*n*(n+1)*(n+2) / 6 \n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4**n - 1\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n * (n + 1)) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return -1\n    if n == 1:\n        return 4\n    else:\n        return tetrahedral_number(n-1) + n + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) / 6\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) / 6\n    \ndef test_tetrahedral_number():\n    assert tetrahedral_number(3) == 10\n    assert tetrahedral_number(1) == 4\n    assert tetrahedral_number(0) == 4\n    assert tetrahedral_number(15) == 489\n    print(\"Passed: tetrahedral_number()\")\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Your code here\n    return 0\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) / 4\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3)*math.pi*(r**3)\n    return v\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4.0*math.pi*(r**2)\n    return a\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = (math.pi*(r**2)*h)\n    return v\ndef cylinder_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 2*math.pi*r*(r+h)\n    return a\ndef cylinder_area(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    a = 2*math.pi*r*h\n    return a\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1.0/3)*math.pi*(r**2)*h\n    return v\ndef cone_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = (1.0/2)*math.pi*r*(r+h)\n    return a\ndef cone_area(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    a = (1.0/2)*math.pi*r*h\n    return a\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3)*math.pi*(r**3)\n    return v\ndef sphere_surface_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4.0*math.pi*(r**2)\n    return a\ndef sphere_area(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    a = 4.0*math.pi*(r**2)\n    return a\ndef cube_volume(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v = (s**3)\n    return v\ndef cube_surface_area(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    a = 6*(s**2)\n    return a\ndef cube_area(s):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    a = 6*(s**2)\n    return a\ndef rectangle_area(w,l):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = w*l\n    return a\ndef rectangle_volume(w,l):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    v = w*l\n    return v\ndef rhombus_area(w,h):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    a = (w*h)/2\n    return a\ndef rhombus_volume(w,h):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    v = (w*h)/2\n    return v\ndef rhombus_surface_area(w,h):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    a = (w*h)+(w+h)\n    return a\ndef rectangle_surface_area(w,l):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    a = w*l\n    return a\ndef rectangle_perimeter(w,l):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    p = 2*(w+l)\n    return p\ndef rhombus_perimeter(w,h):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    p = 2*(w+h)\n    return p\ndef square_area(s):\n    '''\n    Write a function to find the area of a square.\n    '''\n    a = s**2\n    return a\ndef square_volume(s):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    v = s**3\n    return v\ndef rhombus_perimeter(w,h):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    p = 2*(w+h)\n    return p\ndef square_perimeter(s):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    p = 4*s\n    return p\ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    p = 2*math.pi*r\n    return p\ndef circle_area(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    a = math.pi*(r**2)\n    return a\ndef rhombus_perimeter(w,h):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    p = 2*(w+h)\n    return p\ndef rhombus_area(w,h):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    a = (w*h)/2\n    return a\ndef rhombus_volume(w,h):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    v = (w*h)/2\n    return v\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = (math.pi*(r**2)*h)\n    return v\ndef cylinder_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 2*math.pi*r*(r+h)\n    return a\ndef cylinder_area(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    a = 2*math.pi*r*h\n    return a\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3)*math.pi*(r**3)\n    return v\ndef sphere_surface_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4.0*math.pi*(r**2)\n    return a\ndef sphere_area(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    a = 4.0*math.pi*(r**2)\n    return a\ndef cube_volume(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v = (s**3)\n    return v\ndef cube_surface_area(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    a = 6*(s**2)\n    return a\ndef cube_area(s):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    a = 6*(s**2)\n    return a\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = (math.pi*(r**2)*h)\n    return v\ndef cylinder_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 2*mat"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4./3.)*math.pi*r**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*math.pow(r,3.0)\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return l**3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*math.pow(r,2.0)*h\ndef surface_area_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*l**2\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*math.pow(r,2.0)\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*math.pow(r,2.0)*h\ndef celsius_to_fahrenheit(c):\n    '''\n    Write a function to convert Celsius to Fahrenheit.\n    '''\n    return (9.0/5.0)*c + 32.0\ndef celsius_to_kelvin(c):\n    '''\n    Write a function to convert Celsius to Kelvin.\n    '''\n    return c + 273.0\ndef celsius_to_rankine(c):\n    '''\n    Write a function to convert Celsius to Rankine.\n    '''\n    return (9.0/5.0)*c + 491.67\ndef fahrenheit_to_celsius(f):\n    '''\n    Write a function to convert Fahrenheit to Celsius.\n    '''\n    return (5.0/9.0)*(f - 32.0)\ndef fahrenheit_to_kelvin(f):\n    '''\n    Write a function to convert Fahrenheit to Kelvin.\n    '''\n    return celsius_to_kelvin(fahrenheit_to_celsius(f))\ndef fahrenheit_to_rankine(f):\n    '''\n    Write a function to convert Fahrenheit to Rankine.\n    '''\n    return celsius_to_rankine(fahrenheit_to_celsius(f))\ndef kelvin_to_celsius(k):\n    '''\n    Write a function to convert Kelvin to Celsius.\n    '''\n    return k - 273.0\ndef kelvin_to_fahrenheit(k):\n    '''\n    Write a function to convert Kelvin to Fahrenheit.\n    '''\n    return celsius_to_fahrenheit(kelvin_to_celsius(k))\ndef kelvin_to_rankine(k):\n    '''\n    Write a function to convert Kelvin to Rankine.\n    '''\n    return celsius_to_rankine(kelvin_to_celsius(k))\ndef rankine_to_celsius(r):\n    '''\n    Write a function to convert Rankine to Celsius.\n    '''\n    return 5.0/9.0 * (r - 491.67)\ndef rankine_to_fahrenheit(r):\n    '''\n    Write a function to convert Rankine to Fahrenheit.\n    '''\n    return 9.0/5.0 * r\ndef rankine_to_kelvin(r):\n    '''\n    Write a function to convert Rankine to Kelvin.\n    '''\n    return celsius_to_kelvin(rankine_to_celsius(r))\ndef fahrenheit_to_celsius_table():\n    '''\n    Create a table of Celsius values and their corresponding Fahrenheit and Kelvin values.\n    '''\n    Celsius = range(-50,50)\n    Fahrenheit = []\n    Kelvin = []\n    for c in Celsius:\n        Fahrenheit.append(celsius_to_fahrenheit(c))\n        Kelvin.append(celsius_to_kelvin(c))\n    print 'Celsius\\tFahrenheit\\tKelvin'\n    for i in range(len(Celsius)):\n        print '%s\\t\\t%s\\t\\t%s' % (Celsius[i], Fahrenheit[i], Kelvin[i])\ndef fahrenheit_to_kelvin_table():\n    '''\n    Create a table of Fahrenheit values and their corresponding Celsius and Kelvin values.\n    '''\n    Fahrenheit = range(-50,50)\n    Celsius = []\n    Kelvin = []\n    for f in Fahrenheit:\n        Celsius.append(fahrenheit_to_celsius(f))\n        Kelvin.append(fahrenheit_to_kelvin(f))\n    print 'Fahrenheit\\tCelsius\\tKelvin'\n    for i in range(len(Fahrenheit)):\n        print '%s\\t\\t%s\\t\\t%s' % (Fahrenheit[i], Celsius[i], Kelvin[i])\ndef celsius_to_fahrenheit_table():\n    '''\n    Create a table of Celsius values and their corresponding Fahrenheit and Kelvin values.\n    '''\n    Celsius = range(-50,50)\n    Fahrenheit = []\n    Kelvin = []\n    for c in Celsius:\n        Fahrenheit.append(celsius_to_fahrenheit(c))\n        Kelvin.append(celsius_to_kelvin(c))\n    print 'Celsius\\tFahrenheit\\tKelvin'\n    for i in range(len(Celsius)):\n        print '%s\\t\\t%s\\t\\t%s' % (Celsius[i], Fahrenheit[i], Kelvin[i])\ndef fahrenheit_to_kelvin_table():\n    '''\n    Create a table of Fahrenheit values and their corresponding Celsius and Kelvin values.\n    '''\n    Fahrenheit = range(-50,50)\n    Celsius = []\n    Kelvin = []\n    for f in Fahrenheit:\n        Celsius.append(fahrenheit_to_celsius(f))\n        Kelvin.append(fahrenheit_to_kelvin(f))\n    print 'Fahrenheit\\tCelsius\\tKelvin'\n    for i in range(len(Fahrenheit)):\n        print '%s\\t\\t%s\\t\\t%s' % (Fahrenheit[i], Celsius[i], Kelvin[i])\ndef kelvin_to_fahrenheit_table():\n    '''\n    Create a table of Kelvin values and their corresponding Celsius and Fahrenheit values.\n    '''\n    Kelvin = range(-50,50)\n    Celsius = []\n    Fahrenheit = []\n    for k in Kelvin:\n        Celsius.append(kelvin_to_celsius(k))\n        Fahrenheit.append(kelvin_to_fahrenheit(k))\n    print 'Kelvin\\tCelsius\\tFahrenheit'\n    for i in range(len(Kelvin)):\n        print '%s\\t\\t%s\\t\\t%s' % (Kelvin[i], Celsius[i], Fahrenheit[i])\ndef kelvin_to_celsius_table():\n    '''\n    Create a table of Kelvin values and their corresponding Celsius and Fahrenheit values.\n    '''\n    Kelvin = range(-50,50)\n    Celsius = []\n    Fahrenheit = []\n    for k in Kelvin:\n        Celsius.append(kelvin_to_celsius(k))\n        Fahrenheit.append(kelvin_to_fahrenheit(k))\n    print 'Kelvin\\tCelsius\\tFahrenheit'\n    for i in range(len(Kelvin)):\n        print '%s\\t\\t%s\\t\\t%s' % (Kelvin[i], Celsius[i], Fahrenheit[i])\ndef celsius_to_rankine_table():\n    '''\n    Create a table of Celsius values and their corresponding Rankine and Fahrenheit values.\n    '''\n    Celsius = range(-50,50)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return ((4/3.0)*(math.pi)*(r**3))\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n    \ndef num_spheres(r,n):\n    '''\n    Write a function to find the volume of a n-sphere.\n    '''\n    return math.pi * (r**n)\n    \ndef volume_cuboid(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\n    \ndef area_rect(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n    \ndef side_rect(l,b):\n    '''\n    Write a function to find the length of a side of a rectangle.\n    '''\n    return 2 * l + 2 * b\n    \ndef num_rects(l,b,h):\n    '''\n    Write a function to find the number of rectangles in a row.\n    '''\n    return l * b / h\n    \ndef volume_cuboid(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n    \ndef num_spheres(r,n):\n    '''\n    Write a function to find the volume of a n-sphere.\n    '''\n    return math.pi * (r**n)\n    \ndef area_rect(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n    \ndef side_rect(l,b):\n    '''\n    Write a function to find the length of a side of a rectangle.\n    '''\n    return 2 * l + 2 * b\n    \ndef num_rects(l,b,h):\n    '''\n    Write a function to find the number of rectangles in a row.\n    '''\n    return l * b / h\n    \ndef side_rect(l,b):\n    '''\n    Write a function to find the length of a side of a rectangle.\n    '''\n    return 2 * l + 2 * b\n    \ndef num_cuboids(l,b,h):\n    '''\n    Write a function to find the number of cuboids in a row.\n    '''\n    return l * b / h\n    \ndef num_rects(l,b,h):\n    '''\n    Write a function to find the number of rectangles in a row.\n    '''\n    return l * b / h\n    \ndef side_rect(l,b):\n    '''\n    Write a function to find the length of a side of a rectangle.\n    '''\n    return 2 * l + 2 * b\n    \ndef side_cuboid(l,b,h):\n    '''\n    Write a function to find the length of a side of a cuboid.\n    '''\n    return 2 * l + 2 * b + 2 * h\n    \ndef num_cuboids(l,b,h):\n    '''\n    Write a function to find the number of cuboids in a row.\n    '''\n    return l * b / h\n    \ndef num_rects(l,b,h):\n    '''\n    Write a function to find the number of rectangles in a row.\n    '''\n    return l * b / h\n    \ndef side_rect(l,b):\n    '''\n    Write a function to find the length of a side of a rectangle.\n    '''\n    return 2 * l + 2 * b\n    \ndef side_cuboid(l,b,h):\n    '''\n    Write a function to find the length of a side of a cuboid.\n    '''\n    return 2 * l + 2 * b + 2 * h\n    \ndef num_cuboids(l,b,h):\n    '''\n    Write a function to find the number of cuboids in a row.\n    '''\n    return l * b / h\n    \ndef num_rects(l,b,h):\n    '''\n    Write a function to find the number of rectangles in a row.\n    '''\n    return l * b / h\n    \ndef side_rect(l,b):\n    '''\n    Write a function to find the length of a side of a rectangle.\n    '''\n    return 2 * l + 2 * b\n    \ndef side_cuboid(l,b,h):\n    '''\n    Write a function to find the length of a side of a cuboid.\n    '''\n    return 2 * l + 2 * b + 2 * h\n    \ndef num_cuboids(l,b,h):\n    '''\n    Write a function to find the number of cuboids in a row.\n    '''\n    return l * b / h\n    \ndef num_rects(l,b,h):\n    '''\n    Write a function to find the number of rectangles in a row.\n    '''\n    return l * b / h\n    \ndef side_rect(l,b):\n    '''\n    Write a function to find the length of a side of a rectangle.\n    '''\n    return 2 * l + 2 * b\n    \ndef side_cuboid(l,b,h):\n    '''\n    Write a function to find the length of a side of a cuboid.\n    '''\n    return 2 * l + 2 * b + 2 * h\n    \ndef num_cuboids(l,b,h):\n    '''\n    Write a function to find the number of cuboids in a row.\n    '''\n    return l * b / h\n    \ndef num_rects(l,b,h):\n    '''\n    Write a function to find the number of rectangles in a row.\n    '''\n    return l * b / h\n    \ndef side_rect(l,b):\n    '''\n    Write a function to find the length of a side of a rectangle.\n    '''\n    return 2 * l + 2 * b\n    \ndef side_cuboid(l,b,h):\n    '''\n    Write a function to find the length of a side of a cuboid.\n    '''\n    return 2 * l + 2 * b + 2 * h\n    \ndef num_cuboids(l,b,h):\n    '''\n    Write a function to find the number of cuboids in a row.\n    '''\n    return l * b / h\n    \ndef num_rects(l,b,h):\n    '''\n    Write a function to find the number of rectangles in a row.\n    '''\n    return l * b / h\n    \ndef side_rect(l,b):\n    '''\n    Write a function to find the length of a side of a rectangle.\n    '''\n    return 2 * l + 2 * b\n    \ndef side_cuboid(l,b,h):\n    '''\n    Write a function to find the length of a side of a cuboid.\n    '''\n    return 2 * l + 2 * b + 2 * h\n    \ndef num_cuboids(l,b,h):\n    '''\n    Write a function to find the number of cuboids in a row.\n    '''\n    return l * b / h\n    \ndef num_rects(l,b,h):\n    '''\n    Write a function to find the number of rectangles in a row.\n    '''\n    return l * b / h\n    \ndef side_rect(l,b):\n    '''\n    Write a function to find the length of a side of a rectangle.\n    '''\n    return 2 * l + 2 * b\n    \ndef side_cuboid(l,b,h):\n    '''\n    Write a function to find the length of a side of a cuboid.\n    '''\n    return 2 * l + 2 * b + 2 * h\n    \ndef num_cuboids(l,b,h):\n    '''\n    Write a function to find the number of cuboids in a row.\n    '''\n    return l * b / h\n    \ndef num_rects(l,b,h):\n    '''\n    Write a function to find the number of rectangles in a ro"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return ((4.0/3.0)*(3.14159)*(r**3))\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ = 0\n    for i in strr:\n        sum_ = sum_ + ord(i)\n    return chr(sum_ % 26 + ord('A'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    return chr(sum(ord(i) for i in strr) % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    i=0\n    res=0\n    while i<len(strr):\n        res=res+ord(strr[i])\n        i+=1\n    return res%26\ndef is_pangram(strr):\n    '''\n    Write a python function to check whether a string is a pangram or not. A pangram is a string which contains all the alphabets.\n    '''\n    i=0\n    p=0\n    while i<len(strr):\n        if get_Char(strr[i])==0:\n            p+=1\n        i+=1\n    if p==26:\n        return True\n    else:\n        return False\nprint(is_pangram(\"The quick brown fox jumps over the lazy dog\"))"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr=strr.replace(' ','')\n    char_list=[]\n    for i in range(len(strr)):\n        char_list.append(ord(strr[i])%26)\n    char_list=sorted(char_list)\n    string=''\n    for i in range(len(char_list)):\n        string=string+chr(char_list[i]+65)\n    return string\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr(sum%26+ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    out=''\n    for i in strr:\n        out+=chr(ord(i)+1)\n    return out\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum = (sum + ord(strr[i]))\n    \n    sum = sum % 26\n    \n    return chr(sum+97)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    value = 0\n    for i in strr:\n        value += ord(i)\n    return chr(value % 26 + ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ret = 0\n    for i in strr:\n        ret = ret + ord(i)\n    return ret % 26\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    seq = [0, 1, 1, 2]\n    \n    for i in range(4, n + 1):\n        new = seq[i - 1] + seq[i - 2]\n        seq.append(new)\n    \n    return seq[-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return\n    if n == 1:\n        return 1\n    return sequence(n-1) + (sequence(n-2) + sequence(n-3))\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def test(index): \n        if index == n: \n            return 1\n        else: \n            return 0\n    return reduce(operator.add, (test(i) for i in range(n)))\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    while len(sequence) < n:\n        sequence.append(sequence[-1]*3 + 1)\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def conway(n):\n        if n == 0:\n            return 1\n        return (2 * conway(n - 1) - conway(n - 2))\n    return conway(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    current = 1\n    for i in range(1,n):\n        current = current + (current * 3) + 1\n    return current\n    \nprint(sequence(10)"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n    \ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * math.pow(r, 2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0 * math.pi * r * r\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    S = 4 * math.pi * (r**2)\n    return S\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    v = 4*math.pi*(r**2)\n    print(v)\n    return(v)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\ndef surfacearea_sphere_vector(r):\n    '''\n    Write a function to find the surface area of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return 4*math.pi*(r**2)\ndef surfacearea_sphere_x(r):\n    '''\n    Write a function to find the surface area of a sphere, which is the same as\n    the area of a sphere but with vector inputs. The function also includes\n    vector inputs.\n    '''\n    return 4*math.pi*(r**2)\ndef surfacearea_sphere_x_vector(r):\n    '''\n    Write a function to find the surface area of a sphere, which is the same as\n    the area of a sphere but with vector inputs. The function also includes\n    vector inputs.\n    '''\n    return 4*math.pi*(r**2)\ndef surfacearea_sphere_vector(r):\n    '''\n    Write a function to find the surface area of a sphere, which is the same as\n    the area of a sphere but with vector inputs. The function also includes\n    vector inputs.\n    '''\n    return 4*math.pi*(r**2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    the area of a sphere but with vector inputs.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_x_vector(r):\n    '''\n    Write a function to find the volume of a sphere, which is the same as\n    th"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #print(r)\n    area = 4*math.pi*r**2\n    return area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #print(r)\n    volume = (4/3)*math.pi*r**3\n    return volume\ndef surfacearea_sphere_cont(r):\n    '''\n    Write a function to find the surface area of a sphere when the radius of the sphere is \n    continuous along the length of the surface.\n    '''\n    #print(r)\n    area = 4*math.pi*r**2\n    return area\ndef volume_sphere_cont(r):\n    '''\n    Write a function to find the volume of a sphere when the radius of the sphere is \n    continuous along the length of the surface.\n    '''\n    #print(r)\n    volume = (4/3)*math.pi*r**3\n    return volume\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(2*n-1))/2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(2*n - 1))//2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n*(2*n - 1)**0.5)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((n + 1) * (2 * n + 1) / 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (1 / 2 ** 0.5) * (3 * n ** 2 - 2 * n + 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # \n    return ((3*n - 1)**2 + 1)/2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((3*n**2 + n) / 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (-1/3) * (n**2 + n)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for k in dict1.keys():\n        new_dict[k] = dict1[k]\n    for k in dict2.keys():\n        if k in new_dict.keys():\n            new_dict[k].append(dict2[k])\n        else:\n            new_dict[k] = [dict2[k]]\n    for k in dict3.keys():\n        if k in new_dict.keys():\n            new_dict[k].append(dict3[k])\n        else:\n            new_dict[k] = [dict3[k]]\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            new_dict[key] = [dict1[key], dict2[key], dict3[key]]\n        elif key in dict2:\n            new_dict[key] = [dict1[key], dict2[key], 0]\n        elif key in dict3:\n            new_dict[key] = [dict1[key], 0, dict3[key]]\n        else:\n            new_dict[key] = [dict1[key], 0, 0]\n    for key in dict2:\n        if key in dict1 and key in dict3:\n            new_dict[key] = [dict1[key], dict2[key], dict3[key]]\n        elif key in dict1:\n            new_dict[key] = [dict1[key], dict2[key], 0]\n        elif key in dict3:\n            new_dict[key] = [dict1[key], 0, dict3[key]]\n        else:\n            new_dict[key] = [dict1[key], 0, 0]\n    for key in dict3:\n        if key in dict1 and key in dict2:\n            new_dict[key] = [dict1[key], dict2[key], dict3[key]]\n        elif key in dict1:\n            new_dict[key] = [dict1[key], dict2[key], 0]\n        elif key in dict2:\n            new_dict[key] = [dict1[key], 0, dict3[key]]\n        else:\n            new_dict[key] = [dict1[key], 0, 0]\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #To get all keys from dict 1\n    dict1_keys = set(dict1.keys())\n    #To get all keys from dict 2\n    dict2_keys = set(dict2.keys())\n    #To get all keys from dict 3\n    dict3_keys = set(dict3.keys())\n    #To get all keys from dict1, dict2 and dict3\n    dict_all_keys = dict1_keys | dict2_keys | dict3_keys\n    #print dict1_keys, dict2_keys, dict3_keys, dict_all_keys\n    #To get all values from dict 1\n    dict1_values = set(dict1.values())\n    #To get all values from dict 2\n    dict2_values = set(dict2.values())\n    #To get all values from dict 3\n    dict3_values = set(dict3.values())\n    #To get all values from dict1, dict2 and dict3\n    dict_all_values = dict1_values | dict2_values | dict3_values\n    #print dict1_values, dict2_values, dict3_values, dict_all_values\n    #To get all the keys from dict1, dict2 and dict3\n    dict_all_keys = list(dict_all_keys)\n    #print dict_all_keys\n    #To get all the values from dict1, dict2 and dict3\n    dict_all_values = list(dict_all_values)\n    #print dict_all_values\n    #To sort all the keys\n    dict_all_keys = sorted(dict_all_keys)\n    #print dict_all_keys\n    #To sort all the values\n    dict_all_values = sorted(dict_all_values)\n    #print dict_all_values\n    #To store the final merged dictionary\n    final_dict = {}\n    #To get all the items from dict1, dict2 and dict3\n    dict_all_items = dict1.items() | dict2.items() | dict3.items()\n    #To get all the keys and values from dict1, dict2 and dict3\n    dict_all_items = dict(dict_all_items)\n    #print dict_all_items\n    #To store the final merged dictionary in a list\n    final_dict_list = [dict_all_items[i] for i in dict_all_keys]\n    #print final_dict_list\n    #To store the items from dict1, dict2 and dict3 in a list\n    dict_all_items = [(dict_all_items[i][0],dict_all_items[i][1],dict_all_items[i][1]) for i in dict_all_keys]\n    #print dict_all_items\n    #To get all the values from final_dict_list\n    values = [dict_all_items[i][2] for i in dict_all_keys]\n    #print values\n    #To get all the keys from final_dict_list\n    keys = [dict_all_items[i][0] for i in dict_all_keys]\n    #print keys\n    #To get all the values from final_dict_list\n    values = [dict_all_items[i][2] for i in dict_all_keys]\n    #print values\n    #To get all the keys from final_dict_list\n    keys = [dict_all_items[i][0] for i in dict_all_keys]\n    #print keys\n    #To get all the values from final_dict_list\n    values = [dict_all_items[i][2] for i in dict_all_keys]\n    #print values\n    #To store the final merged dictionary in a list\n    final_dict_list = [(keys[i],values[i]) for i in range(len(keys))]\n    #print final_dict_list\n    #To store the final merged dictionary in a dictionary\n    final_dict = dict(final_dict_list)\n    #print final_dict\n    return final_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1.items()+dict2.items()+dict3.items())\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    newDict = {}\n    for key in dict1:\n        newDict[key] = dict1[key]\n    for key in dict2:\n        newDict[key] = dict2[key]\n    for key in dict3:\n        newDict[key] = dict3[key]\n    return newDict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if(type(dict1)!= type({})):\n        return None\n    if(type(dict2)!= type({})):\n        return None\n    if(type(dict3)!= type({})):\n        return None\n    result = {}\n    for key in dict1:\n        result[key] = dict1[key]\n    for key in dict2:\n        if key in result:\n            if type(result[key])!= type([]):\n                result[key] = [result[key]]\n            result[key] += dict2[key]\n        else:\n            result[key] = dict2[key]\n    for key in dict3:\n        if key in result:\n            if type(result[key])!= type([]):\n                result[key] = [result[key]]\n            result[key] += dict3[key]\n        else:\n            result[key] = dict3[key]\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict={}\n    for item in dict1:\n        new_dict[item]=dict1[item]\n    for item in dict2:\n        if item in new_dict:\n            new_dict[item]=new_dict[item]+dict2[item]\n        else:\n            new_dict[item]=dict2[item]\n    for item in dict3:\n        if item in new_dict:\n            new_dict[item]=new_dict[item]+dict3[item]\n        else:\n            new_dict[item]=dict3[item]\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict1:\n        if key in dict2:\n            if key in dict3:\n                if dict1[key]==dict2[key]:\n                    if dict1[key]==dict3[key]:\n                        pass\n                    else:\n                        pass\n                else:\n                    if dict3[key]!=dict1[key]:\n                        if dict2[key]!=dict3[key]:\n                            pass\n                        else:\n                            pass\n                if dict1[key]!=dict2[key]:\n                    if dict1[key]!=dict3[key]:\n                        pass\n                    else:\n                        pass\n                if dict2[key]!=dict3[key]:\n                    pass\n                else:\n                    pass\n            else:\n                if dict3[key]!=dict1[key]:\n                    pass\n                else:\n                    pass\n        else:\n            pass\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict = {}\n    for key in dict1:\n        dict[key] = dict1[key]\n    for key in dict2:\n        dict[key] = dict2[key]\n    for key in dict3:\n        dict[key] = dict3[key]\n    return dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    return freq_dict\ndef get_tuple_list(list1):\n    '''\n    Write a function to get a list of tuples. Each tuple will contain a integer, a string, and a list of tuples. \n    Each tuple in the list will have the format (integer, string, [tuples]). The first element in each tuple will be \n    an integer, the second element will be a string, and the third element will be a list of tuples.\n    '''\n    tuple_list = []\n    for i in list1:\n        tuple_list.append((i,list1[i],get_tuple_list(i)))\n    return tuple_list\ndef create_tuple(element,key):\n    '''\n    Write a function to create tuples. The tuples will have elements based on the keys. \n    For example, if you pass 'int' for the key, then the tuples will have integer elements.\n    If you pass'str' for the key, then the tuples will have string elements.\n    If you pass 'tuple' for the key, then the tuples will have tuples. \n    '''\n    if key == 'int':\n        return (element,key)\n    elif key =='str':\n        return (element,key)\n    elif key == 'tuple':\n        return (element,key)\n    else:\n        return (element,key,[])\ndef list_tuple(list1):\n    '''\n    Write a function to create a list of tuples. Each tuple will contain a list of tuples. \n    Each list in the list will have the format (list of tuples).\n    '''\n    tuple_list = []\n    for i in list1:\n        tuple_list.append((list1[i],i))\n    return tuple_list\ndef dict_tuples(list1):\n    '''\n    Write a function to create a dictionary of tuples. The keys will be the values of the tuples. \n    The value of each key will be the list of tuples that contain the key. \n    '''\n    return dict(list_tuple(list1))\ndef tuples_dict(list1):\n    '''\n    Write a function to create a dictionary of tuples. The keys will be the values of the tuples. \n    The value of each key will be the list of tuples that contain the key. \n    '''\n    tuple_list = []\n    for i in list1:\n        tuple_list.append((i,list1[i]))\n    return dict(tuple_list)\ndef dict_tuples(list1):\n    '''\n    Write a function to create a dictionary of tuples. The keys will be the values of the tuples. \n    The value of each key will be the list of tuples that contain the key. \n    '''\n    return dict(list_tuple(list1))\ndef flatten(list1):\n    '''\n    Write a function to flatten a list of tuples into a single list. \n    For example, (1,2),(3,4) would become [1,2,3,4].\n    '''\n    flattened = []\n    for i in list1:\n        flattened += i\n    return flattened\ndef d_list(list1):\n    '''\n    Write a function to get a list of dictionaries. Each dictionary will have two keys, 'key' and 'value'.\n    If you pass a dictionary to the function, the function will return the value of the key 'value'. If \n    you pass a list of dictionaries to the function, the function will return a list of the values for the key 'value'.\n    '''\n    if isinstance(list1,dict):\n        return list1['value']\n    else:\n        lst = []\n        for i in list1:\n            lst.append(i['value'])\n        return lst\ndef all_keys(list1):\n    '''\n    Write a function to get a list of all keys from dictionaries. If you pass a list of dictionaries to the function,\n    the function will return a list of all the keys in the dictionaries.\n    '''\n    lst = []\n    for i in list1:\n        lst += i.keys()\n    return lst\ndef d_list(list1):\n    '''\n    Write a function to get a list of dictionaries. Each dictionary will have two keys, 'key' and 'value'.\n    If you pass a dictionary to the function, the function will return the value of the key 'value'. If \n    you pass a list of dictionaries to the function, the function will return a list of the values for the key 'value'.\n    '''\n    if isinstance(list1,dict):\n        return list1['value']\n    else:\n        lst = []\n        for i in list1:\n            lst.append(i['value'])\n        return lst\ndef all_keys(list1):\n    '''\n    Write a function to get a list of all keys from dictionaries. If you pass a list of dictionaries to the function,\n    the function will return a list of all the keys in the dictionaries.\n    '''\n    lst = []\n    for i in list1:\n        lst += i.keys()\n    return lst\ndef all_values(list1):\n    '''\n    Write a function to get a list of all values from dictionaries. If you pass a list of dictionaries to the function,\n    the function will return a list of all the values for the key 'value'.\n    '''\n    lst = []\n    for i in list1:\n        lst += i.values()\n    return lst\ndef all_values(list1):\n    '''\n    Write a function to get a list of all values from dictionaries. If you pass a list of dictionaries to the function,\n    the function will return a list of all the values for the key 'value'.\n    '''\n    lst = []\n    for i in list1:\n        lst += i.values()\n    return lst\ndef all_values(list1):\n    '''\n    Write a function to get a list of all values from dictionaries. If you pass a list of dictionaries to the function,\n    the function will return a list of all the values for the key 'value'.\n    '''\n    lst = []\n    for i in list1:\n        lst += i.values()\n    return lst\ndef keys_values_dicts(list1):\n    '''\n    Write a function to get a dictionary of values and a dictionary of keys. \n    The function will return a dictionary with the values as the keys and the keys as the values. \n    '''\n    lst = []\n    for i in list1:\n        lst.append(i['value'])\n    return collections.Counter(lst),dict(collections.Counter(lst))\ndef keys_values_dicts(list1):\n    '''\n    Write a function to get a dictionary of values and a dictionary of keys. \n    The function will return a dictionary with the values as the keys and the keys as the values. \n    '''\n    lst = []\n    for i in list1:\n        lst.append(i['value'])\n    return collections.Counter(lst),dict(collections.Counter(lst))\ndef keys_values_dicts(list1):\n    '''\n    Write a function to get a dictionary of values and a dictionary of keys. \n    The function will return a dictionary with the values as the keys and the keys as the values. \n    '''\n    lst = []\n    for i in list1:\n        lst.append(i['value'])\n    return collections.Counter(lst),dict(collections.Counter(lst))\ndef keys_values_dicts(list1):\n    '''\n    Write a function to get a dictionary of values and a dictionary of keys. \n    The function will return a dictionary with the values as the keys and the keys as the values. \n    '''\n    lst = []\n    for i in list1:\n        lst.append(i['value'])\n    return collections.Counter(lst),dict(collections.Counter(lst)"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list1 = sorted(list1)\n    count_dict = collections.Counter(list1)\n    print(count_dict)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic={}\n    for i in list1:\n        if i not in dic:\n            dic[i]=list1.count(i)\n    return dic\ndef copy_values(dic):\n    '''\n    Write a function to copy all the values of a dictionary into a new dictionary and return that new dictionary.\n    '''\n    dic2={}\n    for i in dic:\n        dic2[i]=dic[i]\n    return dic2\ndef change_dict(dic):\n    '''\n    Write a function to change all the values of a dictionary into a new dictionary and return that new dictionary.\n    '''\n    dic2={}\n    for i in dic:\n        dic2[i]=i+1\n    return dic2\ndef change_values(dic):\n    '''\n    Write a function to change all the values of a dictionary into a new dictionary and return that new dictionary.\n    '''\n    dic2={}\n    for i in dic:\n        dic2[i]=i-1\n    return dic2\ndef sort_dict(dic):\n    '''\n    Write a function to sort a dictionary by its values and return that new dictionary.\n    '''\n    return collections.OrderedDict(sorted(dic.items(), key=lambda t: t[1]))\ndef keys_values_items(dic):\n    '''\n    Write a function to return the keys, values, and items of a dictionary as three separate lists.\n    '''\n    key,val,item=list(),list(),list()\n    for i in dic:\n        key.append(i)\n        val.append(dic[i])\n        item.append((i,dic[i]))\n    return key,val,item\ndef dict_to_list(dic):\n    '''\n    Write a function to convert a dictionary into a list of tuples, with each tuple being a key/value pair.\n    '''\n    return [(i,dic[i]) for i in dic]\ndef word_count(s):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    return len(s.split())\ndef word_count2(s):\n    '''\n    Write a function to count the number of words in a string, using a dictionary.\n    '''\n    dic={}\n    for i in s.split():\n        dic[i]=1+dic.get(i,0)\n    return dic\ndef word_count_freq(s):\n    '''\n    Write a function to count the number of words in a string, and return a dictionary of word/frequency pairs.\n    '''\n    dic={}\n    for i in s.split():\n        if i not in dic:\n            dic[i]=1\n        else:\n            dic[i]+=1\n    return dic\ndef find_min(list1):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    return min(list1)\ndef find_max(list1):\n    '''\n    Write a function to find the maximum value in a list.\n    '''\n    return max(list1)\ndef find_min_max(list1):\n    '''\n    Write a function to find the minimum and maximum values in a list.\n    '''\n    return min(list1),max(list1)\ndef count_words(s):\n    '''\n    Write a function to count the number of characters (not spaces) in a string.\n    '''\n    return len(s)-s.count(' ')\ndef count_words2(s):\n    '''\n    Write a function to count the number of characters (not spaces) in a string, using a dictionary.\n    '''\n    dic={}\n    for i in s:\n        if i not in dic:\n            dic[i]=1\n        else:\n            dic[i]+=1\n    return dic\ndef word_counter(s):\n    '''\n    Write a function to count the number of words in a string, and return that value.\n    '''\n    return len(s.split())\ndef word_counter2(s):\n    '''\n    Write a function to count the number of words in a string, using a dictionary.\n    '''\n    dic={}\n    for i in s.split():\n        if i not in dic:\n            dic[i]=1\n        else:\n            dic[i]+=1\n    return dic\ndef word_counter3(s):\n    '''\n    Write a function to count the number of words in a string, using a dictionary and incrementing the value by one each time a word appears.\n    '''\n    dic={}\n    for i in s.split():\n        dic[i]=dic.get(i,0)+1\n    return dic\ndef word_counter4(s):\n    '''\n    Write a function to count the number of words in a string, using a dictionary and incrementing the value by one each time a word appears.\n    '''\n    dic={}\n    for i in s.split():\n        dic[i]=dic.get(i,0)+1\n    return dic\ndef get_word(s):\n    '''\n    Write a function to get a word from a string, return that word.\n    '''\n    return s.split()[0]\ndef get_words(s):\n    '''\n    Write a function to get all the words in a string, and return them as a list.\n    '''\n    return s.split()\ndef palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome, and return that answer.\n    '''\n    return s==s[::-1]\ndef palindrome2(s):\n    '''\n    Write a function to check if a string is a palindrome, using a dictionary.\n    '''\n    dic={}\n    for i in s:\n        if i not in dic:\n            dic[i]=1\n        else:\n            dic[i]+=1\n    return sum(dic.values())//2==len(dic)\ndef palindrome3(s):\n    '''\n    Write a function to check if a string is a palindrome, using a dictionary and incrementing the value by one each time a word appears.\n    '''\n    dic={}\n    for i in s:\n        dic[i]=dic.get(i,0)+1\n    return sum(dic.values())//2==len(dic)\ndef palindrome4(s):\n    '''\n    Write a function to check if a string is a palindrome, using a dictionary and incrementing the value by one each time a word appears.\n    '''\n    dic={}\n    for i in s:\n        dic[i]=dic.get(i,0)+1\n    return sum(dic.values())//2==len(dic)\ndef palindrome5(s):\n    '''\n    Write a function to check if a string is a palindrome, using a dictionary and incrementing the value by one each time a word appears.\n    '''\n    dic={}\n    for i in s:\n        dic[i]=dic.get(i,0)+1\n    return sum(dic.values())//2==len(dic)\ndef palindrome6(s):\n    '''\n    Write a function to check if a string is a palindrome, using a dictionary and incrementing the value by one each time a word appears.\n    '''\n    dic={}\n    for i in s:\n        dic[i]=dic.get(i,0)+1\n    return sum(dic.values())//2==len(dic)\ndef word_counter_dict(s):\n    '''\n    Write a function to count the number of words in a string, and return a dictionary of word/frequency pairs.\n    '''\n    dic={}\n    for i in s.split():\n        if i not in dic:\n            dic[i]=1\n        else:\n            dic[i]+=1\n    return dic\ndef word_counter_dict2(s):\n    '''\n    Write a function to count the number of words in a string, using "
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] = dict1[i]+1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for item in list1:\n        d[item] = d.get(item,0) + 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for ele in list1:\n        if ele in freq_dict:\n            freq_dict[ele] += 1\n        else:\n            freq_dict[ele] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d={}\n    for i in list1:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_d = {}\n    for item in list1:\n        if item in freq_d:\n            freq_d[item] += 1\n        else:\n            freq_d[item] = 1\n    return freq_d\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    a, b = -1, 2\n    while b <= N:\n        a, b = b, b + 1\n    return a\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = float(N)\n    if n == 0:\n        return 0\n    if n > 0:\n        if abs(n) == 1:\n            return 0\n    return math.floor(n) if n!= 0 else 0\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 2\n    if n == 7:\n        return 1\n    if n == 8:\n        return 2\n    if n == 9:\n        return 3\n    if n == 10:\n        return 4\n    if n == 11:\n        return 3\n    if n == 12:\n        return 4\n    if n == 13:\n        return 3\n    if n == 14:\n        return 4\n    if n == 15:\n        return 5\n    if n == 16:\n        return 4\n    if n == 17:\n        return 5\n    if n == 18:\n        return 4\n    if n == 19:\n        return 5\n    if n == 20:\n        return 5\n    if n == 21:\n        return 6\n    if n == 22:\n        return 6\n    if n == 23:\n        return 5\n    if n == 24:\n        return 6\n    if n == 25:\n        return 7\n    if n == 26:\n        return 6\n    if n == 27:\n        return 7\n    if n == 28:\n        return 7\n    if n == 29:\n        return 7\n    if n == 30:\n        return 8\n    if n == 31:\n        return 7\n    if n == 32:\n        return 8\n    if n == 33:\n        return 7\n    if n == 34:\n        return 8\n    if n == 35:\n        return 8\n    if n == 36:\n        return 9\n    if n == 37:\n        return 8\n    if n == 38:\n        return 9\n    if n == 39:\n        return 8\n    if n == 40:\n        return 9\n    if n == 41:\n        return 9\n    if n == 42:\n        return 10\n    if n == 43:\n        return 9\n    if n == 44:\n        return 10\n    if n == 45:\n        return 10\n    if n == 46:\n        return 10\n    if n == 47:\n        return 10\n    if n == 48:\n        return 11\n    if n == 49:\n        return 10\n    if n == 50:\n        return 11\n    if n == 51:\n        return 10\n    if n == 52:\n        return 11\n    if n == 53:\n        return 10\n    if n == 54:\n        return 11\n    if n == 55:\n        return 11\n    if n == 56:\n        return 11\n    if n == 57:\n        return 12\n    if n == 58:\n        return 11\n    if n == 59:\n        return 12\n    if n == 60:\n        return 11\n    if n == 61:\n        return 12\n    if n == 62:\n        return 11\n    if n == 63:\n        return 12\n    if n == 64:\n        return 13\n    if n == 65:\n        return 12\n    if n == 66:\n        return 13\n    if n == 67:\n        return 12\n    if n == 68:\n        return 13\n    if n == 69:\n        return 12\n    if n == 70:\n        return 13\n    if n == 71:\n        return 13\n    if n == 72:\n        return 14\n    if n == 73:\n        return 13\n    if n == 74:\n        return 14\n    if n == 75:\n        return 14\n    if n == 76:\n        return 15\n    if n == 77:\n        return 14\n    if n == 78:\n        return 15\n    if n == 79:\n        return 15\n    if n == 80:\n        return 16\n    if n == 81:\n        return 15\n    if n == 82:\n        return 16\n    if n == 83:\n        return 16\n    if n == 84:\n        return 17\n    if n == 85:\n        return 16\n    if n == 86:\n        return 17\n    if n == 87:\n        return 16\n    if n == 88:\n        return 17\n    if n == 89:\n        return 17\n    if n == 90:\n        return 17\n    if n == 91:\n        return 18\n    if n == 92:\n        return 17\n    if n == 93:\n        return 18\n    if n == 94:\n        return 18\n    if n == 95:\n        return 19\n    if n == 96:\n        return 19\n    if n == 97:\n        return 19\n    if n == 98:\n        return 19\n    if n == 99:\n        return 19\n    if n == 100:\n        return 19\n    if n == 101:\n        return 19\n    if n == 102:\n        return 19\n    if n == 103:\n        return 19\n    if n == 104:\n        return 19\n    if n == 105:\n        return 19\n    if n == 106:\n        return 19\n    if n == 107:\n        return 19\n    if n == 108:\n        return 19\n    if n == 109:\n        return 19\n    if n == 110:\n        return 19\n    if n == 111:\n        return 19\n    if n == 112:\n        return 19\n    if n == 113:\n        return 19\n    if n == 114:\n        return 19\n    if n == 115:\n        return 19\n    if n == 116:\n        return 19\n    if n == 117:\n        return 19\n    if n == 118:\n        return 19\n    if n == 119:\n        return 19\n    if n == 120:\n        return 19\n    if n == 121:\n        return 19\n    if n == 122:\n        return 19\n    if n == 123:\n        return 19\n    if n == 124:\n        return 19\n    if n == 125:\n        return 19\n    if n == 126:\n        return 19\n    if n == 127:\n        return 19\n    if n == 128:\n        return 19\n    if n == 129:\n        return 19\n    if n == 130:\n        return 19\n    if n == 131:\n        return 19\n    if n == 132:\n        return 19\n    if n == 133:\n        return 19\n    if n == 134:\n        return 19\n    if n == 135:\n        return 19\n    if n == 136:\n        return 19\n    if n == 137:\n        return 19\n    if n == 138:\n        return 19\n    if n == 139:\n        return 19\n    if n == 140:\n        return 19\n    if n == 141:\n        return 19\n    if n == 142:\n        return 19\n    if n == 143:\n        return 19\n    if n == 144:\n        return 19\n    if n == 145:\n        return 19\n    if n == 146:\n        return 19\n    if n == 147:\n        return 19\n    if n == 148:\n        return 19\n    if n == 149:\n        return 19\n    if n == 150:\n        return 19\n    if n == 151:\n        return 19\n    if n == 152:\n        return 19\n    if n == 153:\n        return 19\n    if n == 154:\n        return 19\n    if n == 155:\n        return 19\n    if n == 156:\n        return 19\n    if n == 157:\n        return 19\n    if n == 158:\n        return 19\n    if n == 159:\n        return 19\n    if n == 160:\n        return 19\n    if n == 161:\n        return 19\n    if n == 162:\n        return 19\n    if n == 163:\n        return 19\n    if n == 164:\n        return 19\n    if n == 165:\n        return 19\n    if n == 166:\n        return 19\n    if n == 167:\n        return 19\n    if n == 168:\n        return 19\n    if n == 169:\n        return 19\n    if n == 170:\n        return 19\n    if n == 171:\n        return 19\n    if n == 172:\n        return 19\n    if n == 173:\n        return 19\n    if n == 174:\n        return 19\n    if n == 175:\n        return 19\n    if n == 176:\n        return 19\n    if n == 177:\n        return 19\n    if n == 178:\n        return 19\n    if n == 179:\n        return 19\n    if n == 180:\n        return 19\n    if n == 181:\n        return 19\n    if n == 182:\n        return 19\n    if n == 18"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = 1\n    diff = 999999999\n    while num < N:\n        diff = min(diff, N - num)\n        num *= 10\n    return diff\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 4:\n        return N - 1\n    else:\n        num = N\n        count = 0\n        while num > 4:\n            num = num - 5\n            count = count + 1\n        return count + 5 - N\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N % 2 == 0:\n        return N - 1\n    return N - 2\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    d = abs(N-1)\n    for i in xrange(N-1,0,-1):\n        d = min(d,abs(N-i))\n    return d\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    ans = N\n    N = abs(N)\n    if N == 0:\n        return N\n    for i in xrange(N):\n        if i < N - i:\n            ans = i\n            break\n    return ans\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #We could use a binary search if N is in a sorted array\n    #O(log(n)) solution\n    #log(n) / log(k) = log(n) / log(k)\n    #log(n) / log(k) = log(n) / log(2)\n    #O(log(n))\n    #This is still O(n) time\n    \n    if N < 2:\n        return 1\n    if N == 2:\n        return 2\n    if N == 3:\n        return 2\n    if N == 4:\n        return 3\n    \n    #O(n) time\n    #O(1) space\n    \n    #O(n) time\n    #O(1) space\n    \n    closest_num = 0\n    for i in range(N - 1, 0, -1):\n        if N - i <= closest_num:\n            return N - i\n        else:\n            closest_num = N - i\n        \n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def search(n,L):\n        left, right = 0, len(L)-1\n        while left < right:\n            mid = (left + right) / 2\n            if L[mid] == n:\n                return mid\n            elif L[mid] > n:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    if N == 1:\n        return -1\n    a = int(math.sqrt(N))\n    b = a + 1\n    l = [i for i in range(a,b)]\n    return l[search(N,l)]"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > longest_word:\n            longest_word = len(list1[i])\n    return longest_word\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    lengths = []\n    for string in list1:\n        lengths.append(len(string))\n    return max(lengths)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest=0\n    for i in list1:\n        if len(i)>longest:\n            longest=len(i)\n    return longest\n    \n    \ndef get_word_num(list1):\n    '''\n    Write a python function to find the number of words in a sentence.\n    '''\n    length=len_log(list1)\n    num=0\n    for i in range(0,len(list1)):\n        if len(list1[i])==length:\n            num+=1\n    return num\n    \ndef get_longest_word(list1):\n    '''\n    Write a python function to find the longest word in a sentence.\n    '''\n    longest=0\n    for i in range(0,len(list1)):\n        if len(list1[i])>longest:\n            longest=len(list1[i])\n    return longest\n    \n    \ndef get_total_num(list1):\n    '''\n    Write a python function to find the total number of characters in all words of a sentence.\n    '''\n    num=0\n    for i in range(0,len(list1)):\n        num+=len(list1[i])\n    return num\n    \n    \ndef get_avg_char(list1):\n    '''\n    Write a python function to find the average number of characters per word.\n    '''\n    num=get_total_num(list1)/get_word_num(list1)\n    return num\n    \n    \ndef get_avg_len_word(list1):\n    '''\n    Write a python function to find the average length of words.\n    '''\n    total_len=get_total_num(list1)\n    word_num=get_word_num(list1)\n    return total_len/word_num\n    \n    \ndef get_most_common_char(list1):\n    '''\n    Write a python function to find the most common character in a sentence.\n    '''\n    longest=get_longest_word(list1)\n    common_char={}\n    for i in range(0,longest):\n        for j in range(0,len(list1)):\n            if i<len(list1[j]):\n                if list1[j][i] not in common_char:\n                    common_char[list1[j][i]]=1\n                else:\n                    common_char[list1[j][i]]+=1\n    max_char=0\n    max_char_char=''\n    for char,num in common_char.iteritems():\n        if num>max_char:\n            max_char=num\n            max_char_char=char\n    return max_char_char\n    \n    \ndef get_lowest_char(list1):\n    '''\n    Write a python function to find the lowest character in a sentence.\n    '''\n    min_char=''\n    for char in list1[0]:\n        min_char=char\n        break\n    for i in range(1,len(list1)):\n        for j in range(0,len(list1[i])):\n            if list1[i][j]<min_char:\n                min_char=list1[i][j]\n    return min_char\n    \n    \ndef get_word_vowel_ratio(list1):\n    '''\n    Write a python function to find the ratio of vowels to consonants in a sentence.\n    '''\n    vowels=0\n    consonants=0\n    for char in list1[0]:\n        if char in 'aeiouAEIOU':\n            vowels+=1\n        else:\n            consonants+=1\n    ratio=vowels/float(consonants)\n    return ratio\n    \n    \ndef get_word_consonant_ratio(list1):\n    '''\n    Write a python function to find the ratio of consonants to vowels in a sentence.\n    '''\n    vowels=0\n    consonants=0\n    for char in list1[0]:\n        if char in 'aeiouAEIOU':\n            vowels+=1\n        else:\n            consonants+=1\n    ratio=consonants/float(vowels)\n    return ratio\n    \n    \ndef get_sentence_num(list1):\n    '''\n    Write a python function to find the number of sentences in a sentence.\n    '''\n    total=0\n    for i in range(0,len(list1)):\n        if '?' in list1[i] or '!' in list1[i] or '.' in list1[i]:\n            total+=1\n    return total\n    \n    \ndef get_sentence_length(list1):\n    '''\n    Write a python function to find the length of sentences.\n    '''\n    longest=0\n    for i in range(0,len(list1)):\n        if len(list1[i])>longest:\n            longest=len(list1[i])\n    return longest\n    \n    \ndef get_avg_sentence_length(list1):\n    '''\n    Write a python function to find the average length of sentences.\n    '''\n    total_len=get_total_num(list1)\n    sentence_num=get_sentence_num(list1)\n    return total_len/sentence_num\n    \n    \ndef get_most_common_sentence(list1):\n    '''\n    Write a python function to find the most common sentence in a paragraph.\n    '''\n    longest=get_sentence_length(list1)\n    common_sentence={}\n    for i in range(0,longest):\n        for j in range(0,len(list1)):\n            if i<len(list1[j]):\n                if list1[j][i] not in common_sentence:\n                    common_sentence[list1[j][i]]=1\n                else:\n                    common_sentence[list1[j][i]]+=1\n    max_sentence=''\n    max_sentence_num=0\n    for sentence,num in common_sentence.iteritems():\n        if num>max_sentence_num:\n            max_sentence_num=num\n            max_sentence=sentence\n    return max_sentence\n    \n    \ndef get_first_person_pronouns(list1):\n    '''\n    Write a python function to find the number of first person pronouns in a sentence.\n    '''\n    first_person_pronouns=0\n    for i in range(0,len(list1)):\n        if 'I' in list1[i]:\n            first_person_pronouns+=1\n    return first_person_pronouns\n    \n    \ndef get_second_person_pronouns(list1):\n    '''\n    Write a python function to find the number of second person pronouns in a sentence.\n    '''\n    second_person_pronouns=0\n    for i in range(0,len(list1)):\n        if 'you' in list1[i]:\n            second_person_pronouns+=1\n    return second_person_pronouns\n    \n    \ndef get_third_person_pronouns(list1):\n    '''\n    Write a python function to find the number of third person pronouns in a sentence.\n    '''\n    third_person_pronouns=0\n    for i in range(0,len(list1)):\n        if 'he' in list1[i]:\n            third_person_pronouns+=1\n    return third_person_pronouns\n    \n    \ndef get_question_pronouns(list1):\n    '''\n    Write a python function to find the number of question pronouns in a sentence.\n    '''\n    question_pronouns=0\n    for i in range(0,len(list1)):\n        if '?' in list1[i]:\n            question_pronouns+=1\n    return question_pronouns\n    \n    \ndef get_exclamation_pronouns(list1):\n    '''\n    Write a python function to find the number of exclamation pronouns in a sentence.\n    '''\n    exclamation_pronouns=0\n    for i in range(0,len(list1)):\n        if '!' in list1"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1,key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len=0\n    for word in list1:\n        if len(word)>max_len:\n            max_len=len(word)\n    return max_len\n    \ndef longest_word(list1):\n    '''\n    Write a python function to find the longest word.\n    '''\n    max_len=len_log(list1)\n    for word in list1:\n        if len(word)==max_len:\n            return word\n    \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the sum of the list.\n    '''\n    sum_value=0\n    for i in list1:\n        sum_value=sum_value+i\n    return sum_value\n    \ndef min_of_list(list1):\n    '''\n    Write a python function to find the minimum value of the list.\n    '''\n    min_value=list1[0]\n    for i in list1:\n        if i<min_value:\n            min_value=i\n    return min_value\n    \ndef max_of_list(list1):\n    '''\n    Write a python function to find the maximum value of the list.\n    '''\n    max_value=list1[0]\n    for i in list1:\n        if i>max_value:\n            max_value=i\n    return max_value\n    \ndef smallest_diff(list1,list2):\n    '''\n    Write a python function to find the smallest difference between the two list.\n    '''\n    min_value=min_of_list(list1)-min_of_list(list2)\n    return min_value\n    \ndef largest_diff(list1,list2):\n    '''\n    Write a python function to find the largest difference between the two list.\n    '''\n    max_value=max_of_list(list1)-max_of_list(list2)\n    return max_value\n    \ndef even_or_odd(list1):\n    '''\n    Write a python function to find the count of even and odd numbers in the list.\n    '''\n    odd_count=0\n    even_count=0\n    for i in list1:\n        if i%2==0:\n            even_count=even_count+1\n        else:\n            odd_count=odd_count+1\n    return even_count,odd_count\n    \ndef even_or_odd_add(list1):\n    '''\n    Write a python function to find the sum of all the even and odd numbers in the list.\n    '''\n    even_sum=0\n    odd_sum=0\n    for i in list1:\n        if i%2==0:\n            even_sum=even_sum+i\n        else:\n            odd_sum=odd_sum+i\n    return even_sum,odd_sum\n    \ndef even_or_odd_product(list1):\n    '''\n    Write a python function to find the product of all the even and odd numbers in the list.\n    '''\n    product_even=1\n    product_odd=1\n    for i in list1:\n        if i%2==0:\n            product_even=product_even*i\n        else:\n            product_odd=product_odd*i\n    return product_even,product_odd\n    \ndef even_or_odd_product_add(list1):\n    '''\n    Write a python function to find the sum of all the even and odd numbers in the list.\n    '''\n    product_even_sum=0\n    product_odd_sum=0\n    for i in list1:\n        if i%2==0:\n            product_even_sum=product_even_sum+i\n        else:\n            product_odd_sum=product_odd_sum+i\n    return product_even_sum,product_odd_sum\n    \ndef sum_of_all_digits(list1):\n    '''\n    Write a python function to find the sum of all the digits in the list.\n    '''\n    sum_value=0\n    for i in list1:\n        sum_value=sum_value+i\n    return sum_value\n    \ndef sum_of_digits(list1):\n    '''\n    Write a python function to find the sum of all the digits in the list.\n    '''\n    sum_value=0\n    for i in list1:\n        sum_value=sum_value+i\n        while i>0:\n            i=i/10\n            sum_value=sum_value+i\n    return sum_value\n    \ndef sum_of_digits_add(list1):\n    '''\n    Write a python function to find the sum of all the digits in the list.\n    '''\n    sum_value=0\n    for i in list1:\n        sum_value=sum_value+i\n    return sum_value\n    \ndef sum_of_digits_product(list1):\n    '''\n    Write a python function to find the product of all the digits in the list.\n    '''\n    product_value=1\n    for i in list1:\n        product_value=product_value*i\n    return product_value\n    \ndef sum_of_digits_product_add(list1):\n    '''\n    Write a python function to find the product of all the digits in the list.\n    '''\n    product_value=1\n    for i in list1:\n        product_value=product_value*i\n    return product_value\n    \ndef biggest_diff(list1,list2):\n    '''\n    Write a python function to find the biggest difference between the two list.\n    '''\n    max_value=max_of_list(list1)-max_of_list(list2)\n    return max_value\n    \ndef smallest_diff_add(list1,list2):\n    '''\n    Write a python function to find the smallest difference between the two list.\n    '''\n    min_value=min_of_list(list1)-min_of_list(list2)\n    return min_value\n    \ndef smallest_diff_product(list1,list2):\n    '''\n    Write a python function to find the smallest difference between the two list.\n    '''\n    min_value=min_of_list(list1)*min_of_list(list2)\n    return min_value\n    \ndef smallest_diff_product_add(list1,list2):\n    '''\n    Write a python function to find the smallest difference between the two list.\n    '''\n    min_value=min_of_list(list1)*min_of_list(list2)\n    return min_value\n    \ndef longest_even_and_odd(list1):\n    '''\n    Write a python function to find the longest even and odd number in the list.\n    '''\n    max_len_even=0\n    max_len_odd=0\n    for i in list1:\n        if i%2==0:\n            if len(str(i))>max_len_even:\n                max_len_even=len(str(i))\n        else:\n            if len(str(i))>max_len_odd:\n                max_len_odd=len(str(i))\n    return max_len_even,max_len_odd\n    \ndef longest_even_and_odd_add(list1):\n    '''\n    Write a python function to find the longest even and odd number in the list.\n    '''\n    max_len_even=0\n    max_len_odd=0\n    for i in list1:\n        if i%2==0:\n            if len(str(i))>max_len_even:\n                max_len_even=len(str(i))\n        else:\n            if len(str(i))>max_len_odd:\n                max_len_odd=len(str(i))\n    return max_len_even,max_len_odd\n    \ndef longest_even_and_odd_product(list1):\n    '''\n    Write a python function to find the longest even and odd number in the list.\n    '''\n    max_len_even=0\n    max_len_odd=0\n    for i in list1:\n        if i%2==0:\n            if len(str(i))>max_len_even:\n                max_len_even=len(str"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(len(i))\n    return max(list2)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max([len(x) for x in list1])\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    str1 = ''\n    for i in list1:\n        str1 = str1 +'' + i\n    return len(str1)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_length = 0\n    for word in list1:\n        if len(word) > longest_length:\n            longest_length = len(word)\n    print(\"Longest word length is: \", longest_length)\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for index, str2 in enumerate(str1):\n        if str2 == sub_str:\n            return index\n    return -1\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        print \"No such substring found\"\n    else:\n        print \"Substring found\"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    for i in range(len(str1) - len(sub_str) + 1):\n        if sub_str == str1[i:i+len(sub_str)]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_of_strings = ['a', 'b', 'c', 'd', 'e']\n    for item in list_of_strings:\n        if sub_str in item:\n            print item\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in x for x in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_index_list = []\n    if sub_str in str1:\n        sub_str_index = str1.find(sub_str)\n        sub_str_index_list.append(sub_str_index)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if len(str(n)) % 2 == 0: \n        return 'False'\n    else:\n        return 'True'\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    digits = []\n    while n: \n        digits.append(n % 10)\n        n = n // 10\n    return digits == digits[::-1]\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    seq = str(n)\n    prev = seq[0]\n    for i in range(1,len(seq)):\n        if prev > seq[i]:\n            return False\n        prev = seq[i]\n    return True\n    \n    \ndef is_undulating2(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    seq = str(n)\n    prev = seq[0]\n    return all(seq[i] >= seq[i-1] for i in range(1,len(seq)))\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    l = len(str(n))\n    s = str(n)\n    s1 = s[1:]\n    s2 = s[:-1]\n    if int(s1) - int(s2) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    i = 1\n    arr = [0]\n    while True: \n        tmp = arr[i] + arr[i-1]\n        if tmp == n: \n            return True\n        if tmp > n:\n            return False\n        arr.append(tmp)\n        i += 1\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 100: \n        return False\n    n_str = str(n)\n    for i in range(len(n_str)):\n        if i == 0:\n            continue\n        if n_str[i] == n_str[i-1]:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    k = len(n)\n    flag = False\n    for i in range(1,k/2):\n        if int(n[i]) < int(n[k-i-1]):\n            flag = True\n            break\n    if not flag:\n        print \"Not undulating\"\n    else:\n        print \"Undulating\"\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in range(len(s)-1): \n        if int(s[i]) < int(s[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return True\n    digits = [int(i) for i in str(n)]\n    for i in range(1, len(digits)):\n        if digits[i] < digits[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    k = 0 \n    while n > 0: \n        d = n % 10\n        if d & 1 == 1: \n            k += 1\n        n //= 10\n    return k == 1 \n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return (a**b)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b%2 == 0:\n        return power(a,b/2) * power(a,b/2)\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b<0:\n        return 1/power(a,-b)\n    else:\n        return power(a*a,b/2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b>0:\n        return a*power(a,b-1)\n    elif b<0:\n        return (1/a)*power(a,-b)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if (b==1):\n        return a\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b>1:\n        return a*power(a,b-1)\n    if b<1:\n        return 1/power(a,b+1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b % 2 == 0:\n        return power(a,b//2)**2\n    else:\n        return a*power(a,b//2)*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a,b/2) * power(a,b/2)\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a * power(a, b-1)\n    else:\n        return 1 / (a * power(a, -b))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = None\n    smallest_index = None\n    for index, value in enumerate(test_list):\n        if smallest is None or value[1] < smallest:\n            smallest = value[1]\n            smallest_index = index\n    return smallest_index\ndef all_equal(a):\n    '''\n    Given a list, write a function that returns True if all the elements of the list are equal.\n    '''\n    result = True\n    for i in a:\n        if i!= a[0]:\n            result = False\n    return result\ndef nearest_middle(a):\n    '''\n    Given a list, write a function that returns the smallest index such that when i < index < j, the absolute difference between the element at index and the element at the middle is minimal.\n    '''\n    start, end = 0, len(a)-1\n    while start < end:\n        middle = (start + end) / 2\n        if abs(a[start] - a[middle]) < abs(a[start] - a[end]):\n            end = middle\n        else:\n            start = middle\n    return start\ndef find_recursive(a, target):\n    '''\n    Given a list of numbers, and a target number, write a recursive function that returns True if the target is in the list, and False otherwise.\n    '''\n    return a[0] == target or find_recursive(a[1:], target)\ndef find_linear(a, target):\n    '''\n    Given a list of numbers, and a target number, write a linear function that returns True if the target is in the list, and False otherwise.\n    '''\n    for index, value in enumerate(a):\n        if value == target:\n            return index\n    return False\ndef list_of_squares(start, end):\n    '''\n    Given two integers, write a function that returns a list of the first n integers starting from the integer n to the integer 2n.\n    '''\n    squares = []\n    for num in range(start, end + 1):\n        squares.append(num**2)\n    return squares\ndef max_of_four(a, b, c, d):\n    '''\n    Given four integers, write a function that returns the maximum of the four integers.\n    '''\n    return max(a, max(b, max(c, d)))\ndef dict_in_list_check(a, b, c):\n    '''\n    Given three dictionaries and a list, write a function that returns True if the list is a subset of the dictionaries.\n    '''\n    return b in a and c in a\ndef get_index_recursive(a, target):\n    '''\n    Given a list of numbers, and a target number, write a recursive function that returns the index of the target number in the list.\n    '''\n    return a.index(target) if target in a else -1\ndef get_index_linear(a, target):\n    '''\n    Given a list of numbers, and a target number, write a linear function that returns the index of the target number in the list.\n    '''\n    for index, value in enumerate(a):\n        if value == target:\n            return index\n    return -1\ndef average_of_tuples(a):\n    '''\n    Given a list of tuples, write a function that returns a new list that includes all the original tuples from the list, except for the first one.\n    '''\n    result = []\n    for i in a:\n        result.append(i)\n    return result\ndef duplicate_index_nums(a):\n    '''\n    Given a list, write a function that returns a new list that includes all the original elements in the list, except for the first one.\n    '''\n    result = []\n    for i in a:\n        if a.index(i)!= 0:\n            result.append(i)\n    return result\ndef reverse_list(a):\n    '''\n    Given a list, write a function that returns a new list that has the same elements as the original list, but in reverse order.\n    '''\n    return a[::-1]\ndef smallest_num(a):\n    '''\n    Given a list, write a function that returns the smallest number in the list.\n    '''\n    return min(a)\ndef second_smallest_num(a):\n    '''\n    Given a list, write a function that returns the second smallest number in the list.\n    '''\n    a.sort()\n    return a[1]\ndef second_smallest_index(a):\n    '''\n    Given a list, write a function that returns the index of the second smallest number in the list.\n    '''\n    a.sort()\n    return a.index(a[1])\ndef find_sum(a):\n    '''\n    Given a list of integers, write a function that returns the sum of the numbers in the list.\n    '''\n    return sum(a)\ndef find_average(a):\n    '''\n    Given a list of integers, write a function that returns the average of the numbers in the list.\n    '''\n    return sum(a) / len(a)\ndef filter_list(a, check_func):\n    '''\n    Given a list, write a function that returns a new list that only includes elements from the original list that pass the check_func function.\n    '''\n    return filter(check_func, a)\ndef is_power_of_two(n):\n    '''\n    Given an integer, write a function that returns True if the integer is a power of two, and False otherwise.\n    '''\n    return n > 0 and (n & (n-1)) == 0\ndef find_max(a):\n    '''\n    Given a list, write a function that returns the maximum value in the list.\n    '''\n    return max(a)\ndef find_min(a):\n    '''\n    Given a list, write a function that returns the minimum value in the list.\n    '''\n    return min(a)\ndef find_max_min_index(a):\n    '''\n    Given a list, write a function that returns the index of the largest and smallest values in the list.\n    '''\n    max = min = a[0]\n    max_index = min_index = 0\n    for i in range(1, len(a)):\n        if a[i] > max:\n            max = a[i]\n            max_index = i\n        if a[i] < min:\n            min = a[i]\n            min_index = i\n    return max_index, min_index\ndef count_evens(a):\n    '''\n    Given a list of integers, write a function that returns the number of even integers in the list.\n    '''\n    count = 0\n    for i in a:\n        if i % 2 == 0:\n            count += 1\n    return count\ndef sort_list(a):\n    '''\n    Given a list, write a function that returns a new list that is the same length as the old list, but contains the values in the old list sorted in ascending order.\n    '''\n    a.sort()\n    return a\ndef is_anagram(a, b):\n    '''\n    Given two strings, write a function that returns True if the strings are anagrams, and False otherwise.\n    '''\n    if len(a)!= len(b):\n        return False\n    else:\n        return sorted(a) == sorted(b)\ndef get_anagrams(a):\n    '''\n    Given a list of strings, write a function that returns a list of all the anagrams of those strings.\n    '''\n    anagrams = []\n    for i in a:\n        anagrams.append(sorted(i))\n    return anagrams\ndef get_anagrams2(a):\n    '''\n    Given a list of strings, write a function that returns a list of all the anagrams of those strings.\n    '''\n    anagrams = []\n    for i in a:\n        anagrams.append(\"\".join(sorted(i)))\n    return anagrams\ndef remove_duplicates(a):\n    '''\n    Given a list, write a function that returns a new list that is the same length as the old list, but without any duplicates.\n    '''\n    new_list = []\n    for i in a:\n        if i not i"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = test_list[0]\n    min_value = min_index[1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = test_list[i]\n            min_value = min_index[1]\n    return min_index\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_index = 0\n    smallest_tuple = list()\n    for i in range(len(test_list)):\n        if test_list[i][1] < test_list[smallest_index][1]:\n            smallest_index = i\n            smallest_tuple = test_list[i]\n    return smallest_tuple[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list,key=itemgetter(1))[1]\n    return [tup for tup in test_list if tup[1] == min_value][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list_of_tuples = []\n    #print 'list_of_tuples',list_of_tuples\n    for key in test_list:\n        list_of_tuples.append((key[0],key[1]))\n    list_of_tuples.sort(key=itemgetter(1))\n    return list_of_tuples[0][0]\n    \n    \n    \ndef lowest_second_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list_of_tuples = []\n    #print 'list_of_tuples',list_of_tuples\n    for key in test_list:\n        list_of_tuples.append((key[0],key[1]))\n    list_of_tuples.sort(key=itemgetter(1))\n    return list_of_tuples[0][1]\n    \n    \n    \ndef my_histogram(test_list):\n    '''\n    Given a list of integers, write a function that returns a dictionary that maps from each integer in the list to the number of times that integer appears in the list. \n    For example, given the list [4, 4, 4, 4, 5, 6, 7, 7, 8, 8], your function should return {4: 3, 5: 2, 6: 1, 7: 2, 8: 4}.\n    '''\n    dictionary_of_values = {}\n    for key in test_list:\n        if key not in dictionary_of_values:\n            dictionary_of_values[key] = 1\n        else:\n            dictionary_of_values[key] += 1\n    return dictionary_of_values\n    \n    \ndef my_counter(test_list):\n    '''\n    Given a list of integers, write a function that returns a dictionary that maps from each integer in the list to the number of times that integer appears in the list. \n    For example, given the list [4, 4, 4, 4, 5, 6, 7, 7, 8, 8], your function should return {4: 3, 5: 2, 6: 1, 7: 2, 8: 4}.\n    '''\n    dictionary_of_values = {}\n    for key in test_list:\n        dictionary_of_values[key] = test_list.count(key)\n    return dictionary_of_values\n    \n    \ndef my_counter2(test_list):\n    '''\n    Given a list of integers, write a function that returns a dictionary that maps from each integer in the list to the number of times that integer appears in the list. \n    For example, given the list [4, 4, 4, 4, 5, 6, 7, 7, 8, 8], your function should return {4: 3, 5: 2, 6: 1, 7: 2, 8: 4}.\n    '''\n    dictionary_of_values = {}\n    for key in test_list:\n        if key not in dictionary_of_values:\n            dictionary_of_values[key] = 1\n        else:\n            dictionary_of_values[key] += 1\n    return dictionary_of_values\n    \n    \ndef my_counter3(test_list):\n    '''\n    Given a list of integers, write a function that returns a dictionary that maps from each integer in the list to the number of times that integer appears in the list. \n    For example, given the list [4, 4, 4, 4, 5, 6, 7, 7, 8, 8], your function should return {4: 3, 5: 2, 6: 1, 7: 2, 8: 4}.\n    '''\n    dictionary_of_values = {}\n    for key in test_list:\n        if key not in dictionary_of_values:\n            dictionary_of_values[key] = 1\n        else:\n            dictionary_of_values[key] += 1\n    return dictionary_of_values\n    \n    \ndef is_anagram(str1,str2):\n    '''\n    Write a function that returns True if the strings are anagrams and False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        for letter in str1:\n            if letter in str2:\n                str2 = str2.replace(letter,'',1)\n            else:\n                return False\n        return True\n    \n    \ndef is_anagram2(str1,str2):\n    '''\n    Write a function that returns True if the strings are anagrams and False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        for letter in str1:\n            if letter in str2:\n                str2 = str2.replace(letter,'',1)\n            else:\n                return False\n        return True\n    \n    \ndef is_anagram3(str1,str2):\n    '''\n    Write a function that returns True if the strings are anagrams and False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        for letter in str1:\n            if letter in str2:\n                str2 = str2.replace(letter,'',1)\n            else:\n                return False\n        return True\n    \n    \ndef is_anagram4(str1,str2):\n    '''\n    Write a function that returns True if the strings are anagrams and False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        for letter in str1:\n            if letter in str2:\n                str2 = str2.replace(letter,'',1)\n            else:\n                return False\n        return True\n    \n    \ndef is_anagram5(str1,str2):\n    '''\n    Write a function that returns True if the strings are anagrams and False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        for letter in str1:\n            if letter in str2:\n                str2 = str2.replace(letter,'',1)\n            else:\n                return False\n        return True\n    \n    \ndef is_anagram6(str1,str2):\n    '''\n    Write a function that returns True if the strings are anagrams and False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        for letter in str1:\n            if letter in str2:\n                str2 = str2.replace(letter,'',1)\n            else:\n                return False\n        return True\n    \n    \ndef is_anagram7(str1,str2):\n    '''\n    Write a function that returns True if the strings are anagrams and False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        for letter in str1:\n            if letter in str2:\n                str2 = str2.replace(letter,'',1)\n            else:\n                return False\n        return True\n    \n    \ndef is_anagram8(str1,str2):\n    '''\n    Write a function that returns True if the strings are anagrams and False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        for letter in str1:\n            if letter in str2:\n                str2 = str2.replace(letter,'',1)\n            else:\n                return False\n        return True\n    \n    \ndef is_anagram9(str1,str2):"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = min(test_list,key=itemgetter(1))\n    min_index = test_list.index(min_val)\n    return min_index,min_val\ndef most_frequent(test_list):\n    '''\n    Given a list of tuples, write a function that returns the element with the highest frequency, where the frequency is determined by the second element in the tuple.\n    '''\n    dict = {}\n    for item in test_list:\n        if item[1] in dict:\n            dict[item[1]] += 1\n        else:\n            dict[item[1]] = 1\n    max_val = max(dict.values())\n    max_index = dict.values().index(max_val)\n    return test_list[max_index][1],max_val\ndef longest_word(test_list):\n    '''\n    Given a list of tuples, write a function that returns the element with the longest word.\n    '''\n    dict = {}\n    for item in test_list:\n        if item[0] in dict:\n            dict[item[0]] += item[1]\n        else:\n            dict[item[0]] = item[1]\n    max_val = max(dict.values())\n    max_index = dict.values().index(max_val)\n    return test_list[max_index][0],max_val\ndef shortest_word(test_list):\n    '''\n    Given a list of tuples, write a function that returns the element with the shortest word.\n    '''\n    dict = {}\n    for item in test_list:\n        if item[0] in dict:\n            dict[item[0]] += item[1]\n        else:\n            dict[item[0]] = item[1]\n    min_val = min(dict.values())\n    min_index = dict.values().index(min_val)\n    return test_list[min_index][0],min_val\ndef longest_sentence(test_list):\n    '''\n    Given a list of tuples, write a function that returns the element with the longest sentence.\n    '''\n    dict = {}\n    for item in test_list:\n        if item[0] in dict:\n            dict[item[0]] += item[1]\n        else:\n            dict[item[0]] = item[1]\n    max_val = max(dict.values())\n    max_index = dict.values().index(max_val)\n    return test_list[max_index][0],max_val\ndef shortest_sentence(test_list):\n    '''\n    Given a list of tuples, write a function that returns the element with the shortest sentence.\n    '''\n    dict = {}\n    for item in test_list:\n        if item[0] in dict:\n            dict[item[0]] += item[1]\n        else:\n            dict[item[0]] = item[1]\n    min_val = min(dict.values())\n    min_index = dict.values().index(min_val)\n    return test_list[min_index][0],min_val\ndef first_difference(test_list):\n    '''\n    Given a list of tuples, write a function that returns the element whose first tuple value is the smallest second value.\n    '''\n    min_val = min(test_list,key=itemgetter(1))\n    min_index = test_list.index(min_val)\n    return min_index,min_val\ndef last_difference(test_list):\n    '''\n    Given a list of tuples, write a function that returns the element whose last tuple value is the smallest second value.\n    '''\n    min_val = min(test_list,key=itemgetter(-1))\n    min_index = test_list.index(min_val)\n    return min_index,min_val\ndef middle_difference(test_list):\n    '''\n    Given a list of tuples, write a function that returns the element whose second to last tuple value is the smallest second value.\n    '''\n    min_val = min(test_list,key=itemgetter(-2))\n    min_index = test_list.index(min_val)\n    return min_index,min_val\ndef duplicates(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of tuples, where each tuple is a duplicate of the first tuple in the input list.\n    '''\n    dict = {}\n    for item in test_list:\n        if item[0] in dict:\n            dict[item[0]].append(item)\n        else:\n            dict[item[0]] = [item]\n    duplicate_list = []\n    for key in dict.keys():\n        duplicate_list.append(dict[key][0])\n    return duplicate_list\ndef four_letter_words(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of tuples, where each tuple is a 4 letter word.\n    '''\n    four_letter_words_list = []\n    for item in test_list:\n        if len(item[0]) == 4:\n            four_letter_words_list.append(item)\n    return four_letter_words_list\ndef last_four_letters(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of tuples, where each tuple is the last 4 letters of the first word of each tuple.\n    '''\n    last_four_letters_list = []\n    for item in test_list:\n        if len(item[0]) >= 4:\n            last_four_letters_list.append(item[0][-4:])\n    return last_four_letters_list\ndef first_four_letters(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of tuples, where each tuple is the first 4 letters of the first word of each tuple.\n    '''\n    first_four_letters_list = []\n    for item in test_list:\n        if len(item[0]) >= 4:\n            first_four_letters_list.append(item[0][0:4])\n    return first_four_letters_list\ndef longest_first_last(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of tuples, where each tuple is a longest first last word of each tuple.\n    '''\n    longest_first_last_list = []\n    for item in test_list:\n        if len(item[0]) == item[1]:\n            longest_first_last_list.append((item[0],item[1]))\n    return longest_first_last_list\ndef shortest_first_last(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of tuples, where each tuple is a shortest first last word of each tuple.\n    '''\n    shortest_first_last_list = []\n    for item in test_list:\n        if len(item[0]) == item[1]:\n            shortest_first_last_list.append((item[0],item[1]))\n    return shortest_first_last_list\ndef string_lengths(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of tuples, where each tuple is the length of each word in each tuple.\n    '''\n    string_lengths_list = []\n    for item in test_list:\n        string_lengths_list.append((item[0],len(item[0])))\n    return string_lengths_list\ndef ten_most_frequent(test_list):\n    '''\n    Given a list of tuples, write a function that returns the 10 most frequent elements in the list, sorted in descending order.\n    '''\n    dict = {}\n    for item in test_list:\n        if item[0] in dict:\n            dict[item[0]] += 1\n        else:\n            dict[item[0]] = 1\n    freq_items = []\n    for i in range(0,10):\n        freq_items.append(max(dict.items(),key=itemgetter(1)))\n        del dict[freq_items[i][0]"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_len = None\n    smallest_list = None\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_lst = []\n    for sublst in lst:\n        if len(sublst) == min(map(len, lst)):\n            min_lst.append(sublst)\n    return min_lst\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst)\n    min_length = lst[0]\n    for i in range(length):\n        if len(lst[i]) < len(min_length):\n            min_length = lst[i]\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minLen = None\n    for l in lst:\n        if minLen is None or len(l) < minLen:\n            minLen = len(l)\n    return minLen\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_list = None\n    smallest_list_length = None\n    \n    for lst in lst:\n        if smallest_list_length == None or len(lst) < smallest_list_length:\n            smallest_list = lst\n            smallest_list_length = len(lst)\n    return smallest_list_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length=len(lst[0])\n    for i in lst:\n        if len(i)<length:\n            length=len(i)\n    return length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = 99999\n    for list in lst:\n        if(len(list)<min):\n            min=len(list)\n    return min\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for l in lst:\n        if min_length == None:\n            min_length = len(l)\n        elif len(l) < min_length:\n            min_length = len(l)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minimum_length = lst[0]\n    for i in lst:\n        if i < minimum_length:\n            minimum_length = i\n    return minimum_length\ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    maximum_length = lst[0]\n    for i in lst:\n        if i > maximum_length:\n            maximum_length = i\n    return maximum_length\ndef Find_Sum_of_List(lst):  \n    '''\n    Write a python function to find the sum of all the numbers in a list.\n    '''\n    sum_of_list = 0\n    for i in lst:\n        sum_of_list += i\n    return sum_of_list\ndef Find_Average_List(lst):  \n    '''\n    Write a python function to find the average of all the numbers in a list.\n    '''\n    sum_of_list = Find_Sum_of_List(lst)\n    number_of_items = len(lst)\n    average = sum_of_list/number_of_items\n    return average\ndef Find_Lowest_List_Number(lst):  \n    '''\n    Write a python function to find the lowest number in a list of lists.\n    '''\n    minimum = lst[0]\n    for i in lst:\n        if i < minimum:\n            minimum = i\n    return minimum\ndef Find_Highest_List_Number(lst):  \n    '''\n    Write a python function to find the highest number in a list of lists.\n    '''\n    maximum = lst[0]\n    for i in lst:\n        if i > maximum:\n            maximum = i\n    return maximum\ndef Find_List_Average(lst):  \n    '''\n    Write a python function to find the average of all the numbers in a list of lists.\n    '''\n    sum_of_list = Find_Sum_of_List(lst)\n    number_of_items = len(lst)\n    average = sum_of_list/number_of_items\n    return average\ndef Find_List_Standard_Deviation(lst):  \n    '''\n    Write a python function to find the standard deviation of all the numbers in a list of lists.\n    '''\n    average = Find_List_Average(lst)\n    sum_of_squares = 0\n    for i in lst:\n        sum_of_squares += (average-i)**2\n    standard_deviation = (sum_of_squares/len(lst))**0.5\n    return standard_deviation\ndef Find_Mean_List(lst):  \n    '''\n    Write a python function to find the mean of all the numbers in a list of lists.\n    '''\n    average = Find_List_Average(lst)\n    return average\ndef Find_Median_List(lst):  \n    '''\n    Write a python function to find the median of all the numbers in a list of lists.\n    '''\n    return lst[(len(lst)-1)/2]\ndef Find_Mode_List(lst):  \n    '''\n    Write a python function to find the mode of all the numbers in a list of lists.\n    '''\n    return max(set(lst), key=lst.count)\ndef Find_Range_List(lst):  \n    '''\n    Write a python function to find the range of all the numbers in a list of lists.\n    '''\n    return (max(lst)-min(lst))\ndef Create_List_From_String(lst):  \n    '''\n    Write a python function to create a list from a string.\n    '''\n    lst1 = list(lst)\n    return lst1\ndef Find_Max_Length_String(lst):  \n    '''\n    Write a python function to find the length of the longest string in a list of strings.\n    '''\n    maximum_length = lst[0]\n    for i in lst:\n        if len(i) > len(maximum_length):\n            maximum_length = i\n    return maximum_length\ndef Find_Min_Length_String(lst):  \n    '''\n    Write a python function to find the length of the shortest string in a list of strings.\n    '''\n    minimum_length = lst[0]\n    for i in lst:\n        if len(i) < len(minimum_length):\n            minimum_length = i\n    return minimum_length\ndef Find_Sum_Of_String(lst):  \n    '''\n    Write a python function to find the sum of all the letters in a list of strings.\n    '''\n    sum_of_string = 0\n    for i in lst:\n        for letter in i:\n            sum_of_string += ord(letter)\n    return sum_of_string\ndef Find_Average_Of_String(lst):  \n    '''\n    Write a python function to find the average of all the letters in a list of strings.\n    '''\n    sum_of_string = Find_Sum_Of_String(lst)\n    number_of_items = len(lst)\n    average = sum_of_string/number_of_items\n    return average\ndef Find_Lowest_String(lst):  \n    '''\n    Write a python function to find the lowest letter in a list of strings.\n    '''\n    minimum = lst[0]\n    for i in lst:\n        if len(i) < len(minimum):\n            minimum = i\n    return minimum\ndef Find_Highest_String(lst):  \n    '''\n    Write a python function to find the highest letter in a list of strings.\n    '''\n    maximum = lst[0]\n    for i in lst:\n        if len(i) > len(maximum):\n            maximum = i\n    return maximum\ndef Find_Mean_String(lst):  \n    '''\n    Write a python function to find the mean of all the letters in a list of strings.\n    '''\n    average = Find_Average_Of_String(lst)\n    return average\ndef Find_Median_String(lst):  \n    '''\n    Write a python function to find the median of all the letters in a list of strings.\n    '''\n    return lst[(len(lst)-1)/2]\ndef Find_Mode_String(lst):  \n    '''\n    Write a python function to find the mode of all the letters in a list of strings.\n    '''\n    return max(set(lst), key=lst.count)\ndef Find_Range_String(lst):  \n    '''\n    Write a python function to find the range of all the letters in a list of strings.\n    '''\n    return (max(lst)-min(lst))\ndef Create_List_From_String(lst):  \n    '''\n    Write a python function to create a list from a string.\n    '''\n    lst1 = list(lst)\n    return lst1\ndef Find_Max_Length_String(lst):  \n    '''\n    Write a python function to find the length of the longest string in a list of strings.\n    '''\n    maximum_length = lst[0]\n    for i in lst:\n        if len(i) > len(maximum_length):\n            maximum_length = i\n    return maximum_length\ndef Find_Min_Length_String(lst):  \n    '''\n    Write a python function to find the length of the shortest string in a list of strings.\n    '''\n    minimum_length = lst[0]\n    for i in lst:\n        if len(i) < len(minimum_length):\n            minimum_length = i\n    return minimum_length\ndef Find_Sum_Of_String(lst):  \n    '''\n    Write a python function to find the sum of all the letters in a list of strings.\n    '''\n    sum_of_string = 0\n    for i in lst:\n        for letter in i:\n            sum_of_string += ord(letter)\n    return sum_of_string\ndef Find_Average_Of_String(lst):  \n    '''\n    Write a python function to find the average of all the letters in a list o"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    min_len = len(lst[0])\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n%i == 0:\n            if n/i == i:\n                count += 1\n            else:\n                count += 2\n        i += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    result = 1\n    for i in range(2, n):\n        if n%i == 0:\n            result = result + 1\n    return result\n    \n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    i = 2\n    while i <= n:\n        if (n % i) == 0:\n            div = div + 1\n        i = i + 1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n - 1 + divisor(n - 1)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    divisors = 1\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            divisors += 2\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n):\n        if (n%i == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            divs += 1\n    return divs\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors += 2\n    return divisors\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for item in list1:\n        if item in dictionary:\n            dictionary[item] += 1\n        else:\n            dictionary[item] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for item in list1:\n        if item in dic:\n            dic[item] += 1\n        else:\n            dic[item] = 1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for i in list1:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return counts\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in freq:\n                freq[list1[i][j]] += 1\n            else:\n                freq[list1[i][j]] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i not in freq.keys():\n            freq[i] = 1\n        else:\n            freq[i] = freq[i]+1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    a_list = [1, 2, 3, 1, 1, 1, 2, 3, 3, 2, 2, 3, 1, 1, 3, 4, 5, 5, 3, 4, 4, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7]\n    \n    #output = {'one':4, 'two':2, 'three':3, 'four':1}\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list_of_freqs = {}\n    for i in list1:\n        if i in list_of_freqs:\n            list_of_freqs[i] += 1\n        else:\n            list_of_freqs[i] = 1\n    return list_of_freqs\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    from collections import Counter\n    return Counter(list1)\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    from collections import Counter\n    lst = [item for sublist in list1 for item in sublist]\n    d = dict(Counter(lst))\n    return d\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return (numbers[0] * len(numbers)) / float(len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total *= number\n    total = total/len(numbers)\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x,y: x*y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 1\n    for number in numbers:\n        sum *= number\n    return sum/len(numbers)\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for n in numbers:\n        total = total * n\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    return reduce(lambda a,b:a*b,numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total = total * number\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    answer = 1\n    for i in range(len(numbers)):\n        answer *= numbers[i]\n    return answer / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not numbers:\n        return 0\n    res = 1\n    for x in numbers:\n        res *= x\n    return res / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = 1\n    for i in numbers:\n        mul = mul*i\n    return mul/len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n    if n == 1: \n        return \"1\"\n    return decimal_to_binary(n // 2) + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\",\"\").zfill(32)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = \"\"\n    if n == 0: \n        return \"0\"\n    if n < 0: \n        n = -n\n        result += \"-\"\n    while n:\n        if n % 2 == 0: \n            result += \"0\"\n        else: \n            result += \"1\"\n        n = n // 2\n    return result[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        n = n * (-1)\n    if n == 0:\n        return \"0\"\n    \n    result = []\n    while n > 0:\n        result.append(n%2)\n        n = n // 2\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n > 1: \n        decimal_to_binary(n//2)\n    print(n%2, end=\"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    elif n < 0:\n        return '-' + decimal_to_binary(-n)\n    else:\n        return decimal_to_binary(n // 2) + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return \"{0:b}\".format(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    if n == 0:\n        return '0'\n    \n    s = ''\n    while n > 0:\n        s += str(n % 2)\n        n /= 2\n    \n    return s[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num<10:\n        return 9\n    digits = []\n    while num!=0:\n        digits.append(num%10)\n        num = num/10\n    #print digits\n    #print ''.join(str(e) for e in digits)\n    for i in range(len(digits)):\n        if digits[i]==9:\n            digits[i] = 0\n        else:\n            digits[i] = 9\n            break\n    #print ''.join(str(e) for e in digits)\n    return int(''.join(str(e) for e in digits)) + 1\ndef main():\n    #print next_smallest_palindrome(999)\n    #print next_smallest_palindrome(908)\n    #print next_smallest_palindrome(1)\n    #print next_smallest_palindrome(89)\n    #print next_smallest_palindrome(88)\n    #print next_smallest_palindrome(777)\n    #print next_smallest_palindrome(78)\n    #print next_smallest_palindrome(99)\n    #print next_smallest_palindrome(00)\n    #print next_smallest_palindrome(0)\n    #print next_smallest_palindrome(90)\n    #print next_smallest_palindrome(90)\n    #print next_smallest_palindrome(89)\n    #print next_smallest_palindrome(88)\n    #print next_smallest_palindrome(87)\n    #print next_smallest_palindrome(86)\n    #print next_smallest_palindrome(85)\n    #print next_smallest_palindrome(84)\n    #print next_smallest_palindrome(83)\n    #print next_smallest_palindrome(82)\n    #print next_smallest_palindrome(81)\n    #print next_smallest_palindrome(80)\n    #print next_smallest_palindrome(79)\n    #print next_smallest_palindrome(78)\n    #print next_smallest_palindrome(77)\n    #print next_smallest_palindrome(76)\n    #print next_smallest_palindrome(75)\n    #print next_smallest_palindrome(74)\n    #print next_smallest_palindrome(73)\n    #print next_smallest_palindrome(72)\n    #print next_smallest_palindrome(71)\n    #print next_smallest_palindrome(70)\n    #print next_smallest_palindrome(69)\n    #print next_smallest_palindrome(68)\n    #print next_smallest_palindrome(67)\n    #print next_smallest_palindrome(66)\n    #print next_smallest_palindrome(65)\n    #print next_smallest_palindrome(64)\n    #print next_smallest_palindrome(63)\n    #print next_smallest_palindrome(62)\n    #print next_smallest_palindrome(61)\n    #print next_smallest_palindrome(60)\n    #print next_smallest_palindrome(59)\n    #print next_smallest_palindrome(58)\n    #print next_smallest_palindrome(57)\n    #print next_smallest_palindrome(56)\n    #print next_smallest_palindrome(55)\n    #print next_smallest_palindrome(54)\n    #print next_smallest_palindrome(53)\n    #print next_smallest_palindrome(52)\n    #print next_smallest_palindrome(51)\n    #print next_smallest_palindrome(50)\n    #print next_smallest_palindrome(49)\n    #print next_smallest_palindrome(48)\n    #print next_smallest_palindrome(47)\n    #print next_smallest_palindrome(46)\n    #print next_smallest_palindrome(45)\n    #print next_smallest_palindrome(44)\n    #print next_smallest_palindrome(43)\n    #print next_smallest_palindrome(42)\n    #print next_smallest_palindrome(41)\n    #print next_smallest_palindrome(40)\n    #print next_smallest_palindrome(39)\n    #print next_smallest_palindrome(38)\n    #print next_smallest_palindrome(37)\n    #print next_smallest_palindrome(36)\n    #print next_smallest_palindrome(35)\n    #print next_smallest_palindrome(34)\n    #print next_smallest_palindrome(33)\n    #print next_smallest_palindrome(32)\n    #print next_smallest_palindrome(31)\n    #print next_smallest_palindrome(30)\n    #print next_smallest_palindrome(29)\n    #print next_smallest_palindrome(28)\n    #print next_smallest_palindrome(27)\n    #print next_smallest_palindrome(26)\n    #print next_smallest_palindrome(25)\n    #print next_smallest_palindrome(24)\n    #print next_smallest_palindrome(23)\n    #print next_smallest_palindrome(22)\n    #print next_smallest_palindrome(21)\n    #print next_smallest_palindrome(20)\n    #print next_smallest_palindrome(19)\n    #print next_smallest_palindrome(18)\n    #print next_smallest_palindrome(17)\n    #print next_smallest_palindrome(16)\n    #print next_smallest_palindrome(15)\n    #print next_smallest_palindrome(14)\n    #print next_smallest_palindrome(13)\n    #print next_smallest_palindrome(12)\n    #print next_smallest_palindrome(11)\n    #print next_smallest_palindrome(10)\n    #print next_smallest_palindrome(9)\n    #print next_smallest_palindrome(8)\n    #print next_smallest_palindrome(7)\n    #print next_smallest_palindrome(6)\n    #print next_smallest_palindrome(5)\n    #print next_smallest_palindrome(4)\n    #print next_smallest_palindrome(3)\n    #print next_smallest_palindrome(2)\n    #print next_smallest_palindrome(1)\n    #print next_smallest_palindrome(0)\n    #print next_smallest_palindrome(1)\n    #print next_smallest_palindrome(2)\n    #print next_smallest_palindrome(3)\n    #print next_smallest_palindrome(4)\n    #print next_smallest_palindrome(5)\n    #print next_smallest_palindrome(6)\n    #print next_smallest_palindrome(7)\n    #print next_smallest_palindrome(8)\n    #print next_smallest_palindrome(9)\n    #print next_smallest_palindrome(10)\n    #print next_smallest_palindrome(11)\n    #print next_smallest_palindrome(12)\n    #print next_smallest_palindrome(13)\n    #print next_smallest_palindrome(14)\n    #print next_smallest_palindrome(15)\n    #print next_smallest_palindrome(16)\n    #print next_smallest_palindrome(17)\n    #print next_smallest_palindrome(18)\n    #print next_smallest_palindrome(19)\n    #print next_smallest_palindrome(20)\n    #print next_smallest_palindrome(21)\n    "
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 9\n    elif num == 2:\n        return 11\n    else:\n        num_copy = num\n        count = 0\n        while (num_copy > 10):\n            last_digit = num_copy % 10\n            if last_digit == 0:\n                num_copy = num_copy // 10\n                count += 1\n            else:\n                break\n        num_copy = num_copy * 10 + (10 - last_digit)\n        return num_copy * 10 + (count * 11) + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    if num < 0:\n        num *= -1\n    i = 1\n    while i < num:\n        num -= i\n        i += 1\n    return num * -1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num+=1\n    while not is_palindrome(num):\n        num+=1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    temp = num\n    while not is_palindrome(temp):\n        temp += 1\n    return temp\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num+=1\n    while not is_palindrome(num):\n        num+=1\n    return num\n    \ndef is_palindrome(num):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    if str(num)[::-1]==str(num):\n        return True\n    return False\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while(True):\n        num = num + 1\n        if str(num) == str(num)[::-1]:\n            return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return 11\n    \n    # handle negative number\n    if num < 0:\n        num = abs(num)\n    \n    # find the max power of 10 that can be divided by num\n    power = 1\n    while power <= num:\n        power *= 10\n    \n    # handle 1 to 9\n    if power // 10 == 1:\n        power += 1\n    \n    # handle 0 to 9\n    elif power // 10 == 0:\n        power += 10\n    \n    # handle 10 to 99\n    else:\n        power += (power // 10) * 10\n    \n    # increment num by 1\n    num += 1\n    \n    # handle palindrome case\n    if num <= power:\n        return num\n    \n    # find the max power of 10 that can be divided by num\n    power = 1\n    while power <= num:\n        power *= 10\n    \n    # handle 1 to 9\n    if power // 10 == 1:\n        power += 1\n    \n    # handle 0 to 9\n    elif power // 10 == 0:\n        power += 10\n    \n    # handle 10 to 99\n    else:\n        power += (power // 10) * 10\n    \n    # increment num by 1\n    num += 1\n    \n    # check if num is a palindrome\n    if num <= power:\n        return num\n    else:\n        return -1\n    \ndef get_max_square(grid):\n    '''\n    Given a grid of 0s and 1s, return the maximum area of a square with a 1 on it.\n    '''\n    max_area = 0\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    # find the max area by traversing each row\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 1:\n                area = 1\n                \n                # find the left column\n                left_col = col - 1\n                while left_col >= 0:\n                    if grid[row][left_col] == 0:\n                        break\n                    else:\n                        area += 1\n                        left_col -= 1\n                \n                # find the right column\n                right_col = col + 1\n                while right_col < cols:\n                    if grid[row][right_col] == 0:\n                        break\n                    else:\n                        area += 1\n                        right_col += 1\n                \n                # find the top row\n                top_row = row - 1\n                while top_row >= 0:\n                    if grid[top_row][col] == 0:\n                        break\n                    else:\n                        area += 1\n                        top_row -= 1\n                \n                # find the bottom row\n                bottom_row = row + 1\n                while bottom_row < rows:\n                    if grid[bottom_row][col] == 0:\n                        break\n                    else:\n                        area += 1\n                        bottom_row += 1\n                \n                # find the max area\n                max_area = max(max_area, area)\n    \n    return max_area\n    \ndef factorial(num):\n    '''\n    Write a recursive function to calculate the factorial of a number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n    \ndef get_largest_digit(num):\n    '''\n    Given a number, return the largest digit in that number.\n    '''\n    largest_digit = 0\n    \n    while num > 0:\n        curr_digit = num % 10\n        if curr_digit > largest_digit:\n            largest_digit = curr_digit\n        num //= 10\n    return largest_digit\n    \ndef reverse_digits(num):\n    '''\n    Write a recursive function to reverse a number.\n    '''\n    reverse_num = 0\n    \n    # reverse the last digit\n    last_digit = num % 10\n    reverse_num += (last_digit * pow(10, len(str(num)) - 1))\n    num //= 10\n    \n    # reverse the second-to-last digit\n    second_last_digit = num % 10\n    reverse_num += (second_last_digit * pow(10, len(str(num)) - 2))\n    num //= 10\n    \n    # reverse the third-to-last digit\n    third_last_digit = num % 10\n    reverse_num += (third_last_digit * pow(10, len(str(num)) - 3))\n    num //= 10\n    \n    # reverse the rest of the digits\n    while num > 0:\n        curr_digit = num % 10\n        reverse_num += (curr_digit * pow(10, len(str(num)) - 1))\n        num //= 10\n    \n    return reverse_num\n    \ndef bin_to_hex(num):\n    '''\n    Write a recursive function that converts a binary number to hexadecimal.\n    '''\n    hex_num = 0\n    \n    # reverse the last digit\n    last_digit = num % 16\n    hex_num += last_digit * pow(16, len(str(num)) - 1)\n    num //= 16\n    \n    # reverse the second-to-last digit\n    second_last_digit = num % 16\n    hex_num += second_last_digit * pow(16, len(str(num)) - 2)\n    num //= 16\n    \n    # reverse the third-to-last digit\n    third_last_digit = num % 16\n    hex_num += third_last_digit * pow(16, len(str(num)) - 3)\n    num //= 16\n    \n    # reverse the rest of the digits\n    while num > 0:\n        curr_digit = num % 16\n        hex_num += curr_digit * pow(16, len(str(num)) - 1)\n        num //= 16\n    \n    return hex_num\n    \ndef reverse_words(sentence):\n    '''\n    Write a recursive function to reverse a sentence.\n    '''\n    words = sentence.split()\n    reverse_sentence =''.join(reversed(words))\n    \n    return reverse_sentence\n    \ndef is_palin(num):\n    '''\n    Write a recursive function to check if a number is a palindrome.\n    '''\n    # base case\n    if num == 0:\n        return True\n    \n    # handle negative numbers\n    if num < 0:\n        num = abs(num)\n        return is_palin(num)\n    \n    # handle palindromes of 1\n    if num == 1:\n        return True\n    \n    # handle case of 0\n    if num == 0:\n        return True\n    \n    # find the max power of 10 that can be divided by num\n    power = 1\n    while power <= num:\n        power *= 10\n    \n    # handle 0 to 9\n    if power // 10 == 1:\n        power += 1\n    \n    # handle 1 to 9\n    elif power // 10 == 0:\n        power += 10\n    \n    # handle 10 to 99\n    else:\n        power += (power // 10) * 10\n    \n    # increment num by 1\n    num += 1\n    \n    # check if num is a palindrome\n    if num <= power:\n        return is_palin(num)\n    else:\n        return False\n    \ndef is_palin_rec(num):\n    '''\n    Write a recursive function to check if a number is a palindrome.\n    '''\n    if num == 0:\n        return True\n    \n    if num < 0:\n        num = abs(num)\n        return is_palin_rec(num)\n    \n    if num == 1:\n        return True\n    \n    if num == 0:\n        return True\n    \n    # find the max power of 10 that can be divided by num\n    power = 1\n    while power <= num:\n        power *= 10\n    \n    # handle 0 to 9\n    if power // 10 == 1:\n        power += 1\n    \n    # handle 1 to 9\n    elif power // 10 == 0:\n        power += 10\n    \n    # handle 10 to 99\n    else:\n        power += (power // 10) * 10\n    \n    # increment num by 1\n    num += 1\n    \n    if num <= power:\n        return is_palin_rec(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_list = list(str(num))\n    if num_list[0]!= '9':\n        for i in range(len(num_list)):\n            if num_list[i]!= '9':\n                temp = num_list[i]\n                num_list[i] = '9'\n                break\n        else:\n            num_list[0] = '9'\n        return int(\"\".join(num_list))\n    else:\n        for i in range(len(num_list)-1):\n            if num_list[i]!= '9':\n                temp = num_list[i]\n                num_list[i] = '9'\n                break\n        else:\n            num_list[-1] = '9'\n        return int(\"\".join(num_list))\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return\n    pivot = arr[0]\n    tail = arr[1:]\n    left = [x for x in tail if x <= pivot]\n    right = [x for x in tail if x > pivot]\n    if k <= len(left):\n        return kth_element(left, k)\n    elif k > len(left) + 1:\n        return kth_element(right, k - len(left) - 1)\n    else:\n        return pivot\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return sorted(arr)[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pivot = k\n    while pivot >= 0 and pivot < len(arr) and arr[pivot] < arr[pivot-1]:\n        arr[pivot], arr[pivot-1] = arr[pivot-1], arr[pivot]\n        pivot -= 1\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    if k <= len(arr):\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 0 or k >= len(arr):\n        return None\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    arr = list(arr)\n    arr = arr[::-1]\n    \n    if arr[0] > k:\n        return -1\n    elif arr[0] < k:\n        return len(arr) + k - arr[0]\n    elif arr[0] == k:\n        return arr[0]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == []:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[0]\n    i, j = 0, len(arr) - 1\n    while i < j:\n        while i < j and arr[j] > pivot:\n            j -= 1\n        while i < j and arr[i] < pivot:\n            i += 1\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n    return arr[j]\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) <= 2:\n        return word\n    else:\n        return word[0].upper() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #split on '_' and join with upper case\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = ''\n    for i, c in enumerate(word):\n        if i == 0:\n            camel += c.upper()\n        else:\n            camel += c.lower()\n    return camel\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('_','').title()\n    return word[0].lower() + word[1:] if word else ''\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = []\n    for i, c in enumerate(word):\n        if c == '_':\n            if len(res)!= 0:\n                res[-1] = res[-1].upper()\n            res.append(c)\n        elif i == 0 or word[i-1] == '_':\n            res.append(c.upper())\n        else:\n            res.append(c.lower())\n    return ''.join(res)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title() for word in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:] if word else word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_string = ''\n    if not word:\n        return ''\n    \n    # not the best way to do this, but it works\n    first = True\n    for letter in word:\n        if first:\n            if letter.isupper():\n                new_string = new_string + letter\n            first = False\n        else:\n            if letter.isupper():\n                new_string = new_string + letter\n            else:\n                new_string = new_string + letter.capitalize()\n    return new_string\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return reduce(lambda x,y: x+y, map(lambda x: '_' + x.lower() if x.isupper() else x, word)).lower()\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (1.0/2.0)*(n+m)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n**2 - 2*n + m**2 + 2*m\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n + m)/2\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num_poly = 0\n    for i in range(n):\n        for j in range(m):\n            if i+j == n-1:\n                num_poly += 1\n    return num_poly\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m > n:\n        return False\n    if m == 0:\n        return n\n    count = 1\n    for i in range(m, n + 1):\n        count += eulerian_num(n - i, m - 1) * eulerian_num(i, m - 1)\n    return count\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n**2 + m**2\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    from fractions import Fraction\n    def _intdiv(a, b):\n        ''' \n        Return integer division a/b \n        '''\n        return a//b \n    def _fracdiv(a, b): \n        ''' \n        Return fraction division a/b \n        '''\n        return a/b \n    def _trim(a, b): \n        ''' \n        Return the trim of a/b \n        '''\n        return a % b \n    def _gcd(a, b): \n        ''' \n        Return the greatest common divisor of a and b \n        '''\n        while a: \n            a, b = b%a, a \n        return b \n    # checks if the number is divisible by the numeral \n    def _check(num): \n        ''' \n        Return the divisors of the number \n        '''\n        divisors = [] \n        for divisor in range(1, num): \n            if num % divisor == 0: \n                divisors.append(divisor) \n        return divisors \n    # checks if the fraction is divisible by the numeral \n    def _check_frac(num): \n        ''' \n        Return the divisors of the fraction \n        '''\n        divisors = [] \n        for divisor in range(1, num): \n            if num % divisor == 0: \n                divisors.append(divisor) \n        return divisors \n    if m > n: \n        n, m = m, n \n    if n < 3: \n        return 0 \n    if n % 2 == 0: \n        return 2 \n    if m < 3: \n        return 0 \n    if m % 2 == 0: \n        return 2 \n    if m == 1: \n        return 1 \n    if m == 2: \n        return 1 \n    if m == 3: \n        return 2 \n    if n == 1: \n        return 0 \n    if n == 2: \n        return 0 \n    if n == 3: \n        return 1 \n    if n == 4: \n        return 2 \n    # the odd numbers \n    if n % 2!= 0: \n        eul_num = 0 \n        # when m is prime \n        if m == 2: \n            eul_num = 0 \n            return eul_num \n        # when m is prime and n is even \n        if m == 4: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is odd \n        if m == 3: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is odd \n        if m == 5: \n            eul_num = 2 \n            return eul_num \n        # if m is prime and n is odd \n        if m == 7: \n            eul_num = 2 \n            return eul_num \n        # if m is prime and n is odd \n        if m == 11: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is even \n        if m == 3 or m == 7 or m == 11: \n            eul_num = 0 \n            return eul_num \n        # when m is prime and n is even \n        if m == 5 or m == 9 or m == 13: \n            eul_num = 0 \n            return eul_num \n        # when m is prime and n is even \n        if m == 17: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is even \n        if m == 19: \n            eul_num = 2 \n            return eul_num \n        # when m is prime and n is even \n        if m == 23: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is even \n        if m == 29: \n            eul_num = 0 \n            return eul_num \n        # when m is prime and n is even \n        if m == 31: \n            eul_num = 2 \n            return eul_num \n        # when m is prime and n is even \n        if m == 37: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is even \n        if m == 41: \n            eul_num = 0 \n            return eul_num \n        # when m is prime and n is even \n        if m == 43: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is even \n        if m == 47: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is even \n        if m == 53: \n            eul_num = 2 \n            return eul_num \n        # when m is prime and n is even \n        if m == 59: \n            eul_num = 2 \n            return eul_num \n        # when m is prime and n is even \n        if m == 61: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is even \n        if m == 67: \n            eul_num = 0 \n            return eul_num \n        # when m is prime and n is even \n        if m == 71: \n            eul_num = 2 \n            return eul_num \n        # when m is prime and n is even \n        if m == 73: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is even \n        if m == 79: \n            eul_num = 2 \n            return eul_num \n        # when m is prime and n is even \n        if m == 83: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is even \n        if m == 89: \n            eul_num = 0 \n            return eul_num \n        # when m is prime and n is even \n        if m == 97: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is even \n        if m == 101: \n            eul_num = 0 \n            return eul_num \n        # when m is prime and n is even \n        if m == 103: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is even \n        if m == 107: \n            eul_num = 0 \n            return eul_num \n        # when m is prime and n is even \n        if m == 109: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is even \n        if m == 113: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is even \n        if m == 127: \n            eul_num = 0 \n            return eul_num \n        # when m is prime and n is even \n        if m == 131: \n            eul_num = 2 \n            return eul_num \n        # when m is prime and n is even \n        if m == 137: \n            eul_num = 0 \n            return eul_num \n        # when m is prime and n is even \n        if m == 139: \n            eul_num = 1 \n            return eul_num \n        # when m is prime and n is even \n        if m == 149: \n            eul_num = 0 \n            return eul_num \n        # when m is prime and n is even \n        if m == 151: \n            eul_num = 2 \n            return eul_num \n        # when m is prime and n is even \n        if m == 157: \n            eul_num "
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % 2 == 0:\n        return eulerian_num(n/2, m)\n    else:\n        return m * eulerian_num(n-1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n + m - 2\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n==0:\n        return 1\n    return ((2*m)*n+1)/2\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    out_list = []\n    for element in input_list:\n        out_list.append(sorted(element))\n    return out_list\n    \ndef sort_item_to_item(item_to_item_list):\n    '''\n    Write a function to sort each sublist of items in a given list of lists.\n    '''\n    out_list = []\n    for element in item_to_item_list:\n        out_list.append(sorted(element))\n    return out_list\n    \ndef count_words(word_list):\n    '''\n    Write a function to count the number of words in a list of words.\n    '''\n    return len(word_list)\n    \ndef flatten(input_list):\n    '''\n    Write a function to flatten a given nested list of lists.\n    '''\n    out_list = []\n    for element in input_list:\n        if isinstance(element, list):\n            out_list += flatten(element)\n        else:\n            out_list.append(element)\n    return out_list\n    \ndef flatten_list_of_lists(input_list):\n    '''\n    Write a function to flatten a given nested list of lists.\n    '''\n    out_list = []\n    for element in input_list:\n        if isinstance(element, list):\n            out_list += flatten(element)\n        else:\n            out_list.append(element)\n    return out_list\n    \ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n    \ndef deep_reverse(input_list):\n    '''\n    Write a function to reverse a list of lists.\n    '''\n    out_list = []\n    for element in input_list:\n        if isinstance(element, list):\n            out_list.append(deep_reverse(element))\n        else:\n            out_list.append(element)\n    return out_list[::-1]\n    \ndef deep_reverse(input_list):\n    '''\n    Write a function to reverse a list of lists.\n    '''\n    out_list = []\n    for element in input_list:\n        if isinstance(element, list):\n            out_list.append(deep_reverse(element))\n        else:\n            out_list.append(element)\n    return out_list[::-1]\n    \ndef max_of_list(input_list):\n    '''\n    Write a function to return the max value of a list.\n    '''\n    max_val = input_list[0]\n    for element in input_list:\n        if element > max_val:\n            max_val = element\n    return max_val\n    \ndef reverse(input_string):\n    '''\n    Write a function to reverse a string.\n    '''\n    out_string = ''\n    for element in input_string:\n        out_string = element + out_string\n    return out_string\n    \ndef count_occurrences(input_list, element):\n    '''\n    Write a function to return the number of occurrences of an element in a list.\n    '''\n    return input_list.count(element)\n    \ndef find_max_in_list(input_list):\n    '''\n    Write a function to find the maximum element in a list.\n    '''\n    max_val = input_list[0]\n    for element in input_list:\n        if element > max_val:\n            max_val = element\n    return max_val\n    \ndef find_min_in_list(input_list):\n    '''\n    Write a function to find the minimum element in a list.\n    '''\n    min_val = input_list[0]\n    for element in input_list:\n        if element < min_val:\n            min_val = element\n    return min_val\n    \ndef split_list(input_list, n):\n    '''\n    Write a function to split a list into two parts.\n    '''\n    middle_index = len(input_list) / 2\n    return input_list[:middle_index], input_list[middle_index:]\n    \ndef merge_lists(list_1, list_2):\n    '''\n    Write a function to merge two sorted lists into a new sorted list.\n    '''\n    out_list = []\n    index_1, index_2 = 0, 0\n    while index_1 < len(list_1) and index_2 < len(list_2):\n        if list_1[index_1] < list_2[index_2]:\n            out_list.append(list_1[index_1])\n            index_1 += 1\n        elif list_1[index_1] > list_2[index_2]:\n            out_list.append(list_2[index_2])\n            index_2 += 1\n        else:\n            out_list.append(list_1[index_1])\n            out_list.append(list_2[index_2])\n            index_1 += 1\n            index_2 += 1\n    while index_1 < len(list_1):\n        out_list.append(list_1[index_1])\n        index_1 += 1\n    while index_2 < len(list_2):\n        out_list.append(list_2[index_2])\n        index_2 += 1\n    return out_list\n    \ndef is_palindrome(input_string):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    string_length = len(input_string)\n    out_list = []\n    for element in range(string_length):\n        out_list.append(input_string[element])\n    out_list = out_list[::-1]\n    string_length = len(input_string)\n    out_list = []\n    for element in range(string_length):\n        out_list.append(input_string[element])\n    if out_list == input_string:\n        return True\n    else:\n        return False\n    \ndef get_longest_substring(input_string):\n    '''\n    Write a function to get the longest substring without repeating characters.\n    '''\n    out_string = ''\n    for element in range(len(input_string)):\n        current_string = input_string[element]\n        if out_string == '':\n            out_string = current_string\n        elif current_string not in out_string:\n            out_string += current_string\n        else:\n            if len(out_string) < len(current_string):\n                out_string = current_string\n    return out_string\n    \ndef has_duplicates(input_list):\n    '''\n    Write a function to check if a list has duplicates.\n    '''\n    return len(input_list)!= len(set(input_list))\n    \ndef get_all_duplicates(input_list):\n    '''\n    Write a function to return a list of all duplicates in a given list.\n    '''\n    duplicates = []\n    for element in input_list:\n        if input_list.count(element) > 1:\n            if element not in duplicates:\n                duplicates.append(element)\n    return duplicates\n    \ndef is_list_cyclic(input_list):\n    '''\n    Write a function to check if a list is cyclic.\n    '''\n    if len(input_list) < 2:\n        return False\n    out_list = []\n    for element in range(len(input_list)):\n        out_list.append(input_list[element])\n    out_list = out_list[::-1]\n    if out_list == input_list:\n        return True\n    else:\n        return False\n    \ndef remove_duplicates(input_list):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    out_list = []\n    for element in input_list:\n        if element not in out_list:\n            out_list.append(element)\n    return out_list\n    \ndef find_shortest_word(input_list):\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0, len(input_list)):\n        input_list[i].sort()\n        \n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for each_list in input_list:\n        sorted_list.append(sorted(each_list))\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(sublist) for sublist in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key = lambda x: x[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    #create a list of the same length as the input list with each element set to None\n    #this will hold the sorted string lists\n    #the sorted_list will have the same index as the input list\n    sorted_list = [None for i in range(len(input_list))]\n    \n    for sublist in input_list:\n        sublist.sort()\n    \n    for index in range(len(input_list)):\n        sorted_list[index] = input_list[index]\n    \n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key = lambda x: len(x))\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i == True:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(map(lambda x: x==True, lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([bool(x) for x in lst])\n    \ndef count_in(lst,elem):\n    '''\n    Write a python function to count the number of times elem appears in the given list.\n    '''\n    return sum(1 for x in lst if x == elem)\n    \ndef count_in_iter(lst,elem):\n    '''\n    Write a python function to count the number of times elem appears in the given list, using iteration.\n    '''\n    res = 0\n    for x in lst:\n        if x == elem:\n            res += 1\n    return res\n    \ndef max(lst):\n    '''\n    Write a python function to return the max value in the given list.\n    '''\n    return max(lst)\n    \ndef min(lst):\n    '''\n    Write a python function to return the min value in the given list.\n    '''\n    return min(lst)\n    \ndef max_index(lst):\n    '''\n    Write a python function to return the index of the max value in the given list.\n    '''\n    return lst.index(max(lst))\n    \ndef min_index(lst):\n    '''\n    Write a python function to return the index of the min value in the given list.\n    '''\n    return lst.index(min(lst))\n    \ndef max_of_three(a,b,c):\n    '''\n    Write a python function to return the max of three values.\n    '''\n    return max(max(a,b),c)\n    \ndef max_of_three_iter(a,b,c):\n    '''\n    Write a python function to return the max of three values, using iteration.\n    '''\n    max_val = a\n    if max_val < b:\n        max_val = b\n    if max_val < c:\n        max_val = c\n    return max_val\n    \ndef sum_of_squares(lst):\n    '''\n    Write a python function to return the sum of the squares of the values in the given list.\n    '''\n    return sum(x**2 for x in lst)\n    \ndef sum_of_squares_iter(lst):\n    '''\n    Write a python function to return the sum of the squares of the values in the given list, using iteration.\n    '''\n    res = 0\n    for x in lst:\n        res += x**2\n    return res\n    \ndef sum_of_squares_rec(lst):\n    '''\n    Write a python function to return the sum of the squares of the values in the given list, using recursion.\n    '''\n    if not lst:\n        return 0\n    return lst[0]**2 + sum_of_squares_rec(lst[1:])\n    \ndef sum_of_squares_rec_iter(lst):\n    '''\n    Write a python function to return the sum of the squares of the values in the given list, using recursion, and iteration.\n    '''\n    if not lst:\n        return 0\n    return lst[0]**2 + sum_of_squares_rec_iter(lst[1:])\n    \ndef sum_of_cubes(lst):\n    '''\n    Write a python function to return the sum of the cubes of the values in the given list.\n    '''\n    return sum(x**3 for x in lst)\n    \ndef sum_of_cubes_iter(lst):\n    '''\n    Write a python function to return the sum of the cubes of the values in the given list, using iteration.\n    '''\n    res = 0\n    for x in lst:\n        res += x**3\n    return res\n    \ndef sum_of_cubes_rec(lst):\n    '''\n    Write a python function to return the sum of the cubes of the values in the given list, using recursion.\n    '''\n    if not lst:\n        return 0\n    return lst[0]**3 + sum_of_cubes_rec(lst[1:])\n    \ndef sum_of_cubes_rec_iter(lst):\n    '''\n    Write a python function to return the sum of the cubes of the values in the given list, using recursion, and iteration.\n    '''\n    if not lst:\n        return 0\n    return lst[0]**3 + sum_of_cubes_rec_iter(lst[1:])\n    \ndef reverse(lst):\n    '''\n    Write a python function to return the reverse of the given list.\n    '''\n    return lst[::-1]\n    \ndef reverse_iter(lst):\n    '''\n    Write a python function to return the reverse of the given list, using iteration.\n    '''\n    res = []\n    for i in range(len(lst)-1,-1,-1):\n        res.append(lst[i])\n    return res\n    \ndef reverse_rec(lst):\n    '''\n    Write a python function to return the reverse of the given list, using recursion.\n    '''\n    if not lst:\n        return []\n    return [lst[-1]] + reverse_rec(lst[:-1])\n    \ndef reverse_rec_iter(lst):\n    '''\n    Write a python function to return the reverse of the given list, using recursion, and iteration.\n    '''\n    res = []\n    if not lst:\n        return []\n    res = [lst[-1]] + reverse_rec_iter(lst[:-1])\n    return res\n    \ndef sum_of_products(lst):\n    '''\n    Write a python function to return the sum of the products of the values in the given list.\n    '''\n    return sum(lst[i]*lst[i+1] for i in range(len(lst)-1))\n    \ndef sum_of_products_iter(lst):\n    '''\n    Write a python function to return the sum of the products of the values in the given list, using iteration.\n    '''\n    res = 0\n    for i in range(len(lst)-1):\n        res += lst[i]*lst[i+1]\n    return res\n    \ndef sum_of_products_rec(lst):\n    '''\n    Write a python function to return the sum of the products of the values in the given list, using recursion.\n    '''\n    if not lst:\n        return 0\n    return lst[0]*lst[1] + sum_of_products_rec(lst[2:])\n    \ndef sum_of_products_rec_iter(lst):\n    '''\n    Write a python function to return the sum of the products of the values in the given list, using recursion, and iteration.\n    '''\n    if not lst:\n        return 0\n    return lst[0]*lst[1] + sum_of_products_rec_iter(lst[2:])\n    \ndef sum_of_products_rec_iter(lst):\n    '''\n    Write a python function to return the sum of the products of the values in the given list, using recursion, and iteration.\n    '''\n    if not lst:\n        return 0\n    return lst[0]*lst[1] + sum_of_products_rec_iter(lst[2:])\n    \ndef is_palindrome(str):\n    '''\n    Write a python function to return true if the given string is a palindrome, false otherwise.\n    '''\n    return str == str[::-1]\n    \ndef is_palindrome_iter(str):\n    '''\n    Write a python function to return true if the given string is a palindrome, false otherwise, using iteration.\n    '''\n    if len(str) <= 1:\n        return True\n    if str[0]!= str[-1]:\n        return False\n    return is_palindrome_iter(str[1:-1])\n    \ndef is_palindrome_rec(str):\n    '''\n    Write a python function to return true if the given string is a palindrome, false otherwise, using recursion.\n    '''\n    if not str:\n        return True\n    if str[0]!= st"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(i) for i in lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    t=0\n    for i in lst:\n        if i:\n            t+=1\n    return t\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(el) for el in lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) is bool:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if (type(i) is bool):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(i) for i in lst)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for l in test_list:\n        test_tup.append(l)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return (test_list + test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup += i,\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    tup_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    l = test_list\n    t = test_tup\n    l.append(t)\n    return l\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if not num1 and not num2 and not num3:\n        return []\n    if not num1:\n        return num2\n    if not num2:\n        return num1\n    if not num3:\n        return num1+num2\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    i,j,k = 0,0,0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            sorted_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num3[k]:\n            sorted_list.append(num2[j])\n            j += 1\n        else:\n            sorted_list.append(num3[k])\n            k += 1\n    return sorted_list\ndef merge_sorted_list_heap(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    from heapq import merge\n    return merge(num1,num2,num3)\ndef find_max_sub_array_with_divide_and_conquer(nums):\n    '''\n    Given an array of integers, find the maximum sum of a subarray of the array.\n    A subarray is defined as a contiguous sequence of numbers in an array.\n    For example, [2, 1, 5, 1, 3] has the following subarrays:\n    [2], [1], [5, 1], [1], [3], [5, 1, 3]\n    and their respective sums are 16, 7, 10, 4, 5, 15\n    '''\n    def helper(nums,start,end):\n        if start == end:\n            return nums[start]\n        mid = (start+end)/2\n        left_sum = helper(nums,start,mid)\n        right_sum = helper(nums,mid+1,end)\n        max_sum = max(left_sum,right_sum)\n        left_max_sum,right_max_sum = -float('inf'),-float('inf')\n        for i in xrange(mid-1,-1,-1):\n            left_max_sum = max(left_max_sum,left_sum-nums[i])\n            max_sum = max(max_sum,left_max_sum)\n        for i in xrange(mid+1,end+1):\n            right_max_sum = max(right_max_sum,right_sum-nums[i])\n            max_sum = max(max_sum,right_max_sum)\n        return max_sum\n    return helper(nums,0,len(nums)-1)\ndef find_max_sub_array_with_divide_and_conquer_optimized(nums):\n    '''\n    Given an array of integers, find the maximum sum of a subarray of the array.\n    A subarray is defined as a contiguous sequence of numbers in an array.\n    For example, [2, 1, 5, 1, 3] has the following subarrays:\n    [2], [1], [5, 1], [1], [3], [5, 1, 3]\n    and their respective sums are 16, 7, 10, 4, 5, 15\n    '''\n    def helper(nums,start,end):\n        if start == end:\n            return (nums[start],start,end)\n        mid = (start+end)/2\n        left_max,left_start,left_end = helper(nums,start,mid)\n        right_max,right_start,right_end = helper(nums,mid+1,end)\n        if left_max > right_max:\n            max_sum = left_max\n            max_start = left_start\n            max_end = left_end\n        else:\n            max_sum = right_max\n            max_start = right_start\n            max_end = right_end\n        left_sum = sum(nums[left_start:left_end+1])\n        right_sum = sum(nums[right_start:right_end+1])\n        max_sum_sum = max(left_sum,right_sum)\n        left_max_sum,right_max_sum = -float('inf'),-float('inf')\n        for i in xrange(mid-1,-1,-1):\n            left_max_sum = max(left_max_sum,left_sum-nums[i])\n            max_sum = max(max_sum,left_max_sum)\n        for i in xrange(mid+1,end+1):\n            right_max_sum = max(right_max_sum,right_sum-nums[i])\n            max_sum = max(max_sum,right_max_sum)\n        return (max_sum,max_start,max_end)\n    return helper(nums,0,len(nums)-1)[0]\ndef find_max_sub_array_with_divide_and_conquer_optimized_2(nums):\n    '''\n    Given an array of integers, find the maximum sum of a subarray of the array.\n    A subarray is defined as a contiguous sequence of numbers in an array.\n    For example, [2, 1, 5, 1, 3] has the following subarrays:\n    [2], [1], [5, 1], [1], [3], [5, 1, 3]\n    and their respective sums are 16, 7, 10, 4, 5, 15\n    '''\n    def helper(nums,start,end):\n        if start == end:\n            return (nums[start],start,end)\n        mid = (start+end)/2\n        left_max,left_start,left_end = helper(nums,start,mid)\n        right_max,right_start,right_end = helper(nums,mid+1,end)\n        if left_max > right_max:\n            max_sum = left_max\n            max_start = left_start\n            max_end = left_end\n        else:\n            max_sum = right_max\n            max_start = right_start\n            max_end = right_end\n        left_sum = sum(nums[left_start:left_end+1])\n        right_sum = sum(nums[right_start:right_end+1])\n        max_sum_sum = max(left_sum,right_sum)\n        left_max_sum,right_max_sum = -float('inf'),-float('inf')\n        for i in xrange(mid-1,-1,-1):\n            left_max_sum = max(left_max_sum,left_sum-nums[i])\n            max_sum = max(max_sum,left_max_sum)\n        for i in xrange(mid+1,end+1):\n            right_max_sum = max(right_max_sum,right_sum-nums[i])\n            max_sum = max(max_sum,right_max_sum)\n        return (max_sum,max_start,max_end)\n    return helper(nums,0,len(nums)-1)[0]\ndef find_max_sub_array_with_divide_and_conquer_optimized_3(nums):\n    '''\n    Given an array of integers, find the maximum sum of a subarray of the array.\n    A subarray is defined as a contiguous sequence of numbers in an array.\n    For example, [2, 1, 5, 1, 3] has the following subarrays:\n    [2], [1], [5, 1], [1], [3], [5, 1, 3]\n    and their respective sums are 16, 7, 10, 4, 5, 15\n    '''\n    def helper(nums,start,end):\n        if start == end:\n            return (nums[start],start,end)\n        mid = (start+end)/2\n        left_max,left_start,left_end = helper(nums,start,mid)\n        right_max,right_start,right_end = helper(nums,mid+1,end)\n        if left_max > right_max:\n            max_sum = left_max\n            max_start = left_start\n            max_end = left_end\n        else:\n            max_sum = right_max\n            max_start = right_start\n            max_end = right_end\n        left_sum = sum(nums[left_start:left_end+1])\n        right_sum = sum("
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heappush(num1,num2)\n    heapq.heappush(num1,num3)\n    return heapq.nsmallest(len(num1),num1)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    numlist = []\n    numlist.append(num1)\n    numlist.append(num2)\n    numlist.append(num3)\n    numlist.sort()\n    return numlist\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if not num1:\n        return num2\n    if not num2:\n        return num3\n    if not num3:\n        return num1\n    if num1[0] < num2[0] < num3[0]:\n        return num1 + num2 + num3\n    if num1[0] > num2[0]:\n        return num3 + num1 + num2\n    if num2[0] > num3[0]:\n        return num1 + num3 + num2\n    if num1[0] == num2[0]:\n        return num1 + num3 + num2\n    if num2[0] == num3[0]:\n        return num1 + num2 + num3\n    if num1[0] == num3[0]:\n        return num1 + num2 + num3\n    if num1[0] == num1[0]:\n        return num1 + num2 + num3\n    if num2[0] == num2[0]:\n        return num1 + num3 + num2\n    if num3[0] == num3[0]:\n        return num1 + num2 + num3\n    return num1 + num2 + num3\ndef merge_sorted_list_inplace(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if not num1:\n        return num2\n    if not num2:\n        return num3\n    if not num3:\n        return num1\n    if num1[0] < num2[0] < num3[0]:\n        return num1 + num2 + num3\n    if num1[0] > num2[0]:\n        return num3 + num1 + num2\n    if num2[0] > num3[0]:\n        return num1 + num3 + num2\n    if num1[0] == num2[0]:\n        return num1 + num3 + num2\n    if num2[0] == num3[0]:\n        return num1 + num2 + num3\n    if num1[0] == num3[0]:\n        return num1 + num2 + num3\n    if num1[0] == num1[0]:\n        return num1 + num2 + num3\n    if num2[0] == num2[0]:\n        return num1 + num3 + num2\n    if num3[0] == num3[0]:\n        return num1 + num2 + num3\n    return num1 + num2 + num3\ndef merge_sort(num_list):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if not num_list:\n        return []\n    if len(num_list) == 1:\n        return num_list\n    if len(num_list) == 2:\n        if num_list[0] > num_list[1]:\n            return [num_list[1], num_list[0]]\n        else:\n            return [num_list[0], num_list[1]]\n    mid = len(num_list) / 2\n    left = merge_sort(num_list[:mid])\n    right = merge_sort(num_list[mid:])\n    return merge_sorted_list(left, right)\ndef merge_sort_inplace(num_list):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if not num_list:\n        return []\n    if len(num_list) == 1:\n        return num_list\n    if len(num_list) == 2:\n        if num_list[0] > num_list[1]:\n            return [num_list[1], num_list[0]]\n        else:\n            return [num_list[0], num_list[1]]\n    mid = len(num_list) / 2\n    left = merge_sort_inplace(num_list[:mid])\n    right = merge_sort_inplace(num_list[mid:])\n    return merge_sorted_list_inplace(left, right)\ndef find_index(num_list, number):\n    '''\n    Write a function to find the index of a number in a sorted list.\n    '''\n    if not num_list:\n        return -1\n    if len(num_list) == 1:\n        if num_list[0] == number:\n            return 0\n        else:\n            return -1\n    mid = len(num_list) / 2\n    if num_list[mid] == number:\n        return mid\n    if num_list[mid] > number:\n        return find_index(num_list[:mid], number)\n    if num_list[mid] < number:\n        return find_index(num_list[mid:], number)\n    return -1\ndef find_index_inplace(num_list, number):\n    '''\n    Write a function to find the index of a number in a sorted list.\n    '''\n    if not num_list:\n        return -1\n    if len(num_list) == 1:\n        if num_list[0] == number:\n            return 0\n        else:\n            return -1\n    mid = len(num_list) / 2\n    if num_list[mid] == number:\n        return mid\n    if num_list[mid] > number:\n        return find_index_inplace(num_list[:mid], number)\n    if num_list[mid] < number:\n        return find_index_inplace(num_list[mid:], number)\n    return -1\ndef get_longest_sliding_window(nums, k):\n    '''\n    Write a function to find the longest sliding window in a given list.\n    '''\n    if not nums:\n        return []\n    if len(nums) < k:\n        return []\n    if k == 1:\n        return nums\n    left_pointer = 0\n    right_pointer = k - 1\n    result = []\n    while right_pointer < len(nums):\n        result.append(nums[left_pointer])\n        left_pointer += 1\n        right_pointer += 1\n        while left_pointer <= right_pointer and right_pointer < len(nums):\n            result.append(nums[right_pointer])\n            right_pointer += 1\n    return result\ndef max_sliding_window(nums, k):\n    '''\n    Write a function to find the maximum sliding window in a given list.\n    '''\n    if not nums:\n        return []\n    if len(nums) < k:\n        return []\n    if k == 1:\n        return nums\n    left_pointer = 0\n    right_pointer = k - 1\n    result = []\n    while right_pointer < len(nums):\n        result.append(max(nums[left_pointer:right_pointer + 1]))\n        left_pointer += 1\n        right_pointer += 1\n        while left_pointer <= right_pointer and right_pointer < len(nums):\n            result.append(max(nums[left_pointer:right_pointer + 1]))\n            left_pointer += 1\n            right_pointer += 1\n    return result\ndef min_sliding_window(nums, k):\n    '''\n    Write a function to find the minimum sliding window in a given list.\n    '''\n    if not nums:\n        return []\n    if len(nums) < k:\n        return []\n    if k == 1:\n        return nums\n    left_pointer = 0\n    right_pointer = k - 1\n    result = []\n    while right_pointer < len(nums):\n        result.append(min(nums[left_pointer:right_pointer + 1]))\n        left_pointer += 1\n        right_pointer += 1\n        while left_pointer <= right_pointer and right_pointer < len(nums):\n            result.append(min(nums[left_pointer:right_pointer + 1]))\n            left_pointer += 1\n            right_pointer += 1\n    return result\ndef get_maximum_value_in_sliding_window(nums, k):\n    '''\n    Write a function to find the maximum value of a list in a sliding window.\n    '''\n    if not nums:\n        return []\n    if len(nums) < k:\n        return ["
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    nums = [num1,num2,num3]\n    merged_list = []\n    for i in range(3):\n        if i == 2:\n            merged_list += nums[i]\n        else:\n            merged_list += nums[i]\n            for j in range(i,1,-1):\n                if nums[j] < nums[j-1]:\n                    nums[j],nums[j-1] = nums[j-1],nums[j]\n    print(merged_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=[num1,num2,num3]\n    l2=[]\n    for i in l1:\n        if i!= None:\n            l2.append(i)\n    l2.sort()\n    return l2\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    result = []\n    while(len(num1)!=0 or len(num2)!=0 or len(num3)!=0):\n        if(len(num1)==0):\n            result.extend(num2)\n            num2=[]\n        elif(len(num2)==0):\n            result.extend(num3)\n            num3=[]\n        else:\n            if num1[0]<num2[0] and num1[0]<num3[0]:\n                result.append(num1[0])\n                num1=num1[1:]\n            elif num2[0]<num1[0] and num2[0]<num3[0]:\n                result.append(num2[0])\n                num2=num2[1:]\n            elif num3[0]<num1[0] and num3[0]<num2[0]:\n                result.append(num3[0])\n                num3=num3[1:]\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # first build a dict of {integer: binary string}\n    bins = {}\n    for i in range(0,n):\n        bins[i] = \"\"\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_bits(x):\n        count = 0\n        while x > 0:\n            count += x&1\n            x >>= 1\n        return count\n    \n    bit_list = [0]*n\n    bit_list[0] = count_bits(s)\n    \n    for i in xrange(1,n):\n        s = (s << 1) | (s>>(i-1))\n        bit_list[i] = count_bits(s)\n        \n    return bit_list.count(1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def rotate(string,n):\n        rotated_string = \"\"\n        for i in range(len(string)):\n            rotated_string += string[(i+n)%len(string)]\n        return rotated_string\n    output = 0\n    for i in range(n):\n        s = rotate(s,1)\n        for j in s:\n            if j == '1':\n                output += 1\n    return output\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        temp=str(s)\n        temp=temp[1:]+temp[0]\n        if int(temp,2)%2!=0:\n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    import numpy as np\n    n = n%len(s)\n    return sum(np.where(np.array(list(s))%2 == 1,1,0)  \n            for _ in range(n))\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    bin_s = ''.join(bin(ord(i))[2:].zfill(8) for i in s)\n    if (n % 2 == 0):\n        return bin_s.count('1')\n    else:\n        return bin_s.count('1')\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    a=[]\n    for i in range(n):\n        a.append(int(s[i:]+s[:i],2))\n    return(len([i for i in a if i%2==1]))\n    \ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    a=[]\n    for i in range(n):\n        a.append(int(s[i:]+s[:i],2))\n    return(len([i for i in a if i%2==1]))\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # def count_ones(s):\n    #     return len([i for i in s if i == '1'])\n    # def count_zeros(s):\n    #     return len([i for i in s if i == '0'])\n    # s=input()\n    # n=int(input())\n    # a,b=s,s\n    # for i in range(n):\n    #     a,b=b,a\n    # return count_ones(a)+count_zeros(b)\n    # return len([i for i in s if i == '1']) + len([i for i in s if i == '0'])\n    def bin_String(s,n):\n        b=''\n        for i in range(n):\n            b+='0'\n        return b\n    def bin_rotate(s,n):\n        b=''\n        for i in range(n):\n            b+=s[-1]\n            s=s[:-1]\n        return s+b\n    def bin_to_dec(s,n):\n        dec=0\n        for i in range(n):\n            dec*=2\n            dec+=int(s[i])\n        return dec\n    def dec_to_bin(s,n):\n        a=''\n        while s>0:\n            a+=str(s%2)\n            s//=2\n        while len(a)<n:\n            a='0'+a\n        return a\n    def rot(s,n):\n        return bin_rotate(s,n)[:len(s)]\n    def count_ones(s):\n        return bin_to_dec(s,len(s))\n    def count_zeros(s):\n        return bin_to_dec(s,len(s))\n    s=input()\n    n=int(input())\n    a,b=s,s\n    for i in range(n):\n        a,b=b,a\n    return count_ones(a)+count_zeros(b)\n    # return len([i for i in s if i == '1']) + len([i for i in s if i == '0'])\n    # return bin_to_dec(s,len(s))\n    # return len([i for i in s if i == '1']) + len([i for i in s if i == '0'])\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    #for all numbers between 0 and n\n    for i in range(n+1):\n        #if the binary representation of i is odd\n        if bin(i).count(\"1\") % 2 == 1:\n            #add to count\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        if s == '1':\n            return n\n        else:\n            return 0\n    else:\n        if n == 0:\n            if s[0] == '0':\n                return 1\n            else:\n                return 0\n        else:\n            if n%2 == 1:\n                return (odd_Equivalent(s[1:],n-1) + odd_Equivalent(s[:-1],n-1)) % MOD\n            else:\n                return (odd_Equivalent(s[1:],n) + odd_Equivalent(s[:-1],n)) % MOD\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    newlist = []\n    for i in nestedlist:\n        if type(i) is list:\n            newlist.extend(common_in_nested_lists(i))\n        else:\n            newlist.append(i)\n    return newlist\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for item in nestedlist:\n        if type(item) == list:\n            common = list(set(common).intersection(set(common_in_nested_lists(item))))\n        else:\n            common.append(item)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = [[1, 2], [1, 3], [1, 4]]\n    # nestedlist = [[1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3], [4, 4, 4, 4, 4]]\n    common_in_nested_list = set([])\n    for sublist in nestedlist:\n        for i in sublist:\n            common_in_nested_list.add(i)\n    print(\"Common elements in nested lists: \", common_in_nested_list)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for i in nestedlist:\n        for j in i:\n            common.add(j)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # approach1\n    #set1 = set(nestedlist[0])\n    #print(set1)\n    #for i in range(1,len(nestedlist)):\n    #    set2 = set(nestedlist[i])\n    #    print(set2)\n    #    print(set1.intersection(set2))\n    #    print(set1.union(set2))\n    #    print(set1)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    newlist=[]\n    for i in nestedlist:\n        for j in i:\n            if j not in newlist:\n                newlist.append(j)\n    return newlist\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for item in nestedlist:\n        for other_item in nestedlist:\n            if item!= other_item:\n                if other_item in item:\n                    common_list.append(other_item)\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #Expected output:\n    # [1, 2, 4, 5, 7]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def _common_in_nested_lists(list1,list2):\n        list1 = list(list1)\n        list2 = list(list2)\n        result = []\n        while list1 and list2:\n            if list1[0] == list2[0]:\n                result.append(list1.pop(0))\n                list2.pop(0)\n            elif list1[0] > list2[0]:\n                list1.pop(0)\n            else:\n                list2.pop(0)\n        return result\n    if not nestedlist:\n        return []\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    return _common_in_nested_lists(nestedlist[0],nestedlist[1]) + common_in_nested_lists(nestedlist[2:])\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if not nestedlist[i][j] in result:\n                result.append(nestedlist[i][j])\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    def check(text):\n        if text[0] in ['-', '+']:\n            return True\n        elif text[0] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            return True\n        else:\n            return False\n    \n    if check(text):\n        return int(text)\n    else:\n        raise ValueError('Not an integer')\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if not text.isdigit():\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # A list of dictionaries, check the length of each dictionary\n    for i in list1:\n        if len(i)>0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    empty_list = [x for x in list1 if x]\n    if empty_list == list1:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\ndef empty_list(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\ndef flatten_list(aList):\n    '''\n    Write a function to flatten a nested list (no recursion).\n    '''\n    result = []\n    for sublist in aList:\n        for item in sublist:\n            result.append(item)\n    return result\ndef get_num_list_elements(num_list):\n    '''\n    Write a function to get the number of elements in a list.\n    '''\n    return sum(1 for i in num_list)\ndef remove_from_list(num_list, elem):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    while elem in num_list:\n        num_list.remove(elem)\n    return num_list\ndef remove_duplicates(num_list):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    s = set()\n    for i in num_list:\n        if i not in s:\n            s.add(i)\n    return s\ndef add_to_list(num_list, elem):\n    '''\n    Write a function to add an element to a list.\n    '''\n    return num_list+[elem]\ndef append_to_list(num_list, elem):\n    '''\n    Write a function to add an element to a list.\n    '''\n    return num_list.append(elem)\ndef length_list(num_list):\n    '''\n    Write a function to get the length of a list.\n    '''\n    return len(num_list)\ndef concatenate_list(num_list1, num_list2):\n    '''\n    Write a function to concatenate two lists.\n    '''\n    return num_list1 + num_list2\ndef check_common_elements(num_list1, num_list2):\n    '''\n    Write a function to check whether all elements in a list are present in another list.\n    '''\n    return not set(num_list1) - set(num_list2)\ndef is_subset(set1, set2):\n    '''\n    Write a function to check whether one list is a subset of another list.\n    '''\n    return set1.issubset(set2)\ndef find_common_elements(num_list1, num_list2):\n    '''\n    Write a function to find common elements of two lists.\n    '''\n    return not set(num_list1) - set(num_list2)\ndef count_common_elements(num_list1, num_list2):\n    '''\n    Write a function to count the number of common elements of two lists.\n    '''\n    return len(find_common_elements(num_list1, num_list2))\ndef find_union_of_two_lists(num_list1, num_list2):\n    '''\n    Write a function to find union of two lists.\n    '''\n    return set(num_list1).union(num_list2)\ndef find_intersection_of_two_lists(num_list1, num_list2):\n    '''\n    Write a function to find intersection of two lists.\n    '''\n    return set(num_list1).intersection(num_list2)\ndef find_difference_of_two_lists(num_list1, num_list2):\n    '''\n    Write a function to find difference of two lists.\n    '''\n    return set(num_list1).difference(num_list2)\ndef find_symmetric_difference_of_two_lists(num_list1, num_list2):\n    '''\n    Write a function to find symmetric difference of two lists.\n    '''\n    return set(num_list1).symmetric_difference(num_list2)\ndef is_intersecting(set1, set2):\n    '''\n    Write a function to check whether two sets are intersecting or not.\n    '''\n    return not set1.isdisjoint(set2)\ndef find_intersecting_elements(set1, set2):\n    '''\n    Write a function to find intersecting elements of two sets.\n    '''\n    return set1.intersection(set2)\ndef find_differing_elements(set1, set2):\n    '''\n    Write a function to find differing elements of two sets.\n    '''\n    return set1.difference(set2)\ndef find_symmetric_differing_elements(set1, set2):\n    '''\n    Write a function to find symmetric_differing elements of two sets.\n    '''\n    return set1.symmetric_difference(set2)\ndef find_all_elements(set1, set2):\n    '''\n    Write a function to find all elements of one set in another.\n    '''\n    return not set1.isdisjoint(set2)\ndef find_no_elements(set1, set2):\n    '''\n    Write a function to find no elements of one set in another.\n    '''\n    return set1.isdisjoint(set2)\ndef find_common_elements_of_two_dicts(dict1, dict2):\n    '''\n    Write a function to find common elements of two dictionaries.\n    '''\n    return set(dict1.keys()).intersection(dict2.keys())\ndef find_union_of_two_dicts(dict1, dict2):\n    '''\n    Write a function to find union of two dictionaries.\n    '''\n    return set(dict1.keys()).union(dict2.keys())\ndef find_intersection_of_two_dicts(dict1, dict2):\n    '''\n    Write a function to find intersection of two dictionaries.\n    '''\n    return set(dict1.keys()).intersection(dict2.keys())\ndef find_difference_of_two_dicts(dict1, dict2):\n    '''\n    Write a function to find difference of two dictionaries.\n    '''\n    return set(dict1.keys()).difference(dict2.keys())\ndef find_symmetric_difference_of_two_dicts(dict1, dict2):\n    '''\n    Write a function to find symmetric difference of two dictionaries.\n    '''\n    return set(dict1.keys()).symmetric_difference(dict2.keys())\ndef is_subset_of(set1, set2):\n    '''\n    Write a function to check whether a set is a subset of another set.\n    '''\n    return set1.issubset(set2)\ndef find_subset_of(set1, set2):\n    '''\n    Write a function to find subset of another set.\n    '''\n    return set1.issubset(set2)\ndef find_superset_of(set1, set2):\n    '''\n    Write a function to find superset of another set.\n    '''\n    return set2.issuperset(set1)\ndef find_superset_of_two_sets(set1, set2):\n    '''\n    Write a function to find superset of two sets.\n    '''\n    return set1.issuperset(set2)\ndef is_inclusive(set1, set2):\n    '''\n    Write a function to check whether one set is inclusive of another set.\n    '''\n    return set1.issubset(set2) or set1.issuperset(set2)\ndef find_inclusive_of(set1, set2):\n    '''\n    Write a function to find inclusive of two sets.\n    '''\n    return set1.issubset(set2) or set1.issuperset(set2)\ndef find_exclusive_of(set1, set2):\n    '''\n    Write a function to find exclusive of two sets.\n    '''\n    return not set1.issubset(set2) and no"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    count = 0\n    for i in list1:\n        if len(i) > 0:\n            count += 1\n    if count == len(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    tuple_to_int = 0\n    for i in nums:\n        tuple_to_int = tuple_to_int * 10 + i\n    return tuple_to_int\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    ret = 0\n    for i in nums:\n        ret = ret * 10 + i\n    return ret\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for i in nums:\n        num = num*10 + i\n    return num\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return functools.reduce(lambda x, y: x*10 + y, nums, 0)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(n) for n in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x, y: x * y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum([int(i) for i in nums])\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\nprint(tuple_to_int((1,2,3)))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return nums[0] * 10 + nums[1]\n    else:\n        return nums[0] * 100 + nums[1] * 10 + nums[2]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum([num**2 for num in nums])\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        try:\n            result.append(float(item))\n        except ValueError:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for list_of_lists in test_list:\n        float_list.append([float(elem) for elem in list_of_lists])\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for i in test_list:\n        try:\n            float_list.append(float(i))\n        except ValueError:\n            float_list.append(float(i))\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index in range(len(test_list)):\n        for elem in range(len(test_list[index])):\n            try:\n                test_list[index][elem] = float(test_list[index][elem])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for list in test_list:\n        for index, item in enumerate(list):\n            try:\n                list[index] = float(item)\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for x in range(len(test_list)):\n        for y in range(len(test_list[x])):\n            try:\n                test_list[x][y] = float(test_list[x][y])\n            except ValueError:\n                test_list[x][y] = np.nan\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(' ')\n    return string\n    \ndef get_words_from_list(string):\n    '''\n    Write a function to convert a list of strings to a list of words.\n    '''\n    string =''.join(string)\n    return string.split(' ')\n    \ndef count_words(string):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    count = 0\n    for word in string.split(' '):\n        count += 1\n    return count\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string == string[::-1]:\n        return True\n    return False\n    \ndef is_palindrome2(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string[0:int(len(string)/2)] == string[len(string)-1:int(len(string)/2)-1:-1]:\n        return True\n    return False\n    \ndef is_palindrome3(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome4(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string[::-1] == string\n    \ndef is_palindrome5(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    #return string[::-1] == string\n    #return len(string) % 2 == 0\n    return string[::-1] == string[:int(len(string)/2)]\n    \ndef is_palindrome6(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string[:int(len(string)/2)] == string[::-1][:int(len(string)/2)]\n    \ndef is_palindrome7(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string[::-1] == string[:int(len(string)/2)][::-1]\n    \ndef is_palindrome8(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[::-1][:int(len(string)/2)]\n    \ndef is_palindrome9(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[::-1][:int(len(string)/2)][::-1]\n    \ndef is_palindrome10(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[:int(len(string)/2)][::-1]\n    \ndef is_palindrome11(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[::-1][:int(len(string)/2)][::-1]\n    \ndef is_palindrome12(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[::-1][:int(len(string)/2)][::-1]\n    \ndef is_palindrome13(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[:int(len(string)/2)][::-1]\n    \ndef is_palindrome14(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[::-1][:int(len(string)/2)][::-1]\n    \ndef is_palindrome15(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[:int(len(string)/2)][::-1]\n    \ndef is_palindrome16(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[::-1][:int(len(string)/2)][::-1]\n    \ndef is_palindrome17(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[:int(len(string)/2)][::-1]\n    \ndef is_palindrome18(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[::-1][:int(len(string)/2)][::-1]\n    \ndef is_palindrome19(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[:int(len(string)/2)][::-1]\n    \ndef is_palindrome20(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[::-1][:int(len(string)/2)][::-1]\n    \ndef is_palindrome21(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[:int(len(string)/2)][::-1]\n    \ndef is_palindrome22(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[::-1][:int(len(string)/2)][::-1]\n    \ndef is_palindrome23(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[:int(len(string)/2)][::-1]\n    \ndef is_palindrome24(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[::-1][:int(len(string)/2)][::-1]\n    \ndef is_palindrome25(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return len(string) % 2 == 0 and string[:int(len(string)/2)] == string[:int(len(string)/2)][::-1]\n    \ndef is_palindrome26(string):\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list of strings to a single string.\n    '''\n    string = \"\"\n    for element in list:\n        string += element + \" \"\n    return string.rstrip()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = string.split(\" \")\n    return l\n    \ndef test_string_to_list():\n    assert string_to_list(\"Hello, World\") == ['Hello', 'World']\n    assert string_to_list(\"Hello,World\") == ['Hello', 'World']\n    assert string_to_list(\"Hello,  World\") == ['Hello', 'World']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split()\n    return list\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    def find_element(arr):\n        low = 0\n        high = len(arr)-1\n        \n        while low <= high:\n            mid = (low+high)//2\n            \n            if arr[mid] == arr[mid-1] and mid!=0:\n                low = mid+1\n            elif arr[mid] == arr[mid+1]:\n                high = mid-1\n            else:\n                return arr[mid]\n        \n    return find_element(arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for index in range(len(arr)):\n        if arr[index] == arr[index + 1]:\n            return arr[index]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] and arr[mid] == arr[mid + 1]:\n            return arr[mid]\n        if arr[mid] == arr[mid - 1]:\n            right = mid - 1\n        elif arr[mid] == arr[mid + 1]:\n            left = mid + 1\n        else:\n            return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1] and arr[i]!= arr[i+1]:\n            return arr[i]\n        \narr = [1,2,3,3,3,3,4,4,4,4]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def find_unique_elem(arr):\n        start = 0\n        end = len(arr) - 1\n        while start <= end:\n            mid = start + (end - start) / 2\n            if mid - 1 >= 0 and arr[mid - 1] == arr[mid]:\n                start = mid + 1\n            elif mid + 1 <= len(arr) - 1 and arr[mid] == arr[mid + 1]:\n                end = mid - 1\n            else:\n                return arr[mid]\n    return find_unique_elem(arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i]!= arr[arr.index(arr[i])]:\n            return arr[i]\n    return arr[-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==1:\n        return arr[0]\n    mid = len(arr)/2\n    left = arr[:mid]\n    right = arr[mid:]\n    leftSearch = search(left)\n    rightSearch = search(right)\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    while i < len(arr):\n        if arr.count(arr[i]) == 1:\n            return arr[i]\n        i = i+1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if arr[mid] == arr[mid + 1] and mid % 2 == 0:\n            i = mid + 2\n        elif arr[mid] == arr[mid + 1] and mid % 2 == 1:\n            j = mid - 2\n        elif arr[mid]!= arr[mid + 1]:\n            return arr[mid]\n    return -1\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    res = (0, 0)\n    for pair in list1:\n        res = max(res, tuple_product(pair))\n    return res\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for tuple1 in list1:\n        list2.append(tuple1[0] * tuple1[1])\n    return max(list2)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    tuples = []\n    for i in list1:\n        tuples.append((abs(i[0] * i[1]),i[0],i[1]))\n    tuples.sort(reverse=True)\n    if len(tuples) % 2 == 1:\n        return tuples[0]\n    else:\n        return (tuples[0][0],tuples[1][0])\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    if len(list1) == 0:\n        return 0\n    else:\n        for i in list1:\n            for j in list1:\n                if i < j:\n                    list2.append(i * j)\n    return max(list2)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if max < abs(list1[i][0]*list1[j][1]):\n                max = abs(list1[i][0]*list1[j][1])\n            if max < abs(list1[i][1]*list1[j][0]):\n                max = abs(list1[i][1]*list1[j][0])\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = list1[0][0] * list1[0][1]\n    for i in range(len(list1)):\n        if (list1[i][0] * list1[i][1]) > max_product:\n            max_product = list1[i][0] * list1[i][1]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for x in list1:\n        for y in x:\n            list2.append(y)\n    list2 = sorted(list2)\n    list3 = []\n    for x in list2:\n        if x not in list3:\n            list3.append(x)\n    a = 0\n    while a < (len(list3)-1):\n        product = list3[a] * list3[a+1]\n        if product > a:\n            a = a + 2\n        else:\n            a = a + 1\n    return (list3[-1], list3[-2])\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    lst = [x[0]*x[1] for x in list1]\n    return max(lst)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return (0,0)\n    elif len(list1) == 2:\n        return (abs(list1[0][0]*list1[1][1]), min(list1[0][0], list1[1][1]))\n    else:\n        temp_max = (0,0)\n        for i in xrange(len(list1)):\n            for j in xrange(len(list1)):\n                if i!= j:\n                    temp_tuple = (list1[i][0]*list1[j][1], min(list1[i][0], list1[j][1]))\n                    if temp_tuple[0] > temp_max[0]:\n                        temp_max = temp_tuple\n        return temp_max\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, abs(list1[i][0] * list1[j][1]))\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        if num > 1:\n            if num == sum(divisors(num)):\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    res = 0\n    for i in range(1, limit+1):\n        a = i\n        b = sum(divisors(a))\n        if a!= b and sum(divisors(b)) == a:\n            res += a + b\n    return res\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = []\n    for num in range(1,limit):\n        if num not in amicable_nums:\n            sum_1 = sum(divisors(num))\n            sum_2 = sum(divisors(sum_1))\n            if sum_1 == sum_2 and num!= sum_1:\n                amicable_nums.append(num)\n                amicable_nums.append(sum_1)\n    return sum(amicable_nums)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for number in range(1,limit+1):\n        if get_sum_of_divisors(number) == get_sum_of_divisors(get_sum_of_divisors(number)) and number!= get_sum_of_divisors(number):\n            amicable_numbers.append(number)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit):\n        amicable_numbers.add(i)\n    for i in range(1, limit):\n        sum_amicable_number = sum_divisors(i)\n        if sum_amicable_number <= limit:\n            if i == sum_amicable_number and i!= sum_divisors(sum_amicable_number):\n                amicable_numbers.add(sum_amicable_number)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for i in range(1, limit):\n        amicable_numbers_sum += i\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for x in range(1, limit):\n        if is_amicable(x):\n            result += x\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(2, limit + 1):\n        sum_of_divisors = sum_of_divisors_of(i)\n        if sum_of_divisors!= i and sum_of_divisors in range(2, limit + 1):\n            amicable_numbers.add(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum([i for i in range(1,limit) if sum(divisors(i)) == i and sum(divisors(sum(divisors(i)))) == i])\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1,limit):\n        if num not in amicable_numbers:\n            temp = sum_of_divisors(num)\n            if sum_of_divisors(temp) == num:\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    from cmath import phase\n    return phase(a/b)\n    \ndef gen_permutations(a):\n    '''\n    Write a function to generate all permutations of a string\n    '''\n    def permute(a,x,num_string,result):\n        if len(a)==0:\n            result.append(num_string)\n        else:\n            for i in range(0,len(a)):\n                permute(a[:i]+a[i+1:],x+a[i],num_string+str(a[i]),result)\n    result=[]\n    permute(a,\"\",'',result)\n    return result\n    \ndef substring_concatenation(s1,s2):\n    '''\n    Write a function that takes two strings and returns a new string that is the concatenation of the two strings except for the first char in each.\n    '''\n    if len(s1)>len(s2):\n        return s2[:1]+s1[1:]\n    return s1[:1]+s2[1:]\n    \ndef element_reps(s):\n    '''\n    Write a function that returns a string with all the repeated letters replaced with the number of repetitions of that letter.\n    '''\n    s=s.lower()\n    res=\"\"\n    for i in s:\n        if i not in res:\n            res+=i\n            if res[-1]==i:\n                res+=str(1)\n            else:\n                res+=str(0)\n    return res\n    \ndef num_digits(n):\n    '''\n    Write a function that takes a non-negative integer and returns the number of digits it has.\n    '''\n    res=0\n    while n>=1:\n        n//=10\n        res+=1\n    return res\n    \ndef add_digits(n):\n    '''\n    Write a function that takes a non-negative integer and returns the sum of its digits.\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef num_adjacent_digits(n):\n    '''\n    Write a function that takes a non-negative integer and returns the number of adjacent digits that are equal.\n    '''\n    n=str(n)\n    for i in range(0,len(n)-1):\n        if n[i]==n[i+1]:\n            return 1+num_adjacent_digits(n[i+2:])\n    return 0\n    \ndef num_distinct_digits(n):\n    '''\n    Write a function that takes a non-negative integer and returns the number of distinct digits in it.\n    '''\n    res=set()\n    n=str(n)\n    for i in n:\n        res.add(i)\n    return len(res)\n    \ndef int_to_string(n):\n    '''\n    Write a function that takes an integer and returns a string representation of that integer in the format xyz, where xyz is the integer in base 10.\n    '''\n    if n==0:\n        return '0'\n    res=\"\"\n    while n>0:\n        res+=str(n%10)\n        n//=10\n    return res[::-1]\n    \ndef factorial(n):\n    '''\n    Write a function that takes a non-negative integer and returns the factorial of that integer.\n    '''\n    if n<0:\n        return None\n    if n==0:\n        return 1\n    res=1\n    for i in range(1,n+1):\n        res*=i\n    return res\n    \ndef count_lone_adjacent_digits(n):\n    '''\n    Write a function that takes a non-negative integer and returns the number of adjacent distinct digits in that integer.\n    '''\n    def digit_count(n):\n        res=0\n        while n>0:\n            res+=1\n            n//=10\n        return res\n    cnt=0\n    n=str(n)\n    for i in range(0,len(n)-1):\n        if n[i]!=n[i+1]:\n            cnt+=1\n    cnt+=digit_count(n[i+2:])\n    return cnt\n    \ndef is_pandigital(n,digits):\n    '''\n    Write a function that takes a non-negative integer and returns True if that integer contains all the digits of the number 'digits'.\n    '''\n    n=str(n)\n    for i in digits:\n        if i not in n:\n            return False\n    return True\n    \ndef rotate_digits(n,k):\n    '''\n    Write a function that takes a non-negative integer and returns a string with the digits of the integer rotated k places to the left.\n    '''\n    n=str(n)\n    if len(n)==1:\n        return n\n    k=k%len(n)\n    n=n[-k:]+n[:-k]\n    return n\n    \ndef increasing_triangles(n):\n    '''\n    Write a function that takes a non-negative integer and returns the sum of the triangular numbers up to that integer.\n    '''\n    res=0\n    for i in range(1,n+1):\n        res+=i*(i+1)/2\n    return res\n    \ndef num_divisors(n):\n    '''\n    Write a function that takes a non-negative integer and returns the number of divisors of that integer.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    res=0\n    for i in range(1,n+1):\n        if n%i==0:\n            res+=1\n    return res\n    \ndef all_pairs_distinct(l):\n    '''\n    Write a function that takes a list of numbers and returns True if all the numbers in the list are distinct and False otherwise.\n    '''\n    res=True\n    for i in l:\n        for j in l:\n            if i==j:\n                res=False\n    return res\n    \ndef all_pairs_distinct2(l):\n    '''\n    Write a function that takes a list of numbers and returns True if all the numbers in the list are distinct.\n    '''\n    res=True\n    for i in l:\n        for j in l:\n            if i==j:\n                res=False\n    return res\n    \ndef divisor_chain(n):\n    '''\n    Write a function that takes a number and returns a list of numbers that are the divisors of that number in the chain of proper divisors.\n    '''\n    res=[]\n    if n==1:\n        return res\n    for i in range(1,n+1):\n        if n%i==0:\n            res.append(i)\n    return res\n    \ndef divisor_chain2(n):\n    '''\n    Write a function that takes a number and returns a list of numbers that are the divisors of that number in the chain of proper divisors.\n    '''\n    res=[]\n    if n==1:\n        return res\n    if n%2==0:\n        res.append(2)\n    for i in range(3,int(n**.5)+1,2):\n        if n%i==0:\n            res.append(i)\n            res.append(n//i)\n    res.append(n)\n    return res\n    \ndef is_palindrome(n):\n    '''\n    Write a function that takes a non-negative integer and returns True if that integer is palindrome or False otherwise.\n    '''\n    n=str(n)\n    if len(n)==1:\n        return True\n    if n[0]!=n[-1]:\n        return False\n    return is_palindrome(n[1:-1])\n    \ndef is_palindrome_bit(n):\n    '''\n    Write a function that takes a non-negative integer and returns True if that integer is palindrome or False otherwise.\n    '''\n    n=str(n)\n    if len(n)==1:\n        return True\n    res=0\n    for i in range(len(n)//2):\n        if n[i]!=n[-1-i]:"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.real == 0 and b.imag == 0:\n        return 0\n    elif b.imag == 0:\n        if a.real < 0:\n            return cmath.pi\n        else:\n            return 0\n    else:\n        angle = cmath.phase(complex(a.real, b.imag))\n        if angle < 0:\n            return 2*cmath.pi + angle\n        else:\n            return angle\n        \n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a+b*1j\n    return cmath.phase(c)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef dot_product(a,b):\n    '''\n    Write a function to calculate the dot product of two vectors.\n    '''\n    assert len(a)==len(b)\n    return sum([a[i]*b[i] for i in range(len(a))])\ndef gcd(a,b):\n    '''\n    Write a function to get the greatest common divisor of two integers.\n    '''\n    while b:\n        a,b=b,a%b\n    return a\ndef mod(a,b):\n    '''\n    Write a function to calculate the remainder when a is divided by b.\n    '''\n    assert a>=0 and b>0\n    return a-int(a/b)*b\ndef mod_complex(a,b):\n    '''\n    Write a function to calculate the modulus of a complex number.\n    '''\n    assert len(a)==2\n    return (a[0]**2+a[1]**2)**.5\ndef mod_float(a,b):\n    '''\n    Write a function to calculate the modulus of a float.\n    '''\n    return abs(a)%b\ndef mod_int(a,b):\n    '''\n    Write a function to calculate the modulus of an integer.\n    '''\n    return a%b\ndef modular_multiplicative_inverse(a,b):\n    '''\n    Write a function to calculate the modular multiplicative inverse of two integers.\n    '''\n    for x in range(1,b):\n        if (a*x)%b == 1:\n            return x\n    return None\ndef xgcd(a,b):\n    '''\n    Write a function to find the greatest common divisor of two integers.\n    '''\n    assert b>=0\n    while b:\n        a,b=b,a%b\n    return a\ndef gcd_arr(a,b):\n    '''\n    Write a function to find the greatest common divisor of an array of integers.\n    '''\n    assert len(a)==len(b)\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return a[0]\n    return gcd(a[0],gcd_arr(a[1:],b))\ndef gcd_arr_float(a,b):\n    '''\n    Write a function to find the greatest common divisor of an array of float.\n    '''\n    assert len(a)==len(b)\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return mod_float(a[0],b[0])\n    return gcd_arr_float([a[i]/b[0] for i in range(len(a))],b)\ndef gcd_arr_int(a,b):\n    '''\n    Write a function to find the greatest common divisor of an array of integers.\n    '''\n    assert len(a)==len(b)\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return mod_int(a[0],b[0])\n    return gcd_arr_int([a[i]/b[0] for i in range(len(a))],b)\ndef lcm(a,b):\n    '''\n    Write a function to calculate the least common multiple of two integers.\n    '''\n    assert a>=0 and b>=0\n    return a*b/gcd(a,b)\ndef lcm_arr(a,b):\n    '''\n    Write a function to calculate the least common multiple of an array of integers.\n    '''\n    assert len(a)==len(b)\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return lcm(a[0],b[0])\n    return lcm(a[0],lcm_arr(a[1:],b))\ndef lcm_arr_float(a,b):\n    '''\n    Write a function to calculate the least common multiple of an array of float.\n    '''\n    assert len(a)==len(b)\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return lcm(a[0],b[0])\n    return lcm_arr_float([a[i]/b[0] for i in range(len(a))],b)\ndef lcm_arr_int(a,b):\n    '''\n    Write a function to calculate the least common multiple of an array of integers.\n    '''\n    assert len(a)==len(b)\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return lcm(a[0],b[0])\n    return lcm_arr_int([a[i]/b[0] for i in range(len(a))],b)\ndef lcm_arr_complex(a,b):\n    '''\n    Write a function to calculate the least common multiple of an array of complex numbers.\n    '''\n    assert len(a)==len(b)\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return lcm(a[0],b[0])\n    return lcm_arr_complex([a[i]/b[0] for i in range(len(a))],b)\ndef gcd_arr_float(a,b):\n    '''\n    Write a function to find the greatest common divisor of an array of floats.\n    '''\n    assert len(a)==len(b)\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return mod_float(a[0],b[0])\n    return gcd_arr_float([a[i]/b[0] for i in range(len(a))],b)\ndef gcd_arr_int(a,b):\n    '''\n    Write a function to find the greatest common divisor of an array of integers.\n    '''\n    assert len(a)==len(b)\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return mod_int(a[0],b[0])\n    return gcd_arr_int([a[i]/b[0] for i in range(len(a))],b)\ndef gcd_arr_complex(a,b):\n    '''\n    Write a function to find the greatest common divisor of an array of complex numbers.\n    '''\n    assert len(a)==len(b)\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return mod_complex(a[0],b[0])\n    return gcd_arr_complex([a[i]/b[0] for i in range(len(a))],b)\ndef euler_phi(a):\n    '''\n    Write a function to find the Euler's phi function of an integer.\n    '''\n    assert a>=0\n    if a<2:\n        return 1\n    return (a-1)*euler_phi(a-1)\ndef euler_phi_arr(a):\n    '''\n    Write a function to find the Euler's phi function of an array of integers.\n    '''\n    assert len(a)>0\n    if len(a)==1:\n        return euler_phi(a[0])\n    return euler_phi_arr([a[i] for i in range(len(a))])\ndef euler_phi_float(a):\n    '''\n    Write a function to find the Euler's phi function of a float.\n    '''\n    assert a>0\n    return euler_phi_arr([a])\ndef euler_phi_int(a):\n    '''\n    Write a function to find the Euler's phi function of an integer.\n    '''\n    assert a>0\n    return euler_phi(a)\ndef euler_phi_complex(a):\n    '''\n    Write a function to find the Euler's phi function of a complex number.\n    ''"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    theta = cmath.phase(a/b)\n    return abs(theta)\ndef get_angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    theta = cmath.phase(a/b)\n    return abs(theta)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef get_angle(c):\n    if c > 1:\n        return str(c/2.0) + \"(+)\"\n    elif c < -1:\n        return str(c/2.0) + \"(-)\"\n    else:\n        return str(c/2.0)\ndef get_angle_3(a,b):\n    if a > 1 and b > 1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(+)\"\n    elif a < -1 and b < -1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(-)\"\n    elif a < -1 and b > 1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(+)\"\n    elif a > 1 and b < -1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(-)\"\n    elif a < -1 and b < -1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(-)\"\n    else:\n        return str(a/2.0) + \"(\" + str(b/2.0) + \")\"\ndef get_angle_2(a,b):\n    if a > 1 and b > 1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(+)\"\n    elif a < -1 and b < -1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(-)\"\n    elif a < -1 and b > 1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(+)\"\n    elif a > 1 and b < -1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(-)\"\n    else:\n        return str(a/2.0) + \"(\" + str(b/2.0) + \")\"\ndef get_angle_4(a,b):\n    if a > 1 and b > 1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(+)\"\n    elif a < -1 and b < -1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(-)\"\n    elif a < -1 and b > 1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(+)\"\n    elif a > 1 and b < -1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(-)\"\n    else:\n        return str(a/2.0) + \"(\" + str(b/2.0) + \")\"\ndef get_angle_5(a,b):\n    if a > 1 and b > 1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(+)\"\n    elif a < -1 and b < -1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(-)\"\n    elif a < -1 and b > 1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(+)\"\n    elif a > 1 and b < -1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(-)\"\n    else:\n        return str(a/2.0) + \"(\" + str(b/2.0) + \")\"\ndef get_angle_6(a,b):\n    if a > 1 and b > 1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(+)\"\n    elif a < -1 and b < -1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(-)\"\n    elif a < -1 and b > 1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(+)\"\n    elif a > 1 and b < -1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(-)\"\n    else:\n        return str(a/2.0) + \"(\" + str(b/2.0) + \")\"\ndef get_angle_7(a,b):\n    if a > 1 and b > 1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(+)\"\n    elif a < -1 and b < -1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(-)\"\n    elif a < -1 and b > 1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(+)\"\n    elif a > 1 and b < -1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(-)\"\n    else:\n        return str(a/2.0) + \"(\" + str(b/2.0) + \")\"\ndef get_angle_8(a,b):\n    if a > 1 and b > 1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(+)\"\n    elif a < -1 and b < -1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(-)\"\n    elif a < -1 and b > 1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(+)\"\n    elif a > 1 and b < -1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(-)\"\n    else:\n        return str(a/2.0) + \"(\" + str(b/2.0) + \")\"\ndef get_angle_9(a,b):\n    if a > 1 and b > 1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(+)\"\n    elif a < -1 and b < -1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(-)\"\n    elif a < -1 and b > 1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(+)\"\n    elif a > 1 and b < -1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(-)\"\n    else:\n        return str(a/2.0) + \"(\" + str(b/2.0) + \")\"\ndef get_angle_10(a,b):\n    if a > 1 and b > 1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(+)\"\n    elif a < -1 and b < -1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(-)\"\n    elif a < -1 and b > 1:\n        return str(a/2.0) + \"(-)\" + str(b/2.0) + \"(+)\"\n    elif a > 1 and b < -1:\n        return str(a/2.0) + \"(+)\" + str(b/2.0) + \"(-)\"\n    else:\n        return str(a/2.0) + \"(\" + str(b/2.0) + \")\"\ndef get_angle_11(a,b):\n    if a > 1 and b > 1:\n        return str(a/2.0) + \"(+)\" + str(b"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if(a.imag==0 and a.real==0):\n        return \"invalid\"\n    if(a.imag==0):\n        return cmath.phase(a)\n    else:\n        return cmath.phase(complex(a.real,a.imag))\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    if not string:\n        return 0\n    elif len(string) == 1:\n        return string == '0' or string == '1'\n    \n    result = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            result = max(result, find_length(string[i+1:]))\n        elif string[i] == '1':\n            result = max(result, find_length(string[i+1:]))\n        else:\n            return 0\n            \n    return 1 + result\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == None or len(string) == 0:\n        return 0\n    \n    count = 0\n    for i in range(0,len(string)):\n        if string[i] == '1':\n            count += 1\n        else:\n            count -= 1\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # base case\n    if len(string) <= 1:\n        return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    ones = 0\n    zeroes = 0\n    for i in xrange(len(string)):\n        if string[i] == '1':\n            ones += 1\n        else:\n            zeroes += 1\n        if i > 0:\n            if string[i]!= string[i-1]:\n                if string[i] == '1':\n                    ones -= 1\n                else:\n                    zeroes -= 1\n    if zeroes == 0:\n        return 0\n    else:\n        return ones / zeroes\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    if len(string) < 1:\n        return 0\n    \n    number_of_1s, number_of_0s = 0, 0\n    max_length = 0\n    \n    for i in range(len(string)):\n        if string[i] == '1':\n            number_of_1s += 1\n        else:\n            number_of_0s += 1\n        \n        if number_of_1s - number_of_0s > max_length:\n            max_length = number_of_1s - number_of_0s\n        \n        if number_of_0s == number_of_1s:\n            break\n    \n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return 0\n    start = 0\n    end = 0\n    counter = 0\n    while end < len(string):\n        if string[end] == '0':\n            counter += 1\n        else:\n            counter -= 1\n        if counter == 0:\n            start = end\n        end += 1\n    return len(string) - end\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    arr = [0]*len(string)\n    for i in range(len(string)):\n        if string[i] == '0':\n            arr[i] = 1\n        else:\n            arr[i] = 0\n    max_diff = -1\n    for i in range(len(string)-1):\n        if string[i]!= string[i+1]:\n            if max_diff < (len(string)-i-1) - (i+1):\n                max_diff = (len(string)-i-1) - (i+1)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    counts = {}\n    res = 0\n    for i in range(len(string)):\n        counts[string[i]] = counts.get(string[i], 0) + 1\n        #print counts\n        if counts[0] == counts[1]:\n            res = max(res, i - counts[0])\n        else:\n            res = max(res, counts[0] - counts[1])\n            #print res, counts[0], counts[1]\n    return res\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Check whether the string is empty or not\n    if len(string) == 0:\n        return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def find_length_helper(string, substr):\n        if not string:\n            return 0\n        start, end = 0, len(substr) - 1\n        # while start < len(string) and start + len(substr) <= len(string):\n        while start <= len(string) - end:\n            if substr in string[start: start + end + 1]:\n                return max(find_length_helper(string, substr), end + 1)\n            start += 1\n            end += 1\n        return 0\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    a = abs(a)\n    b = abs(b)\n    c = math.gcd(a,b)\n    return a*b/c\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = a%b\n    while r:\n        a = b\n        b = r\n        r = a%b\n    return b\ndef sum(a,b): \n    '''\n    Write a python functio"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return int(a * b) / gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result = []\n    for x in range(1, min(a,b) + 1):\n        if a % x == 0 and b % x == 0:\n            result.append(x)\n    return sum(result)\n    \nprint(sum(10,20))\nprint(sum(100,200))\nprint(sum(1000,2000))\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    lst = []\n    for i in range(1, a+1):\n        if a%i == 0:\n            lst.append(i)\n    for j in range(1, b+1):\n        if b%j == 0:\n            lst.append(j)\n    for k in lst:\n        if lst.count(k) > 1:\n            pass\n        else:\n            sum = sum + k\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    def find_factors(x):\n        factors = []\n        \n        for i in range(1, x + 1):\n            if x % i == 0:\n                factors.append(i)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = set([])\n    for x in range(1,a):\n        if a%x==0 and b%x==0:\n            divisors.add(x)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common = []\n    for i in range(1, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            common.append(i)\n    return sum(common)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # Your code here\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    def multiply(x, y, result=None):\n        if result is None:\n            result = 0\n        if x:\n            result += y\n            multiply(x - 1, y, result)\n        return result\n    return multiply(x, y)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list = str.split()\n    long_words = []\n    for word in list:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\nprint long_words(3, [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"])\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for i in str:\n        if len(i) > n:\n            words.append(i)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n    \ndef longest_words(str):\n    '''\n    Write a function to find the longest word(s) in a string.\n    '''\n    return max([x for x in str.split(' ') if len(x) > 0], key=len)\n    \ndef evens(n, str):\n    '''\n    Write a function that takes a string and returns the even-indexed characters.\n    '''\n    return str[::2]\n    \ndef odds(n, str):\n    '''\n    Write a function that takes a string and returns the odd-indexed characters.\n    '''\n    return str[1::2]\n    \ndef increment(n, str):\n    '''\n    Write a function that takes a string and returns the string with each character incremented by one.\n    '''\n    return ''.join([chr(ord(x) + 1) for x in str])\n    \ndef vowels(str):\n    '''\n    Write a function that takes a string and returns the number of vowels in the string.\n    '''\n    return len([x for x in str if x in 'aeiou'])\n    \ndef repeat(n, str):\n    '''\n    Write a function that takes a string and returns the string repeated n times.\n    '''\n    return str * n\n    \ndef product(n, str):\n    '''\n    Write a function that takes a string and returns the string repeated n times with spacing between characters preserved.\n    '''\n    return''.join([str for _ in range(n)])\n    \ndef reverse(str):\n    '''\n    Write a function that takes a string and returns the string with all the characters reversed.\n    '''\n    return str[::-1]\n    \ndef stutter(str):\n    '''\n    Write a function that takes a string and returns a string with each character doubled.\n    '''\n    return ''.join([x * 2 for x in str])\n    \ndef swap(n, str):\n    '''\n    Write a function that takes a string and returns a string with the first and last characters swapped.\n    '''\n    return str[:1] + str[-1:] + str[1:-1]\n    \ndef index_of(n, str):\n    '''\n    Write a function that takes a string and returns the index of the first occurrence of the specified substring.\n    '''\n    return str.find(n)\n    \ndef char_at(n, str):\n    '''\n    Write a function that takes a string and returns the nth character of the string.\n    '''\n    return str[n]\n    \ndef count(n, str):\n    '''\n    Write a function that takes a string and returns the count of the number of times the specified substring is present in the string.\n    '''\n    return str.count(n)\n    \ndef count_vowels(str):\n    '''\n    Write a function that takes a string and returns the count of the number of vowels in the string.\n    '''\n    return sum([1 for x in str if x in 'aeiou'])\n    \ndef count_consonants(str):\n    '''\n    Write a function that takes a string and returns the count of the number of consonants in the string.\n    '''\n    return sum([1 for x in str if x not in 'aeiou'])\n    \ndef count_letters(str):\n    '''\n    Write a function that takes a string and returns the count of the number of letters in the string.\n    '''\n    return len(str)\n    \ndef count_uppercase(str):\n    '''\n    Write a function that takes a string and returns the count of the number of uppercase letters in the string.\n    '''\n    return sum([1 for x in str if x.isupper()])\n    \ndef count_lowercase(str):\n    '''\n    Write a function that takes a string and returns the count of the number of lowercase letters in the string.\n    '''\n    return sum([1 for x in str if x.islower()])\n    \ndef count_numbers(str):\n    '''\n    Write a function that takes a string and returns the count of the number of numbers in the string.\n    '''\n    return sum([1 for x in str if x.isdigit()])\n    \ndef count_whitespace(str):\n    '''\n    Write a function that takes a string and returns the count of the number of whitespace characters in the string.\n    '''\n    return len(''.join([''if x.isspace() else x for x in str]))\n    \ndef count_punctuation(str):\n    '''\n    Write a function that takes a string and returns the count of the number of punctuation characters in the string.\n    '''\n    return len(''.join([x if not x.isspace() else'' for x in str]))\n    \ndef count_symbols(str):\n    '''\n    Write a function that takes a string and returns the count of the number of symbols in the string.\n    '''\n    return len(str) - count_letters(str) - count_punctuation(str)\n    \ndef count_words(str):\n    '''\n    Write a function that takes a string and returns the count of the number of words in the string.\n    '''\n    return len([x for x in str.split(' ') if len(x) > 0])\n    \ndef count_sentences(str):\n    '''\n    Write a function that takes a string and returns the count of the number of sentences in the string.\n    '''\n    return len([x for x in str.split('.') if len(x) > 0])\n    \ndef count_spaces(str):\n    '''\n    Write a function that takes a string and returns the count of the number of spaces in the string.\n    '''\n    return len(''.join([x if not x.isspace() else'' for x in str]))\n    \ndef count_unique(str):\n    '''\n    Write a function that takes a string and returns the count of the number of unique characters in the string.\n    '''\n    return len(set(str))\n    \ndef count_letters_capitalised(str):\n    '''\n    Write a function that takes a string and returns the count of the number of letters in the string that are capitalised.\n    '''\n    return sum([1 for x in str if x.isupper()])\n    \ndef count_letters_lowercase(str):\n    '''\n    Write a function that takes a string and returns the count of the number of letters in the string that are lowercase.\n    '''\n    return sum([1 for x in str if x.islower()])\n    \ndef count_letters_mixedcase(str):\n    '''\n    Write a function that takes a string and returns the count of the number of letters in the string that are both lowercase and uppercase.\n    '''\n    return sum([1 for x in str if x.isupper() and x.islower()])\n    \ndef count_letters_mixedcase_space(str):\n    '''\n    Write a function that takes a string and returns the count of the number of letters in the string that are both lowercase and uppercase.\n    '''\n    return sum([1 for x in str.split(' ') if x.isupper() and x.islower()])\n    \ndef count_letters_number(str):\n    '''\n    Write a function that takes a string and returns the count of the number of letters in the string that are neither lowercase nor uppercase.\n    '''\n    return sum([1 for x in str if not x.isupper() and not x.islower()])\n    \ndef count_capitalised(str):\n    '''\n    Write a function that takes a string and returns the count of the number of words in the string that are capitalised.\n    '''\n    return sum([1 for x in str.split(' ') if x[0].isupper()])\n    \ndef count_lowercase_word(str):\n    '''\n    Write a function that takes a string and returns the count of the number of words in the string that are lowercase.\n    '''\n    return sum([1 for x in str.split(' ') if x[0].islower()])\n    \ndef count_uppercase_word(str):\n    ''"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    def is_word(word):\n        return len(word) > n\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    def is_longer(word, n):\n        return len(word) > n\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if (len(my_matrix) == 0 or len(my_matrix)!= len(my_matrix[0])):\n        return False\n    if (len(my_matrix) == 1):\n        return True\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    row_sum_cnt = len(my_matrix)\n    col_sum_cnt = len(my_matrix[0])\n    for i in xrange(row_sum_cnt):\n        row_sum += my_matrix[i][i]\n    for i in xrange(col_sum_cnt):\n        col_sum += my_matrix[i][i]\n    for i in xrange(row_sum_cnt):\n        diag_sum += my_matrix[i][row_sum_cnt - 1 - i]\n    if (row_sum!= col_sum or row_sum!= diag_sum or col_sum!= diag_sum):\n        return False\n    for i in xrange(row_sum_cnt):\n        for j in xrange(col_sum_cnt):\n            if (i == j):\n                continue\n            if (my_matrix[i][j]!= 0):\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Magic square is symmetric and\n    # each element is divisible by sum of its neighbours\n    \n    \n    def magic_square_helper(my_matrix):\n        '''\n        Recursive function to check magic square.\n        '''\n        \n        # If it's a 2 x 2, it's a magic square\n        if len(my_matrix) == 2:\n            return True\n        \n        # If it's not a square, return false\n        if len(my_matrix)!= len(my_matrix[0]):\n            return False\n        \n        # If it's not a magic square, return false\n        if not magic_square_helper(my_matrix[0]):\n            return False\n        \n        # If it's not a magic square, return false\n        if not magic_square_helper(my_matrix[-1]):\n            return False\n        \n        # If it's not a magic square, return false\n        if not magic_square_helper(my_matrix[0][0]):\n            return False\n        \n        # If it's not a magic square, return false\n        if not magic_square_helper(my_matrix[-1][-1]):\n            return False\n        \n        # If it's not a magic square, return false\n        for i in range(len(my_matrix)):\n            if (sum(my_matrix[i])!= sum(my_matrix[i][0])):\n                return False\n        \n        # If it's not a magic square, return false\n        for i in range(len(my_matrix)):\n            if (sum(my_matrix[i])!= sum(my_matrix[0][i])):\n                return False\n        \n        # If it's not a magic square, return false\n        if (my_matrix[0][0]!= my_matrix[-1][-1]):\n            return False\n        \n        # If it's not a magic square, return false\n        if (my_matrix[0][0]!= my_matrix[0][-1]):\n            return False\n        \n        # If it's not a magic square, return false\n        if (my_matrix[-1][-1]!= my_matrix[-1][0]):\n            return False\n        \n        # If it's not a magic square, return false\n        if (my_matrix[-1][0]!= my_matrix[0][0]):\n            return False\n        \n        return True\n    \n    \n    \n    return magic_square_helper(my_matrix)\n    "
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # sum all the rows of the matrix\n    row_sums = []\n    for row in my_matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    # sum all the columns of the matrix\n    col_sums = []\n    for col in zip(*my_matrix):\n        col_sum = sum(col)\n        col_sums.append(col_sum)\n    # sum the diagonals\n    diag_sum_1 = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    diag_sum_2 = my_matrix[2][0] + my_matrix[1][1] + my_matrix[0][2]\n    return (sum(row_sums) == sum(col_sums) == diag_sum_1 == diag_sum_2)\n    "
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    my_matrix = np.asarray(my_matrix)\n    my_matrix = my_matrix.astype(int)\n    \n    diag_sum = my_matrix.trace()\n    row_sum = np.sum(my_matrix, axis=1)\n    col_sum = np.sum(my_matrix, axis=0)\n    \n    all_sums = [diag_sum, row_sum, col_sum]\n    all_sums = np.asarray(all_sums)\n    all_sums = all_sums.astype(int)\n    \n    print (all_sums - (np.power(my_matrix, 2).sum()/len(my_matrix)))\n    \n    if np.allclose(all_sums, (np.power(my_matrix, 2).sum()/len(my_matrix))):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    a = sum(my_matrix[0])\n    b = sum(my_matrix[1])\n    c = sum(my_matrix[2])\n    d = sum(my_matrix[3])\n    e = sum(my_matrix[4])\n    f = sum(my_matrix[5])\n    g = sum(my_matrix[6])\n    h = sum(my_matrix[7])\n    i = sum(my_matrix[8])\n    return (a == b == c == d == e == f == g == h == i)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 1:\n        return True\n    elif len(my_matrix) == 2:\n        #if all the values of my_matrix[i][i] are equal\n        return True if sum(my_matrix[0]) == sum(my_matrix[1]) else False\n    else:\n        #for 3x3\n        diag1 = sum(my_matrix[0][0:3])\n        diag2 = sum(my_matrix[1][0:3])\n        diag3 = sum(my_matrix[2][0:3])\n        #for 4x4\n        diag4 = sum(my_matrix[0][0:4])\n        diag5 = sum(my_matrix[1][0:4])\n        diag6 = sum(my_matrix[2][0:4])\n        diag7 = sum(my_matrix[0][0:5])\n        diag8 = sum(my_matrix[1][0:5])\n        diag9 = sum(my_matrix[2][0:5])\n        #for 5x5\n        diag10 = sum(my_matrix[0][0:5])\n        diag11 = sum(my_matrix[1][0:5])\n        diag12 = sum(my_matrix[2][0:5])\n        diag13 = sum(my_matrix[0][0:6])\n        diag14 = sum(my_matrix[1][0:6])\n        diag15 = sum(my_matrix[2][0:6])\n        diag16 = sum(my_matrix[0][0:7])\n        diag17 = sum(my_matrix[1][0:7])\n        diag18 = sum(my_matrix[2][0:7])\n        diag19 = sum(my_matrix[0][0:8])\n        diag20 = sum(my_matrix[1][0:8])\n        diag21 = sum(my_matrix[2][0:8])\n        diag22 = sum(my_matrix[0][0:9])\n        diag23 = sum(my_matrix[1][0:9])\n        diag24 = sum(my_matrix[2][0:9])\n        diag25 = sum(my_matrix[0][0:10])\n        diag26 = sum(my_matrix[1][0:10])\n        diag27 = sum(my_matrix[2][0:10])\n        \n        for i in range(len(my_matrix)):\n            row_sum = sum(my_matrix[i])\n            col_sum = sum([x[i] for x in my_matrix])\n            diag1_sum = diag1 + my_matrix[0][i]\n            diag2_sum = diag2 + my_matrix[1][i]\n            diag3_sum = diag3 + my_matrix[2][i]\n            diag4_sum = diag4 + my_matrix[i][0]\n            diag5_sum = diag5 + my_matrix[i][1]\n            diag6_sum = diag6 + my_matrix[i][2]\n            diag7_sum = diag7 + my_matrix[i][3]\n            diag8_sum = diag8 + my_matrix[i][4]\n            diag9_sum = diag9 + my_matrix[i][5]\n            diag10_sum = diag10 + my_matrix[i][6]\n            diag11_sum = diag11 + my_matrix[i][7]\n            diag12_sum = diag12 + my_matrix[i][8]\n            diag13_sum = diag13 + my_matrix[i][9]\n            diag14_sum = diag14 + my_matrix[i][10]\n            diag15_sum = diag15 + my_matrix[i][11]\n            diag16_sum = diag16 + my_matrix[i][12]\n            diag17_sum = diag17 + my_matrix[i][13]\n            diag18_sum = diag18 + my_matrix[i][14]\n            diag19_sum = diag19 + my_matrix[i][15]\n            diag20_sum = diag20 + my_matrix[i][16]\n            diag21_sum = diag21 + my_matrix[i][17]\n            diag22_sum = diag22 + my_matrix[i][18]\n            diag23_sum = diag23 + my_matrix[i][19]\n            diag24_sum = diag24 + my_matrix[i][20]\n            diag25_sum = diag25 + my_matrix[i][21]\n            diag26_sum = diag26 + my_matrix[i][22]\n            diag27_sum = diag27 + my_matrix[i][23]\n            \n            if row_sum!= my_matrix[i][i] or col_sum!= my_matrix[i][i] or diag1_sum!= my_matrix[i][i] or diag2_sum!= my_matrix[i][i] or diag3_sum!= my_matrix[i][i] or diag4_sum!= my_matrix[i][i] or diag5_sum!= my_matrix[i][i] or diag6_sum!= my_matrix[i][i] or diag7_sum!= my_matrix[i][i] or diag8_sum!= my_matrix[i][i] or diag9_sum!= my_matrix[i][i] or diag10_sum!= my_matrix[i][i] or diag11_sum!= my_matrix[i][i] or diag12_sum!= my_matrix[i][i] or diag13_sum!= my_matrix[i][i] or diag14_sum!= my_matrix[i][i] or diag15_sum!= my_matrix[i][i] or diag16_sum!= my_matrix[i][i] or diag17_sum!= my_matrix[i][i] or diag18_sum!= my_matrix[i][i] or diag19_sum!= my_matrix[i][i] or diag20_sum!= my_matrix[i][i] or diag21_sum!= my_matrix[i][i] or diag22_sum!= my_matrix[i][i] or diag23_sum!= my_matrix[i][i] or diag24_sum!= my_matrix[i][i] or diag25_sum!= my_matrix[i][i] or diag26_sum!= my_matrix[i][i] or diag27_sum!= my_matrix[i][i]:\n                return False\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    total = 0\n    for i in range(len(my_matrix)):\n        total += my_matrix[i][i]\n    if sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))) == total:\n        print \"Yes\"\n    else:\n        print \"No\"\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # make sure input is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # calculate the sum of each row and column\n    rows_sum = [sum(row) for row in my_matrix]\n    cols_sum = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    # calculate the diagonal sums\n    diag_sum_1 = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    diag_sum_2 = sum([my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))])\n    # check if each row, column, diagonal sums match\n    if rows_sum!= cols_sum:\n        return False\n    elif diag_sum_1!= diag_sum_2:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in xrange(n):\n        row_sum = sum(my_matrix[i])\n        if (row_sum!= n*n):\n            return False\n    for j in xrange(n):\n        col_sum = 0\n        for k in xrange(n):\n            col_sum += my_matrix[k][j]\n        if (col_sum!= n*n):\n            return False\n    diag_sum = 0\n    for k in xrange(n):\n        diag_sum += my_matrix[k][k]\n    if (diag_sum!= n*n):\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_sum = 0\n    for i in range(0,len(my_matrix)):\n        magic_sum += my_matrix[i][i]\n    for i in range(0,len(my_matrix)):\n        magic_sum += my_matrix[i][-i-1]\n    magic_sum = magic_sum - (len(my_matrix)*len(my_matrix)*(len(my_matrix)+1)/2)\n    if magic_sum == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d, key=d.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    return max(count,key = count.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    num_dict = defaultdict(int)\n    for num in nums:\n        num_dict[num] += 1\n    return num_dict[max(num_dict, key=num_dict.get)]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d, key=d.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for i in nums:\n        count[i] += 1\n    max_freq = 0\n    max_freq_item = None\n    for i in count:\n        if count[i] > max_freq:\n            max_freq_item = i\n            max_freq = count[i]\n    return max_freq_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    m = defaultdict(int)\n    for num in nums:\n        m[num] += 1\n    return max(m, key=m.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counter = defaultdict(int)\n    for n in nums:\n        counter[n] += 1\n    return max(counter.items(), key=lambda item: item[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    res = None\n    count = 0\n    for i in nums:\n        if res is None or res == i:\n            count += 1\n        else:\n            if count > 0:\n                res = i\n                count = 1\n            else:\n                count = 1\n    if count > 0:\n        res = i\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_freq_item = None\n    items = defaultdict(int)\n    for i in nums:\n        items[i] += 1\n    for i in items:\n        if items[i] > max_freq:\n            max_freq = items[i]\n            max_freq_item = i\n    return max_freq_item\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if str1[i] not in 'aeiouAEIOU':\n            i += 1\n        elif str1[j] not in 'aeiouAEIOU':\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1=list(str1)\n    vowel=['a','e','i','o','u','A','E','I','O','U']\n    for i in range(len(str1)):\n        if str1[i] in vowel:\n            str1[i] = str1[i] + str1[i].lower()\n    str1.reverse()\n    str1=''.join(str1)\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    s = list(str1)\n    i = 0\n    j = len(s)-1\n    while i<j:\n        while s[i] not in vowels and i<j:\n            i+=1\n        while s[j] not in vowels and i<j:\n            j-=1\n        if i<j:\n            temp = s[i]\n            s[i] = s[j]\n            s[j] = temp\n            i+=1\n            j-=1\n    return ''.join(s)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'AEIOU'\n    string = list(str1)\n    for i in range(0,len(string)):\n        if string[i] in vowels:\n            string[i] = string[i] + str(len(string)-i-1)\n    return ''.join(string)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        while str1[i] not in vowels and i < j:\n            i += 1\n        while str1[j] not in vowels and i < j:\n            j -= 1\n        if i < j:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    return ''.join([c for c in str1 if c not in vowels][::-1])\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowel_str = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            vowel_str += char\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str2 = list(str1)\n    for i in range(len(str2)):\n        if str2[i] in vowels:\n            str2[i] = vowels[vowels.index(str2[i])+1]\n        if str2[i] == 'y':\n            str2[i] = 'y'\n    return ''.join(str2)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = 'aeiou'\n    vowel_str = ''\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_str = vowel_str + str1[i]\n    return vowel_str + str1[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str1 = str1.lower()\n    new_str = []\n    for letter in str1:\n        if letter in vowels:\n            new_str.append(letter)\n            str1 = str1.replace(letter,'',1)\n        else:\n            new_str.append(letter)\n    new_str = ''.join(new_str)\n    new_str = new_str[::-1]\n    return new_str\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 = str1 + i\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2 = str(tup1)\n    return tup2\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(x) for x in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(el) for el in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for elem in tup1:\n        string += elem\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string=''\n    for i in tup1:\n        tup_string = tup_string + i\n    return tup_string\ndef str_list(a_list):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    str_list=''\n    for i in a_list:\n        str_list = str_list + str(i)\n    return str_list\ndef str_dict(a_dict):\n    '''\n    Write a function to convert a dictionary to a string.\n    '''\n    str_dict=''\n    for i in a_dict.keys():\n        str_dict = str_dict + i\n    return str_dict\ndef tup_dict(a_dict):\n    '''\n    Write a function to convert a dictionary to a tuple.\n    '''\n    tup_dict=()\n    for i in a_dict.keys():\n        tup_dict = tup_dict + (i,)\n    return tup_dict\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([-x for x in nums])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return sum(nums)\n        \n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    pos = 0\n    while pos < len(nums):\n        if nums[pos] >= 0:\n            pos += 1\n        else:\n            pos += 1\n            result = nums[pos] - nums[pos - 1]\n            return result\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for i in nums:\n        if i < 0:\n            result += i\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for num in nums:\n        if num < 0:\n            s += num\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums)==0:\n        return 0\n    s=0\n    for x in nums:\n        if x < 0:\n            s = s+x\n    return s\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a,b,c,d,e,f = 1,1,1,1,1,1\n    for i in range(1,n):\n        a,b,c,d,e,f = b,c,d,e,f,a+b+c\n    return a\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n1 = 1\n    n2 = 2\n    n3 = 3\n    n4 = 4\n    n5 = 5\n    n6 = 6\n    n7 = 7\n    n8 = 8\n    n9 = 9\n    n10 = 10\n    n11 = 11\n    n12 = 12\n    n13 = 13\n    n14 = 14\n    n15 = 15\n    n16 = 16\n    n17 = 17\n    n18 = 18\n    n19 = 19\n    n20 = 20\n    n21 = 21\n    n22 = 22\n    n23 = 23\n    n24 = 24\n    n25 = 25\n    n26 = 26\n    n27 = 27\n    n28 = 28\n    n29 = 29\n    n30 = 30\n    n31 = 31\n    n32 = 32\n    n33 = 33\n    n34 = 34\n    n35 = 35\n    n36 = 36\n    n37 = 37\n    n38 = 38\n    n39 = 39\n    n40 = 40\n    n41 = 41\n    n42 = 42\n    n43 = 43\n    n44 = 44\n    n45 = 45\n    n46 = 46\n    n47 = 47\n    n48 = 48\n    n49 = 49\n    n50 = 50\n    n51 = 51\n    n52 = 52\n    n53 = 53\n    n54 = 54\n    n55 = 55\n    n56 = 56\n    n57 = 57\n    n58 = 58\n    n59 = 59\n    n60 = 60\n    n61 = 61\n    n62 = 62\n    n63 = 63\n    n64 = 64\n    n65 = 65\n    n66 = 66\n    n67 = 67\n    n68 = 68\n    n69 = 69\n    n70 = 70\n    n71 = 71\n    n72 = 72\n    n73 = 73\n    n74 = 74\n    n75 = 75\n    n76 = 76\n    n77 = 77\n    n78 = 78\n    n79 = 79\n    n80 = 80\n    n81 = 81\n    n82 = 82\n    n83 = 83\n    n84 = 84\n    n85 = 85\n    n86 = 86\n    n87 = 87\n    n88 = 88\n    n89 = 89\n    n90 = 90\n    n91 = 91\n    n92 = 92\n    n93 = 93\n    n94 = 94\n    n95 = 95\n    n96 = 96\n    n97 = 97\n    n98 = 98\n    n99 = 99\n    n100 = 100\n    n101 = 101\n    n102 = 102\n    n103 = 103\n    n104 = 104\n    n105 = 105\n    n106 = 106\n    n107 = 107\n    n108 = 108\n    n109 = 109\n    n110 = 110\n    n111 = 111\n    n112 = 112\n    n113 = 113\n    n114 = 114\n    n115 = 115\n    n116 = 116\n    n117 = 117\n    n118 = 118\n    n119 = 119\n    n120 = 120\n    n121 = 121\n    n122 = 122\n    n123 = 123\n    n124 = 124\n    n125 = 125\n    n126 = 126\n    n127 = 127\n    n128 = 128\n    n129 = 129\n    n130 = 130\n    n131 = 131\n    n132 = 132\n    n133 = 133\n    n134 = 134\n    n135 = 135\n    n136 = 136\n    n137 = 137\n    n138 = 138\n    n139 = 139\n    n140 = 140\n    n141 = 141\n    n142 = 142\n    n143 = 143\n    n144 = 144\n    n145 = 145\n    n146 = 146\n    n147 = 147\n    n148 = 148\n    n149 = 149\n    n150 = 150\n    n151 = 151\n    n152 = 152\n    n153 = 153\n    n154 = 154\n    n155 = 155\n    n156 = 156\n    n157 = 157\n    n158 = 158\n    n159 = 159\n    n160 = 160\n    n161 = 161\n    n162 = 162\n    n163 = 163\n    n164 = 164\n    n165 = 165\n    n166 = 166\n    n167 = 167\n    n168 = 168\n    n169 = 169\n    n170 = 170\n    n171 = 171\n    n172 = 172\n    n173 = 173\n    n174 = 174\n    n175 = 175\n    n176 = 176\n    n177 = 177\n    n178 = 178\n    n179 = 179\n    n180 = 180\n    n181 = 181\n    n182 = 182\n    n183 = 183\n    n184 = 184\n    n185 = 185\n    n186 = 186\n    n187 = 187\n    n188 = 188\n    n189 = 189\n    n190 = 190\n    n191 = 191\n    n192 = 192\n    n193 = 193\n    n194 = 194\n    n195 = 195\n    n196 = 196\n    n197 = 197\n    n198 = 198\n    n199 = 199\n    n200 = 200\n    n201 = 201\n    n202 = 202\n    n203 = 203\n    n204 = 204\n    n205 = 205\n    n206 = 206\n    n207 = 207\n    n208 = 208\n    n209 = 209\n    n210 = 210\n    n211 = 211\n    n212 = 212\n    n213 = 213\n    n214 = 214\n    n215 = 215\n    n216 = 216\n    n217 = 217\n    n218 = 218\n    n219 = 219\n    n220 = 220\n    n221 = 221\n    n222 = 222\n    n223 = 223\n    n224 = 224\n    n225 = 225\n    n226 = 226\n    n227 = 227\n    n228 = 228\n    n229 = 229\n    n230 = 230\n    n231 = 231\n    n232 = 232\n    n233 = 233\n    n234 = 234\n    n235 = 235\n    n236 = 236\n    n237 = 237\n    n238 = 238\n    n239 = 239\n    n240 = 240\n    n241 = 241\n    n242 = 242\n    n243 = 243\n    n244 = 244\n    n245 = 245\n    n246 = 246\n    n247 = 247\n    n248 = 248\n    n249 = 249\n    n250 = 250\n    n251 = 251\n    n252 = 252\n    n253 = 253\n    n254 = 254\n    n255 = 255\n    n256 = 256\n    n257 = 257\n    n258 = 258\n    n259 = 259\n    n260 = 260\n    n261 = 261\n    n262 = 262\n    n263 = 263\n    n264 = 264\n    n265 = 265\n    n266 = 266\n    n267 = 267\n    n268 = 268\n    n269 = 269\n    n270 = 270\n    n271 = 271\n    n272 = 272\n    n273 = 273\n    n274 = 274\n    n275 = 275\n    n276 = 276\n    n277 = 277\n    n278 = 278\n    n279 = 279\n    n280 = 280\n    n281 = 281\n    n282 = 282\n    n283 = 283\n    n284 = 284\n    n285 = 285\n    n286 = 286\n    n287 = 287\n    n288 = 288\n    n289 = 289\n    n290 = 290\n    n291 = 291\n    n292 = 292\n    n293 = 293\n    n294 = 294\n    n295 = 295\n    n296 = 296\n    n297 = 297\n    n298 = 298\n    n299 = 299\n    n300 = 300\n    n301 = 301\n    n302 = 302\n    n303 = 303\n    n304 = 304\n    n305 = 305\n    n306 = 306\n    n307 = 307\n    n308 = 308\n    n309 = 309\n    n310 = 310\n    n311 = 311\n    n312 = 312\n    n313 = 313\n    n314 = 314\n    n315 = 315\n    n316 = 316\n    n317 = 317\n    n318 = 318\n    n319 = 319\n    n320 = 320\n    n321 = 321\n    n322 = 322\n    n323 = 323\n    n324 = 324\n    n325 = 325\n    n326 = 326\n    n327 = 327\n    n328 = 328\n    n329 = 329\n    n330 = 330\n    n331 = 331\n    n332 = 332\n    n333 = 333\n    n334 = 334\n    n335 = 335\n    n336 = 336"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n*(2*n - 1))\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Hexagonal numbers are the sum of the first 6 natural numbers. \n    # 1, 6, 15, 28, 45,...\n    return n * (2 * n - 1) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = n + 1\n    result = (n * (2 * n - 1))\n    return result\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if not nums:\n        return 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return float(count) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    for n in nums:\n        if n == 0:\n            count += 1\n    return float(count) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # non zero = 0, zero = 1\n    non_zero = 0\n    zero = 0\n    for n in nums:\n        if n == 0:\n            zero += 1\n        else:\n            non_zero += 1\n    return zero/float(non_zero)\ndef linear_search(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for n in nums:\n        if n == val:\n            return True\n    return False\ndef linear_search_binary(nums,val):\n    # binary search in O(n) time complexity, O(lg n) space complexity\n    l = 0\n    r = len(nums)-1\n    while l <= r:\n        mid = (l + r) / 2\n        if nums[mid] == val:\n            return True\n        if nums[mid] > val:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return False\ndef linear_search_2(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in range(len(nums)):\n        if nums[i] == val:\n            return True\n    return False\ndef linear_search_3(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_4(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_5(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_6(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_7(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_8(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_9(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_10(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_11(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_12(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_13(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_14(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_15(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_16(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_17(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_18(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_19(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_20(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_21(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_22(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_23(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_24(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_25(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_26(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_27(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_28(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_29(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_30(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_31(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_32(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False\ndef linear_search_33(nums,val):\n    # linear search in O(n) time complexity, O(1) space complexity\n    for i in nums:\n        if i == val:\n            return True\n    return False"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return float(nums.count(0)) / len(nums)\n    \ndef floyd_warshall(matrix):\n    '''\n    Floyd-Warshall's algorithm for all-pairs shortest paths.\n    Time complexity: O(n^3)\n    Space complexity: O(n^2)\n    '''\n    n = len(matrix)\n    d = array('i', [])\n    for i in xrange(n):\n        d.append(array('i', [0] * n))\n    for i in xrange(n):\n        for j in xrange(n):\n            if i == j:\n                d[i][j] = 0\n            elif matrix[i][j] == 0:\n                d[i][j] = float('inf')\n            else:\n                d[i][j] = matrix[i][j]\n    for k in xrange(n):\n        for i in xrange(n):\n            for j in xrange(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # def convert_to_array(arr):\n    #     '''\n    #     Function to convert a list into a python array\n    #     '''\n    #     return array('i',arr)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    z = 0\n    n = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            z = z+1\n        else:\n            n = n + 1\n    return float(z)/n\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n        else:\n            nonzero += 1\n    return zero_count/nonzero\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return float(zeroes) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return sum(x==0 for x in nums) / float(len(nums))\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_1(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_3(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                if n%2 == 0:\n                    n = n/2\n                else:\n                    return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_4(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                if n%2 == 0:\n                    n = n/2\n                else:\n                    if n%2 == 0:\n                        n = n/2\n                    else:\n                        return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_5(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                if n%2 == 0:\n                    n = n/2\n                else:\n                    if n%2 == 0:\n                        n = n/2\n                    else:\n                        if n%2 == 0:\n                            n = n/2\n                        else:\n                            return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_6(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                if n%2 == 0:\n                    n = n/2\n                else:\n                    if n%2 == 0:\n                        n = n/2\n                    else:\n                        if n%2 == 0:\n                            n = n/2\n                        else:\n                            if n%2 == 0:\n                                n = n/2\n                            else:\n                                return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_7(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                if n%2 == 0:\n                    n = n/2\n                else:\n                    if n%2 == 0:\n                        n = n/2\n                    else:\n                        if n%2 == 0:\n                            n = n/2\n                        else:\n                            if n%2 == 0:\n                                n = n/2\n                            else:\n                                if n%2 == 0:\n                                    n = n/2\n                                else:\n                                    return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_8(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                if n%2 == 0:\n                    n = n/2\n                else:\n                    if n%2 == 0:\n                        n = n/2\n                    else:\n                        if n%2 == 0:\n                            n = n/2\n                        else:\n                            if n%2 == 0:\n                                n = n/2\n                            else:\n                                if n%2 == 0:\n                                    n = n/2\n                                else:\n                                    if n%2 == 0:\n                                        n = n/2\n                                    else:\n                                        return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_9(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>=2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            if n%2 == 0:\n                n = n/2\n            else:\n                if n%2 == 0:\n                    n = n/2\n                else:\n                    if n%2 == 0:\n                        n = n/2\n                    else:\n                        if n%2 == 0:\n                            n = n/2\n                        else:\n                            if n%2 == 0:\n                                n = n/2\n                            else:\n                                if n%2 == 0:\n                                    n = n/2\n                                else:\n                                    if n%2 == 0:\n                                        n = n/2\n                                    else:\n                                        if n%2 == 0:\n                                            n = n/2\n                                        else:\n                                            if n%2 == 0:\n                                                n = n/2\n                                            else:\n                                                return False\n    return True\ndef is_Sum_Of_Non_Overlapping_Powers_Of_Two_10(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-overlapping non-zero powers of 2 or not.\n    '''\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    for i in xrange(2,n+1):\n        if i>n:\n            return False\n        while n%i==0:\n            n/=i\n    return n==1\n    \ndef get_digital_root(n):\n    '''\n    Write a python function to return the digital root of the given number.\n    '''\n    if n<10:\n        return n\n    while n>10:\n        n=sum([int(i) for i in str(n)])\n    return n\n    \ndef find_max_digit(n):\n    '''\n    Write a python function to find maximum digit of the given number.\n    '''\n    return max([int(i) for i in str(n)])\n    \ndef find_min_digit(n):\n    '''\n    Write a python function to find minimum digit of the given number.\n    '''\n    return min([int(i) for i in str(n)])\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to find sum of digits of the given number.\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef count_digits(n):\n    '''\n    Write a python function to find count of digits of the given number.\n    '''\n    return len([int(i) for i in str(n)])\n    \ndef is_leap_year(year):\n    '''\n    Write a python function to check whether the given year is a leap year or not.\n    '''\n    if year%4==0:\n        return True\n    return False\n    \ndef find_max_gap(nums):\n    '''\n    Write a python function to find the maximum gap among consecutive integers in the given list.\n    '''\n    if not nums:\n        return 0\n    nums.sort()\n    return max(nums[i+1]-nums[i] for i in xrange(len(nums)-1))\n    \ndef get_palindrome(n):\n    '''\n    Write a python function to return the largest palindrome made from the given number.\n    '''\n    s=str(n)\n    for i in xrange(len(s)/2):\n        if s[i]!=s[-(i+1)]:\n            return int(s[i+1:][::-1]+s[:i])\n    return n\n    \ndef get_mirror_digit(n):\n    '''\n    Write a python function to return the mirror digit of the given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef get_digit(n):\n    '''\n    Write a python function to return the digit of the given number.\n    '''\n    return int(str(n)[-1])\n    \ndef get_decimal_from_binary(n):\n    '''\n    Write a python function to convert the given binary number to decimal.\n    '''\n    return int(str(n),2)\n    \ndef is_sorted(n):\n    '''\n    Write a python function to check whether the given array is sorted or not.\n    '''\n    s=sorted(n)\n    return s==n\n    \ndef is_pallindrome(n):\n    '''\n    Write a python function to check whether the given string is a pallindrome or not.\n    '''\n    s=str(n)\n    return s==s[::-1]\n    \ndef find_digit_occurence_in_base_ten(n,digit):\n    '''\n    Write a python function to find the occurrence of a given digit in a number in base 10.\n    '''\n    return sum([int(str(n)[i])*(digit**(len(str(n))-i-1)) for i in xrange(len(str(n)))])\n    \ndef permutations(n):\n    '''\n    Write a python function to find all permutations of the given string.\n    '''\n    return [''.join(i) for i in permutations(''.join(sorted(str(n))),len(str(n)))]\n    \ndef is_anagram(n,m):\n    '''\n    Write a python function to check whether the given string are anagrams or not.\n    '''\n    return sorted(str(n))==sorted(str(m))\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n==2:\n        return True\n    if n<2 or n%2==0:\n        return False\n    for i in xrange(3,n,2):\n        if n%i==0:\n            return False\n    return True\n    \ndef remove_nth_from_end(s,n):\n    '''\n    Write a python function to remove the nth element from the end of the given string.\n    '''\n    if n>len(s):\n        return s\n    return s[:-n]\n    \ndef find_substring(s,sub):\n    '''\n    Write a python function to find the starting and ending indices of the substring in the given string.\n    '''\n    if sub not in s:\n        return [-1,-1]\n    start=s.find(sub)\n    end=start+len(sub)\n    while end<len(s) and s[end]==sub[-1]:\n        end+=1\n    return [start,end-1]\n    \ndef count_pallindrome_strings(n):\n    '''\n    Write a python function to count the number of palindrome strings of length n.\n    '''\n    return len(permutations(n))\n    \ndef longest_palindrome(n):\n    '''\n    Write a python function to find the longest palindrome substring.\n    '''\n    return len(max([i for i in permutations(n) if i==i[::-1]],key=len))\n    \ndef find_kth_to_last(s,k):\n    '''\n    Write a python function to find the kth to last character of the given string.\n    '''\n    if not s:\n        return None\n    return s[-k]\n    \ndef is_sorted_with_wraparound(n):\n    '''\n    Write a python function to check whether the given number is sorted with wraparound or not.\n    '''\n    s=str(n)\n    if s==''.join(sorted(s)):\n        return True\n    return False\n    \ndef get_digit_power(n,digit):\n    '''\n    Write a python function to find the power of a digit in the given number.\n    '''\n    return n%10**(digit-1)//10**(digit-1)\n    \ndef find_nth_digit(n):\n    '''\n    Write a python function to find the nth digit of the given number.\n    '''\n    if n<10:\n        return n\n    return int(str(n)[-n])\n    \ndef get_least_significant_digit(n):\n    '''\n    Write a python function to return the least significant digit of the given number.\n    '''\n    return int(str(n)[-1])\n    \ndef get_most_significant_digit(n):\n    '''\n    Write a python function to return the most significant digit of the given number.\n    '''\n    return int(str(n)[0])\n    \ndef get_digit_count(n):\n    '''\n    Write a python function to return the number of digits in the given number.\n    '''\n    return len(str(n))\n    \ndef get_sum_of_digits(n):\n    '''\n    Write a python function to return the sum of digits of the given number.\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef get_digit_power_sum(n,digit):\n    '''\n    Write a python function to return the sum of digits of the given number raised to the given power.\n    '''\n    return sum([int(i)**digit for i in str(n)])\n    \ndef is_almost_palindrome("
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    if n==1:\n        return False\n    if n%2==0:\n        if is_Power_Of_Two(n//2)==True:\n            return True\n        else:\n            return False\n    else:\n        if is_Power_Of_Two(n-1)==True:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    temp=n\n    s=0\n    while(temp!=0):\n        a=temp%2\n        if(a==1):\n            s=s+1\n        temp=temp/2\n    if(s>1):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_of_two = 2\n    while power_of_two <= n:\n        if power_of_two > 1 and n % power_of_two == 0:\n            return True\n        power_of_two = power_of_two * 2\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def isPowerOfTwo(n):\n        return n > 0 and (n & (n-1)) == 0\n    def isPowerOfTwo_Recursive(n):\n        if n == 0:\n            return True\n        else:\n            if n == 1:\n                return True\n            else:\n                if n%2 == 0:\n                    return isPowerOfTwo_Recursive(n/2)\n                else:\n                    return False\n    if isPowerOfTwo_Recursive(n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pas"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    while n:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return len(str(n)) == 1 or any(str(n)[0] == '2' and int(str(n)[1]) & i == i for i in range(9))\n    \ndef is_Sum_Of_Powers_Of_Three(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 3 or not.\n    '''\n    return len(str(n)) == 1 or any(str(n)[0] == '3' and int(str(n)[1]) & i == i for i in range(9))\n    \ndef is_Sum_Of_Powers_Of_Five(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 5 or not.\n    '''\n    return len(str(n)) == 1 or any(str(n)[0] == '5' and int(str(n)[1]) & i == i for i in range(9))\n    \ndef is_Power_Of_Two(n): \n    '''\n    Write a python function to check whether the given number is a power of 2 or not.\n    '''\n    return len(str(n)) == 1 or any(str(n)[0] == '2' and int(str(n)[1]) & i == i for i in range(9))\n    \ndef is_Power_Of_Three(n): \n    '''\n    Write a python function to check whether the given number is a power of 3 or not.\n    '''\n    return len(str(n)) == 1 or any(str(n)[0] == '3' and int(str(n)[1]) & i == i for i in range(9))\n    \ndef is_Power_Of_Five(n): \n    '''\n    Write a python function to check whether the given number is a power of 5 or not.\n    '''\n    return len(str(n)) == 1 or any(str(n)[0] == '5' and int(str(n)[1]) & i == i for i in range(9))\n    \ndef is_Sum_Of_Powers_of_An_Integer(n): \n    '''\n    Write a python function to check whether the given number is a sum of powers of n or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Sum_Of_Powers_of_An_Integer(n): \n    '''\n    Write a python function to check whether the given number is a sum of powers of n or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Sum_Of_Powers_Of_An_Integer(n): \n    '''\n    Write a python function to check whether the given number is a sum of powers of n or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Power_Of_Two(n): \n    '''\n    Write a python function to check whether the given number is a power of two or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Power_Of_Three(n): \n    '''\n    Write a python function to check whether the given number is a power of three or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Power_Of_Five(n): \n    '''\n    Write a python function to check whether the given number is a power of five or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Sum_of_Powers_of_An_Integer(n): \n    '''\n    Write a python function to check whether the given number is a sum of powers of n or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Sum_of_Powers_of_An_Integer(n): \n    '''\n    Write a python function to check whether the given number is a sum of powers of n or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Sum_of_Powers_of_An_Integer(n): \n    '''\n    Write a python function to check whether the given number is a sum of powers of n or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Power_of_Two(n): \n    '''\n    Write a python function to check whether the given number is a power of two or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Power_of_Three(n): \n    '''\n    Write a python function to check whether the given number is a power of three or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Power_of_Five(n): \n    '''\n    Write a python function to check whether the given number is a power of five or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Sum_of_Powers_of_An_Integer(n): \n    '''\n    Write a python function to check whether the given number is a sum of powers of n or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Sum_of_Powers_of_An_Integer(n): \n    '''\n    Write a python function to check whether the given number is a sum of powers of n or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Sum_of_Powers_of_An_Integer(n): \n    '''\n    Write a python function to check whether the given number is a sum of powers of n or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Power_of_Two(n): \n    '''\n    Write a python function to check whether the given number is a power of two or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))\n    \ndef is_Power_of_Three(n): \n    '''\n    Write a python function to check whether the given number is a power of three or not.\n    '''\n    return any(str(n)[0] == str(n)[1] and int(str(n)[0]) & i == i for i in range(1, 9))"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n / 2)\n    for i in range(3, int(n)):\n        if n % i == 0:\n            return is_Sum_Of_Powers_Of_Two(n / i)\n    return False\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([item for sublist in test_list for item in sublist])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([j for i in test_list for j in i])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for l in test_list:\n        flat_list += l\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    final_list = []\n    for num in test_list:\n        final_list += num\n    return final_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        return extract_singly(test_list[1:]) + extract_singly(test_list[:1])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly = set()\n    for elem in test_list:\n        singly.add(elem)\n    return singly\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [int(x) for x in test_list]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n    \ndef test_extract_singly():\n    assert extract_singly([[1,2,3],[4,5,6]]) == [1,2,3,4,5,6]\n    assert extract_singly([[1,2,3],[4,5,6,7]]) == [1,2,3,4,5,6,7]\n    assert extract_singly([[1,2,3,4,5]]) == [1,2,3,4,5]\n    \ndef extract_doubly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n    \ndef test_extract_doubly():\n    assert extract_doubly([[1,2,3],[4,5,6]]) == [1,2,3,4,5,6]\n    assert extract_doubly([[1,2,3],[4,5,6,7]]) == [1,2,3,4,5,6,7]\n    assert extract_doubly([[1,2,3,4,5]]) == [1,2,3,4,5]\n    \ndef main():\n    test_extract_singly()\n    test_extract_doubly()\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    curr = len(nums)\n    while curr > 1:\n        l = 0\n        for i in range(curr//2):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                l = i\n        curr = l\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    _max = max(nums)\n    i = 0\n    while i < len(nums) and nums[i] == _max:\n        i += 1\n    \n    if i == len(nums):\n        return [_max]\n    \n    ans = []\n    for j in range(i):\n        ans.append(nums[j])\n    \n    ans.append(_max)\n    for j in range(i, len(nums)):\n        ans.append(nums[j])\n    \n    return ans\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        #if i is even, reverse the array to i/2 elements\n        if i%2 == 0:\n            nums = nums[::-1]\n        #if i is odd, move the i/2 element to the end of array\n        else:\n            for j in range(n//2):\n                if nums[j] > nums[n-1-j]:\n                    nums[j], nums[n-1-j] = nums[n-1-j], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums = list(nums)\n    length = len(nums)\n    if length <= 1:\n        return nums\n    for i in range(length//2):\n        nums[i], nums[length-1-i] = nums[length-1-i], nums[i]\n    for i in range(length//2):\n        nums[i], nums[length-1-i] = nums[length-1-i], nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        if not is_sorted(nums, 0, i-1):\n            swap(nums, 0, i-1)\n            if i > 2:\n                swap(nums, 0, i-2)\n            nums = nums[:i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def get_last_index(nums, x, l):\n        \"\"\"\n        Given an element x and a list of elements l, \n        find the index of the last occurrence of x in l. \n        If x is not in l, return -1.\n        \"\"\"\n        for i in range(l-1, -1, -1):\n            if nums[i] == x:\n                return i\n        return -1\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        max_idx = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        nums[:i] = nums[:max_idx+1][::-1] + nums[:i]\n        nums[:i] = nums[:i][::-1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        if i == 0:\n            continue\n        curr_index = 0\n        while curr_index < i:\n            if nums[curr_index] > nums[curr_index + 1]:\n                nums[curr_index], nums[curr_index + 1] = nums[curr_index + 1], nums[curr_index]\n                nums[:curr_index + 1] = sorted(nums[:curr_index + 1])\n            curr_index += 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, i):\n        '''\n        Given a list of numbers, flip the ith element to the end of the list.\n        '''\n        # Not part of the solution.\n        nums[i] = nums[len(nums) - 1 - i]\n        nums[len(nums) - 1 - i] = nums[i]\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 1, -1):\n        for j in range(0, n, i):\n            if nums[j] > nums[j + i]:\n                nums[j], nums[j + i] = nums[j + i], nums[j]\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if len(list1) == len(list2) and len(list1) == len(list3):\n        for i in range(len(list1)):\n            if list1[i] == list2[i] and list1[i] == list3[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list2[j] == list3[k]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    cnt = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            counter+=1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    n1=len(list1)\n    n2=len(list2)\n    n3=len(list3)\n    if n1==n2 and n2==n3:\n        i=0\n        c=0\n        while i<n1:\n            if list1[i]==list2[i] and list2[i]==list3[i]:\n                c+=1\n            i+=1\n        return c\n    else:\n        return -1\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    length1 = len(list1)\n    length2 = len(list2)\n    length3 = len(list3)\n    same_pair = 0\n    for i in range(length1):\n        if (list1[i]==list2[i]):\n            if (list3[i]==list1[i]):\n                same_pair += 1\n    return same_pair\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    pairs=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list2[j]==list3[k] and i==j and j==k:\n                    pairs+=1\n    print(pairs)\n    return pairs\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input) is tuple:\n        if Input == ():\n            return 1\n        else:\n            return find_lists(Input[0]) + find_lists(Input[1:])\n    else:\n        return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n=len(Input)\n    if n==1:\n        return 0\n    if Input[0]!=Input[-1]:\n        return find_lists(Input[1:])+1\n    else:\n        return find_lists(Input[1:])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    i = 0\n    Lists = 0\n    for x in Input:\n        if type(x) == list:\n            Lists += 1\n    return Lists\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for x in Input: \n        if isinstance(x,list): \n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return sum(1 for i in Input if isinstance(i,list))\n    \nprint find_lists(((1, 2, 3, 4), [5, 6, 7], 9, 10))\nprint find_lists([1, [2, 3, [4, [5, 6, 7]]]])\nprint find_lists([])\nprint find_lists(())"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def get_tuples(Input):\n        '''\n        Given tuple of tuples, return list of tuples.\n        '''\n        def is_valid(inp):\n            if isinstance(inp, tuple):\n                return inp\n            else:\n                return None, None\n        def get_list(inp):\n            if isinstance(inp, tuple):\n                if len(inp) == 0:\n                    return None\n                else:\n                    return inp[0]\n            else:\n                return None\n        def get_list_item(inp):\n            if isinstance(inp, tuple):\n                if len(inp) == 0:\n                    return None\n                else:\n                    return inp[1]\n            else:\n                return None\n        def get_tuple(inp):\n            if isinstance(inp, tuple):\n                return inp\n            else:\n                return None, None\n        def is_list(inp):\n            if isinstance(inp, list):\n                return inp\n            else:\n                return None\n        def is_empty(inp):\n            if len(inp) == 0:\n                return True\n            else:\n                return False\n        def is_tuple(inp):\n            if isinstance(inp, tuple):\n                return True\n            else:\n                return False\n        def is_non_empty_list(inp):\n            if isinstance(inp, list):\n                if len(inp) == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        def is_non_empty_tuple(inp):\n            if isinstance(inp, tuple):\n                if len(inp) == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        def is_valid_list(inp):\n            if isinstance(inp, list):\n                return inp\n            else:\n                return None\n        def is_valid_tuple(inp):\n            if isinstance(inp, tuple):\n                return inp\n            else:\n                return None\n        def is_valid_number(inp):\n            if isinstance(inp, int) or isinstance(inp, float):\n                return inp\n            else:\n                return None\n        def is_valid_string(inp):\n            if isinstance(inp, str):\n                return inp\n            else:\n                return None\n        def is_valid_variable(inp):\n            if isinstance(inp, str) and inp.isalpha():\n                return inp\n            else:\n                return None\n        def is_valid_range(inp):\n            if isinstance(inp, range):\n                return inp\n            else:\n                return None\n        def is_valid_list_item(inp):\n            if isinstance(inp, list):\n                return inp\n            else:\n                return None\n        def is_valid_tuple_item(inp):\n            if isinstance(inp, tuple):\n                return inp\n            else:\n                return None\n        def is_valid_dict_key(inp):\n            if isinstance(inp, str):\n                return inp\n            else:\n                return None\n        def is_valid_dict_val(inp):\n            if isinstance(inp, str):\n                return inp\n            else:\n                return None\n        def is_valid_list_key(inp):\n            if isinstance(inp, list):\n                return inp\n            else:\n                return None\n        def is_valid_list_val(inp):\n            if isinstance(inp, list):\n                return inp\n            else:\n                return None\n        def is_valid_non_empty_list(inp):\n            if isinstance(inp, list):\n                if len(inp) > 0:\n                    return inp\n                else:\n                    return None\n            else:\n                return None\n        def is_valid_non_empty_tuple(inp):\n            if isinstance(inp, tuple):\n                if len(inp) > 0:\n                    return inp\n                else:\n                    return None\n            else:\n                return None\n        def is_valid_non_empty_range(inp):\n            if isinstance(inp, range):\n                if len(inp) > 0:\n                    return inp\n                else:\n                    return None\n            else:\n                return None\n        def is_valid_non_empty_dict(inp):\n            if isinstance(inp, dict):\n                if len(inp) > 0:\n                    return inp\n                else:\n                    return None\n            else:\n                return None\n        def is_valid_non_empty_list_item(inp):\n            if isinstance(inp, list):\n                if len(inp) > 0:\n                    return inp\n                else:\n                    return None\n            else:\n                return None\n        def is_valid_non_empty_tuple_item(inp):\n            if isinstance(inp, tuple):\n                if len(inp) > 0:\n                    return inp\n                else:\n                    return None\n            else:\n                return None\n        def is_valid_non_empty_range_item(inp):\n            if isinstance(inp, range):\n                if len(inp) > 0:\n                    return inp\n                else:\n                    return None\n            else:\n                return None\n        def is_valid_non_empty_dict_key(inp):\n            if isinstance(inp, str):\n                if len(inp) > 0:\n                    return inp\n                else:\n                    return None\n            else:\n                return None\n        def is_valid_non_empty_dict_val(inp):\n            if isinstance(inp, str):\n                if len(inp) > 0:\n                    return inp\n                else:\n                    return None\n            else:\n                return None\n        def is_valid_non_empty_dict(inp):\n            if isinstance(inp, dict):\n                if len(inp) > 0:\n                    return inp\n                else:\n                    return None\n            else:\n                return None\n        def is_valid_non_empty_dict_item(inp):\n            if isinstance(inp, dict):\n                if len(inp) > 0:\n                    return inp\n                else:\n                    return None\n            else:\n                return None\n        def is_valid_dict(inp):\n            if isinstance(inp, dict):\n                return inp\n            else:\n                return None\n        def is_valid_list_item_dict(inp):\n            if isinstance(inp, dict):\n                return inp\n            else:\n                return None\n        def is_valid_range_item(inp):\n            if isinstance(inp, range):\n                return inp\n            else:\n                return None\n        def is_valid_number_item(inp):\n            if isinstance(inp, int) or isinstance(inp, float):\n                return inp\n            else:\n                return None\n        def is_valid_string_item(inp):\n            if isinstance(inp, str):\n                return inp\n            else:\n                return None\n        def is_valid_variable_item(inp):\n            if isinstance(inp, str) and inp.isalpha():\n                return inp\n            else:\n                return None\n        def is_valid_list_item_variable(inp):\n            if isinstance(inp, str) and inp.isalpha():\n                return inp\n            else:\n                return None\n        def is_valid_list_item_number(inp):\n            if isinstance(inp, int) or isinstance(inp, float):\n                return inp\n            else:\n                return None\n        def is_valid_list_item_range(inp):\n            if isinstance(inp, range):\n                return inp\n            else:\n                return None\n        def is_valid_list_item_string(inp):\n            if isinstance(inp, str):\n                return inp\n            else:\n                return None\n        def is_valid_list_item_tuple(inp):\n            if isinstance(inp, tuple):\n                return inp\n            else:"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return Input.count(list)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = list(Input)\n    count = 0\n    for i in Input:\n        if i == ():\n            count += 1\n    return count\n    \ndef partition(a,l,h):\n    pivot = a[h]\n    i = l - 1\n    for j in range(l, h):\n        if a[j] <= pivot:\n            i += 1\n            a[i], a[j] = a[j], a[i]\n    a[i+1], a[h] = a[h], a[i+1]\n    return i + 1\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    print Input\n    if Input == None:\n        return 0\n    if isinstance(Input, list):\n        return 1\n    return sum([find_lists(x) for x in Input])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i)==list:\n            count+=1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    length = len(arr)\n    if length < 3:\n        return arr[-1] - arr[0]\n    else:\n        return max(abs(arr[length-1] - arr[0]), abs(arr[length-2] - arr[1]))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    max_diff = arr[-1] - arr[0]\n    for i in range(len(arr)-1):\n        if abs(arr[i]-arr[i+1]) > max_diff:\n            max_diff = abs(arr[i]-arr[i+1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if not arr:\n        return 0\n    else:\n        arr = sorted(arr)\n        return abs(arr[1] - arr[0])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    diff = []\n    for i in range(len(arr)):\n        if i+1!= len(arr):\n            diff.append(abs(arr[i]-arr[i+1]))\n    return max(diff)\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[-1]-arr[0]\n    for i in range(len(arr)-1):\n        diff = arr[i+1]-arr[i]\n        max_diff = max(diff,max_diff)\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    abs_diff = arr[1] - arr[0]\n    for i in range(len(arr)-1):\n        abs_diff = max(abs_diff, abs(arr[i+1] - arr[i]))\n    return abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    ans = arr[1]-arr[0]\n    for i in range(len(arr)-1):\n        if ans<abs(arr[i+1]-arr[i]):\n            ans = abs(arr[i+1]-arr[i])\n    return ans\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n    \ndef print_list(arr): \n    '''\n    Write a python function to print a list of numbers in such a way that the numbers are placed between single spaces.\n    '''\n    return''.join(map(str,arr))\n    \ndef reverse_string(s): \n    '''\n    Write a python function to print a string in such a way that the letters of the string are reversed.\n    '''\n    return ''.join(reversed(s))\n    \ndef sum_of_digits(n): \n    '''\n    Write a python function to print the sum of digits of a given number.\n    '''\n    return sum(map(int,str(n)))\n    \ndef compare_strings(str1, str2): \n    '''\n    Write a python function to compare two strings and return True if both the strings are the same and False if they are not.\n    '''\n    return str1.lower() == str2.lower()\n    \ndef check_sum_of_four(arr, x): \n    '''\n    Write a python function to find the sum of four elements from a given array of 4 positive integers that add up to a given number x.\n    '''\n    return sum(arr) - x\n    \ndef check_sum_of_four_2(arr, x): \n    '''\n    Write a python function to find the sum of four elements from a given array of 4 positive integers that add up to a given number x.\n    '''\n    return sum([x-a for a in arr])\n    \ndef check_sum_of_four_3(arr, x): \n    '''\n    Write a python function to find the sum of four elements from a given array of 4 positive integers that add up to a given number x.\n    '''\n    return sum([a for a in arr if a<x])\n    \ndef check_sum_of_four_4(arr, x): \n    '''\n    Write a python function to find the sum of four elements from a given array of 4 positive integers that add up to a given number x.\n    '''\n    return sum([a for a in arr if x-a in arr])\n    \ndef all_equal(arr): \n    '''\n    Write a python function to check if all the elements in a given array are equal.\n    '''\n    return len(set(arr)) == 1\n    \ndef is_anagram(str1, str2): \n    '''\n    Write a python function to check if two strings are anagrams.\n    '''\n    return sorted(str1.lower()) == sorted(str2.lower())\n    \ndef is_anagram_2(str1, str2): \n    '''\n    Write a python function to check if two strings are anagrams.\n    '''\n    return sorted(str1.lower()) == sorted(str2.lower())\n    \ndef is_anagram_3(str1, str2): \n    '''\n    Write a python function to check if two strings are anagrams.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef is_anagram_4(str1, str2): \n    '''\n    Write a python function to check if two strings are anagrams.\n    '''\n    return sorted(str1.lower()) == sorted(str2.lower())\n    \ndef get_difference(arr): \n    '''\n    Write a python function to find the difference between the largest and smallest values in a given array.\n    '''\n    return max(arr) - min(arr)\n    \ndef get_difference_2(arr): \n    '''\n    Write a python function to find the difference between the largest and smallest values in a given array.\n    '''\n    return max(arr) - min(arr)\n    \ndef get_difference_3(arr): \n    '''\n    Write a python function to find the difference between the largest and smallest values in a given array.\n    '''\n    return max(arr) - min(arr)\n    \ndef get_difference_4(arr): \n    '''\n    Write a python function to find the difference between the largest and smallest values in a given array.\n    '''\n    return max(arr) - min(arr)\n    \ndef first_and_last_indices(arr): \n    '''\n    Write a python function to find the first and last indices of an element in a given array.\n    '''\n    return [arr.index(i) for i in arr if i == max(arr) or i == min(arr)][0], [arr.index(i) for i in arr if i == max(arr) or i == min(arr)][-1]\n    \ndef first_and_last_indices_2(arr): \n    '''\n    Write a python function to find the first and last indices of an element in a given array.\n    '''\n    return [arr.index(i) for i in arr if i == max(arr)][0], [arr.index(i) for i in arr if i == min(arr)][-1]\n    \ndef first_and_last_indices_3(arr): \n    '''\n    Write a python function to find the first and last indices of an element in a given array.\n    '''\n    return [arr.index(i) for i in arr if i == max(arr)][0], [arr.index(i) for i in arr if i == min(arr)][-1]\n    \ndef first_and_last_indices_4(arr): \n    '''\n    Write a python function to find the first and last indices of an element in a given array.\n    '''\n    return [arr.index(i) for i in arr if i == max(arr)][0], [arr.index(i) for i in arr if i == min(arr)][-1]\n    \ndef find_pairs(arr, x): \n    '''\n    Write a python function to find the first and last indices of an element in a given array.\n    '''\n    return [arr.index(i) for i in arr if i == x]\n    \ndef find_pairs_2(arr, x): \n    '''\n    Write a python function to find the first and last indices of an element in a given array.\n    '''\n    return [arr.index(i) for i in arr if i == x]\n    \ndef find_pairs_3(arr, x): \n    '''\n    Write a python function to find the first and last indices of an element in a given array.\n    '''\n    return [arr.index(i) for i in arr if i == x]\n    \ndef find_pairs_4(arr, x): \n    '''\n    Write a python function to find the first and last indices of an element in a given array.\n    '''\n    return [arr.index(i) for i in arr if i == x]\n    \ndef is_substring(str1, str2): \n    '''\n    Write a python function to check if a string is a substring of another string.\n    '''\n    return str2.find(str1)!= -1\n    \ndef get_histogram(arr): \n    '''\n    Write a python function to generate a histogram from a given array of integers.\n    '''\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \ndef get_histogram_2(arr): \n    '''\n    Write a python function to generate a histogram from a given array of integers.\n    '''\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \ndef get_histogram_3(arr): \n    '''\n    Write a python function to generate a histogram from a given array of integers.\n    '''\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \ndef get_histogram_4(arr): \n    '''\n    Write a python functio"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Base case, x = 0\n    if b == 0:\n        if a == n:\n            return 0, 1\n        else:\n            return None\n    # Find the inverse of a mod b\n    gcd, _, _, _ = extended_euclidean(a, b)\n    if gcd!= 1:\n        return None\n    x1, y1 = find_solution(b, a % b, n)\n    if x1 is None:\n        return None\n    x, y = y1, (n - a * x1) // b\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # \uc870\uac74: a\uc640 b\uac00 \uac19\uc9c0 \uc54a\uc740 \uacbd\uc6b0, ax + by = n\uc744 \ub9cc\uc871\ud558\ub294 a,b\uac00 \uc874\uc7ac\ud558\ub3c4\ub85d \ud574\uc57c\ud568\n    # \uc608\ub97c \ub4e4\uc5b4, 3x + 4y = 17, 2x + 4y = 5\n    # \uc774\ub7ec\ud55c \uacbd\uc6b0\ub294 \uc784\uc758\ub85c x = -4, y = 2\uc5d0\uc11c \ub9cc\uc871\ub418\ub294 \uac83\uc774\ubbc0\ub85c, \uac01 \uac12\uc744 \ubc18\ud658\ud574\uc57c\ud568\n    # \uc774\ub54c, a\uc758 \uac12\uc774 0\uc774 \ub418\ub294 \uacbd\uc6b0\uac00 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\uac00 \ub098\uc624\uac8c \ub41c\ub2e4.\n    # \uadf8\ub7ec\ubbc0\ub85c, a\uac00 0\uc77c \ub54c\uc758 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uacbd\uc6b0\ub294 a\uc640 b\uc758 \uac12\uc744 \ubc18\ud658\ud558\ub3c4\ub85d \ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud574\uc57c \ud558\ubbc0\ub85c,\n    # a\uac00 0\uc77c \ub54c\uc640 a\uac00 \uac19\uc740 \uac12\uc774\uba74\uc11c b\uac00 0\uc778 \uacbd\uc6b0\ub97c \uc81c\uc678\ud558\uace0\ub294 \ub9cc\uc871\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\uac00 \uc544\ub2d8\n    # \uc774\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud574\uc11c\ub294 a,b\ub97c \ub354\ud55c \uac12\uc5d0 -1\uc744 \ub354\ud55c \uac12\uc774 \uac19\uc744 \uc218 \uc788\ub294\uc9c0\ub97c \ud655\uc778\ud558\ub3c4\ub85d \ud55c\ub2e4.\n    # a\ub294 \uac19\uac70\ub098 b\ub294 \uac19\uac70\ub098, \uc544\ub2c8\uba74 \uac19\uc9c0 \uc54a\uac8c \ub418\ubbc0\ub85c, \ub450 \uac12\uc744 \uc911\ubcf5\uc73c\ub85c \ub354\ud558\ub294 \uac83\uc774 \ud544\uc694\ud558\ubbc0\ub85c,\n    # \ubc18\ubcf5\ubb38\uc744 \uc774\uc6a9\ud558\uc5ec \ud558\ub098\uc529 \uacc4\uc0b0\ud558\ub3c4\ub85d \ud55c\ub2e4.\n    # \ud558\ub098\uc529 \uacc4\uc0b0\ud558\uae30 \uc704\ud574\uc11c\ub294 a,b\uc5d0\uc11c 1\uc744 \ube80 \uac12\uc744 \uacc4\uc18d \ub354\ud574\uc8fc\uba74 \ub41c\ub2e4.\n    # \uc774\uc5d0 \ud574\ub2f9\ud558\ub294 \uac12\uc740 a,b\uc5d0\uc11c 1\uc744 \ube80 \uac12\ub9cc\ud07c\uc758 \uac12\uc774 \uc774\ubbf8 \uc874\uc7ac\ud560 \uc218 \uc788\ub294\uc9c0\ub97c \ud655\uc778\ud558\ub294 \uac83\uc784\n    # \uc774\ub54c, \uac19\uc740 \uac12\uc774 \uc774\ubbf8 \uc874\uc7ac\ud560 \uacbd\uc6b0\ub294 \ud55c\ubc88\ub9cc \ud655\uc778\ud558\uae30 \uc704\ud574\uc11c \ubb34\uc870\uac74 \ud558\ub098\ub97c \ube84 \uc218 \uc788\ub294 \uac12\uc774 \uc874\uc7ac\ud558\ubbc0\ub85c\n    # \uc774 \uac12\uc744 \ube80 \uac12\uc5d0 1\uc744 \ub354\ud574\uc8fc\uba74 \ub41c\ub2e4.\n    # \uc774\ub54c, a,b\ub97c \uc774\ubbf8 \ud655\uc778\ud55c \uac12\uc774\ub77c\uba74 \uc774\ubbf8 \ud655\uc778\ud55c \uac12\uc740 \uc774\ubbf8 \ube80 \uac12\uc744 \uc0ac\uc6a9\ud574\uc57c \ud558\ubbc0\ub85c \uadf8\ub300\ub85c \ubc18\ud658\ud574\uc57c \ud558\uace0\n    # \ud655\uc778\ud55c \uac12\uc774 \uc544\ub2c8\ub77c\uba74 \uacc4\uc0b0\uc744 \ud55c\ub2e4.\n    # a,b\uc758 \ucd5c\uc885\uac12\uc744 \ubc18\ud658\ud558\ub3c4\ub85d \ud558\ub294 \ubb38\uc7a5\uc774\ub2e4.\n    def calc(a, b, n):\n        if a == b == 0:\n            return n\n        elif a == 0 and b!= 0:\n            if n % b == 0:\n                return 0\n            else:\n                return None\n        elif a!= 0 and b == 0:\n            if n % a == 0:\n                return 0\n            else:\n                return None\n        elif a == b:\n            a += 1\n            b -= 1\n        while a < n:\n            a += b\n            if a < n:\n                b += 1\n        if a == n:\n            return b\n        else:\n            return None\n    def is_ok(a, b, n):\n        c = calc(a, b, n)\n        if c is not None:\n            return n - c == c\n        else:\n            return False\n    for i in range(1, n):\n        if is_ok(i, i, n):\n            return i, i\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        for y in range(1, n):\n            if x*a + y*b == n:\n                return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return (0, 1)\n    if n == 1:\n        return (a, b)\n    else:\n        for x in range(a, (n / a) + 1):\n            y = n - (x * a)\n            if is_perfect_square(y):\n                return (x, int(y ** 0.5))\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    s = a + b\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % a == 0:\n        return (0, n // a)\n    else:\n        return (n % a, a)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 1)\n    if a == 0:\n        return (0, -b / n)\n    if a == 1:\n        return (n / b, 0)\n    if a == -1:\n        return (0, n / b)\n    if b == 0:\n        return (0, 0)\n    if b == 1:\n        return (n / a, 0)\n    if b == -1:\n        return (0, n / a)\n    if a == -1 and b == -1:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def get_xy(a, b, n):\n        '''\n        Returns two integers x and y that satisfy ax + by = n\n        '''\n        x_val = 1\n        y_val = 0\n        while True:\n            if (x_val * a + y_val * b) == n:\n                return (x_val, y_val)\n            elif (x_val * a + y_val * b) > n:\n                return (x_val - 1, y_val)\n            else:\n                x_val += 1\n                y_val = x_val * a - y_val * b\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    remove_list = [item for item in list1 if item in list2]\n    for item in remove_list:\n        list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for num in list2:\n        if num in list1:\n            list1.remove(num)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [value for value in list1 if value not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            res.append(list1[i])\n    return res\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n - sum(range(1, n//2+1))\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n > 0:\n        return sum_series(n - 2) + n\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return (n + sum_series(n-2))\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n - 2)*sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return (n / 2) * (n / 2 + 1)\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n-2) + (n-4) +... + (n-x)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l*0.25*pi)/4\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = ((l**2) / 4) * tan(pi/s)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    assert s > 0\n    assert l > 0\n    return ((1/2)*s*l)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s / 2 * tan(pi / l)\n    return area\ndef area_rectangle(s, l):\n    '''\n    Write a function to calculate the area of a rectangle given the length and width of its sides.\n    '''\n    return s * l\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given the length of its side.\n    '''\n    return s**2\ndef area_triangle(s1, s2):\n    '''\n    Write a function to calculate the area of a triangle given the length of its three sides.\n    '''\n    area = (s1 * s2)/2\n    return area\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius of its circle.\n    '''\n    return pi * r**2\ndef area_trapezium(s1, s2, h):\n    '''\n    Write a function to calculate the area of a trapezium given the length of its base and two heights of its tops.\n    '''\n    return (s1 + s2) * h / 2\ndef area_rhombus(s1, s2):\n    '''\n    Write a function to calculate the area of a rhombus given the length of its two sides.\n    '''\n    return (s1 * s2) / 2\ndef area_ellipse(a, b):\n    '''\n    Write a function to calculate the area of an ellipse given the lengths of its semi major and minor axes.\n    '''\n    return (a * b) / 2\ndef area_ellipsoid(a, b, c):\n    '''\n    Write a function to calculate the area of an ellipsoid given the lengths of its semi major, semi minor and height of its ellipsoid.\n    '''\n    return a * b * c\ndef area_sphere(r):\n    '''\n    Write a function to calculate the area of a sphere given the radius of its sphere.\n    '''\n    return 4 * pi * r**2\ndef area_hexahedron(a):\n    '''\n    Write a function to calculate the area of a hexahedron given the length of its three sides.\n    '''\n    return 3 * a**2 / 4\ndef area_octahedron(a):\n    '''\n    Write a function to calculate the area of a octahedron given the length of its four sides.\n    '''\n    return 4 * a**2 / 4\ndef area_icosahedron(a):\n    '''\n    Write a function to calculate the area of a icosahedron given the length of its five sides.\n    '''\n    return 5 * a**2 / 4\ndef area_tetrahedron(a):\n    '''\n    Write a function to calculate the area of a tetrahedron given the length of its four sides.\n    '''\n    return 4 * a**2 / 4\ndef area_truncated_cone(r, h):\n    '''\n    Write a function to calculate the area of a truncated cone given the length of its radius and height of its cone.\n    '''\n    return pi * r**2 / 2 + pi * r**2 * h / 2\ndef area_decreasing_triangle(s1, s2, s3):\n    '''\n    Write a function to calculate the area of a decreasing triangle given the lengths of its three sides.\n    '''\n    return (s1 + s2 + s3) / 2\ndef area_n_sided_regular_polygon(s, l):\n    '''\n    Write a function to calculate the area of a n-sided regular polygon given the length of its sides.\n    '''\n    return area_polygon(s, l) + (l - 1) * area_polygon(s, l - 1)\ndef area_conical_prism(r, h):\n    '''\n    Write a function to calculate the area of a conical prism given the radius and height of its prism.\n    '''\n    return area_polygon(r * h, r) + area_polygon(r * h, r)\ndef area_cone(r, h):\n    '''\n    Write a function to calculate the area of a cone given the radius and height of its cone.\n    '''\n    return area_polygon(r * h, r)\ndef area_right_circular_cylinder(r, h):\n    '''\n    Write a function to calculate the area of a right circular cylinder given the radius and height of its cylinder.\n    '''\n    return area_polygon(r * h, r)\ndef area_equal_triangle(s1, s2):\n    '''\n    Write a function to calculate the area of an equal triangle given the length of its base and height of its triangle.\n    '''\n    return (s1 * s2) / 2\ndef area_sierpinski_triangle(s1, s2, s3):\n    '''\n    Write a function to calculate the area of a Sierpinski triangle given the length of its three sides.\n    '''\n    return area_triangle(s1, s2) + area_triangle(s2, s3) + area_triangle(s1, s3)\ndef area_conical_ellipsoid(a, b, c):\n    '''\n    Write a function to calculate the area of a conical ellipsoid given the length of its semi major axis, semi minor axis and height of its ellipsoid.\n    '''\n    return a * b * c\ndef area_rombohedron(a):\n    '''\n    Write a function to calculate the area of a rombohedron given the length of its diagonal.\n    '''\n    return 4 * a**2 / 4\ndef area_pentahedron(a):\n    '''\n    Write a function to calculate the area of a pentahedron given the length of its four sides.\n    '''\n    return a * a * a / 6\ndef area_hemisphere(a):\n    '''\n    Write a function to calculate the area of a hemisphere given the length of its two bases.\n    '''\n    return a * a\ndef area_paralelepiped(a, b, c):\n    '''\n    Write a function to calculate the area of a parallel epiped given the lengths of its three sides.\n    '''\n    return a * b\ndef area_pyramid(s1, s2, s3):\n    '''\n    Write a function to calculate the area of a pyramid given the length of its three bases and the length of its top.\n    '''\n    return area_polygon(s1, s2) + area_polygon(s2, s3)\ndef area_convex_tetrahedron(a):\n    '''\n    Write a function to calculate the area of a convex tetrahedron given the length of its four sides.\n    '''\n    return area_polygon(a, a)\ndef area_convex_octahedron(a):\n    '''\n    Write a function to calculate the area of a convex octahedron given the length of its five sides.\n    '''\n    return area_polygon(a, a)\ndef area_convex_hexahedron(a):\n    '''\n    Write a function to calculate the area of a convex hexahedron given the length of its six sides.\n    '''\n    return area_polygon(a, a)\ndef area_convex_icosahedron(a):\n    '''\n    Write a function to calculate the area of a convex icosahedron given the length of its seven sides.\n    '''\n    return area_polygon(a, a)\ndef area_convex_truncated_cone(r, h):\n    '''\n    Write a function to calculate the area of a convex truncated cone given the length of its radius and height of its cone.\n    '''\n    return area_polygon(r * h, r) + area_polygon(r * h, r)\ndef area_convex_decreasing_triangle(s1, s2, s3):\n    '''\n    Write a function to calculate the area of a convex decreasing triangle given the lengths of its three sides.\n    '''\n    return (s1 + s2 + s3) / 2"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25*(s*s))*(l/s)*(pi)\n    \ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (b*h)/2\n    \ndef area_square(b):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return b*b\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    n = l/2.0\n    area += (n*(s**2))/4.0*(tan(pi/n))\n    return area\ndef is_float(s):\n    '''\n    Write a function to test whether a string is a float\n    '''\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\ndef is_integer(s):\n    '''\n    Write a function to test whether a string is an integer\n    '''\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\ndef is_palindrome(s):\n    '''\n    Write a function to test whether a string is a palindrome\n    '''\n    return s == s[::-1]\ndef is_anagram(s1, s2):\n    '''\n    Write a function to test whether two strings are anagrams\n    '''\n    return sorted(s1) == sorted(s2)\ndef is_prime(n):\n    '''\n    Write a function to test whether a number is prime\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_armstrong(n):\n    '''\n    Write a function to test whether a number is an armstrong number\n    '''\n    s = str(n)\n    total = 0\n    for i in s:\n        total += int(i)**3\n    return n == total\ndef is_superprime(n):\n    '''\n    Write a function to test whether a number is a superprime number\n    '''\n    if is_prime(n):\n        for i in range(2, int(n**0.5)+1):\n            if n%i == 0:\n                return False\n        return True\n    else:\n        return False\ndef is_square(n):\n    '''\n    Write a function to test whether a number is a square number\n    '''\n    return (n**0.5)%1 == 0\ndef is_triangle(n):\n    '''\n    Write a function to test whether a number is a triangle number\n    '''\n    return (n*(n+1))/2.0 == n\ndef is_right_angle(a, b, c):\n    '''\n    Write a function to test whether a triangle is right angled\n    '''\n    return (a**2+b**2)**0.5 == c\ndef is_pentagon(n):\n    '''\n    Write a function to test whether a number is a pentagon number\n    '''\n    return (n*(3*n - 1))/2.0 == n\ndef is_hexagon(n):\n    '''\n    Write a function to test whether a number is a hexagon number\n    '''\n    return (n*(2*n - 1))/2.0 == n\ndef is_hexagon_num(n):\n    '''\n    Write a function to test whether a number is a hexagon number\n    '''\n    return (n*(2*n - 1))%6 == 0\ndef is_octagon(n):\n    '''\n    Write a function to test whether a number is a octagon number\n    '''\n    return (n*(3*n - 2))/2.0 == n\ndef is_octagon_num(n):\n    '''\n    Write a function to test whether a number is a octagon number\n    '''\n    return (n*(3*n - 2))%8 == 0\ndef is_heptagon(n):\n    '''\n    Write a function to test whether a number is a hexagon number\n    '''\n    return (n*(5*n - 3))/2.0 == n\ndef is_heptagon_num(n):\n    '''\n    Write a function to test whether a number is a hexagon number\n    '''\n    return (n*(5*n - 3))%7 == 0\ndef is_octagon_num(n):\n    '''\n    Write a function to test whether a number is a hexagon number\n    '''\n    return (n*(5*n - 3))%8 == 0\ndef is_heptagon_num(n):\n    '''\n    Write a function to test whether a number is a hexagon number\n    '''\n    return (n*(5*n - 3))%7 == 0\ndef is_isosceles_triangle(a, b, c):\n    '''\n    Write a function to test whether a triangle is isosceles\n    '''\n    return a == b or a == c or b == c\ndef is_right_tangent(a, b, c):\n    '''\n    Write a function to test whether a triangle is right angled\n    '''\n    return (a**2 + c**2)**0.5 == (b**2 + c**2)**0.5\ndef is_valid_triangle(a, b, c):\n    '''\n    Write a function to test whether a triangle is valid\n    '''\n    return is_right_angle(a, b, c) and is_isosceles_triangle(a, b, c) and is_isosceles_triangle(b, c, a) and is_isosceles_triangle(c, a, b)\ndef is_valid_triangle_num(a, b, c):\n    '''\n    Write a function to test whether a triangle is valid\n    '''\n    return is_right_angle(a, b, c) and is_isosceles_triangle(a, b, c) and is_isosceles_triangle(b, c, a) and is_isosceles_triangle(c, a, b)\ndef is_equilateral_triangle(a, b, c):\n    '''\n    Write a function to test whether a triangle is equilateral\n    '''\n    return a == b and b == c\ndef is_isosceles_triangle_num(a, b, c):\n    '''\n    Write a function to test whether a triangle is equilateral\n    '''\n    return a == b or a == c or b == c\ndef is_equilateral_triangle_num(a, b, c):\n    '''\n    Write a function to test whether a triangle is equilateral\n    '''\n    return a == b or a == c or b == c\ndef is_equilateral_triangle_num(a, b, c):\n    '''\n    Write a function to test whether a triangle is equilateral\n    '''\n    return a == b or a == c or b == c\ndef is_isosceles_triangle_num(a, b, c):\n    '''\n    Write a function to test whether a triangle is equilateral\n    '''\n    return a == b or a == c or b == c\ndef is_right_triangle(a, b, c):\n    '''\n    Write a function to test whether a triangle is right angled\n    '''\n    return (a**2 + b**2)**0.5 == c\ndef is_right_triangle_num(a, b, c):\n    '''\n    Write a function to test whether a triangle is right angled\n    '''\n    return (a**2 + b**2)**0.5 == c\ndef is_isosceles_triangle(a, b, c):\n    '''\n    Write a function to test whether a triangle is isosceles\n    '''\n    return a == b or a == c or b == c\ndef is_right_triangle_num(a, b, c):\n    '''\n    Write a function to test whether a triangle is isosceles\n    '''\n    return a == b or a == c or b == c\ndef is_isosceles_triangle_num(a, b, c):\n    '''\n    Write a function to test whether a triangle is isosceles\n    '''\n    return a == b or a == c or b == c\ndef is_isosceles_triangle_num(a, b, c):\n    '''\n    Write a function to tes"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    n = l/(2*s)\n    for i in range(n):\n        area = area + (s**2)*(1/tan(pi/n))\n    return area\ndef max_area_polygon(s, l):\n    '''\n    Write a function to calculate the max area of a regular polygon.\n    '''\n    area = 0.0\n    n = l/(2*s)\n    for i in range(n):\n        area = area + (s**2)*(1/tan(pi/n))\n    area_2 = area*2\n    return area_2\ndef min_area_polygon(s, l):\n    '''\n    Write a function to calculate the min area of a regular polygon.\n    '''\n    area = 0.0\n    n = l/(2*s)\n    for i in range(n):\n        area = area + (s**2)*(1/tan(pi/n))\n    area_2 = area*2\n    return area_2\ndef max_perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the max perimeter of a regular polygon given the length and number of its sides.\n    '''\n    perimeter = 0.0\n    n = l/(2*s)\n    for i in range(n):\n        perimeter = perimeter + (s*(n-i))\n    return perimeter\ndef min_perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the min perimeter of a regular polygon.\n    '''\n    perimeter = 0.0\n    n = l/(2*s)\n    for i in range(n):\n        perimeter = perimeter + (s*(n-i))\n    return perimeter\ndef total_perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the total perimeter of a regular polygon given the length and number of its sides.\n    '''\n    perimeter = 0.0\n    n = l/(2*s)\n    for i in range(n):\n        perimeter = perimeter + (s*(n-i))\n    return perimeter\ndef min_perimeter_non_regular_polygon(s, l):\n    '''\n    Write a function to calculate the min perimeter of a non regular polygon.\n    '''\n    perimeter = 0.0\n    n = l/(2*s)\n    for i in range(n):\n        perimeter = perimeter + (s*(n-i))\n    return perimeter\ndef max_perimeter_non_regular_polygon(s, l):\n    '''\n    Write a function to calculate the max perimeter of a non regular polygon.\n    '''\n    perimeter = 0.0\n    n = l/(2*s)\n    for i in range(n):\n        perimeter = perimeter + (s*(n-i))\n    return perimeter\ndef min_circumference_polygon(s, l):\n    '''\n    Write a function to calculate the min circumference of a regular polygon.\n    '''\n    perimeter = 0.0\n    n = l/(2*s)\n    for i in range(n):\n        perimeter = perimeter + (s*(n-i))\n    return perimeter\ndef max_circumference_polygon(s, l):\n    '''\n    Write a function to calculate the max circumference of a regular polygon.\n    '''\n    perimeter = 0.0\n    n = l/(2*s)\n    for i in range(n):\n        perimeter = perimeter + (s*(n-i))\n    return perimeter\ndef area_square(a):\n    '''\n    Write a function to calculate the area of a square given the length of one of its sides.\n    '''\n    area = a**2\n    return area\ndef max_area_square(a):\n    '''\n    Write a function to calculate the max area of a square given the length of one of its sides.\n    '''\n    area = a**2\n    return area\ndef min_area_square(a):\n    '''\n    Write a function to calculate the min area of a square given the length of one of its sides.\n    '''\n    area = a**2\n    return area\ndef max_perimeter_square(a):\n    '''\n    Write a function to calculate the max perimeter of a square given the length of one of its sides.\n    '''\n    perimeter = a*4\n    return perimeter\ndef min_perimeter_square(a):\n    '''\n    Write a function to calculate the min perimeter of a square given the length of one of its sides.\n    '''\n    perimeter = a*4\n    return perimeter\ndef total_perimeter_square(a):\n    '''\n    Write a function to calculate the total perimeter of a square given the length of one of its sides.\n    '''\n    perimeter = a*4\n    return perimeter\ndef min_perimeter_non_regular_square(a):\n    '''\n    Write a function to calculate the min perimeter of a non regular square.\n    '''\n    perimeter = a*4\n    return perimeter\ndef max_perimeter_non_regular_square(a):\n    '''\n    Write a function to calculate the max perimeter of a non regular square.\n    '''\n    perimeter = a*4\n    return perimeter\ndef min_circumference_square(a):\n    '''\n    Write a function to calculate the min circumference of a square given the length of one of its sides.\n    '''\n    perimeter = a*4\n    return perimeter\ndef max_circumference_square(a):\n    '''\n    Write a function to calculate the max circumference of a square given the length of one of its sides.\n    '''\n    perimeter = a*4\n    return perimeter\ndef min_circumference_non_regular_square(a):\n    '''\n    Write a function to calculate the min circumference of a non regular square.\n    '''\n    perimeter = a*4\n    return perimeter\ndef max_circumference_non_regular_square(a):\n    '''\n    Write a function to calculate the max circumference of a non regular square.\n    '''\n    perimeter = a*4\n    return perimeter\ndef area_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given the length and width of its sides.\n    '''\n    area = a*b\n    return area\ndef max_area_rectangle(a, b):\n    '''\n    Write a function to calculate the max area of a rectangle given the length and width of its sides.\n    '''\n    area = a*b\n    return area\ndef min_area_rectangle(a, b):\n    '''\n    Write a function to calculate the min area of a rectangle given the length and width of its sides.\n    '''\n    area = a*b\n    return area\ndef max_perimeter_rectangle(a, b):\n    '''\n    Write a function to calculate the max perimeter of a rectangle given the length and width of its sides.\n    '''\n    perimeter = (a+b)*2\n    return perimeter\ndef min_perimeter_rectangle(a, b):\n    '''\n    Write a function to calculate the min perimeter of a rectangle given the length and width of its sides.\n    '''\n    perimeter = (a+b)*2\n    return perimeter\ndef total_perimeter_rectangle(a, b):\n    '''\n    Write a function to calculate the total perimeter of a rectangle given the length and width of its sides.\n    '''\n    perimeter = (a+b)*2\n    return perimeter\ndef min_perimeter_non_regular_rectangle(a, b):\n    '''\n    Write a function to calculate the min perimeter of a non regular rectangle.\n    '''\n    perimeter = (a+b)*2\n    return perimeter\ndef max_perimeter_non_regular_rectangle(a, b):\n    '''\n    Write a function to calculate the max perimeter of a non regular rectangle.\n    '''\n    perimeter = (a+b)*2\n    return perimeter\ndef min_circumference_rectangle(a, b):\n    '''\n    Write a function to calculate the min circumference of a rectangle given the length and width of its sides.\n    '''\n    perimeter = (a+b)*2\n    return perimeter\ndef max_cir"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if (l <= 0):\n        raise ValueError(\"Polygon length must be greater than 0.\")\n    area = (1.0 * l * s) / (4.0 * tan(pi / l))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l <= 0:\n        return 0\n    return 0.5 * s * l * (l + 1)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.25*(s*(s+2*l)*tan(pi/s))\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        div = 0\n        for i in range(1, math.ceil(n / 2)):\n            if n % i == 0:\n                div += i\n        return div == n\ndef partition(s): \n    '''\n    Write a function that takes a string and returns the number of ways to partition the string such that all the substrings are a palindrome.\n    '''\n    def is_palindrome(s):\n        return s == s[::-1]\n    def is_palindrome_helper(s, i):\n        if i == len(s):\n            return 1\n        elif i == len(s) - 1:\n            return 1 if is_palindrome(s[i]) else 0\n        else:\n            return is_palindrome_helper(s, i + 1) + is_palindrome_helper(s, i + 2)\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    else:\n        return is_palindrome_helper(s, 0)\ndef min_diff_sub_array(arr):\n    '''\n    Find the minimum difference between any two elements of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return abs(arr[0] - arr[0])\n    else:\n        curr_min = abs(arr[0] - arr[1])\n        curr_min = min(curr_min, abs(arr[0] - arr[len(arr) - 1]))\n        for i in range(len(arr) - 1):\n            curr_min = min(curr_min, abs(arr[i] - arr[i + 1]))\n        return curr_min\ndef string_matching_substring(s, p):\n    '''\n    Write a function to find the length of the longest substring T of a given string (consists of lowercase letters only) such that T is a substring of P.\n    '''\n    if len(s) == 0 or len(p) == 0:\n        return 0\n    elif len(s) < len(p):\n        return -1\n    elif len(s) == len(p):\n        if s == p:\n            return len(p)\n        else:\n            return -1\n    else:\n        start_pos = -1\n        for i in range(len(s) - len(p)):\n            if p == s[i:i + len(p)]:\n                start_pos = i\n                break\n        if start_pos!= -1:\n            return len(p)\n        else:\n            return -1\ndef is_anagram(s, t):\n    '''\n    Write a function to check if two words are anagrams.\n    '''\n    if len(s)!= len(t):\n        return False\n    return sorted(s) == sorted(t)\ndef max_sub_array_of_size_k(k, arr):\n    '''\n    Write a function to find the maximum sum of a subarray of size k.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == k:\n        return max(arr)\n    else:\n        curr_max = arr[0]\n        curr_sum = arr[0]\n        for i in range(1, k):\n            curr_sum += arr[i]\n            curr_max = max(curr_max, curr_sum)\n        return curr_max\ndef count_negative_in_array(arr):\n    '''\n    Write a function that counts the number of negative elements in a given array.\n    '''\n    count = 0\n    for num in arr:\n        if num < 0:\n            count += 1\n    return count\ndef max_cont_sub_array(arr):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        curr_max = arr[0]\n        curr_sum = arr[0]\n        for i in range(1, len(arr)):\n            curr_sum += arr[i]\n            curr_max = max(curr_max, curr_sum)\n            if curr_sum < 0:\n                curr_sum = 0\n        return curr_max\ndef rearrange_digits(arr):\n    '''\n    Write a function that takes an array of digits and returns the array in a new array such that the digits are in ascending order.\n    '''\n    if len(arr) == 0:\n        return arr\n    elif len(arr) == 1:\n        return arr\n    else:\n        new_arr = []\n        for i in range(len(arr) / 2):\n            new_arr.append(arr[i])\n            new_arr.append(arr[len(arr) - 1 - i])\n        return new_arr\ndef sort_by_bitwise(arr):\n    '''\n    Write a function that sorts an array of bits in ascending order.\n    '''\n    if len(arr) == 0:\n        return arr\n    elif len(arr) == 1:\n        return arr\n    else:\n        curr_pos = len(arr) / 2\n        first_half = arr[:curr_pos]\n        second_half = arr[curr_pos:]\n        first_half = sort_by_bitwise(first_half)\n        second_half = sort_by_bitwise(second_half)\n        i = 0\n        j = 0\n        new_arr = []\n        while i < len(first_half) and j < len(second_half):\n            if first_half[i] < second_half[j]:\n                new_arr.append(first_half[i])\n                i += 1\n            else:\n                new_arr.append(second_half[j])\n                j += 1\n        if i < len(first_half):\n            new_arr.extend(first_half[i:])\n        else:\n            new_arr.extend(second_half[j:])\n        return new_arr\ndef find_subarray_sums_to_K(arr, K):\n    '''\n    Write a function that finds the subarray with the sum of elements equal to the given value.\n    '''\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        if arr[0] == K:\n            return [arr[0]]\n        else:\n            return []\n    else:\n        curr_pos = len(arr) / 2\n        first_half = arr[:curr_pos]\n        second_half = arr[curr_pos:]\n        first_half_sums = find_subarray_sums_to_K(first_half, K)\n        second_half_sums = find_subarray_sums_to_K(second_half, K)\n        if len(first_half_sums)!= 0:\n            return first_half_sums\n        else:\n            return second_half_sums\ndef longest_consecutive_subsequence(arr):\n    '''\n    Write a function to find the longest consecutive elements sequence in an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return 1\n    else:\n        curr_max = 1\n        curr_start = 0\n        curr_end = 0\n        curr_pos = 1\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i - 1] + 1:\n                curr_end = i\n            else:\n                curr_end = i - 1\n                curr_pos = max(curr_pos, curr_end - curr_start + 1)\n                curr_start = i\n        curr_pos = max(curr_pos, curr_end - curr_start + 1)\n        return cu"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    ans = 0 \n    for i in range(1,n): \n        if n % i == 0: \n            ans = ans + i \n    return ans \n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1: \n        return False\n    s = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0: \n            s = s + i + n/i \n    return s == n\n    \ndef armstrong(n): \n    '''\n    Write a function that takes a number as input and returns True if the number is an Armstrong number, and False otherwise.\n    '''\n    s = 0\n    while n > 0: \n        s = s + (n%10)**3 \n        n = n//10 \n    return s == n \n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    d = []\n    if n == 1: \n        return False\n    elif n == 2: \n        return True\n    else: \n        for i in range(1, int(math.sqrt(n)) + 1): \n            if n % i == 0: \n                d.append(i)\n                d.append(n/i)\n        d.sort()\n        print d\n        if sum(d[0:len(d) - 1]) == sum(d[1:len(d)]):\n            return True\n        else: \n            return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if (n==1):\n        return False\n    l = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i == (n / i):\n                l.append(i)\n            else:\n                l.append(i)\n                l.append(n / i)\n    s = sum(l)\n    if s == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n_divisors = []\n    for i in range(1, n):\n        if n%i == 0:\n            n_divisors.append(i)\n    if sum(n_divisors) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==1:\n        return True\n    list_div=[]\n    sum_div=0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            list_div.append(i)\n            list_div.append(n/i)\n    list_div.sort()\n    for i in range(0,len(list_div),2):\n        sum_div+=list_div[i]\n    return sum_div==list_div[len(list_div)-1]\n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: return 0\n    div = [1]\n    for x in range(2,int(math.sqrt(n)) + 1):\n        if n % x == 0:\n            div.append(x)\n            if n / x!= x:\n                div.append(n / x)\n    return sum(div)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    count = 0\n    for i in range(1, n): \n        if n % i == 0: \n            count += i \n    return count\ndef is_prime(n): \n    '''\n    Write a function to return True if a given positive integer is prime, otherwise return False.\n    '''\n    if n == 1: \n        return False \n    if n % 2 == 0: \n        return n == 2 \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False \n    return True \ndef get_primes(n): \n    '''\n    Write a function to get all the prime numbers between 0 and a given number.\n    '''\n    # for i in range(1, n + 1): \n    #     if is_prime(i): \n    #         print(i, end = \" \")\n    l = list(range(0, n + 1)) \n    for i in range(2, n + 1): \n        if l[i]!= 0: \n            j = i \n            while i * j < n + 1: \n                l[i * j] = 0 \n                j += 1 \n    print(l)\n    res = [] \n    for i in l: \n        if i!= 0 and i!= 1: \n            res.append(i) \n    return res \ndef is_prime_v2(n): \n    '''\n    Write a function to determine if a given number is prime.\n    '''\n    if n == 1: \n        return False \n    if n == 2: \n        return True \n    if n % 2 == 0: \n        return False \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False \n    return True \ndef get_primes_v2(n): \n    '''\n    Write a function to get all the prime numbers between 0 and a given number.\n    '''\n    res = [] \n    for i in range(2, n + 1): \n        if is_prime_v2(i): \n            res.append(i) \n    return res \ndef is_palindrome(n): \n    '''\n    Write a function to determine if a given number is palindrome or not. \n    '''\n    s = str(n) \n    for i in range(0, int(len(s) / 2)): \n        if s[i]!= s[len(s) - 1 - i]: \n            return False \n    return True \ndef is_palindrome_v2(n): \n    '''\n    Write a function to determine if a given number is palindrome or not. \n    '''\n    s = str(n) \n    return s == s[::-1] \ndef get_palindrome(n): \n    '''\n    Write a function to get all the palindrome numbers between 0 and a given number.\n    '''\n    res = [] \n    for i in range(1, n + 1): \n        if is_palindrome(i): \n            res.append(i) \n    return res \ndef get_palindrome_v2(n): \n    '''\n    Write a function to get all the palindrome numbers between 0 and a given number.\n    '''\n    res = [] \n    for i in range(1, n + 1): \n        if is_palindrome_v2(i): \n            res.append(i) \n    return res \ndef is_palin_perm(s): \n    '''\n    Write a function to determine if a given string is a permutation of a palindrome. \n    '''\n    d = {} \n    for i in s: \n        if i not in d: \n            d[i] = 1 \n        else: \n            d[i] += 1 \n    for i in d: \n        if d[i] % 2!= 0: \n            return False \n    return True \ndef is_palin_perm_v2(s): \n    '''\n    Write a function to determine if a given string is a permutation of a palindrome. \n    '''\n    d = {} \n    for i in s: \n        if i not in d: \n            d[i] = 1 \n        else: \n            d[i] += 1 \n    for i in d: \n        if d[i] % 2!= 0: \n            return False \n    return True \ndef is_palin_perm_v3(s): \n    '''\n    Write a function to determine if a given string is a permutation of a palindrome. \n    '''\n    d = {} \n    for i in s: \n        if i not in d: \n            d[i] = 1 \n        else: \n            d[i] += 1 \n    for i in d: \n        if d[i] % 2!= 0: \n            return False \n    return True \ndef count_vowels(s): \n    '''\n    Write a function to count the vowels in a given string. \n    '''\n    count = 0 \n    for i in s: \n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u': \n            count += 1 \n    return count \ndef count_vowels_v2(s): \n    '''\n    Write a function to count the vowels in a given string. \n    '''\n    count = 0 \n    vowels = ['a', 'e', 'i', 'o', 'u'] \n    for i in s: \n        if i in vowels: \n            count += 1 \n    return count \ndef count_vowels_v3(s): \n    '''\n    Write a function to count the vowels in a given string. \n    '''\n    count = 0 \n    vowels = ['a', 'e', 'i', 'o', 'u'] \n    for i in s: \n        if i in vowels: \n            count += 1 \n    return count \ndef count_vowels_v4(s): \n    '''\n    Write a function to count the vowels in a given string. \n    '''\n    count = 0 \n    vowels = ['a', 'e', 'i', 'o', 'u'] \n    for i in vowels: \n        count += s.count(i) \n    return count \ndef count_vowels_v5(s): \n    '''\n    Write a function to count the vowels in a given string. \n    '''\n    count = 0 \n    vowels = ['a', 'e', 'i', 'o', 'u'] \n    for i in vowels: \n        count += s.count(i) \n    return count \ndef count_vowels_v6(s): \n    '''\n    Write a function to count the vowels in a given string. \n    '''\n    count = 0 \n    vowels = ['a', 'e', 'i', 'o', 'u'] \n    for i in vowels: \n        count += s.count(i) \n    return count \ndef count_vowels_v7(s): \n    '''\n    Write a function to count the vowels in a given string. \n    '''\n    count = 0 \n    vowels = ['a', 'e', 'i', 'o', 'u'] \n    for i in vowels: \n        count += s.count(i) \n    return count \ndef count_vowels_v8(s): \n    '''\n    Write a function to count the vowels in a given string. \n    '''\n    count = 0 \n    vowels = ['a', 'e', 'i', 'o', 'u'] \n    for i in vowels: \n        count += s.count(i) \n    return count \ndef count_vowels_v9(s): \n    '''\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str2 = str1.lower()\n    count = 0\n    for i in range(0,len(str1)):\n        for j in range(0,26):\n            if str2[i] == chr(ord('a') + j):\n                count = count + 1\n    print count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize a dictionary with positions of characters and their corresponding positions in the alphabet \n    char_pos_dict = {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26}\n    result = 0\n    # traverse the string \n    for letter in str1:\n        # get the position of the letter in the string \n        pos = char_pos_dict[letter.lower()]\n        # get the corresponding position of the letter in the alphabet \n        result += (26**(pos-1))\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    alphabet = list(string.ascii_lowercase)\n    for i in alphabet:\n        char_count[i] = 0\n    for i in range(len(str1)):\n        char_count[str1[i]] += 1\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1:\n        if ord(i) >= 97 and ord(i) <= 122:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict1 = {}\n    for i in str1:\n        if i.isalpha():\n            if i not in dict1:\n                dict1[i] = 1\n            else:\n                dict1[i] += 1\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Your code here\n    alpha_count = 0\n    n = len(str1)\n    for i in range(n):\n        if str1[i].lower() in alpha:\n            alpha_count += 1\n    return alpha_count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].lower() == str1[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = {'a':0, 'b':1, 'c':2, 'd':3, 'e':4, 'f':5, 'g':6, 'h':7, 'i':8, 'j':9, 'k':10, 'l':11,'m':12, 'n':13, 'o':14, 'p':15, 'q':16, 'r':17,'s':18, 't':19, 'u':20, 'v':21, 'w':22, 'x':23, 'y':24, 'z':25}\n    return len([k for k,v in alpha.items() if v == ord(k.lower()) - 96])\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabets = \"abcdefghijklmnopqrstuvwxyz\"\n    counts = {}\n    for letter in alphabets:\n        counts[letter] = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in counts:\n            counts[str1[i].lower()] += 1\n    return counts\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    B = Counter(A)\n    counter = 0\n    for i in B:\n        if not (i & 1):\n            if i ^ 1 in B:\n                counter += B[i]*B[i ^ 1]\n    return counter\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in xrange(len(A)): \n        for j in xrange(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count \n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i]^A[j])%2==0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    result = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                result += 1\n    return result\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    def count_pairs(x, y, pair_count):\n        '''\n        returns number of pairs of integers in list that xor to an even number\n        '''\n        if x == y:\n            pair_count += 1\n        return pair_count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i]^A[j])%2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 0:\n        return 0\n    counter = 0\n    for i in range(0, len(A)):\n        for j in range(i, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in xrange(len(A)):\n        for j in xrange(i+1, len(A)):\n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #your code here\n    count = 0\n    for i in xrange(len(A)):\n        for j in xrange(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while x < n: \n        x = x * 2\n    return x\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(int(math.log(n, 2) + 1))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 << (n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(int(log(n,2)+1))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        return 1\n    result = 1\n    while result <= n:\n        result = result * 2\n    return result\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << int(math.ceil(math.log(n, 2)))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 1\n    while p <= n:\n        p = p * 2\n    return p\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(int(log(n,2)+1))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # input n > 0\n    assert n > 0\n    \n    # input n < 1\n    assert n < 1\n    \n    # get the log2 of n, where log2(n) is the smallest int such that 2^log2(n) = n\n    log2_n = int(math.log(n, 2))\n    \n    # if the log2 is an integer, then 2^log2(n) = n\n    if log2_n == int(log2_n):\n        return n\n    \n    # if not, then 2^(log2(n) + 1) = n\n    else:\n        return 2**(log2_n + 1)\n    \n    \n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while(i <= n): \n        i = i * 2\n    return i // 2\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    frequency = 0 \n    for number in a: \n        if number == x: \n            frequency += 1 \n    return frequency \n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if x == a[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if len(a)==0:\n        return 0\n    else:\n        return 1+frequency(a[1:],x) if a[0]==x else frequency(a[1:],x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if x == a[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    freq = 0\n    for item in a:\n        if item == x:\n            freq += 1\n    return freq\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    def helper(x):\n        return x[1]\n    \n    d = {}\n    for e in a:\n        if e in d:\n            d[e]+=1\n        else:\n            d[e]=1\n    return helper(d[x])\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n    \ndef reverse(a):\n    '''\n    Write a function that reverses a string.\n    '''\n    rev = ''\n    for i in range(len(a)):\n        rev = rev + a[-i-1]\n    return rev\n    \ndef join_list(a,b):\n    '''\n    Write a function to join a list into a string\n    '''\n    return str(a) + str(b)\n    \ndef list_numbers(a):\n    '''\n    Write a function that returns a list of all numbers in a given string.\n    '''\n    return a.split()\n    \ndef intersection(a,b):\n    '''\n    Write a function that returns the intersection of two lists.\n    '''\n    return list(set(a).intersection(b))\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    from collections import Counter \n    count = Counter(a) \n    if x in count.keys(): \n        return count[x] \n    else: \n        return 0 \n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num_occurrences = 0\n    for i in a:\n        if i == x:\n            num_occurrences += 1\n    return num_occurrences\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m <= nn"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m,n):\n        s += list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sumn"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (a*(3*a-math.sqrt(5)))/2\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return a*(3*a-math.sqrt(3))/2\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return a*(5*a-math.sqrt(2))/2\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*(5+2*a-math.sqrt(5))/2\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return a*(5*a-math.sqrt(5))/2\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a*(6*a-math.sqrt(3))/2\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return a*(6*a-math.sqrt(3))/2\ndef perimeter_triangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular triangle from the lengths of its sides.\n    '''\n    return a+b+math.sqrt(a**2+b**2)\ndef area_triangle(a,b):\n    '''\n    Write a function to find the area of a regular triangle from the lengths of its sides.\n    '''\n    return (a*b)/2\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its side.\n    '''\n    return 4*a\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its side.\n    '''\n    return a**2\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the lengths of its sides.\n    '''\n    return 2*(a+b)\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from the lengths of its sides.\n    '''\n    return a*b\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular triangle from the lengths of its sides.\n    '''\n    return a+b+c\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a regular triangle from the lengths of its sides.\n    '''\n    return (a*b)/2\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the lengths of its sides.\n    '''\n    return 2*(a+b)\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from the lengths of its sides.\n    '''\n    return a*b\ndef perimeter_kite(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular kite from the lengths of its sides.\n    '''\n    return a+b+c+math.sqrt(a**2+b**2+c**2)\ndef area_kite(a,b,c):\n    '''\n    Write a function to find the area of a regular kite from the lengths of its sides.\n    '''\n    return (a*b)/2\ndef perimeter_tetrahedron(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the lengths of its sides.\n    '''\n    return a+b+c+math.sqrt(a**2+b**2+c**2)\ndef area_tetrahedron(a,b,c):\n    '''\n    Write a function to find the area of a regular tetrahedron from the lengths of its sides.\n    '''\n    return (a*b*c)/4\ndef perimeter_cube(a):\n    '''\n    Write a function to find the perimeter of a regular cube from the length of its side.\n    '''\n    return 6*a\ndef area_cube(a):\n    '''\n    Write a function to find the area of a regular cube from the length of its side.\n    '''\n    return a**3\ndef perimeter_octahedron(a):\n    '''\n    Write a function to find the perimeter of a regular octahedron from the length of its side.\n    '''\n    return 8*a\ndef area_octahedron(a):\n    '''\n    Write a function to find the area of a regular octahedron from the length of its side.\n    '''\n    return 5*a**2\ndef perimeter_dodecahedron(a):\n    '''\n    Write a function to find the perimeter of a regular dodecahedron from the length of its side.\n    '''\n    return 12*a\ndef area_dodecahedron(a):\n    '''\n    Write a function to find the area of a regular dodecahedron from the length of its side.\n    '''\n    return 10*a**2\ndef perimeter_icosahedron(a):\n    '''\n    Write a function to find the perimeter of a regular icosahedron from the length of its side.\n    '''\n    return 12*a\ndef area_icosahedron(a):\n    '''\n    Write a function to find the area of a regular icosahedron from the length of its side.\n    '''\n    return 6*a**2\ndef perimeter_pyramid(a,b):\n    '''\n    Write a function to find the perimeter of a regular pyramid from the lengths of its sides.\n    '''\n    return a+b+math.sqrt(a**2+b**2)\ndef area_pyramid(a,b):\n    '''\n    Write a function to find the area of a regular pyramid from the lengths of its sides.\n    '''\n    return a*b/2\ndef perimeter_hexahedron(a):\n    '''\n    Write a function to find the perimeter of a regular hexahedron from the length of its side.\n    '''\n    return 6*a\ndef area_hexahedron(a):\n    '''\n    Write a function to find the area of a regular hexahedron from the length of its side.\n    '''\n    return 4*a**2\ndef perimeter_octahedron(a):\n    '''\n    Write a function to find the perimeter of a regular octahedron from the length of its side.\n    '''\n    return 8*a\ndef area_octahedron(a):\n    '''\n    Write a function to find the area of a regular octahedron from the length of its side.\n    '''\n    return 6*a**2\ndef perimeter_tetrahedron(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the lengths of its sides.\n    '''\n    return a+b+c+math.sqrt(a**2+b**2+c**2)\ndef area_tetrahedron(a,b,c):\n    '''\n    Write a function to find the are"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (3*a)**2 + (3**2)*(a**2)/(2*3**0.5)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5+(a**2-a)/2\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6+(a**2-a)/2\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7+(a**2-a)/2\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8+(a**2-a)/2\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a*10+(a**2-a)/2\ndef perimeter_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the length of its sides.\n    '''\n    return a*4\ndef perimeter_cuboctahedron(a):\n    '''\n    Write a function to find the perimeter of a regular cuboctahedron from the length of its sides.\n    '''\n    return a*12\ndef perimeter_trinectahedron(a):\n    '''\n    Write a function to find the perimeter of a regular trinectahedron from the length of its sides.\n    '''\n    return a*6\ndef perimeter_rectangular_prism(a,b):\n    '''\n    Write a function to find the perimeter of a rectangular prism from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_hemicuboctahedron(a):\n    '''\n    Write a function to find the perimeter of a hemicuboctahedron from the length of its sides.\n    '''\n    return 2*(a**2-a)\ndef perimeter_hemicuboctahedron(a):\n    '''\n    Write a function to find the perimeter of a hemicuboctahedron from the length of its sides.\n    '''\n    return 2*(a**2-a)\ndef perimeter_octahedron(a):\n    '''\n    Write a function to find the perimeter of a octahedron from the length of its sides.\n    '''\n    return 6*(a**2-a)\ndef perimeter_icosahedron(a):\n    '''\n    Write a function to find the perimeter of a icosahedron from the length of its sides.\n    '''\n    return 6*(a**2-a)\ndef perimeter_rhombicuboctahedron(a):\n    '''\n    Write a function to find the perimeter of a rhombicuboctahedron from the length of its sides.\n    '''\n    return 6*(a**2-a)\ndef perimeter_rhombicuboctahedron(a):\n    '''\n    Write a function to find the perimeter of a rhombicuboctahedron from the length of its sides.\n    '''\n    return 6*(a**2-a)\ndef perimeter_octaedron(a):\n    '''\n    Write a function to find the perimeter of a octaedron from the length of its sides.\n    '''\n    return 8*(a**2-a)\ndef perimeter_icosaedron(a):\n    '''\n    Write a function to find the perimeter of a icosaedron from the length of its sides.\n    '''\n    return 8*(a**2-a)\ndef perimeter_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a tetrahedron from the length of its sides.\n    '''\n    return 4*(a**2-a)\ndef perimeter_cube(a):\n    '''\n    Write a function to find the perimeter of a cube from the length of its sides.\n    '''\n    return 6*(a**2-a)\ndef perimeter_octahedron(a):\n    '''\n    Write a function to find the perimeter of a octahedron from the length of its sides.\n    '''\n    return 8*(a**2-a)\ndef perimeter_dodecaedron(a):\n    '''\n    Write a function to find the perimeter of a dodecaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_trinectaedron(a):\n    '''\n    Write a function to find the perimeter of a trinectaedron from the length of its sides.\n    '''\n    return 10*(a**2-a)\ndef perimeter_hexaedron(a):\n    '''\n    Write a function to find the perimeter of a hexaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_heptaedron(a):\n    '''\n    Write a function to find the perimeter of a heptaedron from the length of its sides.\n    '''\n    return 14*(a**2-a)\ndef perimeter_octaedron(a):\n    '''\n    Write a function to find the perimeter of an octaedron from the length of its sides.\n    '''\n    return 14*(a**2-a)\ndef perimeter_dodecaedron(a):\n    '''\n    Write a function to find the perimeter of a dodecaedron from the length of its sides.\n    '''\n    return 16*(a**2-a)\ndef perimeter_icosaedron(a):\n    '''\n    Write a function to find the perimeter of a icosaedron from the length of its sides.\n    '''\n    return 16*(a**2-a)\ndef perimeter_cuboctaedron(a):\n    '''\n    Write a function to find the perimeter of a cuboctaedron from the length of its sides.\n    '''\n    return 18*(a**2-a)\ndef perimeter_tetrachaedron(a):\n    '''\n    Write a function to find the perimeter of a tetrachaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_pentachaedron(a):\n    '''\n    Write a function to find the perimeter of a pentachaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_hexachaedron(a):\n    '''\n    Write a function to find the perimeter of a hexachaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_heptachaedron(a):\n    '''\n    Write a function to find the perimeter of a heptachaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_octachaedron(a):\n    '''\n    Write a function to find the perimeter of a octachaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_decachaedron(a):\n    '''\n    Write a function to find the perimeter of a decachaedron from the length of its sides.\n    '''\n    return 12*(a**2-a)\ndef perimeter_octahedral_prism(a,b,c):\n    '''\n    Write a function to find the perimeter of a octahedral prism from the length of its sides.\n    '''\n    return 2*(a+b+c)\ndef perimeter_hexahedral_prism(a,b,c):\n    '''\n    Write a function to find the perimeter of a hexahedral prism from the length of its sides.\n    '''\n    return 2*(a+b+c)\ndef perimeter_tetrahedral_prism(a,b,c):\n    '''\n    Write a function to find the perimeter of a tetrahedral prism from the length of its sides.\n    '''\n    return 2*(a+b+c)\ndef perimeter_octahedral_prism(a,b,c):\n    '''\n    Write a function to find the perimeter of an octahedral prism from the length of its sides.\n    '''"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a\n    \ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + a\n    \ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + a\n    \ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a\n    \ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a\n    \ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a*10 + a\n    \ndef perimeter_heptagon_2(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*5 + a\n    \ndef perimeter_octagon_2(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*6 + a\n    \ndef perimeter_nonagon_2(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*7 + a\n    \ndef perimeter_decagon_2(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*8 + a\n    \ndef perimeter_decagon_3(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a\n    \ndef perimeter_octagon_3(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*10 + a\n    \ndef perimeter_heptagon_3(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*5 + a\n    \ndef perimeter_hexagon_3(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*6 + a\n    \ndef perimeter_heptagon_4(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*7 + a\n    \ndef perimeter_octagon_4(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*8 + a\n    \ndef perimeter_nonagon_4(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a\n    \ndef perimeter_octagon_5(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*10 + a\n    \ndef perimeter_hexagon_5(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*5 + a\n    \ndef perimeter_heptagon_6(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*6 + a\n    \ndef perimeter_octagon_6(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*7 + a\n    \ndef perimeter_nonagon_6(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*8 + a\n    \ndef perimeter_hexagon_7(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a\n    \ndef perimeter_octagon_7(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*10 + a\n    \ndef perimeter_hexagon_8(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*5 + a\n    \ndef perimeter_heptagon_8(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*6 + a\n    \ndef perimeter_octagon_8(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*7 + a\n    \ndef perimeter_nonagon_8(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*8 + a\n    \ndef perimeter_octagon_9(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a\n    \ndef perimeter_hexagon_9(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*10 + a\n    \ndef perimeter_heptagon_10(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*5 + a\n    \ndef perimeter_hexagon_10(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*6 + a\n    \ndef perimeter_heptagon_11(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*7 + a\n    \ndef perimeter_octagon_11(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*8 + a\n    \ndef perimeter_nonagon_11(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a\n    \ndef perimeter_octagon_12(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*10 + a\n    \ndef perimeter_hexagon_12(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*5 + a\n    \ndef perimeter_heptagon_12(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*6 + a\n    \ndef perimeter_octagon_13(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*7 + a\n    \ndef perimeter_nonagon_13(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*8 + a\n    \ndef perimeter_octagon_14(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + "
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return 5*a**2/4\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6*a\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return 3*a**2/2\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 7*a\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    return 4*a**2/2\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return 4*a**2\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return 10*a\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return 5*a**2/4\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return 12*a\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a regular dodecagon from the length of its sides.\n    '''\n    return 6*a**2/4\ndef perimeter_tridecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tridecagon from the length of its sides.\n    '''\n    return 12*a\ndef area_tridecagon(a):\n    '''\n    Write a function to find the area of a regular tridecagon from the length of its sides.\n    '''\n    return 5*a**2/4\ndef perimeter_tetradecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetradecagon from the length of its sides.\n    '''\n    return 14*a\ndef area_tetradecagon(a):\n    '''\n    Write a function to find the area of a regular tetradecagon from the length of its sides.\n    '''\n    return 4*a**2/2\ndef perimeter_heptadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptadecagon from the length of its sides.\n    '''\n    return 16*a\ndef area_heptadecagon(a):\n    '''\n    Write a function to find the area of a regular heptadecagon from the length of its sides.\n    '''\n    return 5*a**2/2\ndef perimeter_octadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular octadecagon from the length of its sides.\n    '''\n    return 18*a\ndef area_octadecagon(a):\n    '''\n    Write a function to find the area of a regular octadecagon from the length of its sides.\n    '''\n    return 6*a**2/2\ndef perimeter_novemdecagon(a):\n    '''\n    Write a function to find the perimeter of a regular novemdecagon from the length of its sides.\n    '''\n    return 20*a\ndef area_novemdecagon(a):\n    '''\n    Write a function to find the area of a regular novemdecagon from the length of its sides.\n    '''\n    return 7*a**2/2\ndef perimeter_decadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular decadecagon from the length of its sides.\n    '''\n    return 24*a\ndef area_decadecagon(a):\n    '''\n    Write a function to find the area of a regular decadecagon from the length of its sides.\n    '''\n    return 8*a**2/2\ndef perimeter_onethirddecagon(a):\n    '''\n    Write a function to find the perimeter of a regular onethirddecagon from the length of its sides.\n    '''\n    return 28*a\ndef area_onethirddecagon(a):\n    '''\n    Write a function to find the area of a regular onethirddecagon from the length of its sides.\n    '''\n    return 9*a**2/2\ndef perimeter_twothirddecagon(a):\n    '''\n    Write a function to find the perimeter of a regular twothirddecagon from the length of its sides.\n    '''\n    return 30*a\ndef area_twothirddecagon(a):\n    '''\n    Write a function to find the area of a regular twothirddecagon from the length of its sides.\n    '''\n    return 10*a**2/2\ndef perimeter_threedecagon(a):\n    '''\n    Write a function to find the perimeter of a regular threedecagon from the length of its sides.\n    '''\n    return 36*a\ndef area_threedecagon(a):\n    '''\n    Write a function to find the area of a regular threedecagon from the length of its sides.\n    '''\n    return 11*a**2/2\ndef perimeter_fourteen(a):\n    '''\n    Write a function to find the perimeter of a regular fourteen from the length of its sides.\n    '''\n    return 14*a\ndef area_fourteen(a):\n    '''\n    Write a function to find the area of a regular fourteen from the length of its sides.\n    '''\n    return 4*a**2\ndef perimeter_fifteen(a):\n    '''\n    Write a function to find the perimeter of a regular fifteen from the length of its sides.\n    '''\n    return 15*a\ndef area_fifteen(a):\n    '''\n    Write a function to find the area of a regular fifteen from the length of its sides.\n    '''\n    return 5*a**2\ndef perimeter_sixteen(a):\n    '''\n    Write a function to find the perimeter of a regular sixteen from the length of its sides.\n    '''\n    return 16*a\ndef area_sixteen(a):\n    '''\n    Write a function to find the area of a regular sixteen from the length of its sides.\n    '''\n    return 6*a**2\ndef perimeter_seventeen(a):\n    '''\n    Write a function to find the perimeter of a regular seventeen from the length of its sides.\n    '''\n    return 17*a\ndef area_seventeen(a):\n    '''\n    Write a function to find the area of a regular seventeen from the length of its sides.\n    '''\n    return 7*a**2\ndef perimeter_eighteen(a):\n    '''\n    Write a function to find the perimeter of a regular eighteen from the length of its sides.\n    '''\n    return 18*a\ndef area_eighteen(a):\n    '''\n    Write a function to find the area of a regular eighteen from the length of its sides.\n    '''\n    return 8*a**2\ndef perimeter_nineteen(a):\n    '''\n    Write a function to find the perimeter of a regular nineteen from the length of its sides.\n    '''\n    return 19*a\ndef area_nineteen(a):\n    '''\n    Write a function to find the area of a regular nineteen from the length of its sides.\n    '''\n    return 9*a**2\ndef perimeter_twenty(a):\n    '''\n    Write a function to find the perimeter of a regular twenty from the length of its sides.\n    '''"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*5\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + a*3\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + a*4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a*5\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a*6\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a*10 + a*7\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*8 + a*5\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*7 + a*4\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*6 + a*5\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a*6 + a*4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*5 + a*3\ndef perimeter_tetagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetagon from the length of its sides.\n    '''\n    return a*4 + a*6\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*5 + a*6\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*5 + a*4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*5 + a*3\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*5 + a*4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*5 + a*3\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*5 + a*3\ndef perimeter_tetagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetagon from the length of its sides.\n    '''\n    return a*4 + a*6\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*5 + a*6\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*5 + a*4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*5 + a*3\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*5 + a*4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*5 + a*3\ndef perimeter_tetagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetagon from the length of its sides.\n    '''\n    return a*4 + a*6\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*5 + a*6\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*5 + a*4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*5 + a*3\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*5 + a*4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*5 + a*3\ndef perimeter_tetagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetagon from the length of its sides.\n    '''\n    return a*4 + a*6\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*5 + a*6\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*5 + a*4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*5 + a*3\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*5 + a*4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*5 + a*3\ndef perimeter_tetagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetagon from the length of its sides.\n    '''\n    return a*4 + a*6\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*5 + a*6\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*5 + a*4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*5 + a*3\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*5 + a*4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*5 + a*3\ndef perimeter_tetagon(a):\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*5*math.sqrt(5)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + a*7*math.sqrt(7)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a*8*math.sqrt(8)\ndef perimeter_star(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*(5*math.sqrt(5) + 1) + a*(5*math.sqrt(5) + 1)*math.sqrt(5)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*5*math.sqrt(5)\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a*3\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*(5*math.sqrt(5) + 1) + a*(5*math.sqrt(5) + 1)*math.sqrt(5)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a*8*math.sqrt(8)\ndef perimeter_turtle(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*(5*math.sqrt(5) + 1) + a*(5*math.sqrt(5) + 1)*math.sqrt(5)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*(5*math.sqrt(5) + 1) + a*(5*math.sqrt(5) + 1)*math.sqrt(5)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a*8*math.sqrt(8)\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a*4\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a*3\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a*8*math.sqrt(8)\ndef perimeter_turtle(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*(5*math.sqrt(5) + 1) + a*(5*math.sqrt(5) + 1)*math.sqrt(5)\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*5*math.sqrt(5)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a*8*math.sqrt(8)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*(5*math.sqrt(5) + 1) + a*(5*math.sqrt(5) + 1)*math.sqrt(5)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a*8*math.sqrt(8)\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a*4\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_he"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + a * 3 + a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * 4 + a * 2\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * 4 + a * 2\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 9 + a * 5 + a * 3\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a * 10 + a * 6 + a * 4\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a * 12 + a * 8 + a * 6 + a * 4\ndef perimeter_tetragon(a):\n    '''\n    Write a function to find the perimeter of a regular tetragon from the length of its sides.\n    '''\n    return a * 4 + a * 2 + a * 2\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a * 7 + a * 4 + a * 3\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * 5 + a * 3\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 9 + a * 5 + a * 2\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 10 + a * 6 + a * 4\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a * 12 + a * 8 + a * 6 + a * 4\ndef perimeter_septagon(a):\n    '''\n    Write a function to find the perimeter of a regular septagon from the length of its sides.\n    '''\n    return a * 7 + a * 5 + a * 3\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * 5 + a * 3\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 9 + a * 5 + a * 2\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 10 + a * 6 + a * 4\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 12 + a * 8 + a * 6 + a * 4\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 12 + a * 8 + a * 6 + a * 4\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + a * 3 + a * 3\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * 4 + a * 4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * 4 + a * 4\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 9 + a * 5 + a * 3\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a * 10 + a * 6 + a * 4\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a * 12 + a * 8 + a * 6 + a * 4\ndef perimeter_tetragon(a):\n    '''\n    Write a function to find the perimeter of a regular tetragon from the length of its sides.\n    '''\n    return a * 4 + a * 2 + a * 2\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a * 7 + a * 4 + a * 3\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * 5 + a * 3\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 9 + a * 5 + a * 2\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 10 + a * 6 + a * 4\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a * 12 + a * 8 + a * 6 + a * 4\ndef perimeter_septagon(a):\n    '''\n    Write a function to find the perimeter of a regular septagon from the length of its sides.\n    '''\n    return a * 7 + a * 5 + a * 3\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * 5 + a * 3\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 9 + a * 5 + a * 2\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 10 + a * 6 + a * 4\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 12 + a * 8 + a * 6 + a * 4\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 12 + a * 8 + a * 6 + a * 4\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + a * 3 + a * 3\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * 4 + a * 4\ndef perimeter_octagon("
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (5 * (a**2)) / (4 * math.tan(math.pi / 5))\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    l = len(s)\n    r = s.count('std')\n    return r\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    num = s.count('std')\n    return num\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(test_tuple[0]) == type(item) for item in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(i) is type(test_tuple[0]) for i in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Your code here\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return len(set(type(x) for x in test_tuple)) <= 1\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(elem) for elem in test_tuple))>1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return len(set(map(type, test_tuple))) <= 1\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    \n    for val in test_tuple:\n        if type(val)!= data_type:\n            return False\n    return True\n    \n    \ndef check_len(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same length or not.\n    '''\n    \n    lens = []\n    \n    for val in test_tuple:\n        lens.append(len(val))\n        \n    if len(set(lens)) == 1:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return len(set(type(x) for x in test_tuple)) == 1\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if not isinstance(i,type(test_tuple[0])):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    def check_tuple(test_tuple):\n        if not isinstance(test_tuple, tuple):\n            raise TypeError(\"Invalid input\")\n        return True\n    \n    def check_elem_type(test_tuple):\n        for elem in test_tuple:\n            if not isinstance(elem, type(test_tuple[0])):\n                raise TypeError(\"Not all elements have the same data type\")\n            return True\n    \n    if not check_type(test_tuple):\n        raise TypeError(\"Invalid input\")\n    else:\n        if not check_elem_type(test_tuple):\n            raise TypeError(\"Not all elements have the same data type\")\n        else:\n            return True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == x or arr[1] == x\n    if arr[0] == x:\n        return is_majority(arr[1:], n-1, x)\n    elif arr[n-1] == x:\n        return is_majority(arr[:n-1], n-1, x)\n    else:\n        return is_majority(arr[:n-1], n-1, x) or is_majority(arr[n-1:], n-1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(0, n):\n        if arr[i] == x:\n            count += 1\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n/2] == x:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # O(n)\n    arr = list(arr)\n    arr_size = len(arr)\n    if arr_size == 1:\n        return arr[0]\n    # Majority element is in the middle\n    if x < arr[arr_size/2]:\n        return is_majority(arr[:arr_size/2], n/2, x)\n    else:\n        return is_majority(arr[arr_size/2+1:], n/2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count = count + 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    elif x == arr[n//2]:\n        return True\n    else:\n        return is_majority(arr, n//2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    majority_count = 0\n    for i in range(0, n):\n        if arr[i] == x:\n            majority_count += 1\n    if majority_count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return n/2 < sum(1 for e in arr if e == x)\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while(n):\n        n&=(n-1)\n        count+=1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        if n & 1: \n            count += 1\n        n = n >> 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c=0\n    while n:\n        n &= n - 1\n        c+=1\n    return c\n    \n    \ndef test_Set_Bits():\n    print count_Set_Bits(5)\n    print count_Set_Bits(6)\n    print count_Set_Bits(7)\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        n &= n - 1\n        count += 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1: count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        if (n & 1):\n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n    \ndef count_Set_Bits_2(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        if n!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        n &= n - 1\n        count += 1\n    return count \ndef test_count_Set_Bits():\n    assert(count_Set_Bits(0) == 0)\n    assert(count_Set_Bits(1) == 1)\n    assert(count_Set_Bits(5) == 1)\n    assert(count_Set_Bits(6) == 2)\n    assert(count_Set_Bits(7) == 3)\n    assert(count_Set_Bits(8) == 1)\n    assert(count_Set_Bits(9) == 2)\n    assert(count_Set_Bits(10) == 2)\n    assert(count_Set_Bits(11) == 3)\n    assert(count_Set_Bits(12) == 2)\n    assert(count_Set_Bits(13) == 3)\n    assert(count_Set_Bits(14) == 3)\n    assert(count_Set_Bits(15) == 4)\n    assert(count_Set_Bits(16) == 1)\n    assert(count_Set_Bits(17) == 2)\n    assert(count_Set_Bits(18) == 2)\n    assert(count_Set_Bits(19) == 3)\n    assert(count_Set_Bits(20) == 2)\n    assert(count_Set_Bits(21) == 3)\n    assert(count_Set_Bits(22) == 3)\n    assert(count_Set_Bits(23) == 4)\n    assert(count_Set_Bits(24) == 2)\n    assert(count_Set_Bits(25) == 3)\n    assert(count_Set_Bits(26) == 3)\n    assert(count_Set_Bits(27) == 4)\n    assert(count_Set_Bits(28) == 2)\n    assert(count_Set_Bits(29) == 3)\n    assert(count_Set_Bits(30) == 3)\n    assert(count_Set_Bits(31) == 4)\n    assert(count_Set_Bits(32) == 2)\n    assert(count_Set_Bits(33) == 3)\n    assert(count_Set_Bits(34) == 3)\n    assert(count_Set_Bits(35) == 4)\n    assert(count_Set_Bits(36) == 3)\n    assert(count_Set_Bits(37) == 4)\n    assert(count_Set_Bits(38) == 4)\n    assert(count_Set_Bits(39) == 5)\n    assert(count_Set_Bits(40) == 2)\n    assert(count_Set_Bits(41) == 3)\n    assert(count_Set_Bits(42) == 3)\n    assert(count_Set_Bits(43) == 4)\n    assert(count_Set_Bits(44) == 2)\n    assert(count_Set_Bits(45) == 3)\n    assert(count_Set_Bits(46) == 3)\n    assert(count_Set_Bits(47) == 4)\n    assert(count_Set_Bits(48) == 2)\n    assert(count_Set_Bits(49) == 3)\n    assert(count_Set_Bits(50) == 3)\n    assert(count_Set_Bits(51) == 4)\n    assert(count_Set_Bits(52) == 2)\n    assert(count_Set_Bits(53) == 3)\n    assert(count_Set_Bits(54) == 3)\n    assert(count_Set_Bits(55) == 4)\n    assert(count_Set_Bits(56) == 2)\n    assert(count_Set_Bits(57) == 3)\n    assert(count_Set_Bits(58) == 3)\n    assert(count_Set_Bits(59) == 4)\n    assert(count_Set_Bits(60) == 2)\n    assert(count_Set_Bits(61) == 3)\n    assert(count_Set_Bits(62) == 3)\n    assert(count_Set_Bits(63) == 4)\n    assert(count_Set_Bits(64) == 2)\n    assert(count_Set_Bits(65) == 3)\n    assert(count_Set_Bits(66) == 3)\n    assert(count_Set_Bits(67) == 4)\n    assert(count_Set_Bits(68) == 3)\n    assert(count_Set_Bits(69) == 4)\n    assert(count_Set_Bits(70) == 4)\n    assert(count_Set_Bits(71) == 5)\n    assert(count_Set_Bits(72) == 2)\n    assert(count_Set_Bits(73) == 3)\n    assert(count_Set_Bits(74) == 3)\n    assert(count_Set_Bits(75) == 4)\n    assert(count_Set_Bits(76) == 2)\n    assert(count_Set_Bits(77) == 3)\n    assert(count_Set_Bits(78) == 3)\n    assert(count_Set_Bits(79) == 4)\n    assert(count_Set_Bits(80) == 2)\n    assert(count_Set_Bits(81) == 3)\n    assert(count_Set_Bits(82) == 3)\n    assert(count_Set_Bits(83) == 4)\n    assert(count_Set_Bits(84) == 2)\n    assert(count_Set_Bits(85) == 3)\n    assert(count_Set_Bits(86) == 3)\n    assert(count_Set_Bits(87) == 4)\n    assert(count_Set_Bits(88) == 2)\n    assert(count_Set_Bits(89) == 3)\n    assert(count_Set_Bits(90) == 3)\n    assert(count_Set_Bits(91) == 4)\n    assert(count_Set_Bits(92) == 2)\n    assert(count_Set_Bits(93) == 3)\n    assert(count_Set_Bits(94) == 3)\n    assert(count_Set_Bits(95) == 4)\n    assert(count_Set_Bits(96) == 2)\n    assert(count_Set_Bits(97) == 3)\n    assert(count_Set_Bits(98) == 3)\n    assert(count_Set_Bits(99) == 4)\n    assert(count_Set_Bits(100) == 2)\n    assert(count_Set_Bits(101) == 3)\n    assert(count_Set_Bits(102) == 3)\n    assert(count_Set_Bits(103) == 4)\n    assert(count_Set_Bits(104) == 2)\n    assert(count_Set_Bits(105) == 3)\n    assert(count_Set_Bits(106) == 3)\n    assert(count_Set_Bits(107) == 4)\n    assert(count_Set_Bits(108) == 2)\n    assert(count_Set_Bits(109) == 3)\n    assert(count_Set_Bits(110) == 3)\n    assert(count_Set_Bits(111) == 4)\n    assert(count_Set_Bits(112) == 2)\n    assert(count_Set_Bits(113) == 3)\n    assert(count_Set_Bits(114) == 3)\n    assert(count_Set_Bits(115) == 4)\n    assert(count_Set_Bits(116) == 2)\n    assert(count_Set_Bits(117) == 3)\n    assert(count_Set_Bits(118) == 3)\n    assert(count_Set_Bits(119) == 4)\n    assert(count_Set_Bits(120) == 2)\n    assert(count_Set_Bits(121) == 3)\n    assert(count_Set_Bits(122) == 3)\n    assert(count_Set_Bits(123) == 4)\n    assert(count_Set_Bits(124) == 2)\n    assert(count_Set_Bits"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str=''\n    for i in range(0, len(str)):\n        if i%2==0:\n            new_str+=str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[i] for i in range(1,len(str),2))\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([x for index,x in enumerate(str) if index%2==0])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i%2==0:\n            result+=str[i]\n    return result\ndef max_count_1(arr):\n    '''\n    Write a python function to find the maximum occurring character in a string.\n    '''\n    max_val = 0\n    char = ''\n    for i in arr:\n        if arr.count(i)>max_val:\n            max_val=arr.count(i)\n            char=i\n    return char\ndef max_count_2(arr):\n    '''\n    Write a python function to find the maximum occurring character in a string.\n    '''\n    max_val = 0\n    char = ''\n    for i in arr:\n        if arr.count(i)>max_val:\n            max_val=arr.count(i)\n            char=i\n    return char\ndef is_string_rotated(s1, s2):\n    '''\n    Write a python function to check whether one string is a rotation of another string.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    temp = s1+s1\n    return temp.find(s2)!= -1\ndef is_string_rotated(s1, s2):\n    '''\n    Write a python function to check whether one string is a rotation of another string.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i:]+s1[:i]==s2:\n            return True\n    return False\ndef rotate_string(string, n):\n    '''\n    Write a python function to rotate a string to the left by n positions.\n    '''\n    if string is None:\n        return None\n    if n==0:\n        return string\n    if n>=len(string):\n        return string\n    return string[n:]+string[:n]\ndef rotate_string(string, n):\n    '''\n    Write a python function to rotate a string to the left by n positions.\n    '''\n    if string is None:\n        return None\n    if n==0:\n        return string\n    if n>=len(string):\n        return string\n    return string[n:]+string[:n]\ndef find_maximum_sub_array(arr, low, high):\n    '''\n    Write a python function to find the maximum sum of a contiguous subarray within an array.\n    '''\n    if low==high:\n        return arr[low]\n    mid = (low+high)/2\n    left_sum = find_maximum_sub_array(arr, low, mid)\n    right_sum = find_maximum_sub_array(arr, mid+1, high)\n    cross_sum = find_max_cross_sum(arr, low, mid, high)\n    return max(left_sum, right_sum, cross_sum)\ndef find_max_cross_sum(arr, low, mid, high):\n    left_sum = -float('inf')\n    summ = 0\n    for i in range(mid, low-1, -1):\n        summ += arr[i]\n        if summ>left_sum:\n            left_sum = summ\n    right_sum = -float('inf')\n    summ = 0\n    for i in range(mid+1, high+1):\n        summ += arr[i]\n        if summ>right_sum:\n            right_sum = summ\n    return left_sum+right_sum\ndef reverse_string(str):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if str is None:\n        return None\n    if len(str)==0:\n        return str\n    if len(str)==1:\n        return str\n    return str[len(str)-1]+reverse_string(str[:len(str)-1])\ndef reverse_string(str):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if str is None:\n        return None\n    if len(str)==0:\n        return str\n    if len(str)==1:\n        return str\n    return str[-1]+reverse_string(str[:len(str)-1])\ndef is_string_rotated(s1, s2):\n    '''\n    Write a python function to check whether one string is a rotation of another string.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if s1+s1==s2:\n        return True\n    return False\ndef is_string_rotated(s1, s2):\n    '''\n    Write a python function to check whether one string is a rotation of another string.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if s1+s1==s2:\n        return True\n    return False\ndef find_rotated_array_indices(arr, low, high, key):\n    '''\n    Write a python function to find the indices of the left most rotated element and the right most rotated element in an array.\n    '''\n    if low==high:\n        return (low, high)\n    mid = (low+high)/2\n    if arr[mid]<key:\n        return find_rotated_array_indices(arr, mid+1, high, key)\n    else:\n        return find_rotated_array_indices(arr, low, mid, key)\ndef find_rotated_array_indices(arr, low, high, key):\n    '''\n    Write a python function to find the indices of the left most rotated element and the right most rotated element in an array.\n    '''\n    if low==high:\n        return (low, high)\n    mid = (low+high)/2\n    if arr[mid]<key:\n        return find_rotated_array_indices(arr, mid+1, high, key)\n    else:\n        return find_rotated_array_indices(arr, low, mid, key)\ndef find_rotated_array_indices(arr, low, high, key):\n    '''\n    Write a python function to find the indices of the left most rotated element and the right most rotated element in an array.\n    '''\n    if low==high:\n        return (low, high)\n    mid = (low+high)/2\n    if arr[mid]<key:\n        return find_rotated_array_indices(arr, mid+1, high, key)\n    else:\n        return find_rotated_array_indices(arr, low, mid, key)\ndef find_rotated_array_indices(arr, low, high, key):\n    '''\n    Write a python function to find the indices of the left most rotated element and the right most rotated element in an array.\n    '''\n    if low==high:\n        return (low, high)\n    mid = (low+high)/2\n    if arr[mid]<key:\n        return find_rotated_array_indices(arr, mid+1, high, key)\n    else:\n        return find_rotated_array_indices(arr, low, mid, key)\ndef find_rotated_array_indices(arr, low, high, key):\n    '''\n    Write a python function to find the indices of the left most rotated element and the right most rotated element in an array.\n    '''\n    if low==high:\n        return (low, high)\n    mid = (low+high)/2\n    if arr[mid]<key:\n        return find_rotated_array_indices(arr, mid+1, high, key)\n    else:\n        return find_rotated_array_indices(arr, low, mid, key)\ndef find_rotated_array_indices(arr, low, high, key):\n    '''\n    Write a python function to find the indices of the left most rotated element and the right most rotated element in an array.\n    '''\n    if low==high:\n        return (low, high)\n    mid = (low+high)/2\n    if arr[mid]<key:\n        return find_rotated_array_indices(arr, mid+1, high, key)\n    else:\n        return find_rotated_array_indices(arr, low, mid, key"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([x for i,x in enumerate(str) if i%2==0])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(str[::2])\n    \n    \ndef even_values_string(str):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    return \"\".join(str[1::2])\n    \n    \ndef replace_char(str):\n    '''\n    Write a python function to replace the character at index 4 with $.\n    '''\n    return str[:4] + \"$\" + str[5:]\n    \n    \ndef replace_char_2(str):\n    '''\n    Write a python function to replace the character at index 4 with $ and at index 6 with &.\n    '''\n    return str[:4] + \"&\" + str[6:]\n    \n    \ndef replace_char_3(str):\n    '''\n    Write a python function to replace the character at index 3 with & and at index 5 with #.\n    '''\n    return str[:3] + \"&\" + str[4:6] + \"#\" + str[7:]\n    \n    \ndef replace_char_4(str):\n    '''\n    Write a python function to replace the character at index 1 with $ and at index 3 with #.\n    '''\n    return str[:1] + \"$\" + str[3:] + \"#\"\n    \n    \ndef find_second_maximum_number(list):\n    '''\n    Write a python program to find the second maximum number in a list.\n    '''\n    max_num = max(list)\n    list.remove(max_num)\n    second_max = max(list)\n    return second_max\n    \n    \ndef find_second_maximum_number_2(list):\n    '''\n    Write a python program to find the second maximum number in a list.\n    '''\n    max_num = max(list)\n    list.remove(max_num)\n    second_max = max(list)\n    return second_max\n    \n    \ndef reverse_a_string(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return str[::-1]\n    \n    \ndef reverse_a_string_2(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str) - 1, -1, -1):\n        new_str += str[i]\n    return new_str\n    \n    \ndef is_string_palindrome(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return str == str[::-1]\n    \n    \ndef is_string_palindrome_2(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return str == reverse_a_string_2(str)\n    \n    \ndef is_string_palindrome_3(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if len(str) == 0:\n        return True\n    elif len(str) == 1:\n        return True\n    elif str[0] == str[-1]:\n        return is_string_palindrome_3(str[1:-1])\n    else:\n        return False\n    \n    \ndef is_string_palindrome_4(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if len(str) == 0:\n        return True\n    elif len(str) == 1:\n        return True\n    elif str[0] == str[-1]:\n        return is_string_palindrome_4(str[1:-1])\n    else:\n        return False\n    \n    \ndef count_numbers(str):\n    '''\n    Write a python function to count the number of digits in a given string.\n    '''\n    return len(str) - str.count(' ') - str.count('\\n')\n    \n    \ndef count_numbers_2(str):\n    '''\n    Write a python function to count the number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char in \"0123456789\":\n            count += 1\n    return count\n    \n    \ndef count_numbers_3(str):\n    '''\n    Write a python function to count the number of digits in a given string.\n    '''\n    return sum(1 for x in str if x in \"0123456789\")\n    \n    \ndef count_numbers_4(str):\n    '''\n    Write a python function to count the number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\n    \n    \ndef count_words(str):\n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    return len(str.split())\n    \n    \ndef count_words_2(str):\n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    return len(str.split())\n    \n    \ndef count_words_3(str):\n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    return sum(1 for word in str.split() if len(word) > 0)\n    \n    \ndef count_words_4(str):\n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    return sum(1 for word in str.split() if len(word) > 0)\n    \n    \ndef get_string_between(str, start, end):\n    '''\n    Write a python function to get the substring between two given characters.\n    '''\n    return str.split(start, 1)[1].split(end, 1)[0]\n    \n    \ndef get_string_between_2(str, start, end):\n    '''\n    Write a python function to get the substring between two given characters.\n    '''\n    start_index = str.index(start)\n    end_index = str.index(end)\n    return str[start_index + 1: end_index]\n    \n    \ndef get_string_between_3(str, start, end):\n    '''\n    Write a python function to get the substring between two given characters.\n    '''\n    return str.split(start, 1)[1].split(end, 1)[0]\n    \n    \ndef get_string_between_4(str, start, end):\n    '''\n    Write a python function to get the substring between two given characters.\n    '''\n    start_index = str.index(start)\n    end_index = str.index(end)\n    return str[start_index + 1: end_index]\n    \n    \ndef get_string_between_5(str, start, end):\n    '''\n    Write a python function to get the substring between two given characters.\n    '''\n    start_index = str.index(start)\n    end_index = str.index(end)\n    return str[start_index + 1: end_index]\n    \n    \ndef get_string_between_6(str, start, end):\n    '''\n    Write a python function to get the substring between two given characters.\n    '''\n    start_index = str.index(start)\n    end_index = str.index(end)\n    return str[start_index + 1: end_index]\n    \n    \ndef get_string_between_7(str, start, end):\n    '''\n    Write a python function to get the substring between two given characters.\n    '''\n    start_index = str.index(start)\n    end_index = str.index(end)\n    return str[start_index + 1: end_index]\n    \n    \ndef get_string_between_8(str, start, end):\n    '''\n    Write a python function to get the substring between two given characters.\n    '''\n    start_index = str.index(start)\n    end_index = str.index(end)\n    retur"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    s = str[1::2]\n    return s\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[::2])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_lst = list(str)\n    for i in range(1, len(str_lst), 2):\n        str_lst[i] = ''\n    return ''.join(str_lst)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < c and b < a:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n    \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    return max(a,b,c)\n    \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    return max(a,b,c)\n    \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    return max(a,b,c)\n    \ndef sort_array(a):\n    '''\n    Write a function to sort the array of numbers and return the sorted array\n    '''\n    return sorted(a)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min = a\n    if b < min:\n        min = b\n    if c < min:\n        min = c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c: \n        return a\n    elif b<c: \n        return b\n    else: \n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print(\"\\n\")\n    print(\"Checking whether all the bits are set in the given range or not...\")\n    for i in range(l,r+1):\n        if (n & i == 0):\n            print(\"Bit is set.\")\n        else:\n            print(\"Bit is unset.\")\n    print(\"\\n\")\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n=bin(n)\n    a=n[2:]\n    a=a[::-1]\n    a=int(a)\n    if l<=a<=r:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == r:\n        return True\n    elif l > r:\n        return False\n    else:\n        return all_Bits_Set_In_The_Given_Range(n, l, (l + r) // 2) and all_Bits_Set_In_The_Given_Range(n, (l + r) // 2 + 1, r)\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n>>l)&1:\n        return False\n    if (n>>r)&1:\n        return False\n    return True\n    \n    \ndef all_Bits_Set_In_The_Given_Range_Fast(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (n>>l)&1 and (n>>r)&1\n    \n    \ndef isPowerOfTwo(n):  \n    '''\n    Write a python function to check whether a given number is power of two or not.\n    '''\n    if n <= 0:\n        return False\n    return all_Bits_Set_In_The_Given_Range(n,0,0)\n    \ndef isPowerOfTwoFast(n):  \n    '''\n    Write a python function to check whether a given number is power of two or not.\n    '''\n    return (n > 0) and (all_Bits_Set_In_The_Given_Range_Fast(n,0,0))\n    \n    \ndef reverse(x):\n    '''\n    Write a python function to reverse a given number.\n    '''\n    if x < 0:\n        return -reverse(-x)\n    ret = 0\n    while x:\n        ret = ret*10 + x%10\n        x /= 10\n    return ret\n    \ndef reverseFast(x):\n    '''\n    Write a python function to reverse a given number.\n    '''\n    return int(str(x)[::-1])\n    \ndef isPalindrome(n):  \n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    return n == reverse(n)\n    \ndef isPalindromeFast(n):  \n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    return n == reverseFast(n)\n    \n    \ndef isPerfectNumber(n):  \n    '''\n    Write a python function to check whether a given number is a perfect number or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    s = 0\n    for x in range(1,n):\n        if n % x == 0:\n            s += x\n    return s == n\n    \ndef isPerfectNumberFast(n):  \n    '''\n    Write a python function to check whether a given number is a perfect number or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    return n == sum(x for x in range(1,n) if n%x == 0)\n    \ndef isHarshadNumber(n):  \n    '''\n    Write a python function to check whether a given number is a harshad number or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n % 9!= 0:\n        return False\n    return isPerfectNumber(n/9)\n    \ndef isHarshadNumberFast(n):  \n    '''\n    Write a python function to check whether a given number is a harshad number or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n % 9!= 0:\n        return False\n    return isPerfectNumberFast(n/9)\n    \ndef largestPrimeFactor(n):  \n    '''\n    Write a python function to find the largest prime factor of a given number.\n    '''\n    if n <= 0:\n        return -1\n    if n == 1:\n        return 1\n    for x in range(2,n):\n        if n % x == 0:\n            return x\n    return n\n    \ndef largestPrimeFactorFast(n):  \n    '''\n    Write a python function to find the largest prime factor of a given number.\n    '''\n    if n <= 0:\n        return -1\n    if n == 1:\n        return 1\n    for x in range(2,int(n**0.5)+1):\n        if n % x == 0:\n            return x\n    return n\n    \ndef factors(n):  \n    '''\n    Write a python function to find all the prime factors of a given number.\n    '''\n    ret = []\n    if n <= 0:\n        return ret\n    while n:\n        x = largestPrimeFactorFast(n)\n        n /= x\n        ret.append(x)\n    return ret\n    \ndef factorsFast(n):  \n    '''\n    Write a python function to find all the prime factors of a given number.\n    '''\n    ret = []\n    if n <= 0:\n        return ret\n    while n:\n        x = largestPrimeFactorFast(n)\n        n /= x\n        ret.append(x)\n    return ret\n    \ndef isPrime(n):  \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for x in range(3,int(n**0.5)+1,2):\n        if n % x == 0:\n            return False\n    return True\n    \ndef isPrimeFast(n):  \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    return all(n%x for x in range(3,int(n**0.5)+1,2))\n    \ndef sumOfSquareNumbers(n):  \n    '''\n    Write a python function to find the sum of the squares of the first n numbers.\n    '''\n    s = 0\n    for x in range(n):\n        s += x*x\n    return s\n    \ndef sumOfSquareNumbersFast(n):  \n    '''\n    Write a python function to find the sum of the squares of the first n numbers.\n    '''\n    return sum(x*x for x in range(n))\n    \ndef isPrime2(n):  \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for x in range(3,int(n**0.5)+1,2):\n        if n % x == 0:\n            return False\n    return True\n    \ndef isPrime3(n):  \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for x in range(3,int(n**0.5)+1,2):\n        if n % x == 0:\n            return False\n    return True\n    \ndef isPrime4(n):  \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    x = 3\n    while x*x <= n:\n        if n%x == 0:\n            return False\n        x += 2\n    return True\n    \ndef isPrime5(n):  \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n    "
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return not n & (2 ** (l - 1)) & (2 ** (r - 1))\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r + 1):\n        if bin(i).count('1') == n:\n            count += 1\n    if count == r - l + 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all( map(lambda x: not (x in range(l,r+1)), map(lambda x: str(bin(x))[2:].zfill(n), range(l,r+1)) ) )\ndef all_Bits_Set_In_The_Given_Range_Without_Caching(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while(l<=r):\n        if (((l&1)==1) and ((r&1)==0)):\n            return False\n        l=l>>1\n        r=r>>1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    result = True\n    for i in range(l,r+1):\n        if (n & 1) == 1:\n            result = False\n            break\n        n = n >> 1\n    return result\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n & (1 << r)) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n & (1 << l) == 0:\n        if n & (1 << r) == 0:\n            return 0\n        else:\n            return 1\n    else:\n        return 1\n    \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n & (1 << l) == 0:\n        if n & (1 << r) == 0:\n            return 0\n        else:\n            return 1\n    else:\n        return 1\n    \ndef Check_The_Bits_In_a_Number_in_a_Range(n,l,r):\n    '''\n    Write a python function to check whether the bits in the given range are unset or not in the given number.\n    '''\n    if n & (1 << l) == 0:\n        if n & (1 << r) == 0:\n            return 0\n        else:\n            return 1\n    else:\n        return 1\n    \ndef Check_The_Bits_In_a_Number_in_a_Range(n,l,r):\n    '''\n    Write a python function to check whether the bits in the given range are unset or not in the given number.\n    '''\n    if n & (1 << l) == 0:\n        if n & (1 << r) == 0:\n            return 0\n        else:\n            return 1\n    else:\n        return 1\n    \ndef Find_The_Last_Bit_Set_In_a_Number(n):\n    '''\n    Write a python function to find the last bit set in a number.\n    '''\n    if n & (1 << (len(bin(n))-2)) == 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        for j in range(i, len(arr)):\n            if arr[j] < 0:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    temp = []\n    for i in range(n):\n        if arr[i] < 0:\n            temp.append(arr[i])\n    for i in range(n):\n        if arr[i] >= 0:\n            temp.append(arr[i])\n    return temp\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) < n:\n        return arr\n    i = n\n    for index, item in enumerate(arr):\n        if item < 0:\n            arr[i], arr[index] = arr[index], arr[i]\n            i += 1\n    return arr\n    \ndef move_negative_to_front(arr):\n    '''\n    Given an array of integers, write a function that moves all negative elements to the front of the array, preserving the order of all positive elements.\n    '''\n    if len(arr) == 0:\n        return arr\n    i = 0\n    for index, item in enumerate(arr):\n        if item >= 0:\n            i = index\n            break\n    j = i\n    while j < len(arr):\n        if arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        j += 1\n    return arr\n    \ndef move_negative_to_end(arr):\n    '''\n    Given an array of integers, write a function that moves all negative elements to the end of the array, preserving the order of all positive elements.\n    '''\n    if len(arr) == 0:\n        return arr\n    i = 0\n    for index, item in enumerate(arr):\n        if item >= 0:\n            i = index\n            break\n    j = i + 1\n    while j < len(arr):\n        if arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        j += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n    for i in xrange(0, len(negative)):\n        arr[i] = negative[i]\n    for i in xrange(0, len(positive)):\n        arr[i+len(negative)] = positive[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    negative = []\n    positive = []\n    \n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n    \n    result = negative + positive\n    \n    if len(result) < n:\n        for i in range(n - len(result)):\n            result.append(0)\n    \n    return result\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Return the absolute value of the first n elements of arr\n    return arr[:n] + [abs(x) for x in arr[n:]]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_new = []\n    for i in range(n):\n        if arr[i] < 0:\n            arr_new.append(arr[i])\n    for i in range(n, len(arr)):\n        if arr[i] >= 0:\n            arr_new.append(arr[i])\n    return arr_new\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = sorted(arr)\n    return arr[:n] + arr[n:]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(0, n):\n        if arr[i] < 0:\n            temp = arr[i]\n            arr[i] = arr[n-i-1]\n            arr[n-i-1] = temp\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    n_pos = 0\n    n_neg = 0\n    for i in range(n):\n        if arr[i] < 0:\n            n_neg += 1\n        elif arr[i] > 0:\n            n_pos += 1\n    arr[:n_neg] = list(reversed(arr[:n_neg]))\n    arr[n_pos:n] = list(reversed(arr[n_pos:n]))\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str2 += char\n        else:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n    \ndef reverse(str1):\n    '''\n    Write a function that takes in a string and returns the string in reverse.\n    '''\n    return str1[::-1]\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\") % char\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # 1st solution\n    # new_str = ''\n    # for i in str1:\n    #     if i =='':\n    #         new_str += char\n    #     else:\n    #         new_str += i\n    # return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Your code here\n    if not str1:\n        return ''\n    str1 = str1.replace(' ','')\n    return str1 + char\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for letter in str1:\n        if letter == \" \":\n            letter = char\n        new_str += letter\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    # replace blank spaces with char\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = list(str1)\n    for i in range(0, len(str1)):\n        if str1[i] =='':\n            str1[i] = char\n    return ''.join(str1)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Replace blank spaces\n    str1 = str1.replace(' ','')\n    # Replace character\n    str1 = str1.replace(char,'')\n    # Return the string\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n    \ndef smallest_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    return heapq.nsmallest(n, list1)\n    \ndef larg_mnum(list1,m):\n    '''\n    Write a function that takes in a list and an integer m and returns a list containing the m smallest items from the list.\n    '''\n    return heapq.nsmallest(m, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list2 = list1[::-1]\n    i = 0\n    for i in range(n):\n        list1.pop(0)\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pq = []\n    \n    for i in range(n):\n        pq.append(list1[i])\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l = []\n    for i in range(n):\n        largest = max(list1)\n        l.append(largest)\n        list1.remove(largest)\n    return l\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1[0:n]\ndef menor_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    l = []\n    for i in range(n):\n        smallest = min(list1)\n        l.append(smallest)\n        list1.remove(smallest)\n    return l\ndef menor_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort()\n    return list1[0:n]\ndef every_other(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains every other item from the original list.\n    '''\n    list1.reverse()\n    new = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            new.append(list1[i])\n    return new\ndef every_other2(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains every other item from the original list.\n    '''\n    return list1[::2]\ndef reverse_range(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the items in the reverse order.\n    '''\n    list1.reverse()\n    return list1\ndef sum_range(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the sum of each of the integers in the list.\n    '''\n    return [sum(list1)]\ndef max_range(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the maximum integer in the list.\n    '''\n    return [max(list1)]\ndef max_range2(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the maximum integer in the list.\n    '''\n    return [max(list1)]\ndef index_range(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the index of each item in the list.\n    '''\n    return [i for i in range(len(list1))]\ndef index_range2(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the index of each item in the list.\n    '''\n    return [i for i in range(len(list1))]\ndef index_range3(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the index of each item in the list.\n    '''\n    return [i for i in range(len(list1))]\ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the items from the list in reverse order.\n    '''\n    list1.reverse()\n    return list1\ndef remove_nth_from_end(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that contains the items from the original list except the nth last item.\n    '''\n    l = []\n    list1.reverse()\n    l.append(list1[n])\n    list1.reverse()\n    return l\ndef remove_nth_from_end2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that contains the items from the original list except the nth last item.\n    '''\n    list1.reverse()\n    return list1[n:]\ndef cut_in_half(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains half of the items in the original list.\n    '''\n    l = []\n    midpoint = len(list1)//2\n    for i in range(midpoint):\n        l.append(list1[i])\n    return l\ndef cut_in_half2(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains half of the items in the original list.\n    '''\n    return list1[len(list1)//2:]\ndef top_3(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the top 3 items in the original list.\n    '''\n    return list1[0:3]\ndef top_32(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the top 3 items in the original list.\n    '''\n    return list1[:3]\ndef sum_total(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the sum of all the items in the original list.\n    '''\n    return sum(list1)\ndef reverse_total(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the reverse of the items in the original list.\n    '''\n    list1.reverse()\n    return list1\ndef factorial(n):\n    '''\n    Write a function that takes in a integer n and returns the factorial of the integer.\n    '''\n    if n == 1:\n        return n\n    else:\n        return n * factorial(n-1)\ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome2(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    return s == s[::-1]\ndef is_palindrome3(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    for i in range(len(s)//2):\n        if s[i]!= s[-i-1]:\n            return False\n    return True\ndef is_palindrome4(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    return s == s[::-1]\ndef max_list(list1):\n    '''\n    Write a function that takes in a list and returns the maximum item in the list.\n    '''\n    return max(list1)\ndef min_list(list1):\n    '''\n    Write a function that takes in a list and returns the minimum item in the list.\n    '''\n    return min(list1)\ndef factorial(n):\n    '''\n    Write a function that takes in a integer n and returns the factorial of the integer.\n    '''\n    if n == 1:\n        return n\n    else:\n        return n * factorial(n-1)\ndef is_anagram(s1,s2):\n    '''\n    Write a function that takes in two strings and returns True if the two strings are anagrams of each other and False otherwise.\n    '''\n    s1 = s1.replace(\" \", \"\").lower()\n    s2 = s2.replace(\" \", \"\").lower()\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False\ndef is_anagram2(s1,s2):\n    '''\n    Write a function that takes in two strings and returns True if the two strings are anagrams of each other and False otherwise.\n    '''\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap,-1*list1[i])\n    for i in range(n,len(list1)):\n        if -1*list1[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap,-1*list1[i])\n    return [x for x in max_heap]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap=[]\n    for i in range(n):\n        heapq.heappush(max_heap,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]>max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap,list1[i])\n    return max_heap\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    a=len(list1)\n    if a<n:\n        return []\n    else:\n        return list1[a-n:a]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap=[]\n    for i in range(0,n):\n        heapq.heappush(max_heap,list1[i])\n    for j in range(n,len(list1)):\n        if list1[j]>max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap,list1[j])\n    return max_heap\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    heapq.heapify(list1)\n    outlist=[]\n    for i in range(n):\n        outlist.append(heapq.heappop(list1))\n    return outlist\n    \n    \ndef make_dict(a_list):\n    '''\n    Write a function that takes in a list and returns a dictionary where the keys are the items in the list, and the values are how many times each item appeared in the list.\n    '''\n    dict1={}\n    for item in a_list:\n        if item in dict1:\n            dict1[item]+=1\n        else:\n            dict1[item]=1\n    return dict1\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*pi*r*(r+h))\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # area of a cylinder\n    pi = 3.14159265359\n    # length and radius of the cylinder\n    l = 2*pi*r\n    # height of the cylinder\n    h = 2*pi*r*h\n    return (l*h)\n    \nprint lateralsuface_cylinder(5,10)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    V=(math.pi*r**2)/4\n    A=V*h\n    return A\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return math.pi * (r**2) * h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print r**2 + r**2*h\n    return (r**2) + (r**2)*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    sa = r**2*3.14159\n    print 'cylinder with radius {0} and height {1} has a lateral surface area of {2}'.format(r,h,sa)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h+2*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    return pi * (r**2) * h\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # if l > 0:\n    #     v = l ** 3\n    # else:\n    #     v = 'Error: side length must be positive.'\n    # return v\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n    \ndef volume_cuboid(l1,l2,l3):\n    '''\n    Write a function to find the volume of a cuboid given its length of each side.\n    '''\n    return l1*l2*l3\n    \ndef volume_tetrahedron(l1):\n    '''\n    Write a function to find the volume of a tetrahedron given its length of each side.\n    '''\n    return l1**3/4\n    \ndef volume_prism(l1,l2):\n    '''\n    Write a function to find the volume of a prism given its length of each side.\n    '''\n    return l1*l2**2/2\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    return math.pi*r**2*h\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    return 4/3*math.pi*r**3\n    \ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere given its radius.\n    '''\n    return math.pi*r**2/3\n    \ndef volume_box(l,w,h):\n    '''\n    Write a function to find the volume of a box given its length, width, and height.\n    '''\n    return l*w*h\n    \ndef volume_parallelepiped(l,w,h):\n    '''\n    Write a function to find the volume of a parallelepiped given its length, width, and height.\n    '''\n    return l*w*h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given its radius and height.\n    '''\n    return (math.pi/3)*r**2*h\n    \ndef volume_torus(r1,r2):\n    '''\n    Write a function to find the volume of a torus given its radii.\n    '''\n    return math.pi*math.pi*r1**2*r2**2/4\n    \ndef volume_pyramid(l):\n    '''\n    Write a function to find the volume of a pyramid given its length.\n    '''\n    return l**2/4\n    \ndef volume_sphere_section(r):\n    '''\n    Write a function to find the volume of a section of a sphere given its radius.\n    '''\n    return math.pi*r**2\n    \ndef volume_cone_section(r,h):\n    '''\n    Write a function to find the volume of a section of a cone given its radius and height.\n    '''\n    return math.pi*r**2*h/3\n    \ndef volume_pyramid_section(l):\n    '''\n    Write a function to find the volume of a section of a pyramid given its length.\n    '''\n    return l**2/4\n    \ndef volume_cube_section(l):\n    '''\n    Write a function to find the volume of a section of a cube given its length.\n    '''\n    return l**2\n    \ndef volume_tetrahedron_section(l):\n    '''\n    Write a function to find the volume of a section of a tetrahedron given its length.\n    '''\n    return l**2/4\n    \ndef volume_prism_section(l1,l2):\n    '''\n    Write a function to find the volume of a section of a prism given its length of each side.\n    '''\n    return l1*l2/2\n    \ndef volume_cylinder_section(r,h):\n    '''\n    Write a function to find the volume of a section of a cylinder given its radius and height.\n    '''\n    return math.pi*r**2*h\n    \ndef volume_sphere_section(r):\n    '''\n    Write a function to find the volume of a section of a sphere given its radius.\n    '''\n    return 4/3*math.pi*r**3\n    \ndef volume_hemisphere_section(r):\n    '''\n    Write a function to find the volume of a section of a hemisphere given its radius.\n    '''\n    return math.pi*r**2\n    \ndef volume_box_section(l,w,h):\n    '''\n    Write a function to find the volume of a section of a box given its length, width, and height.\n    '''\n    return l*w*h\n    \ndef volume_parallelepiped_section(l,w,h):\n    '''\n    Write a function to find the volume of a section of a parallelepiped given its length, width, and height.\n    '''\n    return l*w*h\n    \ndef volume_cone_section(r,h):\n    '''\n    Write a function to find the volume of a section of a cone given its radius and height.\n    '''\n    return math.pi*r**2*h/3\n    \ndef volume_torus_section(r1,r2):\n    '''\n    Write a function to find the volume of a section of a torus given its radii.\n    '''\n    return math.pi*math.pi*r1**2*r2**2/4\n    \ndef volume_pyramid_section(l):\n    '''\n    Write a function to find the volume of a section of a pyramid given its length.\n    '''\n    return l**2/4\n    \ndef volume_cylinder_section(r,h):\n    '''\n    Write a function to find the volume of a section of a cylinder given its radius and height.\n    '''\n    return math.pi*r**2*h\n    \ndef area_cube(l):\n    '''\n    Write a function to find the surface area of a cube given its side length.\n    '''\n    return 6*l**2\n    \ndef area_cuboid(l1,l2,l3):\n    '''\n    Write a function to find the surface area of a cuboid given its length of each side.\n    '''\n    return 2*l1*(l2+l3)\n    \ndef area_tetrahedron(l1):\n    '''\n    Write a function to find the surface area of a tetrahedron given its length of each side.\n    '''\n    return math.sqrt(3)*l1**2/2\n    \ndef area_prism(l1,l2):\n    '''\n    Write a function to find the surface area of a prism given its length of each side.\n    '''\n    return l1*l2\n    \ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given its radius and height.\n    '''\n    return 2*math.pi*r*(r+h)\n    \ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given its radius.\n    '''\n    return 4*math.pi*r**2\n    \ndef area_hemisphere(r):\n    '''\n    Write a function to find the surface area of a hemisphere given its radius.\n    '''\n    return 2*math.pi*r\n    \ndef area_box(l,w,h):\n    '''\n    Write a function to find the surface area of a box given its length, width, and height.\n    '''\n    return 2*(l+w)*(l+h)\n    \ndef area_parallelepiped(l,w,h):\n    '''\n    Write a function to find the surface area of a parallelepiped given its length, width, and height.\n    '''\n    return 4*l*w\n    \ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given its radius and height.\n    '''\n    return math.pi*r*(r+h)\n    \ndef area_torus(r1,r2):\n    '''\n    Write a function to find the surface area of a torus given its radii.\n    '''\n    return math.pi*math.pi*r1*r2\n    \ndef area_pyramid(l):\n    '"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l,3)\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    set_bits = 0\n    while n:\n        if n & 1:\n            set_bits += 1\n        n >>= 1\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    a = 0\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a = a + n\n    n = n & 0x5555555555555555\n    n = n >> 1\n    a "
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    for i in range(32):\n        if n & (1 << i):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xffffffff\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # 1) Find the number of bits in the number\n    number_of_bits = 0\n    while (n!= 0):\n        n = n >> 1\n        number_of_bits += 1\n    \n    # 2) Find the upper bound for the number of bits needed to hold the number\n    max_number_of_bits_needed = 1 << number_of_bits\n    \n    # 3) Set the bits corresponding to the even numbers\n    for i in range(1, max_number_of_bits_needed):\n        if (i & n!= 0):\n            n = n | (1 << (number_of_bits - 1))\n    \n    # 4) Return the number\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # Mask to filter out all bits other than even bits\n    # For example,  n = 0b00000001\n    # The mask will be 0b1000000000000000\n    mask = 0b1000000000000000\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n_bit_format = \"{0:b}\".format(n) # '0bn    a = int(n_bit_format, 2)\n    b = bin(a)\n    # print(b)\n    result = ''.join(b[i] for i in range(2, len(b) - 2, 2))\n    return int(result, 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & (n-1) \n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert n to binary string\n    binary_str = bin(n).replace(\"0b\",\"\")\n    # now convert every other bit to 1 and store in new string\n    new_str = ''\n    for i in range(0, len(binary_str), 2):\n        if i == len(binary_str) - 1:\n            new_str += '1'\n        else:\n            new_str += '1' + binary_str[i+1]\n    # convert new string back to integer\n    return int(new_str, 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    def count_bit(n):\n        count = 0\n        while n:\n            n &= n - 1\n            count += 1\n        return count\n    def set_bit(n, i):\n        mask = 1 << i\n        return n | mask\n    def clear_bit(n, i):\n        mask = 1 << i\n        return n & ~mask\n    i = count_bit(n)\n    if i % 2 == 0:\n        return n\n    else:\n        count = count_bit(n)\n        if count % 2 == 0:\n            return n\n        else:\n            set_bit_count = count_bit(n) - count\n            n = set_bit(n, set_bit_count)\n            return n\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for el in test_list:\n        if el in occurence_dict:\n            occurence_dict[el] += 1\n        else:\n            occurence_dict[el] = 1\n    return occurence_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    if len(test_list) == 0:\n        return {}\n    if len(test_list) == 1:\n        return {test_list[0]:1}\n    first_tuple = test_list[0]\n    counts = Counter()\n    for idx, item in enumerate(test_list):\n        if item!= first_tuple:\n            counts[item] = idx - counts[item]\n            first_tuple = item\n    return counts\ndef test_check_occurences():\n    '''\n    Do the above test but for the above test_list\n    '''\n    test_list = [(\"a\", 1), (\"a\", 2), (\"b\", 1), (\"a\", 3), (\"a\", 4), (\"b\", 2), (\"a\", 5)]\n    assert check_occurences(test_list) == {(\"a\", 1): 2, (\"a\", 2): 2, (\"a\", 3): 1, (\"a\", 4): 1, (\"a\", 5): 1, (\"b\", 1): 3, (\"b\", 2): 1}\n    assert check_occurences([]) == {}\n    assert check_occurences([(\"a\", 1), (\"b\", 1), (\"a\", 3)]) == {(\"a\", 1): 1, (\"b\", 1): 1, (\"a\", 3): 1}\n    assert check_occurences([(\"a\", 1), (\"a\", 1), (\"a\", 1)]) == {(\"a\", 1): 3}\n    assert check_occurences([(\"a\", 1), (\"a\", 1), (\"a\", 2)]) == {(\"a\", 1): 2, (\"a\", 2): 1}\n    assert check_occurences([(\"a\", 1), (\"a\", 1), (\"a\", 1), (\"a\", 1)]) == {(\"a\", 1): 3}\n    assert check_occurences([(\"a\", 1), (\"a\", 1), (\"a\", 1), (\"a\", 2)]) == {(\"a\", 1): 2, (\"a\", 2): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary with a count for each tuple\n    occurences = Counter(test_list)\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    freq_dict = Counter()\n    for x in test_list:\n        freq_dict[x] += 1\n    return freq_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict_of_occurences = {}\n    for tup in test_list:\n        if tup in dict_of_occurences:\n            dict_of_occurences[tup] += 1\n        else:\n            dict_of_occurences[tup] = 1\n    return dict_of_occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    for i in range(len(test_list)):\n        my_dict.setdefault(test_list[i],0)\n        my_dict[test_list[i]]+=1\n    return my_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for x in test_list:\n        if x in occurences:\n            occurences[x] += 1\n        else:\n            occurences[x] = 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for each in test_list:\n        if each not in occurences:\n            occurences[each] = 1\n        else:\n            occurences[each] += 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for tup in test_list:\n        if tup in test_dict:\n            test_dict[tup] += 1\n        else:\n            test_dict[tup] = 1\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # for key, value in test_list:\n    #     print(key,value)\n    return Counter(test_list)\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return sum(1 for i in range(len(str)) if str[i-1]!= '0' and str[i]!= '0')\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    str = ''.join(str.split(' '))\n    len_str = len(str)\n    count = 0\n    for i in range(len_str):\n        for j in range(i,len_str):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    N = len(str)\n    result = 0\n    for i in range(N):\n        for j in range(i,N):\n            if str[i:j+1]!= '':\n                result += 1\n    return result\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str.split())\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if not str:\n        return 0\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    str1 = list(str)\n    if not str:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        for j in range(i,len(str1)):\n            count += 1\n            if str1[j]!='':\n                break\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            #print(str[i:j])\n            if len(str[i:j]) > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0,len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!= '':\n                count = count + 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter = 0\n    for i in range(len(str)):\n        j = i\n        if str[i]!='':\n            j += 1\n        while j < len(str) and str[j]!='':\n            j += 1\n        counter += j - i\n    return counter\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n    \ndef get_longest_palindromic_substring(str): \n    '''\n    Write a python function to get the longest palindromic substring of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0 \n    if m > 0:\n        if m <= n:\n            total = m ** n\n        else:\n            total = m ** (n/2)\n    else:\n        total = 0 \n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = [1]\n    for i in range(1,n):\n        total_sequences.append(0)\n    for i in range(n):\n        total_sequences[i] = total_sequences[i-1] * (m - 2*i)\n    return total_sequences[n-1]\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n < 1:\n        return 0\n    if m == 1:\n        return 1\n    return get_total_number_of_sequences(m-1,n) + get_total_number_of_sequences(m,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int((math.factorial(m+n-2))/(math.factorial(n-1)*math.factorial(m-n)))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return reduce(lambda x, y: x*y, range(n, 1, -1))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m <= n:\n        return 0\n    if n == 0:\n        return 1\n    return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m-n,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m<2: return 0\n    if m<3: return 1\n    if n<3: return 1\n    return sum([get_total_number_of_sequences(m,n-1),get_total_number_of_sequences(m,n-2),get_total_number_of_sequences(m,n-3)])\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 1 or n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif m < 2*n:\n        return 0\n    return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m - n, n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    s = m//n\n    if s == 0:\n        return 0\n    return ((s-1)*(s-2) + (s-1)) + 1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        if i == len(list1)-1:\n            list1[i] = list2[i]\n    return list1\n    \nprint replace_list([1, 2, 3, 4, 5, 6, 7], [6, 3, 7, 8, 9, 10, 11])"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        list1[-1] = list2\n    else:\n        print(\"Cannot do this!\")\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n    \ndef replace_list_2(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1] = list2[len(list2)-1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i]+list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    print('Total number of characters:',count)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum([1 for i in str1])\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if len(str1)==0:\n        return 0\n    else:\n        return 1+count_charac(str1[1:])\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # Your Code Here\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(1 for char in str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N<1):\n        return -1\n    if(N==1):\n        return 2\n    else:\n        return int((math.sqrt(N)+1)**2)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N<0:\n        return None\n    if N==0:\n        return 1\n    if N==1:\n        return N+1\n    i=1\n    while True:\n        if(i*i)>N:\n            break\n        i+=1\n    return (i*i)\ndef next_Perfect_Square_Solution(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N<0:\n        return None\n    if N==0:\n        return 1\n    if N==1:\n        return N+1\n    i=1\n    while True:\n        if(i*i)>N:\n            break\n        i+=1\n    return (i*i)\ndef Next_Larger_Number_Solution(A,B):\n    '''\n    Write a python function to find the next larger number. \n    Input: Two integers A and B\n    Return: an integer which is the next larger number than B\n    Example: \n    Input: A = 2, B = 3 Output: 4\n    Input: A = 3, B = 3 Output: -1\n    '''\n    if B>A:\n        return -1\n    if B==A:\n        return A+1\n    if B==1:\n        return B\n    i=1\n    while True:\n        if (i*i)>B:\n            break\n        i+=1\n    return (i*i)\ndef Next_Larger_Number(A,B):\n    '''\n    Write a python function to find the next larger number. \n    Input: Two integers A and B\n    Return: an integer which is the next larger number than B\n    Example: \n    Input: A = 2, B = 3 Output: 4\n    Input: A = 3, B = 3 Output: -1\n    '''\n    if B>A:\n        return -1\n    if B==A:\n        return A+1\n    i=1\n    while True:\n        if (i*i)>B:\n            break\n        i+=1\n    return (i*i)\ndef Next_Larger_Number_Solution(A,B):\n    '''\n    Write a python function to find the next larger number. \n    Input: Two integers A and B\n    Return: an integer which is the next larger number than B\n    Example: \n    Input: A = 2, B = 3 Output: 4\n    Input: A = 3, B = 3 Output: -1\n    '''\n    if B>A:\n        return -1\n    if B==A:\n        return A+1\n    i=1\n    while True:\n        if (i*i)>B:\n            break\n        i+=1\n    return (i*i)\ndef Next_Larger_Number_Solution(A,B):\n    '''\n    Write a python function to find the next larger number. \n    Input: Two integers A and B\n    Return: an integer which is the next larger number than B\n    Example: \n    Input: A = 2, B = 3 Output: 4\n    Input: A = 3, B = 3 Output: -1\n    '''\n    if B>A:\n        return -1\n    if B==A:\n        return A+1\n    i=1\n    while True:\n        if (i*i)>B:\n            break\n        i+=1\n    return (i*i)\ndef Next_Larger_Number_Solution(A,B):\n    '''\n    Write a python function to find the next larger number. \n    Input: Two integers A and B\n    Return: an integer which is the next larger number than B\n    Example: \n    Input: A = 2, B = 3 Output: 4\n    Input: A = 3, B = 3 Output: -1\n    '''\n    if B>A:\n        return -1\n    if B==A:\n        return A+1\n    i=1\n    while True:\n        if (i*i)>B:\n            break\n        i+=1\n    return (i*i)\ndef Next_Larger_Number_Solution(A,B):\n    '''\n    Write a python function to find the next larger number. \n    Input: Two integers A and B\n    Return: an integer which is the next larger number than B\n    Example: \n    Input: A = 2, B = 3 Output: 4\n    Input: A = 3, B = 3 Output: -1\n    '''\n    if B>A:\n        return -1\n    if B==A:\n        return A+1\n    i=1\n    while True:\n        if (i*i)>B:\n            break\n        i+=1\n    return (i*i)\ndef Next_Larger_Number_Solution(A,B):\n    '''\n    Write a python function to find the next larger number. \n    Input: Two integers A and B\n    Return: an integer which is the next larger number than B\n    Example: \n    Input: A = 2, B = 3 Output: 4\n    Input: A = 3, B = 3 Output: -1\n    '''\n    if B>A:\n        return -1\n    if B==A:\n        return A+1\n    i=1\n    while True:\n        if (i*i)>B:\n            break\n        i+=1\n    return (i*i)\ndef Next_Larger_Number_Solution(A,B):\n    '''\n    Write a python function to find the next larger number. \n    Input: Two integers A and B\n    Return: an integer which is the next larger number than B\n    Example: \n    Input: A = 2, B = 3 Output: 4\n    Input: A = 3, B = 3 Output: -1\n    '''\n    if B>A:\n        return -1\n    if B==A:\n        return A+1\n    i=1\n    while True:\n        if (i*i)>B:\n            break\n        i+=1\n    return (i*i)\ndef Next_Larger_Number_Solution(A,B):\n    '''\n    Write a python function to find the next larger number. \n    Input: Two integers A and B\n    Return: an integer which is the next larger number than B\n    Example: \n    Input: A = 2, B = 3 Output: 4\n    Input: A = 3, B = 3 Output: -1\n    '''\n    if B>A:\n        return -1\n    if B==A:\n        return A+1\n    i=1\n    while True:\n        if (i*i)>B:\n            break\n        i+=1\n    return (i*i)\ndef Next_Larger_Number_Solution(A,B):\n    '''\n    Write a python function to find the next larger number. \n    Input: Two integers A and B\n    Return: an integer which is the next larger number than B\n    Example: \n    Input: A = 2, B = 3 Output: 4\n    Input: A = 3, B = 3 Output: -1\n    '''\n    if B>A:\n        return -1\n    if B==A:\n        return A+1\n    i=1\n    while True:\n        if (i*i)>B:\n            break\n        i+=1\n    return (i*i)\ndef Next_Larger_Number_Solution(A,B):\n    '''\n    Write a python function to find the next larger number. \n    Input: Two integers A and B\n    Return: an integer which is the next larger number than B\n    Example: \n    Input: A = 2, B = 3 Output: 4\n    Input: A = 3, B = 3 Output: -1\n    '''\n    if B>A:\n        return -1\n    if B==A:\n        return A+1\n    i=1\n    while True:\n        if (i*i)>B:\n            break\n        i+=1\n    return (i*i)\ndef Next_Larger_Number_Solution(A,B):\n    '''\n    Write a python function to find the next larger number. \n    Input: Two integers A and B\n    Return: an integer which is the next larger number than B\n    Example: \n    Input: A = 2, B = 3 Output: 4\n    Input: A = 3, B = 3 Output: -1\n    '''\n    if B>A"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N))**2) \n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n=int(math.sqrt(N))\n    if n*n==N: \n        return n*n+1\n    else: \n        return n*n+1\ndef is_Triangle(a,b,c):\n    '''\n    Write a python function to check if the three sides of a triangle are valid.\n    '''\n    if (a+b>c)and(a+c>b)and(b+c>a): \n        return True\n    else: \n        return False\ndef is_Pentagon(a,b,c):\n    '''\n    Write a python function to check if the three sides of a pentagon are valid.\n    '''\n    if (a+b>c)and(a+c>b)and(b+c>a)and(a==b or a==c or b==c): \n        return True\n    else: \n        return False\ndef is_Hexagon(a,b,c):\n    '''\n    Write a python function to check if the three sides of a hexagon are valid.\n    '''\n    if (a+b>c)and(a+c>b)and(b+c>a)and(a==b or a==c or b==c or a==b): \n        return True\n    else: \n        return False\ndef is_Octagon(a,b,c):\n    '''\n    Write a python function to check if the three sides of a octagon are valid.\n    '''\n    if (a+b>c)and(a+c>b)and(b+c>a)and(a==b or a==c or b==c or a==b): \n        return True\n    else: \n        return False\ndef is_Square(a,b,c):\n    '''\n    Write a python function to check if the three sides of a square are valid.\n    '''\n    if (a==b)and(a==c): \n        return True\n    else: \n        return False\ndef is_Rhombus(a,b,c):\n    '''\n    Write a python function to check if the three sides of a rhombus are valid.\n    '''\n    if (a==b and a==c)or(b==c and b==a): \n        return True\n    else: \n        return False\ndef is_Trapezoid(a,b,c,d):\n    '''\n    Write a python function to check if the four sides of a trapazoid are valid.\n    '''\n    if (a+b>c)and(a+c>b)and(c+d>a)and(b+d>c): \n        return True\n    else: \n        return False\ndef is_Parallelogram(a,b,c):\n    '''\n    Write a python function to check if the three sides of a parallelogram are valid.\n    '''\n    if (a==b)and(b==c)and(a==c): \n        return True\n    else: \n        return False\ndef is_Pentagon_old(a,b,c):\n    '''\n    Write a python function to check if the three sides of a pentagon are valid.\n    '''\n    if (a==b)and(a==c)and(b==c): \n        return True\n    else: \n        return False\ndef is_Hexagon_old(a,b,c):\n    '''\n    Write a python function to check if the three sides of a hexagon are valid.\n    '''\n    if (a==b)and(a==c)and(b==c)and(a==b): \n        return True\n    else: \n        return False\ndef is_Octagon_old(a,b,c):\n    '''\n    Write a python function to check if the three sides of a octagon are valid.\n    '''\n    if (a==b)and(a==c)and(b==c)and(a==b): \n        return True\n    else: \n        return False\ndef is_Rhombus_old(a,b,c):\n    '''\n    Write a python function to check if the three sides of a rhombus are valid.\n    '''\n    if (a==b)and(a==c)and(b==c)or(a==b)and(b==c)or(a==c)and(b==a): \n        return True\n    else: \n        return False\ndef is_Trapezoid_old(a,b,c,d):\n    '''\n    Write a python function to check if the four sides of a trapazoid are valid.\n    '''\n    if (a+b>c)and(a+c>b)and(c+d>a)and(b+d>c): \n        return True\n    else: \n        return False\ndef is_Rectangle(a,b,c):\n    '''\n    Write a python function to check if the three sides of a rectangle are valid.\n    '''\n    if (a==b and a==c): \n        return True\n    else: \n        return False\ndef is_Square_old(a,b,c):\n    '''\n    Write a python function to check if the three sides of a square are valid.\n    '''\n    if (a==b)and(a==c): \n        return True\n    else: \n        return False\ndef is_Rhombus_old(a,b,c):\n    '''\n    Write a python function to check if the three sides of a rhombus are valid.\n    '''\n    if (a==b)and(a==c)and(b==c)or(a==b)and(b==c)or(a==c)and(b==a): \n        return True\n    else: \n        return False\ndef is_Trapezoid_old(a,b,c,d):\n    '''\n    Write a python function to check if the four sides of a trapazoid are valid.\n    '''\n    if (a+b>c)and(a+c>b)and(c+d>a)and(b+d>c): \n        return True\n    else: \n        return False\ndef is_Parallelogram_old(a,b,c):\n    '''\n    Write a python function to check if the three sides of a parallelogram are valid.\n    '''\n    if (a==b)and(b==c)and(a==c): \n        return True\n    else: \n        return False\ndef is_Pentagon_old(a,b,c):\n    '''\n    Write a python function to check if the three sides of a pentagon are valid.\n    '''\n    if (a==b)and(a==c)and(b==c)and(a==b): \n        return True\n    else: \n        return False\ndef is_Hexagon_old(a,b,c):\n    '''\n    Write a python function to check if the three sides of a hexagon are valid.\n    '''\n    if (a==b)and(a==c)and(b==c)and(a==b): \n        return True\n    else: \n        return False\ndef is_Octagon_old(a,b,c):\n    '''\n    Write a python function to check if the three sides of a octagon are valid.\n    '''\n    if (a==b)and(a==c)and(b==c)and(a==b): \n        return True\n    else: \n        return False\ndef is_Polygon(n,R):\n    '''\n    Write a python function to check if the number of sides of a polygon are valid.\n    '''\n    if n>0:\n        n=n-1\n        return (R**2*(n**2-1))/2\n    else:\n        return 0\ndef is_Pentagon(a,b,c):\n    '''\n    Write a python function to check if the three sides of a pentagon are valid.\n    '''\n    if (a==b)and(a==c)and(b==c)and(a==b): \n        return True\n    else: \n        return False\ndef is_Hexagon(a,b,c):\n    '''\n    Write a python functio"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.ceil(math.sqrt(N))\n    \ndef get_Num_Digits(N):\n    '''\n    Write a python function to find the number of digits of a number.\n    '''\n    N=int(N)\n    if N<0:\n        N*=-1\n    while N>0:\n        N//=10\n    return N\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = int(N)\n    if n < 0:\n        return None\n    else:\n        return int(math.sqrt(n + 1))\n    \ndef print_tuple(a):\n    '''\n    Write a python function to print a tuple.\n    '''\n    print(a)\n    \ndef print_string(a):\n    '''\n    Write a python function to print a string.\n    '''\n    print(a)\n    \ndef print_dictionary(d):\n    '''\n    Write a python function to print a dictionary.\n    '''\n    print(d)\n    \ndef find_pair(a, b):\n    '''\n    Write a python function to find a pair in a list, an element of the list is a pair.\n    '''\n    b.sort()\n    for x in b:\n        y = a - x\n        if y in b:\n            return x, y\n    return None\n    \ndef find_pair_1(a, b):\n    '''\n    Write a python function to find a pair in a list, an element of the list is a pair.\n    '''\n    b.sort()\n    for x in b:\n        y = a - x\n        if y in b:\n            return x, y\n    return None\n    \ndef find_pair_2(a, b):\n    '''\n    Write a python function to find a pair in a list, an element of the list is a pair.\n    '''\n    b.sort()\n    for x in b:\n        y = a - x\n        if y in b:\n            return x, y\n    return None\n    \ndef find_pair_3(a, b):\n    '''\n    Write a python function to find a pair in a list, an element of the list is a pair.\n    '''\n    b.sort()\n    for x in b:\n        y = a - x\n        if y in b:\n            return x, y\n    return None\n    \ndef find_pair_4(a, b):\n    '''\n    Write a python function to find a pair in a list, an element of the list is a pair.\n    '''\n    b.sort()\n    for x in b:\n        y = a - x\n        if y in b:\n            return x, y\n    return None\n    \ndef get_list(d):\n    '''\n    Write a python function to get a list from a dictionary.\n    '''\n    return list(d.keys())\n    \ndef check_element_in_list(elem, l):\n    '''\n    Write a python function to check if a given element is in a list.\n    '''\n    return elem in l\n    \ndef count_in_list(elem, l):\n    '''\n    Write a python function to count a given element in a list.\n    '''\n    return l.count(elem)\n    \ndef add_to_list(a, b):\n    '''\n    Write a python function to add a list to another list.\n    '''\n    return a + b\n    \ndef test_function(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_1(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_2(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_3(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_4(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_5(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_6(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_7(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_8(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_9(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_10(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_11(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_12(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_13(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_14(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_15(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_16(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_17(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_18(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_19(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_20(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_21(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_22(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_23(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_24(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_25(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_26(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_27(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n    \ndef test_function_28(f, val):\n    '''\n    Write a python function to test a function with a given value.\n    '''\n    return f(val)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.ceil(math.sqrt(N))\n    return root * root\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    if(root*root == N):\n        return (root+1)**2\n    else:\n        return root*root+1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.sqrt(N))\ndef is_Prime(n):\n    '''\n    Write a python function to determine if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0 and n > 2:\n        return False\n    return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef is_Power_of_two(N):\n    '''\n    Write a python function to determine if a number is a power of two or not.\n    '''\n    return N>0 and (N & (N-1)) == 0\ndef pythagorean_triplet(N):\n    '''\n    Write a python function to find the pythagorean triplet such that a^2+b^2=c^2 for a,b,c integers less than N.\n    '''\n    for a in range(1,N):\n        for b in range(1,N):\n            c = math.sqrt(a**2+b**2)\n            if c == int(c):\n                return int(a),int(b),int(c)\ndef Sum_of_Pythagorean_Triplet(N):\n    '''\n    Write a python function to find the sum of all the pythagorean triplets such that a^2+b^2=c^2 for a,b,c integers less than N.\n    '''\n    return sum([a*b*c for a in range(1,N) for b in range(1,N) for c in range(1,N) if a**2+b**2==c**2])\ndef Sum_of_Pythagorean_Triplet_sqrt(N):\n    '''\n    Write a python function to find the sum of all the pythagorean triplets such that a^2+b^2=c^2 for a,b,c integers less than N.\n    '''\n    return sum([a*b*c for a in range(1,N) for b in range(1,N) for c in range(1,N) if a**2+b**2==c**2])\ndef is_Power_of_Two_or_Three(N):\n    '''\n    Write a python function to determine if a number is a power of two or three.\n    '''\n    return N>0 and (N & (N-1)) == 0 and ((N & 0b00000001)!= 0)\ndef Prime_factor(N):\n    '''\n    Write a python function to determine the Prime Factors of a number.\n    '''\n    factors = []\n    while N%2 == 0:\n        factors.append(2)\n        N = N/2\n    for i in range(3,int(math.sqrt(N))+1,2):\n        while N%i == 0:\n            factors.append(i)\n            N = N/i\n    if N > 2:\n        factors.append(N)\n    return factors\ndef Sum_of_Prime_Factors(N):\n    '''\n    Write a python function to determine the sum of the prime factors of a number.\n    '''\n    return sum(Prime_factor(N))\ndef get_number_of_Factors(N):\n    '''\n    Write a python function to determine the number of factors of a number.\n    '''\n    factors = []\n    for i in range(2,int(math.sqrt(N))+1):\n        while N%i == 0:\n            factors.append(i)\n            N = N/i\n    factors.append(N)\n    return len(factors)\ndef get_Factors(N):\n    '''\n    Write a python function to determine all the factors of a number.\n    '''\n    factors = []\n    for i in range(2,int(math.sqrt(N))+1):\n        while N%i == 0:\n            factors.append(i)\n            N = N/i\n    factors.append(N)\n    return factors\ndef get_Prime_factors(N):\n    '''\n    Write a python function to determine all the prime factors of a number.\n    '''\n    factors = []\n    for i in range(2,int(math.sqrt(N))+1):\n        while N%i == 0:\n            factors.append(i)\n            N = N/i\n    factors.append(N)\n    return factors\ndef get_Prime_Factors_N(N):\n    '''\n    Write a python function to determine all the prime factors of a number.\n    '''\n    factors = []\n    for i in range(2,int(math.sqrt(N))+1):\n        while N%i == 0:\n            factors.append(i)\n            N = N/i\n    return factors\ndef find_Number_of_Divisors(N):\n    '''\n    Write a python function to determine the number of divisors of a number.\n    '''\n    divisors = 1\n    if N == 0:\n        return 1\n    elif N == 1:\n        return 1\n    for i in range(2,int(math.sqrt(N))+1):\n        while N%i == 0:\n            divisors += 1\n            N = N/i\n    if N > 1:\n        divisors += 1\n    return divisors\ndef sum_of_divisors(N):\n    '''\n    Write a python function to determine the sum of divisors of a number.\n    '''\n    divisors = 1\n    if N == 0:\n        return 1\n    elif N == 1:\n        return 1\n    for i in range(2,int(math.sqrt(N))+1):\n        while N%i == 0:\n            divisors += i\n            N = N/i\n    if N > 1:\n        divisors += N\n    return divisors\ndef sum_of_divisors_sqrt(N):\n    '''\n    Write a python function to determine the sum of divisors of a number.\n    '''\n    divisors = 1\n    if N == 0:\n        return 1\n    elif N == 1:\n        return 1\n    for i in range(2,int(math.sqrt(N))+1):\n        while N%i == 0:\n            divisors += i\n            N = N/i\n    return divisors\ndef get_Number_of_Divisors(N):\n    '''\n    Write a python function to determine the number of divisors of a number.\n    '''\n    divisors = 1\n    if N == 0:\n        return 1\n    elif N == 1:\n        return 1\n    for i in range(2,int(math.sqrt(N))+1):\n        while N%i == 0:\n            divisors += 1\n            N = N/i\n    if N > 1:\n        divisors += 1\n    return divisors\ndef get_Number_of_Factors(N):\n    '''\n    Write a python function to determine the number of factors of a number.\n    '''\n    factors = []\n    for i in range(2,int(math.sqrt(N))+1):\n        while N%i == 0:\n            factors.append(i)\n            N = N/i\n    factors.append(N)\n    return len(factors)\ndef get_Factors(N):\n    '''\n    Write a python function to determine all the factors of a number.\n    '''\n    factors = []\n    for i in range(2,int(math.sqrt(N))+1):\n        while N%i == 0:\n            factors.append(i)\n            N = N/i\n    factors.append(N)\n    return factors\ndef get_Factors_N(N):\n    '''\n    Write a python function to determine all the factors of a number.\n    '''\n    factors = []\n    for i in range(2,int(math.sqrt(N))+1):\n        while N%i == 0:\n            factors.append(i)\n            N = N/i\n    return factors\ndef get_Prime_Factors(N):\n    '''\n    Write a python function to determine all the prime factors of a numbe"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def max_sum_increasing_decreasing(arr):\n        '''\n        Takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n        '''\n        if len(arr) == 0:\n            return 0\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #initialise variables\n    start = 0\n    end = len(arr) - 1\n    max_sum = arr[0]\n    sum_so_far = 0\n    \n    #find the largest sum of a bitonic sequence\n    while start < end:\n        sum_so_far = max(arr[start] + sum_so_far, arr[end] + sum_so_far)\n        max_sum = max(max_sum, sum_so_far)\n        start += 1\n        end -= 1\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            i += 1\n        else:\n            j -= 1\n    return arr[i] + max_sum(arr[:i]) + max_sum(arr[i:])\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    for i in xrange(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            arr[i] = arr[i-1]\n    \n    bitonic = arr[0]\n    result = arr[0]\n    for i in xrange(1, len(arr)):\n        result = max(result, arr[i] + bitonic)\n        bitonic = max(bitonic, arr[i-1])\n    return result\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr: return None\n    if len(arr) == 1: return arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Max sum of a bitonic subsequence is the sum of the first and last number of bitonic sequence\n    # Subsequence is defined as an increasing sequence whose last 3 elements are in increasing order\n    # Each element is greater than its successor\n    # For each i < n, arr[i] > arr[i + 1]\n    # To find max sum of a bitonic sequence, we find max sum of two subsequences \n    # first is max(arr[i] + max(arr[i + 1]... arr[j])) for i < j < n\n    # Second is max(arr[n - 1] + max(arr[n - 2]... arr[j])) for j = i + 1\n    # return max(first, second)\n    if arr == None or len(arr) <= 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    first = arr[0]\n    second = arr[len(arr) - 1]\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] < arr[i + 1]:\n            i += 1\n        else:\n            break\n    while i < j:\n        if arr[j] < arr[j - 1]:\n            j -= 1\n        else:\n            break\n    first = arr[i] + max(arr[i + 1], arr[j - 1])\n    j = len(arr) - 1\n    i = 0\n    while i < j:\n        if arr[i] > arr[i + 1]:\n            i += 1\n        else:\n            break\n    while i < j:\n        if arr[j] > arr[j - 1]:\n            j -= 1\n        else:\n            break\n    second = arr[j] + max(arr[i + 1], arr[j - 1])\n    return max(first, second)\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i=0\n    j=len(arr)-1\n    max_sum=arr[i]\n    while i<j:\n        if arr[i]<arr[j]:\n            max_sum=max(max_sum, arr[i]+arr[j])\n            i+=1\n        else:\n            max_sum=max(max_sum, arr[j]+arr[i])\n            j-=1\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    bitonic_list = []\n    for i in xrange(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            bitonic_list.append(arr[i])\n        else:\n            bitonic_list.append(arr[i-1])\n    return max(bitonic_list)\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    n = number\n    guess = 1\n    while (abs(guess*guess-n)>0.001):\n        guess = (guess+n/guess)/2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    diff = abs(guess**2 - number)\n    if diff > 0:\n        guess = guess - (diff/2.0)\n    else:\n        guess = guess\n    while abs(guess**2 - number) > 0.001:\n        guess = guess - ((guess**2 - number)/(2.0*guess))\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialization\n    root = number\n    error = 0.00000000001\n    i = 0\n    \n    # iterate\n    while abs(root) >= error:\n        root = (root + number / root) / 2\n        i += 1\n    \n    # return\n    return root, i\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #define the precision\n    precision = 10**-7\n    guess = 1.0\n    old_guess = 0.0\n    while abs(guess - old_guess) > precision:\n        old_guess = guess\n        guess = 0.5*(guess + number/guess)\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = number / 2\n    if root * root < number:\n        return root\n    else:\n        return babylonian_squareroot(number)\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number > 0:\n        for i in range(1, 1000):\n            if i**2 <= number:\n                if i**2 == number:\n                    return i\n                else:\n                    continue\n            else:\n                return i - 1\n    else:\n        for i in range(1, 1000):\n            if i**2 >= number:\n                if i**2 == number:\n                    return i\n                else:\n                    continue\n            else:\n                return i - 1\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    n = number\n    d = 0.1\n    b = 0.5\n    e = 0.01\n    \n    while (abs(b-a) > e):\n        #print 'a: ', a, 'b: ', b\n        b = (b + n/b) / 2\n    return b\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Default value:\n    if number < 0:\n        return None\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Number of tries and approximate tolerance\n    MAX_ATTEMPTS = 200\n    TOLERANCE = 0.0001\n    \n    # Initialize constants\n    one = 1\n    two = 2\n    guess = two / number\n    \n    # Iterate to find square root\n    for i in range(MAX_ATTEMPTS):\n        next_guess = one + (guess - one) / number\n        if abs(guess - next_guess) < TOLERANCE:\n            return next_guess\n        guess = next_guess\n    return None\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lpsHelper(start, end):\n        if start > end:\n            return 0\n        if start == end:\n            return 1\n        if s[start] == s[end]:\n            return 2 + lpsHelper(start+1, end-1)\n        else:\n            return max(lpsHelper(start+1, end), lpsHelper(start, end-1))\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    lpsarr = [[0 for i in xrange(n)] for j in xrange(n)]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    mat = [[0 for i in range(len(str))] for j in range(len(str))]\n    # it is a 2D matrix\n    for i in range(len(str)):\n        mat[i][i] = 1\n        if i < len(str) - 1 and str[i] == str[i + 1]:\n            mat[i][i + 1] = 2\n    max = 1\n    for i in range(2, len(str)):\n        for j in range(len(str) - i):\n            if str[j] == str[j + i] and mat[j + 1][j + i - 1] < max:\n                mat[j][j + i] = mat[j + 1][j + i - 1] + 2\n                max = mat[j][j + i]\n            elif str[j] == str[j + i]:\n                mat[j][j + i] = mat[j + 1][j + i - 1] + 1\n    return max\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n < 2:\n        return n\n    # dp[i][j] represent the length of LPS \n    # with i, j as the center\n    dp = [[0 for j in xrange(n)] for i in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n    for j in xrange(1, n):\n        for i in xrange(j-1, -1, -1):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # table[i][j] will be storing the length of LPS \n    # of substring str[i..j]\n    table = [[0 for i in xrange(n)] for j in xrange(n)] \n    maxLength = 1\n    i = 0\n    while i < n: \n        table[i][i] = 1\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if str[i] == str[i + 1]: \n            table[i][i + 1] = 2\n            start = i \n            maxLength = 2\n        else: \n            table[i][i + 1] = 1\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if str[i] == str[j] and table[i + 1][j - 1] == k - 1: \n                table[i][j] = k + 1\n                if k > maxLength: \n                    start = i \n                    maxLength = k \n            i = i + 1\n        k = k + 1\n    return table,start,maxLength \ndef longestPalindrome(str): \n    '''\n    A subsequence is a sequence that can be derived from a string by deleting some characters without changing the order of the remaining characters.\n    Inp: string \n    Out: longest palindromic subsequence as string\n    '''\n    table,start,maxLength = lps(str)\n    i = start \n    j = start + maxLength - 1\n    l = []\n    while i < j: \n        l.append(str[i])\n        l.append(str[j])\n        i = i + 1\n        j = j - 1\n    return ''.join(l)\ndef longestPalindromicSubsequence(str): \n    '''\n    A subsequence is a sequence that can be derived from a string by deleting some characters without changing the order of the remaining characters.\n    Inp: string \n    Out: longest palindromic subsequence as string\n    '''\n    table,start,maxLength = lps(str)\n    i = start \n    j = start + maxLength - 1\n    l = []\n    while i < j: \n        l.append(str[i])\n        l.append(str[j])\n        i = i + 1\n        j = j - 1\n    return l\ndef longestPalindromicSubsequence2(str): \n    '''\n    A subsequence is a sequence that can be derived from a string by deleting some characters without changing the order of the remaining characters.\n    Inp: string \n    Out: longest palindromic subsequence as string\n    '''\n    n = len(str)\n    # table[i][j] will be storing the length of LPS \n    # of substring str[i..j]\n    table = [[0 for i in xrange(n)] for j in xrange(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1:\n        return len(str)\n    maxlen = 1\n    dp = [[0 for i in range(len(str))] for j in range(len(str))]\n    for i in range(len(str)):\n        dp[i][i] = 1\n    for L in range(2, len(str)+1):\n        for i in range(len(str)-L+1):\n            j = i + L - 1\n            if str[i] == str[j] and L == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            maxlen = max(maxlen, dp[i][j])\n    return maxlen\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    table = [[0 for x in range(n)] for x in range(n)]\n    '''\n    Following steps build table. \n    Note that the table is now filled in diagonal fashion \n    '''\n    maxLength = 1\n    i=0\n    while i<n:\n        table[i][i] = 1\n        i+=1\n    #table = [[0 for x in range(n)] for x in range(n)]\n    '''\n    Now iterate over the table to calculate lengths of LPS's. \n    '''\n    curr_len = 1\n    i = 0\n    while i<n-1:\n        if str[i] == str[i+1]:\n            table[i][i+1] = 2 + table[i+1][i]\n            if table[i][i+1] > maxLength:\n                maxLength = table[i][i+1]\n        i+=1\n    '''\n    Iterate over the table to find LPS's \n    '''\n    k = 3\n    while k<n:\n        i = 0\n        while i<(n-k):\n            j = i+k\n            if str[i] == str[j] and table[i+1][j-1]>=1:\n                table[i][j] = 2 + table[i+1][j-1]\n                if table[i][j] > maxLength:\n                    maxLength = table[i][j]\n            i+=1\n        k+=1\n    return maxLength\ndef lps_tab(str):\n    '''\n    Same as lps, but using a table to do the calculation\n    '''\n    n = len(str)\n    table = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n    maxLength = 1\n    curr_len = 1\n    for i in range(1,n):\n        for j in range(i,n):\n            if str[i] == str[j] and j-i+1==1:\n                table[i][j] = 1\n            elif str[i] == str[j] and table[i+1][j-1]>=1:\n                table[i][j] = 2 + table[i+1][j-1]\n                if table[i][j] > maxLength:\n                    maxLength = table[i][j]\n    return maxLength\ndef lps_rec(str):\n    '''\n    Same as lps, but using a recursive function\n    '''\n    def helper(i,j):\n        if i>=j:\n            return 0\n        if str[i] == str[j] and j-i == 1:\n            return 1\n        elif str[i] == str[j] and helper(i+1,j-1)>=1:\n            return 2 + helper(i+1,j-1)\n        else:\n            return max(helper(i,j-1),helper(i+1,j))\n    return helper(0,len(str)-1)\ndef lps_rec_tab(str):\n    '''\n    Same as lps, but using a recursive function and a table\n    '''\n    def helper(i,j):\n        if i>=j:\n            return 0\n        if str[i] == str[j] and j-i == 1:\n            return 1\n        if str[i] == str[j] and table[i+1][j-1]>=1:\n            return 2 + table[i+1][j-1]\n        else:\n            return max(helper(i,j-1),helper(i+1,j))\n    n = len(str)\n    table = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n    maxLength = helper(0,len(str)-1)\n    return maxLength\ndef lps_iter(str):\n    '''\n    Same as lps, but using an iterative function\n    '''\n    n = len(str)\n    table = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n    maxLength = 1\n    curr_len = 1\n    for i in range(1,n):\n        for j in range(i,n):\n            if str[i] == str[j] and table[i+1][j-1]>=1:\n                table[i][j] = 2 + table[i+1][j-1]\n                if table[i][j] > maxLength:\n                    maxLength = table[i][j]\n    return maxLength\ndef lps_iter_tab(str):\n    '''\n    Same as lps, but using an iterative function and a table\n    '''\n    n = len(str)\n    table = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n    maxLength = 1\n    curr_len = 1\n    for i in range(1,n):\n        for j in range(i,n):\n            if str[i] == str[j] and table[i+1][j-1]>=1:\n                table[i][j] = 2 + table[i+1][j-1]\n                if table[i][j] > maxLength:\n                    maxLength = table[i][j]\n    return maxLength\nif __name__=='__main__':\n    print(lps('bbbab'))\n    print(lps('a'))\n    print(lps('aa'))\n    print(lps('abcdabcdab'))\n    print(lps('abacdfgdcaba'))\n    print(lps_tab('abcdabcdab'))\n    print(lps_tab('a'))\n    print(lps_tab('aa'))\n    print(lps_tab('abcdabcdab'))\n    print(lps_tab('abacdfgdcaba'))\n    print(lps_rec('abcdabcdab'))\n    print(lps_rec('a'))\n    print(lps_rec('aa'))\n    print(lps_rec('abcdabcdab'))\n    print(lps_rec_tab('abcdabcdab'))\n    print(lps_rec_tab('a'))\n    print(lps_rec_tab('aa'))\n    print(lps_rec_tab('abcdabcdab'))\n    print(lps_iter('abcdabcdab'))\n    print(lps_iter('a'))\n    print(lps_iter('aa'))\n    print(lps_iter('abcdabcdab'))\n    print(lps_iter_tab('abcdabcdab'))\n    print(lps_iter_tab('a'))\n    print(lps_iter_tab('aa'))\n    print(lps_iter_tab('abcdabcdab'))\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    matrix = [[0 for x in range(n)] for x in range(n)]\n    #for i in range(n):\n    #    matrix[i][i] = 1\n    for start in range(n-1, -1, -1):\n        for end in range(start+1, n):\n            if str[start] == str[end] and (end - start == 1 or matrix[start+1][end-1]):\n                matrix[start][end] = 2 + matrix[start+1][end-1]\n            elif str[start] == str[end]:\n                matrix[start][end] = matrix[start+1][end-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    lis = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        lis[i][i] = 1\n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                lis[i][j] = 2\n            elif str[i] == str[j]: \n                lis[i][j] = lis[i + 1][j - 1] + 2\n            else: \n                lis[i][j] = max(lis[i][j - 1], lis[i + 1][j]); \n    return lis[0][n - 1] \n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for i in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + 1 / n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + (harmonic_sum(n-1))\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # use harmonic sum formula\n    return 1 / n + (harmonic_sum(n-1))\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return 1 + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1 + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + (n-1)*harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 + (1/n))**n\n    \ndef harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 + (1/n))**n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # The first few harmonic sums are: 1, 1/2, 1/3, 1/4,...\n    return (1 / n) + (harmonic_sum(n - 1))\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create the array\n    array_intersection = []\n    # loop through array 1\n    for num in array_nums1:\n        # if the number is in array 2 and not in array_intersection\n        if num in array_nums2 and num not in array_intersection:\n            # append the number to the array intersection\n            array_intersection.append(num)\n    # return array intersection\n    return array_intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_arr = []\n    for i in array_nums1:\n        if i in array_nums2:\n            intersection_arr.append(i)\n    return intersection_arr\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    set3 = set1.intersection(set2)\n    return list(set3)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = []\n    for i in array_nums1:\n        for j in array_nums2:\n            if i == j:\n                res.append(i)\n                break\n    return res\ndef intersection_list(list_nums1,list_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = []\n    for i in list_nums1:\n        if i in list_nums2:\n            res.append(i)\n    return res\ndef intersection_list_2(list_nums1,list_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = list_nums1\n    for i in list_nums2:\n        if i in res:\n            res.remove(i)\n    return res\ndef intersection_set(set_nums1,set_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = set()\n    for i in set_nums1:\n        if i in set_nums2:\n            res.add(i)\n    return res\ndef intersection_set_2(set_nums1,set_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = set_nums1\n    for i in set_nums2:\n        if i in res:\n            res.remove(i)\n    return res\ndef intersection_set_3(set_nums1,set_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = set_nums1\n    return [i for i in set_nums1 if i in set_nums2]\ndef intersection_dict(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_2(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_3(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_4(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_5(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_6(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_7(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_8(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_9(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_10(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_11(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_12(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_13(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_14(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_15(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_16(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_17(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_18(dict_nums1,dict_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = {}\n    for i in dict_nums1:\n        if i in dict_nums2:\n            res[i] = dict_nums1[i]\n    return res\ndef intersection_dict_19"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # return array_nums1[0] & array_nums2[0]\n    return set(array_nums1).intersection(set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if array_nums1 == None or array_nums2 == None:\n        return\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n    nums = nums1 & nums2\n    return list(nums)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if array_nums1 == None or array_nums2 == None or len(array_nums1) == 0 or len(array_nums2) == 0:\n        return 0\n    intersection = []\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                intersection.append(num1)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in array_nums1:\n        for j in array_nums2:\n            if i == j and i not in intersection:\n                intersection.append(i)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    num1 = len(array_nums1)\n    num2 = len(array_nums2)\n    index_array1 = [-1]*num1\n    index_array2 = [-1]*num2\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result=[]\n    if len(array_nums1)<len(array_nums2):\n        for i in array_nums1:\n            if i in array_nums2:\n                result.append(i)\n    else:\n        for i in array_nums2:\n            if i in array_nums1:\n                result.append(i)\n    return result\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x_count = 0\n    for element in tup:\n        if element == x:\n            x_count += 1\n    return x_count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for x in tup:\n        if x == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if tup.count(x)>1:\n        print('Error in tuple')\n        return\n    else:\n        return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for element in tup:\n        if element == x:\n            counter += 1\n    return counter\n    \nprint count_X(('a', 'a', 'b'), 'a')\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        return [element]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not list:\n        return []\n    else:\n        return [element] + insert_element(list[1:],element)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    newList=[]\n    for i in list:\n        newList.append(i)\n        newList.append(element)\n    return newList\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = [element]\n    for i in range(len(list)):\n        result.insert(i,list[i])\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(i)\n        new_list.insert(0,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    result = []\n    for i in range(len(list)):\n        result.insert(i,list[i])\n        result.insert(i,element)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for index in range(len(list)):\n        list.insert(index,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    # your code here\n    \n    list = list[::-1]\n    \n    for i in range(len(list)):\n        list.insert(i,element)\n    \n    return list[::-1]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    complex_list = []\n    # print \"Type: \", type(numbers)\n    if type(numbers) is int or type(numbers) is float:\n        # print \"Numerator: \", numbers\n        complex_list.append(complex(numbers))\n    else:\n        complex_list = numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers_=numbers\n    numbers=numbers.replace('j',' ')\n    numbers=numbers.replace('i',' ')\n    numbers=numbers.split()\n    numbers=[complex(int(numbers[0]),int(numbers[1]))]\n    for i in range(2,len(numbers)):\n        numbers+=[complex(int(numbers[i].real),int(numbers[i].imag))]\n    return numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for i in numbers:\n        polar.append(abs(i))\n    return polar\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    r = abs(numbers)\n    theta = cmath.phase(numbers)\n    \n    if theta < 0:\n        theta = theta + 2 * cmath.pi\n        \n    return [r, theta]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    converted_numbers=[]\n    \n    for i in range(len(numbers)):\n        if numbers[i].real > 0 and numbers[i].imag > 0:\n            r = cmath.sqrt(numbers[i].real**2 + numbers[i].imag**2)\n            theta = cmath.phase(numbers[i])\n            converted_numbers.append((r, theta))\n        elif numbers[i].real < 0 and numbers[i].imag > 0:\n            r = cmath.sqrt(numbers[i].real**2 + numbers[i].imag**2)\n            theta = cmath.phase(numbers[i])\n            converted_numbers.append((r, theta))\n        elif numbers[i].real < 0 and numbers[i].imag < 0:\n            r = cmath.sqrt(numbers[i].real**2 + numbers[i].imag**2)\n            theta = cmath.phase(numbers[i])\n            converted_numbers.append((r, theta))\n        elif numbers[i].real > 0 and numbers[i].imag < 0:\n            r = cmath.sqrt(numbers[i].real**2 + numbers[i].imag**2)\n            theta = cmath.phase(numbers[i])\n            converted_numbers.append((r, theta))\n    \n    return converted_numbers\n    \ndef convert_to_cartesian(numbers):\n    '''\n    Write a python function to convert polar coordinates to cartesian coordinates.\n    '''\n    converted_numbers=[]\n    \n    for i in range(len(numbers)):\n        r = numbers[i][0]\n        theta = numbers[i][1]\n        converted_numbers.append(complex(r*cmath.cos(theta), r*cmath.sin(theta)))\n    \n    return converted_numbers\n    \ndef is_close(complex1, complex2):\n    '''\n    Write a python function to return True if complex1 is close to complex2\n    '''\n    \n    if abs(complex1.real - complex2.real) < 0.00001 and abs(complex1.imag - complex2.imag) < 0.00001:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print \"\\n***Convert complex number to polar number***\\n\"\n    \n    print \"Original Complex Number: \"\n    for i in numbers:\n        print i\n    \n    polar = []\n    \n    for i in numbers:\n        polar.append(complex(i))\n    \n    print \"Converted Complex Number:\"\n    for i in polar:\n        print i\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    try:\n        if numbers[0] == '-':\n            r = abs(numbers[1:])\n            phi = cmath.phase(numbers[1:])\n        else:\n            r = abs(numbers)\n            phi = cmath.phase(numbers)\n        return str(r)+','+str(phi)\n    except:\n        return 'Invalid'\n    \nprint convert('-2')    \nprint convert('-2+3i')    \nprint convert('1+3i')    \nprint convert('3+i')    \nprint convert('0')    \nprint convert('-1')    \nprint convert('0+i')    \nprint convert('1i')    \nprint convert('-1+i')    \nprint convert('-1+2i')    \nprint convert('-1+i')    \nprint convert('1+2i')    \nprint convert('1+2+i')    \nprint convert('1+i')    \nprint convert('-1+2i+3i')    \nprint convert('-1+i+i')    \nprint convert('1+i+i')    \nprint convert('1+i+2i')    \nprint convert('1+i+3i')    \nprint convert('1+2i+3i')    \nprint convert('1+3i+i')    \nprint convert('1+3i+2i')    \nprint convert('1+i+3i+i')    \nprint convert('1+2i+3i+i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1+2i+3+3i')    \nprint convert('1+2i+3+i')    \nprint convert('1+2i+3+2i')    \nprint convert('1"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    output = []\n    for number in numbers:\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n        output.append((r,theta))\n    return output\n    \ndef convert2(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    output = []\n    for number in numbers:\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n        output.append((r,theta))\n    return output\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num = 0\n    if type(numbers) == type(num):\n        return convert(numbers.real) + convert(numbers.imag) * 1j\n    else:\n        if (numbers.real == 0) and (numbers.imag == 0):\n            return \"0\"\n        elif (numbers.real == 0) and (numbers.imag!= 0):\n            return \"0\" + \"j\"\n        elif (numbers.real!= 0) and (numbers.imag == 0):\n            return str(numbers.real)\n        else:\n            return str(numbers.real) + \"j\" + str(numbers.imag)\n        \ndef convert2(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num = 0\n    if type(numbers) == type(num):\n        return convert2(numbers.real) + convert2(numbers.imag) * 1j\n    else:\n        if (numbers.real == 0) and (numbers.imag == 0):\n            return \"0\"\n        elif (numbers.real == 0) and (numbers.imag!= 0):\n            return \"0\" + \"j\"\n        elif (numbers.real!= 0) and (numbers.imag == 0):\n            return str(numbers.real)\n        else:\n            return str(numbers.real) + \"j\" + str(numbers.imag)\n        \ndef complex_polar(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num = 0\n    if type(numbers) == type(num):\n        return complex_polar(numbers.real) + complex_polar(numbers.imag) * 1j\n    else:\n        if (numbers.real == 0) and (numbers.imag == 0):\n            return \"0\"\n        elif (numbers.real == 0) and (numbers.imag!= 0):\n            return \"0\" + \"j\"\n        elif (numbers.real!= 0) and (numbers.imag == 0):\n            return str(numbers.real)\n        else:\n            return str(numbers.real) + \"j\" + str(numbers.imag)\n        \ndef complex_polar2(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num = 0\n    if type(numbers) == type(num):\n        return complex_polar2(numbers.real) + complex_polar2(numbers.imag) * 1j\n    else:\n        if (numbers.real == 0) and (numbers.imag == 0):\n            return \"0\"\n        elif (numbers.real == 0) and (numbers.imag!= 0):\n            return \"0\" + \"j\"\n        elif (numbers.real!= 0) and (numbers.imag == 0):\n            return str(numbers.real)\n        else:\n            return str(numbers.real) + \"j\" + str(numbers.imag)\n        \ndef convert3(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num = 0\n    if type(numbers) == type(num):\n        return convert3(numbers.real) + convert3(numbers.imag) * 1j\n    else:\n        if (numbers.real == 0) and (numbers.imag == 0):\n            return \"0\"\n        elif (numbers.real == 0) and (numbers.imag!= 0):\n            return \"0\" + \"j\"\n        elif (numbers.real!= 0) and (numbers.imag == 0):\n            return str(numbers.real)\n        else:\n            return str(numbers.real) + \"j\" + str(numbers.imag)\n        \ndef cmath_convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num = 0\n    if type(numbers) == type(num):\n        return cmath_convert(numbers.real) + cmath_convert(numbers.imag) * 1j\n    else:\n        if (numbers.real == 0) and (numbers.imag == 0):\n            return \"0\"\n        elif (numbers.real == 0) and (numbers.imag!= 0):\n            return \"0\" + \"j\"\n        elif (numbers.real!= 0) and (numbers.imag == 0):\n            return str(numbers.real)\n        else:\n            return str(numbers.real) + \"j\" + str(numbers.imag)\n        \ndef cmath_convert2(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num = 0\n    if type(numbers) == type(num):\n        return cmath_convert2(numbers.real) + cmath_convert2(numbers.imag) * 1j\n    else:\n        if (numbers.real == 0) and (numbers.imag == 0):\n            return \"0\"\n        elif (numbers.real == 0) and (numbers.imag!= 0):\n            return \"0\" + \"j\"\n        elif (numbers.real!= 0) and (numbers.imag == 0):\n            return str(numbers.real)\n        else:\n            return str(numbers.real) + \"j\" + str(numbers.imag)\n        \ndef cmath_convert3(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num = 0\n    if type(numbers) == type(num):\n        return cmath_convert3(numbers.real) + cmath_convert3(numbers.imag) * 1j\n    else:\n        if (numbers.real == 0) and (numbers.imag == 0):\n            return \"0\"\n        elif (numbers.real == 0) and (numbers.imag!= 0):\n            return \"0\" + \"j\"\n        elif (numbers.real!= 0) and (numbers.imag == 0):\n            return str(numbers.real)\n        else:\n            return str(numbers.real) + \"j\" + str(numbers.imag)\n        \ndef cmath_convert4(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num = 0\n    if type(numbers) == type(num):\n        return cmath_convert4(numbers.real) + cmath_convert4(numbers.imag) * 1j\n    else:\n        if (numbers.real == 0) and (numbers.imag == 0):\n            return \"0\"\n        elif (numbers.real == 0) and (numbers.imag!= 0):\n            return \"0\" + \"j\"\n        elif (numbers.real!= 0) and (numbers.imag == 0):\n            return str(numbers.real)\n        else:\n            return str(numbers.real) + \"j\" + str(numbers.imag)\n        \ndef cmath_convert5(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num = 0\n    if type(numbers) == type(num):\n        return cmath_convert5(numbers.real) + cmath_convert5(numbers.imag) * 1j\n    else:\n        if (numbers.real == 0) and (numbers.imag == 0):\n            return \"0\"\n        elif (numbers.real == 0) and (numbers.imag!= 0):\n            return \"0\" + \"j\"\n        elif (numbers.real!= 0) and (numbers.imag == 0):\n            return str(numbers.real)\n        else:\n            return str(numbers.real) + \"j\" + str(numbers.imag)\n        \ndef cmath_convert6(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num = 0\n    if type(numbers) == type(num):\n        return cmath_convert6(number"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    x=0\n    y=0\n    z=0\n    for i in range(len(numbers)):\n        if numbers[i][0]==1:\n            z=numbers[i][1]\n            numbers[i][0]=x\n            numbers[i][1]=y\n            numbers[i][2]=z\n            x=1\n        if numbers[i][0]==2:\n            y=numbers[i][1]\n            numbers[i][0]=x\n            numbers[i][1]=y\n            numbers[i][2]=z\n            x=2\n        if numbers[i][0]==3:\n            x=numbers[i][1]\n            numbers[i][0]=x\n            numbers[i][1]=y\n            numbers[i][2]=z\n            x=3\n        if numbers[i][0]==4:\n            y=numbers[i][1]\n            numbers[i][0]=x\n            numbers[i][1]=y\n            numbers[i][2]=z\n            x=4\n        if numbers[i][0]==5:\n            x=numbers[i][1]\n            numbers[i][0]=x\n            numbers[i][1]=y\n            numbers[i][2]=z\n            x=5\n    return numbers\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.isdigit():\n            count += 1\n    return count\n    \ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.isalpha():\n            count += 1\n    return count\n    \ndef count_float(list1):\n    '''\n    Write a python function that returns the number of float elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for elem in list1:\n        if type(elem) == int:\n            count = count + 1\n    return count\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for item in list1:\n        if item.isnumeric():\n            count+=1\n    return count\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if type(i) == int])\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i) is int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for item in list1:\n        if isinstance(item,int):\n            count=count+1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(1 for i in list1 if isinstance(i, int))\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if type(x) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = sorted(l)\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [ tuple(l[i:i+n]) for i in range(len(l)-n+1) ]\n    \nprint(combinations_colors(['red', 'blue', 'green', 'yellow'], 2))\nprint(combinations_colors(['red', 'blue', 'green', 'yellow'], 3))\nprint(combinations_colors(['red', 'blue', 'green', 'yellow'], 4))\nprint(combinations_colors(['red', 'blue', 'green', 'yellow'], 5))\nprint(combinations_colors(['red', 'blue', 'green', 'yellow'], 6))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = sorted(l)\n    return [(l[i], l[j]) for i, j in combinations_with_replacement(range(len(l)), n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(comb) for comb in combinations_with_replacement(l,n)]\n    \n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if l==[] or n==0:\n        return [[]]\n    else:\n        return [x+[y] for x in combinations_colors(l[1:],n-1) for y in [l[0]]+combinations_colors(l[1:],n-1)]\ndef num_of_repetition(l):\n    '''\n    Write a function that takes in a list l and returns the number of times that each element in the list appears in the list.\n    '''\n    if l==[]:\n        return {}\n    else:\n        return {l[0]:1}|num_of_repetition(l[1:])\ndef gcd(a,b):\n    '''\n    Write a function that takes in 2 numbers and returns their greatest common divisor.\n    '''\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of all divisors of n.\n    '''\n    if n==0:\n        return 0\n    elif n%2==0:\n        return 2+sum_of_divisors(n/2)\n    else:\n        return sum_of_divisors(n-1)+1\ndef permutations(l):\n    '''\n    Write a function that takes in a list and returns a list with all permutations of the elements in the list (with repetition).\n    '''\n    if l==[]:\n        return [[]]\n    else:\n        return [x+[y] for x in permutations(l[1:]) for y in [l[0]]+permutations(l[1:])]\ndef is_prime(n):\n    '''\n    Write a function that takes in an integer n and returns True if n is prime and False if n is not prime.\n    '''\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\ndef count_digit(n):\n    '''\n    Write a function that takes in an integer n and returns the number of digits in n.\n    '''\n    if n==0:\n        return 0\n    else:\n        return 1+count_digit(n//10)\ndef total_digits(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the digits in n.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n%10+total_digits(n//10)\ndef sum_of_digits(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the digits in n.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n%10+sum_of_digits(n//10)\ndef sum_of_digits_inv(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the digits in the reverse order (from right to left).\n    '''\n    if n==0:\n        return 0\n    else:\n        return n%10+sum_of_digits_inv(n//10)\ndef is_palindrome(n):\n    '''\n    Write a function that takes in an integer n and returns True if n is a palindrome and False if n is not a palindrome.\n    '''\n    if n==0:\n        return False\n    else:\n        if n%10==n//10%10:\n            return is_palindrome(n//10)\n        else:\n            return False\ndef is_palindrome_permutation(n):\n    '''\n    Write a function that takes in an integer n and returns True if n is a palindrome and False if n is not a palindrome.\n    '''\n    if n==0:\n        return False\n    else:\n        s=str(n)\n        return sorted(s)==sorted(s,reverse=True)\ndef is_permutation(n):\n    '''\n    Write a function that takes in two integers n and m and returns True if n and m are permutations of each other and False if n and m are not permutations of each other.\n    '''\n    if n==0:\n        return False\n    else:\n        s=str(n)\n        if len(s)==1:\n            return True\n        else:\n            return sorted(s)==sorted(s,reverse=True)\ndef is_permutation_inv(n):\n    '''\n    Write a function that takes in two integers n and m and returns True if n and m are permutations of each other and False if n and m are not permutations of each other.\n    '''\n    if n==0:\n        return False\n    else:\n        s=str(n)\n        if len(s)==1:\n            return True\n        else:\n            return sorted(s)==sorted(s,reverse=True)\ndef is_anagram(n,m):\n    '''\n    Write a function that takes in two integers n and m and returns True if n and m are anagrams of each other and False if n and m are not anagrams of each other.\n    '''\n    if n==0:\n        return False\n    else:\n        s1=str(n)\n        s2=str(m)\n        if len(s1)==len(s2):\n            return sorted(s1)==sorted(s2)\n        else:\n            return False\ndef get_smallest_divisor(n):\n    '''\n    Write a function that takes in an integer n and returns the smallest divisor of n.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        i=2\n        while i<=n:\n            if n%i==0:\n                return i\n            i+=1\ndef get_largest_divisor(n):\n    '''\n    Write a function that takes in an integer n and returns the largest divisor of n.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        i=n-1\n        while i>0:\n            if n%i==0:\n                return i\n            i-=1\ndef get_smallest_multiple(n):\n    '''\n    Write a function that takes in an integer n and returns the smallest multiple of n.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        i=n\n        while i<1000000:\n            if n%i==0:\n                return i\n            i+=n\ndef get_largest_multiple(n):\n    '''\n    Write a function that takes in an integer n and returns the largest multiple of n.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        i=n*2\n        while i<1000000:\n            if n%i==0:\n                return i\n            i+=n\ndef get_smallest_divisor_recursive(n):\n    '''\n    Write a function that takes in an integer n and returns the smallest divisor of n.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return min(get_smallest_divisor_recursive(n//2),n)\ndef get_largest_divisor_recursive(n):\n    '''\n    Write a function that takes in an integer n and returns the largest divisor of n.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return max(get_largest_divisor_recursive(n//2),n)\ndef are_anagrams(n,m):\n    '''\n    Write a function that takes in two integers n and m and returns True if n and "
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l)):\n        for x in combinations_with_replacement(l, n):\n            if len(x) == n:\n                combos.append(tuple(x))\n    return combos\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    output = []\n    # for each item\n    for item in l:\n        # loop through a range of 0 to n\n        for r in range(n):\n            # append the first n items to the output\n            output.append((item, r))\n    return output\n    # return the output list\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [list(i) for i in combinations_with_replacement(l,n)]\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    return 0\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 1:\n        return 0\n    else:\n        if is_prime(n):\n            return 1 + count_Primes_nums(n-1)\n        else:\n            return count_Primes_nums(n-1)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    def is_prime(n):\n        \n        if n == 2:\n            return True\n        elif n < 2 or n % 2 == 0:\n            return False\n        \n        elif n > 2:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n                    break\n        return True\n    \n    def check_num_div(num):\n        '''\n        Function that checks if a number is divisible by 2 or 3 or 5\n        '''\n        \n        if num % 2 == 0:\n            return True\n        elif num % 3 == 0:\n            return True\n        elif num % 5 == 0:\n            return True\n        return False\n    \n    \n    if n < 1:\n        return 0\n    \n    count = 0\n    for i in range(2, n):\n        if is_prime(i) == True and check_num_div(i) == False:\n            count += 1\n    return count\n    \n    \n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 1:\n        return 0\n    primes = [True]*(n+1)\n    primes[0] = False\n    primes[1] = False\n    primes[2] = True\n    for i in range(2,int(math.sqrt(n))+1):\n        if primes[i] == True:\n            for j in range(i*2,n+1,i):\n                primes[j] = False\n    count = 0\n    for i in range(0,len(primes)):\n        if primes[i] == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    return sum(1 for num in range(2,n) if all(num%d for d in range(2,num)))\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    sieve = [True] * n\n    count = 0\n    for i in xrange(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            # Update all multiples of i\n            for j in xrange(i * i, n, i):\n                sieve[j] = False\n    return sum(sieve)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    i = 2\n    count = 0\n    while i <= n:\n        if isPrime(i):\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return count_Primes_nums(n-1) + count_Primes_nums(n-2) + count_Primes_nums(n-3)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    result = 0\n    # i = 1\n    for i in range(2, n+1):\n        if is_Prime(i):\n            result += 1\n    return result\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    t = a, b\n    return t\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    #pass\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #print (test_tup1,test_tup2)\n    if (len(test_tup1)>len(test_tup2)):\n        temp=test_tup1\n        test_tup1=test_tup2\n        test_tup2=temp\n    count=0\n    max_tup=[]\n    #print (test_tup1,test_tup2)\n    for i in range(len(test_tup1)):\n        #print (test_tup1[i],test_tup2[i])\n        if (test_tup1[i]>test_tup2[i]):\n            count+=1\n    \n    for i in range(len(test_tup1)):\n        if (count==len(test_tup1)):\n            max_tup.append(test_tup2[i])\n        else:\n            max_tup.append(test_tup1[i])\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return [max(test_tup1[i], test_tup2[i]) for i in range(len(test_tup1))]\n    elif len(test_tup1) > len(test_tup2):\n        return [max(test_tup1[i], test_tup2[i]) for i in range(len(test_tup2))]\n    elif len(test_tup2) > len(test_tup1):\n        return [max(test_tup2[i], test_tup1[i]) for i in range(len(test_tup1))]\n    else:\n        raise ValueError(\"This is not a valid test case\")\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return max(test_tup1[1], test_tup2[1])\n    elif test_tup1[0] > test_tup2[0]:\n        return test_tup1[1]\n    else:\n        return test_tup2[1]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    if tup1_len < tup2_len:\n        return list(test_tup2)\n    elif tup1_len > tup2_len:\n        return list(test_tup1)\n    elif tup1_len == tup2_len:\n        return [max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1])]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def get_max(tup1, tup2):\n        a = tup1\n        b = tup2\n        if len(tup1) < len(tup2):\n            a = tup2\n            b = tup1\n        if a[0] > b[0]:\n            return a\n        else:\n            return b\n    test_tup = get_max(test_tup1, test_tup2)\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        if test_tup[1] < test_tup[-1]:\n            return test_tup[1:]\n        else:\n            return test_tup[-2:]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if not test_tup1:\n        return test_tup2\n    elif not test_tup2:\n        return test_tup1\n    elif test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1_magnitude = max(test_tup1)\n    test_tup2_magnitude = max(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1) if len(test_tup1) > len(test_tup2) else max(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(max(a,b) for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # See http://en.wikipedia.org/wiki/Newton%27s_method#Prime_number_theorem for why it works\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # p = 1\n    # while True:\n    #     p += 1\n    #     if newman_williams(p) == True:\n    #         return p\n    return newman_williams(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return newman_williams(n, True)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = random.randint(1, n-1)\n    a = (a**n) % n\n    if a == 1:\n        return n\n    i = 0\n    while True:\n        i+=1\n        a = (a**2) % n\n        if i % 2 == 0:\n            a = (a * a) % n\n        else:\n            a = (a**2) % n\n        if a == 1:\n            return n\n        if i % 2 == 0:\n            a = (a*a) % n\n        else:\n            a = (a**2) % n\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n    if n < len(arr):\n        return arr[n-1]\n    elif n % 2 == 0:\n        return newman_prime(n // 2) ** 2\n    elif n % 3 == 0:\n        return (newman_prime(n // 3) ** 3) * newman_prime(2)\n    for i in range(len(arr)):\n        if n % arr[i] == 0:\n            return newman_prime(n // arr[i]) ** arr[i]\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = random.randint(1,n-1)\n    x = pow(a,n-1,n)\n    if x == 1: return n\n    for i in range(1,n):\n        if i==1:\n            y = x\n        else:\n            y = pow(a,(n-1)*i,n)\n        if y == 1:\n            return n\n        elif y == n-1:\n            continue\n        else:\n            while y!= 1:\n                x,y = y,x%y\n    return n\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return newman_williams(n)[0]\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    if n in prime_list: return n\n    def get_p_list(n):\n        p_list = [n]\n        for i in xrange(1,n):\n            if n%i == 0: p_list.append(i)\n        return p_list\n    p_list = get_p_list(n)\n    for i in xrange(len(p_list)):\n        if p_list[i] not in prime_list:\n            n = get_p_list(p_list[i])\n            for j in xrange(len(n)):\n                if n[j] not in prime_list:\n                    p_list[i] = n[j]\n                    break\n    return p_list[len(p_list)-1]\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Do the math, in this case, it's a division operation, so the result will be a float.\n    result = [float(test_tup1[i]) / float(test_tup2[i]) for i in range(len(test_tup1))]\n    \n    # Make sure the result is of type tuple\n    result = tuple(result)\n    \n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([int(tup1/tup2) for tup1, tup2 in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        list_of_list = [[test_tup1[i] / test_tup2[i] for i in range(len(test_tup1))] for j in range(len(test_tup1))]\n        return list_of_list\n    else:\n        return \"Error: Length mismatch\"\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def division_elements_helper(test_tup1, test_tup2):\n        if len(test_tup1)!= len(test_tup2):\n            raise Exception, \"Both tuples must have the same length\"\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(0, len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    for i in range(len(list1)):\n        list1[i] = (list1[i] / list2[i])\n    \n    return tuple(list1)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #return [tup1[i] / tup2[i] for i in range(len(tup1))]\n    return tuple(tup1[i] / tup2[i] for i in range(len(tup1)))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error! The two tuples must have the same length!\")\n    else:\n        div_list = []\n        for i in range(len(test_tup1)):\n            div_list.append(test_tup1[i] / test_tup2[i])\n        return tuple(div_list)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L < 1:\n        return (None, None)\n    elif L == 1:\n        return (list1[:1], list1[1:])\n    else:\n        return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1)%2!= 0:\n        return (list1[:L], list1[L:])\n    else:\n        return (list1[:L], list1[L:L+1])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return 'Please enter an integer less than the length of the given list.'\n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return ([list1[i] for i in range(0,L)], [list1[i] for i in range(L,len(list1))])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # TODO: Complete this function\n    a = []\n    b = []\n    for i in range(L):\n        a.append(list1[i])\n    for i in range(L, len(list1)):\n        b.append(list1[i])\n    return (a, b)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[0:L], list1[L:])\n    \ndef merge(list1, list2):\n    '''\n    Write a function that takes in two lists and merges the two lists together into a new list and returns the merged list.\n    '''\n    return list1 + list2\n    \ndef rotate(list1, k):\n    '''\n    Write a function that takes in a list and an integer k and returns the list rotated by the given number of places to the right.\n    '''\n    return list1[k:] + list1[0:k]\n    \ndef search_in_rotated_sorted(list1, x):\n    '''\n    Write a function that takes in a sorted list and an integer x and returns the index of the element in the list that equals x if it exists, otherwise returns -1.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == x:\n            return i\n    return -1\n    \ndef find_middle(list1):\n    '''\n    Write a function that takes in a list and returns the middle element in the list.\n    '''\n    return list1[int(len(list1)/2)]\n    \ndef is_sorted(list1):\n    '''\n    Write a function that takes in a list and returns a boolean indicating if the list is sorted.\n    '''\n    return list1 == sorted(list1)\n    \ndef binary_search(list1, x):\n    '''\n    Write a function that takes in a list and an integer x and returns the index of the element in the list that equals x if it exists, otherwise returns -1.\n    '''\n    start = 0\n    end = len(list1) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if list1[mid] == x:\n            return mid\n        elif list1[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    return list1[:length//2], list1[length//2:]\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age\n    \ndef days_to_year(days):\n    '''\n    Write a function to convert number of days to a\n    number of years.\n    '''\n    y_age = days / 365\n    return y_age\n    \ndef years_to_days(y_age):\n    '''\n    Write a function to convert number of years to days.\n    '''\n    d_age = y_age * 365\n    return d_age\n    \ndef days_to_weeks(days):\n    '''\n    Write a function to convert number of days to a number of \n    weeks.\n    '''\n    w_age = days / 7\n    return w_age\n    \ndef weeks_to_days(w_age):\n    '''\n    Write a function to convert number of weeks to days.\n    '''\n    d_age = w_age * 7\n    return d_age\n    \ndef days_to_months(days):\n    '''\n    Write a function to convert number of days to a number of \n    months.\n    '''\n    m_age = days / 30\n    return m_age\n    \ndef months_to_days(m_age):\n    '''\n    Write a function to convert number of months to days.\n    '''\n    d_age = m_age * 30\n    return d_age\n    \ndef age_difference(d1_age, d2_age):\n    '''\n    Write a function that takes two dates as strings in the format\n    YYYY-MM-DD and returns the number of days between the two dates.\n    '''\n    difference = d1_age - d2_age\n    return difference\n    \ndef age_difference_reversed(d1_age, d2_age):\n    '''\n    Write a function that takes two dates as strings in the format\n    YYYY-MM-DD and returns the number of days between the two dates,\n    but in the opposite order.\n    '''\n    difference = d2_age - d1_age\n    return difference\n    \ndef days_to_months_reversed(days):\n    '''\n    Write a function to convert number of days to a number of \n    months, but in the opposite order.\n    '''\n    months = days / 30\n    return months\n    \ndef months_to_days_reversed(months):\n    '''\n    Write a function to convert number of months to days, but in \n    the opposite order.\n    '''\n    days = months * 30\n    return days\n    \ndef is_leap_year(year):\n    '''\n    Write a function to determine whether a given year is a leap year\n    based on the divisibility of 4, 100, 400, and 400.\n    '''\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    else:\n        return False\n    \ndef days_in_leap_year(year):\n    '''\n    Write a function to calculate the number of days in a leap \n    year based on the divisibility of 4, 100, 400, and 400.\n    '''\n    if is_leap_year(year):\n        days = 366\n    else:\n        days = 365\n    return days\n    \ndef leap_year_days(year):\n    '''\n    Write a function to calculate the number of days in a leap year.\n    '''\n    leap_days = days_in_leap_year(year)\n    return leap_days\n    \ndef days_in_nonleap_year(year):\n    '''\n    Write a function to calculate the number of days in a non-leap \n    year based on the divisibility of 4, 100, 400, and 400.\n    '''\n    if is_leap_year(year):\n        return 0\n    else:\n        non_leap_days = 365\n    return non_leap_days\n    \ndef non_leap_year_days(year):\n    '''\n    Write a function to calculate the number of days in a non-leap \n    year based on the divisibility of 4, 100, 400, and 400.\n    '''\n    if is_leap_year(year):\n        return 0\n    else:\n        non_leap_days = 365\n    return non_leap_days\n    \ndef days_in_month(month, year):\n    '''\n    Write a function to calculate the number of days in a given month\n    based on the divisibility of 4, 100, 400, and 400.\n    '''\n    if is_leap_year(year):\n        leap_days = days_in_leap_year(year)\n        return leap_days\n    else:\n        non_leap_days = days_in_nonleap_year(year)\n        return non_leap_days\n    \ndef days_in_month_reversed(month, year):\n    '''\n    Write a function to calculate the number of days in a given month\n    based on the divisibility of 4, 100, 400, and 400.\n    '''\n    if is_leap_year(year):\n        leap_days = days_in_leap_year(year)\n        return leap_days\n    else:\n        non_leap_days = days_in_nonleap_year(year)\n        return non_leap_days\n    \ndef days_in_week(day, month, year):\n    '''\n    Write a function to calculate the number of days in a given week\n    based on the divisibility of 7, 4, 3, 2, 1, 0, and 1.\n    '''\n    if day == 0:\n        return 0\n    elif is_leap_year(year) == True:\n        days_in_month = days_in_leap_year(year)\n        if day % 7 == 1:\n            return days_in_month\n        else:\n            return days_in_month - day\n    else:\n        days_in_month = days_in_nonleap_year(year)\n        if day % 7 == 1:\n            return days_in_month\n        else:\n            return days_in_month - day\n    \ndef days_in_week_reversed(day, month, year):\n    '''\n    Write a function to calculate the number of days in a given week\n    based on the divisibility of 7, 4, 3, 2, 1, 0, and 1.\n    '''\n    if day == 0:\n        return 0\n    elif is_leap_year(year) == True:\n        days_in_month = days_in_leap_year(year)\n        if day % 7 == 1:\n            return days_in_month\n        else:\n            return days_in_month - day\n    else:\n        days_in_month = days_in_nonleap_year(year)\n        if day % 7 == 1:\n            return days_in_month\n        else:\n            return days_in_month - day\n    \ndef is_valid_date(month, day, year):\n    '''\n    Write a function to determine whether a given date is valid based\n    on the divisibility of 4, 100, 400, and 400.\n    '''\n    if year < 0:\n        return False\n    elif month < 1 or month > 12:\n        return False\n    elif day < 1 or day > 31:\n        return False\n    elif is_leap_year(year) == True:\n        if day > days_in_leap_year(year):\n            return False\n    else:\n        if day > days_in_nonleap_year(year):\n            return False\n    return True\n    \ndef is_valid_date_reversed(month, day, year):\n    '''\n    Write a function to determine whether a given date is valid based\n    on the divisibility of 4, 100, 400, and 400.\n    '''\n    if year < 0:\n        return False\n    elif month < 1 or month > 12:\n        return False\n    elif day < 1 or day > 31:\n        return False\n    elif is_leap_year(year) == True:\n        if day > days_in_leap_year(year)"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    # declare constants\n    HOURS_IN_YEAR = 365.25\n    HOURS_IN_MONTH = 24.0\n    \n    # calculate the age in years\n    years_old = int(h_age) * HOURS_IN_YEAR / HOURS_IN_MONTH\n    \n    # return the calculated age\n    return years_old\n    \ndef calc_age_calc():\n    '''\n    Write a function that prompts the user for their name and then calculates their age.\n    '''\n    \n    # define constants\n    USER_NAME = 'CalcAge'\n    \n    # prompt the user for their name\n    name = raw_input('What is your name? ')\n    \n    # calculate the age\n    age = dog_age(name)\n    \n    # print the age\n    print 'Hi %s, you are %d years old' % (name, age)\n    \n    # calculate the age for the user\n    calc_age_user(USER_NAME, age)\n    \ndef calc_age_user(name, age):\n    '''\n    Write a function that prompts the user for their name and then calculates their age.\n    '''\n    \n    # define constants\n    USER_NAME = name\n    \n    # prompt the user for their name\n    name = raw_input('What is your name? ')\n    \n    # calculate the age\n    age = dog_age(name)\n    \n    # print the age\n    print 'Hi %s, you are %d years old' % (name, age)\n    \n    # calculate the age for the user\n    calc_age_user(USER_NAME, age)\n    \nif __name__ == '__main__':\n    # calc_age()\n    calc_age_calc("
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        raise ValueError(\"Age can't be negative\")\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print('Age must be positive')\n    elif h_age < 1:\n        print('Age must be at least 1')\n    elif h_age < 4:\n        print('Your dog is a toddler')\n    elif h_age < 13:\n        print('Your dog is a kid')\n    elif h_age < 20:\n        print('Your dog is a teenager')\n    elif h_age < 65:\n        print('Your dog is an adult')\n    elif h_age >= 65:\n        print('Your dog is an elder')\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        raise ValueError(\"Age must be a positive number.\")\n    elif h_age > 0:\n        if h_age < 7:\n            return h_age * 7\n        else:\n            return (h_age - 6) * 4 + 21\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == None:\n        return None\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    print(\"dog age: \", 0.5 * h_age * (2 * h_age + 1) + 6)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    year = (1.0 * h_age / 11.0)\n    return year\n    \ndef count_pig(h_age):\n    '''\n    Write a function that counts a pig's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_horse(h_age):\n    '''\n    Write a function that counts a horse's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_cow(h_age):\n    '''\n    Write a function that counts a cow's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_zebra(h_age):\n    '''\n    Write a function that counts a zebra's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_sheep(h_age):\n    '''\n    Write a function that counts a sheep's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_buffalo(h_age):\n    '''\n    Write a function that counts a buffalo's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_pig(h_age):\n    '''\n    Write a function that counts a pig's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_horse(h_age):\n    '''\n    Write a function that counts a horse's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_cow(h_age):\n    '''\n    Write a function that counts a cow's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_zebra(h_age):\n    '''\n    Write a function that counts a zebra's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_sheep(h_age):\n    '''\n    Write a function that counts a sheep's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_buffalo(h_age):\n    '''\n    Write a function that counts a buffalo's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_pig(h_age):\n    '''\n    Write a function that counts a pig's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_horse(h_age):\n    '''\n    Write a function that counts a horse's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_cow(h_age):\n    '''\n    Write a function that counts a cow's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_zebra(h_age):\n    '''\n    Write a function that counts a zebra's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_sheep(h_age):\n    '''\n    Write a function that counts a sheep's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_buffalo(h_age):\n    '''\n    Write a function that counts a buffalo's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_pig(h_age):\n    '''\n    Write a function that counts a pig's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_horse(h_age):\n    '''\n    Write a function that counts a horse's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_cow(h_age):\n    '''\n    Write a function that counts a cow's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_zebra(h_age):\n    '''\n    Write a function that counts a zebra's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_sheep(h_age):\n    '''\n    Write a function that counts a sheep's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_buffalo(h_age):\n    '''\n    Write a function that counts a buffalo's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_pig(h_age):\n    '''\n    Write a function that counts a pig's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_horse(h_age):\n    '''\n    Write a function that counts a horse's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_cow(h_age):\n    '''\n    Write a function that counts a cow's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_zebra(h_age):\n    '''\n    Write a function that counts a zebra's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_sheep(h_age):\n    '''\n    Write a function that counts a sheep's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_buffalo(h_age):\n    '''\n    Write a function that counts a buffalo's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_pig(h_age):\n    '''\n    Write a function that counts a pig's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_horse(h_age):\n    '''\n    Write a function that counts a horse's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_cow(h_age):\n    '''\n    Write a function that counts a cow's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_zebra(h_age):\n    '''\n    Write a function that counts a zebra's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_sheep(h_age):\n    '''\n    Write a function that counts a sheep's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_buffalo(h_age):\n    '''\n    Write a function that counts a buffalo's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_pig(h_age):\n    '''\n    Write a function that counts a pig's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_horse(h_age):\n    '''\n    Write a function that counts a horse's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_cow(h_age):\n    '''\n    Write a function that counts a cow's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_zebra(h_age):\n    '''\n    Write a function that counts a zebra's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_sheep(h_age):\n    '''\n    Write a function that counts a sheep's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_buffalo(h_age):\n    '''\n    Write a function that counts a buffalo's day.\n    '''\n    days = h_age * 365\n    return days\n    \ndef count_pig(h_age):\n    '''\n    Write a function that counts a pig's day.\n    '''\n    days = h_age * 360\n    return days\n    \ndef count_horse(h_age):\n    '''\n    Write a function that count"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print(\"You're a funny person!\")\n        return\n    d_age = 15*h_age\n    print(\"Your dog is\",d_age,\"years old.\")\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # We need a list to store the result, to add it to the output list\n    result = []\n    # We need to go through the list one element at a time, so we iterate through the list\n    for i in range(0, len(S), step):\n        # We add the resulting list to the output list\n        result.append(S[i:i+step])\n    # And return the list\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = len(S)\n    j = 0\n    sub_lists = []\n    for i in range(0,L,step):\n        sub_list = []\n        for j in range(i,i+step):\n            sub_list.append(S[j])\n        sub_lists.append(sub_list)\n    return sub_lists\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # result = []\n    # for i in range(0, len(S), step):\n    #     result.append(S[i])\n    # return result\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #Solution 1\n    #res = [[]]\n    #for i in range(len(S)):\n    #    res[i % step].append(S[i])\n    #return res\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def helper(lst,n):\n        if len(lst) % n!= 0:\n            lst = lst + [None]*(n-(len(lst) % n))\n        return [lst[i:i+n] for i in range(0,len(lst),n)]\n    \n    return helper(S,step)\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    splits = []\n    for i in range(0,len(S),step):\n        splits.append(S[i:i+step])\n    return splits\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #This function is almost identical to earlier.\n    #However, the area we want to find is (2l)^2, and we want the area to be a double.\n    #Therefore, we need to multiply the side length by 2.\n    return 2*l*l\n    \n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l\n    \nassert lateralsurface_cube(4) == 48\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    lateralsurface = (6*l**2)\n    print \"The lateral surface area of a cube with side length \" + str(l) + \" is \" + str(lateralsurface)\n    \nlateralsurface_cube('3')\nlateralsurface_cube('2.5')\nlateralsurface_cube('4.3')\nlateralsurface_cube('7')\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    lateral_surface_area = 6 * l ** 2\n    print(lateral_surface_area)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import sqrt\n    l = float(l)\n    return 6*l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    #return 3 * l ** 2\n    return 6 * l ** 2\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    '''\n    # Method 1\n    \n    res = 0\n    \n    for i in xrange(1, n+1, 2):\n        res += i**2\n    \n    return res\n    '''\n    \n    # Method 2\n    \n    return sum(i**2 for i in xrange(1, n+1, 2))\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(n+1):\n        if i % 2!= 0:\n            total += i**2\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i*i\n        i+= 1\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x**2 for x in xrange(1, n+1) if x % 2!= 0])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    return (n * (n + 1) / 2) * n\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    # store the result in a variable\n    res = 0\n    # iterate through the numbers starting from 1\n    for i in range(1, n+1):\n        # if the number is odd, add it to the result\n        if (i % 2!= 0):\n            res += i**2\n    # return the result\n    return res\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if (i%2 == 1):\n            sum = sum + (i**2)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n*(n+1)*n/6)+square_Sum(n-1)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(n):\n        if i%2 == 1:\n            s += i*i\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(x**2 for x in range(1,n,2))\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    # base case: n = 1, return 1\n    if n == 1: \n        return 1\n    \n    # if n is even, then calculate by recursion\n    elif n % 2 == 0:\n        return find_star_num(n / 2) * (2 * find_star_num(n / 2 - 1) + find_star_num(n / 2 - 1) + 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    stars = 1 \n    n_stars = 0 \n    while n > 0:\n        n_stars += stars\n        stars += 1\n        n -= 1\n    return n_stars\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_star_num(n - 1) + find_star_num(n - 2)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = 1\n    for i in range(1, n): \n        result = result*(i + 1)\n    return result\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n * (n + 1) * (n - 1) // 3\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 1\n    j = 0\n    count = 1\n    num = []\n    while i < n:\n        while j < n:\n            if j >= i:\n                num.append(count)\n                count += 1\n            j += 1\n        j = 0\n        i += 1\n    return num[n-1]\n    \nprint(find_star_num(1))\nprint(find_star_num(2))\nprint(find_star_num(3))\nprint(find_star_num(4))\nprint(find_star_num(5))"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 3 * find_star_num(n - 1) + 2\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n**2\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return find_star_num(n-1) + n*find_star_num(n-2)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 3\n    if n == 4: return 4\n    return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3) + find_star_num(n-4)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k =='':\n        return 32\n    elif k == '\\n':\n        return 10\n    elif k == '\\t':\n        return 9\n    elif k.isupper():\n        return ord(k)-65\n    elif k.islower():\n        return ord(k)-97\n    elif k.isdigit():\n        return int(k)\n    else:\n        return None\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    if k>=65 and k<=90:\n        return k-65\n    elif k>=97 and k<=122:\n        return k-97\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    return k\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) < 97:\n        return \"Error! No lower case letters\"\n    else:\n        return ord(k)-96\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for index, num in enumerate(arr):\n        if index % 2 == 0 and num % 2 == 0:\n            even_sum += num\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0,len(arr),2):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_of_even_numbers = 0\n    for i in range(len(arr)):\n        if i%2==0:\n            sum_of_even_numbers+=arr[i]\n    return sum_of_even_numbers\ndef sum_even_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    sum_of_even_numbers = 0\n    for i in range(len(arr)):\n        if i%2!=0:\n            sum_of_even_numbers+=arr[i]\n    return sum_of_even_numbers\ndef sum_odd_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    sum_of_odd_numbers = 0\n    for i in range(len(arr)):\n        if i%2!=0:\n            sum_of_odd_numbers+=arr[i]\n    return sum_of_odd_numbers\ndef sum_odd_and_even_index(arr):\n    '''\n    Write a python function to find the sum of odd numbers at even positions of a list.\n    '''\n    sum_of_odd_numbers = 0\n    for i in range(len(arr)):\n        if i%2==0:\n            sum_of_odd_numbers+=arr[i]\n    return sum_of_odd_numbers\ndef list_sum(arr):\n    '''\n    Write a python function to find the sum of all elements of a list.\n    '''\n    sum_of_numbers = 0\n    for i in range(len(arr)):\n        sum_of_numbers+=arr[i]\n    return sum_of_numbers\ndef find_min(arr):\n    '''\n    Write a python function to find the minimum value of a list.\n    '''\n    min_value = arr[0]\n    for i in range(len(arr)):\n        if min_value>arr[i]:\n            min_value=arr[i]\n    return min_value\ndef find_max(arr):\n    '''\n    Write a python function to find the maximum value of a list.\n    '''\n    max_value = arr[0]\n    for i in range(len(arr)):\n        if max_value<arr[i]:\n            max_value=arr[i]\n    return max_value\ndef reverse_list(arr):\n    '''\n    Write a python function to reverse a list.\n    '''\n    reverse_arr = []\n    for i in range(len(arr)-1,-1,-1):\n        reverse_arr.append(arr[i])\n    return reverse_arr\ndef reverse_string(str):\n    '''\n    Write a python function to reverse a string.\n    '''\n    reverse_str = \"\"\n    for i in range(len(str)-1,-1,-1):\n        reverse_str+=str[i]\n    return reverse_str\ndef find_mid(arr):\n    '''\n    Write a python function to find the middle element of a list.\n    '''\n    mid_value = (arr[0]+arr[-1])/2\n    return mid_value\ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    unique_arr = []\n    for i in range(len(arr)):\n        if arr[i] not in unique_arr:\n            unique_arr.append(arr[i])\n    return unique_arr\ndef sort_list(arr):\n    '''\n    Write a python function to sort a list.\n    '''\n    sort_arr = []\n    for i in range(len(arr)):\n        sort_arr.append(arr[i])\n    sort_arr.sort()\n    return sort_arr\ndef find_common(arr1,arr2):\n    '''\n    Write a python function to find common elements between two lists.\n    '''\n    common_arr = []\n    for i in range(len(arr1)):\n        if arr1[i] in arr2:\n            common_arr.append(arr1[i])\n    return common_arr\ndef find_num_of_common(arr1,arr2):\n    '''\n    Write a python function to find the number of common elements between two lists.\n    '''\n    common_arr = find_common(arr1,arr2)\n    num_of_common = len(common_arr)\n    return num_of_common\ndef is_valid_coordinate(x,y):\n    '''\n    Write a python function to check if a tuple is a valid coordinate.\n    '''\n    if x>0 and y>0:\n        return True\n    else:\n        return False\ndef add_tuples(tuple1,tuple2):\n    '''\n    Write a python function to add two tuples.\n    '''\n    if is_valid_coordinate(tuple1[0],tuple1[1]) and is_valid_coordinate(tuple2[0],tuple2[1]):\n        new_tuple = (tuple1[0] + tuple2[0],tuple1[1] + tuple2[1])\n    else:\n        new_tuple = (0,0)\n    return new_tuple\ndef get_max_of_three_tuples(tuple1,tuple2,tuple3):\n    '''\n    Write a python function to find the maximum of three tuples.\n    '''\n    if tuple1[0]>tuple2[0] and tuple1[0]>tuple3[0]:\n        max_tuple = tuple1\n    elif tuple2[0]>tuple1[0] and tuple2[0]>tuple3[0]:\n        max_tuple = tuple2\n    else:\n        max_tuple = tuple3\n    return max_tuple\ndef get_min_of_three_tuples(tuple1,tuple2,tuple3):\n    '''\n    Write a python function to find the minimum of three tuples.\n    '''\n    if tuple1[0]<tuple2[0] and tuple1[0]<tuple3[0]:\n        min_tuple = tuple1\n    elif tuple2[0]<tuple1[0] and tuple2[0]<tuple3[0]:\n        min_tuple = tuple2\n    else:\n        min_tuple = tuple3\n    return min_tuple\ndef get_distance(tuple1,tuple2):\n    '''\n    Write a python function to find the distance between two tuples.\n    '''\n    distance = ((tuple1[0] - tuple2[0])**2 + (tuple1[1] - tuple2[1])**2)**0.5\n    return distance\ndef get_middle_tuple(tuple1,tuple2):\n    '''\n    Write a python function to find the middle tuple between two tuples.\n    '''\n    if tuple1[0]<tuple2[0]:\n        new_tuple = tuple1\n    else:\n        new_tuple = tuple2\n    return new_tuple\ndef find_middle_tuple(tuple1,tuple2):\n    '''\n    Write a python function to find the middle tuple between two tuples.\n    '''\n    if tuple1[0]<tuple2[0]:\n        if tuple1[1]<tuple2[1]:\n            new_tuple = tuple1\n        else:\n            new_tuple = tuple2\n    else:\n        if tuple1[1]<tuple2[1]:\n            new_tuple = tuple1\n        else:\n            new_tuple = tuple2\n    return new_tuple\ndef find_nearest_tuple(tuple1,tuple2,tuple3):\n    '''\n    Write a python function to find the nearest tuple to a given tuple.\n    '''\n    distance1 = get_distance(tuple1,tuple2)\n    distance2 = get_distance(tuple1,tuple3)\n    distance3 = get_distance(tuple2,tuple3)\n    if distance1<distance2 and distance1<distanc"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if i%2==0:\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    list_length = len(arr)\n    sum_even_index = 0\n    for i in range(0, list_length, 2):\n        sum_even_index = sum_even_index + arr[i]\n    return sum_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for idx, i in enumerate(arr):\n        if idx % 2 == 0:\n            if i % 2 == 0:\n                sum_even = sum_even + i\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_arr = 0\n    for i in range(0,len(arr),2):\n        sum_arr = sum_arr + arr[i]\n    return sum_arr\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for x in range(len(arr)):\n        if x%2 == 0:\n            sum += arr[x]\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(0, n + 1):\n        if (i % 2 == 0):\n            power = i ** 5\n            total = total + power\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    total = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            total += i**5\n    return total\n    \nprint even_Power_Sum(100)\nprint even_Power_Sum(999)"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for x in range(1,n+1):\n        if x % 2 == 0:\n            total += x**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([x**5 for x in range(0,n,2) if x%2==0])\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(x**5 for x in range(n) if x%2 == 0)\n    # Another approach:\n    # power_list = []\n    # for x in range(n):\n    #     if x%2 == 0:\n    #         power_list.append(x**5)\n    # return sum(power_list)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    else:\n        return even_Power_Sum(n-1) + int(n**5)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # YOUR CODE HERE\n    return n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) // 20\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n<=0:\n        return 0\n    sum = 0\n    for i in range(0,n,1):\n        if i%2==0 and i**5>0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for num in range(2,n+1,2):\n        total += num**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if (i**5) % 2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [elem[-1] for elem in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n    "
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n    \ndef rear_extract_f(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple, but this time you do not know the length of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n    \ndef is_sorted(test_list, key=None):\n    '''\n    Write a function that takes in a list of tuples and returns True if the list is sorted in ascending order according to the value of the second element. \n    '''\n    if key == None:\n        return all([test_list[i] <= test_list[i+1] for i in range(len(test_list)-1)])\n    else:\n        return all([test_list[i][1] <= test_list[i+1][1] for i in range(len(test_list)-1)])\n    \ndef is_sorted_f(test_list, key=None):\n    '''\n    Write a function that takes in a list of tuples and returns True if the list is sorted in ascending order according to the value of the second element, but this time you do not know the length of each tuple.\n    '''\n    if key == None:\n        return all([test_list[i] <= test_list[i+1] for i in range(len(test_list)-1)])\n    else:\n        return all([test_list[i][1] <= test_list[i+1][1] for i in range(len(test_list)-1)])\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[-1])\n    return rear\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [a[-1] for a in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(i[0]) for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(new_tup)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    out = []\n    for i in range(len(test_tup1)):\n        out.append(test_tup1[i] - test_tup2[i])\n    return tuple(out)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for index, element in enumerate(test_tup1):\n        result += (element - test_tup2[index],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    substracted_tuple = ()\n    for i in range(len(test_tup1)):\n        substracted_tuple += (test_tup1[i] - test_tup2[i],)\n    return substracted_tuple\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    t1 = test_tup1[0]\n    t2 = test_tup2[0]\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n    \n    \ndef test_substract_elements():\n    assert substract_elements((1,2),(0,1)) == (1,1)\n    assert substract_elements((0,1),(1,2)) == (1,1)\n    assert substract_elements((3,4),(3,4)) == (0,0)\n    assert substract_elements((3,4),(5,4)) == (3,-4)\n    assert substract_elements((0,1,2,3),(1,3,3,1)) == (0,0,0,0)\n    assert substract_elements((1,2,3,4,5),(1,3,4,3,1)) == (1,2,3,2,0)\n    assert substract_elements((1,1,1,1),(2,1,1,1)) == (0,0,0,0)\n    assert substract_elements((1,1,1,1,1),(2,1,1,1,1)) == (0,0,0,0,0)\n    assert substract_elements((1,2,3,4),(3,4,5)) == (1,1,0,0)\n    assert substract_elements((1,2,3,4),(1,3,4,5)) == (0,0,0,0)\n    assert substract_elements((1,2,3,4,5),(3,4,5,6)) == (1,1,0,0,0)\n    assert substract_elements((1,2,3,4,5),(1,1,3,4,5)) == (0,0,0,0,0)\n    assert substract_elements((1,2,3,4,5),(1,1,3,4,5,6)) == (0,0,0,0,0,0)\n    assert substract_elements((1,2,3,4,5),(1,1,2,4,5)) == (0,0,0,0,0)\n    assert substract_elements((1,2,3,4,5),(1,2,3,4,5)) == (0,0,0,0,0)\n    assert substract_elements((1,2,3,4,5),(1,2,3,4,5,6)) == (0,0,0,0,0,0)\n    \n    \ndef add_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and adds the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] + test_tup2[i]\n    return test_tup1\n    \n    \ndef test_add_elements():\n    assert add_elements((1,2),(0,1)) == (1,1)\n    assert add_elements((0,1),(1,2)) == (1,1)\n    assert add_elements((3,4),(3,4)) == (6,4)\n    assert add_elements((3,4),(5,4)) == (8,4)\n    assert add_elements((0,1,2,3),(1,3,3,1)) == (0,1,4,5)\n    assert add_elements((1,2,3,4,5),(1,3,4,3,1)) == (1,2,4,5,6)\n    assert add_elements((1,1,1,1),(2,1,1,1)) == (2,2,2,2)\n    assert add_elements((1,1,1,1),(2,1,1,1)) == (2,2,2,2)\n    assert add_elements((1,2,3,4),(3,4,5)) == (1,2,4,5)\n    assert add_elements((1,2,3,4),(1,3,4,5)) == (2,3,5,6)\n    assert add_elements((1,2,3,4,5),(3,4,5,6)) == (1,2,5,6,7)\n    assert add_elements((1,2,3,4,5),(1,1,3,4,5)) == (2,3,5,7,9)\n    assert add_elements((1,2,3,4,5),(1,1,3,4,5,6)) == (2,3,5,7,9,12)\n    assert add_elements((1,2,3,4,5),(1,1,2,4,5)) == (2,3,5,7,9)\n    assert add_elements((1,2,3,4,5),(1,2,3,4,5)) == (2,4,6,8,10)\n    assert add_elements((1,2,3,4,5),(1,2,3,4,5,6)) == (2,4,6,8,10,12)\n    assert add_elements((1,2,3,4,5),(1,2,3,4,5,6,7)) == (2,4,6,8,10,12,14)\n    assert add_elements((1,2,3,4,5),(1,2,3,4,5,6,7,8)) == (2,4,6,8,10,12,14,16)\n    assert add_elements((1,2,3,4,5,6),(1,2,3,4,5,6,7,8)) == (2,4,6,8,10,12,14,16)\n    assert add_elements((1,2,3,4,5,6,7),(1,2,3,4,5,6,7,8)) == (2,4,6,8,10,12,14,16,18)\n    assert add_elements((1,2,3,4,5,6,7,8),(1,2,3,4,5,6,7,8)) == (2,4,6,8,10,12,14,16,18)\n    assert add_elements((1,2,3,4,5,6,7,8,9),(1,2,3,4,5,6,7,8,9)) == (2,4,6,8,10,12,14,16,18,20)\n    assert add_elements((1,2,3,4,5,6,7,8,9),(1,2,3,4,5,6,7,8,9,10)) == (2,4,6,8,10,12,14,16,18,20,22)\n    assert add_elements((1,2,3,4,5,6,7,8,9),(1,2,3,4,5,6,7,8,9,10)) == (2,4,6,8,10,12,14,16,18,20,22,24)\n    assert add_elements((1,2,3,4,5,6,7,8,9),(1,2,3,4,5,6,7,8,9,10,11)) == (2,4,6,8,10,12,14,16,18,20,22,24,26)\n    assert add_elements((1,2,3,4,5,6,7,8,9),(1,2,3,4,5,6,7,8,9,10,11,12)) == (2,4,6,8,10,12,14,16,18,20,22,24,26,28)\n    assert add_elements((1,2"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([i - j for i, j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    substracted_tup = ()\n    for i in range(len(test_tup1)):\n        substracted_tup += (test_tup1[i] - test_tup2[i],)\n    return substracted_tup\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (n - 1) / 2\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    if n < 0:\n        return result\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return 2 * even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 10\n    else:\n        return even_binomial_Coeff_Sum(n - 1) + n * even_binomial_Coeff_Sum(n - 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range( n + 1): \n        sum = sum + int(i * (math.factorial(n)) / (math.factorial(i) * math.factorial(n - i)))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    even_binomial_Coeff_sum = n\n    for i in range(2,n+1):\n        if i%2 == 0:\n            even_binomial_Coeff_sum += binomial_coeff_sum(i,2)\n    \n    return even_binomial_Coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    binomial_coefficient = lambda n, k: n**k / math.factorial(k)\n    binomial_coefficient_sum = 0\n    if n % 2 == 0:\n        for k in range(0, n/2+1):\n            binomial_coefficient_sum += binomial_coefficient(n,k)\n    else:\n        for k in range(0, n/2+1):\n            binomial_coefficient_sum += binomial_coefficient(n,k)\n    return binomial_coefficient_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff = []\n    for i in range(n+1):\n        binomial_coeff.append(math.factorial(n) // math.factorial(i) // math.factorial(n-i))\n    return sum(binomial_coeff[1::2])\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Assuming a polynomial of the form (x^n-1)/(x^n-n+1)\n    binomial_coefficient = 1\n    for i in range(2, n + 1): \n        binomial_coefficient = binomial_coefficient * i\n    \n    binomial_coefficient = binomial_coefficient / math.factorial(n)\n    \n    #sum = 0\n    #for i in range(n + 1): \n    #    if i % 2 == 0: \n    #        sum = sum + binomial_coefficient \n    #return sum\n    \n    return binomial_coefficient\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(n+1)/2\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return ((3.14*r**2)*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    print math.pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3/4) * pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # output = r*h*3.14\n    return r*h*3.14\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi*r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return r**2*pi*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return ((pi * r**2) * h)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return np.pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi * (r**2) * h)\n    \nprint(volume_cylinder(2,10))\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    output = {}\n    for key,val in dict.items():\n        if val >= n:\n            output[key] = val\n    return output\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if n<=dict[key]:\n            new_dict[key] = dict[key]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key in dict:\n        if dict[key] >= n:\n            result[key] = dict[key]\n    return result\ndef dict_comprehension(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:val for key,val in dict.items() if val >= n}\ndef dict_comprehension_2(dict,n):\n    return {key:val for key,val in dict.items() if val >= n}\ndef longest_word(words):\n    '''\n    Write a function that takes in a list of words and returns the longest word in the list.\n    '''\n    return max(words, key=len)\ndef find_anagrams(s, p):\n    '''\n    Write a function that takes in a string s and a string p and returns a list of all indices in s that match p.\n    '''\n    anagrams = []\n    p_list = list(p)\n    for i in range(len(s)):\n        if s[i:i+len(p)] == p:\n            anagrams.append(i)\n    return anagrams\ndef sum_list(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of those numbers.\n    '''\n    return sum(nums)\ndef cumulative_sum(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a new list containing the cumulative sum of those numbers.\n    '''\n    return [sum(nums[:i+1]) for i in range(len(nums))]\ndef factorial(n):\n    '''\n    Write a function that takes in an integer n and returns the factorial of that number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False if the string is not a palindrome.\n    '''\n    return s == s[::-1]\ndef is_anagram(s,t):\n    '''\n    Write a function that takes in two strings and returns True if they are anagrams.\n    '''\n    return sorted(s) == sorted(t)\ndef count_vowels(s):\n    '''\n    Write a function that takes in a string and returns the number of vowels in that string.\n    '''\n    return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u')\ndef is_permutation(s,t):\n    '''\n    Write a function that takes in two strings and returns True if the strings are permutations of one another.\n    '''\n    return sorted(s) == sorted(t)\ndef get_middle(s):\n    '''\n    Write a function that takes in a string and returns the string made of the middle three characters of the original string.\n    '''\n    return s[(len(s)-1)/2:(len(s)+1)/2]\ndef is_valid_date(date):\n    '''\n    Write a function that takes in a date in the form of month/day/year and returns True if the date is valid, False if the date is not valid.\n    '''\n    return True if (1 <= int(date[3:5]) <= 12 and 1 <= int(date[0:2]) <= 31 and (date[6:7] == '-' and 1 <= int(date[7:]) <= 3000 or date[6:7] == '/' and 1 <= int(date[7:]) <= 31)) else False\ndef is_valid_ip(ip):\n    '''\n    Write a function that takes in a string of a IPv4 address and returns True if the IPv4 address is valid, False if the IPv4 address is not valid.\n    '''\n    octets = ip.split('.')\n    return True if len(octets) == 4 else False\ndef longest_duplicate_substring(s):\n    '''\n    Write a function that takes in a string s and returns the longest substring of s that occurs more than once.\n    '''\n    current_substring = ''\n    last_index = 0\n    max_length = 0\n    for i in range(len(s)):\n        if s[i] not in current_substring:\n            current_substring += s[i]\n        else:\n            last_index = i\n            if len(current_substring) > max_length:\n                max_length = len(current_substring)\n            current_substring = ''\n    return s[last_index:last_index + max_length]\ndef get_intersection_point(s,t):\n    '''\n    Write a function that takes in two strings s and t and returns the point of intersection of those strings, if they do not intersect, the function should return None.\n    '''\n    length1 = len(s)\n    length2 = len(t)\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j] and i == j:\n                return i\n            elif i < j:\n                if s[i] == t[j-1] and t[j] == s[i+1]:\n                    return i\n    return None\ndef swap(s,a,b):\n    '''\n    Write a function that takes in a string and two indices and swaps the characters in the string at those indices.\n    '''\n    return s[:a] + s[b] + s[a+1:b] + s[a] + s[b+1:]\ndef length_of_last_word(s):\n    '''\n    Write a function that takes in a string and returns the length of the last word in the string.\n    '''\n    return len(s.split()[-1])\ndef count_words(s):\n    '''\n    Write a function that takes in a string and returns the number of words in that string.\n    '''\n    return len(s.split())\ndef add_spaces(s):\n    '''\n    Write a function that takes in a string and returns a string with that string's letters in reverse order.\n    '''\n    return s[::-1]\ndef unique_english_letters(s):\n    '''\n    Write a function that takes in a string and returns a boolean indicating whether the string has all unique characters.\n    '''\n    return len(s) == len(set(s))\ndef get_rounds(n):\n    '''\n    Write a function that takes in a string of digits and returns the number of rounds that the string would need to loop to produce a string of unique characters.\n    '''\n    current_round = 1\n    max_round = 0\n    while True:\n        if len(set(str(current_round * n))) == 4:\n            max_round = current_round\n            break\n        else:\n            current_round += 1\n    return max_round\ndef get_size(s):\n    '''\n    Write a function that takes in a string and returns the size of the string.\n    '''\n    return len(s)\ndef same_first_last(s):\n    '''\n    Write a function that takes in a string and returns a boolean indicating whether the first and last characters are the same.\n    '''\n    return s[0] == s[-1]\ndef max_number_of_consecutive_summers(nums):\n    '''\n    Write a function that takes in a list of integers and returns the number of integers that are the sum of consecutive integers.\n    '''\n    max_count = 0\n    current_count = 0\n    for num in nums:\n        if current_count == 0:\n            current_count = 1\n        if num == sum(nums[current_count:current_count+2]):\n            current_count += 1\n        else:\n            max_count = max(max_count, current_count)\n            current_count = 1\n    return max(max_count, current_count)\ndef convert_to_base_ten(s, base):\n    '''\n    Write a function that takes i"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = {}\n    for x in dict:\n        if(dict[x]>=n):\n            d[x] = dict[x]\n    return d\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key in dict:\n        if n >= dict[key]:\n            print(key,dict[key])\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    result = 0\n    for x in test_tup[1:]:\n        if test_tup[0] < x:\n            result += 1\n    return result\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup = test_tup[0]\n    for i in range(1,len(test_tup)):\n        count = 0\n        for j in range(len(tup)):\n            if tup[j] == test_tup[i][j]:\n                count += 1\n        print count\n        tup = tup[count:]\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) < 1:\n        return 0\n    for idx, val in enumerate(test_tup):\n        if val in test_tup[:idx]:\n            return idx\n    return len(test_tup)\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return sum(1 for elem in test_tup if elem == test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            pass\n        else:\n            if test_tup[i-1] == test_tup[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    new_tup = (sorted(test_tup, reverse=True))\n    new_tup = (tuple(new_tup))\n    counter = 0\n    for i in range(len(test_tup)):\n        if new_tup[i] == test_tup[i]:\n            counter += 1\n        else:\n            break\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return 0\n    else:\n        return len(test_tup[:test_tup.index(tuple(test_tup[1:]))])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            n = n + 1\n        else:\n            break\n    return n\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    total = 0\n    for x in test_tup:\n        if x == 1:\n            total += 1\n    return total\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    result = 0\n    for i in range(n):\n        result += pow(n - i, 2)\n    return result\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(n):\n        num += ((-1)**i)*(i*(i+1)*(2*i+1))/((2*i+1)*(3*i+2))\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return sum(range(1, n*2))%10 == n\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    diagonal = 1\n    for i in range(1,n):\n        diagonal += i * 10\n        diagonal += i * 10\n    return diagonal\n    \ndef is_num_lucas(n): \n    '''\n    Write a function to find the nth Lucas number.\n    '''\n    lucas = [1,2]\n    for i in range(1, n):\n        lucas.append(lucas[-1] + lucas[-2])\n    return lucas[-1]\n    \ndef is_num_eratosthenes(n): \n    '''\n    Write a function to find the nth prime number.\n    '''\n    all_primes = [True] * (n + 1)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if all_primes[i]:\n            for j in range(i * 2, n + 1, i):\n                all_primes[j] = False\n    return all_primes.count(True)\n    \ndef is_num_genomic_intervals(s, t): \n    '''\n    Write a function to find the number of non-overlapping 1-length intervals within a genome.\n    '''\n    total = 0\n    current = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            current += 1\n        else:\n            total += (current - 1)\n            current = 0\n    total += current\n    return total\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # This function is used to find the nth decagonal number\n    # Given a positive integer n, return the nth decagonal number.\n    #  In a decagonal number, each triangular number (i) + \n    #  each square number (i^2) + each pentagonal number (i^3) \n    #  + each hexagonal number (i^4) + each heptagonal number (i^5) \n    #  is divisible by i. \n    # Note that 1, 4, 9, 16, 25,... are the triangular numbers,\n    #  and 1, 4, 9, 16, 25,... are the square numbers.\n    #  Furthermore, 1, 6, 15, 28, 45,... are the pentagonal \n    #  numbers, and 1, 6, 15, 28, 45,... are the hexagonal \n    #  numbers.\n    #  Furthermore, 1, 8, 27, 64, 125,... are the heptagonal \n    #  numbers, and 1, 8, 27, 64, 125,... are the heptagonal \n    #  numbers.\n    #  The formula to compute the nth decagonal number is:\n    #  (n + 1) * (n + 2) *... * (n + n), where n is the position \n    #  of the nth decagonal number.\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x = 0\n    c = 0\n    while c <= n:\n        x += 1\n        c = sum([int(y) for y in str(x*(x+1)/2)])\n    if c == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1: return 1\n    if n == 2: return 10\n    if n == 3: return 100\n    \n    prev = 0\n    curr = 0\n    count = 1\n    while count <= n:\n        curr = count*(count + 1) / 2\n        if count % 2 == 0:\n            prev += curr\n        else:\n            curr -= prev\n        count += 1\n    return curr\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n % 2!= 0:\n        return False\n    if n < 10:\n        return True\n    d1 = 10 - (n % 10)\n    d2 = (n // 10) - 1\n    d3 = n // 100\n    return is_num_decagonal(d1 + d2 + d3)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    d1, d2, d3 = 1, 1, 1\n    for i in range(3, n+1):\n        d1, d2, d3 = d2, d3, d3 + 2*d1\n    return d3\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_list = [1, 10, 105, 1005, 1015, 1015, 1020, 1020, 1020, 1025, 1025, 1025, 1030, 1030, 1030, 1035, 1035, 1035, 1040, 1040, 1040, 1045, 1045, 1045, 1050, 1050, 1050, 1055, 1055, 1055, 1060, 1060, 1060, 1065, 1065, 1065, 1070, 1070, 1070, 1075, 1075, 1075, 1080, 1080, 1080, 1085, 1085, 1085, 1090, 1090, 1090, 1095, 1095, 1095, 1100, 1100, 1100, 1105, 1105, 1105, 1110, 1110, 1110, 1125, 1125, 1125, 1130, 1130, 1130, 1135, 1135, 1135, 1140, 1140, 1140, 1145, 1145, 1145, 1150, 1150, 1150, 1155, 1155, 1155, 1160, 1160, 1160, 1165, 1165, 1165, 1170, 1170, 1170, 1175, 1175, 1175, 1180, 1180, 1180, 1185, 1185, 1185, 1190, 1190, 1190]\n    return n in dec_list\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # for i in range(len(dlist)):\n    #     if item == dlist[i]:\n    #         return True, i\n    # return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    idx = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            idx = i\n            break\n    return (found, idx)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    idx = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            idx = i\n            break\n    return (idx!= -1, idx)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(0, len(dlist)):\n        if item == dlist[i]:\n            index = i\n            break\n    return (index, index!= -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    # Python's bisect module has a nice list of functions that's useful to use\n    # but it's not a very good search algorithm.\n    # todo: try to optimize this one\n    if dlist == []:\n        return False, -1\n    if dlist[0] == item:\n        return True, 0\n    return sequential_search(dlist[1:], item)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    found = False\n    while position < len(dlist) and not found:\n        if dlist[position] == item:\n            found = True\n        else:\n            position = position + 1\n    return (found, position)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    idx = 0\n    for item in dlist:\n        if item == item:\n            found = True\n            idx = dlist.index(item)\n            break\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    i = 0\n    while i < len(dlist) and not found:\n        if dlist[i] == item:\n            found = True\n        i += 1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    i = 0\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    if len(unique_list) == len(test_list):\n        print(\"All elements are unique\")\n    else:\n        print(\"There are duplicates\")\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n    \ndef find_max_consecutive_ones(arr):\n    '''\n    Write a python function to find the maximum consecutive 1's in a given list\n    '''\n    max_count = 0\n    current_count = 0\n    \n    for num in arr:\n        if num == 1:\n            current_count += 1\n        else:\n            max_count = max(max_count, current_count)\n            current_count = 0\n            \n    return max(max_count, current_count)\n    \ndef check_palindrome(str_obj):\n    '''\n    Write a python function to check if a given string is a palindrome or not\n    '''\n    return str_obj == str_obj[::-1]\n    \ndef remove_character(str_obj, remove_char):\n    '''\n    Write a python function to remove a character from a string\n    '''\n    return str_obj.replace(remove_char,'', 1)\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n    \n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    s = set()\n    for i in test_list:\n        if i in s:\n            return False\n        else:\n            s.add(i)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    all_unique_list = True\n    return all_unique_list\ndef all_unique2(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            all_unique_list = False\n            return all_unique_list\n        else:\n            unique_list.append(x)\n            all_unique_list = True\n            return all_unique_list\ndef all_unique3(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            return False\n        else:\n            unique_list.append(x)\n            return True\ndef all_unique4(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            return False\n        else:\n            unique_list.append(x)\n            return True\ndef all_unique5(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            pass\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique6(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        unique_list.append(x)\n    return unique_list\ndef all_unique7(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            pass\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique8(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique9(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique10(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique11(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique12(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique13(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique14(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique15(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique16(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique17(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique18(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique19(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique20(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique21(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique22(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            unique_list.remove(x)\n        else:\n            unique_list.append(x)\n    return unique_list\ndef all_unique23(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False\n        \ndef check_permutation(str1, str2):\n    '''\n    Write a python function to check if the two given strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        test_set = set(str1)\n        if len(test_set) == len(str1):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in test_list:\n        if i in test_list:\n            unique = False\n            break\n    if unique:\n        print \"True\"\n    else:\n        print \"False\"\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if len(nums1) > len(nums2):\n        big = nums1\n        small = nums2\n    else:\n        big = nums2\n        small = nums1\n    result = []\n    # iterate over the smaller list\n    for i in xrange(len(small)):\n        if i < len(big):\n            if big[i] == small[i]:\n                continue\n            else:\n                result.append(big[i])\n        else:\n            result.append(big[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1-num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in nums1:\n        if i in nums2:\n            result.append(i)\n    for i in nums2:\n        if i not in result:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    output = []\n    for i in range(len(nums1)):\n        output.append(nums1[i] - nums2[i])\n    return output\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert len(nums1) == len(nums2), 'unmatching length'\n    if len(nums1) < 1:\n        return []\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if not nums1 or not nums2:\n        return []\n    else:\n        return [nums1[i]-nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in xrange(len(nums1)):\n        nums1[i] -= nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1-num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 10:\n        return 1\n    if n % 10 == 0:\n        return 0\n    return validate(n//10) + validate(n%10)\ndef digit_counts_on_right(n):\n    '''\n    Given an integer n, return the number of ways you can represent n as a sum of right-most digits in a new integer. \n    '''\n    if n < 10:\n        return 1\n    if n % 10 == 0:\n        return 0\n    return digit_counts_on_right(n // 10) + digit_counts_on_right(n % 10)\ndef maximum_gold(n):\n    '''\n    A gold mine grid is represented by a 2-D array of integers. Each grid contains the number of gold in that square.\n    Starting from the left top corner, you can only go right or down.\n    You may assume the following rules:\n    You can't visit the same cell more than once.\n    You can visit the empty cells (0) you can't visit.\n    The sum of the numbers along your path is maximal.\n    Return the length of the longest path with maximal sum.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return max(maximum_gold(n-1),maximum_gold(n-2)) + maximum_gold(n)\ndef longest_common_sequence(s1,s2):\n    '''\n    Given two strings s1 and s2, find the longest common substring. \n    You may assume that there is no repeated characters in both strings.\n    '''\n    if len(s1) < len(s2):\n        return longest_common_sequence(s2,s1)\n    if len(s2) == 0:\n        return ''\n    if s1[0] == s2[0]:\n        return s1[0] + longest_common_sequence(s1[1:],s2[1:])\n    else:\n        return longest_common_sequence(s1,s2[1:])\ndef common_suffix(s1,s2):\n    '''\n    Write a function to find the longest common suffix of two strings.\n    '''\n    if len(s1) < len(s2):\n        return common_suffix(s2,s1)\n    if len(s2) == 0:\n        return ''\n    if s1[-1] == s2[-1]:\n        return s1[-1] + common_suffix(s1[:-1],s2[:-1])\n    else:\n        return common_suffix(s1,s2[:-1])\ndef longest_substring(s1,s2):\n    '''\n    Write a function to find the longest common substring of two strings.\n    '''\n    if len(s1) < len(s2):\n        return longest_substring(s2,s1)\n    if len(s2) == 0:\n        return ''\n    if s1[-1] == s2[-1]:\n        return s1[-1] + longest_substring(s1[:-1],s2[:-1])\n    else:\n        return longest_substring(s1,s2[:-1])\ndef str_rotation(s1,s2):\n    '''\n    Given two strings, check whether the characters in the first string can be rearranged to form the second string.\n    '''\n    if len(s1) < len(s2):\n        return str_rotation(s2,s1)\n    if len(s2) == 0:\n        return True\n    if len(s1) == 0:\n        return False\n    if s1[0] == s2[0]:\n        return str_rotation(s1[1:],s2[1:])\n    else:\n        return str_rotation(s1,s2[1:])\ndef count_of_longest_increase_subseq(seq):\n    '''\n    Write a function that takes in a non-empty array of integers and returns the length of the longest increasing subsequence.\n    The subsequence does not necessarily have to be contiguous. \n    For example, given [10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence has length 4\n    '''\n    if len(seq) == 0:\n        return 0\n    return 1 + count_of_longest_increase_subseq(seq[1:]) if seq[0] < seq[1] else 1 + count_of_longest_increase_subseq(seq[1:])\ndef get_longest_increasing_subsequence(arr):\n    '''\n    Write a function that takes in a non-empty array of integers and returns an array of length 2 that contains the first and last indexes of the longest increasing subsequence in the array.\n    The sequence does not necessarily have to be contiguous. \n    For example, given [10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence has length 4, and the longest increaseing subsequence is [2,3,7,101]\n    '''\n    if len(arr) == 0:\n        return []\n    res = [0,1]\n    for i in xrange(1,len(arr)):\n        if arr[i] > arr[res[1]]:\n            res = [i,i]\n        elif arr[i] > arr[res[0]]:\n            res[1] = i\n    return res\ndef two_sum(arr, target):\n    '''\n    Given an array of integers and a target integer, find two integers in the array whose sum is equal to the target.\n    '''\n    if len(arr) < 2:\n        return []\n    h = {}\n    for i in xrange(len(arr)):\n        if arr[i] in h:\n            return [h[arr[i]],i]\n        else:\n            h[target - arr[i]] = i\n    return []\ndef swap_nodes(node):\n    '''\n    Given a binary tree, swap every two adjacent nodes and return the new root of the modified tree.\n    '''\n    if not node:\n        return []\n    node.left,node.right = node.right,node.left\n    if node.left:\n        swap_nodes(node.left)\n    if node.right:\n        swap_nodes(node.right)\n    return node\ndef reverse_level_order(root):\n    '''\n    Given a binary tree, reverse the level order traversal (ie, from left to right, then right to left) of the tree.\n    '''\n    if not root:\n        return []\n    res = []\n    queue = [root]\n    while queue:\n        node = queue.pop(0)\n        res.append(node)\n        if node.left:\n            queue.append(node.left)\n        if node.right:\n            queue.append(node.right)\n    return res[::-1]\ndef compare_nodes(n1,n2):\n    '''\n    Given two binary trees, compare them in order and return true if they are equal.\n    '''\n    if not n1 and not n2:\n        return True\n    if not n1 or not n2:\n        return False\n    if n1.val!= n2.val:\n        return False\n    return compare_nodes(n1.left,n2.left) and compare_nodes(n1.right,n2.right)\ndef find_successor(root):\n    '''\n    Given a binary tree, find the in-order successor of a given node in the tree.\n    '''\n    if not root:\n        return None\n    if not root.right:\n        return root.left\n    else:\n        return find_successor(root.right)\ndef max_depth(root):\n    '''\n    Given a binary tree, find its maximum depth. \n    '''\n    if not root:\n        return 0\n    return 1 + max(max_depth(root.left),max_depth(root.right))\ndef right_view(root):\n    '''\n    Given a binary tree, return the nodes in its right view. \n    '''\n    if not root:\n        return []\n    queue = [root]\n    res = []\n    while queue:\n        node = queue.pop(0)\n        res.appen"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"%s is not an integer\"%n)\n    if n < 0:\n        raise ValueError(\"%s is negative\"%n)\n    \n    for x in str(n):\n        if not isinstance(x,int):\n            raise TypeError(\"%s is not an integer\"%x)\n    \n    for x in str(n):\n        if x>=10:\n            raise ValueError(\"%s is not less than 10\"%x)\n        else:\n            pass\n    \n    if len(str(n))==1:\n        return 1\n    else:\n        pass\n    \n    if len(str(n)) == 0:\n        return 1\n    else:\n        pass\n    \n    if len(str(n)) == 1:\n        return 1\n    else:\n        pass\n    \n    if len(str(n)) == 2:\n        return 1\n    else:\n        pass\n    \n    if len(str(n)) == 3:\n        return 1\n    else:\n        pass\n    \n    if len(str(n)) == 4:\n        return 1\n    else:\n        pass\n    \n    if len(str(n)) == 5:\n        return 1\n    else:\n        pass\n    \n    if len(str(n)) == 6:\n        return 1\n    else:\n        pass\n    \n    if len(str(n)) == 7:\n        return 1\n    else:\n        pass\n    \n    if len(str(n)) == 8:\n        return 1\n    else:\n        pass\n    \n    if len(str(n)) == 9:\n        return 1\n    else:\n        pass\n    \n    if len(str(n)) == 10:\n        return 1\n    else:\n        pass\n    \n    return 0\n    "
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    n_map = {}\n    for d in n:\n        if d not in n_map:\n            n_map[d] = 1\n        else:\n            n_map[d] += 1\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if (n == 0):\n        return True\n    while (n!= 0):\n        i = n % 10\n        if (i > n/10):\n            return False\n        n = n/10\n    return True\ndef findFrequentDigit(n):\n    if (validate(n)):\n        return n\n    if (n == 0):\n        return 0\n    if (n < 0):\n        n = -n\n    s = str(n)\n    l = len(s)\n    count = [0] * 10\n    for i in range(0, l):\n        count[int(s[i])] += 1\n    maxCount = max(count)\n    for i in range(0, 10):\n        if (count[i] == maxCount):\n            return i\n    return -1\n    \nn = int(raw_input().strip())\nresult = findFrequentDigit(n)\nprint(result"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0] * 10\n    while n:\n        count[n%10] += 1\n        n /= 10\n    for i in xrange(10):\n        if count[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    l = []\n    dic = {}\n    for i in range(10):\n        dic[str(i)] = 0\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return len(set(str(n))) == len(str(n))\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    string = str(n)\n    d = {'1':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0}\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = n\n    if num<0:\n        num = -num\n    s = str(num)\n    digit = dict()\n    for c in s:\n        if c in digit:\n            digit[c] += 1\n        else:\n            digit[c] = 1\n    for d,v in digit.iteritems():\n        if v > int(d):\n            return False\n    return True\n    \n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    d = {'0':0, '1':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0}\n    for i in n:\n        d[i] += 1\n    for i in d:\n        if d[i] > d[i]:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all([i==element for i in list])\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return list.count(element)==len(list)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n    \n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if not list:\n        return False\n    if list[0] == element:\n        return True\n    return check_element(list[1:],element)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return len(list)==len(set(list))\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab*')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_with_condition(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = re.compile(r'.*(ab|aba|abb|bab|bba|bbb).*')\n    if regex.match(text):\n        return True\n    else:\n        return False\n    \ndef text_match_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    regex = re.compile(r'.*(abab|aba|abb|baba|abbb|bab|bba).*')\n    if regex.match(text):\n        return True\n    else:\n        return False\n    \ndef text_match_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    regex = re.compile(r'.*(abaa|aba|abbb|baba|abb|bbaa|bbb).*')\n    if regex.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{2}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{2,3}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{3}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{4}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{5}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{6}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{7}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{8}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{9}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{10}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{11}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{12}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_thirteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{13}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_fourteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{14}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_fifteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{15}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_sixteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{16}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_seventeen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{17}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_eighteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{18}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_nineteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{19}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_twenty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{20}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_twenty_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{21}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_twenty_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{22}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_twenty_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{23}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_twenty_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{24}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_twenty_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{25}b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_three_twenty_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_list(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_list(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_list(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_list(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict_list(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict_dict(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict_dict_list(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict_dict_dict(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict_dict_dict_list(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict_dict_dict_dict(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict_dict_dict_dict_list(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict_dict_dict_dict_dict(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict_dict_dict_dict_dict_list(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_list(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_list(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_list(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_list(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}',text))\ndef text_match_two_three_dict_list_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_list(text):\n    '''\n    Write a function that checks whether a strin"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}', text))\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab+',text))\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef test_text_match_two_three():\n    assert text_match_two_three('ab') == True\n    assert text_match_two_three('abb') == True\n    assert text_match_two_three('abbb') == True\n    assert text_match_two_three('ababb') == True\n    assert text_match_two_three('ababbb') == True\n    assert text_match_two_three('abababb') == True\n    assert text_match_two_three('abababa') == True\n    assert text_match_two_three('aba') == False\n    assert text_match_two_three('abaaab') == False\n    assert text_match_two_three('b') == False\n    assert text_match_two_three('ba') == False\n    assert text_match_two_three('baa') == False\n    assert text_match_two_three('baba') == False\n    assert text_match_two_three('bbb') == False\n    assert text_match_two_three('bbbb') == False\n    assert text_match_two_three('abb') == False\n    assert text_match_two_three('ba') == False\n    assert text_match_two_three('abbb') == False\n    assert text_match_two_three('abbbbbbb') == False\n    assert text_match_two_three('baaabbbbaaabbb') == False\n    assert text_match_two_three('baaabbbaaabbb') == True\n    assert text_match_two_three('babab') == False\n    assert text_match_two_three('bbaabb') == False\n    assert text_match_two_three('bbaabbbaab') == False\n    assert text_match_two_three('bbaab') == False\n    assert text_match_two_three('ba') == False\n    assert text_match_two_three('ab') == False\n    assert text_match_two_three('abbbba') == False\n    assert text_match_two_three('baabaaab') == False\n    assert text_match_two_three('baaabbbbaaabbb') == False\n    assert text_match_two_three('baaabbbbaaaaba') == True\n    assert text_match_two_three('baaabaaabaabbbbaaabbbbaaaaba') == True\n    assert text_match_two_three('baaaabbbbaaaaba') == True\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbaaaaba') == True\n    assert text_match_two_three('baaaabbbaaaabbbaaabbbbaaaaba') == False\n    assert text_match_two_three('baaabaaabaabbbbaaabbbbaaaaba') == False\n    assert text_match_two_three('baaaabaaabaabbbbbbaabbbaaaaba') == False\n    assert text_match_two_three('baaaabaaabaabbbbbbaabbbaaaaba') == True\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == True\n    assert text_match_two_three('baaabbbaaababbbaaabbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbaaaaba') == True\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == True\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == True\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbbaaababbbaaabbbbbbaaaaba') == False\n    assert text_match_two_three('baaaabbb"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'ab' in text:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}',text):\n        print('Match Found')\n    else:\n        print('Match Not Found')\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if not a or not k or k < 1:\n        return 0\n    max_k_sum = [0 for _ in range(k)]\n    max_k_sum[0] = a[0]\n    max_k_sum[1] = max(a[0], a[1])\n    for i in range(2, k):\n        max_k_sum[i] = max(max_k_sum[i-1], max_k_sum[i-2] + a[i])\n    return max_k_sum[k-1]\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -1\n    if n < k:\n        return max_sum\n    for i in range(k):\n        max_sum = max(max_sum, sum(a))\n        a.insert(0,a.pop())\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    total = 0\n    for i in range(k):\n        total += max_sub_array(a, n)\n    return total\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    m = len(a)\n    r = n%k\n    n = n//k\n    sum = 0\n    c = 0\n    for i in range(m):\n        sum += a[i]\n        if i%n == 0:\n            c += 1\n            sum = 0\n    if c < k:\n        return max(a)\n    else:\n        return sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    max_ending_here = 0\n    start = 0\n    end = 0\n    for i in range(0, n):\n        max_ending_here = max_ending_here + a[i]\n        if (i > k - 1):\n            start = i - k + 1\n            end = i\n            max_sum = max(max_sum, max_ending_here)\n            max_ending_here = max_ending_here - a[start]\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(a)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    curr_sum = max_sum = a[0]\n    for i in range(1,n):\n        if curr_sum < 0:\n            curr_sum = 0\n        curr_sum += a[i]\n        if i % k == 0:\n            if max_sum < curr_sum:\n                max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if k == 1:\n        return max(a)\n    \n    if n == 0:\n        return 0\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # TLE\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_sum = -999999\n    #initialize the result array to -1\n    result = [-1 for i in range(k)]\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n + 1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return int(n*(n+1)*0.5)\n    \ndef Evens(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of first n even natural numbers.\n    '''\n    return int(n*0.5)\n    \ndef Even_Factorial(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of first n even natural numbers and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5)]) + (n*(n+1)*0.5)\n    \ndef Even_Factorial_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_2(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5)])\n    \ndef Even_Factorial_Sum_3(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_4(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5)])\n    \ndef Even_Factorial_Sum_5(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_6(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5)])\n    \ndef Even_Factorial_Sum_7(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_8(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_9(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_10(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_11(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_12(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_13(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_14(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_15(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_16(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_17(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_18(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_19(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_20(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_21(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*0.5) if int(i)%2==0])\n    \ndef Even_Factorial_Sum_22(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the even number in n and the factorial of each number.\n    '''\n    return sum("
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n**2 + square_Sum(n - 2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            total += i*i\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(x**2 for x in range(2, n, 2))\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i**2 for i in range(n) if i%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sq_sum = 0\n    for i in range(n):\n        sq_sum += (i+1)*(i+2)\n    return sq_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n*(n+1)*n/2\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    return sum([i*i for i in range(n) if i%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(2,n+1,2):\n        result = result + (i**2)\n    return result\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return 0\n    max_length = 0\n    for i in range(len(list1)):\n        max_length = max(max_length, len(list1[i]))\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = [len(l) for l in list1]\n    return lengths\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = []\n    for list in list1:\n        if len(list) == len(max(list1, key = len)):\n            result.append(list)\n    return result\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # if max_length < len(list1):\n    #     max_length = len(list1)\n    #     return list1\n    # else:\n    #     return max_length\n    return max(max_length(i) for i in list1)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlen = 0\n    result = []\n    for l in list1:\n        if len(l) > maxlen:\n            maxlen = len(l)\n    for l in list1:\n        if len(l) == maxlen:\n            result.append(l)\n    return result\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlen = 0\n    maxlenlist = []\n    for i in list1:\n        if len(i) > maxlen:\n            maxlen = len(i)\n    for i in list1:\n        if len(i) == maxlen:\n            maxlenlist.append(i)\n    return maxlenlist\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maximum = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > maximum:\n            maximum = len(list1[i])\n    return maximum\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=0\n    for a_list in list1:\n        if len(a_list)>max_len:\n            max_len=len(a_list)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=len(list1[0])\n    for i in list1:\n        if len(i)>max_len:\n            max_len=len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return k\n    else:\n        return (count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k))\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Make a list of size k, each element as 0\n    count = [0] * k\n    \n    # Initialize the last element as 1\n    count[k - 1] = 1\n    \n    # Now, for each element, count the ways to get to that element,\n    # i.e., count[j] is the ways to get to element j.\n    for j in range(k - 1):\n        # Since we have already counted the ways to get to j-1, we can\n        # use that to get to j\n        count[j] = count[j - 1] + count[j]\n    \n    # Now, we have ways to get to all elements. Let us now get to the nth element\n    for j in range(n - k + 1):\n        # For each element, count the ways to get to it from the j-1th element\n        count[j] += count[j - 1]\n    \n    return count[n - 1]\n    \n    \ndef test_function(test_case):\n    n, k = test_case[0], test_case[1]\n    solution = count_no_of_ways(n, k)\n    if solution == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    memo = {}\n    def count_no_of_ways_rec(n, k):\n        if n == 0:\n            return 1\n        if (n, k) in memo:\n            return memo[(n, k)]\n        memo[(n, k)] = count_no_of_ways_rec(n-1, k) + count_no_of_ways_rec(n-2, k)\n        return memo[(n, k)]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k < 0:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    memo = {}\n    return count_no_of_ways_rec(n, k, 1, memo)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [0] * (k+1)\n    ways[0] = 1\n    for i in range(1,n+1):\n        for j in range(k+1):\n            if j >= 1 and i-j >= 0:\n                ways[j] += ways[j-1]\n            elif j == 0:\n                ways[j] += 1\n    return ways[k]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # if n == 0:\n    #     return 1\n    # elif n < 0:\n    #     return 0\n    # else:\n    #     return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)\n    # if n == 0:\n    #     return 1\n    # else:\n    #     return count_no_of_ways(n - 1, k)\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_no_of_ways_helper(n, k, 0, 0, {})\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return k\n    elif (k == 1):\n        return 1\n    else:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    if k == 0:\n        return 0\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n/m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    n=str(n)\n    m=str(m)\n    while True:\n        if len(n)<len(m):\n            n=n+'0'\n        elif len(n)>len(m):\n            m=m+'0'\n        else:\n            break\n    if len(n)>len(m):\n        for i in range(len(n)-len(m)):\n            m='0'+m\n    ans=str(int(n)/int(m))\n    return ans\ndef isPalindrome(n):\n    n=str(n)\n    for i in range(len(n)//2):\n        if n[i]!=n[len(n)-i-1]:\n            return False\n    return True\ndef findDigits(n):\n    '''\n    Write a python function to return the count of digits in a number.\n    '''\n    count=0\n    n=str(n)\n    for i in n:\n        if i.isdigit():\n            count+=1\n    return count\ndef findFactors(n):\n    '''\n    Write a python function to find the factors of a number.\n    '''\n    factors=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            factors.append(i)\n    return factors\ndef isPrime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    elif n==2 or n==3:\n        return True\n    elif n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef isValid(s):\n    '''\n    Write a python function to check whether a string is valid or not.\n    '''\n    s=s.lower()\n    if len(s)<1:\n        return False\n    for i in s:\n        if not i.isalpha():\n            return False\n    return True\ndef isValidWord(word):\n    '''\n    Write a python function to check whether a word is valid or not.\n    '''\n    for i in word:\n        if i.isalpha():\n            return True\n    return False\ndef isPermutation(n,m):\n    '''\n    Write a python function to check whether two numbers are permutations of each other or not.\n    '''\n    return sorted(str(n))==sorted(str(m))\ndef countCharacters(s):\n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    count=0\n    for i in s:\n        count+=1\n    return count\ndef isValidParentheses(s):\n    '''\n    Write a python function to check whether a string is valid or not.\n    '''\n    if s[0]=='(' and s[-1]==')':\n        stack=[]\n        for i in s:\n            if i=='(':\n                stack.append('(')\n            elif i==')':\n                if len(stack)==0:\n                    return False\n                else:\n                    stack.pop()\n        if len(stack)==0:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef isValidBracket(s):\n    '''\n    Write a python function to check whether a string is valid or not.\n    '''\n    stack=[]\n    for i in s:\n        if i=='(' or i=='{' or i=='[':\n            stack.append(i)\n        elif i==')':\n            if len(stack)>0 and stack[-1]=='(':\n                stack.pop()\n            else:\n                return False\n        elif i==']':\n            if len(stack)>0 and stack[-1]=='[':\n                stack.pop()\n            else:\n                return False\n        elif i=='}':\n            if len(stack)>0 and stack[-1]=='{':\n                stack.pop()\n            else:\n                return False\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef findLongestWord(s):\n    '''\n    Write a python function to find the longest word in a string.\n    '''\n    words=s.split(' ')\n    words=[word for word in words if len(word)>0]\n    return max(words,key=len)\ndef findMissing(l):\n    '''\n    Write a python function to find the missing number in a list.\n    '''\n    ans=[]\n    for i in range(1,max(l)+2):\n        if i not in l:\n            ans.append(i)\n    return ans\ndef findMissingWithSieve(l):\n    '''\n    Write a python function to find the missing number in a list.\n    '''\n    sieve=[True for i in range(max(l)+1)]\n    for i in l:\n        sieve[i]=False\n    sieve[0]=False\n    sieve[1]=False\n    for i in range(2,max(l)+1):\n        if sieve[i]:\n            if i not in l:\n                return i\ndef findMissingWithXOR(l):\n    '''\n    Write a python function to find the missing number in a list.\n    '''\n    l=[i for i in range(1,max(l)+1)]\n    for i in l:\n        l[i-1]^=i\n    for i in range(len(l)):\n        if l[i]!=i+1:\n            return i+1\ndef findMissingWithXOR(l):\n    '''\n    Write a python function to find the missing number in a list.\n    '''\n    l=[i for i in range(1,max(l)+1)]\n    for i in l:\n        l[i-1]^=i\n    for i in range(len(l)):\n        if l[i]!=i+1:\n            return i+1\ndef findMissingWithXOR(l):\n    '''\n    Write a python function to find the missing number in a list.\n    '''\n    l=[i for i in range(1,max(l)+1)]\n    for i in l:\n        l[i-1]^=i\n    for i in range(len(l)):\n        if l[i]!=i+1:\n            return i+1\ndef findMissingWithXOR(l):\n    '''\n    Write a python function to find the missing number in a list.\n    '''\n    l=[i for i in range(1,max(l)+1)]\n    for i in l:\n        l[i-1]^=i\n    for i in range(len(l)):\n        if l[i]!=i+1:\n            return i+1\ndef isBinaryString(s):\n    '''\n    Write a python function to check whether a string is binary or not.\n    '''\n    if len(s)<1:\n        return False\n    for i in s:\n        if i!='0' and i!='1':\n            return False\n    return True\ndef isUnique(s):\n    '''\n    Write a python function to check whether a string is unique or not.\n    '''\n    if len(s)>len(set(s)):\n        return False\n    else:\n        return True\ndef findLongestPalindrome(s):\n    '''\n    Write a python function to find the longest palindrome in a string.\n    '''\n    if len(s)<2:\n        return s\n    else:\n        for i in range(len(s)-1):\n            if s[i]==s[i+1]:\n                s1=s[i]+findPalindrome(s[i+2:])+s[i]\n                if len(s1)>len(s):\n                    return s1\n                else:\n                    return s\ndef findPalindrome(s):\n    '''\n    Write a python function to find a palindrome in a string.\n    '''\n    if len("
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    elif m == 0:\n        return float('inf')\n    elif n > m:\n        return find(n-m,m)\n    else:\n        return find(n,m-n) + 1\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return n\n    elif n>m:\n        return n/m\n    elif n<m:\n        return m/n\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n    \ndef div(n,m):  \n    '''\n    Write a python function to find remainder of two numbers (rounded up to the nearest integer).\n    '''\n    return n % m\n    \ndef abs_value(n):  \n    '''\n    Write a python function to get absolute value of a number.\n    '''\n    return abs(n)\n    \ndef gcd(n,m):  \n    '''\n    Write a python function to find GCD (Greatest common divisor) of two numbers.\n    '''\n    while m!= 0:\n        n, m = m, div(n,m)\n    return n\n    \ndef lcm(n,m):  \n    '''\n    Write a python function to find LCM (Least common multiple) of two numbers.\n    '''\n    return (n * m) // gcd(n,m)\n    \ndef binary_search(n,m):\n    '''\n    Write a python function to search for a number in a sorted array by repeatedly dividing the search interval in half.\n    If the value is greater than the search value, then the search interval is reduced to the right half.\n    If the value is less than the search value, then the search interval is reduced to the left half.\n    If the value is equal to the search value, then the search interval is reduced to the left or right half\n    until the value is found or the interval is empty.\n    '''\n    start = 0\n    end = len(n) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if n[mid] < m:\n            start = mid + 1\n        elif n[mid] > m:\n            end = mid - 1\n        else:\n            return True\n    return False\n    \ndef fibonacci(n):\n    '''\n    Write a python function to return the n-th number in the Fibonacci sequence.\n    '''\n    n_1 = 1\n    n_2 = 1\n    if n == 1:\n        return n_1\n    else:\n        for i in range(n - 1):\n            n_3 = n_1 + n_2\n            n_1 = n_2\n            n_2 = n_3\n    return n_1\n    \ndef odd_even(n):\n    '''\n    Write a python function to return the 1-based index of the odd/even number in a list.\n    '''\n    l = []\n    if n % 2 == 0:\n        return l.append(n - 1)\n    else:\n        return l.append(n)\n    \ndef get_pattern(n):\n    '''\n    Write a python function to return the n-th pattern for the following values of n:\n    '''\n    n = n\n    n_1 = 0\n    n_2 = 1\n    n_3 = 1\n    if n == 1:\n        return n_1\n    else:\n        for i in range(1, n):\n            n_4 = n_1 + n_2\n            n_1 = n_2\n            n_2 = n_4\n    return n_2\n    \ndef find_factors(n):\n    '''\n    Write a python function to return all the factors of a number.\n    '''\n    n = int(n)\n    return [ i for i in range(1, n + 1) if n % i == 0 ]\n    \ndef is_prime(n):\n    '''\n    Write a python function to return True if a number is prime, and False if it is not prime.\n    '''\n    n = int(n)\n    if n == 0 or n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef prime_factor(n):\n    '''\n    Write a python function to return all the prime factors of a number.\n    '''\n    n = int(n)\n    return [ i for i in range(2, n + 1) if n % i == 0 and is_prime(i) ]\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a python function to return True if two strings are anagrams, and False if they are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        return sorted(s1) == sorted(s2)\n    \ndef word_anagram(s1, s2):\n    '''\n    Write a python function to return True if two strings are anagrams, and False if they are not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef get_index(l, n):\n    '''\n    Write a python function to return the index of the first occurrence of an item in a list.\n    '''\n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    return -1\n    \ndef move_zeros(l):\n    '''\n    Write a python function to return a list with zeros moved to the end of the list.\n    '''\n    l = [ i for i in l if i!= 0 ]\n    l.extend([ 0 for i in range(len(l) - len(l)) ])\n    return l\n    \ndef count_triplets(arr, r):\n    '''\n    Write a python function to return the count of triplets (arri,arrj,arri) with |arri - arrj| = r, where i < j.\n    '''\n    count = 0\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == r:\n                count += 1\n    return count\n    \ndef sort_by_last_digit(l):\n    '''\n    Write a python function to return a sorted list where all the numbers have the same last digit.\n    '''\n    l = sorted(l)\n    return l\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to return True if a string is a palindrome, and False otherwise.\n    '''\n    if s == s[::-1]:\n        return True\n    return False\n    \ndef is_rotation(s1, s2):\n    '''\n    Write a python function to return True if s1 is a rotation of s2, and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        n = len(s1)\n        return s1[n - 1:] + s1[:n - 1] == s2\n    \ndef is_permutation(s1, s2):\n    '''\n    Write a python function to return True if s1 and s2 are permutations of each other, and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        return sorted(s1) == sorted(s2)\n    \ndef how_many_days(year, month):\n    '''\n    Write a python function to return the number of days in the month of a given year.\n    '''\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        return 31\n    else:\n        return 30\n    \ndef is_power(n):\n    '''\n    Write a python function to return True if n is a power of 2, and False otherwise.\n    '''\n    return log(n, 2) % 1 == 0\n    \ndef make_power(n):\n    '''\n    Write a python function to return the nth power of 2.\n    '''\n    return 1 << n\n    \ndef is_perfect(n):\n    '''\n    Write a python function to return True if n is a perfect number, and False otherwise.\n    '''\n    n = int(n)\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return True\n    else:\n        return False\n    \ndef is_factor(n, k):\n    '''\n    Write a python function to return True if k is a factor of n, and False otherwise.\n    '''\n    return n % k == "
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m > n:\n        return n//m\n    else:\n        return n//m + 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -(find(-n,m))\n    elif m == 0:\n        return None\n    elif n%m == 0:\n        return n/m\n    else:\n        return find(n,m-1)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n > m):\n        return int(n/m)\n    else:\n        return int(m/n)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    n1 = n\n    m1 = m\n    q = 0\n    while (n1 > m1):\n        n1 -= m1\n        q += 1\n    return q\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2)+(h**2))\ndef hypotenuse_of_three_angle(w,h):\n    '''\n    Write a function to find the hypotenuse of a right angled triangle.\n    '''\n    return math.sqrt((w**2)+(h**2))\ndef degree_of_three_angle(w,h):\n    '''\n    Write a function to find the degree of a right angled triangle.\n    '''\n    return math.degrees(math.asin(w/hypotenuse_of_three_angle(w,h)))\ndef perimeter_of_a_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2*math.pi*r\ndef area_of_a_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef temp_converter(degrees):\n    '''\n    Write a function that takes in a temperature in Celsius and converts it to Farenheit.\n    '''\n    return (degrees*9/5)+32\ndef distance_of_two_points(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points\n    '''\n    return math.sqrt((x1-x2)**2+(y1-y2)**2)\ndef volume_of_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere with radius r\n    '''\n    return 4/3*math.pi*r**3\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder with radius r and height h\n    '''\n    return math.pi*r**2*h\ndef surface_area_of_cube(s):\n    '''\n    Write a function to calculate the surface area of a cube with side s\n    '''\n    return 6*s**2\ndef surface_area_of_rect(w,h):\n    '''\n    Write a function to calculate the surface area of a rectangle with width w and height h\n    '''\n    return 2*w*h\ndef surface_area_of_parallelogram(b,h):\n    '''\n    Write a function to calculate the surface area of a parallelogram with base b and height h\n    '''\n    return b*h\ndef surface_area_of_triangle(w,h):\n    '''\n    Write a function to calculate the surface area of a triangle with base w and height h\n    '''\n    return w*h/2\ndef surface_area_of_circle(r):\n    '''\n    Write a function to calculate the surface area of a circle with radius r\n    '''\n    return math.pi*r**2\ndef volume_of_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere with radius r\n    '''\n    return 4/3*math.pi*r**3\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder with radius r and height h\n    '''\n    return math.pi*r**2*h\ndef surface_area_of_cube(s):\n    '''\n    Write a function to calculate the surface area of a cube with side s\n    '''\n    return 6*s**2\ndef surface_area_of_rect(w,h):\n    '''\n    Write a function to calculate the surface area of a rectangle with width w and height h\n    '''\n    return 2*w*h\ndef surface_area_of_parallelogram(b,h):\n    '''\n    Write a function to calculate the surface area of a parallelogram with base b and height h\n    '''\n    return b*h\ndef surface_area_of_triangle(w,h):\n    '''\n    Write a function to calculate the surface area of a triangle with base w and height h\n    '''\n    return w*h/2\ndef volume_of_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere with radius r\n    '''\n    return 4/3*math.pi*r**3\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder with radius r and height h\n    '''\n    return math.pi*r**2*h\ndef volume_of_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone with radius r and height h\n    '''\n    return math.pi*r**2*h/3\ndef volume_of_tetrahedron(s,h):\n    '''\n    Write a function to calculate the volume of a tetrahedron with side s and height h\n    '''\n    return s*h/4\ndef volume_of_right_triangle(w,h):\n    '''\n    Write a function to calculate the volume of a right triangle with base w and height h\n    '''\n    return w*h/2\ndef volume_of_octahedron(r):\n    '''\n    Write a function to calculate the volume of an octahedron with side r\n    '''\n    return 8/3*math.pi*r**3\ndef volume_of_icosahedron(r):\n    '''\n    Write a function to calculate the volume of an icosahedron with side r\n    '''\n    return math.pi*r**3/5\ndef volume_of_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere with radius r\n    '''\n    return 4/3*math.pi*r**3\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder with radius r and height h\n    '''\n    return math.pi*r**2*h\ndef volume_of_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone with radius r and height h\n    '''\n    return math.pi*r**2*h/3\ndef volume_of_tetrahedron(s,h):\n    '''\n    Write a function to calculate the volume of a tetrahedron with side s and height h\n    '''\n    return s*h/4\ndef volume_of_right_triangle(w,h):\n    '''\n    Write a function to calculate the volume of a right triangle with width w and height h\n    '''\n    return w*h/2\ndef volume_of_octahedron(r):\n    '''\n    Write a function to calculate the volume of an octahedron with side r\n    '''\n    return 8/3*math.pi*r**3\ndef volume_of_icosahedron(r):\n    '''\n    Write a function to calculate the volume of an icosahedron with side r\n    '''\n    return math.pi*r**3/5\ndef volume_of_pyramid(b,h):\n    '''\n    Write a function to calculate the volume of a pyramid with base b and height h\n    '''\n    return b*h/3\ndef volume_of_pyramid(b,h):\n    '''\n    Write a function to calculate the volume of a pyramid with base b and height h\n    '''\n    return b*h/3\ndef volume_of_pyramid(b,h):\n    '''\n    Write a function to calculate the volume of a pyramid with base b and height h\n    '''\n    return b*h/3\ndef volume_of_pyramid(b,h):\n    '''\n    Write a function to calculate the volume of a pyramid with base b and height h\n    '''\n    return b*h/3\ndef volume_of_pyramid(b,h):\n    '''\n    Write a function to calculate the volume of a pyramid with base b and height h\n    '''\n    return b*h/3\ndef volume_of_pyramid(b,h):\n    '''\n    Write a function to calculate the volume of a pyramid with base b and height h\n    '''\n    return b*h/3\ndef volume_of_pyramid(b,h):\n    '''\n    Write a function to calculate the volume of a pyramid with base b and heigh"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # w = float(w)\n    # h = float(h)\n    # angle = (w**2+h**2)**0.5/2\n    # angle = math.asin(w**2/2/h**2)\n    # return (h**2*math.sin(angle))**0.5\n    return (w**2 + h**2)**0.5/2\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**(1/2)\n    return s*2\n    \ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef otherside_righttriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef otherside_kite(a,b,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((a**2)+(b**2)+h**2)/2\ndef otherside_angle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2+c**2)\ndef otherside_angle3(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2+c**2)/2\ndef otherside_circular(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((r**2)+(h**2))\ndef otherside_circular2(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular3(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular4(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular5(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular6(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular7(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular8(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular9(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular10(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular11(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular12(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular13(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular14(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular15(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular16(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular17(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular18(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular19(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular20(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular21(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular22(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular23(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular24(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular25(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular26(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular27(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular28(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular29(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular30(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular31(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(r**2+h**2)/2\ndef otherside_circular32(r,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(w**2+h**2)**0.5\ndef otherside_opposite(w,h):\n    '''\n    Write a function to find the third side of an opposite angled triangle.\n    '''\n    return(w**2+h**2)**0.5\ndef otherside_hypotenuse(w,h):\n    '''\n    Write a function to find the third side of a hypothenuse triangle.\n    '''\n    return(w**2+h**2)**0.5\ndef otherside_hypotenuse_by_side(s1,s2):\n    '''\n    Write a function to find the third side of a hypothenuse triangle.\n    '''\n    return(s1**2+s2**2)**0.5\ndef otherside_sum_of_sides(s1,s2,s3):\n    '''\n    Write a function to find the third side of a hypothenuse triangle.\n    '''\n    return(s1+s2+s3)\ndef otherside_to_right(w,h,x):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if(x=='hypotenuse'):\n        return otherside_hypotenuse(w,h)\n    elif(x=='opposite'):\n        return otherside_opposite(w,h)\n    elif(x=='rightangle'):\n        return otherside_rightangle(w,h)\ndef otherside_to_right_by_side(s1,s2,x):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if(x=='hypotenuse'):\n        return otherside_hypotenuse_by_side(s1,s2)\n    elif(x=='opposite'):\n        return otherside_opposite(s1,s2)\n    elif(x=='rightangle'):\n        return otherside_rightangle(s1,s2)\ndef otherside_to_right_sum_of_sides(s1,s2,s3,x):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if(x=='hypotenuse'):\n        return otherside_hypotenuse_by_side(s1,s2,s3)\n    elif(x=='opposite'):\n        return otherside_opposite(s1,s2,s3)\n    elif(x=='rightangle'):\n        return otherside_rightangle(s1,s2,s3)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = 0\n    b = 0\n    c = 0\n    a = float(w)\n    b = float(h)\n    c = math.sqrt(a*a + b*b)\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)**0.5\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)**0.5\ndef area_of_circle(r):\n    return math.pi*(r**2)\ndef factor(n):\n    '''\n    Write a function to find the factorization of a number\n    '''\n    d={}\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            d[i]=0\n            n/=i\n            while n%i==0:\n                d[i]+=1\n                n/=i\n        i+=1\n    if n>1:\n        d[n]=1\n    return d\ndef to_binary(n):\n    '''\n    Write a function to convert a given number to a binary number\n    '''\n    d={}\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            d[i]=0\n            n/=i\n            while n%i==0:\n                d[i]+=1\n                n/=i\n        i+=1\n    if n>1:\n        d[n]=1\n    d=d.keys()\n    d.sort()\n    t=''\n    for i in d:\n        t=t+str(d[i])\n    return t\ndef to_octal(n):\n    '''\n    Write a function to convert a given number to an octal number\n    '''\n    d={}\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            d[i]=0\n            n/=i\n            while n%i==0:\n                d[i]+=1\n                n/=i\n        i+=1\n    if n>1:\n        d[n]=1\n    d=d.keys()\n    d.sort()\n    t=''\n    for i in d:\n        t=t+str(d[i])\n    return t\ndef to_hex(n):\n    '''\n    Write a function to convert a given number to a hex number\n    '''\n    d={}\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            d[i]=0\n            n/=i\n            while n%i==0:\n                d[i]+=1\n                n/=i\n        i+=1\n    if n>1:\n        d[n]=1\n    d=d.keys()\n    d.sort()\n    t=''\n    for i in d:\n        t=t+str(hex(d[i])[2:])\n    return t\ndef roman(n):\n    '''\n    Write a function to convert a given Roman numeral to its decimal equivalent.\n    '''\n    d={}\n    i=1\n    while i<=9:\n        d[str(i)]=i\n        i+=1\n    d['M']=1000\n    d['D']=500\n    d['C']=100\n    d['L']=50\n    d['X']=10\n    d['V']=5\n    d['I']=1\n    t=str(n)\n    t=t.upper()\n    t=t.replace('CM','')\n    t=t.replace('CD','')\n    t=t.replace('XC','')\n    t=t.replace('XL','')\n    t=t.replace('IX','')\n    t=t.replace('IV','')\n    t=t.replace('VV','')\n    t=t.replace('VI','')\n    t=t.replace('X','')\n    t=t.replace('L','')\n    t=t.replace('C','')\n    t=t.replace('D','')\n    t=t.replace('M','')\n    t=t.replace('U','')\n    t=t.replace('P','')\n    t=t.replace('V','')\n    t=t.replace('I','')\n    if len(t)==1:\n        return d[t]\n    t=t[1:]\n    t=t.replace('CM','')\n    t=t.replace('CD','')\n    t=t.replace('XC','')\n    t=t.replace('XL','')\n    t=t.replace('IX','')\n    t=t.replace('IV','')\n    t=t.replace('VV','')\n    t=t.replace('VI','')\n    t=t.replace('X','')\n    t=t.replace('L','')\n    t=t.replace('C','')\n    t=t.replace('D','')\n    t=t.replace('M','')\n    t=t.replace('U','')\n    t=t.replace('P','')\n    t=t.replace('V','')\n    t=t.replace('I','')\n    return d[t]+d[t[1:]]\ndef time_seconds(h,m,s):\n    '''\n    Write a function to convert hours, minutes and seconds to seconds.\n    '''\n    return 3600*h+60*m+s\ndef split_time(t):\n    '''\n    Write a function to split a time into hours, minutes and seconds\n    '''\n    h=int(t/3600)\n    t=t%3600\n    m=int(t/60)\n    s=t%60\n    return h,m,s\ndef how_many_years_to_save(r,e,i):\n    '''\n    Write a function to calculate how many years it will take to save for a given amount of money, interest and expenses.\n    '''\n    return math.log((e/r)+1,(1+(i/100)))\ndef number_to_string(n,base):\n    '''\n    Write a function to convert a number to a string in a particular base\n    '''\n    d={}\n    i=2\n    while i<=base:\n        d[str(i)]=i\n        i+=1\n    d['1']=10\n    d['2']=10\n    d['3']=100\n    d['4']=100\n    d['5']=1000\n    d['6']=1000\n    d['7']=100000\n    d['8']=100000\n    d['9']=1000000\n    d['A']=1000000\n    t=str(n)\n    t=t.upper()\n    t=t.replace('CM','')\n    t=t.replace('CD','')\n    t=t.replace('XC','')\n    t=t.replace('XL','')\n    t=t.replace('IX','')\n    t=t.replace('IV','')\n    t=t.replace('VV','')\n    t=t.replace('VI','')\n    t=t.replace('X','')\n    t=t.replace('L','')\n    t=t.replace('C','')\n    t=t.replace('D','')\n    t=t.replace('M','')\n    t=t.replace('U','')\n    t=t.replace('P','')\n    t=t.replace('V','')\n    t=t.replace('I','')\n    if len(t)==1:\n        return d[t]\n    t=t[1:]\n    t=t.replace('CM','')\n    t=t.replace('CD','')\n    t=t.replace('XC','')\n    t=t.replace('XL','')\n    t=t.replace('IX','')\n    t=t.replace('IV','')\n    t=t.replace('VV','')\n    t=t.replace('VI','')\n    t=t.replace('X','')\n    t=t.replace('L','')\n    t=t.replace('C','')\n    t=t.replace('D','')\n    t=t.replace('M','')\n    t=t.replace('U','')\n    t=t.replace('P','')\n    t=t.replace('V','')\n    t"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c=math.sqrt(w**2+h**2)\n    a=math.sqrt(c**2-h**2)\n    return c,a\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for index in range(1,len(listval)):\n        if listval[index] > maxval:\n            maxval = listval[index]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxv = listval[0]\n    for item in listval:\n        if maxv < item:\n            maxv = item\n    return maxv\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for i in listval:\n        if i > maxval:\n            maxval = i\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 'list is empty'\n    else:\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # listval = [2,1,3,4]\n    # listval = [2,3,4,1]\n    # listval = [2,2,2,2]\n    # listval = [2,1,2,3]\n    # listval = [2,2,2,3,2]\n    # listval = [2,1,2,3,4,5,1,2,3]\n    max_val = listval[0]\n    for i in listval:\n        if max_val < i:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for val in listval:\n        if val > maxval:\n            maxval = val\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return max(listval)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    divisor_list = []\n    for i in range(1, int(number/2) + 1):\n        if number % i == 0:\n            divisor_list.append(i)\n    return sum(divisor_list)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number // 2 + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # based on https://www.codewars.com/kata/sum-divisors-number\n    sum_divs = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_divs += i\n    return sum_divs\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1,number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(2, number):\n        if number%i == 0:\n            divisors.append(i)\n    if divisors == []:\n        return 1\n    else:\n        return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(div_list)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    count = 0\n    div_list = []\n    for i in range(1, number):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(i for i in range(1,number) if number % i == 0)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return get_count(arr, 0, len(arr))\n    \ndef get_count(arr, left, right): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if left >= right:\n        return 0\n    if left+1 == right:\n        if arr[left] > arr[right]:\n            return 1\n        else:\n            return 0\n    mid = int((left + right)/2)\n    count_Left = get_count(arr, left, mid)\n    count_Right = get_count(arr, mid, right)\n    return count_Left + count_Right\n    \n    \n    \nif __name__ == '__main__': \n    arr = [5, 1, 4, 2, 3]\n    print(get_Inv_Count(arr))"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n    else:\n        mid = len(arr)//2\n        left = arr[0:mid]\n        right = arr[mid:]\n        \n        # count left and right inversions\n        left_count = get_Inv_Count(left)\n        right_count = get_Inv_Count(right)\n        \n        # count merge inversion counts\n        merge_count = 0\n        i,j,k = 0,0,0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n                merge_count += (len(left)-i)\n            k += 1\n        \n        # check for any elements remaining in left or right\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        \n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n        \n        return left_count + right_count + merge_count\n        \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return len(arr) - count_inversions(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    print arr\n    l = len(arr)\n    if l==0:\n        return 0\n    if l==1:\n        return 0\n    count = 0\n    for i in range(l):\n        for j in range(i+1,l):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1:\n        return 0\n    else:\n        mid = len(arr)//2\n        count = get_Inv_Count(arr[:mid]) + get_Inv_Count(arr[mid:])\n        i, j = 0, 0\n        count_arr = []\n        while i < mid and j < len(arr) - mid:\n            if arr[mid + i] < arr[mid + j]:\n                count += 1\n                count_arr.append(arr[mid + i])\n                i += 1\n            else:\n                count_arr.append(arr[mid + j])\n                j += 1\n        if i == mid:\n            count_arr += arr[mid:]\n        else:\n            count_arr += arr[:mid]\n        return count + count_arr.count(0)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr.sort()\n    arr_size = len(arr)\n    inversion_count = 0\n    for i in range(arr_size):\n        for j in range(i+1, arr_size):\n            if (arr[i] > arr[j]):\n                inversion_count += 1\n    return inversion_count\n    \nif __name__ == '__main__':\n    arr = [9,8,7,6,5,4,3,2,1]\n    print get_Inv_Count(arr)\n    \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # return len([i for i in arr if i > 0])\n    return sum([1 for i in arr if i > 0])\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n): \n        for j in range(i+1,n):\n            if(arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] > arr[j]: \n                count += 1\n    return count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inversion_Count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                Inversion_Count += 1\n    return Inversion_Count\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [x for y in list1 for x in y]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for element in list1:\n        if isinstance(element, list):\n            list2.extend(flatten_list(element))\n        else:\n            list2.append(element)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    #base case\n    if not list1:\n        return []\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return [list1[0]] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) is list:\n            flat_list += flatten_list(item)\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    import collections\n    result = []\n    for item in list1:\n        if isinstance(item, collections.Iterable) and not isinstance(item, basestring):\n            for x in flatten_list(item):\n                result.append(x)\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return reduce(lambda x, y: x+y, list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # A list as the input\n    # [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]]\n    # [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]\n    newList = []\n    # Iterate through the input list\n    for subList in list1:\n        # Iterate through each element in the sublist\n        for item in subList:\n            # Add item to newList\n            newList.append(item)\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) is list:\n            list2.extend(flatten_list(i))\n        else:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for element in list1:\n        if isinstance(element, list):\n            output.extend(flatten_list(element))\n        else:\n            output.append(element)\n    return output\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for sublist in list1:\n        if type(sublist) is list:\n            for item in sublist:\n                flat_list.append(item)\n        else:\n            flat_list.append(sublist)\n    return flat_list\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for i in stdata:\n        if i[0] == 'c':\n            if i[1] > max_aggregate:\n                max_aggregate = i[1]\n        else:\n            if i[1] < max_aggregate:\n                max_aggregate = i[1]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    d[0] = []\n    n = len(stdata)\n    for i in xrange(n):\n        d[i+1].append(stdata[i])\n    res = []\n    for i in xrange(n):\n        res.append(max(d[i+1]))\n    return res\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    t = 0\n    for st in stdata:\n        t += st[2]\n    return t\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    t = 1000000\n    for st in stdata:\n        t = min(t,st[2])\n    return t\ndef average_aggregate(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    t = 0\n    for st in stdata:\n        t += st[2]\n    return t/len(stdata)\ndef max_min_compare(l):\n    '''\n    Write a function that takes a list of tuples and returns a list of the maximum aggregate, \n    the minimum aggregate, and the average aggregate in that order.\n    '''\n    tmax = 0\n    tmin = 1000000\n    tavg = 0\n    for st in l:\n        if st[2] > tmax:\n            tmax = st[2]\n        if st[2] < tmin:\n            tmin = st[2]\n        tavg += st[2]\n    tavg /= len(l)\n    return [tmax, tmin, tavg]\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for ele in stdata:\n        d[ele[0]].append(ele[1])\n    mx = 0\n    for k,v in d.items():\n        mx = max(mx, max(v))\n    return mx\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata.sort()\n    res = {}\n    res[\"max\"] = stdata[0][1]\n    res[\"min\"] = stdata[-1][1]\n    res[\"average\"] = sum(i[1] for i in stdata)/len(stdata)\n    return res\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    '''\n    Permutation is a function that is used to generate all the possible permutations of a list.\n    \n    First, we generate all the possible permutations of the list using permutation function:\n    '''\n    def perm(lst):\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return [lst]\n        l = []\n        for i in xrange(len(lst)):\n            m = lst[i]\n            remlst = lst[:i] + lst[i+1:]\n            for p in perm(remlst):\n                l.append([m] + p)\n        return l\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata) == 0:\n        return 0\n    max_agg = 0\n    for i in stdata:\n        max_agg = max(max_agg,i[1])\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    if len(stdata) == 0:\n        return 0\n    else:\n        aggregate_value = stdata[0][1]\n        for i in range(1, len(stdata)):\n            if aggregate_value > stdata[i][1]:\n                aggregate_value = stdata[i][1]\n        return aggregate_value\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = 0\n    for name, value in stdata:\n        result = max(result, value)\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    return total\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if i&(2**n-1) == j&(2**n-1):\n                count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2) + count_binary_seq(n-3)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2**n):\n            if bin(i)[2:].zfill(n)[-1] == bin(i)[2:].zfill(n)[:1]:\n                count += 1\n        return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #Constant for the sum of first n bits and second n bits\n    first_bit_sum = n*(n+1)/2\n    #Constant for the sum of last n bits\n    last_bit_sum = n*n/2\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0: return 1\n    ans = 0\n    for i in xrange(1,n):\n        ans += count_binary_seq(i-1)*count_binary_seq(n-i-1)\n    return ans\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    c = 0\n    for i in range(1, 2**n):\n        if bin(i)[2:].count('1') == n:\n            c += count_binary_seq(n-1)\n    return c\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    \n    for i in range(2**n): \n        temp = i\n        temp1 = 0\n        while temp: \n            if temp%2: \n                temp1 += 1\n            temp = temp/2\n        temp = i\n        temp1 = 0\n        while temp: \n            if temp%2: \n                temp1 += 1\n            temp = temp/2\n        if temp1 == n: \n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    return sum(count_binary_seq(n-1) * 2) + sum(count_binary_seq(n-2) * 2) + sum(count_binary_seq(n-3) * 2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Assuming that the number of bits is even\n    # We will count the number of binary sequences of length n such that the sum of first n bits is same as sum of last n bits\n    # So if n is even, we will count binary sequences of length n such that the sum of first n bits is same as sum of last n+1 bits\n    # If n is odd, we will count binary sequences of length n such that the sum of first n bits is same as sum of last n bits\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(dict_depth(v) for v in d.itervalues()))\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.itervalues())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + max(map(dict_depth,d.values())) if d else 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d,dict):\n        raise ValueError(\"The parameter must be a dictionary\")\n    depth=0\n    for k,v in d.iteritems():\n        if isinstance(v,dict):\n            depth=max(depth,1+dict_depth(v))\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(map(dict_depth, d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(value) + 1 for value in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == type({}):\n        return 1 + max(dict_depth(d.values()) for d in d.values())\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if isinstance(d, dict):\n        for k, v in d.iteritems():\n            if isinstance(v, dict):\n                depth += dict_depth(v)\n            else:\n                depth += 1\n    return depth\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotation = 0\n    while rotation < len(rotations) :\n        if rotations[rotation] == index :\n            return arr[rotations[rotation-1]]\n        rotation += 1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations%len(arr)\n    index = index%len(arr)\n    if (ranges[index] == 1) :\n        return arr[index]\n    else :\n        return find_Element(arr,ranges,rotations,index+rotations)\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in ranges[index] :\n        for j in rotations :\n            if arr[i+j]==1 :\n                return True\n    return False\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    for i in range(0,rotations) : \n        \n        rotate_left(arr,n)\n        if arr[index] == arr[0] : \n            return arr[index]\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    if (ranges[index] == 1) : \n        return arr[index]\n    \n    rotation_factor =  ranges[index] - 1\n    rotated_array = []\n    \n    for i in range(rotations[index]) :\n        rotated_array = rotated_array + arr\n    \n    return rotated_array[index-rotation_factor]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    number_of_rotations = 0\n    while number_of_rotations<rotations :\n        arr = [arr[-1]] + arr[0:-1]\n        number_of_rotations+=1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # generate the number of rotations\n    rotation = 0\n    for i in range(index,len(arr)) :\n        rotation += 1\n        if arr[i] == arr[index] :\n            break\n    # check whether the index rotates to the target element or not\n    if rotation < rotations :\n        return -1\n    # if the element does not rotates to target element, \n    # then check whether the element before the target element is equal to the target element\n    for i in range(rotation) :\n        if arr[index - i - 1] == arr[index] :\n            return -1\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Loop through all the rotations\n    for rotation in rotations :\n        # Loop through all the given ranges\n        for start,end in ranges :\n            # Loop through the range\n            for i in range(start,end+1) :\n                # Compare the index value with the rotation\n                if index==rotation+i :\n                    return arr[i]\n    \n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)) :\n        if (index-i*rotations)%ranges == 0 :\n            return arr[(index-i*rotations)%ranges]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print '\\n-------Function : ',functions[index],'------'\n    print 'Start : ',arr,'   End : ',ranges[index]\n    for i in range(0,len(arr)):\n        rotated_arr = rotations[i]\n        print rotated_arr\n        if (arr[i] >= rotated_arr[0] and arr[i] <= rotated_arr[1]) :\n            return arr[i]\n    return 'Not Found'\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withe(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'e'.\n    '''\n    pass\ndef start_witht(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 't'.\n    '''\n    pass\ndef start_withk(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'k'.\n    '''\n    pass\ndef start_withq(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'q'.\n    '''\n    pass\ndef start_withg(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'g'.\n    '''\n    pass\ndef start_withs(words):\n    '''\n    Write a function to return two words from a list of words starting with letter's'.\n    '''\n    pass\ndef start_withz(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'z'.\n    '''\n    pass\ndef start_withn(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'n'.\n    '''\n    pass\ndef start_withw(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'w'.\n    '''\n    pass\ndef start_withy(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'y'.\n    '''\n    pass\ndef start_withu(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'u'.\n    '''\n    pass\ndef start_witho(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'o'.\n    '''\n    pass\ndef start_withf(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'f'.\n    '''\n    pass\ndef start_withd(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'd'.\n    '''\n    pass\ndef start_withl(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'l'.\n    '''\n    pass\ndef start_withc(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'c'.\n    '''\n    pass\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withe(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'e'.\n    '''\n    pass\ndef start_witht(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 't'.\n    '''\n    pass\ndef start_withk(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'k'.\n    '''\n    pass\ndef start_withq(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'q'.\n    '''\n    pass\ndef start_withg(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'g'.\n    '''\n    pass\ndef start_withs(words):\n    '''\n    Write a function to return two words from a list of words starting with letter's'.\n    '''\n    pass\ndef start_withz(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'z'.\n    '''\n    pass\ndef start_withn(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'n'.\n    '''\n    pass\ndef start_withw(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'w'.\n    '''\n    pass\ndef start_withy(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'y'.\n    '''\n    pass\ndef start_withu(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'u'.\n    '''\n    pass\ndef start_witho(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'o'.\n    '''\n    pass\ndef start_withf(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'f'.\n    '''\n    pass\ndef start_withd(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'd'.\n    '''\n    pass\ndef start_withl(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'l'.\n    '''\n    pass\ndef start_withc(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'c'.\n    '''\n    pass\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withe(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'e'.\n    '''\n    pass\ndef start_witht(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 't'.\n    '''\n    pass\ndef start_withk(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'k'.\n    '''\n    pass\ndef start_withq(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'q'.\n    '''\n    pass\ndef start_withg(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'g'.\n    '''\n    pass\ndef start_withs(words):\n    '''\n    Write a function to return two words from a list of words starting with letter's'.\n    '''\n    pass\ndef start_withz(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'z'.\n    '''\n    pass\ndef start_withn(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'n'.\n    '''\n    pass\ndef start_withw(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'w'.\n    '''\n    pass\ndef start_withy(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'y'.\n    '''\n    pass\ndef start_withu(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'u'.\n    '''\n    pass\ndef start_witho(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'o'.\n    '''\n    pass\ndef start_withf(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'f'.\n    '''\n    pass\ndef start_withd(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'd'.\n    '''\n    pass\ndef start_withl(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'l'.\n    '''\n    pass\ndef start_withc(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'c'.\n    '''\n    pass\ndef start_with"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p.*')\n    return pattern.findall(words)\ndef n_letter_words(words):\n    '''\n    Write a function to return the number of strings that have the same number of vowels (a, e, i, o, u) as the word passed in. For example, if a word is passed in then there should be four strings that have 6 vowels in them.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    pattern = re.compile(r'.*\\b(?=('+'|'.join(vowels)+r')).*')\n    return pattern.findall(words)\ndef only_vowels(words):\n    '''\n    Write a function to return a string containing only the vowels in the word passed in.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    pattern = re.compile(r'(?=[^aeiou])')\n    return pattern.findall(words)\ndef no_vowels(words):\n    '''\n    Write a function to return a string containing only the consonants in the word passed in.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    pattern = re.compile(r'(?=[^aeiou])')\n    return pattern.findall(words)\ndef r_vowels(words):\n    '''\n    Write a function to return the first word that contains the same vowels as the word passed in. For example, if a word is passed in then there should be four strings that have 6 vowels in them.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    pattern = re.compile(r'.*(?=('+'|'.join(vowels)+r'))')\n    return pattern.findall(words)\ndef end_with_a(words):\n    '''\n    Write a function to return a list of words that end with a letter 'a'.\n    '''\n    pattern = re.compile(r'.*a$')\n    return pattern.findall(words)\ndef end_with_e(words):\n    '''\n    Write a function to return a list of words that end with a letter 'e'.\n    '''\n    pattern = re.compile(r'.*e$')\n    return pattern.findall(words)\ndef end_with_i(words):\n    '''\n    Write a function to return a list of words that end with a letter 'i'.\n    '''\n    pattern = re.compile(r'.*i$')\n    return pattern.findall(words)\ndef end_with_o(words):\n    '''\n    Write a function to return a list of words that end with a letter 'o'.\n    '''\n    pattern = re.compile(r'.*o$')\n    return pattern.findall(words)\ndef end_with_u(words):\n    '''\n    Write a function to return a list of words that end with a letter 'u'.\n    '''\n    pattern = re.compile(r'.*u$')\n    return pattern.findall(words)\ndef only_consonants(words):\n    '''\n    Write a function to return a string containing only the consonants in the word passed in.\n    '''\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'x', 'z']\n    pattern = re.compile(r'(?=[^bcdfghjklmnpqrstvwxyz])')\n    return pattern.findall(words)\ndef only_letters(words):\n    '''\n    Write a function to return a string containing only the letters in the word passed in.\n    '''\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    pattern = re.compile(r'(?=[^a-zA-Z])')\n    return pattern.findall(words)\ndef only_digits(words):\n    '''\n    Write a function to return a string containing only the digits in the word passed in.\n    '''\n    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    pattern = re.compile(r'(?=[^0-9])')\n    return pattern.findall(words)\ndef only_punctuation(words):\n    '''\n    Write a function to return a string containing only the punctuation in the word passed in.\n    '''\n    punctuation = ['!', '\"', '#', '$', '%', '&', \"'\", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\\\', ']', '^', '_', '`', '{', '|', '}', '~', '\\n']\n    pattern = re.compile(r'(?=[^!#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~\\n])')\n    return pattern.findall(words)\ndef remove_punctuation(words):\n    '''\n    Write a function to return a string with all the punctuation removed from the word passed in.\n    '''\n    punctuation = ['!', '\"', '#', '$', '%', '&', \"'\", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\\\', ']', '^', '_', '`', '{', '|', '}', '~', '\\n']\n    pattern = re.compile(r'(?=[^'+''.join(punctuation)+'])')\n    return pattern.findall(words)\ndef remove_digits(words):\n    '''\n    Write a function to return a string with all the digits removed from the word passed in.\n    '''\n    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    pattern = re.compile(r'(?=[^0-9])')\n    return pattern.findall(words)\ndef remove_spaces(words):\n    '''\n    Write a function to return a string with all the spaces removed from the word passed in.\n    '''\n    pattern = re.compile(r'\\s')\n    return pattern.findall(words)\ndef remove_spaces_and_start_end(words):\n    '''\n    Write a function to return a string with all the spaces and the start and end characters removed from the word passed in.\n    '''\n    pattern = re.compile(r'(^|.+\\s|.+$)')\n    return pattern.findall(words)\ndef remove_spaces_and_start_end_and_punctuation(words):\n    '''\n    Write a function to return a string with all the spaces, the start and end characters and punctuation removed from the word passed in.\n    '''\n    pattern = re.compile(r'(^|.+\\s|.+$|[!#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~\\n])')\n    return pattern.findall(words)\ndef replace_one(words):\n    '''\n    Write a function to replace a word with a given word from a list.\n    '''\n    pattern = re.compile(r'(?<=[^aeiou])[aeiou]+')\n    return pattern.findall(words)\ndef replace_every_two(words):\n    '''\n    Write a function to replace every two letters with another two letters."
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    start_word_regex = re.compile('^p.+')\n    for word in words:\n        if start_word_regex.match(word):\n            print word\ndef start_with_s(words):\n    '''\n    Write a function to return two words from a list of words starting with letter's'.\n    '''\n    start_word_regex = re.compile('^s.+')\n    for word in words:\n        if start_word_regex.match(word):\n            print word\ndef end_with(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef end_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef end_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.match(word):\n            print word\ndef start_with_s(words,end):\n    '''\n    Write a function to return all the words in a list ending with the given word.\n    '''\n    end_word_regex = re.compile('^'+end+'.+')\n    for word in words:\n        if end_word_regex.matc"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = re.compile('p')\n    res = [word for word in words if p.match(word)]\n    return res\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if re.search('p',word):\n            result.append(word)\n    return result\ndef palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return s == s[::-1]\ndef multiply(a,b):\n    return a*b\ndef add(a,b):\n    return a+b\ndef is_odd(num):\n    if num % 2!= 0:\n        return True\n    else:\n        return False\ndef to_second_power(num):\n    return num**2\ndef count_vowels(s):\n    return len([c for c in s if c in 'aeiou'])\ndef bubble_sort(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\ndef is_unique(nums):\n    return len(nums) == len(set(nums))\ndef is_vowel(s):\n    return s in 'aeiou'\ndef break_words(s):\n    return re.split('[^a-zA-Z0-9]+',s)\ndef is_in_alphabet(c):\n    return 'a' <= c <= 'z' or 'A' <= c <= 'Z'\ndef to_camel_case(s):\n    words = break_words(s)\n    res = []\n    for word in words:\n        if len(word) == 0:\n            res.append('')\n        else:\n            res.append(word[0].upper() + word[1:])\n    return ''.join(res)\ndef k_polygon(n,k):\n    return n * n - (n-k) * (n-k)\ndef k_triangle(n,k):\n    return n * (n+1) / 2 - k * (k+1) / 2\ndef k_star(n,k):\n    return n * (n-1) / 2 - (k-1) * (k-1) / 2\ndef sort_by_count(words):\n    d = {}\n    for word in words:\n        d[word] = d.get(word,0) + 1\n    return sorted(d.items(),key = lambda x:x[1],reverse=True)\ndef any_lowercase1(s):\n    return any(c.islower() for c in s)\ndef any_lowercase2(s):\n    for c in s:\n        if c.islower():\n            return True\n    return False\ndef any_lowercase3(s):\n    return any(c.islower() for c in s)\ndef any_lowercase4(s):\n    for c in s:\n        if not c.islower():\n            return False\n    return True\ndef any_lowercase5(s):\n    return s.islower()\ndef contains_abba(s):\n    for i in range(len(s)-3):\n        if s[i] == s[i+3] and s[i+1] == s[i+2] and s[i]!= s[i+1]:\n            return True\n    return False\ndef is_prime(n):\n    return n > 1 and all(n % i for i in range(2, n))\ndef is_palindrome(s):\n    return s == s[::-1]\ndef is_palindrome2(s):\n    return s == s[::-1]\ndef is_palindrome3(s):\n    return s == s[::-1]\ndef is_prime_with_last_digit(n):\n    if n <= 1:\n        return False\n    last_digit = n % 10\n    return all(n % i for i in range(2,last_digit))\ndef is_prime_with_last_digit2(n):\n    if n <= 1:\n        return False\n    last_digit = n % 10\n    return all(n % i for i in range(2,last_digit))\ndef reverse_integer(num):\n    if num < 0:\n        return - reverse_integer(-num)\n    result = 0\n    while num > 0:\n        result = result * 10 + num % 10\n        num /= 10\n    return result\ndef reverse_integer2(num):\n    if num < 0:\n        num = -num\n    res = 0\n    while num > 0:\n        res = res * 10 + num % 10\n        num /= 10\n    return res\ndef reverse_string(s):\n    return s[::-1]\ndef is_ascending(s):\n    for i in range(len(s)-1):\n        if s[i] > s[i+1]:\n            return False\n    return True\ndef is_descending(s):\n    for i in range(len(s)-1):\n        if s[i] < s[i+1]:\n            return False\n    return True\ndef is_ascending_and_descending(s):\n    return is_ascending(s) and is_descending(s)\ndef find_smallest_k(l,k):\n    if k > len(l):\n        return None\n    if k == 0:\n        return None\n    if k == 1:\n        return min(l)\n    for i in range(len(l)-k+1):\n        if l[i] < l[i+1]:\n            return l[i]\n    return None\ndef find_smallest_k2(l,k):\n    if k > len(l):\n        return None\n    if k == 0:\n        return None\n    if k == 1:\n        return min(l)\n    for i in range(len(l)-k+1):\n        if l[i] < l[i+1]:\n            return l[i]\n    return l[len(l)-k]\ndef find_smallest_k3(l,k):\n    if k > len(l):\n        return None\n    if k == 0:\n        return None\n    if k == 1:\n        return min(l)\n    smallest = l[0]\n    for i in range(k):\n        if l[i] < smallest:\n            smallest = l[i]\n    return smallest\ndef find_smallest_k4(l,k):\n    if k > len(l):\n        return None\n    if k == 0:\n        return None\n    if k == 1:\n        return min(l)\n    smallest = l[0]\n    for i in range(k):\n        if l[i] < smallest:\n            smallest = l[i]\n    return smallest\ndef find_smallest_k5(l,k):\n    if k > len(l):\n        return None\n    if k == 0:\n        return None\n    if k == 1:\n        return min(l)\n    smallest = l[0]\n    for i in range(k):\n        if l[i] < smallest:\n            smallest = l[i]\n    return smallest\ndef find_smallest_k6(l,k):\n    if k > len(l):\n        return None\n    if k == 0:\n        return None\n    if k == 1:\n        return min(l)\n    smallest = l[0]\n    for i in range(k):\n        if l[i] < smallest:\n            smallest = l[i]\n    return smallest\ndef find_smallest_k7(l,k):\n    if k > len(l):\n        return None\n    if k == 0:\n        return None\n    if k == 1:\n        return min(l)\n    smallest = l[0]\n    for i in range(k):\n        if l[i] < smallest:\n            smallest = l[i]\n    return smallest\ndef find_smallest_k8(l,k):\n    if k > len(l):\n        return None\n    if k == 0:\n        return None\n    if k == 1:\n        return min(l)\n    smallest = l[0]\n    for i in range(k):\n        if l[i] < smallest:\n            smallest = "
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words_list = []\n    for i in words:\n        if i.startswith('p'):\n            words_list.append(i)\n    return words_list\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    patt = re.compile('^p.*')\n    res = [w for w in words if re.match(patt, w)]\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global l\n    if index >= n:\n        return 0\n    if (index, k) in l:\n        return l[(index, k)]\n    ans = -sys.maxsize\n    for i in range(index, n):\n        if a[i] <= a[k]:\n            ans = max(ans, max_sum_increasing_subseq(a, n, i+1, k) + a[i])\n    l[(index, k)] = ans\n    return ans\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #print('index', index)\n    #print('k', k)\n    if n == index:\n        return a[index]\n    return max(a[index], max_sum_increasing_subseq(a, n, index+1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if a[index] < a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k - 1))\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # print 'input:', a, index, k\n    if index == n:\n        return 0\n    if k == a[index]:\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    elif k > a[index]:\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case\n    if index == n or k == 0:\n        return 0\n    if a[index] >= k:\n        return a[index]\n    # dp[i] is the maximum sum of increasing subsequence of a[i+1:]\n    ans = a[index]\n    for i in range(index, n):\n        ans = max(ans, max_sum_increasing_subseq(a, n, i+1, k-a[i]))\n    return ans\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return k\n    if index < n:\n        if a[index] >= a[k]:\n            return max_sum_increasing_subseq(a, n, index + 1, k)\n        else:\n            return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k))\n    return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == index:\n        return 0\n    if (n, index, k) in dp:\n        return dp[(n, index, k)]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k > index:\n        return 0\n    return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index > n:\n        return -1\n    if n == index:\n        return k\n    if k < index:\n        return -1\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    r=[]\n    if m==0:\n        return []\n    else:\n        for i in tuplex[:n]:\n            r.append(i)\n        return r\ndef letter_tuple(tuple,letter,n):\n    '''\n    Write a function to get a tuple containing a given letter.\n    '''\n    r=[]\n    for i in tuple:\n        if i==letter:\n            r.append(i)\n    if n>len(r):\n        r.append(letter)\n    return r\ndef word_tuple(tuple,word,n):\n    '''\n    Write a function to get a tuple containing a given word.\n    '''\n    r=[]\n    for i in tuple:\n        if i==word:\n            r.append(i)\n    if n>len(r):\n        r.append(word)\n    return r\ndef word_tuple_by_index(tuple,word,n):\n    '''\n    Write a function to get a tuple containing a given word.\n    '''\n    r=[]\n    for i in range(len(tuple)):\n        if i==n:\n            r.append(word)\n        else:\n            r.append(tuple[i])\n    return tuple(r)\ndef word_tuple_reverse(tuple,word):\n    '''\n    Write a function to reverse a tuple by getting a word\n    '''\n    r=[]\n    for i in range(len(tuple)-1,-1,-1):\n        if tuple[i]==word:\n            r.append(i)\n    return tuple[r[::-1]]\ndef word_tuple_reverse_by_index(tuple,word,n):\n    '''\n    Write a function to reverse a tuple by getting a word\n    '''\n    r=[]\n    for i in range(len(tuple)-1,-1,-1):\n        if tuple[i]==word:\n            r.append(i)\n    return tuple[r[::-1]]\ndef word_tuple_intersect(tuple1,tuple2):\n    '''\n    Write a function to get a tuple containing words which have same length.\n    '''\n    r=[]\n    for i in tuple1:\n        if i in tuple2:\n            r.append(i)\n    return tuple(r)\ndef word_tuple_union(tuple1,tuple2):\n    '''\n    Write a function to get a tuple containing words which are union of two tuples.\n    '''\n    r=[]\n    for i in tuple1:\n        if i not in r:\n            r.append(i)\n    for i in tuple2:\n        if i not in r:\n            r.append(i)\n    return tuple(r)\ndef word_tuple_difference(tuple1,tuple2):\n    '''\n    Write a function to get a tuple containing words which are difference of two tuples.\n    '''\n    r=[]\n    for i in tuple1:\n        if i not in tuple2:\n            r.append(i)\n    return tuple(r)\ndef word_tuple_difference_by_index(tuple1,tuple2,n):\n    '''\n    Write a function to get a tuple containing words which are difference of two tuples.\n    '''\n    r=[]\n    for i in range(len(tuple1)):\n        if i==n:\n            pass\n        elif tuple1[i] in tuple2:\n            pass\n        else:\n            r.append(tuple1[i])\n    return tuple(r)\ndef list_slice(lis,n):\n    '''\n    Write a function to get a list slice.\n    '''\n    r=[]\n    for i in lis[n]:\n        r.append(i)\n    return r\ndef list_slice_by_index(lis,n,m):\n    '''\n    Write a function to get a list slice.\n    '''\n    r=[]\n    for i in range(n,m):\n        r.append(lis[i])\n    return r\ndef word_dict(word,tuple):\n    '''\n    Write a function to get a dictionary of a word.\n    '''\n    r={}\n    for i in tuple:\n        if i==word:\n            r[i]=word\n    return r\ndef word_dict_by_index(word,tuple,n):\n    '''\n    Write a function to get a dictionary of a word.\n    '''\n    r={}\n    for i in range(len(tuple)):\n        if i==n:\n            r[tuple[i]]=word\n        else:\n            r[tuple[i]]=tuple[i]\n    return r\ndef word_dict_by_value(word,tuple):\n    '''\n    Write a function to get a dictionary of a word.\n    '''\n    r={}\n    for i in tuple:\n        if word==i:\n            r[i]=word\n    return r\ndef word_dict_by_value_by_index(word,tuple,n):\n    '''\n    Write a function to get a dictionary of a word.\n    '''\n    r={}\n    for i in range(len(tuple)):\n        if i==n:\n            r[tuple[i]]=word\n        else:\n            r[tuple[i]]=tuple[i]\n    return r\ndef reverse_dict(d):\n    '''\n    Write a function to get a dictionary where the values are reversed.\n    '''\n    r={}\n    for i in d:\n        r[d[i]]=i\n    return r\ndef tuple_replace(tuple,word,n):\n    '''\n    Write a function to get a tuple with a given word replaced with a tuple.\n    '''\n    r=[]\n    for i in tuple:\n        if i==n:\n            r.append(word)\n        else:\n            r.append(i)\n    return tuple(r)\ndef tuple_replace_by_index(tuple,word,n):\n    '''\n    Write a function to get a tuple with a given word replaced with a tuple.\n    '''\n    r=[]\n    for i in range(len(tuple)):\n        if i==n:\n            r.append(word)\n        else:\n            r.append(tuple[i])\n    return tuple(r)\ndef tuple_replace_reverse(tuple,word,n):\n    '''\n    Write a function to get a tuple with a given word replaced with a tuple.\n    '''\n    r=[]\n    for i in range(len(tuple)):\n        if tuple[i]==n:\n            r.append(word)\n        else:\n            r.append(tuple[i])\n    return tuple(r)\ndef tuple_replace_reverse_by_index(tuple,word,n):\n    '''\n    Write a function to get a tuple with a given word replaced with a tuple.\n    '''\n    r=[]\n    for i in range(len(tuple)):\n        if i==n:\n            r.append(word)\n        else:\n            r.append(tuple[i])\n    return tuple(r)\ndef tuple_replace_reverse_and_reverse(tuple,word,n):\n    '''\n    Write a function to get a tuple with a given word replaced with a tuple.\n    '''\n    r=[]\n    for i in range(len(tuple)):\n        if i==n:\n            r.append(word)\n        else:\n            r.append(tuple[i])\n    r.reverse()\n    return tuple(r)\ndef tuple_replace_reverse_and_reverse_by_index(tuple,word,n):\n    '''\n    Write a function to get a tuple with a given word replaced with a tuple.\n    '''\n    r=[]\n    for i in range(len(tuple)):\n        if i==n:\n            r.append(word)\n        else:\n            r.append(tuple[i])\n    r.reverse()\n    return tuple(r)\ndef char_count(tuplex,ch):\n    '''\n    Write a function to get the count of a given character in a tuple."
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m>n:\n        return tuplex[n:]+tuplex[:m]\n    else:\n        return tuplex[m:]+tuplex[:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m][n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[m][n]\ndef tuplex_colon(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n][m]\ndef tuplex_colon_list(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n][m]\ndef tuplex_colon_slice(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:m]\ndef tuplex_colon_slice_first(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[:n]\ndef tuplex_colon_slice_last(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[:]\ndef tuplex_colon_slice_all_1(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_2(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[:n]\ndef tuplex_colon_slice_all_3(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:n+1]\ndef tuplex_colon_slice_all_4(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_5(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[:n]\ndef tuplex_colon_slice_all_6(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_7(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_8(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_9(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_10(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_11(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_12(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_13(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_14(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_15(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_16(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_17(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_18(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_19(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_20(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_21(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_22(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_23(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_24(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:]\ndef tuplex_colon_slice_all_25(tuplex,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m][n])\n    return tuplex[n:"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    return tuplex[m:]+tuplex[:m]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return tuplex[0]\n    else:\n        return tuplex[0:m-1]+tuplex[m:]\ndef vowel_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a vowel of a tuple.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return tuplex[0]\n    elif m+n-2 == len(tuplex):\n        return tuplex[n-1]\n    else:\n        return tuplex[m-1]+tuplex[n-1]\ndef inter_tuplex(tuplex,m,n):\n    '''\n    Write a function to get an intersection of a tuple.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return tuplex[0]\n    elif m+n-2 == len(tuplex):\n        return tuplex[m-1:n]\n    else:\n        return tuplex[m-1:n-1]\ndef remove_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple without a character.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return tuplex[1:]\n    elif m+n-2 == len(tuplex):\n        return tuplex[:m]+tuplex[m+n:]\n    else:\n        return tuplex[:m]+tuplex[m+n:]\ndef insertion_tuplex(tuplex,m,n,char):\n    '''\n    Write a function to get a tuple with a character in the specific position.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return tuplex[:1]+char+tuplex[1:]\n    elif m+n-2 == len(tuplex):\n        return tuplex[:m]+char+tuplex[m:]\n    else:\n        return tuplex[:m]+char+tuplex[m:]\ndef append_tuplex(tuplex,m,n,char):\n    '''\n    Write a function to get a tuple with a character appended.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return tuplex[:1]+char\n    elif m+n-2 == len(tuplex):\n        return tuplex[:m]+char+tuplex[m:]\n    else:\n        return tuplex[:m]+char+tuplex[m:]\ndef append_char_tuplex(tuplex,m,n,char):\n    '''\n    Write a function to get a tuple with a character appended.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return tuplex[:1]+char\n    elif m+n-2 == len(tuplex):\n        return tuplex[:m]+char+tuplex[m:]\n    else:\n        return tuplex[:m]+char+tuplex[m:]\ndef remove_tuplex(tuplex,m,n,char):\n    '''\n    Write a function to get a tuple with a character removed.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return tuplex[:1]+tuplex[2:]\n    elif m+n-2 == len(tuplex):\n        return tuplex[:m]+tuplex[m+n:]\n    else:\n        return tuplex[:m]+tuplex[m+n:]\ndef slice_tuplex(tuplex,m,n,char):\n    '''\n    Write a function to get a tuple with a character removed.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return tuplex[:1]+tuplex[2:]\n    elif m+n-2 == len(tuplex):\n        return tuplex[:m]+tuplex[m+n:]\n    else:\n        return tuplex[:m]+tuplex[m+n:]\ndef first_tuplex(tuplex,m):\n    '''\n    Write a function to get the first character.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    else:\n        return tuplex[:m]\ndef mid_tuplex(tuplex,m,n):\n    '''\n    Write a function to get the middle character.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return tuplex[m:]\n    elif m+n-2 == len(tuplex):\n        return tuplex[m:n]\n    else:\n        return tuplex[m:n]\ndef last_tuplex(tuplex,m,n):\n    '''\n    Write a function to get the last character.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return tuplex[m:n]\n    elif m+n-2 == len(tuplex):\n        return tuplex[:n]\n    else:\n        return tuplex[:n]\ndef concatenate_tuplex(tuplex,m,n,char):\n    '''\n    Write a function to get a tuple with another tuple inserted.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return tuplex[:1]+char+tuplex[1:]\n    elif m+n-2 == len(tuplex):\n        return tuplex[:m]+char+tuplex[m:]\n    else:\n        return tuplex[:m]+char+tuplex[m:]\ndef replace_tuplex(tuplex,m,n,char):\n    '''\n    Write a function to get a tuple with another tuple replaced.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return tuplex[:1]+char\n    elif m+n-2 == len(tuplex):\n        return tuplex[:m]+char+tuplex[m:]\n    else:\n        return tuplex[:m]+char+tuplex[m:]\ndef splice_tuplex(tuplex,m,n,char):\n    '''\n    Write a function to get a tuple with another tuple replaced.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return tuplex[:1]+char+tuplex[2:]\n    elif m+n-2 == len(tuplex):\n        return tuplex[:m]+char+tuplex[m+n:]\n    else:\n        return tuplex[:m]+char+tuplex[m+n:]\ndef get_len_tuplex(tuplex,m,n):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:\n        return 1\n    elif m+n-2 == len(tuplex):\n        return n\n    else:\n        return n\ndef same_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple with the same characters.\n    '''\n    if len(tuplex)<m:\n        return 'empty tuple'\n    elif m == 1:"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = deepcopy(tuplex)\n    return (tuplex[0][m],tuplex[1][n])\ndef tuple_to_num(tuplex):\n    '''\n    Write a function to convert a tuple to a number.\n    '''\n    return (tuplex[0]*10**len(str(tuplex[1]))) + tuplex[1]\ndef tuple_to_num_list(tuplex_list):\n    '''\n    Write a function to convert a tuple to a list\n    '''\n    num_list = []\n    for i in tuplex_list:\n        num_list.append(tuple_to_num(i))\n    return num_list\ndef left_tuple(tuplex,n):\n    '''\n    Write a function to get a tuple left to a given number.\n    '''\n    return (tuplex[0],tuplex[1][:n])\ndef tuple_add(tuplex,n):\n    '''\n    Write a function to add a tuple by a given number.\n    '''\n    return (tuplex[0]+n,tuplex[1])\ndef tuple_mul(tuplex,n):\n    '''\n    Write a function to multiply a tuple by a given number.\n    '''\n    return (tuplex[0]*n,tuplex[1])\ndef tuple_eq(tuplex_1,tuplex_2):\n    '''\n    Write a function to compare two tuples.\n    '''\n    return tuple_to_num_list(tuplex_1)==tuple_to_num_list(tuplex_2)\ndef tuple_append(tuplex,n):\n    '''\n    Write a function to append a tuple by a given number.\n    '''\n    return (tuplex[0],tuplex[1]+n)\ndef tuple_reverse(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return (tuplex[1],tuplex[0])\ndef tuple_to_list(tuplex):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return list(tuplex[0]) + list(tuplex[1])\ndef tuple_to_list_from_num(tuplex):\n    '''\n    Write a function to convert a tuple to a list from a number.\n    '''\n    return [int(x) for x in list(str(tuplex[0]))]+list(str(tuplex[1]))\ndef tuple_to_list_from_num_reverse(tuplex):\n    '''\n    Write a function to convert a tuple to a list from a number.\n    '''\n    return list(str(tuplex[0])) + [int(x) for x in list(str(tuplex[1]))]\ndef list_to_tuple(num_list):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(num_list[0:len(num_list)/2]),tuple(num_list[len(num_list)/2:len(num_list)])\ndef num_to_list(num):\n    '''\n    Write a function to convert a number to a list.\n    '''\n    return [int(x) for x in list(str(num))]\ndef list_to_tuple_from_num(num_list):\n    '''\n    Write a function to convert a list to a tuple from a number.\n    '''\n    return tuple(num_list[0:len(num_list)/2]),tuple(num_list[len(num_list)/2:len(num_list)])\ndef tuple_to_list_from_num(tuplex):\n    '''\n    Write a function to convert a tuple to a list from a number.\n    '''\n    return list(str(tuplex[0])) + list(str(tuplex[1]))\ndef tuple_to_list_from_num_reverse(tuplex):\n    '''\n    Write a function to convert a tuple to a list from a number.\n    '''\n    return list(str(tuplex[1])) + [int(x) for x in list(str(tuplex[0]))]\ndef list_to_tuple_from_num(num_list):\n    '''\n    Write a function to convert a list to a tuple from a number.\n    '''\n    return tuple(num_list[0:len(num_list)/2]),tuple(num_list[len(num_list)/2:len(num_list)])\ndef tuple_to_list_from_num_tuple(tuplex):\n    '''\n    Write a function to convert a tuple to a list from a number.\n    '''\n    return list(str(tuplex[0])) + list(str(tuplex[1]))\ndef tuple_to_list_from_num_tuple_reverse(tuplex):\n    '''\n    Write a function to convert a tuple to a list from a number.\n    '''\n    return list(str(tuplex[1])) + [int(x) for x in list(str(tuplex[0]))]\ndef list_to_tuple_from_num(num_list):\n    '''\n    Write a function to convert a list to a tuple from a number.\n    '''\n    return tuple(num_list[0:len(num_list)/2]),tuple(num_list[len(num_list)/2:len(num_list)])\ndef tuple_to_list_from_num(tuplex):\n    '''\n    Write a function to convert a tuple to a list from a number.\n    '''\n    return list(str(tuplex[0])) + list(str(tuplex[1]))\ndef tuple_to_list_from_num_reverse(tuplex):\n    '''\n    Write a function to convert a tuple to a list from a number.\n    '''\n    return list(str(tuplex[1])) + [int(x) for x in list(str(tuplex[0]))]\ndef list_to_tuple_from_num(num_list):\n    '''\n    Write a function to convert a list to a tuple from a number.\n    '''\n    return tuple(num_list[0:len(num_list)/2]),tuple(num_list[len(num_list)/2:len(num_list)])\ndef list_to_tuple_from_num_reverse(num_list):\n    '''\n    Write a function to convert a list to a tuple from a number.\n    '''\n    return tuple(num_list[len(num_list)/2:len(num_list)]) + tuple(num_list[0:len(num_list)/2])\ndef list_to_tuple_from_num_reverse(num_list):\n    '''\n    Write a function to convert a list to a tuple from a number.\n    '''\n    return tuple(num_list[len(num_list)/2:len(num_list)]) + tuple(num_list[0:len(num_list)/2])\ndef list_to_tuple_from_num_reverse(num_list):\n    '''\n    Write a function to convert a list to a tuple from a number.\n    '''\n    return tuple(num_list[len(num_list)/2:len(num_list)]) + tuple(num_list[0:len(num_list)/2])\ndef tuple_to_list_from_num(tuplex):\n    '''\n    Write a function to convert a tuple to a list from a number.\n    '''\n    return list(str(tuplex[0])) + list(str(tuplex[1]))\ndef tuple_to_list_from_num_reverse(tuplex):\n    '''\n    Write a function to convert a tuple to a list from a number.\n    '''\n    return list(str(tuplex[1])) + [int(x) for x in list(str(tuplex[0]))]\ndef tuple_to_list_from_num_reverse(tuplex):"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < 0 or n < 0:\n        return None\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m-1:n]\ndef list_comprehension(listx,listy):\n    '''\n    Write a function to get a list of tuples of two.\n    '''\n    return [x+y for x in listx for y in listy]\ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a number\n    '''\n    return 1 if n == 1 else n*factorial(n-1)\ndef permutation(n,r):\n    '''\n    Write a function to compute the permutation of a number\n    '''\n    return factorial(n) / factorial(n-r)\ndef set_comprehension(x,y):\n    '''\n    Write a function to get a set from a tuple.\n    '''\n    return set(x)\ndef string_comprehension(string):\n    '''\n    Write a function to get a string from a tuple.\n    '''\n    return ''.join(string)\ndef duplicate_comprehension(listx,):\n    '''\n    Write a function to get duplicated list.\n    '''\n    return [x for x in listx for i in range(2)]\ndef alternate_comprehension(listx,):\n    '''\n    Write a function to get alternate elements.\n    '''\n    return [listx[i] for i in range(len(listx)) if i % 2 == 0]\ndef remove_duplicate_comprehension(listx,):\n    '''\n    Write a function to remove duplicates from list.\n    '''\n    return list(set(listx))\ndef reverse_comprehension(listx,):\n    '''\n    Write a function to reverse a list.\n    '''\n    return listx[::-1]\ndef append_comprehension(listx,):\n    '''\n    Write a function to append elements to list.\n    '''\n    return listx+[4,5,6]\ndef replace_comprehension(listx,):\n    '''\n    Write a function to replace elements in a list.\n    '''\n    return [x if x == 'a' else 'b' for x in listx]\ndef count_comprehension(listx,):\n    '''\n    Write a function to count the elements in a list.\n    '''\n    return len(listx)\ndef get_comprehension(listx,m):\n    '''\n    Write a function to get a list from a tuple.\n    '''\n    return [x[m] for x in listx]\ndef map_comprehension(listx,mapper):\n    '''\n    Write a function to map a list with a function.\n    '''\n    return [mapper(x) for x in listx]\ndef get_comprehension_if(listx,m):\n    '''\n    Write a function to get elements in a list if a condition is true.\n    '''\n    return [x[m] for x in listx if x[m] > 3]\ndef filter_comprehension(listx,filter):\n    '''\n    Write a function to filter a list with a function.\n    '''\n    return [x for x in listx if filter(x)]\ndef find_comprehension(listx,find):\n    '''\n    Write a function to find element in a list.\n    '''\n    return listx.index(find)\ndef generate_comprehension(listx,generator):\n    '''\n    Write a function to generate a list from a generator function.\n    '''\n    return [x for x in generator(listx)]\ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string == string[::-1]\ndef compress_comprehension(listx,):\n    '''\n    Write a function to compress a list.\n    '''\n    return [(x,listx.count(x)) for x in set(listx)]\ndef map_comprehension2(listx,mapper):\n    '''\n    Write a function to map a list with a function.\n    '''\n    return list(map(mapper,listx))\ndef get_comprehension_length(listx,):\n    '''\n    Write a function to get the length of a list.\n    '''\n    return len(listx)\ndef get_comprehension_max(listx,):\n    '''\n    Write a function to get the max value in a list.\n    '''\n    return max(listx)\ndef get_comprehension_min(listx,):\n    '''\n    Write a function to get the min value in a list.\n    '''\n    return min(listx)\ndef get_comprehension_sum(listx,):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    return sum(listx)\ndef get_comprehension_average(listx,):\n    '''\n    Write a function to get the average of a list.\n    '''\n    return sum(listx) / float(len(listx))\ndef get_comprehension_reverse(listx,):\n    '''\n    Write a function to get the reverse of a list.\n    '''\n    return listx[::-1]\ndef print_comprehension(listx,):\n    '''\n    Write a function to print a list.\n    '''\n    print(listx)\ndef deep_comprehension(listx,):\n    '''\n    Write a function to deep copy a list.\n    '''\n    return deepcopy(listx)\ndef remove_comprehension(listx,):\n    '''\n    Write a function to remove elements from a list.\n    '''\n    return [x for x in listx if x!= 'a']\ndef sort_comprehension(listx,):\n    '''\n    Write a function to sort a list.\n    '''\n    return sorted(listx)\ndef shuffle_comprehension(listx,):\n    '''\n    Write a function to shuffle a list.\n    '''\n    return [listx[y] for y in [14,25,30,16,22,17,24,2,7,4,1,8,20,23,9,19,3,15,21,13,11,18,10,14,12,0,9,17,11,20,7,1,6,18,8,4,3,10,13,15,17,12,19,16,22,11,23,3,16,12,6,3,2,25,17,13,19,22,15,23,3,13,18,15,1,11,17,6,20,2,8,19,24,8,17,14,24,1,8,22,2,1,20,8,16,9,19,0,6,2,14,23,1,10,23,12,2,1,15,22,5,13,21,7,3,15,18,11,23,9,16,14,3,22,19,14,0,12,17,6,22,5,18,9,13,8,9,6,10,15,18,3,21,7,15,3,12,11,3,4,14,15,21,0,22,8,17,16,4,23,15,10,11,12,6,22,23,14,9,5,23,6,17,4,11,18,6,5,16,2,11,17,14,0,16,18,10,12,14,20,22,17,23,7,12,18,22,4,1,19,13,14,9,20,7,22,17,10,23,8,1,18,6,11,20,8,11,14,9,1,22,6,8,20,23,9,18,3,0,4,10,7,20,12,4,18,2,16,14,6,22,10,23,12,16,2,11,12,20,12,12,3,22,12"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not (nums1 and nums2):\n        return None\n    if len(nums1) > N:\n        return None\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    assert len(nums1) == len(nums2)\n    assert N <= len(nums1)\n    \n    sorted_nums1 = sorted(nums1)\n    sorted_nums2 = sorted(nums2)\n    \n    result = 0\n    for i in xrange(N):\n        result = max(result, sorted_nums1[i] * sorted_nums2[-i-1])\n    \n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) > N or len(nums2) > N:\n        return None\n    n1 = nums1[:N]\n    n2 = nums2[:N]\n    ans = [n1[i]*n2[i] for i in range(N)]\n    return max(ans)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    n = len(nums1)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort(reverse=True)\n    ans = []\n    for i in range(N):\n        ans.append(nums1[i] * nums2[i])\n    return ans\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def find_prod(nums, N):\n        l = len(nums)\n        if l == 0:\n            return 0\n        if l == 1:\n            return nums[0]\n        n = l // 2\n        return max(find_prod(nums[:n], N), find_prod(nums[n:], N))\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) > N or len(nums2) > N:\n        return -1\n    product = []\n    for i in xrange(N):\n        if len(nums1) > i:\n            product.append(nums1[i]*nums2[i])\n        elif len(nums2) > i:\n            product.append(nums1[i]*nums2[i])\n        else:\n            product.append(nums1[i]*nums2[i])\n    return max(product)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from itertools import product\n    product_nums = []\n    for i in range(N):\n        product_nums.append(list(product(nums1, nums2)))\n    product_nums.sort(key=lambda x: x[0]*x[1])\n    return product_nums[-1][0]*product_nums[-1][1]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1:\n        return None\n    if not nums2:\n        return None\n    if len(nums1) * len(nums2) < N:\n        return None\n    nums1.sort()\n    nums2.sort()\n    ans = 1\n    for i in range(len(nums1)):\n        if i < len(nums2) and nums2[i] < nums1[i]:\n            continue\n        product = 1\n        for j in range(i, len(nums2)):\n            product *= nums2[j]\n            if product > ans:\n                ans = product\n            if j == len(nums2) - 1:\n                break\n        for j in range(i):\n            product = 1\n            for k in range(j, len(nums2)):\n                product *= nums2[k]\n                if product > ans:\n                    ans = product\n                if k == len(nums2) - 1:\n                    break\n    return ans\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        a = nums1[i]\n        b = nums2[i]\n        products.append(a * b)\n    \n    return max(products)\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \ndef binarySearch(a,b,c):\n    '''\n    Write a python function to find the position of a number in a sorted array.\n    '''\n    l=0\n    r=len(a)-1\n    if c<a[l]:\n        return -1\n    while l<=r:\n        m=(l+r)/2\n        if c==a[m]:\n            return m\n        elif c<a[m]:\n            r=m-1\n        else:\n            l=m+1\n    return -1\n    \n    \ndef findMedianSortedArrays(a,b):\n    '''\n    Write a python function to find the median of two sorted arrays.\n    '''\n    m=len(a)+len(b)\n    if m%2==0:\n        return (a[m/2]+b[m/2])/2.0\n    else:\n        return b[m/2]\n    \n    \ndef isPerfectSquare(a):\n    '''\n    Write a python function to find the square root of a perfect square.\n    '''\n    n=int(a**0.5)\n    return (n*n==a)\n    \n    \ndef findSumOfSquares(n):\n    '''\n    Write a python function to find the sum of squares of the first n natural numbers.\n    '''\n    return sum([x**2 for x in range(n+1)])\n    \n    \ndef findSumOfCubedDigits(n):\n    '''\n    Write a python function to find the sum of cubed digits of the first n numbers.\n    '''\n    return sum([int(x)**3 for x in str(n)])\n    \n    \ndef findPair(a,b):\n    '''\n    Write a python function to find the pair of numbers whose sum is equal to a given number.\n    '''\n    b=set(b)\n    for x in a:\n        if x in b:\n            return x,a[x]\n            \ndef findMaxProduct(a):\n    '''\n    Write a python function to find the maximum product of any two integers in a given array.\n    '''\n    a.sort()\n    return max([a[i]*a[i+1] for i in range(len(a)-1)])\n    \n    \ndef findFibonacciNumbers(n):\n    '''\n    Write a python function to find the first n numbers of the Fibonacci Sequence.\n    '''\n    a=[0,1]\n    while len(a)<n:\n        a.append(a[-1]+a[-2])\n    return a\n    \n    \ndef isPermutation(a,b):\n    '''\n    Write a python function to find if two given strings are permutations of each other.\n    '''\n    if len(a)!=len(b):\n        return False\n    a=[x for x in a]\n    b=[x for x in b]\n    a.sort()\n    b.sort()\n    return a==b\n    \n    \ndef findStringAnagram(a,b):\n    '''\n    Write a python function to find the anagram of two strings.\n    '''\n    a=a.lower()\n    b=b.lower()\n    a=sorted(a)\n    b=sorted(b)\n    return a==b\n    \n    \ndef palindromeIndex(s):\n    '''\n    Write a python function to find the index of the first palindrome in a string.\n    '''\n    l=0\n    r=len(s)-1\n    while l<r:\n        if s[l]!=s[r]:\n            return l if s[l]==s[r-1] else r\n        l+=1\n        r-=1\n    return -1\n    \n    \ndef findModularPower(a,b,m):\n    '''\n    Write a python function to find a**b (mod m)\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b%2==0:\n        return (findModularPower(a,b/2,m)**2)%m\n    else:\n        return (findModularPower(a,b-1,m)**2*a)%m\n    \n    \ndef findMaxProduct(a):\n    '''\n    Write a python function to find the maximum product of any two integers in a given array.\n    '''\n    a.sort()\n    return max([a[i]*a[i+1] for i in range(len(a)-1)])\n    \n    \ndef canBeFactored(a,b):\n    '''\n    Write a python function to find if a number can be factored into two other numbers.\n    '''\n    while b!=0:\n        q=a/b\n        r=a%b\n        if r==0:\n            return True\n        a=b\n        b=r\n    return False\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth number of the Fibonacci Sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    return fibonacci(n-1)+fibonacci(n-2)\n    \n    \ndef fibonacciSequence(n):\n    '''\n    Write a python function to find the nth number of the Fibonacci Sequence.\n    '''\n    a=[0,1]\n    while len(a)<n:\n        a.append(a[-1]+a[-2])\n    return a[n-1]\n    \n    \ndef isPrime(n):\n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if n<=1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,n,2):\n        if n%i==0:\n            return False\n    return True\n    \n    \ndef isPrime2(n):\n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if n<=1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n    \n    \ndef findPrimeFactors(n):\n    '''\n    Write a python function to find all the prime factors of a given number.\n    '''\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            if isPrime(i):\n                yield i\n            yield n/i\n            \n            \ndef generatePerfectNumber(n):\n    '''\n    Write a python function to find all the perfect numbers upto a given number.\n    '''\n    for i in range(1,n):\n        sum=0\n        for x in range(1,i):\n            if i%x==0:\n                sum+=x\n        if sum==i:\n            yield i\n            \n            \ndef countPrime(n):\n    '''\n    Write a python function to find the count of the prime numbers upto a given number.\n    '''\n    count=0\n    for x in range(1,n+1):\n        if isPrime(x):\n            count+=1\n    return count\n    \n    \ndef findPrimeFactor(n):\n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    for x in range(2,int(n**0.5)+1):\n        if n%x==0:\n            if isPrime(x):\n                return x\n            return findPrimeFactor(n/x)\n    return n\n    \n    \ndef findPower(a,b,c):\n    '''\n    Write a python function to find the power of a number to another number.\n    '''\n    return pow(a,b)%c\n    \n    \ndef kthPermutation(k):\n    '''\n    Write a python function to find the kt"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return a\n        \n        \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    elif a < b:\n        return a\n    else:\n        return a\n        \n        \ndef gcd(a,b):   \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b)"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif b>a:\n        return b\n    elif a==b:\n        return a\n    else:\n        return None\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n    \ndef division(a,b):   \n    '''\n    Write a python function to find the division of two numbers.\n    '''\n    try:\n        return a / b\n    except ZeroDivisionError:\n        print('Error: Cannot divide by zero')\n        return 'NA'\n        \ndef multiply(a,b):   \n    '''\n    Write a python function to find the multiplication of two numbers.\n    '''\n    return a * b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print a\n    else:\n        print b\nmaximum(4,7)\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_of_characters = ()\n    for char in str1:\n        tuple_of_characters += (char,)\n    return tuple_of_characters\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = ()\n    for i in range(len(str1)):\n        tup = tup + (str1[i],)\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = []\n    for i in str1:\n        tup.append(i)\n    return tuple(tup)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = str1[0]\n    for index in range(1, len(str1)):\n        tuple1 = tuple1 + str1[index]\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    result = []\n    for char in str1:\n        result.append(char)\n    return tuple(result)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return str1\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef tuple_to_string(tup):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    return ''.join(tup)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n and not n & 1:\n        n >>= 1\n        count += 1\n    if count: \n        n |= (1 << count)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & -n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & -n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # 1. Find the position of the right most 1 bit\n    # 2. Flip the right most 1 bit to 0\n    # 3. Flip the leftmost bit with the value of the right most 1 bit \n    # 4. Return the result \n    def set_left_most_unset_bit(n): \n        return n & (n - 1) ^ n \n    return set_left_most_unset_bit(n) \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #get the binary representation of number\n    bit_representation = bin(n)[2:]\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # convert to unsigned int to make sure \n    n = abs(n)\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n ^= n >> 32\n    return n if n < 2**31 else 0\n    \nif __name__ == '__main__': \n    print set_left_most_unset_bit(17)\n    print set_left_most_unset_bit(0)\n    print set_left_most_unset_bit(1)\n    print set_left_most_unset_bit(2)\n    print set_left_most_unset_bit(3)\n    print set_left_most_unset_bit(4)\n    print set_left_most_unset_bit(5)\n    print set_left_most_unset_bit(7"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # loop from the least significant 1 bit\n    for i in range(32): \n        # if there is no 1 bit, return \n        if not (n & 1): \n            return\n        n >>= 1\n    \n    # if we didn't return, set the last bit\n    n |= 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while(n & 1 == 0):\n        n >>= 1\n        i += 1\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = n\n    if n == 0:\n        return n\n    for i in range(32):\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            x = x // 2 + 1\n            break\n    return x\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n&(~(n-1))\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3 * math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 1/3.0 * math.pi * r * r * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=math.pi*(r**2)*h/3\n    return v\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=math.pi*(r**2)*h\n    return v\n    \ndef surface_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    s=math.pi*(r**2)+math.pi*(r**2)*h\n    return s\n    \ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s=math.pi*(r**2)+2*math.pi*r*h\n    return s\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (((1/3)*math.pi)*math.pow(r,2)*h)\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3.0\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r**3\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r**3\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 2.0*math.pi*r**2+2.0*math.pi*r*h+2.0*math.pi*r*h/3.0\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2.0*math.pi*r*2+2.0*math.pi*r*2+2.0*math.pi*r*h+2.0*math.pi*r*h\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4.0*math.pi*r**2\ndef surface_area_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6.0*r**2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r**3\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r**3\ndef perimeter_cube(r):\n    '''\n    Write a function to find the perimeter of a cube.\n    '''\n    return r**3\ndef area_rectangle(b,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return b*h\ndef area_square(r):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return 4*r**2\ndef volume_rectangle(b,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return b*h\ndef volume_square(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return r**2\ndef perimeter_rectangle(b,h):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(b+h)\ndef area_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return b*h/2.0\ndef area_hexagon(r):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    return 6*math.sqrt(3)*r**2/2.0\ndef volume_hexagon(r):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    return math.sqrt(3)*r**3/2.0\ndef length_vector(x,y,z):\n    '''\n    Write a function to find the length of a vector.\n    '''\n    return math.sqrt(x**2+y**2+z**2)\ndef perimeter_triangle(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return b+b+h\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2.0*math.pi*r\ndef perimeter_octagon(r):\n    '''\n    Write a function to find the perimeter of an octagon.\n    '''\n    return 8.0*r\ndef perimeter_dodecagon(r):\n    '''\n    Write a function to find the perimeter of a dodecagon.\n    '''\n    return 12.0*r\ndef area_octagon(r):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    return 8.0*r**2\ndef area_dodecagon(r):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    return 12.0*r**2\ndef area_hexagon(r):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return 6.0*r**2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r**3\ndef surface_area_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return b*h/2.0\ndef surface_area_hexagon(r):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    return 6.0*math.sqrt(3)*r**2/2.0\ndef volume_octagon(r):\n    '''\n    Write a function to find the volume of an octagon.\n    '''\n    return math.sqrt(3)*r**3/2.0\ndef volume_dodecagon(r):\n    '''\n    Write a function to find the volume of a dodecagon.\n    '''\n    return math.sqrt(3)*r**3/2.0\ndef volume_hexagon(r):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    return math.sqrt(3)*r**3/2.0\ndef perimeter_sphere(r):\n    '''\n    Write a function to find the perimeter of a sphere.\n    '''\n    return 4.0*math.pi*r\ndef perimeter_octagon(r):\n    '''\n    Write a function to find the perimeter of an octagon.\n    '''\n    return 8.0*r\ndef perimeter_dodecagon(r):\n    '''\n    Write a function to find the perimeter of a dodecagon.\n    '''\n    return 12.0*r\ndef perimeter_hexaagon(r):\n    '''\n    Write a function to find the perimeter of a hexagon.\n    '''\n    return 6.0*r\ndef perimeter_octahedron(r):\n    '''\n    Write a function to find the perimeter of an octahedron.\n    '''\n    return 12.0*r\ndef perimeter_icosahedron(r):\n    '''\n    Write a function to find the perimeter of a icosahedron.\n    '''\n    return 20.0*r\ndef area_octahedron(r):\n    '''\n    Write a function to find the area of an octahedron.\n    '''\n    return 4.0*r**2\ndef area_dodecagon(r):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    return 4.0*r**2\ndef area_hexahedron(r):\n    '''\n    Write a function to find the area of a hexahedron.\n    '''\n    return 6.0*r**2\ndef area_icosahedron(r):\n    '''\n    Write a function to find the area of a icosahedron.\n    '''\n    return 8.0*r**2\ndef volume_octahedron(r):\n    '''\n    Write a function to find the volume of a octahedron.\n    '''\n    return math.sqrt(3.0/4.0*math.pi*r**3)\ndef volume_dodecagon(r):\n    '''\n    Write a function to find the volume of a dodecagon.\n    '''\n    return math.sqrt(3.0/"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\n    \ndef print_volume_of_cone(r,h):\n    '''\n    Print the volume of a cone.\n    '''\n    print(volume_cone(r,h))\n    \nprint_volume_of_cone(3,4)\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r**2*h)/3\ndef find_the_area_of_a_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*(math.pi*r**2 + math.pi*h*r)\ndef find_volume_of_a_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef find_the_area_of_a_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3*h\ndef find_the_volume_of_a_s"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r**2)*(h/3)\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1./3)*pi*r**2*h\n    return V\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4./3*pi*r**3\n    return V\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V = (1./3)*pi*r**2*h\n    return V\n    \ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a sphere inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a sphere inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_sphere_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a sphere inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_sphere_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_sphere_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4./3*pi*r**3\n    return V\n    \ndef volume_sphere_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4./3*pi*r**3\n    return V\n    \ndef volume_sphere_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4./3*pi*r**3\n    return V\n    \ndef volume_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a sphere inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_sphere_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_sphere_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_sphere_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4./3*pi*r**3\n    return V\n    \ndef volume_sphere_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4./3*pi*r**3\n    return V\n    \ndef volume_sphere_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4./3*pi*r**3\n    return V\n    \ndef volume_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a sphere inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_sphere_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_sphere_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_sphere_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4./3*pi*r**3\n    return V\n    \ndef volume_sphere_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4./3*pi*r**3\n    return V\n    \ndef volume_sphere_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4./3*pi*r**3\n    return V\n    \ndef volume_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a sphere inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_sphere_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder inside.\n    '''\n    V = 4./3*pi*r**2*h\n    return V\n    \ndef volume_cylinder_sphere(r,h):\n    '''\n    Writ"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0:\n        return 0\n    l = 0\n    while n & 1 == 0:\n        l = l + 1\n        n = n >> 1\n    return l\n    \n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    a = int(math.log(n, 2))\n    if a == 0:\n        return n\n    return 2**(a-1)\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 1;\n    while(x <= n):\n        x = x << 1\n    return x >> 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n_log2 = math.floor(math.log2(n))\n    \n    return 2**n_log2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    h = int(math.log(n)/math.log(2))\n    return 2**h\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_pow = 0\n    for x in range(n):\n        if 2 ** x <= n:\n            max_pow = 2 ** x\n    return max_pow\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2 ** (n - 1).bit_length()\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return highest_Power_of_2(n - 1) + 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while (1 << i) < n:\n        i += 1\n    return i - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Base case\n    if (n <= 0): \n        return -1\n    # if n is the power of 2 itself \n    if (n == 1): \n        return n \n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [1, 2]\n    if n < 1:\n        return 'Error: n must be greater than 0'\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    for i in range(3, n+1):\n        lucas.append((lucas[-1]+lucas[-2]) % 10)\n    return lucas[n-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    assert(n >= 0)\n    \n    def lucas_number(n):\n        if n == 0:\n            return 2\n        elif n == 1:\n            return 1\n        else:\n            return lucas_number(n-1) + lucas_number(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    lucas_list = [2, 1]\n    for i in range(2, n):\n        lucas_list.append(lucas_list[-1] + lucas_list[-2])\n    return lucas_list[-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [2, 1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 2:\n        return 1\n    \n    current = find_lucas(n - 1)\n    next_number = (current * (3 * current - 1)) / 2\n    if n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return next_number\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 2\n    elif n==1:\n        return 1\n    else:\n        return find_lucas(n-1)+find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2) \n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # TODO: Implement me\n    return 2\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0: return 2\n    if n==1: return 1\n    if n==2: return 3\n    #lucas_0 = 2\n    #lucas_1 = 1\n    #lucas_2 = 3\n    lucas_0, lucas_1, lucas_2 = 2, 1, 3\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] += string\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(element.format(string))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    res = []\n    for s in list_:\n        res.append(string.format(s))\n    return res\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string == \"\":\n        return\n    if string[0] == \"{\" and string[-1] == \"}\":\n        string = string[1:-1]\n    if string[0] == \"{\":\n        temp = string[1:]\n        for i in range(len(list_)):\n            if temp!= \"\":\n                add_string(list_[i], temp)\n            else:\n                list_[i] = list_[i] + \",\"\n    else:\n        temp = string\n        for i in range(len(list_)):\n            if temp!= \"\":\n                list_[i] = temp + \",\" + list_[i]\n            else:\n                list_[i] = list_[i] + \",\"\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % i for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % item for item in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(0, len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {}\n        d[l1[i]][l2[i]] = l3[i]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l = list(zip(l1, l2, l3))\n    new_dict = {i[0]: {j[0]: j[1] for j in l[i[0]:i[1]]} for i in zip(range(0, len(l), 3), range(1, len(l), 3), range(2, len(l), 3))}\n    return new_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]:{l2[i]:l3[i]} for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {}\n    for i in range(len(l1)):\n        dic[l1[i]] = l2[i]\n        dic[l3[i]] = l1[i]\n    return dic\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {x[0]: {y[0]: x[1] for y in zip(l2, l3)} for x in zip(l1, l2, l3)}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2)!= len(l3):\n        return None\n    else:\n        new_dict = {}\n        for i in range(len(l1)):\n            new_dict[l1[i]] = {l2[i]:l3[i]}\n        return new_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    result['l1'] = l1\n    result['l2'] = l2\n    result['l3'] = l3\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]:{l2[j]:l3[k] for j,k in enumerate(l2)} for i in range(len(l1))}\n    \ndef convert_dict_list(d1, d2, d3):\n    '''\n    Write a function to convert more than one dictionary to nested list.\n    '''\n    return [(k,v,{d2[j]:d3[k] for j in range(len(d2))}) for k in d1]\n    \ndef convert_dict_tuple(d1, d2, d3):\n    '''\n    Write a function to convert more than one dictionary to nested tuple.\n    '''\n    return [(k,v,tuple((d2[j], d3[k]))) for j in range(len(d2)) for k in d1]\n    \ndef convert_dict_set(d1, d2, d3):\n    '''\n    Write a function to convert more than one dictionary to nested set.\n    '''\n    return {(k,v,set((d2[j], d3[k]))) for j in range(len(d2)) for k in d1}\n    \ndef convert_set_list(s1, s2, s3):\n    '''\n    Write a function to convert more than one set to nested list.\n    '''\n    return [(x,{s2[j]:s3[x] for j in range(len(s2))}) for x in s1]\n    \ndef convert_set_tuple(s1, s2, s3):\n    '''\n    Write a function to convert more than one set to nested tuple.\n    '''\n    return [(x,tuple((s2[j], s3[x]))) for j in range(len(s2)) for x in s1]\n    \ndef convert_set_dict(s1, s2, s3):\n    '''\n    Write a function to convert more than one set to nested dictionary.\n    '''\n    return {(x,s2[j],{s3[x]:1 for x in s3}) for j in range(len(s2)) for x in s1}\n    \ndef convert_string_list(s1, s2, s3):\n    '''\n    Write a function to convert more than one string to nested list.\n    '''\n    return [(x,s2[j],s3[x]) for j in range(len(s2)) for x in s1]\n    \ndef convert_string_tuple(s1, s2, s3):\n    '''\n    Write a function to convert more than one string to nested tuple.\n    '''\n    return [(x,tuple((s2[j], s3[x]))) for j in range(len(s2)) for x in s1]\n    \ndef convert_string_dict(s1, s2, s3):\n    '''\n    Write a function to convert more than one string to nested dictionary.\n    '''\n    return {(x,s2[j],{s3[x]:1 for x in s3}) for j in range(len(s2)) for x in s1}\n    \ndef convert_dict_string(d1, d2, d3):\n    '''\n    Write a function to convert more than one dictionary to nested list.\n    '''\n    return [(k,v,(d2[j], d3[k])) for j in range(len(d2)) for k in d1]\n    \ndef convert_dict_tuple_string(d1, d2, d3):\n    '''\n    Write a function to convert more than one dictionary to nested tuple.\n    '''\n    return [(k,v,tuple((d2[j], d3[k]))) for j in range(len(d2)) for k in d1]\n    \ndef convert_dict_set_string(d1, d2, d3):\n    '''\n    Write a function to convert more than one dictionary to nested set.\n    '''\n    return {(k,v,set((d2[j], d3[k]))) for j in range(len(d2)) for k in d1}\n    \ndef convert_set_string_list(s1, s2, s3):\n    '''\n    Write a function to convert more than one set to nested list.\n    '''\n    return [(x,s2[j],s3[x]) for j in range(len(s2)) for x in s1]\n    \ndef convert_set_string_tuple(s1, s2, s3):\n    '''\n    Write a function to convert more than one set to nested tuple.\n    '''\n    return [(x,tuple((s2[j], s3[x]))) for j in range(len(s2)) for x in s1]\n    \ndef convert_set_string_dict(s1, s2, s3):\n    '''\n    Write a function to convert more than one set to nested dictionary.\n    '''\n    return {(x,s2[j],{s3[x]:1 for x in s3}) for j in range(len(s2)) for x in s1}\n    \ndef main():\n    '''\n    Main function\n    '''\n    # Lists\n    l1 = ['a', 'b', 'c']\n    l2 = ['x', 'y', 'z']\n    l3 = [1, 2, 3]\n    print(\"Convert list dictionary: %s\" % convert_list_dictionary(l1, l2, l3))\n    \n    d1 = ['a', 'b', 'c']\n    d2 = ['x', 'y', 'z']\n    d3 = [1, 2, 3]\n    print(\"Convert dictionary list: %s\" % convert_dict_list(d1, d2, d3))\n    \n    t1 = ['a', 'b', 'c']\n    t2 = ['x', 'y', 'z']\n    t3 = [1, 2, 3]\n    print(\"Convert dictionary tuple: %s\" % convert_dict_tuple(d1, t2, t3))\n    \n    s1 = ['a', 'b', 'c']\n    s2 = ['x', 'y', 'z']\n    s3 = [1, 2, 3]\n    print(\"Convert set list: %s\" % convert_set_list(s1, s2, s3))\n    \n    t1 = ['a', 'b', 'c']\n    t2 = ['x', 'y', 'z']\n    t3 = [1, 2, 3]\n    print(\"Convert set tuple: %s\" % convert_set_tuple(s1, t2, t3))\n    \n    d1 = ['a', 'b', 'c']\n    d2 = ['x', 'y', 'z']\n    d3 = [1, 2, 3]\n    print(\"Convert set dictionary: %s\" % convert_set_dict(d1, d2, d3))\n    \n    # Tuples\n    t1 = ['a', 'b', 'c']\n    t2 = ['x', 'y', 'z']\n    t3 = [1, 2, 3]\n    print(\"Convert tuple list: %s\" % convert_tuple_list(t1, t2, t3))\n    \n    t1 = ['a', 'b', 'c']\n    t2 = ['x', 'y', 'z']\n    t3 = [1, 2, 3]\n    print(\"Convert tuple dictionary: %s\" % convert_tuple_dict(t1, t2, t3))\n    \n    s1 = ['a', 'b', 'c']\n    s2 = ['x', 'y', 'z']\n    s3 = [1, 2, 3]\n    print(\"Convert set list: %s\" % convert_set_list(s1, s2, s3))\n    \n    t1 = ['a', 'b', 'c']\n    t2 = ['x', 'y', 'z']\n    t3 = [1, 2, 3]\n    print(\"Convert set tuple: %s\" % convert_set_tuple(s1, t2, t3))\n    \n    d1 = ['a', 'b', 'c']\n    d2 = ['x', 'y', 'z']\n    d3 = ["
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = dict(zip(l1, zip(l2,l3)))\n    return d\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    else:\n        return max (get_max_sum (n / 2) + get_max_sum (n / 3) + get_max_sum (n / 4) + get_max_sum (n / 5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    return n\n    \n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #Using bfs to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    #Here I'm using the n = 2^x + y (x, y = 0, 1, 2,..., 31)\n    #The idea is to start from the 1st level (n = 1), and recursively call the function\n    #f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    #If this function returns a larger value, then this is the new max sum.\n    #Otherwise this is the same as the previous function\n    #So this function will return the max sum of all level n\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        max_sum = 0\n        for i in range(1, n):\n            if i % 2 == 0:\n                max_sum += get_max_sum(i/2)\n            if i % 3 == 0:\n                max_sum += get_max_sum(i/3)\n            if i % 4 == 0:\n                max_sum += get_max_sum(i/4)\n            if i % 5 == 0:\n                max_sum += get_max_sum(i/5)\n            if max_sum > max_sum:\n                max_sum = max_sum\n        return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return n\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(n/2 + get_max_sum(n/2), n/3 + get_max_sum(n/3), n/4 + get_max_sum(n/4), n/5 + get_max_sum(n/5))\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_list = [item]\n            max_len = len(item)\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = -1\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_len_list = input_list[0]\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_len_list = input_list[i]\n    return max_len_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_length_list = [input_list[0]]\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_length = len(input_list)\n    max_length = 0\n    for i in input_list:\n        if max_length < len(i):\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = [i]\n        elif len(i) == max_len:\n            max_list.append(i)\n    print(max_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Lengths of all lists in the input list\n    lengths = [len(li) for li in input_list]\n    max_len = max(lengths)\n    # Index of the list with max_len\n    max_index = lengths.index(max_len)\n    return input_list[max_index]\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_len_list = [input_list[0]]\n    for e in input_list[1:]:\n        if len(e) > max_len:\n            max_len = len(e)\n            max_len_list = [e]\n        elif len(e) == max_len:\n            max_len_list.append(e)\n    return max_len_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = [len(item) for item in input_list]\n    max_length = max(length_list)\n    return input_list[length_list.index(max_length)]\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #split the tuple into a list\n    l = list(test_tup)\n    #create a set to store unique elements\n    s = set()\n    #check if each element in the list is in the set\n    for i in l:\n        if i in s:\n            return False\n        s.add(i)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup_list = list(test_tup)\n    check_set = set()\n    for i in tup_list:\n        if i in check_set:\n            return False\n        else:\n            check_set.add(i)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = list(test_tup)\n    test_list.sort()\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_elements = []\n    for element in test_tup:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    if len(unique_elements) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = {}\n    for char in str1:\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    for key, value in chars.iteritems():\n        if value == 1:\n            return key\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d.keys():\n        if d[i] == 1:\n            return i\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #\n    # if str1 == '':\n    #     return 'empty string'\n    #\n    # for i in range(len(str1)):\n    #     if str1.count(str1[i]) == 1:\n    #         return str1[i]\n    # return 'no non-repeating character'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character')\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1), 'no non-repeating character') if str1 else 'empty string'\n    #\n    # # a more concise version\n    # return next((c for c in str1 if str1.count(c) == 1)"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    myDict = {}\n    for i in str1:\n        if i not in myDict:\n            myDict[i] = 1\n        else:\n            myDict[i] += 1\n    for i in str1:\n        if myDict[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    char_freq = {}\n    \n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n            break\n            \n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    for i in str1:\n        if d[i] == 1:\n            return i\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for x in str1:\n        if str1.count(x) == 1:\n            return x\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize a hash table that can hold all the characters from str1\n    char_hash_table = {}\n    # For each character in str1, add it to the hash table if it's not there already\n    for char in str1:\n        if char not in char_hash_table:\n            char_hash_table[char] = 0\n        char_hash_table[char] += 1\n    # Initialize a list of the indexes of the characters in the hash table that are not repeated\n    non_repeated_indexes = []\n    for i, char in enumerate(str1):\n        if char_hash_table[char] == 1:\n            non_repeated_indexes.append(i)\n    # Return the first character that is not repeated\n    return str1[non_repeated_indexes[0]]\n    \ndef main():\n    str1 = \"abbc\"\n    str2 = \"bcc\"\n    print first_non_repeating_character(str1)\n    print first_non_repeating_character(str2)\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    ch_dict = {}\n    for ch in str1:\n        if ch in ch_dict:\n            ch_dict[ch] += 1\n        else:\n            ch_dict[ch] = 1\n    for ch in str1:\n        if ch_dict[ch] == 1:\n            return ch\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if not str1:\n        return str1\n    \n    dict_ = {}\n    for x in str1:\n        if x not in dict_:\n            dict_[x] = 1\n        else:\n            dict_[x] += 1\n    \n    for key, val in dict_.items():\n        if val == 1:\n            return key\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string)\ndef check_char_with_index(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string) and string[0]==string[-1]\ndef check_char_with_range(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string) and string[0]==string[-1] and string[0]!=string[-1]\ndef check_char_with_re(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(r'^[a-z]$|^([a-z]).*\\1$',string)\ndef check_char_with_re_with_index(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(r'^[a-z]$|^([a-z]).*\\1$',string) and string[0]==string[-1]\ndef check_char_with_re_with_range(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(r'^[a-z]$|^([a-z]).*\\1$',string) and string[0]==string[-1] and string[0]!=string[-1]\ndef check_char_with_re_with_index_and_range(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(r'^[a-z]$|^([a-z]).*\\1$',string) and string[0]==string[-1] and string[0]!=string[-1] and string[0]!=string[-1]\ndef check_char_with_re_with_index_and_range_and_split(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(r'^[a-z]$|^([a-z]).*\\1$',string) and string[0]==string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and len(string)>2\ndef check_char_with_re_with_index_and_range_and_split_with_dot(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(r'^[a-z]$|^([a-z]).*\\1$',string) and string[0]==string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string.find('.')>0\ndef check_char_with_re_with_index_and_range_and_split_with_dot_and_at(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(r'^[a-z]$|^([a-z]).*\\1$',string) and string[0]==string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string.find('@')>0\ndef check_char_with_re_with_index_and_range_and_split_with_dot_and_at_and_long(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(r'^[a-z]$|^([a-z]).*\\1$',string) and string[0]==string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string.find('@')>0 and string.find('.')>0\ndef check_char_with_re_with_index_and_range_and_split_with_dot_and_at_and_long_with_dot(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(r'^[a-z]$|^([a-z]).*\\1$',string) and string[0]==string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string.find('@')>0 and string.find('.')>0\ndef check_char_with_re_with_index_and_range_and_split_with_dot_and_at_and_long_with_dot_and_at(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(r'^[a-z]$|^([a-z]).*\\1$',string) and string[0]==string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string.find('@')>0 and string.find('.')>0\ndef check_char_with_re_with_index_and_range_and_split_with_dot_and_at_and_long_with_dot_and_at_and_long(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(r'^[a-z]$|^([a-z]).*\\1$',string) and string[0]==string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string.find('@')>0 and string.find('.')>0\ndef check_char_with_re_with_index_and_range_and_split_with_dot_and_at_and_long_with_dot_and_at_and_long_with_dot(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(r'^[a-z]$|^([a-z]).*\\1$',string) and string[0]==string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string.find('@')>0 and string.find('.')>0\ndef check_char_with_re_with_index_and_range_and_split_with_dot_and_at_and_long_with_dot_and_at_and_long_with_dot_and_at(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(r'^[a-z]$|^([a-z]).*\\1$',string) and string[0]==string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string[0]!=string[-1] and string.find('@')>0 and string.find('.')>0\ndef check_char_with_re_wit"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \n    \n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\n    \ndef check_string(string):"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    s = re.search(regex, string)\n    return s\nprint(check_char('aa'))\nprint(check_char('b'))\nprint(check_char('aab'))\nprint(check_char('aabb'))\nprint(check_char('abc'))\nprint(check_char('b'))\nprint(check_char('a'))\nprint(check_char('aa'))\nprint(check_char('aa'))\nprint(check_char('aa'))\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if re.match(regex,string) else False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    result = re.match(regex,string)\n    if result is not None:\n        return True\n    else:\n        return False\n        \ndef count_char(string):\n    '''\n    Write a function to count the number of characters in a given string.\n    '''\n    return len(string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex,string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 2:\n        return False\n    first = string[0]\n    last = string[-1]\n    if first == last:\n        return True\n    return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    if len(string) < 2:\n        return True\n    first = string[0]\n    last = string[-1]\n    if first == last:\n        return check_str(string[1:-1])\n    return False\ndef is_vowel(letter):\n    '''\n    Write a function to check whether the given letter is a vowel or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if letter in vowels:\n        return True\n    return False\ndef check_str_vowel(string): \n    '''\n    Write a function to check whether the given string is a vowel or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in string:\n        if letter in vowels:\n            return True\n    return False\ndef is_vowel_str(string): \n    '''\n    Write a function to check whether the given string is a vowel or not.\n    '''\n    for letter in string:\n        if is_vowel(letter):\n            return True\n    return False\ndef check_str_vowel_num(string): \n    '''\n    Write a function to check whether the given string is a vowel or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_num = 0\n    for letter in string:\n        if letter in vowels:\n            vowel_num += 1\n    if vowel_num == 1:\n        return True\n    return False\ndef is_vowel_str_num(string): \n    '''\n    Write a function to check whether the given string is a vowel or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_num = 0\n    for letter in string:\n        if is_vowel(letter):\n            vowel_num += 1\n    if vowel_num == 1:\n        return True\n    return False\ndef check_str_vowel_num_pair(string): \n    '''\n    Write a function to check whether the given string is a vowel or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_num = 0\n    pair_num = 0\n    for letter in string:\n        if letter in vowels:\n            vowel_num += 1\n            if vowel_num % 2 == 1:\n                pair_num += 1\n    if vowel_num == pair_num:\n        return True\n    return False\ndef check_str_vowel_num_pair_last(string): \n    '''\n    Write a function to check whether the given string is a vowel or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_num = 0\n    pair_num = 0\n    for letter in string:\n        if letter in vowels:\n            vowel_num += 1\n            if vowel_num % 2 == 1:\n                pair_num += 1\n            elif vowel_num == 1:\n                pair_num += 1\n    if vowel_num == pair_num:\n        return True\n    return False\ndef check_str_vowel_num_pair_last_str(string): \n    '''\n    Write a function to check whether the given string is a vowel or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_num = 0\n    pair_num = 0\n    for letter in string:\n        if letter in vowels:\n            vowel_num += 1\n            if vowel_num % 2 == 1:\n                pair_num += 1\n            elif vowel_num == 1:\n                pair_num += 1\n    if vowel_num == pair_num:\n        return True\n    return False\ndef check_str_vowel_num_pair_last_num(string): \n    '''\n    Write a function to check whether the given string is a vowel or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_num = 0\n    pair_num = 0\n    for letter in string:\n        if letter in vowels:\n            vowel_num += 1\n            if vowel_num % 2 == 1:\n                pair_num += 1\n            elif vowel_num == 1:\n                pair_num += 1\n    if vowel_num == pair_num:\n        return True\n    return False\ndef check_str_vowel_num_pair_last_num_str(string): \n    '''\n    Write a function to check whether the given string is a vowel or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_num = 0\n    pair_num = 0\n    for letter in string:\n        if letter in vowels:\n            vowel_num += 1\n            if vowel_num % 2 == 1:\n                pair_num += 1\n            elif vowel_num == 1:\n                pair_num += 1\n    if vowel_num == pair_num:\n        return True\n    return False\ndef check_str_vowel_num_pair_last_num_num(string): \n    '''\n    Write a function to check whether the given string is a vowel or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_num = 0\n    pair_num = 0\n    for letter in string:\n        if letter in vowels:\n            vowel_num += 1\n            if vowel_num % 2 == 1:\n                pair_num += 1\n            elif vowel_num == 1:\n                pair_num += 1\n    if vowel_num == pair_num:\n        return True\n    return False\ndef check_str_vowel_num_pair_last_num_num_str(string): \n    '''\n    Write a function to check whether the given string is a vowel or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_num = 0\n    pair_num = 0\n    for letter in string:\n        if letter in vowels:\n            vowel_num += 1\n            if vowel_num % 2 == 1:\n                pair_num += 1\n            elif vowel_num == 1:\n                pair_num += 1\n    if vowel_num == pair_num:\n        return True\n    return False\ndef check_str_vowel_num_pair_last_num_num_num(string): \n    '''\n    Write a function to check whether the given string is a vowel or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_num = 0\n    pair_num = 0\n    for letter in string:\n        if letter in vowels:\n            vowel_num += 1\n            if vowel_num % 2 == 1:\n                pair_num += 1\n            elif vowel_num == 1:\n                pair_num += 1\n    if vowel_num == pair_num:\n        return True\n    return False\ndef check_str_vowel_num_pair_last_num_num_num_str(string): \n    '''\n    Write a function to check whether the given string is a vowel or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_num = 0\n    pair_num = 0\n    for letter in string:\n        if letter in vowels:\n            vowel_num += 1\n            if vowel_num % 2 == 1"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return b\n        elif a<c:\n            return a\n        else:\n            return c\n    else:\n        if a<c:\n            return a\n        elif b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num = [a,b,c]\n    num.sort()\n    return num[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a > b) and (a > c):\n        return a\n    elif (b > c) and (b > a):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<=b:\n        if a<=c:\n            median=a\n        elif b<=c:\n            median=b\n        else:\n            median=c\n    elif a>b:\n        if a<=c:\n            median=a\n        elif c<=b:\n            median=c\n        else:\n            median=b\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a<b and b<c):\n        return b\n    elif (b<a and a<c):\n        return a\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    return (a+b+c)/2\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list_of_numbers = [a,b,c]\n    list_of_numbers.sort()\n    if (len(list_of_numbers) % 2 == 0):\n        median = (list_of_numbers[int(len(list_of_numbers)/2)]+list_of_numbers[int(len(list_of_numbers)/2-1)])/2.0\n    else:\n        median = list_of_numbers[int((len(list_of_numbers)-1)/2)]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b<c or a<c<b:\n        return b\n    elif b<a<c or b<c<a:\n        return a\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n    \ndef find_min(a,b,c):\n    '''\n    Write a function to find the minimum of three numbers.\n    '''\n    return min(a,b,c)\n    \ndef find_max(a,b,c):\n    '''\n    Write a function to find the maximum of three numbers.\n    '''\n    return max(a,b,c)\n    \ndef find_range(a,b,c):\n    '''\n    Write a function to find the range of three numbers.\n    '''\n    return max(a,b,c)-min(a,b,c)\n    \ndef find_factorial(num):\n    '''\n    Write a function to find the factorial of a number.\n    '''\n    factorial=1\n    for i in range(1,num+1):\n        factorial=factorial*i\n    return factorial\n    \ndef find_divisor(num):\n    '''\n    Write a function to find the divisor of a number.\n    '''\n    for i in range(1,num+1):\n        if num%i==0:\n            return i\n        \ndef find_is_perfect(num):\n    '''\n    Write a function to find the is_perfect(Perfect number) of a number.\n    '''\n    s=0\n    for i in range(1,num):\n        if num%i==0:\n            s=s+i\n    return s==num\n    \ndef find_is_abundant(num):\n    '''\n    Write a function to find the is_abundant(Abundant number) of a number.\n    '''\n    s=0\n    for i in range(1,num):\n        if num%i==0:\n            s=s+i\n    return s>num\n    \ndef find_is_deficient(num):\n    '''\n    Write a function to find the is_deficient(Deficient number) of a number.\n    '''\n    return num<(num//2)\n    \ndef find_is_pandigital(num):\n    '''\n    Write a function to find the is_pandigital(Pandigital number) of a number.\n    '''\n    num_str=str(num)\n    temp=''\n    for i in range(0,9):\n        temp=temp+num_str[i]\n    if len(temp)==9:\n        return True\n    return False\n    \ndef find_is_amicable(num):\n    '''\n    Write a function to find the is_amicable(Amicable number) of a number.\n    '''\n    s1=0\n    s2=0\n    for i in range(1,num):\n        if num%i==0:\n            s1=s1+i\n    s1=s1//2\n    for i in range(1,s1):\n        if s1%i==0:\n            s2=s2+i\n    if s1==s2 and num!=s2:\n        return True\n    return False\n    \ndef find_is_truncatable(num):\n    '''\n    Write a function to find the is_truncatable(Truncatable number) of a number.\n    '''\n    if num<10:\n        return False\n    num_str=str(num)\n    for i in range(1,len(num_str)):\n        temp=num_str[i:]\n        if len(temp)!=0:\n            if temp[0]!='0':\n                if int(temp)%int(num_str[:i])!=0:\n                    return False\n    return True\n    \ndef find_is_palindrome(num):\n    '''\n    Write a function to find the is_palindrome(Palindrome number) of a number.\n    '''\n    num_str=str(num)\n    length=len(num_str)\n    for i in range(0,length//2):\n        if num_str[i]!=num_str[length-i-1]:\n            return False\n    return True\n    \ndef find_is_strong(num):\n    '''\n    Write a function to find the is_strong(Strong number) of a number.\n    '''\n    s=0\n    temp=num\n    while temp:\n        digit=temp%10\n        s=s+digit**3\n        temp=temp//10\n    return num==s\n    \ndef find_is_super_strong(num):\n    '''\n    Write a function to find the is_super_strong(Super strong number) of a number.\n    '''\n    s=0\n    temp=num\n    while temp:\n        digit=temp%10\n        s=s+digit**4\n        temp=temp//10\n    return num==s\n    \ndef find_is_powerful(num):\n    '''\n    Write a function to find the is_powerful(Powerful number) of a number.\n    '''\n    s=0\n    temp=num\n    while temp:\n        digit=temp%10\n        s=s+digit**2\n        temp=temp//10\n    return num==s\n    \ndef find_is_automorphic(num):\n    '''\n    Write a function to find the is_automorphic(Automorphic number) of a number.\n    '''\n    s=0\n    temp=num\n    while temp:\n        digit=temp%10\n        s=s+digit\n        temp=temp//10\n    return num==s\n    \ndef find_is_happy(num):\n    '''\n    Write a function to find the is_happy(Happy number) of a number.\n    '''\n    s=0\n    temp=num\n    while temp:\n        digit=temp%10\n        s=s+digit**2\n        temp=temp//10\n    return s==1\n    \ndef find_is_lucky(num):\n    '''\n    Write a function to find the is_lucky(Lucky number) of a number.\n    '''\n    s=0\n    temp=num\n    while temp:\n        digit=temp%10\n        s=s+digit\n        temp=temp//10\n    return s==num\n    \ndef find_is_prime(num):\n    '''\n    Write a function to find the is_prime(Prime number) of a number.\n    '''\n    s=0\n    temp=num\n    while temp:\n        digit=temp%10\n        s=s+digit**2\n        temp=temp//10\n    if num==1:\n        return False\n    elif s%num==0:\n        return False\n    else:\n        return True\n    \ndef find_is_abundant(num):\n    '''\n    Write a function to find the is_abundant(Abundant number) of a number.\n    '''\n    s=0\n    temp=num\n    while temp:\n        digit=temp%10\n        s=s+digit\n        temp=temp//10\n    return s>num\n    \ndef find_is_deficient(num):\n    '''\n    Write a function to find the is_deficient(Deficient number) of a number.\n    '''\n    return num<(num//2)\n    \ndef find_is_pandigital(num):\n    '''\n    Write a function to find the is_pandigital(Pandigital number) of a number.\n    '''\n    num_str=str(num)\n    temp=''\n    for i in range(0,9):\n        temp=temp+num_str[i]\n    if len(temp)==9:\n        return True\n    return False\n    \ndef find_is_truncatable(num):\n    '''\n    Write a function to find the is_truncatable(Truncatable number) of a number.\n    '''\n    if num<10:\n        return False\n    num_str=str(num)\n    for i in range(1,len(num_str)):\n        temp=num_str[i:]\n        if len(temp)!=0:\n            if temp[0]!='0':\n                if int(temp)%int(num_str[:i])"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            if b>c:\n                return b\n            else:\n                return c\n        else:\n            return a\n    elif b>a:\n        if b>c:\n            if a>c:\n                return a\n            else:\n                return c\n        else:\n            return b\n    else:\n        if a>c:\n            if b>c:\n                return b\n            else:\n                return c\n        else:\n            return a\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return reduce(lambda a, b: a + b, [int(digit) for digit in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(x) for x in str(num))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    sum = 0\n    for i in nums:\n        s = str(i)\n        for j in s:\n            sum += int(j)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums = [int(x) for x in str(nums)]\n    return sum(nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_nums = 0\n    for num in nums:\n        num_str = str(num)\n        sum_of_nums += sum([int(d) for d in num_str])\n    return sum_of_nums\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum_digits(nums):\n        s = 0\n        for n in nums:\n            s += sum_of_digits_aux(n)\n        return s\n    def sum_of_digits_aux(n):\n        if n == 0:\n            return 0\n        return n % 10 + sum_of_digits_aux(n // 10)\n    return sum_digits(nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(lambda x: int(x), nums))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = test_tup1[0] ^ test_tup2[0]\n    y = test_tup1[1] ^ test_tup2[1]\n    z = x ^ y\n    return (z, z)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = (test_tup1[0] ^ test_tup2[0]) + (test_tup1[1] ^ test_tup2[1])\n    return xor\n    \n    \n    \ndef hamming_distance(test_tup1, test_tup2):\n    '''\n    Write a function that computes the Hamming distance between the given tuples.\n    '''\n    ham = 0\n    for index in xrange(len(test_tup1)):\n        bit_xor = test_tup1[index] ^ test_tup2[index]\n        bit_count = bit_xor.count(1)\n        ham += bit_count\n    return ham\n    \n    \ndef hamming_distance_strings(string1, string2):\n    '''\n    Write a function that computes the Hamming distance between the given strings.\n    '''\n    ham = 0\n    for index in xrange(len(string1)):\n        bit_xor = string1[index] ^ string2[index]\n        bit_count = bit_xor.count(1)\n        ham += bit_count\n    return ham\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup1 = test_tup1[0]\n    tup2 = test_tup2[0]\n    total = tuple(bitwise_xor_tuple(tup1, tup2))\n    print(total)\n    return total\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #validate input tuples\n    # your code here\n    for tup in [test_tup1, test_tup2]:\n        if not isinstance(tup, tuple):\n            raise TypeError('Input tuples must be a tuple')\n        elif not len(tup) == 2:\n            raise ValueError('Input tuples must be 2-tuples of ints')\n        elif not isinstance(tup[0], int):\n            raise ValueError('Input tuples must be 2-tuples of ints')\n        elif not isinstance(tup[1], int):\n            raise ValueError('Input tuples must be 2-tuples of ints')\n    \n    return tuple([(a if a==b else (a or b) for a,b in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tuple1 = tuple(test_tup1)\n    tuple2 = tuple(test_tup2)\n    result = [i^j for i,j in zip(tuple1, tuple2)]\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise Exception('The passed argument is not a tuple')\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x^y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Length of tuples do not match')\n    return tuple([(a[0] ^ a[1]) for a in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor_tup = ()\n    \n    # WRITE YOUR CODE HERE.\n    bitwise_xor_tup = test_tup1[0] ^ test_tup2[0]\n    \n    # RETURN THE RESULTING TUPLE.\n    return bitwise_xor_tup\n    "
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    print(d)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #Find unique elements in the list\n    dict = {}\n    for elt in test_list:\n        if elt not in dict:\n            dict[elt] = 1\n        else:\n            dict[elt] += 1\n    #Extract the frequency of the elements\n    final_dict = {}\n    for key, val in dict.items():\n        final_dict[val] = key\n    return final_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for key in test_list:\n        if key in freq_dict:\n            freq_dict[key] += 1\n        else:\n            freq_dict[key] = 1\n    return len(freq_dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    frequency = {}\n    for item in test_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return len(frequency.keys())\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    counts = collections.Counter(test_list)\n    return len(counts)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    tups = set()\n    for i in test_list:\n        tups.add(i)\n    return len(tups)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(map(tuple, test_list)))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for word in test_list:\n        freq[word] = freq.get(word,0) + 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(0, len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            add_nested_tuples(test_tup1[i], test_tup2[i])\n        else:\n            result = tuple([test_tup1[i] + test_tup2[i]])\n            return result\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"tuple lengths do not match\")\n    return tuple(x + y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    list_tup1 = []\n    list_tup2 = []\n    for tup1 in test_tup1:\n        list_tup1.append(tup1)\n    for tup2 in test_tup2:\n        list_tup2.append(tup2)\n    new_tup = []\n    for index in range(len(list_tup1)):\n        tup = (list_tup1[index]+list_tup2[index])\n        new_tup.append(tup)\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (test_tup1[0]+test_tup2[0], test_tup1[1]+test_tup2[1])\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple( map(lambda x,y: x+y, test_tup1, test_tup2) )\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return [(i + j) for i, j in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) is tuple:\n            add_nested_tuples(test_tup1[i], test_tup2[i])\n        else:\n            test_tup1[i] += test_tup2[i]\n    return test_tup1\n    \nprint(add_nested_tuples((1,2),(3,4)))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    lst3 = [lst1[i]+lst2[i] for i in range(len(lst1))]\n    return tuple(lst3)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # make a shallow copy of the given tuples\n    test_tup = list(test_tup1)\n    for i, item in enumerate(test_tup2):\n        test_tup[i] += item\n    return tuple(test_tup)\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef power(a,b):\n    '''\n    Write a python function to find a number raised to a power.\n    '''\n    return a**b\n    \ndef multiply(a,b):\n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    return a*b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>=b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \n    "
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\ndef sort(arr):\n    '''\n    Write a python function to sort the array in ascending order.\n    '''\n    if arr == []:\n        return arr\n    else:\n        pivot = arr[0]\n        smaller,equal,larger = [],[],[]\n        for num in arr:\n            if num < pivot:\n                smaller.append(num)\n            elif num > pivot:\n                larger.append(num)\n            else:\n                equal.append(num)\n        return sort(smaller) + equal + sort(larger)\ndef string_join(arr):\n    '''\n    Write a python function to join the elements of an array of strings.\n    '''\n    if arr == []:\n        return arr\n    else:\n        return arr[0] + string_join(arr[1:])\ndef sort_dictionary(arr):\n    '''\n    Write a python function to sort the dictionary in ascending order.\n    '''\n    if arr == []:\n        return arr\n    else:\n        return sorted(arr, key=lambda arr: arr[1])\ndef print_string(arr):\n    '''\n    Write a python function to print the elements of an array of strings.\n    '''\n    if arr == []:\n        return arr\n    else:\n        print arr[0]\n        return print_string(arr[1:])\ndef add_string(arr):\n    '''\n    Write a python function to add the elements of an array of strings.\n    '''\n    if arr == []:\n        return arr\n    else:\n        return arr[0] + add_string(arr[1:])\ndef len_string(arr):\n    '''\n    Write a python function to return the length of an array of strings.\n    '''\n    if arr == []:\n        return arr\n    else:\n        return 1 + len_string(arr[1:])\ndef sort_string(arr):\n    '''\n    Write a python function to sort the array of strings in alphabetical order.\n    '''\n    if arr == []:\n        return arr\n    else:\n        pivot = arr[0]\n        smaller,equal,larger = [],[],[]\n        for num in arr:\n            if num < pivot:\n                smaller.append(num)\n            elif num > pivot:\n                larger.append(num)\n            else:\n                equal.append(num)\n        return sort_string(smaller) + equal + sort_string(larger)\ndef select(arr,index):\n    '''\n    Write a python function to select the ith element of an array.\n    '''\n    if arr == []:\n        return arr\n    else:\n        return select(arr[1:],index) if index < len(arr) else arr[0]\ndef search(arr,target):\n    '''\n    Write a python function to search the array for a target element.\n    '''\n    if arr == []:\n        return arr\n    else:\n        if arr[0] == target:\n            return arr[0]\n        else:\n            return search(arr[1:],target)\ndef multiply(arr):\n    '''\n    Write a python function to multiply all the elements of an array.\n    '''\n    if arr == []:\n        return arr\n    else:\n        return arr[0] * multiply(arr[1:])\ndef reverse(arr):\n    '''\n    Write a python function to reverse an array in place.\n    '''\n    if arr == []:\n        return arr\n    else:\n        arr.reverse()\n        return reverse(arr[1:])\ndef max_element(arr):\n    '''\n    Write a python function to return the maximum element in an array.\n    '''\n    if arr == []:\n        return arr\n    else:\n        maximum = arr[0]\n        for num in arr:\n            if num > maximum:\n                maximum = num\n        return maximum\ndef min_element(arr):\n    '''\n    Write a python function to return the minimum element in an array.\n    '''\n    if arr == []:\n        return arr\n    else:\n        minimum = arr[0]\n        for num in arr:\n            if num < minimum:\n                minimum = num\n        return minimum\ndef to_bool(arr):\n    '''\n    Write a python function to convert an array to a boolean array.\n    '''\n    if arr == []:\n        return arr\n    else:\n        if arr[0] == True or arr[0] == False:\n            return to_bool(arr[1:])\n        else:\n            return [arr[0]] + to_bool(arr[1:])\ndef increment_string(arr):\n    '''\n    Write a python function to increment an array of strings.\n    '''\n    if arr == []:\n        return arr\n    else:\n        if arr[0][-1].isdigit():\n            return increment_string(arr[1:]) + [arr[0] + str(int(arr[0][-1]) + 1)]\n        else:\n            return [arr[0]] + increment_string(arr[1:])\ndef substring(arr,start,end):\n    '''\n    Write a python function to return the substring of an array.\n    '''\n    if arr == []:\n        return arr\n    else:\n        if start < end:\n            return substring(arr[1:],start,end)\n        else:\n            return arr[0][start:end+1]\ndef duplicate(arr):\n    '''\n    Write a python function to return the duplicate elements of an array.\n    '''\n    if arr == []:\n        return arr\n    else:\n        if arr[0] in arr[1:]:\n            return duplicate(arr[1:])\n        else:\n            return [arr[0]] + duplicate(arr[1:])\ndef intersect(arr1,arr2):\n    '''\n    Write a python function to return the intersection of two arrays.\n    '''\n    if arr1 == []:\n        return arr2\n    else:\n        if arr2 == []:\n            return arr1\n        else:\n            if arr1[0] in arr2:\n                return arr1[0] + intersect(arr1[1:],arr2)\n            else:\n                return intersect(arr1[1:],arr2)\ndef union(arr1,arr2):\n    '''\n    Write a python function to return the union of two arrays.\n    '''\n    if arr1 == []:\n        return arr2\n    else:\n        if arr2 == []:\n            return arr1\n        else:\n            if arr1[0] in arr2:\n                return arr1[0] + union(arr1[1:],arr2)\n            else:\n                return arr2[0] + union(arr1,arr2[1:])\ndef join(arr1,arr2):\n    '''\n    Write a python function to join two arrays.\n    '''\n    if arr1 == []:\n        return arr2\n    else:\n        return arr1[0] + join(arr1[1:],arr2)\ndef concat(arr1,arr2):\n    '''\n    Write a python function to concatenate two arrays.\n    '''\n    if arr1 == []:\n        return arr2\n    else:\n        return arr1 + concat(arr1,arr2)\ndef unique(arr):\n    '''\n    Write a python function to return the unique elements of an array.\n    '''\n    if arr == []:\n        return arr\n    else:\n        if arr[0] not in arr[1:]:\n            return arr[0] + unique(arr[1:])\n        else:\n            return unique(arr[1:])\ndef string_product(arr):\n    '''\n    Write a python function to return the product of the elements of an array of strings.\n    '''\n    if arr == []:\n        return arr\n    else:\n        return arr[0] * string_product(arr[1:])\ndef add_digits(num):\n    '''\n    Write a python function to add the digits of an integer"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in range(len(tuplex)):\n        if tuplex[x] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i==tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i == tuple1: \n            return True \n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuplex.count(tuple1)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #print(\"tuplex:\",tuplex)\n    #print(\"tuple1:\",tuple1)\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print 'Element is present in the tuple'\n    else:\n        print 'Element is not present in the tuple'\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return any(item == tuplex for item in tuple1)\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = (x&0x55555555) + ((x&0xaaaaaaaa) >> 1)\n    x = (x&0x33333333) + ((x&0xcccccccc) >> 2)\n    x = (x&0x0f0f0f0f) + ((x&0xf0f0f0f0) >> 4)\n    x = (x&0x00ff00ff) + ((x&0xff00ff00) >> 8)\n    x = (x&0x0000ffff) + ((x&0xffff0000) >> 16)\n    return x\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    count = 0\n    for digit in str(x):\n        if int(digit) % 2!= 0:\n            count += 1\n    if count % 2 == 0:\n        print(\"The number {0} is even\".format(x))\n    else:\n        print(\"The number {0} is odd\".format(x))\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x & 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    n = len(str(x))\n    for i in range(n):\n        if int(str(x)[i])%2!=0:\n            return 1\n    return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 1 if (x & 1) else 0\n    \ndef find_Odd_Position(x):\n    '''\n    Write a python function to find the position of the odd digit in the given number. \n    '''\n    return x & (-x)\n    \ndef find_Even_Position(x):\n    '''\n    Write a python function to find the position of the even digit in the given number. \n    '''\n    return x & (x-1)\n    \ndef convert_To_Binary(x):\n    '''\n    Write a python function to convert a given positive number into its equivalent binary representation.\n    '''\n    return ''.join(map(str, (bin(x).split('b'))[1]))\n    \ndef find_Max_Xor_In_List(list_of_numbers):\n    '''\n    Write a python function to find the maximum of the power of 2 in the given list of numbers.\n    '''\n    return max([find_Parity(x) for x in list_of_numbers])\n    \ndef find_Max_Xor_In_List_2(list_of_numbers):\n    '''\n    Write a python function to find the maximum of the power of 2 in the given list of numbers.\n    '''\n    if (len(list_of_numbers) == 1):\n        return 0\n    else:\n        return 1 + find_Max_Xor_In_List_2(list_of_numbers[:-1])\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return bin(x).count('1') % 2\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return 'Parity is even'\n    else:\n        return 'Parity is odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        print(\"Parity is Even\")\n    else:\n        print(\"Parity is Odd\")\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    bigger_num = []\n    while n > 0:\n        bigger_num.append(n % 10)\n        n = n // 10\n    \n    for i in range(len(bigger_num)-1, 0, -1):\n        if bigger_num[i] > bigger_num[i-1]:\n            bigger_num[i-1] = bigger_num[i]\n        else:\n            break\n    bigger_num[i] = bigger_num[i-1] + 1\n    return bigger_num\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # if n<10, return n\n    if n<10:\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # base case\n    if n < 10:\n        return n\n    # split into digits\n    digits = []\n    while n:\n        digits.append(n % 10)\n        n = n // 10\n    \n    # re-arrange digits\n    result = []\n    for i in range(len(digits)-1, -1, -1):\n        while len(result) < i + 1:\n            result.append(0)\n        result[i] = max(result[i], digits[i])\n    \n    # convert to integer\n    result = int(''.join(str(x) for x in result))\n    \n    # return\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = list(str(n))\n    i = len(num) - 1\n    while i > 0 and num[i] <= num[i - 1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(num) - 1\n    while num[i - 1] <= num[j]:\n        j -= 1\n    num[i - 1], num[j] = num[j], num[i - 1]\n    num[i:] = sorted(num[i:])\n    return int(''.join(num))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    flag = True\n    while flag:\n        flag = False\n        for i in range(len(s) - 1):\n            if s[i] < s[i+1]:\n                s = s[:i+1] + s[i+1:][::-1]\n                flag = True\n                break\n        if flag:\n            s = '0' + s\n    return int(s)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    count = 0\n    s = list(str(n))\n    for i in range(len(s)-1):\n        if int(s[i]) < int(s[i+1]):\n            x = s[i]\n            y = s[i+1]\n            s[i] = y\n            s[i+1] = x\n            count += 1\n    if count == 0:\n        return None\n    s = ''.join(s)\n    if s[-1] == '0':\n        s = s[:-1]\n    return int(s)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    from itertools import permutations\n    l = list(permutations(str(n)))\n    for i in l:\n        i = int(''.join(i))\n        if i>n:\n            print i\n            return\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    lst = [int(d) for d in str(n)]\n    print(lst)\n    i = 0\n    while i < len(lst) - 1:\n        if lst[i] < lst[i+1]:\n            pass\n        else:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n            i += 1\n    print(lst)\n    return int(''.join([str(x) for x in lst]))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        a = list(str(n))\n        l = len(a)\n        s = -1\n        for i in range(l-2, -1, -1):\n            if a[i] < a[i+1]:\n                s = i\n                break\n        if s == -1:\n            a[-1] = a[-1] + 1\n            for i in range(l-1, s, -1):\n                a[i] = 0\n            return int(''.join(a))\n        else:\n            a[s], a[s+1] = a[s+1], a[s]\n            for i in range(s+1, l):\n                a[i] = 0\n            return int(''.join(a))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    out = []\n    while n:\n        out.append(n%10)\n        n = n//10\n    out.reverse()\n    out = [str(x) for x in out]\n    out = ''.join(out)\n    return int(out)\n    \ndef rearrange_smaller(n):\n    '''\n    Write a function to create the next smaller number by rearranging the digits of a given number.\n    '''\n    out = []\n    while n:\n        out.append(n%10)\n        n = n//10\n    out.reverse()\n    out = [str(x) for x in out]\n    out = ''.join(out)\n    return int(out)\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    res = []\n    i,j,k = 0,0,k\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] + nums2[j] < 0:\n            i += 1\n        elif nums1[i] + nums2[j] > 0:\n            j += 1\n        else:\n            res.append((nums1[i], nums2[j]))\n            i += 1\n            j += 1\n        if len(res) == k:\n            break\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    pq = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(pq, (-nums1[i] - nums2[j], i, j))\n            if len(pq) > k:\n                heapq.heappop(pq)\n    pairs = []\n    while pq:\n        pairs.append([-pq[0][0], nums1[pq[0][1]], nums2[pq[0][2]]])\n        heapq.heappop(pq)\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n    pq = []\n    for i in xrange(k):\n        heapq.heappush(pq, [nums1[i] + nums2[0], i, 0])\n    for i in xrange(k, len(nums1)):\n        if pq[0][0] > nums1[i] + nums2[0]:\n            heapq.heappop(pq)\n            heapq.heappush(pq, [nums1[i] + nums2[0], i, 0])\n    res = []\n    for i in xrange(k):\n        res.append([nums1[pq[i][1]], nums2[pq[i][2]]])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n1, n2 = len(nums1), len(nums2)\n    if n1 == 0 or n2 == 0:\n        return []\n    res = []\n    if n1 > n2:\n        nums1, nums2 = nums2, nums1\n        n1, n2 = n2, n1\n    for i in range(n1):\n        heap = []\n        for j in range(n2):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i]+nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i]+nums2[j], i, j))\n        for item in heap:\n            res.append([nums1[item[1]], nums2[item[2]]])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2: return []\n    minHeap = [(nums1[i], i, 0) for i in range(len(nums1))]\n    heapq.heapify(minHeap)\n    ans = []\n    while k>0 and minHeap:\n        curr = heapq.heappop(minHeap)\n        k-=1\n        if k>0:\n            ans.append([curr[0], nums2[curr[2]]])\n        if curr[2]<len(nums2)-1:\n            heapq.heappush(minHeap, (nums2[curr[2]], curr[2], curr[2]+1))\n    return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 == [] or nums2 == []:\n        return []\n    if k == 0:\n        return []\n    def find_k_pairs(arr, k):\n        # arr, k = [], 3\n        # if len(arr) == 2:\n        #     return arr\n        # return find_k_pairs(arr[1:], k)\n        # return sorted(find_k_pairs(arr[1:], k) + [(arr[0], arr[0])])[:k]\n        # Find k smallest pairs using heap\n        heap = []\n        for num in arr:\n            heapq.heappush(heap, (num, num))\n        count = 0\n        while count < k:\n            # print(heap)\n            smallest_pair = heapq.heappop(heap)\n            count += 1\n            yield smallest_pair\n    return find_k_pairs(nums1 + nums2, k)\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k>len(nums1) or k>len(nums2):\n        return []\n    dic={}\n    for i in nums1:\n        if i in dic:\n            dic[i].append(nums2[0])\n        else:\n            dic[i]=[nums2[0]]\n    result=[]\n    if k==1:\n        for i in nums2:\n            result.append([i,i])\n        return result\n    pairs=[]\n    for i in nums1:\n        if i in dic:\n            pairs.append([i,dic[i][0]])\n    heapq.heapify(pairs)\n    while k>1:\n        result.append(heapq.heappop(pairs))\n        k-=1\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    count = 0\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if count < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\n                count += 1\n            else:\n                if nums1[i] - nums2[j] < heap[0][0]:\n                    heapq.heappushpop(heap, (-nums1[i] - nums2[j], i, j))\n    return [(nums1[i], nums2[j]) for (diff, i, j) in heap]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0 or len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if k >= len(nums1) * len(nums2):\n        return []\n    dic = {}\n    pq = []\n    for i in range(len(nums1)):\n        dic[nums1[i]] = i\n    for i in range(len(nums2)):\n        heapq.heappush(pq, (nums2[i], i))\n    # print pq\n    res = []\n    while k > 0:\n        curr = heapq.heappop(pq)\n        if curr[0] in dic:\n            # print curr[0]\n            res.append([nums1[dic[curr[0]]], nums2[curr[1]]])\n            k -= 1\n        else:\n            continue\n    return res\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product_list = []\n    for x in list1:\n        for y in list1:\n            product_list.append(x*y)\n    product_list.sort()\n    return product_list[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x: x[0]*x[1])\n    return list1[0][0]*list1[0][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for i in range(len(list1)):\n        min_product = min(min_product, list1[i][0]*list1[i][1])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x: x[0]*x[1], reverse=True)\n    return list1[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = []\n    for i in list1:\n        result.append(i[0]*i[1])\n    return min(result)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = 0\n    for x in range(len(list1)):\n        min_prod = min(min_prod, list1[x][0] * list1[x][1])\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    def min_product_tuple_helper(list1, first, last):\n        if (first == last):\n            return (list1[first][0] * list1[first][1], list1[first])\n        mid = (first + last) // 2\n        return min(min_product_tuple_helper(list1, first, mid), min_product_tuple_helper(list1, mid + 1, last))\n    return min_product_tuple_helper(list1, 0, len(list1) - 1)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = 0\n    list1.sort(key = lambda x: x[1])\n    for i in range(len(list1)):\n        if product == 0:\n            product = list1[i][0] * list1[i][1]\n        else:\n            product = min(product, list1[i][0] * list1[i][1])\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    import operator\n    list1.sort(key = operator.itemgetter(1))\n    return (list1[0][0] * list1[0][1], list1[0][0] * list1[0][1])\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for val in listval:\n        if min > val:\n            min = val\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    minval = listval[0]\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min = listval[0]\n    for val in listval:\n        if val < min:\n            min = val\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for value in listval:\n        if value < minval:\n            minval = value\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #initialize min value to the first value of the list\n    minval = listval[0]\n    #loop through each value\n    for val in listval:\n        #if the current value is less than minval, then set minval to that value\n        if val < minval:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval[0] < listval[1]:\n        return listval[0]\n    else:\n        return listval[1]\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        minval = listval[0]\n        for elem in listval:\n            if elem < minval:\n                minval = elem\n        return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for value in listval:\n        if value < min_val:\n            min_val = value\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    else:\n        if word[0].isupper():\n            result = word[0].lower()\n            for i in range(1, len(word)):\n                if word[i].isupper():\n                    result += word[i].lower()\n                else:\n                    result += word[i]\n            return result\n        else:\n            result = word[0].lower()\n            for i in range(1, len(word)):\n                if word[i].isupper():\n                    result += word[i].lower()\n                else:\n                    result += word[i]\n            return result\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == \"\":\n        return \"\"\n    elif word == \"snake_case\":\n        return \"SnakeCase\"\n    else:\n        return \"\".join([ word[0].upper() + word[1:].lower() if word[0].islower() else word for word in word.split('_') ])\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #TODO: write your code here\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word is None:\n        return None\n    if len(word) == 0:\n        return ''\n    \n    words = re.split('[-_]+', word)\n    i = 0\n    while i < len(words):\n        if words[i] == '':\n            words.pop(i)\n        elif i > 0 and words[i-1] == '':\n            words.pop(i)\n        else:\n            i += 1\n    \n    return ''.join(w.title() for w in words)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    word = word.replace('-','')\n    words = word.split(' ')\n    camelcase = ''\n    for word in words:\n        if word == '':\n            continue\n        if camelcase == '':\n            camelcase += word[0].upper() + word[1:].lower()\n        else:\n            camelcase += word[0].lower() + word[1:].lower()\n    return camelcase\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    list_words = word.split(\"_\")\n    camel_string = \"\"\n    for word in list_words:\n        camel_string += word[0].upper() + word[1:]\n    return camel_string\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(w if w.islower() else '_' + w.lower() for w in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    if len(word) == 1:\n        return word.lower()\n    if word[0] == '_':\n        return word.lower()\n    if word[0] == word[1].lower():\n        return word[0].upper() + word[1:].lower()\n    return word[0].upper() + word[1:].lower()\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2!=0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n    \ndef zerodiv(l):\n    '''\n    Write a python function to return True if all elements in the list l are zero.\n    '''\n    return all(x==0 for x in l)\n    \ndef zerodiv(l):\n    '''\n    Write a python function to return True if all elements in the list l are zero.\n    '''\n    return not l or all(x==0 for x in l)\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = [x for x in l if x % 2 == 0]\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2!=0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for x in l:\n        if x % 2!= 0:\n            l.remove(x)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for n in l:\n        if n%2 == 0:\n            new_list.append(n)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [1,2,3,4,5,6,7,8,9,10,11]\n    # l = [1,2,3,4,5,6]\n    l1 = [x for x in l if x%2 == 0]\n    return l1\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return l[::2]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(zip(*list1))[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item for item, count in itertools.groupby(sorted(list1, key=lambda x: x[n]))]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return 'invalid index'\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [element for element, _ in list1][n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # use enumerate() to get index and element from list1\n    # for t in list1:\n    #     return t[n]\n    return [t[n] for t in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(zip(*list1))[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tuple[n] for tuple in list1]\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                print 'overlapping'\n                return 1\n                break\n    print 'not overlapping'\n    return 0\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1.sort()\n    list2.sort()\n    flag=False\n    for item in list2:\n        if item in list1:\n            flag=True\n            break\n    if flag==True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if not list1 or not list2:\n        return False\n    if list1[0] in list2:\n        return True\n    if list1[-1] in list2:\n        return True\n    return any(overlapping(list1[1:-1],list2) for list1 in list1[1:-1])\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # if all([x for x in list1 if x in list2]):\n    #     return True\n    # else:\n    #     return False\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n    \n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list3 = set(list1)\n    list4 = set(list2)\n    if list3 & list4:\n        print True\n    else:\n        print False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) <= len(list2):\n        for i in list1:\n            if i in list2:\n                return True\n    else:\n        for i in list2:\n            if i in list1:\n                return True\n    return False\n    \n    \ndef character_frequency(str1):  \n    '''\n    Write a python function to count the number of times a character appears in a string.\n    '''\n    d = {}\n    for n in str1:\n        keys = d.keys()\n        if n in keys:\n            d[n] += 1\n        else:\n            d[n] = 1\n    return d\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] * arr[j] > max_product: \n                max_product = arr[i] * arr[j] \n                first = i \n                second = j \n    print 'The pair with highest product is', arr[first], 'and', arr[second], 'with', max_product, 'as its product' \n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<3:\n        print 'No pair'\n        return \n    #sort the array\n    arr.sort()\n    #initialize the max product array\n    max_product = [arr[-1]*arr[-2], arr[0]*arr[1]]\n    #loop through the array and check if the product of two elements is larger than the previous max product\n    for i in range(len(arr)-2):\n        if arr[i]*arr[i+1]>max_product[0]:\n            max_product = [arr[i]*arr[i+1], arr[i]*arr[i+2]]\n    #return the max product array\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    if not arr:\n        return\n    \n    curr_max = arr[0]\n    curr_min = arr[0]\n    \n    for i in xrange(1, len(arr)):\n        if arr[i] < 0:\n            temp = curr_max\n            curr_max = curr_min\n            curr_min = temp\n            \n        curr_max = max(curr_max * arr[i], arr[i])\n        curr_min = min(curr_min * arr[i], arr[i])\n    \n    return curr_max\n    \n    \nif __name__ == \"__main__\":\n    arr = [5, 0, -2, 2, 3, -1, -4, 2, 1, 0]\n    print max_Product(arr)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #Two elements from array are the inputs \n    m = [0]*len(arr)\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i]*arr[j] > m[i]:\n                m[i] = arr[i]*arr[j]\n    return m.index(max(m))\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_value = 1\n    for i in range(len(arr)-1):\n        if arr[i]!= 0:\n            max_value = max(max_value, arr[i] * arr[i+1])\n    return max_value\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)==0:\n        return None\n    max_so_far=arr[0]\n    max_ending_here=arr[0]\n    min_so_far=arr[0]\n    min_ending_here=arr[0]\n    result=arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]<0:\n            temp=max_ending_here\n            max_ending_here=max(arr[i],0)\n            min_ending_here=min(arr[i],0)\n            max_so_far=max(max_so_far,max_ending_here)\n            min_so_far=min(min_ending_here,min_so_far)\n        else:\n            max_ending_here=max(arr[i],max_ending_here*arr[i])\n            min_ending_here=min(arr[i],min_ending_here*arr[i])\n            max_so_far=max(max_so_far,max_ending_here)\n            min_so_far=min(min_ending_here,min_so_far)\n    return max_so_far\ndef main():\n    print max_Product([1,2,3,4,5,6,7,8,9,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20])\n    print max_Product([5,6,7,8,9,10,11,12,13,14,15])\n    print max_Product([5,-4,3,2,-1])\n    print max_Product([-5,-4,-3,-2,-1,0])\n    print max_Product([1,2,3,4])\n    print max_Product([-1,1,2,3,4])\n    print max_Product([5,4,3,2,1])\n    print max_Product([2,3,4,5])\n    print max_Product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n    print max_Product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n    print max_Product([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20])\n    print max_Product([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25])\n    print max_Product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n    print max_Product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return arr\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_so_far = arr[0]\n    min_ending_here = arr[0]\n    for i in xrange(1,len(arr)):\n        if max_so_far < 0:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here * arr[i]\n        if min_so_far > 0:\n            min_ending_here = arr[i]\n        else:\n            min_ending_here = min_ending_here * arr[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if min_ending_here < min_so_far:\n            min_so_far = min_ending_here\n    return max_so_far,min_so_far\n    \ndef maxProduct(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return arr\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_so_far = arr[0]\n    min_ending_here = arr[0]\n    for i in xrange(1,len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if min_ending_here < min_so_far:\n            min_so_far = min_ending_here\n    return max_so_far,min_so_far\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    from functools import reduce\n    \n    m = reduce(lambda x, y: x if x > y else y, arr)\n    \n    max_product = 1\n    for num in arr:\n        max_product *= num / m\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    ans = arr[-1] * arr[-2]\n    return ans\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxProduct = arr[0] * arr[1] * arr[2] \n    if len(arr) == 3: \n        return arr[0] * arr[1] * arr[2]\n    for i in range(len(arr) - 2): \n        for j in range(i + 1, len(arr) - 1): \n            for k in range(j + 1, len(arr)): \n                if arr[i] * arr[j] * arr[k] > maxProduct: \n                    maxProduct = arr[i] * arr[j] * arr[k] \n    return maxProduct \n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    grouped_tups = {}\n    for tup in Input:\n        if tup[0] in grouped_tups.keys():\n            grouped_tups[tup[0]].append(tup)\n        else:\n            grouped_tups[tup[0]] = [tup]\n    return grouped_tups\n    \n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Group_List = []\n    for i in Input:\n        Group_List.append(i[0])\n    return group_list_dic(Group_List)\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # List of common element\n    Common = []\n    # For each element\n    for x in Input:\n        # Get the first element of tuple\n        First = x[0]\n        # Check if its not present in list\n        if First not in Common:\n            # Add it to list\n            Common.append(First)\n    # Print list\n    print(Common)"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    tupleList = Input\n    #tupleList = [('a','b'),('b','a'),('c','a')]\n    #tupleList = [('a','b','c'),('a','b','d'),('a','b','e'),('a','b','f'),('a','b','g'),('a','b','h'),('a','b','i'),('a','b','j'),('a','b','k'),('a','b','l'),('a','b','m'),('a','b','n'),('a','b','o'),('a','b','p'),('a','b','q'),('a','b','r'),('a','b','s'),('a','b','t'),('a','b','u'),('a','b','v'),('a','b','w'),('a','b','x'),('a','b','y'),('a','b','z'),('a','b','A'),('a','b','B'),('a','b','C'),('a','b','D'),('a','b','E'),('a','b','F'),('a','b','G'),('a','b','H'),('a','b','I'),('a','b','J'),('a','b','K'),('a','b','L'),('a','b','M'),('a','b','N'),('a','b','O'),('a','b','P'),('a','b','Q'),('a','b','R'),('a','b','S'),('a','b','T'),('a','b','U'),('a','b','V'),('a','b','W'),('a','b','X'),('a','b','Y'),('a','b','Z'),('a','b','0'),('a','b','1'),('a','b','2'),('a','b','3'),('a','b','4'),('a','b','5'),('a','b','6'),('a','b','7'),('a','b','8'),('a','b','9'),('a','b','@'),('a','b','#'),('a','b','$'),('a','b','%'),('a','b','^'),('a','b','&'),('a','b','*'),('a','b','('),('a','b',')'),('a','b','{'),('a','b',')'),('a','b','['),('a','b',']'),('a','b',':'),('a','b','\\\\'),('a','b','|'),('a','b','`'),('a','b','~'),('a','b','+'),('a','b','='),('a','b','_')]\n    #tupleList = [('a','b','c'),('a','b','d'),('a','b','e'),('a','b','f'),('a','b','g'),('a','b','h'),('a','b','i'),('a','b','j'),('a','b','k'),('a','b','l'),('a','b','m'),('a','b','n'),('a','b','o'),('a','b','p'),('a','b','q'),('a','b','r'),('a','b','s'),('a','b','t'),('a','b','u'),('a','b','v'),('a','b','w'),('a','b','x'),('a','b','y'),('a','b','z'),('a','b','A'),('a','b','B'),('a','b','C'),('a','b','D'),('a','b','E'),('a','b','F'),('a','b','G'),('a','b','H'),('a','b','I'),('a','b','J'),('a','b','K'),('a','b','L'),('a','b','M'),('a','b','N'),('a','b','O'),('a','b','P'),('a','b','Q'),('a','b','R'),('a','b','S'),('a','b','T'),('a','b','U'),('a','b','V'),('a','b','W'),('a','b','X'),('a','b','Y'),('a','b','Z'),('a','b','0'),('a','b','1'),('a','b','2'),('a','b','3'),('a','b','4'),('a','b','5'),('a','b','6'),('a','b','7'),('a','b','8'),('a','b','9'),('a','b','@'),('a','b','#'),('a','b','$'),('a','b','%'),('a','b','^'),('a','b','&'),('a','b','*'),('a','b','('),('a','b',')'),('a','b','{'),('a','b',')'),('a','b','['),('a','b',']'),('a','b',':'),('a','b','\\\\'),('a','b','|'),('a','b','`'),('a','b','~'),('a','b','+'),('a','b','='),('a','b','_')]\n    result = []\n    for t in tupleList:\n        for index, c in enumerate(t):\n            if c in result:\n                break\n            else:\n                if index == len(t)-1:\n                    result.append(c)\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    d = {}\n    for t in Input:\n        key = t[0]\n        if key in d:\n            d[key].append(t)\n        else:\n            d[key] = [t]\n    return d\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List = sorted(Input)\n    List[:] = sorted(List, key = lambda x: x[0])\n    for i in range(len(List)):\n        try:\n            if List[i] == List[i + 1]:\n                List.remove(List[i])\n        except IndexError:\n            pass\n    return List\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initializing result list\n    res = []\n    # iterating through list of tuple\n    for i in Input:\n        # initializing flag to indicate result\n        flag = 1\n        # iterating through each tuple\n        for j in Input:\n            # if current tuple is same as any other tuple,\n            # flag is set to 0 indicating non common element\n            if i == j:\n                flag = 0\n                break\n        # if flag is 1, then append current tuple to result list\n        if flag == 1:\n            res.append(i)\n    # returning the result list\n    return res\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input)==0:\n        return None\n    elif len(Input)==1:\n        return Input[0]\n    else:\n        return [item[0] for item in Input]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # The problem statement is tricky.\n    # The most obvious solution is to use a defaultdict(list) and then add all the first element in the tuples to the dictionary.\n    # Now, we need to group the tuples based on the first element.\n    # The idea is to use a dictionary to store the first element of tuples, and the second element will be a list of tuples.\n    # The key is the first element of tuple.\n    # The value is the list of tuples that has this element as the first element.\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(set(list(zip(*Input))[0]))\n    \ndef group_dict(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(set(list(zip(*Input))[0]))\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    max_len = len(lst[0])\n    for item in lst:\n        if len(item) > max_len:\n            max = item\n            max_len = len(item)\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    temp = lst[0]\n    for i in lst:\n        if len(i) > len(temp):\n            temp = i\n    return temp\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    count = 0\n    n = len(lst)\n    for i in lst:\n        if len(i) > count:\n            count = len(i)\n            ans = i\n    print ans\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if len(i)>max:\n            max=len(i)\n            index=lst.index(i)\n    print \"the word(s) with the maximum length is: \" + str(lst[index])\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    return lst[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(len(i))\n    return max(lst1)\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    res=lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > len(res):\n            res = lst[i]\n    return res\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = -1\n    max_num = -1\n    \n    for num in lst:\n        if len(str(num)) > max_len:\n            max_len = len(str(num))\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = -1\n    for item in lst:\n        if len(item) > max:\n            max = len(item)\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_len_index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_len_index = i\n    return max_len_index,lst[max_len_index]\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        i = round(i)\n        sum += i\n    print(sum*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list_sum = 0\n    for elem in list1:\n        elem = round(elem, 2)\n        list_sum = list_sum + elem\n    list_sum = round(list_sum, 2)\n    print list_sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_numbers = 0\n    for number in list1:\n        rounded = round(number)\n        sum_of_numbers += rounded\n    print sum_of_numbers*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    l = [round(x) for x in list1]\n    print sum(l)*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(x) for x in list1]\n    return rounded_list\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum([round(num, 2) for num in list1]) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    summ = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i],2)\n        summ += list1[i]\n    print(summ * len(list1))\n    return(summ * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for ele in list1:\n        print(round(ele))\n        total += ele\n    print(total * len(list1))\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(round(i))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    total = 0\n    for n in list1:\n        total += round(n)\n    return total * len(list1)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in xrange(2,n+1,2):\n        total = total + i**3\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a=1\n    b=2\n    c=0\n    while(a<=n):\n        if(a%2==0):\n            c=c+a**3\n        a=a+1\n    return c\nprint(cube_Sum(6))\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # cube_sum = 0\n    # for i in range(0, n):\n    #     if i%2 == 0:\n    #         cube_sum = cube_sum + i**3\n    # return cube_sum\n    # return reduce(lambda x, y: x + y**3, range(0, n, 2))\n    return sum(range(0, n, 2))**3\n    \nprint(cube_Sum(100))\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(1, n, 2)])\n    \ndef check_number(number):\n    '''\n    Write a python function to check whether a given number is an Armstrong number or not.\n    '''\n    temp=number\n    total=0\n    while(temp):\n        digit=temp%10\n        total+=digit**3\n        temp//=10\n    if number==total:\n        print('Number is an Armstrong Number')\n    else:\n        print('Number is not an Armstrong Number')\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c=0\n    for i in range(1,n+1):\n        if i%2==0:\n            c=c+i**3\n    return c\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    assert isinstance(n, int), 'The input should be an integer'\n    assert n >=0, 'The input should be a non-negative integer'\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for x in range(1, n):\n        if x % 2 == 0:\n            s += x**3\n    return s\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a = []\n    sum = 0\n    for i in range(n):\n        if i%2==0:\n            a.append(i**3)\n            sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    summation = 0\n    for i in range(n):\n        if i%2 == 0:\n            summation = summation + i**3\n    return summation\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    temp = ''\n    for i in test_tup:\n        temp = temp + str(i)\n        temp = temp + \",\"\n    return temp[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    a,b,c,d,e = test_tup\n    return a+b+c+d+e\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str1 = ''\n    for i in test_tup:\n        str1 = str1 + i + ','\n    return str1[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(tup) for tup in test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for i in test_tup:\n        concatenated_string += str(i)\n    return concatenated_string\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for elem in test_tup:\n        res += str(elem)\n        res += ','\n    return res[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) <= 1:\n        return ''.join(test_tup)\n    else:\n        return test_tup[0] + concatenate_tuple(test_tup[1:])\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum(i*i*i for i in range(n))/(n*n*n)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_list = []\n    for i in range(n+1):\n        cube_list.append(i**3)\n    \n    total = 0\n    for i in range(n+1):\n        total += cube_list[i]\n    avg = total/n\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n\n    \nn = 10\nprint(\"Average of cubes of first 10 natural numbers is: \", find_Average_Of_Cube(n))\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0.0\n    for i in range(1,n+1):\n        sum=sum+i**3\n    average=sum/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    summation = 0\n    for x in range(1, n+1):\n        summation = summation + x**3\n    return summation/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if(n <= 0):\n        return\n    else:\n        print(n**3/n)\n        return find_Average_Of_Cube(n-1)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    assert type(n) == int\n    if n == 0:\n        return 0\n    else:\n        return n**3/float(n)\ndef find_Average_Of_Cube_List(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    assert type(n) == int\n    if n == 0:\n        return 0\n    else:\n        return sum([x**3/float(x) for x in range(1,n+1)])\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=1\n    sum=0\n    while i<=n:\n        sum=sum+i**3\n        i+=1\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum(x**3 for x in range(1,n+1))/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    L=list(map(lambda x:x**3,range(1,n+1)))\n    return sum(L)/len(L)\n    \nprint(find_Average_Of_Cube(10))"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for element in test_tuple:\n        return element[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    if len(test_tuple) < 1:\n        return\n    if isinstance(test_tuple, tuple):\n        return tuple([test_tuple[i][-1] for i in range(len(test_tuple))])\n    return\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(x[-1] for x in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(elem[-1] for elem in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_list = []\n    for i in test_tuple:\n        new_list.append(i[-1])\n    return new_list\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    #print(test_tuple)\n    return [i[-1] for i in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for string in test_tuple:\n        print string[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        new_tuple.append(i[-1])\n    return new_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1],test_tuple))\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    start = 0\n    end = 0\n    count = 0\n    while end < len(list1):\n        if x in list1[start:end+1]:\n            count += 1\n        start += 1\n        end += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    result = 0\n    for i in list1:\n        if i == x:\n            result += 1\n    return result\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    i = 0\n    for x in list1:\n        if x == x:\n            i+=1\n    return i\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    if list1[0] == x:\n        return 1 + count_element_in_list(list1[1:], x)\n    else:\n        return count_element_in_list(list1[1:], x)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2==1, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = [x for x in nums if x%2!= 0]\n    return odd_nums\n    \ndef filter_oddnumbers_listcomprehension(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2!= 0]\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return [x for i,x in enumerate(nums) if nums.index(x) == i]\n    \ndef remove_duplicates_set(nums):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(nums))\n    \ndef remove_duplicates_listcomprehension(nums):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(nums))\n    \ndef remove_duplicates_inplace(nums):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums.index(nums[i])!= i:\n            nums[i], nums[nums.index(nums[i])] = nums[nums.index(nums[i])], nums[i]\n            i += 1\n        else:\n            i += 1\n    return nums\n    \ndef remove_duplicates_inplace_set(nums):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums.index(nums[i])!= i:\n            nums[i], nums[nums.index(nums[i])] = nums[nums.index(nums[i])], nums[i]\n            i += 1\n        else:\n            i += 1\n    return nums\n    \ndef remove_duplicates_inplace_listcomprehension(nums):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(nums))\n    \ndef remove_duplicates_inplace_hashtable(nums):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    d = {}\n    for x in nums:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    return [x for x in d if d[x] == 1]\n    \ndef remove_duplicates_inplace_hashtable_with_keys(nums):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    d = {}\n    for x in nums:\n        d[x] = d.get(x, 0) + 1\n    return [x for x in d if d[x] == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = [num for num in nums if num % 2]\n    return odd_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for n in nums:\n        if n % 2!= 0:\n            odd_nums.append(n)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = list(filter(lambda x: x % 2 == 1, nums))\n    print(odds)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num%2!= 0:\n            yield num\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = dt.split('-')\n    return d[2]+'-'+d[1]+'-'+d[0]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return '-'.join(dt.split('-'))\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    return '{}-{}-{}'.format(dt[1],dt[2],dt[0])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    patt = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = patt.match(dt)\n    if match:\n        groups = match.groups()\n        return '{0}-{1}-{2}'.format(groups[2],groups[1],groups[0])\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[0:2]+'-'+dt[3:5]+'-'+dt[6:10]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_format = dt.split('-')\n    new_format = [int(i) for i in new_format]\n    new_format.reverse()\n    return new_format\n    \n    \ndef date_is_valid(dt):\n    '''\n    Write a function that returns true if the date is valid.\n    '''\n    try:\n        datetime.datetime.strptime(dt, '%Y-%m-%d')\n        return True\n    except:\n        return False\n    \n    \ndef reverse_date(dt):\n    '''\n    Write a function that returns the reverse of the date.\n    '''\n    new_format = dt.split('-')\n    new_format.reverse()\n    return '-'.join(new_format)\n    \n    \ndef get_last_day_of_month(date):\n    '''\n    Write a function that returns the last day of the month of a given date.\n    '''\n    # get the first day of the month\n    first_day = datetime.date(date.year, date.month, 1)\n    # use the same day of the week\n    first_day_of_month = first_day - datetime.timedelta(days=first_day.weekday())\n    # get the last day of the month\n    last_day = first_day_of_month + datetime.timedelta(days=32)\n    return last_day\n    \n    \ndef get_number_of_weeks_in_year(year):\n    '''\n    Write a function that returns the number of weeks of a given year.\n    '''\n    # get the first day of the year\n    first_day = datetime.date(year, 1, 1)\n    # use the same day of the week\n    first_day_of_year = first_day - datetime.timedelta(days=first_day.weekday())\n    # get the last day of the year\n    last_day = first_day_of_year + datetime.timedelta(days=365)\n    # get the number of days in the year\n    days_in_year = last_day - first_day_of_year\n    # get the number of weeks in the year\n    weeks_in_year = days_in_year/7\n    return weeks_in_year\n    \n    \ndef get_number_of_days_in_month(date):\n    '''\n    Write a function that returns the number of days in a given month.\n    '''\n    # get the first day of the month\n    first_day = datetime.date(date.year, date.month, 1)\n    # use the same day of the week\n    first_day_of_month = first_day - datetime.timedelta(days=first_day.weekday())\n    # get the number of days in the month\n    days_in_month = get_last_day_of_month(first_day_of_month) - first_day_of_month + 1\n    return days_in_month\n    \n    \ndef get_first_day_of_week(date):\n    '''\n    Write a function that returns the first day of the week of a given date.\n    '''\n    # get the first day of the year\n    first_day = datetime.date(date.year, 1, 1)\n    # use the same day of the week\n    first_day_of_week = first_day - datetime.timedelta(days=first_day.weekday())\n    # get the first day of the month\n    first_day_of_month = first_day_of_week + datetime.timedelta(days=1)\n    # get the first day of the week\n    first_day_of_week = first_day_of_month + datetime.timedelta(days=(6-first_day_of_month.weekday()))\n    return first_day_of_week\n    \n    \ndef get_last_day_of_week(date):\n    '''\n    Write a function that returns the last day of the week of a given date.\n    '''\n    # get the first day of the week\n    first_day_of_week = get_first_day_of_week(date)\n    # get the last day of the week\n    last_day_of_week = first_day_of_week + datetime.timedelta(days=6)\n    return last_day_of_week\n    \n    \ndef get_number_of_days_in_week(date):\n    '''\n    Write a function that returns the number of days in a given week.\n    '''\n    # get the first day of the week\n    first_day_of_week = get_first_day_of_week(date)\n    # get the last day of the week\n    last_day_of_week = get_last_day_of_week(date)\n    # get the number of days in the week\n    days_in_week = last_day_of_week - first_day_of_week + 1\n    return days_in_week\n    \n    \ndef get_number_of_days_in_year(date):\n    '''\n    Write a function that returns the number of days in a given year.\n    '''\n    # get the first day of the year\n    first_day = datetime.date(date.year, 1, 1)\n    # get the last day of the year\n    last_day = datetime.date(date.year, 12, 31)\n    # get the number of days in the year\n    days_in_year = last_day - first_day + 1\n    return days_in_year\n    \n    \ndef get_last_day_of_year(date):\n    '''\n    Write a function that returns the last day of the year of a given date.\n    '''\n    # get the first day of the year\n    first_day = datetime.date(date.year, 1, 1)\n    # get the last day of the year\n    last_day = datetime.date(date.year, 12, 31)\n    # get the last day of the year\n    last_day_of_year = last_day.replace(month=12, day=31)\n    return last_day_of_year\n    \n    \ndef get_first_day_of_year(date):\n    '''\n    Write a function that returns the first day of the year of a given date.\n    '''\n    # get the first day of the year\n    first_day = datetime.date(date.year, 1, 1)\n    # get the first day of the year\n    first_day_of_year = first_day.replace(month=1, day=1)\n    return first_day_of_year\n    \n    \ndef get_number_of_weeks_in_year(year):\n    '''\n    Write a function that returns the number of weeks of a given year.\n    '''\n    # get the first day of the year\n    first_day = datetime.date(year, 1, 1)\n    # get the last day of the year\n    last_day = datetime.date(year, 12, 31)\n    # get the number of days in the year\n    days_in_year = last_day - first_day + 1\n    # get the number of weeks in the year\n    weeks_in_year = days_in_year/7\n    return weeks_in_year\n    \n    \ndef get_number_of_days_in_month(date):\n    '''\n    Write a function that returns the number of days in a given month.\n    '''\n    # get the first day of the month\n    first_day = datetime.date(date.year, date.month, 1)\n    # get the last day of the month\n    last_day = datetime.date(date.year, date.month, get_last_day_of_month(first_day))\n    # get the number of days in the month\n    days_in_month = last_day - first_day + 1\n    return days_in_month\n    \n    \ndef get_number_of_days_in_year(date):\n    '''\n    Write a function that returns the number of days in a given year.\n    '''\n    # get the first day of the year\n    first_day = datetime.date(date.year"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    p = re.compile('(\\d{4})-(\\d{2})-(\\d{2})')\n    s = p.findall(dt)\n    if s[0][0] == '0000':\n        return '0001-01-01'\n    return s[0][0] + '-' + s[0][1] + '-' + s[0][2]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:]+'-'+dt[3:5]+'-'+dt[:2]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return '-'.join(re.findall('\\d+', dt))\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert date to yyyy-mm-dd\n    temp = dt.split('-')\n    # return '{0}-{1}-{2}'.format(temp[2], temp[1], temp[0])\n    # return '{0}-{1}-{2}'.format(temp[2], temp[1], temp[0])\n    # Convert date to dd-mm-yyyy\n    return '{0}-{1}-{2}'.format(temp[0], temp[1], temp[2])\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3 * h + 1\n    while h > 0:\n        for i in range(h, n):\n            j = i\n            while j >= h and my_list[j] < my_list[j - h]:\n                my_list[j], my_list[j - h] = my_list[j - h], my_list[j]\n                j -= h\n        h //= 3\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    interval = len(my_list) // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) / 2\n    while gap > 0:\n        for i in xrange(gap, len(my_list)):\n            tmp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > tmp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = tmp\n        gap = gap / 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n/2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublistcount = len(my_list) // 2\n    while sublistcount > 0:\n        for startposition in range(sublistcount):\n            gap_InsertionSort(my_list, startposition, sublistcount)\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #Why do we choose an array of length len(my_list)//2?\n    #Because we want to jump by a power of 2.\n    \n    #We do this by dividing the array into arrays of size len(my_list)//2.\n    #Why do we increment by 2 in each iteration?\n    #Because each iteration we want to jump by 2^i.\n    #So if we say len(my_list) = 25\n    #So that means we have to increment by 2^0, 2^1, 2^2... 2^(25-1)\n    \n    #We want to sort the array by using shell sort.\n    #Therefore, we know that the value of the shell in the ith iteration\n    #is the value of the ith element of the previous iteration divided by 2.\n    #Because we want to jump by 2^i.\n    #So if we say len(my_list) = 25\n    #Then in iteration 0 we have:\n    #\n    #    0    1    2    3    4    5    6    7    8    9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24\n    #0    1    2    3    4    5    6    7    8    9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24\n    #                0    1    2    3    4    5    6    7    8    9    10    11    12    13    14    15    16    17    18    19    20    21    22    23\n    #The value of the shell in iteration 0 is the value of the ith element of\n    #the previous iteration divided by 2.\n    #Because we want to jump by 2^0, 2^1, 2^2... 2^(25-1)\n    \n    #Thus we will now use a while loop to iterate over the arrays of size len(my_list)//2\n    #and each iteration will increment by 2^i\n    #Example:\n    #    #my_list = [1,2,3,4,5,6,7,8,9,10]\n    #    #len(my_list) = 10\n    #    #iteration 0:\n    #        #my_list = [1,2,3,4,5,6,7,8,9]\n    #        #len(my_list) = 7\n    #        #iteration 1:\n    #            #my_list = [1,2,3,4,5,6,7]\n    #            #len(my_list) = 6\n    #            #iteration 2:\n    #                #my_list = [1,2,3,4,5,6]\n    #                #len(my_list) = 5\n    #                #iteration 3:\n    #                    #my_list = [1,2,3,4,5]\n    #                    #len(my_list) = 4\n    #                    #iteration 4:\n    #                        #my_list = [1,2,3,4]\n    #                        #len(my_list) = 3\n    #                        #iteration 5:\n    #                            #my_list = [1,2,3]\n    #                            #len(my_list) = 2\n    #                            #iteration 6:\n    #                                #my_list = [1,2]\n    #                                #len(my_list) = 1\n    #                                #iteration 7:\n    #                                    #my_list = [1]\n    #                                    #len(my_list) = 1\n    #                                    #iteration 8:\n    #                                        #my_list = []\n    #                                        #len(my_list) = 0\n    #                                        #iteration 9:\n    #                                            #my_list = []\n    #                                            #len(my_list) = 0\n    #                                            #iteration 10:\n    #                                                #my_list = []\n    #                                                #len(my_list) = 0\n    #                                                #iteration 11:\n    #                                                    #my_list = []\n    #                                                    #len(my_list) = 0\n    #                                                    #iteration 12:\n    #                                                        #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 13:\n    #                                                            #my_list = []\n    #                                                            #len(my_list) = 0\n    #                                                            #iteration 14:\n    #                                                        #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 15:\n    #                                                            #my_list = []\n    #                                                            #len(my_list) = 0\n    #                                                            #iteration 16:\n    #                                                        #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 17:\n    #                                                            #my_list = []\n    #                                                            #len(my_list) = 0\n    #                                                        #iteration 18:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 19:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 20:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 21:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 22:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 23:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 24:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 25:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 26:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 27:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 28:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 29:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 30:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 31:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 32:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 33:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 34:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 35:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 36:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 37:\n    #                                                            #my_list = []\n    #                                                        #len(my_list) = 0\n    #                                                        #iteration 38:\n    #                                                            #my_list = []\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    list_len = len(my_list)\n    gap = list_len // 2\n    while gap > 0:\n        for i in range(gap, list_len):\n            current_val = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_val:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_val\n        gap //= 2\n    return my_list\n    "
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n/2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap/2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3*h+1\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = int(h/3)\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # return ((tup1[i] & tup2[i]) for i in range(len(tup1)))\n    return ((tup1[i] & tup2[i]) for i in test_tup1 if i in test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #Iterate over the first tuple\n    for i in test_tup1:\n        #Iterate over the first tuple\n        for j in test_tup2:\n            #Add the two tuples\n            #print('test_tup1:', i, 'test_tup2:', j)\n            res_tup = tuple(i+j)\n            #print('res_tup:', res_tup)\n            yield res_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 0\n    return tuple(x*y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append((test_tup1[i] & test_tup2[i]))\n    return tuple(res)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    return [(a,b) for a,b in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [x and y for (x, y) in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(map(lambda x, y: x & y, test_tup1, test_tup2)),)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(map(operator.and_, test_tup1, test_tup2))\n"
    }
]