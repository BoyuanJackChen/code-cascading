[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    def get_item_count(test_tup):\n        item_count = {}\n        for item in test_tup:\n            if item in item_count:\n                item_count[item] += 1\n            else:\n                item_count[item] = 1\n        return item_count\n    test_tup1_item_count = get_item_count(test_tup1)\n    test_tup2_item_count = get_item_count(test_tup2)\n    shared_items = []\n    for item in test_tup1_item_count:\n        if item in test_tup2_item_count and test_tup1_item_count[item] == test_tup2_item_count[item]:\n            shared_items.append(item)\n    return shared_items\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1_set = set(test_tup1)\n    test_tup2_set = set(test_tup2)\n    return [x for x in test_tup1_set if x in test_tup2_set]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # your code here\n    set_one = set(test_tup1)\n    set_two = set(test_tup2)\n    intersection = list(set_one.intersection(set_two))\n    return intersection\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #test_tup1 = tuple(test_tup1)\n    #test_tup2 = tuple(test_tup2)\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #print test_tup1, test_tup2\n    if len(test_tup1) > len(test_tup2):\n        return similar_elements(test_tup2, test_tup1)\n    #print test_tup1, test_tup2\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return list(set1.intersection(set2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if test_tup1 == test_tup2:\n        return True\n    return [x for x in test_tup1 if x in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    return [item for item in test_tup1 if item in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = []\n    test_list2 = []\n    for i in test_tup1:\n        test_list1.append(i)\n    for i in test_tup2:\n        test_list2.append(i)\n    return set(test_list1) & set(test_list2)\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if (n%i)==0:\n            return False\n    return True\ndef factorial(n):\n    '''\n    Write a python function to compute factorial of a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n % 2 == 0 and n > 2:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2==0 and n>2:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    else:\n        if n>2 and n%2==0:\n            return False\n        elif n>3 and n%3==0:\n            return False\n        elif n>5 and n%5==0:\n            return False\n        elif n>7 and n%7==0:\n            return False\n        else:\n            return True\ndef is_factor(n,m):\n    '''\n    Write a python function to identify if the number n is a factor of the number m.\n    '''\n    if m%n==0:\n        return True\n    else:\n        return False\ndef is_factorial(n):\n    '''\n    Write a python function to identify if the number n is a factorial of the number m.\n    '''\n    if n==0:\n        return True\n    else:\n        if n>1:\n            return n*is_factorial(n-1)\n        else:\n            return False\ndef is_perfect(n):\n    '''\n    Write a python function to identify if the number n is a perfect number.\n    '''\n    if n<0:\n        return False\n    else:\n        if n==0:\n            return True\n        else:\n            if is_factor(n,math.floor(n/2)+1)==True:\n                return False\n            else:\n                return True\ndef is_power(n,p):\n    '''\n    Write a python function to identify if the number n is a power of the number p.\n    '''\n    if n==p:\n        return True\n    elif n==1:\n        return False\n    else:\n        return is_power(n,p-1)\ndef is_power_of(n,p):\n    '''\n    Write a python function to identify if the number n is a power of the number p.\n    '''\n    if n==p:\n        return True\n    elif n>p:\n        return is_power(n,p+1)\n    else:\n        return False\ndef is_in_between(n,a,b):\n    '''\n    Write a python function to identify if the number n is between the numbers a and b.\n    '''\n    if a<=n<=b:\n        return True\n    else:\n        return False\ndef is_not_in_between(n,a,b):\n    '''\n    Write a python function to identify if the number n is not in between the numbers a and b.\n    '''\n    if is_in_between(n,a,b)==False:\n        return True\n    else:\n        return False\ndef is_palindrome(n):\n    '''\n    Write a python function to identify if the number n is a palindrome.\n    '''\n    temp=n\n    reverse=0\n    while n>0:\n        rem=n%10\n        reverse=(reverse*10)+rem\n        n=n/10\n    if temp==reverse:\n        return True\n    else:\n        return False\ndef is_palindrome_2(n):\n    '''\n    Write a python function to identify if the number n is a palindrome.\n    '''\n    temp=n\n    reverse=0\n    while n>0:\n        rem=n%10\n        reverse=(reverse*10)+rem\n        n=n/10\n    if temp==reverse:\n        return True\n    else:\n        return False\ndef is_rotation(a,b):\n    '''\n    Write a python function to identify if the string a is a rotation of the string b.\n    '''\n    if len(a)==len(b):\n        if b==a+a:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_rotation_2(a,b):\n    '''\n    Write a python function to identify if the string a is a rotation of the string b.\n    '''\n    if len(a)==len(b):\n        if b in a+a:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_rotation_3(a,b):\n    '''\n    Write a python function to identify if the string a is a rotation of the string b.\n    '''\n    if len(a)==len(b):\n        if b in a*2:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_rotation_4(a,b):\n    '''\n    Write a python function to identify if the string a is a rotation of the string b.\n    '''\n    if len(a)==len(b):\n        if b in a*3:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_rotation_5(a,b):\n    '''\n    Write a python function to identify if the string a is a rotation of the string b.\n    '''\n    if len(a)==len(b):\n        if b in a*4:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_rotation_6(a,b):\n    '''\n    Write a python function to identify if the string a is a rotation of the string b.\n    '''\n    if len(a)==len(b):\n        if b in a*5:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_rotation_7(a,b):\n    '''\n    Write a python function to identify if the string a is a rotation of the string b.\n    '''\n    if len(a)==len(b):\n        if b in a*6:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_rotation_8(a,b):\n    '''\n    Write a python function to identify if the string a is a rotation of the string b.\n    '''\n    if len(a)==len(b):\n        if b in a*7:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_rotation_9(a,b):\n    '''\n    Write a python function to identify if the string a is a rotation of the string b.\n    '''\n    if len(a)==len(b):\n        if b in a*8:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_rotation_10(a,b):\n    '''\n    Write a python function to identify if the string a is a rotation of the string b.\n    '''\n    if len(a)==len(b):\n        if b in a*9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_rotation_11(a,b):\n    '''\n    Write a python function to identify if the string a is a rotation of the string b.\n    '''\n    if len(a)==len(b):\n        if b in a*10:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_rotation_12(a,b):\n    '''\n    Write a python function to identify if the string a is a rotation of the string b.\n    '''\n    if len(a)==len(b):\n        if b in a*11:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_rotation_13(a,b):\n    '''\n    Write a python function to identify if the string a is a rotation of the string b.\n    '''\n    if len(a)==len(b):\n        if b in a*12:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_rotation_14(a,b):\n    '''\n    Write a python function to identify if the string a is a rotation of the string b.\n    '''\n    if len(a)==len(b):\n        if b in a*13:\n        "
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    elif n == 1:\n        return False\n    elif n == 3:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n                break\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return True\n    if n==2:\n        return False\n    if n>2 and n%2==0:\n        return True\n    max=int(math.floor(math.sqrt(n)))\n    for i in range(3,1+max,2):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    #n = int(raw_input())\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for x in range(3,int(math.ceil(n**0.5))+1,2):\n        if n%x==0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return []\n    result=[]\n    for i in range(n):\n        hq.heappush(result,nums[0])\n        hq.heappop(nums)\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    queue=[]\n    for i in nums:\n        hq.heappush(queue,i)\n    return [hq.heappop(queue) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n>len(nums):\n        return nums\n    h=[]\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    for j in range(n,len(nums)):\n        if hq[0]>nums[j]:\n            hq[0] = nums[j]\n            hq.heapify(h)\n    return h\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return None\n    nums=[(-x,x) for x in nums]\n    hq.heapify(nums)\n    while n>1:\n        t=hq.heappop(nums)\n        hq.heappush(nums,t)\n        n-=1\n    return [hq.heappop(nums) for x in range(n)]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if not nums:\n        return None\n    nums=[(x,x) for x in nums]\n    hq.heapify(nums)\n    while n>1:\n        t=hq.heappop(nums)\n        hq.heappush(nums,t)\n        n-=1\n    return [hq.heappop(nums) for x in range(n)]\ndef find_missing_number(nums):\n    '''\n    Write a function that takes an array of numbers and returns the missing number.\n    '''\n    s=set()\n    for x in nums:\n        if x in s:\n            s.remove(x)\n        else:\n            s.add(x)\n    for x in range(1,len(nums)+1):\n        if x not in s:\n            return x\ndef find_missing_number_2(nums):\n    '''\n    Write a function that takes an array of numbers and returns the missing number.\n    '''\n    s=set()\n    for x in nums:\n        s.add(x)\n    for x in range(1,len(nums)+1):\n        if x not in s:\n            return x\ndef sum_of_list(nums):\n    '''\n    Write a function that takes an array of numbers and returns the sum of the numbers.\n    '''\n    s=0\n    for x in nums:\n        s+=x\n    return s\ndef find_duplicate_number(nums):\n    '''\n    Write a function that takes an array of numbers and returns the first duplicate number.\n    '''\n    s=set()\n    for x in nums:\n        if x in s:\n            return x\n        else:\n            s.add(x)\ndef find_duplicate_number_2(nums):\n    '''\n    Write a function that takes an array of numbers and returns the first duplicate number.\n    '''\n    s=set()\n    for x in nums:\n        if x in s:\n            return x\n        else:\n            s.add(x)\ndef find_duplicate_number_3(nums):\n    '''\n    Write a function that takes an array of numbers and returns the first duplicate number.\n    '''\n    s=set()\n    for x in nums:\n        if x in s:\n            return x\n        else:\n            s.add(x)\ndef find_rotated_number(nums,target):\n    '''\n    Write a function that takes an array of numbers and returns the index of the number that is closest to the target value.\n    '''\n    s=set()\n    for x in nums:\n        if x in s:\n            return nums.index(x)\n        else:\n            s.add(x)\ndef find_rotated_number_2(nums,target):\n    '''\n    Write a function that takes an array of numbers and returns the index of the number that is closest to the target value.\n    '''\n    n=len(nums)\n    if n==1:\n        return 0\n    s=set()\n    for x in nums:\n        if x in s:\n            return nums.index(x)\n        else:\n            s.add(x)\n    if target<nums[0]:\n        return 0\n    if target>nums[n-1]:\n        return n-1\n    left=0\n    right=n-1\n    while left<right:\n        mid=(left+right)//2\n        if target==nums[mid]:\n            return mid\n        if target<nums[mid]:\n            if target>nums[left]:\n                right=mid\n            else:\n                left=mid+1\n        else:\n            if target<nums[right]:\n                left=mid+1\n            else:\n                right=mid\n    if target==nums[left]:\n        return left\n    if target==nums[right]:\n        return right\ndef search_rotated_sorted_array(nums,target):\n    '''\n    Write a function that takes an array of numbers and returns the index of the number that is closest to the target value.\n    '''\n    if not nums:\n        return None\n    left=0\n    right=len(nums)-1\n    while left<right:\n        mid=(left+right)//2\n        if nums[mid]==target:\n            return mid\n        if nums[mid]>=nums[left]:\n            if target<nums[mid] and target>=nums[left]:\n                right=mid-1\n            else:\n                left=mid+1\n        else:\n            if target>nums[mid] and target<=nums[right]:\n                left=mid+1\n            else:\n                right=mid-1\n    if nums[left]==target:\n        return left\n    if nums[right]==target:\n        return right\ndef search_rotated_sorted_array_2(nums,target):\n    '''\n    Write a function that takes an array of numbers and returns the index of the number that is closest to the target value.\n    '''\n    if not nums:\n        return None\n    left=0\n    right=len(nums)-1\n    while left<right:\n        mid=(left+right)//2\n        if nums[mid]==target:\n            return mid\n        if nums[mid]>nums[right]:\n            if target>=nums[left] and target<nums[mid]:\n                right=mid-1\n            else:\n                left=mid+1\n        else:\n            if target<nums[right] and target>=nums[mid]:\n                left=mid+1\n            else:\n                right=mid-1\n    if nums[left]==target:\n        return left\n    if nums[right]==target:\n        return right\ndef search_rotated_sorted_array_3(nums,target):\n    '''\n    Write a function that takes an array of numbers and returns the index of the number that is closest to the target value.\n    '''\n    if not nums:\n        return None\n    left=0\n    right=len(nums)-1\n    while left<right:\n        mid=(left+right)//2\n        if nums[mid]==target:\n            return mid\n        if nums[mid]>nums[left]:\n            if target>=nums[left] and target<nums[mid]:\n                right=mid-1\n            else:\n                left=mid+1\n        else:\n            if target<nums[right] and target>=nums[mid]:\n                left=mid+1\n            else:\n                right=mid-1\n    if nums[left]==target:\n        return left\n    if nums[right]==target:\n        return right\ndef search_rotated_sorted_array_4(nums,target):\n    '''\n    Write a function that takes an array of numbers and returns the index of the number that is closest to the target value.\n    '''\n    if not nums:\n        return None\n    left=0\n    right=len(nums)-1\n    while left<right:\n        mid=(left+right)//2\n        if nums[mid]==target:\n            return mid\n        if nums[mid]>nums[right]:\n            if target>nums[mid] and target<=nums[right]:\n                left=mid+1\n            else:\n                right=mid-1\n        else:\n            if target<nums[mid] and target>=nums[left]:\n                right=mid-1\n            els"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        print \"Not enough elements\"\n        return None\n    else:\n        hq.heapify(nums)\n        return hq.nlargest(n,nums)\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums) < n:\n        print \"Not enough elements\"\n        return None\n    else:\n        hq.heapify(nums)\n        return hq.nsmallest(n,nums)"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    for i in range(n):\n        hq.append(nums[i])\n    hq.sort(reverse=True)\n    return hq\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for num in nums:\n        hq.append([-num,num])\n    hq = sorted(hq)\n    return [hq[i][1] for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return []\n    if n>len(nums):\n        return nums\n    h = []\n    for i in xrange(n):\n        hq.heappush(h,-nums[i])\n    print h\n    for i in xrange(n,len(nums)):\n        hq.heappush(h,-nums[i])\n        hq.heappop(h)\n    print h\n    return [-hq.heappop(h) for i in xrange(len(h))]\n    \nnums = [1,2,3,4,5]\nn = 3\nprint heap_queue_largest(nums,n)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for num in nums:\n        hq.append(num)\n        if len(hq)>n:\n            hq.remove(hq[0])\n    return hq[::-1]\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq = []\n    for num in nums:\n        hq.append(num)\n        if len(hq)>n:\n            hq.remove(hq[0])\n    return hq\n    \ndef count_the_digit(num):\n    '''\n    Write a function that accepts a number and returns the count of digits in the number. For example:\n    \n    count_the_digit(123) returns 2\n    count_the_digit(26) returns 2\n    count_the_digit(1111) returns 4\n    count_the_digit(999) returns 1\n    count_the_digit(0) returns 1\n    '''\n    num=str(num)\n    return len(num)\n    \ndef swap_nodes_in_pairs(head):\n    '''\n    Given a linked list, swap every two adjacent nodes and return its head.\n    For example,\n    Given 1->2->3->4, you should return the list as 2->1->4->3.\n    Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.\n    '''\n    cur = head\n    while cur and cur.next:\n        cur.val, cur.next.val = cur.next.val, cur.val\n        cur = cur.next.next\n    return head\n    \ndef add_two_numbers(l1,l2):\n    '''\n    You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n    Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)\n    Output: 7 -> 0 -> 8\n    '''\n    cur = dummy = ListNode(None)\n    carry = 0\n    while l1 or l2 or carry:\n        val1 = l1.val if l1 else 0\n        val2 = l2.val if l2 else 0\n        val = val1+val2+carry\n        cur.next = ListNode(val%10)\n        carry = val/10\n        cur = cur.next\n        l1 = l1.next if l1 else None\n        l2 = l2.next if l2 else None\n    return dummy.next\n    \ndef merge_two_lists(l1,l2):\n    '''\n    Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\n    Input: 1->2->4, 1->3->4\n    Output: 1->1->2->3->4->4\n    '''\n    cur = dummy = ListNode(None)\n    while l1 and l2:\n        if l1.val < l2.val:\n            cur.next = l1\n            l1 = l1.next\n        else:\n            cur.next = l2\n            l2 = l2.next\n        cur = cur.next\n    if l1:\n        cur.next = l1\n    else:\n        cur.next = l2\n    return dummy.next\n    \ndef remove_duplicates(head):\n    '''\n    Given a sorted linked list, delete all duplicates such that each element appear only once.\n    Input: 1->1->2->3->3\n    Output: 1->2->3\n    '''\n    cur = dummy = ListNode(None)\n    cur.next = head\n    while cur.next:\n        if cur.next.val == cur.val:\n            cur.next = cur.next.next\n        else:\n            cur = cur.next\n    return dummy.next\n    \ndef reverse_linked_list(head):\n    '''\n    Given a singly linked list, reverse the list, and return the head.\n    For example, given 1->2->3->4->5->NULL, return 5->4->3->2->1->NULL.\n    Your algorithm should use constant space and the input list should be as shallow as possible.\n    '''\n    cur = dummy = ListNode(None)\n    cur.next = head\n    while cur.next:\n        nxt = cur.next\n        cur.next = nxt.next\n        nxt.next = dummy.next\n        dummy.next = nxt\n    return dummy.next\n    \ndef rotate_linked_list(head, k):\n    '''\n    Given a linked list, rotate the list to the right by k places.\n    Do not modify the header/tail nodes.\n    For example, given 1->2->3->4->5->NULL and k = 2, the answer should return 4->5->1->2->3->NULL.\n    Given 1->2->3->4->5->6->7->NULL and k = 3, the answer should return 6->7->1->2->3->4->5->NULL.\n    '''\n    cur = dummy = ListNode(None)\n    cur.next = head\n    while cur.next:\n        nxt = cur.next\n        cur.next = nxt.next\n        nxt.next = dummy.next\n        dummy.next = nxt\n    head = dummy.next\n    tail = dummy\n    while k:\n        tail = tail.next\n        k -= 1\n    while tail:\n        cur = cur.next\n        tail = tail.next\n    cur.next = dummy.next\n    dummy.next = head\n    return dummy.next\n    \ndef is_palindrome(head):\n    '''\n    Given the head of a singly linked list, check if it is a palindrome.\n    A palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g., madam, racecar, or 12321.\n    '''\n    cur = dummy = ListNode(None)\n    cur.next = head\n    while cur.next:\n        nxt = cur.next\n        if not nxt.next:\n            break\n        cur.next = nxt.next\n    while cur.next:\n        nxt = cur.next\n        cur.next = nxt.next\n        nxt.next = dummy.next\n        dummy.next = nxt\n    while dummy.next:\n        if head.val!= dummy.next.val:\n            return False\n        head = head.next\n        dummy = dummy.next\n    return True\n    \ndef has_cycle(head):\n    '''\n    Given a linked list, determine if it has a cycle in it.\n    Follow up: Can you solve it without using extra space?\n    '''\n    cur = head\n    while cur:\n        if cur.val == None:\n            return False\n        cur = cur.next\n        if cur.val == head.val:\n            return True\n    return False\n    \ndef merge_two_sorted_lists(l1,l2):\n    '''\n    Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\n    Input: 1->2->4, 1->3->4\n    Output: 1->1->2->3->4->4\n    '''\n    cur = dummy = ListNode(None)\n    cur.next = l1\n    while cur.next and l2:\n        if cur.next.val < l2.val:\n            cur = cur.next\n        else:\n            nxt = cur.next\n            cur.next = l2\n            l2 = l2.next\n            cur.next.next = nxt\n    if l2:\n        cur.next = l2\n    return dummy.next\n    \ndef reverse_iterative(head):\n    '''\n    Given a singly linked list, reverse the list, and return the head.\n    For example, given 1->2->3->4->5->NULL, you should return 5->4->3->2->1->NULL.\n    Do not use extra space.\n    '''\n    if head is None:\n        return None\n    prev "
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for num in nums:\n        hq.heappush(heap,-1*num)\n        if len(heap)>n:\n            hq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0 \n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x1 = bin(x)\n    x1 = x1[2:]\n    x1 = len(x1)\n    y = len(bin(y))\n    y = y[2:]\n    y = len(y)\n    if (x1!= y):\n        print \"They differ at one bit position only\"\n    else:\n        print \"They are equal at one bit position\"\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x and not x & (x - 1))\n    \ndef is_Prime (x):\n    '''\n    Write a python function to check whether the input integer is a prime number or not.\n    '''\n    if x < 2:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range (3, int(x ** (1/2)) + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n    \ndef is_Palindrome(x):\n    '''\n    Write a python function to check whether the input integer is a palindrome or not.\n    '''\n    reverse_num = 0\n    temp = x\n    while temp > 0:\n        remainder = temp % 10\n        reverse_num = reverse_num * 10 + remainder\n        temp = temp // 10\n    if reverse_num == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1) == 0) and x!= 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x - 1)!= 0:\n        return False\n    else:\n        return is_Power_Of_Two(x - 1)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    words = text.split()\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [s for s in text.split() if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return re.findall('[a-z]+', text, re.I)\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'\\w+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'\\w+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'[a-z]+', text, re.I) if len(s) > 3]\ndef find_char_long(text):\n    return [s for s in re.findall(r'["
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in text.split():\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if text:\n        return re.findall(r'\\b[a-zA-Z0-9]+\\b', text)\n    else:\n        return []\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.split(\" \")\n    new_text = []\n    for item in text:\n        if len(item) >= 4:\n            new_text.append(item)\n    return new_text\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    s=text.split(' ')\n    result=[]\n    for word in s:\n        if len(word)>=4:\n            result.append(word)\n    return result\ndef word_count(text):\n    '''\n    Write a function to count the number of words in a text file.\n    '''\n    return len(text.split(' '))\ndef capitalize(text):\n    '''\n    Write a function that takes a string of text and capitalizes the first letter of each word if the word is not already capitalized.\n    '''\n    return text.title()\ndef strip(text):\n    '''\n    Write a function to remove leading and trailing spaces from a string.\n    '''\n    return text.strip()\ndef char_count(text):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    return len(text)\ndef lower(text):\n    '''\n    Write a function to convert a string to all lowercase letters.\n    '''\n    return text.lower()\ndef split(text, split_char):\n    '''\n    Write a function to split a string into a list of words based on a character.\n    '''\n    return text.split(split_char)\ndef get_last_word(text):\n    '''\n    Write a function to return the last word in a string.\n    '''\n    return text.split(' ')[-1]\ndef sort_word(text):\n    '''\n    Write a function to sort the words in a string in alphabetical order.\n    '''\n    return sorted(text.split(' '))\ndef reverse(text):\n    '''\n    Write a function to reverse a string.\n    '''\n    return text[::-1]\ndef test():\n    assert find_char_long('This is a long string')==['long','string']\n    assert word_count('This is a long string')==5\n    assert capitalize('Python is great')=='Python Is Great'\n    assert strip('  Python is great ')=='Python is great'\n    assert char_count('Python is great')==12\n    assert lower('Python is great')=='python is great'\n    assert split('Python is great','')==['Python','is','great']\n    assert get_last_word('This is a long string')=='string'\n    assert sort_word('is this a long string')==['long','string']\n    assert reverse('This is a long string')=='gnirts aoluls'\n    assert lower('This is a long string')=='this is a long string'\n    assert split('   this is a long   string','')==['this','is','a','long','string']\n    assert get_last_word('This is a long string')=='string'\n    assert sort_word('is this a long string')==['long','string']\n    assert split('is this a long string','')==['is','this','a','long','string']\n    return 'All tests passed'\nprint(test())\ndef make_dict(input_filename, output_filename):\n    '''\n    Write a function to remove empty strings from a list of strings.\n    '''\n    f=open(input_filename)\n    lines=f.readlines()\n    f.close()\n    new_lines=[]\n    for line in lines:\n        if line.strip():\n            new_lines.append(line)\n    f=open(output_filename,'w')\n    f.write('\\n'.join(new_lines))\n    f.close()\ndef make_dict_b(input_filename, output_filename):\n    '''\n    Write a function to remove empty strings from a list of strings.\n    '''\n    f=open(input_filename)\n    lines=f.readlines()\n    f.close()\n    new_lines=[]\n    for line in lines:\n        if line.strip():\n            new_lines.append(line)\n    f=open(output_filename,'w')\n    f.write('\\n'.join(new_lines))\n    f.close()\ndef make_dict_c(input_filename, output_filename):\n    '''\n    Write a function to remove empty strings from a list of strings.\n    '''\n    f=open(input_filename)\n    lines=f.readlines()\n    f.close()\n    new_lines=[]\n    for line in lines:\n        new_lines.append(line.strip())\n    f=open(output_filename,'w')\n    f.write('\\n'.join(new_lines))\n    f.close()\ndef make_dict_d(input_filename, output_filename):\n    '''\n    Write a function to remove empty strings from a list of strings.\n    '''\n    f=open(input_filename)\n    lines=f.readlines()\n    f.close()\n    new_lines=[]\n    for line in lines:\n        new_lines.append(line.strip())\n    f=open(output_filename,'w')\n    f.write('\\n'.join(new_lines))\n    f.close()\ndef make_dict_e(input_filename, output_filename):\n    '''\n    Write a function to remove empty strings from a list of strings.\n    '''\n    f=open(input_filename)\n    lines=f.readlines()\n    f.close()\n    new_lines=[]\n    for line in lines:\n        new_lines.append(line.strip())\n    f=open(output_filename,'w')\n    f.write('\\n'.join(new_lines))\n    f.close()\ndef make_dict_f(input_filename, output_filename):\n    '''\n    Write a function to remove empty strings from a list of strings.\n    '''\n    f=open(input_filename)\n    lines=f.readlines()\n    f.close()\n    new_lines=[]\n    for line in lines:\n        new_lines.append(line.strip())\n    f=open(output_filename,'w')\n    f.write('\\n'.join(new_lines))\n    f.close()\ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    return re.sub('[^\\w\\s]', '', text)\ndef make_dict_g(input_filename, output_filename):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    f=open(input_filename)\n    lines=f.readlines()\n    f.close()\n    new_lines=[]\n    for line in lines:\n        new_lines.append(remove_punctuation(line.strip()))\n    f=open(output_filename,'w')\n    f.write('\\n'.join(new_lines))\n    f.close()\ndef make_dict_h(input_filename, output_filename):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    f=open(input_filename)\n    lines=f.readlines()\n    f.close()\n    new_lines=[]\n    for line in lines:\n        new_lines.append(remove_punctuation(line.strip()))\n    f=open(output_filename,'w')\n    f.write('\\n'.join(new_lines))\n    f.close()\ndef make_dict_i(input_filename, output_filename):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    f=open(input_filename)\n    lines=f.readlines()\n    f.close()\n    new_lines=[]\n    for line in lines:\n        new_lines.append(remove_punctuation(line.strip()))\n    f=open(output_filename,'w')\n    f.write('\\n'.join(new_lines))\n    f.close()\ndef make_dict_j(input_filename, output_filename):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    f=open(input_filename)\n    lines=f.readlines()\n    f.close()\n    new_lines=[]\n    for line in lines:\n        new_lines.append(remove_punctuation(line.strip()))\n    f=open(output_filename,'w')\n    "
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    matches = re.findall(r'\\b\\w{4,}\\b', text)\n    return matches\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # return re.findall(r'\\w{4,}', text)\n    return re.findall('\\w{4,}', text)\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    # return re.findall(r'\\w{3,}', text)\n    return re.findall('\\w{3,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for m in re.finditer(r'\\b([a-zA-Z0-9]+)\\b', text):\n        res.append(m.group())\n    return res\ndef find_char_long2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [m.group() for m in re.finditer(r'\\b([a-zA-Z0-9]+)\\b', text)]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w{4,}', re.I)\n    return pattern.findall(text)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    #   O(n)\n    #     for num in nums:\n    #         yield num ** 2\n    # \n    # def squares(nums):\n    #     return (num ** 2 for num in nums)\n    # \n    # print(squares(square_nums(range(1, 11))))\n    # print(list(square_nums(range(1, 11))))\n    # \n    # for num in square_nums(range(1, 11)):\n    #     print(num)\n    # \n    # print(list(square_nums(range(1, 11))))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x ** 2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in range(len(nums)):\n        squares.append(nums[i] * nums[i])\n    return squares\n    \ndef find_prime(nums):\n    '''\n    Write a function to find prime numbers in a list.\n    '''\n    output = []\n    for i in range(len(nums)):\n        is_prime = True\n        for j in range(2, nums[i]):\n            if nums[i] % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            output.append(nums[i])\n    return output\n    \ndef find_neg(nums):\n    '''\n    Write a function to find numbers in a list that are negative.\n    '''\n    output = []\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            output.append(nums[i])\n    return output\n    \ndef find_pos(nums):\n    '''\n    Write a function to find numbers in a list that are positive.\n    '''\n    output = []\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            output.append(nums[i])\n    return output\n    \ndef find_odd(nums):\n    '''\n    Write a function to find numbers in a list that are odd.\n    '''\n    output = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            output.append(nums[i])\n    return output\n    \ndef find_even(nums):\n    '''\n    Write a function to find numbers in a list that are even.\n    '''\n    output = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            output.append(nums[i])\n    return output\n    \ndef find_unique(nums):\n    '''\n    Write a function to find unique numbers in a list.\n    '''\n    output = []\n    for i in range(len(nums)):\n        if nums.count(nums[i]) == 1:\n            output.append(nums[i])\n    return output\n    \ndef find_non_repeating(nums):\n    '''\n    Write a function to find non repeating elements in a list.\n    '''\n    output = []\n    for i in range(len(nums)):\n        if nums.count(nums[i]) == 1:\n            output.append(nums[i])\n    return output\n    \ndef find_palindrome(nums):\n    '''\n    Write a function to find palindromes in a list.\n    '''\n    output = []\n    for i in range(len(nums)):\n        if str(nums[i]) == str(nums[i])[::-1]:\n            output.append(nums[i])\n    return output\n    \ndef find_rotation(nums):\n    '''\n    Write a function to find rotations in a list.\n    '''\n    output = []\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            output.append(nums[i])\n    return output\n    \ndef find_rotation_indices(nums):\n    '''\n    Write a function to find indices of rotations in a list.\n    '''\n    output = []\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            output.append(i)\n    return output\n    \ndef find_almost_sorted(nums):\n    '''\n    Write a function to find almost sorted elements in a list.\n    '''\n    output = []\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            output.append(nums[i])\n    return output\n    \ndef reverse_words(sentence):\n    '''\n    Write a function to reverse words in a sentence.\n    '''\n    words = sentence.split(' ')\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    output = ''\n    for i in range(len(words)):\n        output += words[i] +''\n    return output[:-1]\n    \ndef find_letter(word):\n    '''\n    Write a function to find the letter that's not in a word.\n    '''\n    for i in range(len(word)):\n        if word[i] not in word[:i] and word[i] not in word[i+1:]:\n            return word[i]\n    \ndef search_pairs(nums, k):\n    '''\n    Write a function to find the indices of pairs of integers in a list whose sum is equal to k.\n    '''\n    output = []\n    for i in range(len(nums)-1):\n        if nums[i] + nums[i+1] == k:\n            output.append(i)\n            output.append(i+1)\n    return output\n    \ndef find_k_sorted(nums, k):\n    '''\n    Write a function to find the k-th smallest integer in a list.\n    '''\n    output = []\n    for i in range(len(nums)):\n        if nums[i] < nums[0]:\n            output.append(nums[i])\n    output.sort()\n    return output[k-1]\n    \ndef find_k_smallest(nums, k):\n    '''\n    Write a function to find the k-th smallest integer in a list.\n    '''\n    output = []\n    for i in range(len(nums)):\n        if nums[i] > nums[0]:\n            output.append(nums[i])\n    output.sort()\n    return output[k-1]\n    \ndef find_k_greatest(nums, k):\n    '''\n    Write a function to find the k-th largest integer in a list.\n    '''\n    output = []\n    for i in range(len(nums)):\n        if nums[i] < nums[0]:\n            output.append(nums[i])\n    output.sort()\n    return output[-k]\n    \ndef find_k_greatest_2(nums, k):\n    '''\n    Write a function to find the k-th largest integer in a list.\n    '''\n    output = []\n    for i in range(len(nums)):\n        if nums[i] > nums[0]:\n            output.append(nums[i])\n    output.sort()\n    return output[-k]\n    \ndef find_k_greatest_3(nums, k):\n    '''\n    Write a function to find the k-th largest integer in a list.\n    '''\n    output = []\n    for i in range(len(nums)):\n        if nums[i] > nums[0]:\n            output.append(nums[i])\n    output.sort()\n    return output[-k:]\n    \ndef find_k_greatest_4(nums, k):\n    '''\n    Write a function to find the k-th largest integer in a list.\n    '''\n    output = []\n    for i in range(len(nums)):\n        if nums[i] > nums[0]:\n            output.append(nums[i])\n    output.sort()\n    return output[:-k]\n    \ndef find_k_greatest_5(nums, k):\n    '''\n    Write a function to find the k-th largest integer in a list.\n    '''\n    output = []\n    for i in range(len(nums)):\n        if nums[i] > nums[0]:\n            output.append(nums[i])\n    output.sort()\n    return output[-k-1]\n    \ndef find_k_greatest_6(nums, k):\n    '''\n    Write a function to find the k-th largest integer in a list."
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for n in nums:\n        squares.append(n*n)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # print (len(str))\n    if len(str) == 1:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    i = 0\n    str1 = str\n    while i < len(str):\n        str = str[1:]+str[0]\n        i+=1\n    return str1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Convert string to a list\n    str_lst = list(str)\n    min_rotations = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 1\n    l = len(str)\n    if l==1:\n        return 0\n    for i in range(1,l):\n        if str[i:]+str[:i]==str:\n            rotations = rotations +1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    return n - 1 - n % (n - 1)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == str[::-1]:\n        return 0\n    return 1 + find_Rotations(str[1:])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 1\n    while str!=str[-1:]+str[:-1]:\n        str = str[1:]+str[0]\n        rotations +=1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = str.lower()\n    length = len(str)\n    temp = str[0:]\n    n = 1\n    while(temp!= str):\n        temp = temp[1:length]+temp[0]\n        n+=1\n    if n>1:\n        print 'The String is not a single rotation of the original string'\n    else:\n        print 'The string is a single rotation of the original string'\n        \n        \n        \nfind_Rotations(raw_input())"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == str[::-1]: \n        return 0\n    for i in range(len(str)): \n        if str[i:] == str[i:][::-1]: \n            return i \n    return -1\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1)+s.replace(ch,'',1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[1:-1]\ndef remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', 1)\n    \nprint(remove_Occ(\"pranay is a good boy\",'r'))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    index1=s.index(ch)\n    index2=s.rindex(ch)\n    s=s[0:index1]+s[index2+1:len(s)]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s.replace(ch, \"\",1) + s.replace(ch,\"\",1)\n    else:\n        return s\ndef split_str(s,ch):\n    '''\n    Write a python function to split the string on the first and last occurrence of a given character.\n    '''\n    if ch in s:\n        return s.split(ch,1)\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.find(ch)] + s[s.rfind(ch)+1:]\ndef upper_lower(s):\n    '''\n    Write a python function to convert all the lower case characters to upper case characters and vice versa.\n    '''\n    return s.swapcase()\ndef remove_punctuation(s):\n    '''\n    Write a python function to remove punctuation from the given string and return it back.\n    '''\n    return s.translate(None, string.punctuation)\ndef replace_chars(s,old_char,new_char):\n    '''\n    Write a python function to replace all the occurrence of given characters in a given string and return it back.\n    '''\n    return s.replace(old_char, new_char)\ndef write_to_file(s,filename):\n    '''\n    Write a python function to write the given string to a file.\n    '''\n    with open(filename, 'w') as f:\n        f.write(s)\ndef append_to_file(s,filename):\n    '''\n    Write a python function to append the given string to a file.\n    '''\n    with open(filename, 'a') as f:\n        f.write(s)\ndef get_occurrence(s,ch):\n    '''\n    Write a python function to get the frequency of given character in a string and return it back.\n    '''\n    return s.count(ch)\ndef get_word(s,n):\n    '''\n    Write a python function to extract the nth word from a given string and return it back.\n    '''\n    return s.split()[n-1]\ndef get_unique_words(s):\n    '''\n    Write a python function to extract all the unique words from a given string and return it back.\n    '''\n    return set(s.split())\ndef add_space(s,n):\n    '''\n    Write a python function to add spaces at the starting of the given string and return it back.\n    '''\n    return''*n+s\ndef get_unique_words(s):\n    '''\n    Write a python function to extract all the unique words from a given string and return it back.\n    '''\n    return set(s.split())\ndef remove_space(s):\n    '''\n    Write a python function to remove all the spaces from the given string and return it back.\n    '''\n    return s.replace(' ','')\ndef get_letter_count(s):\n    '''\n    Write a python function to count the occurrences of each alphabet letter in a given string and return it back.\n    '''\n    return {c:s.count(c) for c in set(s.lower())}\ndef remove_nth_word(s,n):\n    '''\n    Write a python function to remove the nth word from a given string and return it back.\n    '''\n    return s.split(' ')[n-1]+' '\ndef repeat_word(s,n):\n    '''\n    Write a python function to repeat the nth word from a given string and return it back.\n    '''\n    return s.split()[n-1]*n\ndef is_vowel(c):\n    '''\n    Write a python function to check if a given character is a vowel or not and return it back.\n    '''\n    return c in 'aeiou'\ndef reverse(s):\n    '''\n    Write a python function to reverse the given string and return it back.\n    '''\n    return s[::-1]\ndef get_tag(tag):\n    '''\n    Write a python function to extract the tag from the given string and return it back.\n    '''\n    return tag.split('/')[1].replace('_',' ')\ndef count_string(s,sub):\n    '''\n    Write a python function to count the occurrence of a given substring in a given string and return it back.\n    '''\n    return s.count(sub)\ndef count_string_tag(s,tag):\n    '''\n    Write a python function to count the occurrence of a given substring in a given string and return it back.\n    '''\n    return s.count(tag)\ndef count_string_words(s):\n    '''\n    Write a python function to count the occurrence of each word in a given string and return it back.\n    '''\n    return {word:s.count(word) for word in get_unique_words(s)}\ndef count_string_words_tag(s,tag):\n    '''\n    Write a python function to count the occurrence of each word in a given string and return it back.\n    '''\n    return {word:s.count(word) for word in get_unique_words(s) if tag in word}\ndef is_digit(c):\n    '''\n    Write a python function to check if a given character is a digit or not and return it back.\n    '''\n    return c.isdigit()\ndef is_lower(c):\n    '''\n    Write a python function to check if a given character is lower case or not and return it back.\n    '''\n    return c.islower()\ndef is_upper(c):\n    '''\n    Write a python function to check if a given character is upper case or not and return it back.\n    '''\n    return c.isupper()\ndef is_alpha(c):\n    '''\n    Write a python function to check if a given character is alphanumeric or not and return it back.\n    '''\n    return c.isalnum()\ndef is_alpha_digit(c):\n    '''\n    Write a python function to check if a given character is alphanumeric or not and return it back.\n    '''\n    return c.isalnum()\ndef is_alpha_lower(c):\n    '''\n    Write a python function to check if a given character is alphanumeric or not and return it back.\n    '''\n    return c.isalpha()\ndef is_alpha_upper(c):\n    '''\n    Write a python function to check if a given character is alphanumeric or not and return it back.\n    '''\n    return c.isalpha()\ndef is_punctuation(c):\n    '''\n    Write a python function to check if a given character is punctuation or not and return it back.\n    '''\n    return c in string.punctuation\ndef is_space(c):\n    '''\n    Write a python function to check if a given character is space or not and return it back.\n    '''\n    return c.isspace()\ndef is_title(c):\n    '''\n    Write a python function to check if a given character is title or not and return it back.\n    '''\n    return c.istitle()\ndef is_full_title(c):\n    '''\n    Write a python function to check if a given character is title or not and return it back.\n    '''\n    return c.isupper() and c.islower()\ndef is_url(c):\n    '''\n    Write a python function to check if a given character is url or not and return it back.\n    '''\n    return c.isupper() and c.islower()\ndef is_email(c):\n    '''\n    Write a python function to check if a given character is email or not and return it back.\n    '''\n    return c.isupper() and c.islower()\ndef is_hashtag(c):\n    '''\n    Write a python function to check if a given character is hashtag or not and return it back.\n    '''\n    return c.isupper() and c.islower()\ndef is_username(c):\n    '''\n    Write a python function to check if a given character is username or not and return it back.\n    '''\n    return c.isupper() and c.islower()\ndef is_currency(c):\n    '''\n    Write a python function to check if a given character is currency or not and return it back.\n    '''\n    return c.isupper() and c.islower()\ndef is_emoticon(c):\n    '''\n    Write a python function to check if a given character is emoticon or not and return it back.\n    '''\n    return c.isupper() and c.islower()\ndef get_word_count(s):\n    '''\n    Write a python function to get the word count of a given string and return i"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) > 1:\n        return s.replace(ch, \"\", 1)\n    else:\n        return s\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0:\n        return s\n    if ch in s:\n        if ch == s[0]:\n            return remove_Occ(s[1:],ch)\n        elif ch == s[-1]:\n            return remove_Occ(s[:-1],ch)\n        else:\n            return s[0]+remove_Occ(s[1:],ch)+s[-1]\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\",1).replace(ch,\"\")\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    new_list = []\n    for i in xrange(len(M[0])):\n        current_row = M[0][i]\n        current_col = M[i][0]\n        current_total = current_row + current_col\n        new_list.append(current_total)\n    sorted_list = sorted(new_list)\n    return sorted_list\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    if len(M) == 0:\n        return []\n    \n    row_sums = []\n    for i in range(len(M)):\n        row_sums.append(sum(M[i]))\n    \n    row_sums, M = zip(*sorted(zip(row_sums, M)))\n    \n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(1, len(M)):\n        if sum(M[i]) < sum(M[i-1]):\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in xrange(n):\n        for j in xrange(n-i-1):\n            if M[j][i]+M[j+1][i] > M[j+1][i]+M[j][i]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix = M\n    # iterate through each row in the matrix\n    for row in matrix:\n        # sort the row according to the sum of each column\n        row.sort(key=lambda x: sum(x))\n    return matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    R = len(M)\n    C = len(M[0])\n    # Sorts the row wise\n    for i in range(R):\n        temp = []\n        for j in range(R):\n            temp.append(M[j][i])\n        temp.sort()\n        for j in range(R):\n            M[j][i] = temp[j]\n    # Sort the column wise\n    for j in range(C):\n        temp = []\n        for i in range(R):\n            temp.append(M[i][j])\n        temp.sort()\n        for i in range(R):\n            M[i][j] = temp[i]\n    # Return the sorted matrix\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n    row_sums = [0] * m\n    for i in range(m):\n        for j in range(n):\n            row_sums[i] += M[i][j]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # sort each row by sorting the whole matrix\n    for row in xrange(len(M)):\n        M[row] = sorted(M[row])\n    # sort the whole matrix by summing the row\n    for i in xrange(len(M)):\n        M[i] = sum(M[i])\n    # return the sorted matrix\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n, m = len(M), len(M[0])\n    s = [[0 for j in xrange(m)] for i in xrange(n)]\n    \n    for i in xrange(n):\n        for j in xrange(m):\n            s[i][j] = sum(M[i][0:j+1])\n    \n    for i in xrange(n):\n        for j in xrange(m):\n            M[i][j] = s[i][j]\n            \n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume=float(1/6*l*b*h)\n    return volume\n    \n    \ndef find_Area(b,h) :\n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    area=float(b*h)\n    return area\n    \n    \ndef find_Surface_area(l,b,h) :\n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    surface_area=float((2*l+2*b)*h)\n    return surface_area\n    \n    \ndef find_Volume_Surface_Ratio(l,b,h) :\n    '''\n    Write a python function to find the ratio of the volume of a triangular prism to the surface area of a triangular prism.\n    '''\n    volume_surface_ratio=float(find_Volume(l,b,h)/find_Surface_area(l,b,h))\n    return volume_surface_ratio\n    \n    \ndef find_Water_Surface_area(l,b,h) :\n    '''\n    Write a python function to find the surface area of water in a triangular prism.\n    '''\n    water_surface_area=float((b+2*l)*h)\n    return water_surface_area\n    \n    \ndef find_water_Volume(l,b,h) :\n    '''\n    Write a python function to find the volume of water in a triangular prism.\n    '''\n    water_volume=float((b+2*l)*h)\n    return water_volume\n    \n    \ndef find_Ratio(l,b,h) :\n    '''\n    Write a python function to find the ratio of the volume of a triangular prism to the volume of a water in a triangular prism.\n    '''\n    ratio=float(find_Volume(l,b,h)/find_water_Volume(l,b,h))\n    return ratio\n    \n    \ndef main() :\n    l=float(input(\"Enter the length of a triangular prism : \"))\n    b=float(input(\"Enter the breadth of a triangular prism : \"))\n    h=float(input(\"Enter the height of a triangular prism : \"))\n    \n    print \"The volume of the triangular prism is : \", find_Volume(l,b,h)\n    print \"The area of the triangular prism is : \", find_Area(l,b)\n    print \"The surface area of the triangular prism is : \", find_Surface_area(l,b,h)\n    print \"The ratio of the volume of the triangular prism to the volume of water in the triangular prism is : \", find_Volume_Surface_Ratio(l,b,h)\n    print \"The surface area of water in the triangular prism is : \", find_Water_Surface_area(l,b,h)\n    print \"The ratio of the volume of the triangular prism to the surface area of water in the triangular prism is : \", find_Ratio(l,b,h)\n    \nif __name__==\"__main__\":\n    main()\n    "
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * b * h) / (6.0)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    # base of triangular prism\n    base = b*h \n    \n    # height of triangular prism\n    height = h\n    \n    # find volume\n    vol = (base*l)/3\n    \n    # print the volume\n    print \"The volume of a triangular prism with base\", b, \"and height\", h, \"and length\", l, \"is\", vol, \"cubic units\"\n    \nfind_Volume(5,5,5)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    h = float(h)\n    b = float(b)\n    l = float(l)\n    return l*b*h/6.0\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = b*h/2\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/6\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return ((b**2)*(h/3))\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    import math\n    \n    volume = 1/3 * l * b * h\n    \n    return volume\n    \ndef main() :\n    \n    l = float(input(\"Enter Length of a side : \"))\n    b = float(input(\"Enter Breadth of a side : \"))\n    h = float(input(\"Enter Height of a side : \"))\n    \n    volume = find_Volume(l,b,h)\n    print(\"Volume of a triangular prism : \",volume)\n    \n    \n    \nmain()\n    \n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    text = re.sub(\"\\s+\", \"_\", text)\n    return text == text[::-1]\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return (re.search(\"[a-z]+_[a-z]+\",text))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_upper(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[A-Z]+',text):\n        return True\n    else:\n        return False\ndef text_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\d+',text):\n        return True\n    else:\n        return False\ndef text_space_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_ ',text):\n        return True\n    else:\n        return False\ndef text_space_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_\\d+',text):\n        return True\n    else:\n        return False\ndef text_space_number_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_dash(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+-\\d+',text):\n        return True\n    else:\n        return False\ndef text_dash_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_punctuation(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+\\.\\d+',text):\n        return True\n    else:\n        return False\ndef text_punctuation_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_multiple_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+__[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_multiple_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+\\s+',text):\n        return True\n    else:\n        return False\ndef text_multiple_space_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+\\s+',text):\n        return True\n    else:\n        return False\ndef text_multiple_space_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_one_word(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\w+',text):\n        return True\n    else:\n        return False\ndef text_one_word_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_',text):\n        return True\n    else:\n        return False\ndef text_multiple_space_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+\\s+\\d+',text):\n        return True\n    else:\n        return False\ndef text_one_word_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_',text):\n        return True\n    else:\n        return False\ndef text_one_word_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\d+',text):\n        return True\n    else:\n        return False\ndef text_one_word_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\s+',text):\n        return True\n    else:\n        return False\ndef text_one_word_space_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\s+_',text):\n        return True\n    else:\n        return False\ndef text_one_word_space_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\s+\\d+',text):\n        return True\n    else:\n        return False\ndef text_one_word_space_number_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\s+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_one_word_space_number_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('\\s+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_multiple_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+__[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_multiple_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+\\s+',text):\n        return True\n    else:\n        return False\ndef text_multiple_space_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    i"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #Convert to lower case\n    text = text.lower()\n    #Convert to list\n    text = list(text)\n    #Remove non-alphabetic characters\n    for index, character in enumerate(text):\n        if not character.isalpha():\n            text[index] = ''\n    #Join list into string\n    text = ''.join(text)\n    #Check length of string\n    if len(text)!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lowercase_underscore = re.compile(r'\\b[a-z]+_+[a-z]+\\b')\n    if lowercase_underscore.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text)!= None\ndef text_lowercase_plus(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an \"+\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\+[a-z]+', text)!= None\ndef text_lowercase_asterisk(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an \"*\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\*[a-z]+', text)!= None\ndef text_lowercase_slash(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \"/\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\/[a-z]+', text)!= None\ndef text_lowercase_pipe(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \"|\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\|[a-z]+', text)!= None\ndef text_lowercase_questionmark(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \"?\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\?[a-z]+', text)!= None\ndef text_lowercase_colon(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \":\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\:[a-z]+', text)!= None\ndef text_lowercase_semicolon(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \";\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\;[a-z]+', text)!= None\ndef text_lowercase_slash_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \"/\" and a number and false otherwise.\n    '''\n    return re.search('[a-z]+\\/[0-9]+', text)!= None\ndef text_lowercase_slash_number_plus(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \"/\" and a number and a \"+\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\/[0-9]+\\+', text)!= None\ndef text_lowercase_slash_number_asterisk(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \"/\" and a number and a \"*\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\/[0-9]+\\*', text)!= None\ndef text_lowercase_slash_number_pipe(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \"/\" and a number and a \"|\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\/[0-9]+\\|', text)!= None\ndef text_lowercase_slash_number_questionmark(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \"/\" and a number and a \"?\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\/[0-9]+\\?', text)!= None\ndef text_lowercase_slash_number_colon(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \"/\" and a number and a \":\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\/[0-9]+\\:', text)!= None\ndef text_lowercase_slash_number_semicolon(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \"/\" and a number and a \";\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\/[0-9]+\\;', text)!= None\ndef text_lowercase_slash_number_comma(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \"/\" and a number and a \",\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\/[0-9]+\\,', text)!= None\ndef text_lowercase_dot_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \".\" and a number and false otherwise.\n    '''\n    return re.search('[a-z]+\\.([0-9]+)', text)!= None\ndef text_lowercase_dot_number_comma(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \".\" and a number and a \",\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\.([0-9]+),', text)!= None\ndef text_lowercase_dot_number_semicolon(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \".\" and a number and a \";\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\.([0-9]+);', text)!= None\ndef text_lowercase_dot_number_comma_plus(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \".\" and a number and a \"+\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\.([0-9]+)\\+', text)!= None\ndef text_lowercase_dot_number_plus_comma(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \".\" and a number and a \"+\" and a \",\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\.([0-9]+)\\+([0-9]+)', text)!= None\ndef text_lowercase_dot_number_comma_asterisk(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \".\" and a number and a \"*\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\.([0-9]+)\\*', text)!= None\ndef text_lowercase_dot_number_asterisk_comma(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \".\" and a number and a \"*\" and a \",\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\.([0-9]+)\\*([0-9]+)', text)!= None\ndef text_lowercase_dot_number_asterisk_plus(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \".\" and a number and a \"*\" and a \"+\" and false otherwise.\n    '''\n    return re.search('[a-z]+\\.([0-9]+)\\*([0-9]+)+', text)!= None\ndef text_lowercase_dot_number_asterisk_plus_comma(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a \".\" and a number and a \"*\" and a \"+\" and a \",\" and false otherwise.\n    '''\n    return re.search('[a"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return any(x.islower() for x in text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text == '_' or text == '_ ':\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.match(r'^[a-z]+_[a-z]+$', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \ndef triangle_perimeter(a, b, c):\n    '''\n    Write a function that returns the perimeter of a triangle given the lengths of the three sides as input.\n    '''\n    return a+b+c\n    \ndef is_square(a):\n    '''\n    Write a function that returns whether a given number is a perfect square.\n    '''\n    return a == a**(0.5)**2\n    \ndef is_right_angle(a, b, c):\n    '''\n    Write a function that returns whether a given triangle is a right angle triangle given the lengths of three sides as input.\n    '''\n    return is_square(a + b) and is_square(b + c) and is_square(a + c)\n    \ndef is_pentagon(a):\n    '''\n    Write a function that returns whether a given number is a pentagon given the length of the side as input.\n    '''\n    return a == 5*a**0.5\n    \ndef is_hexagon(a):\n    '''\n    Write a function that returns whether a given number is a hexagon given the length of the side as input.\n    '''\n    return a == 6*a**0.5\n    \ndef is_heptagon(a):\n    '''\n    Write a function that returns whether a given number is a heptagon given the length of the side as input.\n    '''\n    return a == 7*a**0.5\n    \ndef is_octagon(a):\n    '''\n    Write a function that returns whether a given number is an octagon given the length of the side as input.\n    '''\n    return a == 8*a**0.5\n    \ndef is_nonagon(a):\n    '''\n    Write a function that returns whether a given number is a nonagon given the length of the side as input.\n    '''\n    return a == (3*a**0.5)/2\n    \ndef is_kite(a, b, c):\n    '''\n    Write a function that returns whether a given triangle is a kite given the lengths of three sides as input.\n    '''\n    return is_right_angle(a, b, c) and is_square(b+c) and is_square(a+c) and is_square(a+b)\n    \ndef is_rhombus(a, b, c):\n    '''\n    Write a function that returns whether a given triangle is a rhombus given the lengths of three sides as input.\n    '''\n    return is_right_angle(a, b, c) and is_square(a + b) and is_square(b + c) and is_square(a + c)\n    \ndef is_triangle(a, b, c):\n    '''\n    Write a function that returns whether a given triangle is a triangle given the lengths of three sides as input.\n    '''\n    return is_right_angle(a, b, c) and is_square(a + b) and is_square(b + c) and is_square(a + c)\n    \ndef is_quad(a, b, c, d):\n    '''\n    Write a function that returns whether a given quadrilateral is a square given the lengths of four sides as input.\n    '''\n    return is_square(a + b) and is_square(b + c) and is_square(c + d) and is_square(a + d)\n    \ndef is_isosceles_triangle(a, b, c):\n    '''\n    Write a function that returns whether a given triangle is an isosceles triangle given the lengths of three sides as input.\n    '''\n    return is_right_angle(a, b, c) and is_triangle(a, b, c)\n    \ndef is_isosceles_quadrilateral(a, b, c, d):\n    '''\n    Write a function that returns whether a given quadrilateral is a square given the lengths of four sides as input.\n    '''\n    return is_square(a + b) and is_square(b + c) and is_square(c + d) and is_square(a + d)\n    \ndef is_isosceles_pentagon(a):\n    '''\n    Write a function that returns whether a given pentagon is an isosceles triangle given the length of the side as input.\n    '''\n    return is_pentagon(a) and is_right_angle(a, a, a)\n    \ndef is_isosceles_hexagon(a):\n    '''\n    Write a function that returns whether a given hexagon is an isosceles triangle given the length of the side as input.\n    '''\n    return is_hexagon(a) and is_right_angle(a, a, a)\n    \ndef is_isosceles_heptagon(a):\n    '''\n    Write a function that returns whether a given hexagon is an isosceles triangle given the length of the side as input.\n    '''\n    return is_heptagon(a) and is_right_angle(a, a, a)\n    \ndef is_isosceles_octagon(a):\n    '''\n    Write a function that returns whether a given hexagon is an isosceles triangle given the length of the side as input.\n    '''\n    return is_octagon(a) and is_right_angle(a, a, a)\n    \ndef is_isosceles_nonagon(a):\n    '''\n    Write a function that returns whether a given nonagon is an isosceles triangle given the length of the side as input.\n    '''\n    return is_nonagon(a) and is_right_angle(a, a, a)\n    \ndef is_isosceles_kite(a, b, c):\n    '''\n    Write a function that returns whether a given triangle is a kite given the lengths of three sides as input.\n    '''\n    return is_right_angle(a, b, c) and is_triangle(a, b, c)\n    \ndef is_isosceles_rhombus(a, b, c):\n    '''\n    Write a function that returns whether a given triangle is a rhombus given the lengths of three sides as input.\n    '''\n    return is_right_angle(a, b, c) and is_triangle(a, b, c)\n    \ndef is_isosceles_octogon(a):\n    '''\n    Write a function that returns whether a given octogon is an isosceles triangle given the length of the side as input.\n    '''\n    return is_octagon(a) and is_right_angle(a, a, a)\n    \ndef is_isosceles_nonagon(a):\n    '''\n    Write a function that returns whether a given nonagon is an isosceles triangle given the length of the side as input.\n    '''\n    return is_nonagon(a) and is_right_angle(a, a, a)\n    \ndef is_isosceles_heptagon(a):\n    '''\n    Write a function that returns whether a given hexagon is an isosceles triangle given the length of the side as input.\n    '''\n    return is_heptagon(a) and is_right_angle(a, a, a)\n    \ndef is_isosceles_hexagon(a):\n    '''\n    Write a function that returns whether a given hexagon is an isosceles triangle given the length of the side as input.\n    '''\n    return is_hexagon(a) and is_right_angle(a, a, a)\n    \ndef is_isosceles_octogon(a):\n    '''\n    Write a function that returns whether a given hexagon is an isosceles triangle given the length of the side as input.\n    '''\n    return is_octagon(a) and is_right_angle(a, a, a)\n    \ndef is_isosceles_pentagon(a):\n    '''\n    Write a function that returns whether a given pentagon is an isosceles triangle given the length of the side as input.\n    '''\n    return is_pentagon(a) and is_right_angle(a, a, a)\n    \ndef is_isosceles_hexagon(a):\n    '''\n    Write a functio"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    \n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    import math\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = [chr(i) for i in range(256)]\n    l2 = list(string)\n    for i in l2:\n        if i in l1:\n            l1.remove(i)\n    return l1\ndef coder(string):\n    dictionary = {}\n    for i in range(NO_OF_CHARS):\n        dictionary[chr(i)] = str_to_list(string)\n    return dictionary\ndef str_to_list(string):\n    l = []\n    for i in string:\n        l.append(ord(i))\n    return l\ndef encode(string, key):\n    l1 = [chr(i) for i in range(256)]\n    l2 = coder(key)\n    res = ''\n    for i in string:\n        for j in l2[ord(i)]:\n            res = res + l1[j]\n    return res\ndef decode(string, key):\n    l1 = [chr(i) for i in range(256)]\n    l2 = coder(key)\n    res = ''\n    i = 0\n    while(i < len(string)):\n        for j in l2[ord(string[i])]:\n            res = res + l1[j]\n        i = i + 1\n    return res\nif __name__ == '__main__':\n    string = 'PYTHON'\n    key = 'HARRY'\n    string = 'HARRY'\n    key = 'HARRY'\n    print(string)\n    print(key)\n    print(encode(string,key))\n    print(decode(encode(string,key),key))\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    ls = []\n    for i in string:\n        if i not in ls:\n            ls.append(i)\n    return ls\ndef remove_char(string,ch):\n    new_string = \"\"\n    for i in string:\n        if i == ch:\n            pass\n        else:\n            new_string+=i\n    return new_string\ndef remove_char_from_list(list_of_str):\n    new_list = []\n    for i in list_of_str:\n        new_list.append(remove_char(i,i[0]))\n    return new_list\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = ''.join(string.split())\n    string2 = ''.join(input().split())\n    out = [] \n    for i in string1: \n        if i not in string2: \n            out.append(i) \n    out = ''.join(out) \n    return out\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_str = []\n    for i in string:\n        if i not in new_str:\n            new_str.append(i)\n    return new_str\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [] \n    for x in string: \n        if x not in list1: \n            list1.append(x) \n    return list1 \n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string \n    str2 = 'qwertyuiopasdfghjklzxcvbnm'\n    list1 = [] \n    for i in str1: \n        if i in str2: \n            list1.append(i) \n    for i in list1: \n        str1 = str1.replace(i, '') \n    return str1\ndef remove_n(string): \n    '''\n    Write a function that returns a string with all occurrences of its first argument\n    removed (without using replace).\n    '''\n    str1 = string\n    n = string[0]\n    return str1.replace(n,'')\ndef list_to_str(list): \n    '''\n    Write a function to merge two strings together, given two lists as arguments.\n    '''\n    str1 = ''\n    for i in list:\n        str1 += i\n    return str1\ndef find_longest(string): \n    '''\n    Write a function to find the longest substring of length k in a string.\n    '''\n    max_len = 0\n    str1 = string \n    for i in range(len(str1)): \n        for j in range(i,len(str1)): \n            if j-i+1 > max_len: \n                if j-i+1 == len(str1[i:j+1]): \n                    max_len = j-i+1\n                    result = str1[i:j+1] \n    return result\ndef check_dictionary(string): \n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return string == string[::-1]\ndef my_find(string): \n    '''\n    Write a function to find the smallest substring of length k that is a palindrome.\n    '''\n    str1 = string\n    str2 = ''\n    for i in range(len(string)): \n        for j in range(i,len(string)): \n            if j-i+1 > len(str2): \n                if j-i+1 == len(str1[i:j+1]): \n                    str2 = str1[i:j+1] \n    return str2\ndef string_rotation(string1, string2): \n    '''\n    Write a function that checks whether string1 is a rotation of string2.\n    '''\n    return string2 in string1+string1\ndef string_rotation2(string1, string2): \n    '''\n    Write a function that checks whether string1 is a rotation of string2.\n    '''\n    return string2 in string1+string1\ndef string_rotation3(string1, string2): \n    '''\n    Write a function that checks whether string1 is a rotation of string2.\n    '''\n    return string2 in string2+string2\ndef find_rotation(string, pattern): \n    '''\n    Write a function that checks whether a string is a rotation of another string.\n    '''\n    return string in pattern+pattern\ndef get_string_digit(string, index): \n    '''\n    Write a function to return the character of a string at a specified index.\n    '''\n    return string[index]\ndef count_rotations(str1, str2): \n    '''\n    Write a function to count the number of times a substring appears in a string.\n    '''\n    return str2.count(str1)\ndef is_substring(string, sub_string): \n    '''\n    Write a function to check if a string is a substring of another string.\n    '''\n    return sub_string in string\ndef is_substring2(string, sub_string): \n    '''\n    Write a function to check if a string is a substring of another string.\n    '''\n    return string.find(sub_string)!= -1\ndef check_anagram(string1, string2): \n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return sorted(string1) == sorted(string2)\ndef anagram(string1, string2): \n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return sorted(string1) == sorted(string2)\ndef anagram2(string1, string2): \n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    str1 = string1\n    str2 = string2\n    str1 = str_to_list(str1) \n    str2 = str_to_list(str2) \n    for i in str1: \n        if i not in str2: \n            return False\n    for i in str2: \n        if i not in str1: \n            return False\n    return True\ndef anagram3(string1, string2): \n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    str1 = string1\n    str2 = string2\n    str1 = str_to_list(str1) \n    str2 = str_to_list(str2) \n    count1 = [0]*NO_OF_CHARS \n    count2 = [0]*NO_OF_CHARS \n    for i in str1: \n        count1[ord(i)] += 1 \n    for i in str2: \n        count2[ord(i)] += 1 \n    return count1 == count2\ndef is_substring_dictionary(string1, string2): \n    '''\n    Write a function to check if a string is a substring of another string.\n    '''\n    return string2 in string1\ndef word_break(string, word_dictionary): \n    '''\n    Write a function to check if a string can be segmented into a palindrome.\n    '''\n    return string == string[::-1]\ndef word_break2(string, word_dictionary): \n    '''\n    Write a function to check if a string can be segmented into a palindrome.\n    '''\n    return string == string[::-1]\ndef word_break3(string, word_dictionary): \n    '''\n    Write a function to check if a string can be segmented into a palindrome.\n    '''\n    return string == string[::-1]\ndef palindrome_permutation(string): \n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    return string == string[::-1]\ndef palindrome_permutation2(string): \n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    count = [0]*NO_OF_CHARS \n    for i in string: \n        count[ord(i)] += 1 \n    for i in count: \n        if i%2!= 0: \n            return False\n    return True\ndef palindrome_permutation3(string): \n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    count = [0]*NO_OF_CHARS \n    for i in string: \n        count[ord(i)] += 1 \n    for i in count: \n        if i%2!= 0: \n            return False\n    return True\ndef find_rotation_2(string1, string2): \n    '''\n    Write a function to check whether a string is a rotation of another string.\n    '''\n    str1 = string1\n    str2 = string2\n    str1 = str_to_list(str1) \n    str2 = str_to_list(str2) \n    for i in range(len(str2)): \n        if str2[i:] + str2[:i] == str1: \n            return True\n    return False\ndef is_anagram_2(string1, string2): \n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    str1 = string1\n    str2 = string2\n    str1 "
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return []\n    result = []\n    for i in range(len(string)):\n        if string[i] not in result:\n            result.append(string[i])\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in range(len(string)):\n        if string[i] not in list:\n            list.append(string[i])\n    return list\ndef pattern_to_str(pattern): \n    '''\n    Write a function that accepts a string and returns the reverse of the input string.\n    '''\n    str_list = list(pattern)\n    str_list.reverse()\n    return ''.join(str_list)\ndef str_from_list(string, list):\n    '''\n    Write a function to check if a string is a permutation of a pattern and return the number of \n    letters found in the string that do not match a letter in the pattern.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] in list:\n            list.remove(string[i])\n        else:\n            count += 1\n    return count\ndef factorial(n):\n    '''\n    Write a function to compute factorial of a number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef palindrome(string):\n    '''\n    Write a function that returns True if the string is a palindrome, False otherwise.\n    '''\n    return string[::-1] == string\ndef prefix_suffix_function(string):\n    '''\n    Write a function that returns the prefix and suffix of a string.\n    '''\n    if len(string) == 0:\n        return ('', '')\n    if len(string) == 1:\n        return (string, '')\n    mid = len(string)//2\n    prefix = string[:mid]\n    suffix = string[mid:]\n    return (prefix, suffix)\ndef count_instances(string, sub):\n    '''\n    Write a function to compute the number of occurrences of a substring in a string.\n    '''\n    return len(string.split(sub))-1\ndef number_of_digits(n):\n    '''\n    Write a function that takes an integer as input and returns the number of digits in the integer.\n    '''\n    if n < 10:\n        return 1\n    else:\n        return 1 + number_of_digits(n/10)\ndef find_largest_palindrome(string):\n    '''\n    Write a function that accepts a string and returns the smallest substring of the string \n    containing at least two distinct characters.\n    '''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substr = string[i:j]\n            if len(set(substr)) == len(substr):\n                return substr\n    return -1\ndef left_rotate(string, n):\n    '''\n    Write a function to rotate a string n times.\n    '''\n    if n == 0:\n        return string\n    else:\n        return string[n:]+string[:n]\ndef rotate_str(string, n):\n    '''\n    Write a function to rotate a string n times.\n    '''\n    if n == 0:\n        return string\n    else:\n        return rotate_str(string[n:], n-1) + string[:n]\ndef substr_with_consecutive_characters(string):\n    '''\n    Write a function to count the number of words that are longer than 3 characters in a sentence.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if len(string[i:]) > 3:\n            count += 1\n    return count\ndef compare_strings(string1, string2):\n    '''\n    Write a function to compare two strings lexicographically.\n    '''\n    if len(string1) < len(string2):\n        return -1\n    elif len(string1) > len(string2):\n        return 1\n    else:\n        for i in range(len(string1)):\n            if string1[i] < string2[i]:\n                return -1\n            elif string1[i] > string2[i]:\n                return 1\n        return 0\ndef add_two_numbers(num1, num2):\n    '''\n    Write a function to add two numbers together.\n    '''\n    num1 = list(num1)\n    num2 = list(num2)\n    carry = 0\n    for i in range(1, max(len(num1), len(num2))+1):\n        if i <= len(num1):\n            carry += int(num1[-i])\n        if i <= len(num2):\n            carry += int(num2[-i])\n    string_list = []\n    while carry!= 0:\n        string_list.append(str(carry%10))\n        carry = carry//10\n    return ''.join(string_list[::-1])\ndef gcd(num1, num2):\n    '''\n    Write a function to compute the greatest common divisor of two numbers.\n    '''\n    while num2!= 0:\n        temp = num2\n        num2 = num1%num2\n        num1 = temp\n    return num1\ndef sum_of_divisors(num):\n    '''\n    Write a function to compute the sum of the divisors of a number.\n    '''\n    count = 0\n    for i in range(1, num+1):\n        if num%i == 0:\n            count += i\n    return count\ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num%2 == 0:\n        return False\n    for i in range(3, num+1, 2):\n        if num%i == 0:\n            return False\n    return True\ndef is_palindrome(num):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    num_list = list(str(num))\n    num_list.reverse()\n    return num_list == list(str(num))\ndef get_digit_sum(num):\n    '''\n    Write a function to compute the sum of digits of a number.\n    '''\n    num_list = list(str(num))\n    return sum(int(x) for x in num_list)\ndef reverse_words(string):\n    '''\n    Write a function to reverse words in a string.\n    '''\n    word_list = string.split(' ')\n    word_list.reverse()\n    return''.join(word_list)\ndef is_anagram(string1, string2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    else:\n        string1 = list(string1)\n        string2 = list(string2)\n        string1.sort()\n        string2.sort()\n        return string1 == string2\ndef get_permutations(string):\n    '''\n    Write a function to get all permutations of a string.\n    '''\n    word_list = list(string)\n    permutation_list = []\n    permutation_helper(permutation_list, '', word_list)\n    return permutation_list\ndef permutation_helper(permutation_list, permutation, word_list):\n    if len(word_list) == 0:\n        permutation_list.append(permutation)\n    else:\n        for i in range(len(word_list)):\n            permutation_helper(permutation_list, permutation+word_list[i], word_list[:i]+word_list[i+1:])\ndef find_missing_letter(string1, string2):\n    '''\n    Write a function to find the missing letter in the second string when first string is the super string.\n    '''\n    for i in string2:\n        if i not in string1:\n            return i\n    return '_'\ndef group_anagrams(strings):\n    '''\n    Write a function to group anagrams together.\n    '''\n    group_list = []\n    for string in strings"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = ''\n    for x in string:\n        if x not in string:\n            new_string += x\n    return new_string\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    dic = {}\n    for num in arraynums:\n        if num in dic:\n            return True\n        else:\n            dic[num] = 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return False if len(arraynums) == len(set(arraynums)) else True\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    i = 0\n    length = len(arraynums)\n    while i < length - 1:\n        j = i + 1\n        while j < length:\n            if arraynums[i] == arraynums[j]:\n                return True\n            j += 1\n        i += 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return True\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hash_table = {}\n    for num in arraynums:\n        if num in hash_table:\n            return True\n        hash_table[num] = 1\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 100: \n        return True \n    elif x > 1000:\n        return False\n    elif x >= 100 and x <= 999:\n        x = str(x)\n        if x[0] == x[1] == x[2] == x[3]:\n            return True\n        else: \n            return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0 and x <= 99: \n        return False\n    elif x >= 100 and x <= 999: \n        return True\n    elif x >= 1000 and x <= 9999: \n        return True\n    else: \n        return False\n    \ndef woodall_count(x): \n    '''\n    Write a function to check how many times a number is a woodall number.\n    '''\n    count = 0\n    while x > 0: \n        if is_woodall(x) == True: \n            count = count + 1\n        x = x - 1\n    return count\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    y = x\n    while x > 0:\n        digit = x % 10\n        if digit not in [1, 6, 8]:\n            return False\n        x = int(x/10)\n    return True\n    \nprint(is_woodall(54))\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    return x.isdigit()\n    \n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x[0] == '1' or x[0] == '2' or x[0] == '3' or x[0] == '4' or x[0] == '5' or x[0] == '6' or x[0] == '7' or x[0] == '8' or x[0] == '9'):\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    num = str(x)\n    if num[0] == '0':\n        return False\n    elif len(num) == 1:\n        return True\n    else:\n        for i in xrange(1, len(num)):\n            if num[i] == num[0] and num[i]!= num[i-1]:\n                return True\n        return False\n        \n    \n    \ndef is_leap(x):\n    '''\n    Write a function to check if the given number is leap year or not.\n    '''\n    num = str(x)\n    if len(num) == 2:\n        return True\n    elif len(num) == 4:\n        if num[0] == '0' and num[1] == '2' or num[1] == '4' or num[1] == '6' or num[1] == '8' or num[1] == '9':\n            return True\n        else:\n            return False\n    else:\n        return False\n        \n        \n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    v = list(str(x))\n    v.reverse()\n    l = len(v)\n    if (l == 6) and (v[0] == '1'):\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x.isdigit(): \n        if len(x) == 6: \n            return True \n    return False \n    \n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x == 'b' or x == 'd' or x == 'p' or x == 'r' or x == 'l' or x == 'z' or x == 'x'\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1]) - 2\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num > 0):\n        rem = num % 10\n        rev_num = rev_num*10 + rem\n        num /= 10\n    if(rev_num == (2 * num) - 1):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == int(str(num)[::-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num == int(str(num)[::-1])) and (num - 1 == int(str(num)[::-1]))\n    \nif __name__ == '__main__':\n    num = int(input('Enter a number:'))\n    if rev(num):\n        print('%d is one less than its reverse and two' % num)\n    else:\n        print('%d is not one less than its reverse and two' % num)"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num > 0:\n        return num*2 - 1\n    elif num < 0:\n        return (abs(num)+1) * 2\n    else:\n        return 0\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    num = abs(num)\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num / 10\n    if num == 0:\n        return True\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rnum = str(num)[::-1]\n    revnum = rnum[::-1]\n    if int(rnum) == 2*int(revnum):\n        return True\n    else:\n        return False\n    \n    \ndef isPalindrome(num):\n    '''\n    Write a python function to check if a given number is a palindrome\n    '''\n    num = str(num)\n    l = len(num)\n    if l == 1:\n        return True\n    for i in range(int(l/2)):\n        if num[i]!= num[l-i-1]:\n            return False\n    return True\n    \n    \ndef isPrime(num):\n    '''\n    Write a python function to check if a given number is a prime number.\n    '''\n    for i in range(2, num):\n        if num%i == 0:\n            return False\n    return True\n    \n    \ndef isArmstrong(num):\n    '''\n    Write a python function to check if a given number is an Armstrong number.\n    '''\n    l = len(str(num))\n    temp = num\n    sum = 0\n    while temp > 0:\n        digit = temp%10\n        sum += digit**l\n        temp //= 10\n    if num == sum:\n        return True\n    else:\n        return False\n        \n    \ndef isPerfect(num):\n    '''\n    Write a python function to check if a given number is a perfect number\n    '''\n    l = len(str(num))\n    temp = num\n    sum = 0\n    while temp > 0:\n        digit = temp%10\n        sum += digit\n        temp //= 10\n    if num == sum:\n        return True\n    else:\n        return False\n    \n    \ndef isMagic(num):\n    '''\n    Write a python function to check if a given number is a magic number\n    '''\n    l = len(str(num))\n    temp = num\n    sum = 0\n    while temp > 0:\n        digit = temp%10\n        sum += digit**l\n        temp //= 10\n    if num == sum:\n        return True\n    else:\n        return False\n    \n    \ndef isPerfectSquare(num):\n    '''\n    Write a python function to check if a given number is a perfect square\n    '''\n    x = num\n    y = (x + 1)//2\n    while(y*y > x):\n        x = y\n        y = (x + 1)//2\n    return x*x == num\n    \n    \ndef isPerfectCube(num):\n    '''\n    Write a python function to check if a given number is a perfect cube\n    '''\n    x = num\n    y = (x + 1)//3\n    while(y*y*y > x):\n        x = y\n        y = (x + 1)//3\n    return x*x*x == num\n    \n    \ndef isPerfectHex(num):\n    '''\n    Write a python function to check if a given number is a perfect hex number\n    '''\n    x = num\n    y = (x + 1)//2\n    while(y*y*y*y > x):\n        x = y\n        y = (x + 1)//2\n    return x*x*x*x == num\n    \n    \ndef isPerfectOct(num):\n    '''\n    Write a python function to check if a given number is a perfect octal number\n    '''\n    x = num\n    y = (x + 1)//3\n    while(y*y*y*y > x):\n        x = y\n        y = (x + 1)//3\n    return x*x*x*x == num\n    \n    \ndef isPerfectBin(num):\n    '''\n    Write a python function to check if a given number is a perfect binary number\n    '''\n    x = num\n    y = (x + 1)//2\n    while(y*y*y*y > x):\n        x = y\n        y = (x + 1)//2\n    return x*x*x*x == num\n    \n    \ndef isPrimeFactor(num, factors):\n    '''\n    Write a python function to check if a given number is a prime factor\n    '''\n    for i in range(2, num):\n        if num%i == 0:\n            factors.append(i)\n    return len(factors) == 0\n    \n    \ndef isPrimeFactors(num, factors):\n    '''\n    Write a python function to check if a given number is a prime factor\n    '''\n    for i in range(2, num):\n        if num%i == 0:\n            factors.append(i)\n    return len(factors) == 0\n    \n    \ndef isPerfectMultiplicative(num):\n    '''\n    Write a python function to check if a given number is a perfect multiplicative number\n    '''\n    factors = []\n    l = len(str(num))\n    temp = num\n    for i in range(2, l+1):\n        while temp > 0:\n            digit = temp%10\n            factors.append(digit)\n            temp //= 10\n        if len(factors) == i-1:\n            for j in range(2, i):\n                if factors[-j]!= j:\n                    return False\n        else:\n            return False\n        factors = []\n    return True\n    \n    \ndef isPerfectPower(num):\n    '''\n    Write a python function to check if a given number is a perfect power\n    '''\n    l = len(str(num))\n    temp = num\n    for i in range(2, l+1):\n        while temp > 0:\n            digit = temp%10\n            temp //= 10\n        temp = digit**(i-1)\n        if temp == num:\n            return True\n    return False\n    \n    \ndef isPerfectFraction(num):\n    '''\n    Write a python function to check if a given number is a perfect fraction\n    '''\n    l = len(str(num))\n    temp = num\n    for i in range(2, l+1):\n        while temp > 0:\n            digit = temp%10\n            temp //= 10\n        temp = digit/i\n        if temp == num:\n            return True\n    return False\n    \n    \ndef isPerfectCyclic(num):\n    '''\n    Write a python function to check if a given number is a perfect cyclic number\n    '''\n    l = len(str(num))\n    temp = num\n    for i in range(2, l+1):\n        while temp > 0:\n            digit = temp%10\n            temp //= 10\n        temp = (i*digit)%num\n        if temp == 0:\n            return True\n    return False\n    \n    \ndef isPrimePerm(num):\n    '''\n    Write a python function to check if a given number is a permuted prime number\n    '''\n    l = len(str(num))\n    temp = num\n    for i in range(2, l+1):\n        while temp > 0:\n            digit = temp%10\n            temp //= 10\n        temp = (digit*i)%num\n        if temp == 0:\n            return True\n    return False\n    \n    \ndef isPrimePower(num):\n    '''\n    Write a python function to check if a given number is a permuted prime power number\n    '''\n    l = len(str(num))\n    temp = num\n    for i in range(2, l+1):\n        while temp > 0:\n            digit = temp%10\n            temp //= 10\n        temp = (digit*digit*i)%num\n        if temp == 0:\n            return True\n    return False\n    \n    \ndef isPrimeAbundant(num):\n    '''\n    Write a python function to check if a given number is a abundant number\n    '''\n    l = len(str(num))\n    temp = num\n    for i in range(2, l+1):\n        while temp > 0:\n            digit = temp%10\n            temp //= 10\n        temp = (digit*i)%num\n        if temp == 0:\n            return True\n    return False\n    \n    \ndef isPerfectPower(num):\n    '''\n    Write a python function to check if a given number is a perfect power\n    '''\n    l = le"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    num_copy = num\n    while num_copy > 0:\n        rev_num *= 10\n        rev_num += num_copy % 10\n        num_copy //= 10\n    if num == rev_num - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    if num%10 == 0:\n        return False\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num = num//10\n    return num == (rev_num - 1)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n    rev_num = 0\n    while num > 0:\n        rev_num = (rev_num * 10) + (num % 10)\n        num = num // 10\n    if rev_num == (2 * num):\n        return True\n    return False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize the max to the first element\n    max = arr[0]\n    # Traverse through the elements of arr[]\n    for i in range(1, len(arr)) :\n        # If the number obtained is greater than the max then update the max\n        if arr[i] > max :\n            max = arr[i]\n    # Return the max\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(len(arr)) :\n        if max_num < arr[i] :\n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    arr.sort()\n    return arr[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0 \n    for i in range(len(arr)) : \n        for j in range(len(arr)) : \n            if j!= i and arr[i] < arr[j] : \n                if arr[i]*arr[j] > max_num : \n                    max_num = arr[i]*arr[j]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(1, len(arr)) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    arr.sort()\n    return arr[0]*arr[1]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = arr[0]\n    for i in arr : \n        if i > Max : \n            Max = i\n    return Max\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    global result\n    global m\n    global n\n    \n    result = 0\n    m = len(arr)\n    n = int(arr[0])\n    for i in range(m) : \n        temp = n * 10 + arr[i]\n        if temp > result :\n            result = temp\n            n = int(arr[i])\n    return result\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def sort_List(arr) :\n        '''\n        Write a python function to sort the given list of integers using insertion sort algorithm.\n        '''\n        for i in range(1, len(arr)):\n            key = arr[i]\n            j = i - 1\n            while (j >= 0 and arr[j] > key):\n                arr[j+1] = arr[j]\n                j = j - 1\n            arr[j+1] = key\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    if not arr :\n        return\n    \n    arr.sort()\n    arr = arr[::-1]\n    \n    if arr[0] == 0 :\n        return 0\n    \n    return int(\"\".join(str(x) for x in arr))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        print(\"x and y have opposite signs\")\n    elif x > 0 and y < 0:\n        print(\"x and y have opposite signs\")\n    elif x == 0 or y == 0:\n        print(\"x and y have same sign\")\n    else:\n        print(\"x and y have opposite signs\")\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y>0 and x*y<0: \n        return True \n    elif x*y<0 and x*y>0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    return str(n)[::-1] == str(n)\n    \ndef is_Prime(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n    return True\n    \ndef power(a, b):\n    '''\n    Write a python function to calculate the power of a number with b.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return (a * power(a,b-1))\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a python function to check whether the given two strings are anagram or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = sorted(s1)\n        s2 = sorted(s2)\n        for i in range(len(s1)):\n            if s1[i]!= s2[i]:\n                return False\n        return True\n        \ndef palindrome_permutation(s):\n    '''\n    Write a python function to check whether the given string is a palindrome permutation or not.\n    '''\n    if len(s) < 2:\n        return True\n    else:\n        if s[0]!= s[-1]:\n            return palindrome_permutation(s[1:-1])\n        else:\n            return palindrome_permutation(s[1:])\n    \ndef lexicographic_permutation(s1, s2):\n    '''\n    Write a python function to check whether the given two strings are a lexicographic permutation or not.\n    '''\n    for i in range(len(s1)):\n        if s1[i] < s2[i]:\n            return False\n    return True\n    \ndef consecutive(n):\n    '''\n    Write a python function to check whether the given integer is a consecutive number or not.\n    '''\n    if n == 1:\n        return True\n    else:\n        return (n + 1) % 10 == 0\n    \ndef is_abecedarian(s):\n    '''\n    Write a python function to check whether the given string is an abecedarian or not.\n    '''\n    for i in range(len(s)):\n        if s[i] > s[i+1]:\n            return False\n    return True\n    \ndef is_anagram_of_pandigital(n):\n    '''\n    Write a python function to check whether the given number is an anagram of pandigital or not.\n    '''\n    n = str(n)\n    if len(n)!= 9:\n        return False\n    else:\n        for i in range(1,10):\n            if str(i) not in n:\n                return False\n        return True\n    \ndef next_bigger(n):\n    '''\n    Write a python function to check whether the given integer is the next bigger number or not.\n    '''\n    n = str(n)\n    l = list(n)\n    k = l.index(max(l))\n    if int(n[k+1:]) > int(n[k+1:] + n[0:k+1]):\n        return int(n[k+1:] + n[0:k+1])\n    else:\n        return -1\n    \ndef max_divisor(n):\n    '''\n    Write a python function to calculate the maximum divisor of the given number.\n    '''\n    for i in range(n,0,-1):\n        if n % i == 0:\n            return i\n            \ndef is_primitive_root(n):\n    '''\n    Write a python function to check whether the given number is a primitive root or not.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    d = max_divisor(n)\n    return max_divisor(d) == 1 and max_divisor(n)!= n\n    \ndef is_perfect_square(n):\n    '''\n    Write a python function to check whether the given number is a perfect square or not.\n    '''\n    if n < 1:\n        return False\n    d = max_divisor(n)\n    if n % d == 0:\n        return True\n    else:\n        return False\n    \ndef is_quadratic_residue(n):\n    '''\n    Write a python function to check whether the given number is a quadratic residue or not.\n    '''\n    if n < 1:\n        return False\n    if is_perfect_square(n):\n        return False\n    if is_primitive_root(n):\n        return True\n    return False\n    \ndef is_power_of_two(n):\n    '''\n    Write a python function to check whether the given number is a power of two or not.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_power_of_two(n//2)\n    else:\n        return False\n    \ndef max_palindrome(n):\n    '''\n    Write a python function to calculate the largest palindrome which is obtained by merging two consecutive palindromes.\n    '''\n    if n == 1:\n        return 9\n    elif n % 2 == 0:\n        return int((n/2) * 9)\n    else:\n        return int(n * 9)\n    \ndef is_merge(a,b):\n    '''\n    Write a python function to check whether the given two numbers are merge of each other or not.\n    '''\n    if a == 0 or b == 0:\n        return False\n    else:\n        return (a%10 == b/10) and is_merge(a/10, b%10)\n    \ndef is_digit(n):\n    '''\n    Write a python function to check whether the given number is a digit or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return False\n    else:\n        return True\n    \ndef is_digit_only(s):\n    '''\n    Write a python function to check whether the given string is a digit only or not.\n    '''\n    for i in range(len(s)):\n        if not is_digit(s[i]):\n            return False\n    return True\n    \ndef is_pallindrome(n):\n    '''\n    Write a python function to check whether the given number is a pallindrome or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        return str(n) == str(n)[::-1]\n    \ndef find_next_palindrome(n):\n    '''\n    Write a python function to find the next palindrome greater than the given number.\n    '''\n    if n < 0:\n        return -1\n    elif is_palindrome(n):\n        return n + 1\n    else:\n        n = n + 1\n        while True:\n            if is_palindrome(n):\n                return n\n            n += 1\n            \ndef find_next_palindrome(n):\n    '''\n    Write a python function to find the next pallindrome greater than the given number.\n    '''\n    if n < 0:\n        return -1\n    elif is_palindrome(n):\n        return n + 1\n    else:\n        n += 1"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # x=int(raw_input(\"Enter the first number\"))\n    # y=int(raw_input(\"Enter the second number\"))\n    if x<0 and y>0:\n        print \"x and y are opposite\"\n    elif x>0 and y<0:\n        print \"x and y are opposite\"\n    else:\n        print \"x and y are not opposite\"\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return 1\n    elif x<0 and y<0:\n        return 2\n    elif x>0 and y<0:\n        return 3\n    elif x>0 and y>0:\n        return 4\n    else:\n        return 0\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 4 == 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((-1)**(n//2))*((n+1)**(3/2))\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**2 == 2*n*(3*n + 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #return True if n == 1 else (is_pentagonal(n) and is_hexagonal(n))\n    return n == 1 or is_pentagonal(n) and is_hexagonal(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagon = 0\n    while True:\n        octagon += 1\n        if (octagon**2) + (octagon**4) == n:\n            return octagon\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 15\n    elif n == 7:\n        return 22\n    elif n == 8:\n        return 35\n    elif n == 9:\n        return 51\n    elif n == 10:\n        return 81\n    elif n == 11:\n        return 105\n    elif n == 12:\n        return 13\n    elif n == 13:\n        return 21\n    elif n == 14:\n        return 28\n    elif n == 15:\n        return 35\n    elif n == 16:\n        return 43\n    elif n == 17:\n        return 57\n    elif n == 18:\n        return 73\n    elif n == 19:\n        return 91\n    elif n == 20:\n        return 111\n    elif n == 21:\n        return 143\n    elif n == 22:\n        return 157\n    elif n == 23:\n        return 179\n    elif n == 24:\n        return 199\n    elif n == 25:\n        return 233\n    elif n == 26:\n        return 263\n    elif n == 27:\n        return 297\n    elif n == 28:\n        return 337\n    elif n == 29:\n        return 377\n    elif n == 30:\n        return 413\n    elif n == 31:\n        return 449\n    elif n == 32:\n        return 487\n    elif n == 33:\n        return 523\n    elif n == 34:\n        return 561\n    elif n == 35:\n        return 605\n    elif n == 36:\n        return 649\n    elif n == 37:\n        return 697\n    elif n == 38:\n        return 743\n    elif n == 39:\n        return 789\n    elif n == 40:\n        return 825\n    elif n == 41:\n        return 881\n    elif n == 42:\n        return 927\n    elif n == 43:\n        return 983\n    elif n == 44:\n        return 1039\n    elif n == 45:\n        return 1085\n    elif n == 46:\n        return 1141\n    elif n == 47:\n        return 1187\n    elif n == 48:\n        return 1243\n    elif n == 49:\n        return 1289\n    elif n == 50:\n        return 1345\n    elif n == 51:\n        return 1391\n    elif n == 52:\n        return 1447\n    elif n == 53:\n        return 1493\n    elif n == 54:\n        return 1549\n    elif n == 55:\n        return 1595\n    elif n == 56:\n        return 1651\n    elif n == 57:\n        return 1697\n    elif n == 58:\n        return 1753\n    elif n == 59:\n        return 1799\n    elif n == 60:\n        return 1855\n    elif n == 61:\n        return 1909\n    elif n == 62:\n        return 1935\n    elif n == 63:\n        return 1982\n    elif n == 64:\n        return 2143\n    elif n == 65:\n        return 2199\n    elif n == 66:\n        return 2255\n    elif n == 67:\n        return 2301\n    elif n == 68:\n        return 2337\n    elif n == 69:\n        return 2383\n    elif n == 70:\n        return 2429\n    elif n == 71:\n        return 2485\n    elif n == 72:\n        return 2531\n    elif n == 73:\n        return 2587\n    elif n == 74:\n        return 2633\n    elif n == 75:\n        return 2689\n    elif n == 76:\n        return 2735\n    elif n == 77:\n        return 2791\n    elif n == 78:\n        return 2837\n    elif n == 79:\n        return 2893\n    elif n == 80:\n        return 2939\n    elif n == 81:\n        return 2985\n    elif n == 82:\n        return 3041\n    elif n == 83:\n        return 3087\n    elif n == 84:\n        return 3143\n    elif n == 85:\n        return 3199\n    elif n == 86:\n        return 3255\n    elif n == 87:\n        return 3302\n    elif n == 88:\n        return 3357\n    elif n == 89:\n        return 3393\n    elif n == 90:\n        return 3439\n    elif n == 91:\n        return 3485\n    elif n == 92:\n        return 3531\n    elif n == 93:\n        return 3587\n    elif n == 94:\n        return 3633\n    elif n == 95:\n        return 3689\n    elif n == 96:\n        return 3735\n    elif n == 97:\n        return 3791\n    elif n == 98:\n        return 3837\n    elif n == 99:\n        return 3893\n    elif n == 100:\n        return 3939\n    else:\n        return None\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n<0:\n        return None\n    elif n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return (8*(n+1)**2-2)/6\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(round(n**(1./3.)))**2 == n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (1 + 8*n - (2*n)*(n-1) - 8*(n-1)**2)\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1].isdigit():\n                dict[j-i+1] += 1\n    return dict\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if sum(map(int,str(s[i]))) == len(str(s[i])):\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    freq = defaultdict(int)\n    for i in xrange(len(s)):\n        for j in xrange(i+1, len(s)+1):\n            freq[int(s[i:j])] += 1\n    return sum(freq.values())\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = {}\n    def _count_substrings(s, i, j):\n        if i == j:\n            return\n        if s[i] in res:\n            res[s[i]] += 1\n        else:\n            res[s[i]] = 1\n        if s[j] in res:\n            res[s[j]] += 1\n        else:\n            res[s[j]] = 1\n        if s[i]+s[j] in res:\n            res[s[i]+s[j]] += 1\n        else:\n            res[s[i]+s[j]] = 1\n        _count_substrings(s, i+1, j-1)\n    _count_substrings(s, 0, len(s)-1)\n    print (res)\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    substring_count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(map(int, list(substring))) == j+1:\n                substring_count += 1\n    return substring_count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    str_len = len(s)\n    if not str_len:\n        return 0\n    i = 0\n    count = 0\n    while i<str_len:\n        temp = s[i]\n        j = i+1\n        while j<str_len:\n            if int(s[j]) == int(temp):\n                j += 1\n                temp += s[j]\n            else:\n                break\n        if int(temp)==len(temp):\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(map(int, list(s[i:j+1]))) == j-i+1:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    elif len(s) == 1:\n        return 1 if int(s) == len(s) else 0\n    substring_dict = defaultdict(int)\n    length = len(s)\n    for i in range(length):\n        if i == 0:\n            substring_dict[s[i]] += 1\n        else:\n            substring_dict[s[i]] += 1\n            substring_dict[s[i-1:i+1]] -= 1\n    count = 0\n    for key, value in substring_dict.items():\n        if int(key) == len(key):\n            count += value\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #counts = defaultdict(int)\n    counts = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i,n):\n            if sum(map(int,s[i:j+1])) == j-i+1:\n                counts += 1\n    return counts\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1 if s == '0' else 0\n    map_val = defaultdict(int)\n    map_val[0] = 1\n    map_val[1] = 1 if s[0] == '1' else 0\n    map_val[2] = 1 if s[0:2] == '10' else 0\n    \n    n = len(s)\n    for i in xrange(3, n+1):\n        map_val[i] = map_val[i-1]\n        if s[i-1]!= '0':\n            map_val[i] += map_val[i-2]\n    return map_val[n]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs[0], smallest_num(xs[1:]))\n    \ndef smallest_num2(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    elif len(xs) == 2:\n        return min(xs[0], xs[1])\n    else:\n        return min(xs[0], smallest_num2(xs[1:]))\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_difference:\n                max_difference = abs(test_list[i] - test_list[j])\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    pairs = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            pairs.append(abs(test_list[i]-test_list[j]))\n    return max(pairs)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # write your code here\n    res = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                res = max(res, test_list[i] - test_list[j])\n    return res\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for idx, val in enumerate(test_list):\n        for other_val in test_list[idx+1:]:\n            max_diff = max(max_diff, abs(val-other_val))\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    ans = 0\n    test_list.sort()\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-1, i, -1):\n            ans = max(ans, abs(test_list[i] - test_list[j]))\n    return ans\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    available_pairs = [None] * (len(test_list) / 2)\n    for i in xrange(len(available_pairs)):\n        available_pairs[i] = test_list[2 * i], test_list[2 * i + 1]\n    max_difference = 0\n    for i in xrange(len(available_pairs)):\n        for j in xrange(i, len(available_pairs)):\n            max_difference = max(max_difference, abs(available_pairs[i][0] - available_pairs[j][1]))\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = []\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            diff.append(abs(test_list[i] - test_list[j]))\n    return max(diff)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # using the number of elements as the first condition and then descending in the \n    # main while loop in each iteration and only comparing the 2nd element with the\n    # previous element\n    # get the length of the list\n    length = len(test_list)\n    # base case, if length is 1 then just return the list\n    if length == 1:\n        return test_list\n    # base case, if length is 2 then return the list\n    if length == 2:\n        return test_list\n    # base case, if length is 3 then return the list\n    if length == 3:\n        return test_list\n    # determine the maximum difference\n    max_difference = test_list[0] - test_list[1]\n    # store the current difference as the current max\n    current_difference = test_list[0] - test_list[1]\n    # store the max difference as the current max\n    max_difference = current_difference\n    # iterate through the list\n    for i in range(1, length - 1):\n        # increment the max difference\n        max_difference = max(max_difference, current_difference)\n        # store the current difference as the current max\n        current_difference = test_list[i] - test_list[i+1]\n    # return the max difference\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    m = lambda x: x[1]\n    return sorted(subjectmarks, key = m)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Write your code here\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    '''\n    ## TASK:\n    Given a list of tuples, sort by second tuple element.\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = operator.itemgetter(1))\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print 'Sort a list of tuples using the second value of each tuple.'\n    subjectmarks.sort(key=lambda x: x[1])\n    for i in subjectmarks:\n        print i\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = sorted(subjectmarks, key=lambda x: x[1])\n    return marks\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Need to decide what to do with empty lists\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for elem in data_list:\n        if type(elem) is list:\n            result = result + recursive_list_sum(elem)\n        else:\n            result = result + elem\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    return recursive_list_sum(data_list[1:]) + data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \n    \ndef flatten_list(data_list):\n    '''\n    Write a function to flatten a list and return a new list of integers.\n    '''\n    flat_list = []\n    for element in data_list:\n        if isinstance(element, list):\n            flat_list += flatten_list(element)\n        else:\n            flat_list.append(element)\n    return flat_list\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total_sum = 0\n    for item in data_list:\n        if type(item) is list:\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for element in list:\n        if element > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos += 1\n    return pos\n    \n    \ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    neg = 0\n    for i in list:\n        if i < 0:\n            neg += 1\n    return neg\n    \n    \ndef val_greater_than_avg(list):\n    '''\n    Write a python function to find the average of the list. The function returns\n    True if the list is greater than the average, False otherwise.\n    '''\n    avg = sum(list)/float(len(list))\n    for i in list:\n        if i > avg:\n            return True\n    return False\n    \n    \ndef val_less_than_avg(list):\n    '''\n    Write a python function to find the average of the list. The function returns\n    True if the list is less than the average, False otherwise.\n    '''\n    avg = sum(list)/float(len(list))\n    for i in list:\n        if i < avg:\n            return True\n    return False\n    \n    \ndef max_diff_list(list):\n    '''\n    Write a python function to find the maximum difference between adjacent\n    numbers in the list. The function returns the maximum difference if the\n    list is not empty, otherwise it returns None.\n    '''\n    if len(list) == 0:\n        return None\n    elif len(list) == 1:\n        return list[0]\n    elif len(list) == 2:\n        return abs(list[1]-list[0])\n    else:\n        prev = list[0]\n        diff = abs(list[1] - prev)\n        for i in list[2:]:\n            if abs(i - prev) > diff:\n                diff = abs(i - prev)\n            prev = i\n        return diff\n        \n    \ndef max_diff_list_in_range(list, start, end):\n    '''\n    Write a python function to find the maximum difference between adjacent\n    numbers in a list between two specified integers. The function returns\n    the maximum difference if the list is not empty, otherwise it returns\n    None.\n    '''\n    if len(list) == 0:\n        return None\n    elif len(list) == 1:\n        return abs(list[0]-start)\n    elif len(list) == 2:\n        return abs(list[1]-start)\n    else:\n        prev = start\n        diff = abs(list[1]-start)\n        for i in list[2:]:\n            if abs(i-prev) > diff:\n                diff = abs(i-prev)\n            prev = i\n        return diff\n        \n    \ndef max_diff_list_in_range2(list, start, end):\n    '''\n    Write a python function to find the maximum difference between adjacent\n    numbers in a list between two specified integers. The function returns\n    the maximum difference if the list is not empty, otherwise it returns\n    None.\n    '''\n    if len(list) == 0:\n        return None\n    elif len(list) == 1:\n        return abs(list[0]-end)\n    elif len(list) == 2:\n        return abs(list[1]-end)\n    else:\n        prev = end\n        diff = abs(list[1]-end)\n        for i in list[2:]:\n            if abs(i-prev) > diff:\n                diff = abs(i-prev)\n            prev = i\n        return diff\n        \n    \ndef duplicate_list(list):\n    '''\n    Write a python function to check for duplicates in the list. The function\n    returns True if there are any duplicates, False otherwise.\n    '''\n    if len(list) == 0 or len(list) == 1:\n        return False\n    else:\n        for i in list:\n            if list.count(i) > 1:\n                return True\n        return False\n    \n    \ndef duplicate_list_2(list):\n    '''\n    Write a python function to check for duplicates in the list. The function\n    returns True if there are any duplicates, False otherwise.\n    '''\n    if len(list) == 0 or len(list) == 1:\n        return False\n    else:\n        for i in list:\n            if i in list:\n                return True\n        return False\n        \n    \ndef duplicate_list_3(list):\n    '''\n    Write a python function to check for duplicates in the list. The function\n    returns True if there are any duplicates, False otherwise.\n    '''\n    if len(list) == 0 or len(list) == 1:\n        return False\n    else:\n        return len(list)!= len(set(list))\n        \n    \ndef duplicate_list_4(list):\n    '''\n    Write a python function to check for duplicates in the list. The function\n    returns True if there are any duplicates, False otherwise.\n    '''\n    if len(list) == 0 or len(list) == 1:\n        return False\n    else:\n        seen = []\n        for i in list:\n            if i in seen:\n                return True\n            else:\n                seen.append(i)\n        return False\n        \n    \ndef duplicate_list_5(list):\n    '''\n    Write a python function to check for duplicates in the list. The function\n    returns True if there are any duplicates, False otherwise.\n    '''\n    if len(list) == 0 or len(list) == 1:\n        return False\n    else:\n        return len(list)!= len(set(list))\n        \n        \ndef find_smallest(list):\n    '''\n    Write a python function to find the smallest number in a list. The function\n    returns the smallest number if the list is not empty, otherwise it returns\n    None.\n    '''\n    if len(list) == 0:\n        return None\n    else:\n        smallest = list[0]\n        for i in list:\n            if i < smallest:\n                smallest = i\n        return smallest\n        \n    \ndef find_smallest_2(list):\n    '''\n    Write a python function to find the smallest number in a list. The function\n    returns the smallest number if the list is not empty, otherwise it returns\n    None.\n    '''\n    if len(list) == 0:\n        return None\n    else:\n        smallest = list[0]\n        for i in list:\n            if i < smallest:\n                smallest = i\n        return smallest\n        \n    \ndef find_smallest_3(list):\n    '''\n    Write a python function to find the smallest number in a list. The function\n    returns the smallest number if the list is not empty, otherwise it returns\n    None.\n    '''\n    if len(list) == 0:\n        return None\n    else:\n        return min(list)\n        \n    \ndef find_smallest_4(list):\n    '''\n    Write a python function to find the smallest number in a list. The function\n    returns the smallest number if the list is not empty, otherwise it returns\n    None.\n    '''\n    if len(list) == 0:\n        return None\n    else:\n        return min(list)\n        \n        \ndef find_smallest_5(list):\n    '''\n    Write a python function to find the smallest number in a list. The function\n    returns the smallest number if the list is not empty, otherwise it returns\n    None.\n    '''\n    if len(list) == 0:\n        return None\n    else:\n        return min(list)\n        \n        \ndef find_smallest_6(list):\n    '''\n    Write a python function to find the smallest number in a list. The function\n    returns the smallest number if the list is not empty, otherwise it returns\n    None.\n    '''\n    if len(list) == 0:\n        return None\n    else:\n        return min(list)\n        \n    \ndef find_largest(list):\n    '''\n    Write a python function to find the largest number in a list. The function\n    returns the largest number if the list is not empty, otherwise it returns\n    None.\n    '''\n    if len(list) == 0:\n        return None\n    else:\n        larges"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([i for i in list if i>0])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # The Bell number is a sequence of natural numbers that can be written as\n    # the sum of more than one of the n - 1 numbers.\n    # A set of Bell numbers is defined as a natural number of n-1 digits\n    # that has all the same digits.\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = [1]\n    for i in range(1,n):\n        ways.append(sum(ways[:i]))\n    return ways[-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    bell = [1]\n    \n    for i in range(1,n):\n        bell.append(bell[i-1] + i)\n        \n    return bell[n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    def factorial(n):\n        '''\n        Return the factorial of n.\n        '''\n        return 1 if n == 0 else n*factorial(n-1)\n    \n    def bell(n):\n        '''\n        Return the nth Bell number.\n        '''\n        return (factorial(n)/(factorial(n-1)*factorial(n-2))) if n == 0 else bell(n-1)+bell(n-2)\n    \n    return bell(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = [0 for _ in range(n+1)]\n    ways[0] = 1\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if ways[i-j] and j > 1:\n                ways[i] += ways[i-j]\n    return ways[n]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=2:\n        return True\n    elif A[0]<A[1]:\n        for i in range(2,len(A)):\n            if A[i-1]<=A[i]:\n                continue\n            else:\n                return False\n    else:\n        for i in range(2,len(A)):\n            if A[i-1]>=A[i]:\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)):\n        if A[i-1] < A[i]:\n            continue\n        elif A[i-1] > A[i]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n    \n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 3:\n        return True\n    i = 1\n    while i < len(A):\n        if A[i] < A[i-1]:\n            return False\n        elif A[i] > A[i-1]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return A[-1] - A[0] >= 0\n    \ndef test_is_Monotonic():\n    assert is_Monotonic([-1, 1, 2, 3, 4, 5])\n    assert is_Monotonic([-1, 1, 3, 4, 5])\n    assert is_Monotonic([-1, -1, -1, -1, -1])\n    assert is_Monotonic([1, 1, 1, 1, 1])\n    assert is_Monotonic([1, 2, 2, 2, 2])\n    assert is_Monotonic([1, 2, 3, 4, 5])\n    assert is_Monotonic([-1, 1, 1, 1, 1])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n    assert is_Monotonic([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n    assert is"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (len(A) > 1): \n        if (A[0] > A[1]): \n            for i in range(1, len(A)): \n                if (A[i - 1] > A[i]): \n                    return False\n        else: \n            for i in range(1, len(A)): \n                if (A[i - 1] < A[i]): \n                    return False\n        return True\n    else: \n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A[0] >= A[-1] and A[0] == A[1]:\n        return True\n    elif A[-1] >= A[0] and A[-1] == A[-2]:\n        return True\n    elif A[0] == A[-1] and A[0] == A[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    if A[0] <= A[-1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == None:\n        return True\n    if len(s) > len(l):\n        return False\n    if s == l:\n        return True\n    else:\n        return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in xrange(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    if len(l) < len(s):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            break\n    else:\n        return True\n    return is_sublist(l[i + 1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if not l:\n        return False\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    if len(l) < len(s):\n        return False\n    \n    if len(l) == len(s):\n        if l == s:\n            return True\n    \n    if len(l) > len(s):\n        sublist = l[0:len(s)]\n        if sublist == s:\n            return True\n    \n    return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # start writing your code here\n    print \"Input: \", Input\n    if len(Input)==0:\n        return True\n    else:\n        S=set()\n        for i in Input:\n            S.add(len(i))\n        if len(S)==1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:\n        return True\n    else:\n        return (len(Input[0]) == len(Input[1]) and\n               len(Input[0]) == len(Input[2]) and\n               len(Input[1]) == len(Input[2]))\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input) - 1):\n        for j in range(len(Input) - 1):\n            if Input[j][0]!= Input[j + 1][0]:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    flag = 1\n    for i in Input:\n        if len(i) == len(Input[0]):\n            continue\n        else:\n            flag = 0\n    if flag == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    num_tuples = len(Input)\n    if num_tuples < 2:\n        return True\n    else:\n        for i in range(0, num_tuples - 1):\n            if len(Input[i])!= len(Input[i+1]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(len(x) for x in Input)) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    for i in Input:\n        if len(i) == len(Input[0]):\n            Output.append(i)\n    if len(Output) == len(Input):\n        return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # Iterate over the list of tuples and check if the length of each tuple is same or not\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(x) for x in Input)) > 1:\n        return False\n    return True\n    \ndef sort_by_length(Input):\n    '''\n    Write a function to sort the tuples by length in ascending order.\n    '''\n    return sorted(Input, key = lambda x:len(x))\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Don't sort empty list\n    if not nums:\n        return nums\n    \n    # Get the length of the list\n    n = len(nums)\n    \n    # Pick an arbitrary number to compare to\n    if n > 1:\n        key = nums[0]\n        for i in range(n):\n            # The first element is the best to compare to\n            if nums[i] < key:\n                key = nums[i]\n            else:\n                # Now, we know that the current value is greater than the previous\n                # Therefore, we can swap the current element with the previous element\n                nums[i - 1], nums[i] = nums[i], nums[i - 1]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(i,n):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    gap = 1\n    while gap < len(nums) // 3:\n        gap = 3 * gap + 1\n    while gap > 0:\n        for i in range(gap, len(nums)):\n            temp = nums[i]\n            j = i - gap\n            while j >= 0 and nums[j] > temp:\n                nums[j + gap] = nums[j]\n                j -= gap\n            nums[j + gap] = temp\n        gap = 1 if gap == 3 else int(gap / 3)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return\n    stack = []\n    stack.append(nums.pop())\n    while len(nums) > 0:\n        while len(stack) > 0:\n            if nums[0] < stack[-1]:\n                stack.append(nums.pop(0))\n            else:\n                break\n        if len(stack) == 0:\n            return\n        top = stack.pop()\n        while len(stack) > 0:\n            if top < stack[-1]:\n                stack.append(top)\n                break\n            else:\n                stack.pop()\n        if len(stack) == 0:\n            stack.append(top)\n    return stack\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            temp = nums[i]\n            nums[i] = nums[i+1]\n            nums[i+1] = temp\n            for j in range(i+2,len(nums)):\n                if nums[j] < nums[i+1]:\n                    temp = nums[i+1]\n                    nums[i+1] = nums[j]\n                    nums[j] = temp\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    gap = length\n    swapped = True\n    start = 0\n    end = length - 1\n    while gap!= 1 or swapped == 1:\n        swapped = False\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        for i in range(start, end, gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        swapped = False\n        start = start + gap\n        end = end - gap\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        j = i\n        while j > 0 and nums[j] < nums[j-1]:\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n            j -= 1\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if (i**2 + j**2) == (n-i-j):\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i=1\n    while(i**2<=n):\n        if n-i**2 in range(1,10**4):\n            return True\n        i+=1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n/2):\n        if i**2 - n < 0:\n            break\n        elif i**2 - n == 0:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n): \n        for j in range(n): \n            if i*i + j*j == n: \n                return 1 \n    return 0\n    \ndef square_diff(n): \n    '''\n    Write a python function to find the square difference of a number. \n    '''\n    sq_diff = 0 \n    i = 1 \n    while sq_diff < n: \n        sq_diff += i \n        i += 1\n    return sq_diff\n    \ndef is_square_diff(n): \n    '''\n    Write a python function to find the square difference of a number. \n    '''\n    sq_diff = 0 \n    i = 1 \n    while sq_diff < n: \n        sq_diff += i \n        i += 1\n    if sq_diff == n: \n        return 1 \n    return 0\n    \ndef sum_of_factors(n): \n    '''\n    Write a python function to find the sum of the factors of a number.\n    '''\n    sum = 1 \n    i = 1 \n    while i <= n: \n        if n%i == 0: \n            sum += i \n        i += 1 \n    return sum \n    \ndef is_factor(n, num): \n    '''\n    Write a python function to check whether a number is factor of a number or not.\n    '''\n    if n%num == 0: \n        return 1 \n    return 0 \n    \ndef find_common_factor(n, num1, num2): \n    '''\n    Write a python function to find the common factor of two numbers.\n    '''\n    while n % num1 == 0 and n % num2 == 0: \n        n /= num1 \n    return n \n    \ndef find_lcm(n, num1, num2): \n    '''\n    Write a python function to find the lowest common multiple of two numbers. \n    '''\n    common_factor = find_common_factor(n, num1, num2) \n    if common_factor == 1: \n        return n \n    return n * common_factor \n    \ndef is_prime(n): \n    '''\n    Write a python function to check whether the given number is prime or not. \n    '''\n    if n == 2: \n        return 1 \n    i = 2 \n    while i < n: \n        if n%i == 0: \n            return 0 \n        i += 1 \n    return 1 \n    \ndef is_divisible(n, divisor): \n    '''\n    Write a python function to check whether a number is divisible by another number or not. \n    '''\n    if n % divisor == 0: \n        return 1 \n    return 0 \n    \ndef is_perfect_number(n): \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    sum = 1 \n    i = 1 \n    while i <= n/2: \n        if n%i == 0: \n            sum += i \n        i += 1 \n    return sum == n \n    \ndef is_prime_num(num): \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if num == 2: \n        return 1 \n    i = 2 \n    while i < num: \n        if num%i == 0: \n            return 0 \n        i += 1 \n    return 1 \n    \ndef is_perfect_num(num): \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    sum = 1 \n    i = 1 \n    while i <= num/2: \n        if num%i == 0: \n            sum += i \n        i += 1 \n    return sum == num \n    \ndef find_perfect_num(n): \n    '''\n    Write a python function to find the sum of all perfect numbers under n.\n    '''\n    perfect_sum = 0 \n    i = 1 \n    while i < n: \n        if is_perfect_num(i): \n            perfect_sum += i \n        i += 1 \n    return perfect_sum \n    \ndef is_perfect_squre(n): \n    '''\n    Write a python function to check whether the given number is perfect square or not.\n    '''\n    perfect_sqr = 0 \n    sqrt = int(n**(1/2))\n    i = sqrt \n    while i > 1: \n        if n%i == 0: \n            perfect_sqr += i \n        i -= 1 \n    if perfect_sqr == n: \n        return 1 \n    return 0 \n    \ndef find_perfect_sqr(n): \n    '''\n    Write a python function to find the sum of all perfect square numbers under n.\n    '''\n    perfect_sqr_sum = 0 \n    i = 1 \n    while i <= n: \n        if is_perfect_squre(i): \n            perfect_sqr_sum += i \n        i += 1 \n    return perfect_sqr_sum \n    \ndef find_perfect_cube(n): \n    '''\n    Write a python function to find the sum of all perfect cube numbers under n.\n    '''\n    perfect_cube_sum = 0 \n    i = 1 \n    while i <= n: \n        if is_perfect_squre(i): \n            perfect_cube_sum += i \n        i += 1 \n    return perfect_cube_sum \n    \ndef is_perfect_cube(n): \n    '''\n    Write a python function to check whether the given number is perfect cube or not.\n    '''\n    perfect_cube = 0 \n    i = 1 \n    while i <= n**(1/3): \n        if n%i == 0: \n            perfect_cube += i \n        i += 1 \n    return perfect_cube == n \n    \ndef find_perfect_cube_num(n): \n    '''\n    Write a python function to find the sum of all perfect cube numbers under n.\n    '''\n    perfect_cube_sum = 0 \n    i = 1 \n    while i <= n: \n        if is_perfect_cube(i): \n            perfect_cube_sum += i \n        i += 1 \n    return perfect_cube_sum \n    \ndef is_perfect_square(n): \n    '''\n    Write a python function to check whether the given number is perfect square or not.\n    '''\n    perfect_sqr = 0 \n    sqrt = int(n**(1/2))\n    i = sqrt \n    while i > 1: \n        if n%i == 0: \n            perfect_sqr += i \n        i -= 1 \n    return perfect_sqr == n \n    \ndef find_perfect_square_num(n): \n    '''\n    Write a python function to find the sum of all perfect square numbers under n.\n    '''\n    perfect_sqr_sum = 0 \n    i = 1 \n    while i <= n: \n        if is_perfect_square(i): \n            perfect_sqr_sum += i \n        i += 1 \n    return perfect_sqr_sum \n    \ndef is_perfect_triangle(n): \n    '''\n    Write a python function to check whether the given number is perfect triangle or not.\n    '''\n    perfect_triangle_sum = 0 \n    i = 1 \n    while i <= n/2: \n        if n%i == 0: \n            perfect_triangle_sum += i \n        i += 1 \n    if perfect_triangle_sum == n: \n        return 1 \n    return 0 \n    \ndef find_perfect_triangle_num(n): \n    '''\n    Write a python function to find the sum of all perfect triangle numbers under n.\n    '''\n    perfect_triangle_sum = 0 \n    i = 1 \n    while i <= n: \n        if is_perfect_triangle(i): \n            perfect_triangle_sum += i \n        i += 1 \n    return perfect"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s1 = 1\n    s2 = 1\n    while s1<=n:\n        if n-s1**2 in xrange(1,s1+1):\n            return True\n        s1+=1\n    return False\n    \ndef is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def square_diff(a, b):\n        return (a * a - b * b) % 10007\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Assume n > 0 and n can be represented as two squares.\n    for i in range(1, n):\n        if i**2 == n - i**2:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n-i**2 in range(1,n+1):\n            count += 1\n    if count == 2:\n        return True\n    else:\n        return False\n    \ndef is_substring(string,substring):\n    '''\n    Write a python function to check whether the given string is a substring of another string.\n    '''\n    return substring in string\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    root_n = int(n**(1/2))\n    for i in range(root_n+1):\n        if i**2 - n == root_n**2 - n:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    temp = n**2\n    if n%temp==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #colors = ['red', 'green', 'blue', 'orange']\n    #patterns = ['rg', 'rg', 'rb', 'rg']\n    #\n    #colors = ['red', 'green', 'blue', 'orange']\n    #patterns = ['rg', 'rg', 'rb', 'rg']\n    #\n    #colors = ['red', 'green', 'blue', 'orange']\n    #patterns = ['rg', 'rg', 'rb', 'rg', 'rb', 'rg']\n    \n    for i in range(len(patterns)):\n        if patterns[i] == 'rg':\n            if colors[i] =='red':\n                continue\n            else:\n                return False\n        if patterns[i] == 'rb':\n            if colors[i] =='red':\n                continue\n            elif colors[i] == 'blue':\n                continue\n            else:\n                return False\n        if patterns[i] == 'rg':\n            if colors[i] == 'green':\n                continue\n            else:\n                return False\n    return True\n    \n    \nprint is_samepatterns(colors, patterns)    \n    \n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if colors[0] == patterns[0]:\n        return is_samepatterns(colors[1:], patterns[1:])\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #base case\n    if len(colors)==0:\n        return True\n    #if its not a pattern just return false\n    if not is_pattern(colors[0], patterns):\n        return False\n    #otherwise if it is a pattern check if the next color is in the pattern\n    #the is_pattern function returns True if the patterns array is in order\n    return is_samepatterns(colors[1:], patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # If the size of the list is not the same as the size of the patterns array, there is no pattern to match with\n    if len(colors)!= len(patterns):\n        return False\n    else:\n        # Otherwise, iterate through the colors array and compare the colors to the patterns array\n        for c in range(len(colors)):\n            if colors[c] == patterns[c]:\n                continue\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def is_samepatterns_aux(patterns, colors, n, i, m):\n        if i == n:\n            return True\n        if patterns[i] == '?':\n            for c in colors:\n                if is_samepatterns_aux(patterns, colors, n, i+1, m):\n                    return True\n            return False\n        elif patterns[i] == '*':\n            for j in range(m):\n                if is_samepatterns_aux(patterns, colors, n, i+1, m):\n                    return True\n            return False\n        elif patterns[i] == '+':\n            for j in range(m):\n                if is_samepatterns_aux(patterns, colors, n, i+1, m):\n                    return True\n            return False\n        else:\n            return is_samepatterns_aux(patterns, colors, n, i+1, m)\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    '''\n    0 0 0 0 1 1 1\n    0 0 0 0 1 1 1\n    0 0 0 0 1 1 1\n    0 0 0 0 1 1 1\n    '''\n    if len(patterns) > len(colors):\n        return False\n    else:\n        for i in range(len(patterns)):\n            if colors[i]!= patterns[i]:\n                return False\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if not patterns:\n        return True\n    current = colors[0]\n    for pattern in patterns:\n        if current == pattern[0]:\n            if len(pattern) == 1:\n                return True\n            current = colors[pattern[1]]\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in xrange(len(patterns)):\n        if len(patterns[i]) == 1:\n            if colors[i] == patterns[i][0]:\n                continue\n            else:\n                return False\n        for j in xrange(len(patterns[i])-1):\n            if patterns[i][j]!= patterns[i][j+1]:\n                if colors[i] == patterns[i][j]:\n                    continue\n                else:\n                    return False\n        if i == len(patterns) - 1:\n            if len(patterns[i]) == 1:\n                if colors[i] == patterns[i][0]:\n                    continue\n                else:\n                    return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_list = list(colors)\n    for pattern in patterns:\n        print 'looking for', pattern\n        # go through pattern comparing current index to next\n        for i in range(len(pattern)):\n            # if current index matches next index in pattern\n            if pattern[i] == color_list[i]:\n                # print 'found'\n                # if end of pattern is reached, break loop\n                if i == len(pattern) - 1:\n                    break\n                # if next index in pattern is not matched, break loop\n                if pattern[i+1]!= color_list[i+1]:\n                    break\n        # if pattern is matched, remove the index from color list\n        if i == len(pattern) - 1:\n            for j in range(len(pattern)):\n                color_list.remove(pattern[j])\n    # if length of color list is 0, then pattern is matched\n    if len(color_list) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for ele in test_list:\n        flag = True\n        for e in ele:\n            if e % K!= 0:\n                flag = False\n                break\n        if flag:\n            res.append(ele)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    final_list = []\n    if K == 1:\n        return test_list\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            if test_list[i][j] % K!= 0:\n                break\n        else:\n            final_list.append(test_list[i])\n    return final_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #tuple_list = [t for t in test_list if t[0]%k==0 and t[1]%k==0]\n    tuple_list = []\n    for t in test_list:\n        if t[0]%k==0 and t[1]%k==0:\n            tuple_list.append(t)\n    return tuple_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tuple in test_list:\n        if all([ele % K == 0 for ele in tuple]):\n            divisible_tuples.append(tuple)\n    return divisible_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if K == 1:\n        return [(x,y) for x,y in test_list if x % y == 0]\n    else:\n        return [(x,y) for x,y in test_list if all([x % i == 0 for i in range(1, K+1)]) and not any([x % k == 0 for k in range(2, K+1)])]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for t in test_list:\n        for i in t:\n            if i % K!= 0:\n                break\n        else:\n            divisible_tuples.append(t)\n    return divisible_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for t in test_list:\n        if all(i%K==0 for i in t):\n            ans.append(t)\n    return ans\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for a in test_list:\n        if sum(a) % K == 0:\n            result_list.append(a)\n    return result_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for tup in test_list:\n        if all(True if x%K == 0 else False for x in tup):\n            count += 1\n    return count\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for i in test_list:\n        if (i[0] % K == 0 and i[1] % K == 0):\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return ((n%11) == 0)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n    \ndef divisible_by_11(n):\n    '''\n    Write a python function to find whether a number is divisible by 11\n    '''\n    return n%11 == 0\n    \n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    f = 1\n    while n > 0:\n        f = f*n\n        n = n - 1\n    return f\n    \ndef factorial_iteration(n):\n    '''\n    Write a python function to find the factorial of a number\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_iteration(n-1)\n    \n    \ndef fib(n):\n    '''\n    Write a python function to calculate the fibonacci sequence\n    '''\n    a = 1\n    b = 1\n    while n > 0:\n        a,b = b, a + b\n        n = n - 1\n    return b\n    \n    \ndef fib_iteration(n):\n    '''\n    Write a python function to calculate the fibonacci sequence\n    '''\n    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n    return fib_iteration(n-1) + fib_iteration(n-2)\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to calculate the fibonacci sequence\n    '''\n    a = 1\n    b = 1\n    print (a)\n    print (b)\n    for i in range(n-1):\n        a,b = b, a + b\n        print (b)\n        \n    \ndef fibonacci_iteration(n):\n    '''\n    Write a python function to calculate the fibonacci sequence\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci_iteration(n-1) + fibonacci_iteration(n-2)\n    \n    \ndef matrix_determinant(matrix):\n    '''\n    Write a python function to calculate the determinant of a matrix.\n    '''\n    if len(matrix) == 1:\n        return matrix[0][0]\n    else:\n        determinant = 0\n        for i in range(len(matrix)):\n            sub_matrix = []\n            for j in range(1,len(matrix)):\n                sub_matrix.append(matrix[j][:i] + matrix[j][i+1:])\n            determinant += (-1)**(i) * matrix[0][i] * matrix_determinant(sub_matrix)\n        return determinant\n    \n    \ndef matrix_determinant_iteration(matrix):\n    '''\n    Write a python function to calculate the determinant of a matrix.\n    '''\n    if len(matrix) == 1:\n        return matrix[0][0]\n    else:\n        determinant = 0\n        for i in range(len(matrix)):\n            sub_matrix = []\n            for j in range(1,len(matrix)):\n                sub_matrix.append(matrix[j][:i] + matrix[j][i+1:])\n            determinant += (-1)**(i) * matrix[0][i] * matrix_determinant_iteration(sub_matrix)\n        return determinant\n    \n    \ndef matrix_inverse(matrix):\n    '''\n    Write a python function to find the inverse of a matrix.\n    '''\n    determinant = matrix_determinant(matrix)\n    if determinant == 0:\n        return \"This matrix doesn't have an inverse\"\n    else:\n        determinant = 1/determinant\n        inverse = []\n        for i in range(len(matrix)):\n            sub_matrix = []\n            for j in range(len(matrix)):\n                sub_matrix.append(matrix[j][:i] + matrix[j][i+1:])\n            inverse.append([])\n            for k in range(len(sub_matrix)):\n                inverse[-1].append(matrix_determinant_iteration(sub_matrix[:k]+sub_matrix[k+1:]))\n        inverse = inverse_helper(inverse, 0, 0)\n        for i in range(len(inverse)):\n            for j in range(len(inverse)):\n                inverse[i][j] = inverse[i][j] * determinant\n        return inverse\n    \n    \ndef inverse_helper(inverse, i, j):\n    if i >= len(inverse):\n        return inverse\n    else:\n        inverse[i][j] = inverse_helper(inverse, i+1, j)\n        return inverse_helper(inverse, i, j+1)\n    \n    \ndef add_matrix(a,b):\n    '''\n    Write a python function to add two matrices.\n    '''\n    if len(a)!= len(b) or len(a[0])!= len(b[0]):\n        return \"Invalid\"\n    else:\n        result = []\n        for i in range(len(a)):\n            row = []\n            for j in range(len(a[0])):\n                row.append(a[i][j] + b[i][j])\n            result.append(row)\n        return result\n    \ndef sub_matrix(a,b):\n    '''\n    Write a python function to subtract two matrices.\n    '''\n    if len(a)!= len(b) or len(a[0])!= len(b[0]):\n        return \"Invalid\"\n    else:\n        result = []\n        for i in range(len(a)):\n            row = []\n            for j in range(len(a[0])):\n                row.append(a[i][j] - b[i][j])\n            result.append(row)\n        return result\n    \ndef transpose(matrix):\n    '''\n    Write a python function to transpose a matrix.\n    '''\n    if len(matrix)!= len(matrix[0]):\n        return \"Invalid\"\n    else:\n        transpose = []\n        for i in range(len(matrix)):\n            transpose.append([])\n            for j in range(len(matrix[0])):\n                transpose[i].append(matrix[j][i])\n        return transpose\n    \ndef mult_matrix_const(matrix, const):\n    '''\n    Write a python function to multiply a matrix by a constant.\n    '''\n    if len(matrix)!= len(matrix[0]):\n        return \"Invalid\"\n    else:\n        result = []\n        for i in range(len(matrix)):\n            row = []\n            for j in range(len(matrix[0])):\n                row.append(matrix[i][j] * const)\n            result.append(row)\n        return result\n    \ndef mult_matrix_matrix(a, b):\n    '''\n    Write a python function to multiply two matrices.\n    '''\n    if len(a[0])!= len(b):\n        return \"Invalid\"\n    else:\n        result = []\n        for i in range(len(a)):\n            row = []\n            for j in range(len(b[0])):\n                sum = 0\n                for k in range(len(a[0])):\n                    sum += a[i][k]*b[k][j]\n                row.append(sum)\n            result.append(row)\n        return result\n    \ndef dot_product(a, b):\n    '''\n    Write a python function to multiply two matrices.\n    '''\n    if len(a)!= len(b):\n        return \"Invalid\"\n    else:\n        dot = 0\n        for i in range(len(a)):\n            for j in range(len(b[0])):\n                dot += a[i][j] * b[i][j]\n        return dot\n    \ndef sum_of_matrix(matrix):\n    '''\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return ((n % 11) == 0)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0: \n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return not n % 11\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n%11) == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!= 0: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n    \nprint word_len('Hello')\nprint word_len('World')\nprint word_len('Python')\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        print('The word is even')\n    else:\n        print('The word is odd')\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print 'Word is even'\n    else:\n        print 'Word is odd'\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 10\n    if n == 5:\n        return 15\n    if n == 6:\n        return 22\n    if n == 7:\n        return 35\n    if n == 8:\n        return 42\n    if n == 9:\n        return 55\n    if n == 10:\n        return 69\n    if n == 11:\n        return 97\n    if n == 12:\n        return 112\n    if n == 13:\n        return 128\n    if n == 14:\n        return 143\n    if n == 15:\n        return 157\n    if n == 16:\n        return 171\n    if n == 17:\n        return 185\n    if n == 18:\n        return 202\n    if n == 19:\n        return 216\n    if n == 20:\n        return 233\n    if n == 21:\n        return 249\n    if n == 22:\n        return 275\n    if n == 23:\n        return 306\n    if n == 24:\n        return 337\n    if n == 25:\n        return 366\n    if n == 26:\n        return 403\n    if n == 27:\n        return 429\n    if n == 28:\n        return 459\n    if n == 29:\n        return 495\n    if n == 30:\n        return 528\n    if n == 31:\n        return 573\n    if n == 32:\n        return 604\n    if n == 33:\n        return 645\n    if n == 34:\n        return 686\n    if n == 35:\n        return 728\n    if n == 36:\n        return 773\n    if n == 37:\n        return 811\n    if n == 38:\n        return 853\n    if n == 39:\n        return 894\n    if n == 40:\n        return 929\n    if n == 41:\n        return 969\n    if n == 42:\n        return 1011\n    if n == 43:\n        return 1054\n    if n == 44:\n        return 1080\n    if n == 45:\n        return 1111\n    if n == 46:\n        return 1162\n    if n == 47:\n        return 1189\n    if n == 48:\n        return 1236\n    if n == 49:\n        return 1277\n    if n == 50:\n        return 1316\n    if n == 51:\n        return 1367\n    if n == 52:\n        return 1398\n    if n == 53:\n        return 1448\n    if n == 54:\n        return 1483\n    if n == 55:\n        return 1535\n    if n == 56:\n        return 1576\n    if n == 57:\n        return 1617\n    if n == 58:\n        return 1666\n    if n == 59:\n        return 1697\n    if n == 60:\n        return 1739\n    if n == 61:\n        return 1770\n    if n == 62:\n        return 1812\n    if n == 63:\n        return 1863\n    if n == 64:\n        return 1911\n    if n == 65:\n        return 1966\n    if n == 66:\n        return 2032\n    if n == 67:\n        return 2073\n    if n == 68:\n        return 2114\n    if n == 69:\n        return 2255\n    if n == 70:\n        return 2280\n    if n == 71:\n        return 2321\n    if n == 72:\n        return 2362\n    if n == 73:\n        return 2393\n    if n == 74:\n        return 2434\n    if n == 75:\n        return 2475\n    if n == 76:\n        return 2516\n    if n == 77:\n        return 2557\n    if n == 78:\n        return 2589\n    if n == 79:\n        return 2630\n    if n == 80:\n        return 2671\n    if n == 81:\n        return 2712\n    if n == 82:\n        return 2743\n    if n == 83:\n        return 2784\n    if n == 84:\n        return 2825\n    if n == 85:\n        return 2866\n    if n == 86:\n        return 2907\n    if n == 87:\n        return 2948\n    if n == 88:\n        return 2979\n    if n == 89:\n        return 3020\n    if n == 90:\n        return 3061\n    if n == 91:\n        return 3092\n    if n == 92:\n        return 3133\n    if n == 93:\n        return 3174\n    if n == 94:\n        return 3215\n    if n == 95:\n        return 3256\n    if n == 96:\n        return 3297\n    if n == 97:\n        return 3338\n    if n == 98:\n        return 3369\n    if n == 99:\n        return 3408\n    if n == 100:\n        return 3459\n    if n == 101:\n        return 3480\n    if n == 102:\n        return 3521\n    if n == 103:\n        return 3562\n    if n == 104:\n        return 3583\n    if n == 105:\n        return 3624\n    if n == 106:\n        return 3655\n    if n == 107:\n        return 3696\n    if n == 108:\n        return 3737\n    if n == 109:\n        return 3771\n    if n == 110:\n        return 3814\n    if n == 111:\n        return 3845\n    if n == 112:\n        return 3876\n    if n == 113:\n        return 3917\n    if n == 114:\n        return 3958\n    if n == 115:\n        return 3989\n    if n == 116:\n        return 4030\n    if n == 117:\n        return 4071\n    if n == 118:\n        return 4102\n    if n == 119:\n        return 4143\n    if n == 120:\n        return 4184\n    if n == 121:\n        return 4235\n    if n == 122:\n        return 4276\n    if n == 123:\n        return 4317\n    if n == 124:\n        return 4358\n    if n == 125:\n        return 4389\n    if n == 126:\n        return 4440\n    if n == 127:\n        return 4471\n    if n == 128:\n        return 4492\n    if n == 129:\n        return 4533\n    if n == 130:\n        return 4574\n    if n == 131:\n        return 4605\n    if n == 132:\n        return 4636\n    if n == 133:\n        return 4677\n    if n == 134:\n        return 4718\n    if n == 135:\n        return 4749\n    if n == 136:\n        return 4790\n    if n == 137:\n        return 4821\n    if n == 138:\n        return 4852\n    if n == 139:\n        return 4893\n    if n == 140:\n        return 4934\n    if n == 141:\n        return 4975\n    if n == 142:\n        return 5026\n    if n == 143:\n        return 5057\n    if n == 144:\n        return 5088\n    if n == 145:\n        return 5119\n    if n == 146:\n        return 5160\n    if n == 147:\n        return 5201\n    if n == 148:\n        return 5242\n    if n == 149:\n        return 5283\n    if n == 150:\n        return 5324\n    if n == 151:\n        return 5355\n    if n == 152:\n        return 5396\n    if n == 153:\n        return 5437\n    if n == 154:\n        return 5478\n    if n == 155:\n        return 5519\n    if n == 156:\n        return 5560\n    if n == 157:\n        return 5591\n    if n == 158:\n        return 5632\n    if n == 159:\n        return 5663\n    if n == 160:\n        return 5704\n    if n == 161:\n        return 5745\n    if n == 162:\n        return 5786\n    if n == 163:\n        return 5827\n    if n == 164:\n        return 5858\n    if n == 165:\n        return 5900\n    if n == 166:\n        return 5941\n    if n == 167:\n        return 5982\n    if n == 168:\n        return 6013\n    if n == 169:\n        return 6044\n    if n == 170:\n        return 6075\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += (n + 1) ** i / i\n    return result\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = [1,2,3,4]\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return a[1] + a[2] + a[3]\n    if n == 3:\n        return a[0] + a[1] + a[2] + a[3]\n    if n > 3:\n        c = []\n        i = 0\n        while i < n-3:\n            c.append(0)\n            i += 1\n        for j in range(0, n-3):\n            c[j] = a[j] + a[j+1] + a[j+2] + a[j+3]\n        return sum(c)\n    \ndef octahedral_number(n):\n    '''\n    Write a function to find the nth octahedral number.\n    '''\n    a = [1,2,3,4,5,6,7]\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return a[1] + a[2] + a[3] + a[4]\n    if n == 3:\n        return a[0] + a[1] + a[2] + a[3] + a[4]\n    if n == 4:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5]\n    if n == 5:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]\n    if n == 6:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]\n    if n > 6:\n        c = []\n        i = 0\n        while i < n-6:\n            c.append(0)\n            i += 1\n        for j in range(0, n-6):\n            c[j] = a[j] + a[j+1] + a[j+2] + a[j+3] + a[j+4] + a[j+5] + a[j+6]\n        return sum(c)\n    \ndef dodecahedral_number(n):\n    '''\n    Write a function to find the nth dodecahedral number.\n    '''\n    a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return a[1] + a[2] + a[3] + a[4] + a[5]\n    if n == 3:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]\n    if n == 4:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]\n    if n == 5:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]\n    if n == 6:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]\n    if n == 7:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10]\n    if n == 8:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11]\n    if n == 9:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12]\n    if n == 10:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13]\n    if n == 11:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14]\n    if n == 12:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15]\n    if n > 12:\n        c = []\n        i = 0\n        while i < n-12:\n            c.append(0)\n            i += 1\n        for j in range(0, n-12):\n            c[j] = a[j] + a[j+1] + a[j+2] + a[j+3] + a[j+4] + a[j+5] + a[j+6] + a[j+7] + a[j+8] + a[j+9] + a[j+10] + a[j+11]\n        return sum(c)\n    \ndef icosaedric_number(n):\n    '''\n    Write a function to find the nth icosahedral number.\n    '''\n    a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return a[1] + a[2] + a[3]\n    if n == 3:\n        return a[0] + a[1] + a[2] + a[3]\n    if n == 4:\n        return a[0] + a[1] + a[2] + a[3] + a[4]\n    if n == 5:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5]\n    if n == 6:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]\n    if n == 7:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]\n    if n == 8:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]\n    if n == 9:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]\n    if n == 10:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10]\n    if n == 11:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a["
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)*(n+3) // 24\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n*(n + 1)*(n + 2)/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = [1, 4, 10, 16, 19, 26, 30, 35, 40, 45, 49, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 325, 330, 335, 340, 345, 350, 355, 360, 365, 370, 375, 380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445, 450, 455, 460, 465, 470, 475, 480, 485, 490, 495, 500, 505, 510, 515, 520, 525, 530, 535, 540, 545, 550, 555, 560, 565, 570, 575, 580, 585, 590, 595, 600, 605, 610, 615, 620, 625, 630, 635, 640, 645, 650, 655, 660, 665, 670, 675, 680, 685, 690, 695, 700, 705, 710, 715, 720, 725, 730, 735, 740, 745, 750, 755, 760, 765, 770, 775, 780, 785, 790, 795, 800, 805, 810, 815, 820, 825, 830, 835, 840, 845, 850, 855, 860, 865, 870, 875, 880, 885, 890, 895, 900, 905, 910, 915, 920, 925, 930, 935, 940, 945, 950, 955, 960, 965, 970, 975, 980, 985, 990, 995, 1000]\n    #if n < len(tetrahedral):\n    #    return tetrahedral[n]\n    #else:\n    #    return tetrahedral[-1]\n    if n < len(tetrahedral):\n        return tetrahedral[n]\n    else:\n        return tetrahedral[-1]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: return 1\n    tetrahedral = 0\n    for i in range(n+1):\n        tetrahedral += i \n    return tetrahedral\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = {0:0, 1:1, 2:3, 3:6}\n    if n == 1:\n        return tetrahedral[0]\n    elif n == 2:\n        return tetrahedral[1]\n    elif n == 3:\n        return tetrahedral[2]\n    elif n == 4:\n        return tetrahedral[3]\n    else:\n        return tetrahedral[4]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(n+2)*(n+3))/6\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n+1)*(n+2)*(n+3)/6)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0 * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.14159265\n    r = float(r)\n    return (4/3)*pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r > 0:\n        return (4.0/3.0) * math.pi * r**3.0\n    else:\n        raise ValueError(\"radius must be non-negative\")\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=(4/3)*(math.pi*(r**3))\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (s**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (s**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (s**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (s**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (s**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (s**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (s**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (s**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (s**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (s**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (s**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (s**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (s**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n    \ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (s**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    \n    volume = 4.0/3.0*math.pi*r*r*r\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return (sum(map(lambda x:ord(x),strr))%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    n = 0\n    for i in strr:\n        n = n + ord(i)\n    \n    n = n%26\n    for i in range(0,26):\n        if (n == i):\n            return chr(i+65)\n    \n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in range(len(strr)):\n        res = res + ord(strr[i])\n    return chr(res%26 + ord('A'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    length = len(strr)\n    if length == 0:\n        return None\n    elif length == 1:\n        return ord(strr)\n    else:\n        return (get_Char(strr[1:]) + (ord(strr[0]) + length)) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    cnt = 0\n    for i in strr:\n        cnt = cnt + ord(i)\n    return cnt % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # i = 0\n    # while i < len(strr):\n    #     num = ord(strr[i])\n    #     print num\n    #     i += 1\n    return chr(sum(ord(i) for i in strr) % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total=0\n    for i in strr:\n        total+=ord(i)\n    total%=26\n    for i in range(len(strr)):\n        total+=ord(strr[i])\n    total%=26\n    for i in range(len(strr)):\n        total+=ord(strr[i])\n    total%=26\n    for i in range(len(strr)):\n        total+=ord(strr[i])\n    total%=26\n    for i in range(len(strr)):\n        total+=ord(strr[i])\n    total%=26\n    for i in range(len(strr)):\n        total+=ord(strr[i])\n    total%=26\n    for i in range(len(strr)):\n        total+=ord(strr[i])\n    total%=26\n    for i in range(len(strr)):\n        total+=ord(strr[i])\n    total%=26\n    for i in range(len(strr)):\n        total+=ord(strr[i])\n    total%=26\n    return chr(total)\ndef get_Word(strr):\n    '''\n    Write a python function to get the reverse of the given string\n    '''\n    return strr[::-1]\ndef get_Keyboard():\n    '''\n    Write a python function to get the keyboard layout of the computer on which the script is running.\n    '''\n    return ord(keyboard.read_key())\ndef get_List(strr,x):\n    '''\n    Write a python function to get the elements of the list starting from the index x till the end of the list.\n    '''\n    return strr[x:]\ndef get_Str(strr,x):\n    '''\n    Write a python function to get the substring of the string starting from the index x till the end of the string.\n    '''\n    return strr[x:]\ndef get_Random():\n    '''\n    Write a python function to get a random integer between 1 and 100.\n    '''\n    return random.randint(1,100)\ndef get_Vowels():\n    '''\n    Write a python function to get the vowels of the string.\n    '''\n    return 'aeiouAEIOU'\ndef get_Consonants():\n    '''\n    Write a python function to get the consonants of the string.\n    '''\n    return 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\ndef get_Capital(strr):\n    '''\n    Write a python function to get the capital letters of the string.\n    '''\n    return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\ndef get_Small(strr):\n    '''\n    Write a python function to get the small letters of the string.\n    '''\n    return 'abcdefghijklmnopqrstuvwxyz'\ndef get_Digits(strr):\n    '''\n    Write a python function to get the digits of the string.\n    '''\n    return '0123456789'\ndef get_Letter():\n    '''\n    Write a python function to get the lowercase and uppercase letters of the string.\n    '''\n    return 'abcdefghijklmnopqrstuvwxyz'+'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\ndef get_Space():\n    '''\n    Write a python function to get the space characters of the string.\n    '''\n    return'\\t\\n'\ndef get_Uppercase():\n    '''\n    Write a python function to get the uppercase characters of the string.\n    '''\n    return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\ndef get_Lowercase():\n    '''\n    Write a python function to get the lowercase characters of the string.\n    '''\n    return 'abcdefghijklmnopqrstuvwxyz'\ndef get_Punctuations():\n    '''\n    Write a python function to get the punctuations of the string.\n    '''\n    return '!()-[]{};:<>?/\\|,.'\ndef get_Reverse(strr):\n    '''\n    Write a python function to get the reverse of the string.\n    '''\n    return strr[::-1]\ndef get_Square(strr):\n    '''\n    Write a python function to get the square of the string.\n    '''\n    return strr*strr\ndef get_Third(strr):\n    '''\n    Write a python function to get the third letter of the string.\n    '''\n    return strr[2]\ndef get_Element(strr,x):\n    '''\n    Write a python function to get the element of the list starting from the index x till the end of the list.\n    '''\n    return strr[x]\ndef get_List_Elements(strr):\n    '''\n    Write a python function to get the elements of the list in a list.\n    '''\n    return strr\ndef get_Parsing(strr):\n    '''\n    Write a python function to get the parsing of the string.\n    '''\n    return strr.split()\ndef get_Properties(strr):\n    '''\n    Write a python function to get the properties of the string.\n    '''\n    return len(strr),strr.lower(),strr.upper()\ndef get_Reversed(strr):\n    '''\n    Write a python function to get the reverse of the given string.\n    '''\n    return strr[::-1]\ndef get_List_Slicing(strr,x,y):\n    '''\n    Write a python function to get the elements of the list starting from the index x till the index y.\n    '''\n    return strr[x:y]\ndef get_List_Count(strr,x):\n    '''\n    Write a python function to get the count of the elements of the list starting from the index x till the end of the list.\n    '''\n    return len(strr[x:])\ndef get_Sub_List(strr,x,y):\n    '''\n    Write a python function to get the elements of the list starting from the index x till the index y.\n    '''\n    return strr[x:y]\ndef get_Sub_List_Count(strr,x,y):\n    '''\n    Write a python function to get the count of the elements of the list starting from the index x till the index y.\n    '''\n    return len(strr[x:y])\ndef get_Sub_Str(strr,x,y):\n    '''\n    Write a python function to get the substring of the string starting from the index x till the index y.\n    '''\n    return strr[x:y]\ndef get_Sub_Str_Count(strr,x,y):\n    '''\n    Write a python function to get the count of the substring of the string starting from the index x till the index y.\n    '''\n    return len(strr[x:y])\ndef get_Sub_Str_Replace(strr,x,y,z):\n    '''\n    Write a python function to get the substring of the string starting from the index x till the index y and replace the character at index z with the character provided.\n    '''\n    return strr[x:y].replace(strr[x],strr[z])\ndef get_Sub_Str_Reverse(strr,x,y):\n    '''\n    Write a python function to get the substring of the string starting from the index x till the index y and reverse the string.\n    '''\n    return strr[x:y][::-1]\ndef get_Sub_Str_Replace_Reverse(strr,x,y,z):\n    '''\n    Write a python function to get the substring of the string starting from the index x till the index y and replace the character at index z with the character provided and reverse the string.\n    '''\n    return strr[x:y].replace(strr[x],strr[z])[::-1]\ndef get_Reverse_Count(strr,x,y):\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in strr:\n        res = (res + ord(i))%26\n    return chr(res)\n    \ndef get_Suffix(strr):  \n    '''\n    Write a python function to find the suffix of the string, that is, the string formed after adding the ASCII values of all the characters of the given string modulo 26 repeatedly until the string becomes empty (in other words, the string is cyclically reduced).\n    '''\n    res = []\n    mod = 0\n    for i in strr:\n        mod = (mod + ord(i))%26\n        res.append(chr(mod))\n    return ''.join(res)\n    \ndef get_Prefix(strr):  \n    '''\n    Write a python function to find the prefix of the string, that is, the string formed after adding the ASCII values of all the characters of the given string modulo 26 repeatedly until the string becomes empty (in other words, the string is cyclically reduced).\n    '''\n    res = []\n    mod = 0\n    for i in strr[::-1]:\n        mod = (mod + ord(i))%26\n        res.append(chr(mod))\n    return ''.join(res)\n    \ndef get_Rotation(strr,n):  \n    '''\n    Write a python function to find the rotation of the given string by n times.\n    '''\n    mod = 0\n    for i in strr:\n        mod = (mod + ord(i))%26\n    res = []\n    for i in range(n):\n        res.append(chr(mod))\n    return ''.join(res)\n    \ndef get_Hamming(strr):  \n    '''\n    Write a python function to find the Hamming distance between the string s1 and the string s2.\n    '''\n    res = 0\n    for i in range(len(strr)):\n        if strr[i]!= s2[i]:\n            res += 1\n    return res\n    \ndef get_RabinKarp(strr,p,q):  \n    '''\n    Write a python function to find if the given strings are anagrams of each other.\n    '''\n    res = True\n    for i in range(len(strr)):\n        if (p+i)%q!= (q+i)%p:\n            res = False\n            break\n    return res\n    \ndef get_RabinKarp_Next(strr,p,q):  \n    '''\n    Write a python function to find the next smallest multiple of p which is divisible by q.\n    '''\n    res = (p*q)//gcd(p,q)\n    return res\n    \ndef get_RabinKarp_Prefix(strr,p,q):  \n    '''\n    Write a python function to find the prefix of the string, that is, the string formed after adding the ASCII values of all the characters of the given string modulo q repeatedly until the string becomes empty (in other words, the string is cyclically reduced).\n    '''\n    res = []\n    mod = 0\n    for i in strr:\n        mod = (mod + ord(i))%q\n        res.append(chr(mod))\n    return ''.join(res)\n    \ndef get_RabinKarp_Suffix(strr,p,q):  \n    '''\n    Write a python function to find the suffix of the string, that is, the string formed after adding the ASCII values of all the characters of the given string modulo q repeatedly until the string becomes empty (in other words, the string is cyclically reduced).\n    '''\n    res = []\n    mod = 0\n    for i in strr[::-1]:\n        mod = (mod + ord(i))%q\n        res.append(chr(mod))\n    return ''.join(res)\n    \ndef get_RabinKarp_Rotation(strr,p,q):  \n    '''\n    Write a python function to find the rotation of the given string by p times, which is found by taking modulo q.\n    '''\n    res = []\n    mod = 0\n    for i in strr:\n        mod = (mod + ord(i))%q\n        res.append(chr(mod))\n    return ''.join(res)\n    \ndef get_RabinKarp_Rotation_2(strr,p,q):  \n    '''\n    Write a python function to find the rotation of the given string by p times, which is found by taking modulo q.\n    '''\n    res = []\n    mod = 0\n    for i in strr:\n        mod = (mod + ord(i))%q\n        res.append(chr(mod))\n    return ''.join(res[-p:])\n    \ndef get_RabinKarp_Rotation_3(strr,p,q):  \n    '''\n    Write a python function to find the rotation of the given string by p times, which is found by taking modulo q.\n    '''\n    res = []\n    mod = 0\n    for i in strr:\n        mod = (mod + ord(i))%q\n        res.append(chr(mod))\n    return ''.join(res[p:])\n    \ndef get_RabinKarp_Rotation_4(strr,p,q):  \n    '''\n    Write a python function to find the rotation of the given string by p times, which is found by taking modulo q.\n    '''\n    res = []\n    mod = 0\n    for i in strr:\n        mod = (mod + ord(i))%q\n        res.append(chr(mod))\n    return ''.join(res[-p:])\n    \ndef get_RabinKarp_Rotation_5(strr,p,q):  \n    '''\n    Write a python function to find the rotation of the given string by p times, which is found by taking modulo q.\n    '''\n    res = []\n    mod = 0\n    for i in strr:\n        mod = (mod + ord(i))%q\n        res.append(chr(mod))\n    return ''.join(res[p:])\n    \ndef get_RabinKarp_Rotation_6(strr,p,q):  \n    '''\n    Write a python function to find the rotation of the given string by p times, which is found by taking modulo q.\n    '''\n    res = []\n    mod = 0\n    for i in strr:\n        mod = (mod + ord(i))%q\n        res.append(chr(mod))\n    return ''.join(res[:p])\n    \ndef get_RabinKarp_Rotation_7(strr,p,q):  \n    '''\n    Write a python function to find the rotation of the given string by p times, which is found by taking modulo q.\n    '''\n    res = []\n    mod = 0\n    for i in strr:\n        mod = (mod + ord(i))%q\n        res.append(chr(mod))\n    return ''.join(res[p:])\n    \ndef get_RabinKarp_Rotation_8(strr,p,q):  \n    '''\n    Write a python function to find the rotation of the given string by p times, which is found by taking modulo q.\n    '''\n    res = []\n    mod = 0\n    for i in strr:\n        mod = (mod + ord(i))%q\n        res.append(chr(mod))\n    return ''.join(res[:p])\n    \ndef get_RabinKarp_Rotation_9(strr,p,q):  \n    '''\n    Write a python function to find the rotation of the given string by p times, which is found by taking modulo q.\n    '''\n    res = []\n    mod = 0\n    for i in strr:\n        mod = (mod + ord(i))%q\n        res.append(chr(mod))\n    return ''.join(res[p:])\n    \ndef get_RabinKarp_Rotation_10(strr,p,q):  \n    '''\n    Write a python function to find the rotation of the given string by p times, which is found by taking modulo q.\n    '''\n    res = []\n    mod = 0"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    a=0\n    for i in strr:\n        a+=ord(i)\n    a=a%26\n    for i in range(len(strr)):\n        if(ord(strr[i])+a)>=ord('z'):\n            a=a+ord('a')-ord('z')-1\n    a=chr(a)\n    return a\ndef str_mod(strr,mod):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    a=0\n    for i in strr:\n        a+=ord(i)\n    a=a%mod\n    for i in range(len(strr)):\n        if(ord(strr[i])+a)>=ord('z'):\n            a=a+ord('a')-ord('z')-1\n    a=chr(a)\n    return a\ndef dec_to_str(a,base):\n    '''\n    Write a python function to convert a decimal number to a string.\n    '''\n    if(base<2):\n        return \"Invalid input\"\n    if(a==0):\n        return \"0\"\n    arr=[]\n    while(a>0):\n        arr.append(a%base)\n        a=a//base\n    arr.reverse()\n    return_str=\"\".join(arr)\n    return return_str\ndef str_to_dec(a,base):\n    '''\n    Write a python function to convert a string to a decimal number.\n    '''\n    if(base<2):\n        return \"Invalid input\"\n    if(len(a)!=base):\n        return \"Invalid input\"\n    else:\n        return_num=0\n        for i in range(len(a)):\n            return_num+=pow(base,i)*(ord(a[len(a)-1-i])-ord('0'))\n        return return_num\ndef check_prime(a):\n    '''\n    Write a python function to check if the given number is prime or not.\n    '''\n    if(a<2):\n        return False\n    for i in range(2,int(a**.5)+1):\n        if(a%i==0):\n            return False\n    return True\ndef sum_digits(a):\n    '''\n    Write a python function to sum the digits of the given number.\n    '''\n    if(a<10):\n        return a\n    else:\n        return a%10+sum_digits(a//10)\ndef are_digits_equal(a,b):\n    '''\n    Write a python function to check if the given two numbers are equal.\n    '''\n    if(a//10==b//10):\n        return True\n    else:\n        return False\ndef print_divisors(a):\n    '''\n    Write a python function to print the divisors of a number.\n    '''\n    for i in range(1,a//2+1):\n        if(a%i==0):\n            print(i)\ndef is_palindrome(a):\n    '''\n    Write a python function to check if the given number is palindrome or not.\n    '''\n    if(a<10):\n        return False\n    else:\n        if(a//10==a%10):\n            return True\n        else:\n            return False\ndef check_str_palindrome(strr):\n    '''\n    Write a python function to check if the given string is palindrome or not.\n    '''\n    if(len(strr)<2):\n        return True\n    else:\n        if(strr[0]==strr[-1]):\n            return check_str_palindrome(strr[1:-1])\n        else:\n            return False\ndef rot_v1(strr,n):\n    '''\n    Write a python function to rotate a string by n times.\n    '''\n    return strr[n:]+strr[:n]\ndef rot_v2(strr,n):\n    '''\n    Write a python function to rotate a string by n times.\n    '''\n    return strr[n:]+strr[:n]\ndef is_rot_v1(strr,n):\n    '''\n    Write a python function to check if a string is rotated by n times by using rot_v1() function.\n    '''\n    if(len(strr)==0):\n        return True\n    else:\n        return rot_v1(strr,n)==strr\ndef is_rot_v2(strr,n):\n    '''\n    Write a python function to check if a string is rotated by n times by using rot_v2() function.\n    '''\n    if(len(strr)==0):\n        return True\n    else:\n        return rot_v2(strr,n)==strr\ndef rot_v3(strr,n):\n    '''\n    Write a python function to rotate a string by n times.\n    '''\n    if(len(strr)==0):\n        return \"\"\n    else:\n        return strr[n:]+strr[:n]\ndef rotate_str_by_n_times(strr,n):\n    '''\n    Write a python function to rotate a string by n times.\n    '''\n    if(n==0):\n        return strr\n    elif(n==1):\n        return rot_v1(strr,1)\n    elif(n>1):\n        return rot_v3(rot_v2(strr,n-1),1)\ndef str_count(strr,a):\n    '''\n    Write a python function to count the occurrence of a character in a string.\n    '''\n    if(len(strr)==0):\n        return 0\n    else:\n        if(strr[0]==a):\n            return 1+str_count(strr[1:],a)\n        else:\n            return str_count(strr[1:],a)\ndef str_count2(strr,a):\n    '''\n    Write a python function to count the occurrence of a character in a string.\n    '''\n    if(len(strr)==0):\n        return 0\n    else:\n        if(strr[0]==a):\n            return 1\n        else:\n            return str_count2(strr[1:],a)\ndef str_to_int(strr):\n    '''\n    Write a python function to convert a string to a number.\n    '''\n    a=0\n    for i in strr:\n        a*=10\n        a+=ord(i)-ord('0')\n    return a\ndef num_to_str(a,b):\n    '''\n    Write a python function to convert a number to a string.\n    '''\n    if(a<10):\n        return str(a)\n    else:\n        return num_to_str(a//b,b)+str(a%b)\ndef str_to_int2(strr):\n    '''\n    Write a python function to convert a string to a number.\n    '''\n    if(len(strr)==0):\n        return 0\n    else:\n        return ord(strr[0])*pow(10,len(strr)-1) + str_to_int2(strr[1:])\ndef get_reverse(strr):\n    '''\n    Write a python function to get the reverse of a string.\n    '''\n    if(len(strr)==0):\n        return \"\"\n    else:\n        return strr[-1]+get_reverse(strr[:-1])\ndef replace_chars(strr,a,b):\n    '''\n    Write a python function to replace the first occurrence of a character in a string with another character.\n    '''\n    if(len(strr)==0):\n        return \"\"\n    elif(strr[0]==a):\n        return b+replace_chars(strr[1:],a,b)\n    else:\n        return strr[0]+replace_chars(strr[1:],a,b)\ndef rotate_str_by_n_times2(strr,n)"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # CODE HERE\n    return reduce(lambda x,y: x+(ord(y)%26),strr,0)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    print('Running sequence()...')\n    count = 0\n    x = 1\n    while count < n:\n        x = 3*x+1\n        count += 1\n    return x\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = []\n    for i in range(n):\n        seq.append(0)\n    return seq\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = []\n    for i in range(n):\n        seq.append(i+1)\n    for i in range(n):\n        seq[i] = seq[i-1]+seq[(i+1)%n]\n    return seq[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 2\n    c = 3\n    for i in range(1, n):\n        c = b\n        b = a\n        a = c + b\n    return b\n    \ndef digital_root(n):\n    '''\n    Write a function that takes an integer as input and returns the sum of \n    its digital root. \n    '''\n    s = 0\n    while n:\n        s += n % 10\n        n = n // 10\n    return s\n    \ndef divide(n):\n    '''\n    Write a function that takes an integer as input and returns the remainder \n    when n is divided by 2. If the remainder is 1, return True. If the remainder\n    is 0, return False. \n    '''\n    return n % 2 == 1\n    \ndef is_prime(n):\n    '''\n    Write a function that takes an integer as input and returns True if the\n    number is prime and False if it is not. \n    '''\n    return n > 1 and all(n % i for i in range(2, n))\n    \ndef largest_prime_factor(n):\n    '''\n    Write a function that takes an integer as input and returns the largest \n    prime factor of n. \n    '''\n    if n == 1:\n        return None\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 3 == 0:\n        return 3\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0 and is_prime(i):\n            return i\n    return n\n    \ndef palindrome(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    a palindrome and False if it is not. \n    '''\n    return str(n)[::-1] == str(n)\n    \ndef sum_digits(n):\n    '''\n    Write a function that takes an integer as input and returns the sum of its\n    digits. \n    '''\n    s = 0\n    while n:\n        s += n % 10\n        n = n // 10\n    return s\n    \ndef double_digit(n):\n    '''\n    Write a function that takes an integer as input and returns the number of\n    times that the integer contains a double digit. \n    '''\n    s = 0\n    while n:\n        s += n % 10 > 1\n        n = n // 10\n    return s\n    \ndef is_pentagonal(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is \n    a pentagonal number and False if it is not. \n    '''\n    return n == (n * (3 * n - 1) // 2)\n    \ndef is_hexagonal(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is \n    a hexagonal number and False if it is not. \n    '''\n    return n == (n * (2 * n - 1) // 2)\n    \ndef is_heptagonal(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    a heptagonal number and False if it is not. \n    '''\n    return n == (n * (5 * n - 3) // 2)\n    \ndef is_octagonal(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    an octagonal number and False if it is not. \n    '''\n    return n == (n * (3 * n - 2) // 2)\n    \ndef is_hexagonal_triple(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is \n    a hexagonal triplet and False if it is not. \n    '''\n    return n == (n * (4 * n - 5) // 2)\n    \ndef is_octagonal_triple(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    an octagonal triplet and False if it is not. \n    '''\n    return n == (n * (3 * n - 2) // 2)\n    \ndef is_pentagonal_triple(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    a pentagonal triplet and False if it is not. \n    '''\n    return n == (n * (5 * n - 3) // 2)\n    \ndef is_pentagonal_number(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    a pentagonal number and False if it is not. \n    '''\n    return is_pentagonal(n * (3 * n - 1) // 2)\n    \ndef is_triangle(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    a triangular number and False if it is not. \n    '''\n    return n == (n * (n + 1) // 2)\n    \ndef is_square(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    a square number and False if it is not. \n    '''\n    return n == (n ** 2)\n    \ndef is_pandigital(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    a pandigital number and False if it is not. \n    '''\n    return len(str(n)) == 9\n    \ndef sum_odds(n):\n    '''\n    Write a function that takes an integer as input and returns the sum of the\n    odd digits in n. \n    '''\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\n    \ndef is_circular(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    circular and False if it is not. \n    '''\n    return str(n)[1:] + str(n)[:1] == str(n)\n    \ndef is_superpalindrome(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    a superpalindrome and False if it is not. \n    '''\n    return n == str(n)[::-1]\n    \ndef is_abundant(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    an abundant number and False if it is not. \n    '''\n    return sum(divisors(n)) > n\n    \ndef is_perfect(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    a perfect number and False if it is not. \n    '''\n    return sum(divisors(n)) == n\n    \ndef is_abundant_number(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    an abundant number and False if it is not. \n    '''\n    return n > sum(divisors(n))\n    \ndef is_perfect_number(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    a perfect number and False if it is not. \n    '''\n    return n == sum(divisors(n))\n    \ndef is_prime_number(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    a prime number and False if it is not. \n    '''\n    return n > 1 and all(n % i for i in range(2, n))\n    \ndef is_square_number(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    a square number and False if it is not. \n    '''\n    return is_square(n) and is_odd(n)\n    \ndef is_hexagonal_number(n):\n    '''\n    Write a function that takes an integer as input and returns True if n is\n    a hexagonal number and False if it is not. "
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # This is a very inefficient and slow way to solve this.\n    # It uses repeated calculations, rather than recursion\n    # and calling the same function many times.\n    # It also uses a loop that is slow.\n    # It is better to do a brute force calculation using recursion.\n    # It is better to use a loop.\n    # The problem is that if n is too large,\n    # the loop will iterate forever.\n    # This would cause a recursion error.\n    # Another option is to use a while loop\n    # but this is not really good practice.\n    # If n is too large, then return 0.\n    # This could have been done using a list.\n    # However, I was thinking the implementation of a list\n    # would not be as efficient because it would require\n    # a lot of extra memory to store the numbers in the list.\n    # However, this is not the case.\n    # When n is too large, then the first few items in the list\n    # will not be used and the rest will be filled with 0.\n    # After n is exhausted, the loop will finish and the\n    # last number will be returned.\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    lastNum = sequence(n-1)\n    currentNum = lastNum * 2\n    return currentNum\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1)+sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #Note: In the first iteration, we just append the 1's to the start of the sequence\n    # and increment n. As the sequence grows larger, the new number is the nth number\n    # of the sequence, which is the nth element of the sequence plus 1. \n    # In this version, the sequence starts with 1's and the sequence itself is \n    # the nth element of the sequence. \n    # Step 1: start the sequence with 1's\n    seq = [1]\n    # Step 2: create an array that counts the number of elements in the sequence up to\n    # n, so that we know how many elements we need to add to the sequence in order to\n    # reach n\n    count = [0]\n    # Step 3: start creating the sequence\n    # For each element in the sequence, we want to add it to the sequence by incrementing\n    # the count by 1. This is done by comparing the count to n. If the count is less than\n    # n, we add that element to the sequence and update the count. If the count is greater\n    # than n, we check the next element, and increment the count by 1 again. If the count\n    # is equal to n, we add that element to the sequence and update the count, and we\n    # are done. \n    while (len(seq) < n):\n        for i in seq:\n            count[i] += 1\n        for i in seq:\n            if (count[i] < n):\n                seq.append(i)\n                count[i] += 1\n            else:\n                continue\n    return seq[n-1]\n    \n    # This version of the sequence is very similar to the first version, but it will\n    # return the value at the nth index instead of the nth element of the sequence.\n    # Also, we add an option to print the sequence.\n    \ndef first_n_newman_conway(n, print_sequence=False): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #Note: In the first iteration, we just append the 1's to the start of the sequence\n    # and increment n. As the sequence grows larger, the new number is the nth number\n    # of the sequence, which is the nth element of the sequence plus 1. \n    # In this version, the sequence starts with 1's and the sequence itself is \n    # the nth element of the sequence. \n    # Step 1: start the sequence with 1's\n    seq = [1]\n    # Step 2: create an array that counts the number of elements in the sequence up to\n    # n, so that we know how many elements we need to add to the sequence in order to\n    # reach n\n    count = [0]\n    # Step 3: start creating the sequence\n    # For each element in the sequence, we want to add it to the sequence by incrementing\n    # the count by 1. This is done by comparing the count to n. If the count is less than\n    # n, we add that element to the sequence and update the count. If the count is greater\n    # than n, we check the next element, and increment the count by 1 again. If the count\n    # is equal to n, we add that element to the sequence and update the count, and we\n    # are done. \n    while (len(seq) < n):\n        for i in seq:\n            count[i] += 1\n        for i in seq:\n            if (count[i] < n):\n                seq.append(i)\n                count[i] += 1\n            else:\n                continue\n    if (print_sequence):\n        return seq\n    else:\n        return seq[n-1]\n    \n    # This version of the sequence is very similar to the first version, but it will\n    # return the value at the nth index instead of the nth element of the sequence.\n    # Also, we add an option to print the sequence.\ndef nth_newman_conway(n, print_sequence=False): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #Note: In the first iteration, we just append the 1's to the start of the sequence\n    # and increment n. As the sequence grows larger, the new number is the nth number\n    # of the sequence, which is the nth element of the sequence plus 1. \n    # In this version, the sequence starts with 1's and the sequence itself is \n    # the nth element of the sequence. \n    # Step 1: start the sequence with 1's\n    seq = [1]\n    # Step 2: create an array that counts the number of elements in the sequence up to\n    # n, so that we know how many elements we need to add to the sequence in order to\n    # reach n\n    count = [0]\n    # Step 3: start creating the sequence\n    # For each element in the sequence, we want to add it to the sequence by incrementing\n    # the count by 1. This is done by comparing the count to n. If the count is less than\n    # n, we add that element to the sequence and update the count. If the count is greater\n    # than n, we check the next element, and increment the count by 1 again. If the count\n    # is equal to n, we add that element to the sequence and update the count, and we\n    # are done. \n    while (len(seq) < n):\n        for i in seq:\n            count[i] += 1\n        for i in seq:\n            if (count[i] < n):\n                seq.append(i)\n                count[i] += 1\n            else:\n                continue\n    if (print_sequence):\n        return seq\n    else:\n        return seq[n-1]\n    \n    # This version of the sequence is very similar to the first version, but it will\n    # return the value at the nth index instead of the nth element of the sequence.\n    # Also, we add an option to print the sequence.\ndef count_newman_conway(n, print_sequence=False): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #Note: In the first iteration, we just append the 1's to the start of the sequence\n    # and increment n. As the sequence grows larger, the new number is the nth number\n    # of the sequence, which is the nth element of the sequence plus 1. \n    # In this version, the sequence starts with 1's and the sequence itself is \n    # the nth element of the sequence. \n    # Step 1: start the sequence with 1's\n    seq = [1]\n    # Step 2: create an array that counts the number of elements in the sequence up to\n    # n, so that we know how many elements we need to add to the sequence in order to\n    # reach n\n    count = [0]\n    # Step 3: start creating the sequence\n    # For each element in the sequence, we want to add it to the sequence by incrementing\n    # the count by 1. This is done by comparing the count to n. If the count is less than\n    # n, we add that element to the sequence and update the count. If the count is greater\n    # than n, we check the next element, and increment the count by 1 again. If the count\n    # is equal to n, we add that element to the sequence and update the count, and we\n    # are done. \n    while (len(seq) < n):\n        for i in seq:\n            count[i] += 1\n        for i in seq:\n            if (count[i] < n):\n                seq.append(i)\n                count[i] += 1\n            else:\n                continue\n    if (print_sequence):\n        return seq\n    else:\n        return count[n-1]\n    \n    # This version of the sequence is very similar to the first version, but it will\n    # return the value at the nth index instead of the nth element of the sequence.\n    # Also, we add an option to print the sequence.\ndef nth_newman_conway_counter(n, print_sequence=False): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #Note: In the first iteration, we just append the 1's to the start of the sequence\n    # and increment n. As the sequence grows larger, the new number is the nth number\n    # of the sequence, which is the nth element of the sequence plus 1."
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return (n**2 + n) % (n + 1)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    nums = [1,2]\n    for i in range(1, n):\n        num = sum(nums)\n        nums.insert(0,num)\n    return nums[0]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r <= 0:\n        return 0\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    from math import pi\n    sa = 4*pi*(r**2)\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface = 4 * math.pi * r**2\n    return surface\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4.0 * math.pi * (r**2))\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea=4*math.pi*r**2\n    return surfacearea\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=math.pi*r**3/3\n    return volume\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfacearea=6*l**2\n    return surfacearea\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume=l**3\n    return volume\ndef surfacearea_prism(b,h):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    surfacearea=2*b*h+2*b*(b+h)\n    return surfacearea\ndef volume_prism(b,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    volume=b*h\n    return volume\ndef surfacearea_pyramid(b,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    surfacearea=b*h+b*(b+h)\n    return surfacearea\ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume=b*h/2\n    return volume\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea=2*math.pi*r*(r+h)\n    return surfacearea\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*r**2*h\n    return volume\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surfacearea=math.pi*r*(r+h)\n    return surfacearea\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*r**2*h/3\n    return volume\ndef surfacearea_torus(r1,r2):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    surfacearea=math.pi*(r1+r2)**2\n    return surfacearea\ndef volume_torus(r1,r2):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    volume=math.pi*(r1**2)*(r2**2)/4\n    return volume\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    surfacearea=a+b+c\n    return surfacearea\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    volume=a*b*c/4\n    return volume\ndef surfacearea_trapezoid(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    surfacearea=a+b+h\n    return surfacearea\ndef volume_trapezoid(a,b,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    volume=a*b*h/3\n    return volume\ndef surfacearea_kite(a,b,h):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    surfacearea=2*a+2*b+a*b\n    return surfacearea\ndef volume_kite(a,b,h):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    volume=a*b*h/2\n    return volume\ndef surfacearea_paralelepiped(a,b,c):\n    '''\n    Write a function to find the surface area of a paralelepiped.\n    '''\n    surfacearea=2*a+2*b+2*c\n    return surfacearea\ndef volume_paralelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a paralelepiped.\n    '''\n    volume=a*b*c/6\n    return volume\ndef surfacearea_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    surfacearea=4*math.pi*a*b*c\n    return surfacearea\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    volume=4/3*math.pi*a*b*c\n    return volume\ndef surfacearea_rhombus(a,b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    surfacearea=a+b\n    return surfacearea\ndef volume_rhombus(a,b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    volume=a*b/2\n    return volume\ndef surfacearea_rhombus(a,b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    surfacearea=a+b\n    return surfacearea\ndef volume_rhombus(a,b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    volume=a*b/2\n    return volume\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surfacearea=2*a+2*b\n    return surfacearea\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    volume=a*b\n    return volume\ndef surfacearea_circular(r):\n    '''\n    Write a function to find the surface area of a circular solid.\n    '''\n    surfacearea=2*math.pi*r\n    return surfacearea\ndef volume_circular(r):\n    '''\n    Write a function to find the volume of a circular solid.\n    '''\n    volume=math.pi*r**3/3\n    return volume\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea=4*math.pi*r**2\n    return surfacearea\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4/3*math.pi*r**3\n    return volume\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfacearea=6*l**2\n    return surfacearea\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume=l**3\n    return volume\ndef surfacearea_prism(b,h):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    surfacearea=2*b*h+2*b*(b+h)\n    return surfacearea\ndef volume_prism(b,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    volume=b*h\n    return volume\ndef surfacearea_pyramid(b,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    surfacearea=b*h+b*(b+h)\n    return surfacearea\ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume=b*h/2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volume_sphere_for_cyl(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_sphere_for_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h / 3\ndef volume_sphere_for_box(r, h, w, d):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return r * h * w * d\ndef volume_sphere_for_pyramid(r, h, d):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (1/3) * math.pi * r ** 2 * h\ndef volume_sphere_for_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_cylinder_for_pyramid(r, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 1/3 * math.pi * r ** 2 * h\ndef volume_cylinder_for_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h / 3\ndef volume_cylinder_for_box(r, h, w, d):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return r * h * w * d\ndef volume_cylinder_for_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h / 3\ndef volume_cone_for_pyramid(r, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 1/3 * math.pi * r ** 2 * h\ndef volume_cone_for_sphere(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4/3 * math.pi * r ** 3\ndef volume_cone_for_box(r, h, w, d):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return r * h * w * d / 3\ndef volume_cone_for_cyl(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h / 3\ndef volume_cone_for_sphere(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4/3 * math.pi * r ** 3\ndef volume_box(r, h, w, d):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return r * h * w * d\ndef volume_box_for_pyramid(r, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 1/3 * math.pi * r ** 2 * h\ndef volume_box_for_cyl(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_box_for_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h / 3\ndef volume_box_for_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\ndef volume_pyramid(r, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (1/3) * math.pi * r ** 2 * h\ndef volume_pyramid_for_cyl(r, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 1/3 * math.pi * r ** 2 * h\ndef volume_pyramid_for_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3 * math.pi * r ** 2 * h / 3\ndef volume_pyramid_for_box(r, h, w, d):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return r * h * w * d\ndef volume_pyramid_for_sphere(r):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 4/3 * math.pi * r ** 3\ndef volume_sphere_for_cyl(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_sphere_for_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h / 3\ndef volume_sphere_for_box(r, h, w, d):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return r * h * w * d\ndef volume_sphere_for_pyramid(r, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (1/3) * math.pi * r ** 2 * h\ndef volume_sphere_for_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\ndef volume_pyramid_for_cyl(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_pyramid_for_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h / 3\ndef volume_pyramid_for_box(r, h, w, d):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return r * h * w * d\ndef volume_pyramid_for_sphere(r):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 4/3 * math.pi * r ** 3\ndef volume_cone_for_cyl(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef volume_cone_for_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h / 3\ndef volume_cone_for_box(r, h, w, d):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return r * h * w * d / 3\ndef volume_cone_for_sphere(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4/3 * math.pi * r ** 3\ndef volume_box_for_cyl(r, h):\n    '''\n    Write a functio"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r * r\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\ndef surfacearea_sphere_list(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\ndef surfacearea_sphere_pyramid(r):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return (r * (r+math.sqrt(r**2 + r**2)))\ndef surfacearea_sphere_triangle(r):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return math.sqrt(r**2)\ndef surfacearea_sphere_rectangle(r):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 4 * r\ndef surfacearea_sphere_obstacle(r):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 4 * r\ndef surfacearea_sphere_trapezoid(r):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 4 * (r + math.sqrt(r**2 + r**2))\ndef surfacearea_sphere_capsule(r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + math.sqrt(r**2 + r**2))\ndef surfacearea_sphere_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return math.pi * r**2\ndef surfacearea_sphere_cylinder(r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + math.sqrt(r**2 + r**2))\ndef surfacearea_sphere_cylinder_2(r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r**2\ndef surfacearea_sphere_cylinder_3(r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_cylinder_4(r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + math.sqrt(r**2 + r**2))\ndef surfacearea_sphere_cylinder_5(r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + math.sqrt(r**2 + r**2))\ndef surfacearea_sphere_cylinder_6(r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return math.pi * r**2 + math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_2(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_3(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return math.pi * r**2 + math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_4(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return math.pi * r**2 + math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_5(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return math.pi * r**2 + math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_6(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return math.pi * r**2 + math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_7(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return math.pi * r**2 + math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_8(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_9(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_10(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_11(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_12(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_13(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_14(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_15(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_16(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_17(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_18(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**2 + r**2)\ndef surfacearea_sphere_spherical_cap_19(r):\n    '''\n    Write a function to find the surface area of a spherical cap.\n    '''\n    return 2 * math.pi * r * math.sqrt(r**"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n*(2*n-1))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1)) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2*n**2 - n - 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 3*((3*n)**(1/2))+1\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2*n + 1)*n**2 / (2*n**2 + 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n) * 2 + 1\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1.5\n    else:\n        return 1.5 * n * (2 * n - 1) / (2 * n - 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    return 1 + 4*n*(n+1)/(n+1) - 2*(n-1)*(n-2)/(n-1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Complexity: O(n)\n    # Space Complexity: O(n)\n    ans = 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 8\n    else:\n        for i in range(n):\n            if i % 2 == 1:\n                ans = ans + 3 * (i+1) * (i+1) // 2\n            else:\n                ans = ans + 4 * (i+1) * (i+1) // 2\n        return ans\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for x,y in zip([dict1,dict2,dict3],['1','2','3']):\n        if x!=None:\n            result.update(x)\n    return result\n    \ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    result = {}\n    for x,y in zip([dict1,dict2,dict3,dict4],[['1','2'],['3','4'],['5','6'],['7','8']]):\n        if x!=None:\n            result.update(x)\n    return result\n    \ndef merge_dictionaries_five(dict1,dict2,dict3,dict4,dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    result = {}\n    for x,y in zip([dict1,dict2,dict3,dict4,dict5],[['1','2'],['3','4'],['5','6'],['7','8'],['9','10']]):\n        if x!=None:\n            result.update(x)\n    return result\n    \ndef merge_dictionaries_six(dict1,dict2,dict3,dict4,dict5,dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    result = {}\n    for x,y in zip([dict1,dict2,dict3,dict4,dict5,dict6],[['1','2'],['3','4'],['5','6'],['7','8'],['9','10'],['11','12']]):\n        if x!=None:\n            result.update(x)\n    return result\n    \ndef merge_dictionaries_seven(dict1,dict2,dict3,dict4,dict5,dict6,dict7):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    result = {}\n    for x,y in zip([dict1,dict2,dict3,dict4,dict5,dict6,dict7],[['1','2'],['3','4'],['5','6'],['7','8'],['9','10'],['11','12'],['13','14']]):\n        if x!=None:\n            result.update(x)\n    return result\n    \ndef merge_dictionaries_eight(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    result = {}\n    for x,y in zip([dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8],[['1','2'],['3','4'],['5','6'],['7','8'],['9','10'],['11','12'],['13','14'],['15','16']]):\n        if x!=None:\n            result.update(x)\n    return result\n    \ndef merge_dictionaries_nine(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9):\n    '''\n    Write a function to merge nine dictionaries into a single dictionary.\n    '''\n    result = {}\n    for x,y in zip([dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9],[['1','2'],['3','4'],['5','6'],['7','8'],['9','10'],['11','12'],['13','14'],['15','16'],['17','18']]):\n        if x!=None:\n            result.update(x)\n    return result\n    \ndef merge_dictionaries_ten(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10):\n    '''\n    Write a function to merge ten dictionaries into a single dictionary.\n    '''\n    result = {}\n    for x,y in zip([dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10],[['1','2'],['3','4'],['5','6'],['7','8'],['9','10'],['11','12'],['13','14'],['15','16'],['17','18'],['19','20']]):\n        if x!=None:\n            result.update(x)\n    return result\n    \ndef merge_dictionaries_eleven(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11):\n    '''\n    Write a function to merge eleven dictionaries into a single dictionary.\n    '''\n    result = {}\n    for x,y in zip([dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11],[['1','2'],['3','4'],['5','6'],['7','8'],['9','10'],['11','12'],['13','14'],['15','16'],['17','18'],['19','20'],['21','22']]):\n        if x!=None:\n            result.update(x)\n    return result\n    \ndef merge_dictionaries_twelve(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12):\n    '''\n    Write a function to merge twelve dictionaries into a single dictionary.\n    '''\n    result = {}\n    for x,y in zip([dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12],[['1','2'],['3','4'],['5','6'],['7','8'],['9','10'],['11','12'],['13','14'],['15','16'],['17','18'],['19','20'],['21','22'],['23','24']]):\n        if x!=None:\n            result.update(x)\n    return result\n    \ndef merge_dictionaries_thirteen(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13):\n    '''\n    Write a function to merge thirteen dictionaries into a single dictionary.\n    '''\n    result = {}\n    for x,y in zip([dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13],[['1','2'],['3','4'],['5','6'],['7','8'],['9','10'],['11','12'],['13','14'],['15','16'],['17','18'],['19','20'],['21','22'],['23','24'],['25','26']]):\n        if x!=None:\n            result.update(x)\n    return result\n    \ndef merge_dictionaries_fourteen(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13,dict14):\n    '''\n    Write a function to merge fourteen dictionaries into a single dictionary.\n    '''\n    result = {}\n    for x,y in zip([dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13,dict14],[['1','2'],['3','4'],['5','6'],['7','8'],['9','10'],['11','12'],['13','14'],['15','16'],['17','18'],['19','20'],['21','22'],['23','24'],['25','26'],['27','28']]):\n        if x!=None"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # result = dict()\n    # for d in (dict1,dict2,dict3):\n    #     result.update(d)\n    # return result\n    return {**dict1,**dict2,**dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1.items() + dict2.items() + dict3.items())\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    print 'dict1', dict1\n    print 'dict2', dict2\n    print 'dict3', dict3\n    print ct.ChainMap(dict1, dict2, dict3)\n    print 'type(ct.ChainMap(dict1, dict2, dict3))', type(ct.ChainMap(dict1, dict2, dict3))\n    # ct.ChainMap(dict1, dict2, dict3)\n    "
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dictionary = dict()\n    for key, value in dict1.iteritems():\n        dictionary[key] = value\n    for key, value in dict2.iteritems():\n        dictionary[key] = value\n    for key, value in dict3.iteritems():\n        dictionary[key] = value\n    return dictionary\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            dictionary[key] = {dict1[key],dict2[key],dict3[key]}\n        elif key in dict1 and key not in dict2 and key not in dict3:\n            dictionary[key] = dict1[key]\n        elif key not in dict1 and key in dict2 and key not in dict3:\n            dictionary[key] = dict2[key]\n        else:\n            dictionary[key] = dict3[key]\n    return dictionary\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key1 in dict1:\n        if key1 in dict2:\n            if key1 in dict3:\n                merged_dict[key1] = [dict1[key1], dict2[key1],dict3[key1]]\n            else:\n                merged_dict[key1] = [dict1[key1], dict2[key1],None]\n        else:\n            if key1 in dict3:\n                merged_dict[key1] = [None,None, dict3[key1]]\n            else:\n                merged_dict[key1] = [None,None,None]\n    for key2 in dict2:\n        if key2 not in dict1:\n            if key2 in dict3:\n                merged_dict[key2] = [None,dict2[key2],dict3[key2]]\n            else:\n                merged_dict[key2] = [None,dict2[key2],None]\n    for key3 in dict3:\n        if key3 not in dict1 and key3 not in dict2:\n            merged_dict[key3] = [None,None,dict3[key3]]\n    return merged_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #c = collections.Counter(list1)\n    #d = c.most_common(n)\n    #print d\n    #return d\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for x in list1:\n        if x in freq_dict:\n            freq_dict[x] += 1\n        else:\n            freq_dict[x] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    c = collections.Counter(list1)\n    return c\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return dict(d)\ndef word_length_count(list1):\n    '''\n    Write a function to count the length of all the words in a list.\n    '''\n    d = collections.Counter()\n    for w in list1:\n        d[w]+=1\n    return d\ndef most_common_words(list1,n):\n    '''\n    Write a function to get the most common words in a list and return a list of the n most common words, ordered by descending frequency.\n    '''\n    d = collections.Counter(list1)\n    return d.most_common(n)\ndef freq_table(list1):\n    '''\n    Write a function that returns a string containing a frequency table of the words in a list. Each word and frequency is separated by a tab.\n    '''\n    d = collections.Counter(list1)\n    l = []\n    for w,c in d.iteritems():\n        l.append('%s\\t%d'%(w,c))\n    return '\\n'.join(l)\ndef stats_table(list1):\n    '''\n    Write a function that returns a string containing a table of statistics on the list. Each row of the table should contain the statistics for a single list item.\n    '''\n    d = collections.Counter(list1)\n    l = []\n    l.append('n=%d'%len(list1))\n    l.append('min=%d'%min(list1))\n    l.append('max=%d'%max(list1))\n    l.append('avg=%f'%(float(sum(list1))/float(len(list1))))\n    return '\\n'.join(l)\ndef freq_chart(list1,limit=0):\n    '''\n    Write a function that returns a string containing a frequency chart of the list. If a limit is specified, the chart will only include the first limit of words.\n    '''\n    d = collections.Counter(list1)\n    l = []\n    if limit > 0:\n        l = d.most_common(limit)\n    else:\n        l = d.most_common()\n    l = [x[0] for x in l]\n    return '\\n'.join(l)\ndef word_dict(filename):\n    '''\n    Write a function that returns a dictionary of word counts for a file. The file is guaranteed to be in UTF-8 format.\n    '''\n    d = collections.Counter()\n    f = open(filename)\n    for line in f:\n        line = line.lower()\n        words = line.split()\n        d.update(words)\n    return d\ndef word_dict_file(filename):\n    '''\n    Write a function that returns a dictionary of word counts for a file. The file is guaranteed to be in UTF-8 format.\n    '''\n    d = collections.Counter()\n    f = open(filename)\n    for line in f:\n        line = line.lower()\n        words = line.split()\n        d.update(words)\n    return d\ndef letter_count(list1):\n    '''\n    Write a function that takes a list of strings and returns a dictionary with the letter counts for each string.\n    '''\n    d = collections.defaultdict(int)\n    for s in list1:\n        for c in s:\n            d[c]+=1\n    return d\ndef letter_count_file(filename):\n    '''\n    Write a function that takes a file name and returns a dictionary with the letter counts for each string.\n    '''\n    d = collections.defaultdict(int)\n    f = open(filename)\n    for line in f:\n        line = line.lower()\n        words = line.split()\n        for c in line:\n            d[c]+=1\n    return d\ndef letter_count_dict(dict1):\n    '''\n    Write a function that takes a dictionary of word counts and returns a dictionary with the letter counts for each string.\n    '''\n    d = collections.defaultdict(int)\n    for w,c in dict1.iteritems():\n        for c in w:\n            d[c]+=c\n    return d\ndef letter_count_dict_file(filename):\n    '''\n    Write a function that takes a file name and returns a dictionary with the letter counts for each string.\n    '''\n    d = collections.defaultdict(int)\n    f = open(filename)\n    for line in f:\n        line = line.lower()\n        words = line.split()\n        for c in line:\n            d[c]+=1\n    return d\ndef append_word(word,filename):\n    '''\n    Write a function that takes a word and a file name and appends the word to the file.\n    '''\n    f = open(filename)\n    for line in f:\n        line = line.lower()\n        words = line.split()\n    f = open(filename,'a')\n    f.write('%s\\n'%word)\n    f.close()\ndef remove_word(word,filename):\n    '''\n    Write a function that takes a word and a file name and removes the word from the file.\n    '''\n    f = open(filename)\n    for line in f:\n        line = line.lower()\n        words = line.split()\n    f = open(filename,'w')\n    for line in f:\n        line = line.lower()\n        words = line.split()\n        if word not in words:\n            f.write('%s\\n'%line)\n    f.close()\ndef replace_word(word1,word2,filename):\n    '''\n    Write a function that takes a word and a file name and replaces the word with another word.\n    '''\n    f = open(filename)\n    for line in f:\n        line = line.lower()\n        words = line.split()\n    f = open(filename,'w')\n    for line in f:\n        line = line.lower()\n        words = line.split()\n        if word1 in words:\n            words[words.index(word1)] = word2\n        f.write('%s\\n'%' '.join(words))\n    f.close()\ndef copy_word(word,filename1,filename2):\n    '''\n    Write a function that takes a word and two file names and copies the word to the second file, replacing the word with the word.\n    '''\n    f1 = open(filename1)\n    f2 = open(filename2)\n    for line in f1:\n        line = line.lower()\n        words = line.split()\n    f1 = open(filename1,'w')\n    for line in f2:\n        line = line.lower()\n        words = line.split()\n        if word in words:\n            words[words.index(word)] = word\n        f1.write('%s\\n'%' '.join(words))\n    f1.close()\n    f2.close()\ndef replace_words(word1,word2,filename):\n    '''\n    Write a function that takes a word and a file name and replaces every instance of word1 with word2.\n    '''\n    f = open(filename)\n    for line in f:\n        line = line.lower()\n        words = line.split()\n    f = open(filename,'w')\n    for line in f:\n        line = line.lower()\n        words = line.split()\n        for i in range(len(words)):\n            if words[i]==word1:\n                words[i] = word2\n        f.write('%s\\n'%' '.join(words))\n    f.close()\ndef replace_all(word1,word2,filename):\n    '''\n    Write a function that takes a word and a file name and replaces every instance of word1 with word2.\n    '''\n    f = open(filename)\n    for line in f:\n        line = line.lower()\n        words = line.split()\n    f = open(filename,'w')\n    for line in f:\n        line = line.lower()\n        words = line.split()\n        for i in range(len(words)):\n            if words[i]==word1:\n                words[i] = word2\n        f.write('%s\\n'%' '.join(words))\n    f"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\ndef freq_count_ex(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\ndef top_n(list1,n):\n    '''\n    Write a function to get the top n elements in a list.\n    '''\n    return list1[-n:]\ndef top_n_ex(list1,n):\n    '''\n    Write a function to get the top n elements in a list.\n    '''\n    return [list1[-n:][i] for i in range(n)]\ndef mapper(list1,func):\n    '''\n    Write a function to map a function over a list.\n    '''\n    return [func(item) for item in list1]\ndef mapper_ex(list1,func):\n    '''\n    Write a function to map a function over a list.\n    '''\n    return map(func,list1)\ndef f_map(list1,func):\n    '''\n    Write a function to map a function over a list.\n    '''\n    return list(map(func,list1))\ndef f_map_ex(list1,func):\n    '''\n    Write a function to map a function over a list.\n    '''\n    return [func(item) for item in list1]\ndef filter_func(list1,func):\n    '''\n    Write a function to filter a function over a list.\n    '''\n    return [item for item in list1 if func(item)]\ndef filter_func_ex(list1,func):\n    '''\n    Write a function to filter a function over a list.\n    '''\n    return [item for item in list1 if func(item)]\ndef filter_val(list1,func):\n    '''\n    Write a function to filter a function over a list.\n    '''\n    return list(filter(func,list1))\ndef filter_val_ex(list1,func):\n    '''\n    Write a function to filter a function over a list.\n    '''\n    return [item for item in list1 if func(item)]\ndef aggregate(list1,func):\n    '''\n    Write a function to aggregate a function over a list.\n    '''\n    return func(list1)\ndef aggregate_ex(list1,func):\n    '''\n    Write a function to aggregate a function over a list.\n    '''\n    return func(list1)\ndef aggregate_lst(list1,func):\n    '''\n    Write a function to aggregate a function over a list.\n    '''\n    return [func(list1)]\ndef aggregate_lst_ex(list1,func):\n    '''\n    Write a function to aggregate a function over a list.\n    '''\n    return [func(list1)]\ndef group_by(list1,func):\n    '''\n    Write a function to group a function over a list.\n    '''\n    group_dict = {}\n    for item in list1:\n        if func(item) in group_dict:\n            group_dict[func(item)].append(item)\n        else:\n            group_dict[func(item)] = [item]\n    return group_dict\ndef group_by_ex(list1,func):\n    '''\n    Write a function to group a function over a list.\n    '''\n    group_dict = collections.defaultdict(list)\n    for item in list1:\n        group_dict[func(item)].append(item)\n    return group_dict\ndef zip_lsts(list1,list2):\n    '''\n    Write a function to zip two lists.\n    '''\n    return list(zip(list1,list2))\ndef zip_lsts_ex(list1,list2):\n    '''\n    Write a function to zip two lists.\n    '''\n    return [(list1[i],list2[i]) for i in range(len(list1))]\ndef dict_from_list_lsts(list1,list2):\n    '''\n    Write a function to convert a list of lists to a dictionary.\n    '''\n    return dict(zip(list1,list2))\ndef dict_from_list_lsts_ex(list1,list2):\n    '''\n    Write a function to convert a list of lists to a dictionary.\n    '''\n    return {list1[i]:list2[i] for i in range(len(list1))}\ndef dict_from_lst_lsts(list1,list2):\n    '''\n    Write a function to convert a list of lists to a dictionary.\n    '''\n    return dict(zip(list1,list2))\ndef dict_from_lst_lsts_ex(list1,list2):\n    '''\n    Write a function to convert a list of lists to a dictionary.\n    '''\n    return {list1[i]:list2[i] for i in range(len(list1))}\ndef filter_list(list1,func):\n    '''\n    Write a function to filter a list of numbers based on a predicate function.\n    '''\n    return [item for item in list1 if func(item)]\ndef filter_list_ex(list1,func):\n    '''\n    Write a function to filter a list of numbers based on a predicate function.\n    '''\n    return [item for item in list1 if func(item)]\ndef map_list(list1,func):\n    '''\n    Write a function to map a list of numbers based on a predicate function.\n    '''\n    return [func(item) for item in list1]\ndef map_list_ex(list1,func):\n    '''\n    Write a function to map a list of numbers based on a predicate function.\n    '''\n    return [func(item) for item in list1]\ndef aggregate_list(list1,func):\n    '''\n    Write a function to aggregate a list of numbers based on a predicate function.\n    '''\n    return func(list1)\ndef aggregate_list_ex(list1,func):\n    '''\n    Write a function to aggregate a list of numbers based on a predicate function.\n    '''\n    return func(list1)\ndef zip_lsts_dict(list1,list2,func):\n    '''\n    Write a function to zip a list of lists with a dictionary and a function.\n    '''\n    return zip_lsts(dict_from_list_lsts(list1,list2),func)\ndef aggregate_lsts_dict(list1,func):\n    '''\n    Write a function to aggregate a list of lists with a dictionary and a function.\n    '''\n    return aggregate_lst(dict_from_list_lsts(list1,list1),func)\ndef aggregate_dicts_lsts(dict1,list1,func):\n    '''\n    Write a function to aggregate a list of dictionaries with a list of lists and a function.\n    '''\n    group_dict = aggregate_dict(dict1,func)\n    return zip_lsts(group_dict,func)\ndef aggregate_dicts_lsts_ex(dict1,list1,func):\n    '''\n    Write a function to aggregate a list of dictionaries with a list of lists and a function.\n    '''\n    group_dict = aggregate_dict(dict1,func)\n    return zip_lsts_ex(group_dict,func)\ndef aggregate_dicts_lsts_dict(dict1,list1,func):\n    '''\n    Write a function to aggregate a list of dictionaries with a list of lists and a function.\n    '''\n    group_dict = aggregate_dict(dict1,func)\n    return aggregate_dict(group_dict,func)\ndef aggregate_dict(dict1,func):\n    '''\n    Write a function to aggregate a dictionary with a function.\n    '''\n    group_dict = {}\n    for item in dict1:\n        if func(dict1[item]) in group_dict:\n            group_dict[func(dict1[ite"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\ndef get_unique(list1):\n    '''\n    Write a function to get the unique elements in a list, returned as a list\n    '''\n    unique = []\n    for i in list1:\n        if i not in unique:\n            unique.append(i)\n    return unique\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return dict(count)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\ndef find_pairs(list1, k):\n    '''\n    Write a function to return all pairs from a list of integers that sum to k\n    '''\n    return [(i, j) for i in list1 for j in list1 if i + j == k]\ndef split_and_join(string):\n    '''\n    Write a function to split a string into characters, and join them back together.\n    '''\n    return ''.join(string[i] for i in range(len(string) - 1, -1, -1))\ndef find_most_common(list1):\n    '''\n    Write a function to find the most common element in a list.\n    '''\n    return max(freq_count(list1).items(), key=lambda x: x[1])[0]\ndef find_pairs_of_sum(list1, k):\n    '''\n    Write a function to return all pairs from a list of integers that sum to k\n    '''\n    return [(i, j) for i in list1 for j in list1 if i + j == k]\ndef flip_array(arr):\n    '''\n    Write a function to return the array of numbers upside down (i.e. change the sign of each number).\n    '''\n    return arr[::-1]\ndef is_anagram(word1, word2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if sorted(word1) == sorted(word2):\n        return True\n    return False\ndef is_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    if string == string[::-1]:\n        return True\n    return False\ndef is_anagram_of_word(word1, word2):\n    '''\n    Write a function to check if a given word is an anagram of a word in a dictionary.\n    '''\n    if sorted(word1) == sorted(word2):\n        return True\n    return False\ndef replace_vowels(string):\n    '''\n    Write a function to replace the vowels of a given string with the character X.\n    '''\n    return ''.join(['X' if i in 'aeiouAEIOU' else i for i in string])\ndef sort_list_of_tuples(list1):\n    '''\n    Write a function to sort a list of tuples by the value of the second item in the tuple.\n    '''\n    return sorted(list1, key=lambda x: x[1])\ndef find_leap_years(start, end):\n    '''\n    Write a function to return the count of leap years in a given range.\n    '''\n    return sum(1 for i in range(start, end + 1) if i % 4 == 0 and i % 100!= 0 or i % 400 == 0)\ndef find_most_common_words(list1, k):\n    '''\n    Write a function to return the most common elements from a list of words and its frequency.\n    '''\n    return max(freq_count(list1).items(), key=lambda x: x[1])\ndef num_of_occurances(list1, k):\n    '''\n    Write a function to return the count of number of occurances of an element in a given list.\n    '''\n    return list1.count(k)\ndef replace_nth(string, sub, n):\n    '''\n    Write a function to replace the nth occurance of a given character in a string.\n    '''\n    return string[:n] + sub + string[n + 1:]\ndef swap_nth(list1, n):\n    '''\n    Write a function to swap the nth and n-1th elements of a list.\n    '''\n    return list1[n - 1:n] + list1[n:] + list1[:n - 1]\ndef find_nth_occurance(list1, n):\n    '''\n    Write a function to return the nth occurance of a given number in a given list.\n    '''\n    return list1[n - 1]\ndef sort_list(list1):\n    '''\n    Write a function to return a sorted list.\n    '''\n    return sorted(list1)\ndef square_numbers(n):\n    '''\n    Write a function to square all the numbers in a list.\n    '''\n    return [i * i for i in n]\ndef count_vowels(string):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    return sum(1 for i in string if i in 'aeiouAEIOU')\ndef count_consonants(string):\n    '''\n    Write a function to count the number of consonants in a given string.\n    '''\n    return sum(1 for i in string if i not in 'aeiouAEIOU')\ndef sort_list_of_tuples(list1):\n    '''\n    Write a function to sort a list of tuples by the value of the second item in the tuple.\n    '''\n    return sorted(list1, key=lambda x: x[1])\ndef find_nth_occurance(list1, n):\n    '''\n    Write a function to return the nth occurance of a given number in a given list.\n    '''\n    return list1[n - 1]\ndef get_consonants(string):\n    '''\n    Write a function to get all consonants in a string.\n    '''\n    return [i for i in string if i not in 'aeiouAEIOU']\ndef add_punctuation(string):\n    '''\n    Write a function to add commas, periods, and question marks to the end of a given string.\n    '''\n    return string + (',.?')\ndef is_string_a_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return string == string[::-1]\ndef find_most_common(list1):\n    '''\n    Write a function to find the most common element in a list.\n    '''\n    return max(freq_count(list1).items(), key=lambda x: x[1])[0]\ndef find_pairs_of_sum(list1, k):\n    '''\n    Write a function to return all pairs from a list of integers that sum to k\n    '''\n    return [(i, j) for i in list1 for j in list1 if i + j == k]\ndef replace_nth(string, sub, n):\n    '''\n    Write a function to replace the nth occurance of a given character in a given string.\n    '''\n    return string[:n] + sub + string[n + 1:]\ndef swap_nth(list1, n):\n    '''\n    Write a function to swap the nth and n-1th elements of a list.\n    '''\n    return list1[n - 1:n] + list1[n:] + list1[:n - 1]\ndef find_nth_occurance(list1, n):\n    '''\n    Write a function to return the nth occurance of a given number in a given list.\n    '''\n    return list1[n - 1]\ndef sort_list_of_tuples(list1):\n    '''\n    Write a function to sort a list of tuples by the value of the second item in the tuple.\n    '''\n    return sorted(list1, key=lambda x: x[1])\ndef square_numbers(n):\n    '''\n    Write a function to square all the numbers in a list.\n    '''\n    return [i * i for i in n]\ndef count_vowels(string):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    return sum(1 for i in string if i in 'aeiouAEIOU')\ndef count_consonants(string):\n    '''\n    Write a function to count the number of consonants in a given string.\n    '''\n    return sum(1 for i in string if i not in 'aeiouAEIOU')\ndef sort_list_of_tuples(list1):\n    '"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict = {}\n    for i in list1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_num = None\n    for i in range(n):\n        closest_num = i if (abs(n - i) < abs(n - closest_num)) else closest_num\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    if n <= 1:\n        return -1\n    else:\n        return (n - 1) % n + 1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    lst = []\n    for x in range(1, N):\n        lst.append(abs(x - N))\n    return lst.index(min(lst))\n    \ndef factorial(N):\n    '''\n    Write a function to calculate n!\n    '''\n    if N == 0:\n        return 1\n    else:\n        return N * factorial(N - 1)\n    \ndef is_palindrome(N):\n    '''\n    Write a function to check if a number is a palindrome\n    '''\n    N = str(N)\n    return N == N[::-1]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return -1\n    elif n == 3:\n        return -1\n    elif n == 4:\n        return -1\n    elif n == 5:\n        return -1\n    elif n == 6:\n        return -1\n    elif n == 7:\n        return -1\n    elif n == 8:\n        return -1\n    elif n == 9:\n        return -1\n    elif n == 10:\n        return -1\n    elif n == 11:\n        return -1\n    elif n == 12:\n        return -1\n    elif n == 13:\n        return -1\n    elif n == 14:\n        return -1\n    elif n == 15:\n        return -1\n    elif n == 16:\n        return -1\n    elif n == 17:\n        return -1\n    elif n == 18:\n        return -1\n    elif n == 19:\n        return -1\n    elif n == 20:\n        return -1\n    elif n == 21:\n        return -1\n    elif n == 22:\n        return -1\n    elif n == 23:\n        return -1\n    elif n == 24:\n        return -1\n    elif n == 25:\n        return -1\n    elif n == 26:\n        return -1\n    elif n == 27:\n        return -1\n    elif n == 28:\n        return -1\n    elif n == 29:\n        return -1\n    elif n == 30:\n        return -1\n    elif n == 31:\n        return -1\n    elif n == 32:\n        return -1\n    elif n == 33:\n        return -1\n    elif n == 34:\n        return -1\n    elif n == 35:\n        return -1\n    elif n == 36:\n        return -1\n    elif n == 37:\n        return -1\n    elif n == 38:\n        return -1\n    elif n == 39:\n        return -1\n    elif n == 40:\n        return -1\n    elif n == 41:\n        return -1\n    elif n == 42:\n        return -1\n    elif n == 43:\n        return -1\n    elif n == 44:\n        return -1\n    elif n == 45:\n        return -1\n    elif n == 46:\n        return -1\n    elif n == 47:\n        return -1\n    elif n == 48:\n        return -1\n    elif n == 49:\n        return -1\n    elif n == 50:\n        return -1\n    elif n == 51:\n        return -1\n    elif n == 52:\n        return -1\n    elif n == 53:\n        return -1\n    elif n == 54:\n        return -1\n    elif n == 55:\n        return -1\n    elif n == 56:\n        return -1\n    elif n == 57:\n        return -1\n    elif n == 58:\n        return -1\n    elif n == 59:\n        return -1\n    elif n == 60:\n        return -1\n    elif n == 61:\n        return -1\n    elif n == 62:\n        return -1\n    elif n == 63:\n        return -1\n    elif n == 64:\n        return -1\n    elif n == 65:\n        return -1\n    elif n == 66:\n        return -1\n    elif n == 67:\n        return -1\n    elif n == 68:\n        return -1\n    elif n == 69:\n        return -1\n    elif n == 70:\n        return -1\n    elif n == 71:\n        return -1\n    elif n == 72:\n        return -1\n    elif n == 73:\n        return -1\n    elif n == 74:\n        return -1\n    elif n == 75:\n        return -1\n    elif n == 76:\n        return -1\n    elif n == 77:\n        return -1\n    elif n == 78:\n        return -1\n    elif n == 79:\n        return -1\n    elif n == 80:\n        return -1\n    elif n == 81:\n        return -1\n    elif n == 82:\n        return -1\n    elif n == 83:\n        return -1\n    elif n == 84:\n        return -1\n    elif n == 85:\n        return -1\n    elif n == 86:\n        return -1\n    elif n == 87:\n        return -1\n    elif n == 88:\n        return -1\n    elif n == 89:\n        return -1\n    elif n == 90:\n        return -1\n    elif n == 91:\n        return -1\n    elif n == 92:\n        return -1\n    elif n == 93:\n        return -1\n    elif n == 94:\n        return -1\n    elif n == 95:\n        return -1\n    elif n == 96:\n        return -1\n    elif n == 97:\n        return -1\n    elif n == 98:\n        return -1\n    elif n == 99:\n        return -1\n    elif n == 100:\n        return -1\n    elif n == 101:\n        return -1\n    elif n == 102:\n        return -1\n    elif n == 103:\n        return -1\n    elif n == 104:\n        return -1\n    elif n == 105:\n        return -1\n    elif n == 106:\n        return -1\n    elif n == 107:\n        return -1\n    elif n == 108:\n        return -1\n    elif n == 109:\n        return -1\n    elif n == 110:\n        return -1\n    elif n == 111:\n        return -1\n    elif n == 112:\n        return -1\n    elif n == 113:\n        return -1\n    elif n == 114:\n        return -1\n    elif n == 115:\n        return -1\n    elif n == 116:\n        return -1\n    elif n == 117:\n        return -1\n    elif n == 118:\n        return -1\n    elif n == 119:\n        return -1\n    elif n == 120:\n        return -1\n    elif n == 121:\n        return -1\n    elif n == 122:\n        return -1\n    elif n == 123:\n        return -1\n    elif n == 124:\n        return -1\n    elif n == 125:\n        return -1\n    elif n == 126:\n        return -1\n    elif n == 127:\n        return -1\n    elif n == 128:\n        return -1\n    elif n == 129:\n        return -1\n    elif n == 130:\n        return -1\n    elif n == 131:\n        return -1\n    elif n == 132:\n        return -1\n    elif n == 133:\n        return -1\n    elif n == 134:\n        return -1\n    elif n == 135:\n        return -1\n    elif n == 136:\n        return -1\n    elif n == 137:\n        return -1\n    elif n == 138:\n        return -1\n    elif n == 139:\n        return -1\n    elif n == 140:\n        return -1\n    elif n == 141:\n        return -1\n    elif n == 142:\n        return -1\n    elif n == 143:\n        return -1\n    elif n == 144:\n        return -1\n    elif n == 145:\n        return -1\n    elif n == 146:\n        return -1\n    elif n == 147:\n        return -1\n    elif n == 148:\n        return -1\n    elif n == 149:\n        return -1\n    elif n == 150:\n        return -1\n    elif n == 151:\n        return -1\n    elif n == 152:\n        return -1\n    elif n == 153:\n        return -1\n    elif n == 154:\n        retur"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min([i for i in xrange(N, -1, -1)], key=lambda x:abs(x-N))\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return sorted([x for x in range(N,0,-1)])[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    sorted_nums = sorted(N)\n    return min(sorted_nums[i] for i in range(len(sorted_nums)) if sorted_nums[i] < sorted_nums[0])\n    \ndef find_squares(nums):\n    '''\n    Write a function to find the square of each value in an array.\n    '''\n    for num in nums:\n        yield (num ** 2)\n        \ndef gensquare(nums):\n    '''\n    Write a function that returns a generator that generates square of numbers up to num.\n    '''\n    for num in nums:\n        yield (num ** 2)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if len(N) == 1:\n        return N[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return N - 1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return sorted([n-i for i in xrange(1,N+1)])[0]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxlen = 0\n    for word in list1:\n        if len(word)>maxlen:\n            maxlen = len(word)\n    return maxlen\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if not list1:\n        return 0\n    else:\n        return max(len(s) for s in list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key = len))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxlength = 0\n    for word in list1:\n        if len(word)>maxlength:\n            maxlength = len(word)\n    return maxlength\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i)>max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l = []\n    for word in list1:\n        l.append(len(word))\n    return max(l)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    def length(x):\n        return len(x)\n    return max(list1, key=length)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = [len(item) for item in list1 if len(item) > 1]\n    return max(list2)\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return \"String is present in the list\"\n    return \"String is not present in the list\"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    index_list = []\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word.find(sub_str)!= -1:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1) - len(sub_str) + 1):\n        if (str1[i:i + len(sub_str)] == sub_str):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    len_str = len(str1)\n    for i in range(len_str - sub_str_len + 1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    l = len(sub_str)\n    for i in range(0, len(str1)):\n        if str1[i:i+l] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = False\n    for i in range(len(str1) - len(sub_str) + 1):\n        if sub_str == str1[i:i+len(sub_str)]:\n            result = True\n    return result\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n > 1 and all(n%i for i in range(2, int(n**0.5 + 1)))\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    c = str(n)\n    l = len(c)\n    d = [0]*l\n    d[0] = 1\n    d[1] = 1\n    i = 2\n    while i < l:\n        if (c[i] == c[i-1]):\n            d[i] = 1\n        else:\n            d[i] = 0\n        i += 1\n    if (d[-1] == 0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return len(str(n)) - len(set(str(n))) == 1\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0: return False\n    n_str = str(n)\n    for i in range(len(n_str)//2):\n        if n_str[i]!= n_str[-(i+1)]: return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if len(n)==1:\n        return True\n    elif len(n)==2:\n        return True if int(n[0])>int(n[1]) else False\n    else:\n        if n[0]==n[-1]:\n            return is_undulating(n[1:-1])\n        else:\n            return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    a = [int(i) for i in str(n)]\n    b = a[1:] + [a[0]]\n    return a == b\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    return (n[0] == n[-1]) and is_ascending(n)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False\n    elif n % 2 == 1: \n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # print(n)\n    # print(len(n))\n    # if len(n)%2==0:\n    #     n = n[1:]\n    # print(n)\n    # print(len(n))\n    # for i in range(len(n)//2):\n    #     if n[i]!=n[-1-i]:\n    #         return False\n    # return True\n    return len(n)==len(set(n))\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    import math\n    def is_prime(n):\n        if n in [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]:\n            return True\n        if n%2==0:\n            return False\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\n    def is_palindrome(n):\n        if n < 10:\n            return True\n        last_digit = n % 10\n        head = n // 10\n        return last_digit == head\n    def is_proper(n):\n        if n < 10:\n            return False\n        return is_palindrome(n) and is_prime(n)\n    if n < 10:\n        return True\n    if n < 100:\n        if is_proper(n):\n            return True\n        if n%10 == 5:\n            return True\n        if n%10 == 0:\n            return False\n    if n < 1000:\n        if n%100 == 0:\n            if n%1000 == 0:\n                return False\n            return is_proper(n//10)\n        if is_proper(n):\n            return True\n        if n%100 == 5:\n            return True\n    return False\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a*power(a,b-1)\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n    \ndef is_power_of_two(n):\n    '''\n    Write a function to check if a number is power of 2 or not\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        while n!= 1:\n            if n % 2 == 0:\n                n /= 2\n            else:\n                return False\n        return True\n    \ndef gcd(a,b):\n    '''\n    Write a function to compute the greatest common divisor of two numbers\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\n    \ndef lcm(a,b):\n    '''\n    Write a function to compute the least common multiple of two numbers\n    '''\n    return (a*b) / gcd(a,b)\n    \ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome or not\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        str_n = str(n)\n        for i in range(0,len(str_n)):\n            if str_n[i]!= str_n[len(str_n)-1-i]:\n                return False\n        return True\n    \ndef is_anagram(a,b):\n    '''\n    Write a function to check if two words are anagrams or not\n    '''\n    if len(a)!= len(b):\n        return False\n    else:\n        str_a = sorted(a)\n        str_b = sorted(b)\n        if str_a == str_b:\n            return True\n        else:\n            return False\n    \ndef bubble_sort(arr):\n    '''\n    Write a function to sort an array using bubble sort\n    '''\n    for i in range(len(arr)-1,0,-1):\n        for j in range(0,i):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b % 2 == 0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b < 0:\n        return 1/power(a,-b)\n    elif b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 1:\n        return a\n    if b == 0:\n        return 1\n    return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    if b == 0:\n        return 1\n    for i in range(0,b):\n        result = result*a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if (b==0):\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b<0:\n        return 1/a\n    if b==0:\n        return 1\n    if b>0:\n        return power(a,b-1)*a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    def iterative(a,b):\n        if b==0:\n            return 1\n        elif b==1:\n            return a\n        elif b%2==0:\n            return iterative(a*a,b//2)\n        elif b%2==1:\n            return a*iterative(a*a,(b-1)//2)\n    return iterative(a,b)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    #print a, b\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b%2==0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #take input list of tuples\n    smallest_index = -1\n    smallest_value = -1\n    for i in range(0,len(test_list)):\n        if (test_list[i][1]<smallest_value or smallest_index==-1):\n            smallest_index = i\n            smallest_value = test_list[i][1]\n    return smallest_index\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #test_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    #test_list = [(0, 1), (2, 3), (4, 5), (6, 7)]\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key = itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # enumerate will return index, value tuples\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # enumerate will return index, value tuples\n    return max(enumerate(test_list), key=itemgetter(1))[0]\n    \ndef index_middle(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the median second value.\n    '''\n    # enumerate will return index, value tuples\n    return test_list[index_middle(test_list)][0]\n    \ndef max_prob(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the highest probability of success.\n    '''\n    # enumerate will return index, value tuples\n    return max(enumerate(test_list), key=itemgetter(1))[0]\n    \ndef min_prob(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the lowest probability of success.\n    '''\n    # enumerate will return index, value tuples\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n    \ndef index_1st_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the first quartile second value.\n    '''\n    # enumerate will return index, value tuples\n    # if there are no ties, it will return the first value\n    return sorted(enumerate(test_list), key=itemgetter(1))[index_middle(test_list)][0]\n    \ndef index_2nd_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the second quartile second value.\n    '''\n    # enumerate will return index, value tuples\n    # if there are no ties, it will return the first value\n    return sorted(enumerate(test_list), key=itemgetter(1))[index_middle(test_list) + 1][0]\n    \ndef index_3rd_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the third quartile second value.\n    '''\n    # enumerate will return index, value tuples\n    # if there are no ties, it will return the first value\n    return sorted(enumerate(test_list), key=itemgetter(1))[index_middle(test_list) + 2][0]\n    \ndef index_4th_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the fourth quartile second value.\n    '''\n    # enumerate will return index, value tuples\n    # if there are no ties, it will return the first value\n    return sorted(enumerate(test_list), key=itemgetter(1))[index_middle(test_list) + 3][0]\n    \ndef index_5th_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the fifth quartile second value.\n    '''\n    # enumerate will return index, value tuples\n    # if there are no ties, it will return the first value\n    return sorted(enumerate(test_list), key=itemgetter(1))[index_middle(test_list) + 4][0]\n    \ndef index_6th_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the sixth quartile second value.\n    '''\n    # enumerate will return index, value tuples\n    # if there are no ties, it will return the first value\n    return sorted(enumerate(test_list), key=itemgetter(1))[index_middle(test_list) + 5][0]\n    \ndef index_7th_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the seventh quartile second value.\n    '''\n    # enumerate will return index, value tuples\n    # if there are no ties, it will return the first value\n    return sorted(enumerate(test_list), key=itemgetter(1))[index_middle(test_list) + 6][0]\n    \ndef index_8th_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the eighth quartile second value.\n    '''\n    # enumerate will return index, value tuples\n    # if there are no ties, it will return the first value\n    return sorted(enumerate(test_list), key=itemgetter(1))[index_middle(test_list) + 7][0]\n    \ndef index_9th_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the ninth quartile second value.\n    '''\n    # enumerate will return index, value tuples\n    # if there are no ties, it will return the first value\n    return sorted(enumerate(test_list), key=itemgetter(1))[index_middle(test_list) + 8][0]\n    \ndef index_10th_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the tenth quartile second value.\n    '''\n    # enumerate will return index, value tuples\n    # if there are no ties, it will return the first value\n    return sorted(enumerate(test_list), key=itemgetter(1))[index_middle(test_list) + 9][0]\n    \ndef index_11th_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the eleventh quartile second value.\n    '''\n    # enumerate will return index, value tuples\n    # if there are no ties, it will return the first value\n    return sorted(enumerate(test_list), key=itemgetter(1))[index_middle(test_list) + 10][0]\n    \ndef index_12th_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the twelfth quartile second value.\n    '''\n    # enumerate will return index, value tuples\n    # if there are no ties, it will return the first value\n    return sorted(enumerate(test_list), key=itemgetter(1))[index_middle(test_list) + 11][0]\n    \ndef index_13th_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the thirteenth quartile second value.\n    '''\n    # enumerate will return index, value tuples\n    # if there are no ties, it will return the first value\n    return sorted(enumerate(test_list), key=itemgetter(1))[index_middle(test_list) + 12][0]\n    \ndef index_14th_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the fourteenth quartile second value.\n    '''\n    # enumerate will return index, value tuples\n    # if there are no ties, it will return the first value\n    return sorted(enumerate(test_list), key=itemgetter(1))[index_middle(test_list) + 13][0]\n    \ndef index_15th_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the fifteenth quartile second value.\n    '''\n    # enumerate will return index, value tuples"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Your Code Here\n    min_value=None\n    min_index=None\n    for index,value in enumerate(test_list):\n        if min_value==None or value[1]<min_value:\n            min_value=value[1]\n            min_index=index\n    return test_list[min_index][0]\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min(len(lst) for lst in lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    n = len(lst)\n    if n == 0:\n        return 0\n    min_len = len(lst[0])\n    for i in xrange(n):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = min(len(lst) for lst in lst)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    '''\n    lst = [[1,2,3],[1,2,3],[1,2,3]]\n    lst = [lst[0],lst[1],lst[2]]\n    #print lst\n    min_len = min(len(lst[0]),len(lst[1]),len(lst[2]))\n    return min_len\n    '''\n    min_len = len(lst[0])\n    for l in lst:\n        if len(l) < min_len:\n            min_len = len(l)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minimum_length = 100000\n    for lst_element in lst:\n        if len(lst_element) < minimum_length:\n            minimum_length = len(lst_element)\n    return minimum_length\n    \ndef Find_Max_Min_Lists(lst):\n    '''\n    Write a python function to find the lengths of the longest and the shortest lists.\n    '''\n    max_length = 0\n    min_length = 100000\n    for lst_element in lst:\n        if len(lst_element) > max_length:\n            max_length = len(lst_element)\n        if len(lst_element) < min_length:\n            min_length = len(lst_element)\n    return max_length, min_length\n    \ndef Get_Max_Index(lst):\n    '''\n    Write a python function that takes in a list of integers and returns the index of the \n    largest integer.\n    '''\n    max_num = lst[0]\n    max_index = 0\n    for i in range(len(lst)):\n        if lst[i] > max_num:\n            max_num = lst[i]\n            max_index = i\n    return max_index\n    \ndef Get_Min_Index(lst):\n    '''\n    Write a python function that takes in a list of integers and returns the index of the \n    smallest integer.\n    '''\n    min_num = lst[0]\n    min_index = 0\n    for i in range(len(lst)):\n        if lst[i] < min_num:\n            min_num = lst[i]\n            min_index = i\n    return min_index\n    \ndef Get_Index(lst, num):\n    '''\n    Write a python function that takes in a list of integers and a target integer, and \n    returns the index of the target integer in the list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == num:\n            return i\n    return -1\n    \ndef Remove_Duplicates(lst):\n    '''\n    Write a python function that takes in a list of integers and returns a new list of the\n    same integers, but in no particular order.\n    '''\n    return_list = []\n    for i in range(len(lst)):\n        if lst[i] not in return_list:\n            return_list.append(lst[i])\n    return return_list\n    \ndef Merge_Sorted_Lists(lst1, lst2):\n    '''\n    Write a python function that takes in two lists of integers, and returns a new list of\n    the integers in the two lists, but sorted.\n    '''\n    return_list = []\n    for i in range(len(lst1)):\n        if lst1[i] < lst2[0]:\n            return_list.append(lst1[i])\n    for i in range(len(lst2)):\n        if lst2[i] not in return_list:\n            return_list.append(lst2[i])\n    return return_list\n    \ndef Merge_Sort(lst):\n    '''\n    Write a python function that takes in a list of integers and returns a new list of \n    the integers, sorted in increasing order.\n    '''\n    if len(lst) <= 1:\n        return lst\n    else:\n        half = len(lst) / 2\n        lst1 = Merge_Sort(lst[:half])\n        lst2 = Merge_Sort(lst[half:])\n        return Merge_Sorted_Lists(lst1, lst2)\n        \ndef Get_Max(lst):\n    '''\n    Write a python function that takes in a list of integers and returns the max of \n    the list.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return max(lst)\n    \ndef Get_Min(lst):\n    '''\n    Write a python function that takes in a list of integers and returns the min of \n    the list.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return min(lst)\n    \ndef Get_Average(lst):\n    '''\n    Write a python function that takes in a list of integers and returns the average of \n    the list.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return sum(lst) / len(lst)\n    \ndef Get_Median(lst):\n    '''\n    Write a python function that takes in a list of integers and returns the median of \n    the list.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        lst.sort()\n        if len(lst) % 2 == 0:\n            return (lst[len(lst) / 2 - 1] + lst[len(lst) / 2]) / 2\n        else:\n            return lst[len(lst) / 2]\n    \ndef Get_Mode(lst):\n    '''\n    Write a python function that takes in a list of integers and returns the mode of the \n    list.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        lst.sort()\n        lst_freq = []\n        for i in range(len(lst)):\n            lst_freq.append(lst.count(lst[i]))\n        return lst[Get_Index(lst_freq, max(lst_freq))]\n    \ndef Get_Range(lst):\n    '''\n    Write a python function that takes in a list of integers and returns the range of the \n    list.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return max(lst) - min(lst)\n    \ndef Remove_Bad_Values(lst):\n    '''\n    Write a python function that takes in a list of integers and returns a new list of the\n    same integers, but with the values that are bad removed.\n    '''\n    return_list = []\n    for i in range(len(lst)):\n        if lst[i]!= 'bad':\n            return_list.append(lst[i])\n    return return_list\n    \ndef Remove_Bad_Values_2(lst):\n    '''\n    Write a python function that takes in a list of integers and returns a new list of the\n    same integers, but with the values that are bad removed.\n    '''\n    return_list = []\n    for i in range(len(lst)):\n        if lst[i]!= 'bad':\n            return_list.append(lst[i])\n    return return_list\n    \ndef Sort_List(lst):\n    '''\n    Write a python function that takes in a list of integers and returns a new list of the\n    same integers, but sorted in increasing order.\n    '''\n    return_list = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[j] > lst[i]:\n                return_list.append(lst[i])\n                break\n    for i in range(len(lst)):\n        if lst[i] not in return_list:\n            return_list.append(lst[i])\n    return return_list\n    \ndef Copy_List(lst):\n    '''\n    Write a python function that takes in a list of integers and returns a new list of \n    the same integers, but with all the values in the original list repeated.\n    '''\n    return_list = []\n    for i in range(len(lst)):\n        return_list.append(lst[i])\n    for i in range(len(lst)):\n        return_list.append(lst[i])\n    return return_list\n    \ndef Filter_List(lst):\n    '''\n    Write a python function that takes in a list of integers and returns a new list of \n    the same integers, but with the values that are greater than the mean removed."
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l=len(lst)\n    x=lst[0]\n    y=len(x)\n    z=y\n    for i in range(1,l):\n        if len(lst[i]) < z:\n            z=len(lst[i])\n            x=lst[i]\n    print \"Smallest list is\",x,\"with length\",z\n    print \"\\n\"\n    return \n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    l=len(lst)\n    x=lst[0]\n    y=len(x)\n    z=y\n    for i in range(1,l):\n        if len(lst[i]) > z:\n            z=len(lst[i])\n            x=lst[i]\n    print \"Largest list is\",x,\"with length\",z\n    print \"\\n\"\n    return \n    \ndef Find_Sum(lst):  \n    '''\n    Write a python function to find the sum of the all the numbers in a list of lists.\n    '''\n    l=len(lst)\n    x=lst[0]\n    y=0\n    for i in range(l):\n        y=y+len(lst[i])\n    print \"The sum of the numbers in the list is\",y\n    print \"\\n\"\n    return \n    \ndef Find_Mean(lst):  \n    '''\n    Write a python function to find the mean of all the numbers in a list of lists.\n    '''\n    l=len(lst)\n    x=lst[0]\n    y=0\n    for i in range(l):\n        y=y+len(lst[i])\n    print \"The mean of the numbers in the list is\",y/l\n    print \"\\n\"\n    return \n    \ndef Find_Sum_Square_Difference(lst):  \n    '''\n    Write a python function to find the sum of the squares of all the numbers in a list of lists.\n    '''\n    l=len(lst)\n    x=lst[0]\n    y=0\n    for i in range(l):\n        y=y+len(lst[i])\n    print \"The sum of the squares of the numbers in the list is\",y\n    print \"\\n\"\n    y=0\n    for i in range(l):\n        for j in range(len(lst[i])):\n            y=y+lst[i][j]*lst[i][j]\n    print \"The sum of the squares of the numbers in the list is\",y\n    print \"\\n\"\n    y=0\n    for i in range(l):\n        for j in range(len(lst[i])):\n            y=y+lst[i][j]\n    print \"The sum of the numbers in the list is\",y\n    print \"\\n\"\n    return \n    \ndef Find_Min_Number(lst):  \n    '''\n    Write a python function to find the minimum number in a list of lists.\n    '''\n    l=len(lst)\n    x=lst[0]\n    y=len(x)\n    z=x\n    for i in range(1,l):\n        if len(lst[i]) < y:\n            y=len(lst[i])\n            z=lst[i]\n    print \"The min number in the list is\",z,\"with length\",y\n    print \"\\n\"\n    return \n    \ndef Find_Max_Number(lst):  \n    '''\n    Write a python function to find the maximum number in a list of lists.\n    '''\n    l=len(lst)\n    x=lst[0]\n    y=len(x)\n    z=x\n    for i in range(1,l):\n        if len(lst[i]) > y:\n            y=len(lst[i])\n            z=lst[i]\n    print \"The max number in the list is\",z,\"with length\",y\n    print \"\\n\"\n    return \n    \ndef Find_Range(lst):  \n    '''\n    Write a python function to find the range of all the numbers in a list of lists.\n    '''\n    l=len(lst)\n    x=lst[0]\n    y=len(x)\n    z=x\n    for i in range(1,l):\n        if len(lst[i]) > y:\n            y=len(lst[i])\n            z=lst[i]\n    print \"The range of the numbers in the list is\",z,\"-\",z+y\n    print \"\\n\"\n    return \n    \ndef Find_Mean_Standard_Deviation(lst):  \n    '''\n    Write a python function to find the mean and standard deviation of all the numbers in a list of lists.\n    '''\n    l=len(lst)\n    x=lst[0]\n    y=len(x)\n    z=x\n    for i in range(1,l):\n        if len(lst[i]) > y:\n            y=len(lst[i])\n            z=lst[i]\n    print \"The mean of the numbers in the list is\",z,\"and the standard deviation is\",z/l\n    print \"\\n\"\n    return \n    \ndef Find_Mean_Median_Mode(lst):  \n    '''\n    Write a python function to find the mean, median and mode of all the numbers in a list of lists.\n    '''\n    l=len(lst)\n    x=lst[0]\n    y=len(x)\n    z=x\n    for i in range(1,l):\n        if len(lst[i]) > y:\n            y=len(lst[i])\n            z=lst[i]\n    print \"The mean of the numbers in the list is\",z,\"and the median is\",z/2.0\n    print \"\\n\"\n    return \n    \ndef Find_Mode(lst):  \n    '''\n    Write a python function to find the mode of all the numbers in a list of lists.\n    '''\n    l=len(lst)\n    x=lst[0]\n    y=len(x)\n    z=x\n    for i in range(1,l):\n        if len(lst[i]) > y:\n            y=len(lst[i])\n            z=lst[i]\n    print \"The mode of the numbers in the list is\",z,\"with frequency\",len(lst[lst.index(z)])\n    print \"\\n\"\n    return \n    \ndef Find_Mode_Number_List(lst):  \n    '''\n    Write a python function to find the mode of all the numbers in a list of lists.\n    '''\n    l=len(lst)\n    x=lst[0]\n    y=len(x)\n    z=x\n    for i in range(1,l):\n        if len(lst[i]) > y:\n            y=len(lst[i])\n            z=lst[i]\n    print \"The mode of the numbers in the list is\",z,\"with frequency\",len(lst[lst.index(z)]),\"in the list\",z\n    print \"\\n\"\n    return \n    \ndef Find_Mode_Number_List_2(lst):  \n    '''\n    Write a python function to find the mode of all the numbers in a list of lists.\n    '''\n    l=len(lst)\n    x=lst[0]\n    y=len(x)\n    z=x\n    for i in range(1,l):\n        if len(lst[i]) > y:\n            y=len(lst[i])\n            z=lst[i]\n    for i in range(0,l):\n        if z == lst[i]:\n            lst[i]=str(lst[i])+\"-\"+str(len(lst[i]))\n            lst[i]=int(lst[i])\n            print \"The mode of the numbers in the list is\",z,\"with frequency\",len(lst[ls"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_list_length = lst[0]\n    for i in range(len(lst)):\n        if min_list_length > len(lst[i]):\n            min_list_length = len(lst[i])\n    return min_list_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst)==1:\n        return len(lst[0])\n    else:\n        return min([Find_Min_Length(x) for x in lst])\ndef Find_Max_length(lst):  \n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    if len(lst)==1:\n        return len(lst[0])\n    else:\n        return max([Find_Max_length(x) for x in lst])\ndef Min_of_list(lst):  \n    '''\n    Write a python function to find the minimum value in a list.\n    '''\n    return min([x for x in lst])\ndef Max_of_list(lst):  \n    '''\n    Write a python function to find the maximum value in a list.\n    '''\n    return max([x for x in lst])\ndef Min_of_list_in_list(lst):  \n    '''\n    Write a python function to find the minimum value in a list of lists.\n    '''\n    return min([Min_of_list(x) for x in lst])\ndef Max_of_list_in_list(lst):  \n    '''\n    Write a python function to find the maximum value in a list of lists.\n    '''\n    return max([Max_of_list(x) for x in lst])\ndef Min_of_list_in_list_in_list(lst):  \n    '''\n    Write a python function to find the minimum value in a list of lists.\n    '''\n    return min([Min_of_list_in_list(x) for x in lst])\ndef Max_of_list_in_list_in_list(lst):  \n    '''\n    Write a python function to find the maximum value in a list of lists.\n    '''\n    return max([Max_of_list_in_list(x) for x in lst])\ndef Find_Max_in_list(lst):  \n    '''\n    Write a python function to find the maximum value in a list.\n    '''\n    return max([x for x in lst])\ndef Find_Max_in_list_in_list(lst):  \n    '''\n    Write a python function to find the maximum value in a list of lists.\n    '''\n    return max([Find_Max_in_list(x) for x in lst])\ndef Find_Min_in_list(lst):  \n    '''\n    Write a python function to find the minimum value in a list.\n    '''\n    return min([x for x in lst])\ndef Find_Min_in_list_in_list(lst):  \n    '''\n    Write a python function to find the minimum value in a list of lists.\n    '''\n    return min([Find_Min_in_list(x) for x in lst])\ndef Find_Max_in_list_in_list_in_list(lst):  \n    '''\n    Write a python function to find the maximum value in a list of lists.\n    '''\n    return max([Find_Max_in_list_in_list(x) for x in lst])\ndef Find_Min_in_list_in_list_in_list(lst):  \n    '''\n    Write a python function to find the minimum value in a list of lists.\n    '''\n    return min([Find_Min_in_list_in_list(x) for x in lst])\ndef Find_Max_in_list_in_list_in_list_in_list(lst):  \n    '''\n    Write a python function to find the maximum value in a list of lists.\n    '''\n    return max([Find_Max_in_list_in_list_in_list(x) for x in lst])\ndef Find_Min_length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([Find_Min_length(x) for x in lst])\ndef Find_Max_length(lst):  \n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    return max([Find_Max_length(x) for x in lst])\ndef Find_Min_in_list_in_list(lst):  \n    '''\n    Write a python function to find the minimum value in a list of lists.\n    '''\n    return min([Find_Min_in_list(x) for x in lst])\ndef Find_Max_in_list_in_list(lst):  \n    '''\n    Write a python function to find the maximum value in a list of lists.\n    '''\n    return max([Find_Max_in_list(x) for x in lst])\ndef Find_Min_in_list_in_list_in_list(lst):  \n    '''\n    Write a python function to find the minimum value in a list of lists.\n    '''\n    return min([Find_Min_in_list_in_list(x) for x in lst])\ndef Find_Max_in_list_in_list_in_list_in_list(lst):  \n    '''\n    Write a python function to find the maximum value in a list of lists.\n    '''\n    return max([Find_Max_in_list_in_list_in_list(x) for x in lst])\ndef Find_Min_in_list_in_list_in_list_in_list(lst):  \n    '''\n    Write a python function to find the minimum value in a list of lists.\n    '''\n    return min([Find_Min_in_list_in_list_in_list(x) for x in lst])\ndef Find_Max_in_list_in_list_in_list_in_list(lst):  \n    '''\n    Write a python function to find the maximum value in a list of lists.\n    '''\n    return max([Find_Max_in_list_in_list_in_list(x) for x in lst])\ndef Find_Min_length_in_list(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([Find_Min_length_in_list(x) for x in lst])\ndef Find_Max_length_in_list(lst):  \n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    return max([Find_Max_length_in_list(x) for x in lst])\ndef Find_Min_in_list_in_list_in_list(lst):  \n    '''\n    Write a python function to find the minimum value in a list of lists.\n    '''\n    return min([Find_Min_in_list_in_list(x) for x in lst])\ndef Find_Max_in_list_in_list_in_list(lst):  \n    '''\n    Write a python function to find the maximum value in a list of lists.\n    '''\n    return max([Find_Max_in_list_in_list(x) for x in lst])\ndef Find_Min_in_list_in_list_in_list_in_list(lst):  \n    '''\n    Write a python function to find the minimum value in a list of lists.\n    '''\n    return min([Find_Min_in_list_in_list_in_list(x) for x in lst])\ndef Find_Max_in_list_in_list_in_list_in_list(lst):  \n    '''\n    Write a python function to find the maximum value in a list of lists.\n    '''\n    return max([Find_Max_in_list_in_list_in_list(x) for x in lst])\ndef Find_Min_length_in_list_in_list_in_list_in_list(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([Find_Min_length_in_list_in_list_in_list(x) for x in "
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    smallest = len(lst[0])\n    for i in lst:\n        if len(i) < smallest:\n            smallest = len(i)\n    return smallest\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    numbers = {}\n    for i in range(1,n):\n        if n%i == 0:\n            if i not in numbers.keys():\n                numbers[i] = 1\n            else:\n                numbers[i] += 1\n    return numbers\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    i = 2\n    count = 0\n    while i < n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # the division is only counted for i, where 0<i<n\n    if n==1:\n        return 1\n    div_count = 1\n    for i in range(2,n):\n        if n%i==0:\n            div_count+=1\n    return div_count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    list_of_divisors = []\n    for i in range(1, int(n/2) + 1):\n        if n % i == 0:\n            list_of_divisors.append(i)\n    return len(list_of_divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    i = 1\n    while i*i<=n:\n        if n%i==0:\n            divisors+=2\n        i+=1\n    if i*i==n:\n        divisors+=1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in xrange(2,n):\n        if n%i == 0:\n            divisors = divisors + 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            div.append(i)\n    return sum(div)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    num_divisors = 1\n    for i in range(1, n):\n        if n % i == 0:\n            num_divisors += 1\n    return num_divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    count = 0\n    for i in xrange(1, n):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for element in list1:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Make sure the list is not None\n    if not list1:\n        return []\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for item in list1:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for item in list1:\n        if item in dic:\n            dic[item] += 1\n        else:\n            dic[item] = 1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for i in list1:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counter = {}\n    for item in list1:\n        if item not in counter:\n            counter[item] = 1\n        else:\n            counter[item] += 1\n    return counter\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict_result = {}\n    for x in list1:\n        if x in dict_result.keys():\n            dict_result[x] += 1\n        else:\n            dict_result[x] = 1\n    return dict_result\n    \ndef has_duplicates(list1):\n    '''\n    Write a function to find if a list contains any duplicate elements.\n    '''\n    for x in list1:\n        if list1.count(x) > 1:\n            return True\n    return False\n    \ndef find_min(list1):\n    '''\n    Write a function to find the minimum element in a list of numbers.\n    '''\n    return min(list1)\n    \ndef find_max(list1):\n    '''\n    Write a function to find the maximum element in a list of numbers.\n    '''\n    return max(list1)\n    \ndef get_frequency(list1, n):\n    '''\n    Write a function to find the frequency of n in a list of integers.\n    '''\n    return list1.count(n)\n    \ndef find_min_max_combination(list1):\n    '''\n    Write a function to find the pair of min and max elements in a list of numbers.\n    '''\n    max_value = max(list1)\n    min_value = min(list1)\n    for x in list1:\n        if x == max_value:\n            return [min_value, max_value]\n        elif x == min_value:\n            return [min_value, max_value]\n    return [0, 0]\n    \ndef find_max_min_combination(list1):\n    '''\n    Write a function to find the pair of min and max elements in a list of numbers.\n    '''\n    max_value = max(list1)\n    min_value = min(list1)\n    return [max_value, min_value]\n    \ndef compare_strings(str1, str2):\n    '''\n    Write a function to compare two strings in alphabetical order.\n    '''\n    if str1 < str2:\n        return True\n    elif str1 > str2:\n        return False\n    else:\n        return True\n    \ndef compare_strings_1(str1, str2):\n    '''\n    Write a function to compare two strings in alphabetical order.\n    '''\n    list1 = list(str1)\n    list2 = list(str2)\n    for x in range(min(len(list1), len(list2))):\n        if list1[x] < list2[x]:\n            return True\n        elif list1[x] > list2[x]:\n            return False\n    if len(list1) > len(list2):\n        return False\n    else:\n        return True\n    \ndef power_of_two(n):\n    '''\n    Write a function to find if a number is power of 2.\n    '''\n    return n & (n-1) == 0\n    \ndef power_of_two_1(n):\n    '''\n    Write a function to find if a number is power of 2.\n    '''\n    return n == n & (n-1)\n    \ndef reverse_words(string):\n    '''\n    Write a function to reverse words in a string.\n    '''\n    list1 = string.split()\n    list1.reverse()\n    return''.join(list1)\n    \ndef reverse_words_2(string):\n    '''\n    Write a function to reverse words in a string.\n    '''\n    return''.join(string.split()[::-1])\n    \ndef merge_two_dicts(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    return result\n    \ndef check_in_string(string, substr):\n    '''\n    Write a function to check if a string is present in a given substring.\n    '''\n    return string.find(substr) > -1\n    \ndef check_in_string_1(string, substr):\n    '''\n    Write a function to check if a string is present in a given substring.\n    '''\n    return string.find(substr)!= -1\n    \ndef check_in_string_2(string, substr):\n    '''\n    Write a function to check if a string is present in a given substring.\n    '''\n    return string.find(substr)!= -1\n    \ndef check_in_string_3(string, substr):\n    '''\n    Write a function to check if a string is present in a given substring.\n    '''\n    if string.find(substr) == -1:\n        return False\n    return True\n    \ndef check_in_string_4(string, substr):\n    '''\n    Write a function to check if a string is present in a given substring.\n    '''\n    return string.find(substr)!= -1\n    \ndef count_words(string):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    list1 = string.split()\n    return len(list1)\n    \ndef count_words_1(string):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    return len(string.split())\n    \ndef count_words_2(string):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    return len(string.split())\n    \ndef count_words_3(string):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    return len(string.split())\n    \ndef count_words_4(string):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    count = 0\n    for x in string.split():\n        count += 1\n    return count\n    \ndef check_pallindrome(string):\n    '''\n    Write a function to check if a string is a pallindrome.\n    '''\n    list1 = list(string)\n    list1.reverse()\n    if list1 == list(string):\n        return True\n    else:\n        return False\n    \ndef check_pallindrome_1(string):\n    '''\n    Write a function to check if a string is a pallindrome.\n    '''\n    list1 = list(string)\n    list1.reverse()\n    if list1 == list(string):\n        return True\n    else:\n        return False\n    \ndef check_pallindrome_2(string):\n    '''\n    Write a function to check if a string is a pallindrome.\n    '''\n    list1 = list(string)\n    if list1 == list1[::-1]:\n        return True\n    else:\n        return False\n    \ndef get_digit(string):\n    '''\n    Write a function to find the digit at the end of a string.\n    '''\n    return string[-1]\n    \ndef get_digit_1(string):\n    '''\n    Write a function to find the digit at the end of a string.\n    '''\n    return string[-1]\n    \ndef get_digit_2(string):\n    '''\n    Write a function to find the digit at the end of a string.\n    '''\n    return string[-1:]\n    \ndef get_digit_3(string):\n    '''\n    Write a function to find the digit at the end of a string.\n    '''\n    return string[-1:]\n    \ndef get_digit_4(string):\n    '''\n    Write a function to find the digit at the end of a string.\n    '''\n    return string[-1:][0]\n    \ndef get_digit_5(string):\n    '''\n    Write a function to find the digit at the end of a string.\n    '''\n    return string[-1:][0]\n    \ndef find_max_digit(string):\n    '''\n    Write a function to find the max digit in a string.\n    '''\n    list1 = list(string)\n    max_digit = max(list1)\n    return max_digit"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = {}\n    for element in list1:\n        if element in result:\n            result[element] += 1\n        else:\n            result[element] = 1\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for element in list1:\n        if element in counts:\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    return counts\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x*y, numbers)/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result = result * i\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = reduce(lambda x, y: x*y, numbers)\n    return mul / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = reduce(lambda x,y: x*y, numbers)\n    div = len(numbers)\n    return mul / div\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result *= i\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for num in numbers:\n        num *= num\n    return num / len(numbers)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)\n    \nprint multiply_num([1,2,3,4])\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    answer = 1\n    for i in numbers:\n        answer = answer * i\n    return answer/len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return n + 2**32\n    binary_string = ''\n    while n > 0:\n        if n % 2 == 1:\n            binary_string += '1'\n        else:\n            binary_string += '0'\n        n = n // 2\n    # for i in range(len(binary_string)):\n        # if binary_string[i] == '1':\n            # binary_string[i] = 0\n        # else:\n            # binary_string[i] = 1\n    binary_string = ''.join(reversed(binary_string))\n    return int(binary_string)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    ans = \"\"\n    while (n > 0):\n        if (n % 2 == 0):\n            ans = \"0\" + ans\n        else:\n            ans = \"1\" + ans\n        n = n / 2\n    return ans\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_repr = bin(n).replace(\"0b\",\"\")\n    return binary_repr\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return n/2 + decimal_to_binary(n/2)\n    else:\n        return n/2 + decimal_to_binary(n/2)\n    \ndef binary_to_decimal(n):\n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    elif n % 10 == 1:\n        return n%10 + n/10 + binary_to_decimal(n/10)\n    else:\n        return n%10 + n/10 + binary_to_decimal(n/10)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    res = []\n    while n > 0:\n        res.append(str(n % 2))\n        n = n >> 1\n    res = \"\".join(res[::-1])\n    return res\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_string = \"\"\n    while n > 0:\n        bin_string = str(n % 2) + bin_string\n        n = n // 2\n    return bin_string\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert the number to a string\n    dec = str(n)\n    # Initialize the result\n    res = ''\n    # Traverse the string\n    for i in range(len(dec)):\n        # Find the binary representation of current number\n        temp = dec[i]\n        bin = ''\n        while(temp!= 0):\n            # Append the binary number with the remainder\n            bin = str(temp%2) + bin\n            # Update the value of temp\n            temp = temp/2\n        # If length of the string is greater than 0 then add the 0's\n        if len(bin) > 0:\n            bin = '0'*(8 - len(bin)) + bin\n        # Add the binary number to the result\n        res = bin + res\n    # Return the result\n    return res\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # The given number is not a palindrome.\n    if num < 0:\n        return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    if (str(num)[::-1] == str(num)):\n        return num\n    else:\n        return next_smallest_palindrome(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num==0:\n        return 1\n    else:\n        return int(str(num)[::-1])+1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    if (num % 10) == 0:\n        return int(num/10)*10 + 9\n    else:\n        return int(num/10)*10 + (num%10) - 1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return 11\n    last_digit = num % 10\n    if last_digit > 5:\n        return num + 1\n    s = str(num)\n    if last_digit == 0:\n        return int(s + str(0) + str(0) + str(1))\n    if last_digit == 5:\n        return int(s[: -1] + str(0) + str(0) + str(1))\n    elif last_digit == 6:\n        return int(s[: -1] + str(0) + str(0) + str(2))\n    elif last_digit == 7:\n        return int(s[: -1] + str(0) + str(0) + str(3))\n    elif last_digit == 8:\n        return int(s[: -1] + str(0) + str(0) + str(4))\n    else:\n        return int(s[: -1] + str(0) + str(0) + str(5))\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_copy = num\n    num_str = str(num)\n    if num_str[::-1] == num_str:\n        return -1\n    else:\n        while (num_copy > 9):\n            num_copy = num_copy // 10\n        num_copy = num_copy * 10 + 1\n        num_copy = int(str(num_copy) + str(num_copy)[::-1])\n        return num_copy\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_as_str = str(num)\n    reverse_num_as_str = num_as_str[::-1]\n    if num_as_str == reverse_num_as_str:\n        return int(reverse_num_as_str + '1')\n    else:\n        return int(reverse_num_as_str + '9'*(len(num_as_str) - 1))\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def find_next_smallest(num):\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            return int(num_str + '1')\n        else:\n            for i in range(len(num_str)):\n                if num_str[i] < num_str[-1]:\n                    num_str = num_str[:i]+num_str[i+1:]\n                    break\n            return int(num_str + '1')\n    if num == 1:\n        return 0\n    while True:\n        if num == 0:\n            return 1\n        else:\n            num = find_next_smallest(num)\n    return 0\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    return int(str(num) + str(num)[::-1])\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        print(\"Invalid input\")\n    else:\n        pivot = arr[-1]\n        left = [x for x in arr if x < pivot]\n        equal = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr is None:\n        return\n    if len(arr) < k:\n        return None\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    i = 1\n    k = k - 1\n    while i < len(arr):\n        if k < arr[i]:\n            arr.insert(i, arr[i - 1])\n            arr.pop(i - 1)\n            i = i - 1\n        i += 1\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        print(\"Invalid kth element\")\n        return\n    return arr[(len(arr)-k)]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #return sorted(arr)[k-1]\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr is None or len(arr) == 0 or k < 0 or k > len(arr):\n        return\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[(k-1) % len(arr)]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    if word[0].isupper():\n        return word\n    else:\n        return word[0].upper() + word[1:].lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    word = word.strip().split('_')\n    for w in word:\n        result += w.title()\n    return result\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    if word[0] == '_':\n        return word\n    return snake_to_camel_helper(word, 0)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # First split string into list\n    words = word.split('_')\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    else:\n        if word[0].isupper():\n            return word\n        else:\n            return word[0].upper() + word[1:]"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return ''\n    elif len(word) == 1:\n        return word[0].upper()\n    else:\n        return word[0].upper() + word[1:].lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([i.capitalize() for i in word.split('_')])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace(\"_\",\" \")\n    words = word.split(\" \")\n    camel_case = \"\"\n    for word in words:\n        camel_case += word.capitalize()\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #convert to list\n    words = word.split('_')\n    #remove blank entries\n    words = filter(None, words)\n    #convert first letter to uppercase\n    words[0] = words[0].title()\n    #join list\n    return ''.join(words)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0: return 0\n    if m == 0: return 0\n    if n % 2 == 0: return eulerian_num(n-1, m)\n    if m % 2 == 0: return eulerian_num(n, m-1)\n    return (eulerian_num(n-1, m) + eulerian_num(n, m-1))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    if n == 0:\n        return 1\n    if m == 1:\n        return 1\n    if m == 0:\n        return 1\n    return (eulerian_num(n-1, m) + eulerian_num(n, m-1))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 0\n    elif n < m:\n        return eulerian_num(n, m-1) + m\n    elif n > m:\n        return eulerian_num(n-1, m) + n\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    #n = int(input(\"Enter the number of vertices: \"))\n    #m = int(input(\"Enter the number of edges: \"))\n    #edges = []\n    #for i in range(m):\n    #    u, v = map(int, input().split())\n    #    edges.append((u, v))\n    \n    #d = dict()\n    #for i in range(n):\n    #    d[i] = []\n    #for i in edges:\n    #    d[i[0]].append(i[1])\n    #    d[i[1]].append(i[0])\n    \n    #degree = []\n    #for i in range(n):\n    #    degree.append(len(d[i]))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Suppose the edges are directed\n    # The graph with m edges between n vertices has Eulerian circuit\n    # Eulerian number is the number of vertices in the Eulerian circuit\n    if n == 0 and m == 0: \n        return 0\n    if n == 0:\n        return 1\n    if m == 0:\n        return 1\n    if n == 1 and m == 1:\n        return 2\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n    if m == 2:\n        return (n * (n - 1)) // 2\n    if m == 3:\n        return (n * (n - 1) * (n - 2)) // 6\n    return (n * (n - 1) * (m - 2)) // 6\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 2 * n * m - m - 1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    if n == 0:\n        return 0\n    if m == 0:\n        return 0\n    return eulerian_num(n-1, m-1) + 2*n\n    \n    \ndef partitions(num):\n    '''\n    Returns the number of ways that n can be partitioned into m parts.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    return partitions(num-1) + partitions(num-2) + partitions(num-3)\n    \n    \ndef partition_hash(num, m):\n    '''\n    Returns the number of ways that n can be partitioned into m parts.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num-m in hash:\n        return hash[num-m]\n    if num-m == 1:\n        hash[num-m] = partition_hash(num-1, m) + partition_hash(num-2, m)\n        return hash[num-m]\n    hash[num-m] = partition_hash(num-1, m) + partition_hash(num-2, m) + partition_hash(num-3, m)\n    return hash[num-m]\n    \n    \ndef partitions_hash(num, m):\n    '''\n    Returns the number of ways that n can be partitioned into m parts.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num-m in hash:\n        return hash[num-m]\n    if num-m == 1:\n        hash[num-m] = partitions_hash(num-1, m) + partitions_hash(num-2, m)\n        return hash[num-m]\n    hash[num-m] = partitions_hash(num-1, m) + partitions_hash(num-2, m) + partitions_hash(num-3, m)\n    return hash[num-m]\n    \n    \ndef find_max_partitions(num, m):\n    '''\n    Returns the maximum number of ways that n can be partitioned into m parts.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num-m in hash:\n        return hash[num-m]\n    if num-m == 1:\n        hash[num-m] = find_max_partitions(num-1, m) + find_max_partitions(num-2, m)\n        return hash[num-m]\n    hash[num-m] = find_max_partitions(num-1, m) + find_max_partitions(num-2, m) + find_max_partitions(num-3, m)\n    return hash[num-m]\n    \n    \ndef permutations_hash(num, m):\n    '''\n    Returns the number of ways that n can be partitioned into m parts.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num-m in hash:\n        return hash[num-m]\n    if num-m == 1:\n        hash[num-m] = permutations_hash(num-1, m) + permutations_hash(num-2, m)\n        return hash[num-m]\n    hash[num-m] = permutations_hash(num-1, m) + permutations_hash(num-2, m) + permutations_hash(num-3, m)\n    return hash[num-m]\n    \n    \ndef digit_permutations(num, m):\n    '''\n    Returns the number of ways that n can be partitioned into m parts.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num-m in hash:\n        return hash[num-m]\n    if num-m == 1:\n        hash[num-m] = digit_permutations(num-1, m) + digit_permutations(num-2, m)\n        return hash[num-m]\n    hash[num-m] = digit_permutations(num-1, m) + digit_permutations(num-2, m) + digit_permutations(num-3, m)\n    return hash[num-m]\n    \n    \ndef binomial_coefficient(n, m):\n    '''\n    Returns the binomial coefficient of n and m.\n    '''\n    if m == 1:\n        return n\n    if m == 0:\n        return 1\n    return binomial_coefficient(n-1, m-1) + binomial_coefficient(n-1, m)\n    \n    \ndef factorial_recursive(num):\n    '''\n    Returns the factorial of num.\n    '''\n    if num == 1:\n        return 1\n    return num * factorial_recursive(num-1)\n    \n    \ndef factorial(num):\n    '''\n    Returns the factorial of num.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    return num * factorial(num-1)\n    \n    \ndef permutations_recursive(num, m):\n    '''\n    Returns the number of ways that n can be partitioned into m parts.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return m\n    if m == 0:\n        return 0\n    return permutations_recursive(num-1, m) + permutations_recursive(num-1, m-1)\n    \n    \ndef permutations(num, m):\n    '''\n    Returns the number of ways that n can be partitioned into m parts.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return m\n    if m == 0:\n        return 0\n    return permutations(num-1, m) + permutations(num-1, m-1)\n    \n    \ndef partitions_recursive(num, m):\n    '''\n    Returns the number of ways that n can be partitioned into m parts.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num-m == 1:\n        return partitions_recursive(num-1, m) + partitions_recursive(num-2, m)\n    if num-m in hash:\n        return hash[num-m]\n    hash[num-m] = partitions_recursive(num-1, m) + partitions_recursive(num-2, m) + partitions_recursive(num-3, m)\n    return hash[num-m]\n    \n    \ndef partitions_hash_recursive(num, m):\n    '''\n    Returns the number of ways that n can be partitioned into m parts.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num-m == 1:\n        return partitions_hash_recursive(num-1, m) + partitions_hash_recursive(num-2, m)\n    if num-m in hash:\n        return hash[num-m]\n    hash[num-m] = partitions_hash_recursive(num-1, m) + partitions_hash_recursive(num-2, m) + partitions_hash_recursive(num-3, m)\n    return hash[num-m]\n    \n    \ndef partitions_hash_memo(num, m):\n    '''\n    Returns the number of ways that n can be partitioned into m parts.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    i"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return int((n + m) * (n - 1) / 2)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1: \n        return m\n    elif m == 1: \n        return n\n    else: \n        return (n - 1) + (m - 1) \n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist = []\n    for i in input_list:\n        sublist.append(sorted(i))\n    return sublist\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[s for s in sublist] for sublist in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # define a function to return the length of a string\n    def get_string_length(string):\n        return len(string)\n    \n    # use a list comprehension to sort each sublist\n    # note the use of the sort function to determine the sorting order\n    # note also that the function gets passed the itemgetter function to extract the\n    # length of the strings\n    return [sorted(sublist, key=itemgetter(0)) for sublist in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # The following is a helper function that returns the length of a string\n    def length(input_string):\n        return len(input_string)\n    # The following is a helper function that returns the sum of integers in a list\n    def sum_of_list(input_list):\n        result = 0\n        for i in input_list:\n            result += i\n        return result\n    # The following is a helper function that returns the max of integers in a list\n    def max_of_list(input_list):\n        result = input_list[0]\n        for i in input_list:\n            if i > result:\n                result = i\n        return result\n    # The following is a helper function that returns the min of integers in a list\n    def min_of_list(input_list):\n        result = input_list[0]\n        for i in input_list:\n            if i < result:\n                result = i\n        return result\n    # The following is a helper function that returns the mean of integers in a list\n    def mean_of_list(input_list):\n        result = sum_of_list(input_list) / len(input_list)\n        return result\n    # The following is a helper function that returns the median of integers in a list\n    def median_of_list(input_list):\n        length = len(input_list)\n        if length % 2 == 0:\n            median = (input_list[length//2-1] + input_list[length//2]) / 2\n        else:\n            median = input_list[length//2]\n        return median\n    # The following is a helper function that returns the mode of integers in a list\n    def mode_of_list(input_list):\n        count = {}\n        for i in input_list:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        max_count = count[0]\n        result = [0, 0]\n        for key, value in count.items():\n            if value > max_count:\n                max_count = value\n                result[0] = key\n            elif value == max_count:\n                result[1] = key\n        if result[0] == result[1]:\n            return result[0]\n        else:\n            return result\n    # The following is a helper function that returns the standard deviation of integers in a list\n    def standard_deviation_of_list(input_list):\n        mean = mean_of_list(input_list)\n        variance = 0\n        for i in input_list:\n            variance += (i - mean)**2\n        variance /= (len(input_list) - 1)\n        standard_dev = variance ** 0.5\n        return standard_dev\n    # The following is a helper function that returns the variance of integers in a list\n    def variance_of_list(input_list):\n        mean = mean_of_list(input_list)\n        variance = 0\n        for i in input_list:\n            variance += (i - mean)**2\n        variance /= (len(input_list) - 1)\n        return variance\n    # The following is a helper function that returns the covariance of integers in a list\n    def covariance_of_list(input_list):\n        mean = mean_of_list(input_list)\n        variance = 0\n        for i in input_list:\n            variance += (i - mean)**2\n        variance /= (len(input_list) - 1)\n        covariance = 0\n        for i in input_list:\n            covariance += (i - mean) * (i - mean)\n        covariance /= (len(input_list) - 1)\n        return covariance\n    # The following is a helper function that returns the correlation of integers in a list\n    def correlation_of_list(input_list):\n        mean = mean_of_list(input_list)\n        variance = variance_of_list(input_list)\n        covariance = covariance_of_list(input_list)\n        r = covariance / (variance**0.5)\n        return r\n    def dictionary_sort(dictionary):\n        sorted_dictionary = {}\n        for i in sorted(dictionary, key=dictionary.get, reverse=True):\n            sorted_dictionary[i] = dictionary[i]\n        return sorted_dictionary\n    def sort_list_of_list(list_of_list, input_list):\n        if input_list!= []:\n            index = input_list.index(min(input_list))\n            input_list.remove(min(input_list))\n            list_of_list.append(input_list)\n            sort_list_of_list(list_of_list, input_list)\n        else:\n            return\n    def sort_dict_of_list(dict_of_list, input_list):\n        if input_list!= []:\n            index = input_list.index(min(input_list))\n            input_list.remove(min(input_list))\n            for i in dict_of_list[input_list[0]]:\n                i.append(input_list[0])\n            sort_dict_of_list(dict_of_list, input_list)\n        else:\n            return\n    def max_of_list_in_dict(dict_of_list):\n        max_of_list = []\n        for i in dict_of_list:\n            max_of_list.append(max(dict_of_list[i]))\n        return max_of_list\n    def max_of_list_in_dict_2(dict_of_list):\n        max_of_list = []\n        for i in dict_of_list:\n            max_of_list.append(max(dict_of_list[i]))\n        max_of_list.sort(reverse=True)\n        return max_of_list\n    def count_of_list_in_dict(dict_of_list, input_list):\n        count_of_list = [0]\n        for i in input_list:\n            count_of_list.append(count_of_list[i] + 1)\n        return count_of_list\n    def count_of_list_in_dict_2(dict_of_list, input_list):\n        count_of_list = [0]\n        for i in input_list:\n            count_of_list.append(count_of_list[i] + 1)\n        count_of_list.sort(reverse=True)\n        return count_of_list\n    def list_of_list_in_dict(dict_of_list, input_list):\n        list_of_list = []\n        for i in input_list:\n            list_of_list.append(dict_of_list[i])\n        return list_of_list\n    def list_of_list_in_dict_2(dict_of_list, input_list):\n        list_of_list = []\n        for i in input_list:\n            list_of_list.append(dict_of_list[i])\n        return list_of_list\n    def sort_dict_of_list_2(dict_of_list):\n        sorted_dict = {}\n        for i in sorted(dict_of_list):\n            sorted_dict[i] = dict_of_list[i]\n        return sorted_dict\n    def sort_dict_of_list_3(dict_of_list, input_list):\n        if input_list!= []:\n            index = input_list.index(max(input_list))\n            input_list.remove(max(input_list))\n            for i in dict_of_list[input_list[0]]:\n                i.append(input_list[0])\n            sort_dict_of_list_3(dict_of_list, input_list)\n        else:\n            return\n    def add_to_dict_of_list(dict_of_list, input_list):\n        if input_list!= []:\n            dict_of_list[input_list[0]] = dict_of_list.get(input_list[0], [])\n            dict_of_list[input_list[0]].append(input_list[1])\n            add_to_dict_of_list(dict_of_list, input_lis"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for index in range(len(input_list)):\n        input_list[index].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print 'Sorting each sublist of strings in a given list of lists...'\n    return [[sorted(x) for x in y] for y in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return_list = []\n    for l in input_list:\n        return_list.append(sorted(l))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([val for val in lst if val == True])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([1 for i in lst if i])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if(item == True):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    #return len([i for i in lst if i == True])\n    return sum([1 for i in lst if i == True])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x == True])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for element in lst:\n        if element:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([x == True for x in lst])\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    from collections import Counter\n    print Counter(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if type(test_list) is not list:\n        raise TypeError(\"Expected a list\")\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup = list(test_tup)\n        test_tup.append(test_list[i])\n        test_tup = tuple(test_tup)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_tup, test_list)\n    # print(\"test_tup[0]+test_list[1] = \", test_tup[0]+test_list[1])\n    # test_tup[0].append(test_list[1])\n    # print(\"test_tup = \", test_tup)\n    # return test_tup\n    # return list(map(lambda x, y: x + y, test_tup, test_list))\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \ndef add_tuples(test_list, test_tup):\n    '''\n    Write a function to append the given tuple to the given lists.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if not isinstance(test_list, list):\n        print 'The input list is not a list'\n    elif not isinstance(test_tup, tuple):\n        print 'The input tuple is not a tuple'\n    elif len(test_list)!= len(test_tup):\n        print 'The length of the input lists are not the same'\n    else:\n        result = []\n        for i in range(len(test_list)):\n            result.append(test_list[i]+test_tup[i])\n        return result\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # test_list = [1,2,3]\n    # test_tup = (1,2,3)\n    # tuple_app = (1,2,3,4)\n    # tuple_app = add_lists(test_list, test_tup)\n    # print tuple_app\n    # >> (1, 2, 3, 4)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    # Use heap to merge the list\n    # Since heap is implemented as an array, we need to convert it to an array first\n    heapq.heapify(merged_list)\n    heapq.heappush(merged_list,num1)\n    heapq.heappush(merged_list,num2)\n    heapq.heappush(merged_list,num3)\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #[1,3,5,7,9]\n    #[2,4,6,8,10]\n    #[3,5,8,10]\n    merged_list = []\n    heapq.heappush(merged_list,num1)\n    heapq.heappush(merged_list,num2)\n    heapq.heappush(merged_list,num3)\n    return merged_list\ndef merge_sort(num_list):\n    '''\n    A Merge Sort Algorithm\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    # for i in range(len(num1)):\n    #     merged_list.append(min(num1[i],num2[i],num3[i]))\n    # merged_list = sorted(merged_list)\n    heapq.heappush(merged_list,min(num1,num2,num3))\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    if num1 and num2 and num3:\n        while i<len(num1) and j<len(num2) and k<len(num3):\n            if num1[i]>=num2[j] and num1[i]>=num3[k]:\n                heapq.heappush(num1,num2[j])\n                num2.pop(j)\n                j-=1\n            elif num2[j]>=num3[k]:\n                heapq.heappush(num2,num3[k])\n                num3.pop(k)\n                k-=1\n            else:\n                heapq.heappush(num3,num1[i])\n                num1.pop(i)\n                i-=1\n            i+=1\n            j+=1\n            k+=1\n        if num1:\n            num1.extend(num2)\n            num1.extend(num3)\n        else:\n            num1=num2\n            num1.extend(num3)\n        return num1\n    else:\n        return None\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    num3 = sorted(num3)\n    result = []\n    while num1 or num2 or num3:\n        if not num1:\n            result.extend(num2)\n            num2 = []\n        elif not num2:\n            result.extend(num3)\n            num3 = []\n        elif num1[0] >= num2[0]:\n            result.append(num2.pop(0))\n        elif num2[0] >= num3[0]:\n            result.append(num3.pop(0))\n        elif num1[0] < num2[0]:\n            result.append(num1.pop(0))\n        elif num2[0] < num3[0]:\n            result.append(num2.pop(0))\n            num1 = []\n    return result\ndef merge_sorted_list2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    while num1 or num2 or num3:\n        if not num1:\n            result.extend(num2)\n            num2 = []\n        elif not num2:\n            result.extend(num3)\n            num3 = []\n        elif num1[0] >= num2[0]:\n            result.append(num2.pop(0))\n        elif num2[0] >= num3[0]:\n            result.append(num3.pop(0))\n        elif num1[0] < num2[0]:\n            result.append(num1.pop(0))\n        elif num2[0] < num3[0]:\n            result.append(num2.pop(0))\n            num1 = []\n    return result\ndef max_heap(nums):\n    '''\n    Write a function to build a max heap.\n    '''\n    n = len(nums)\n    for i in range(n-1,-1,-1):\n        heapify(nums,i,n)\n    for i in range(n-1,0,-1):\n        nums[0],nums[i] = nums[i],nums[0]\n        heapify(nums,0,i)\ndef heapify(nums,i,n):\n    '''\n    Implement max heapify\n    '''\n    l = 2*i+1\n    r = 2*i+2\n    largest = i\n    if l < n and nums[l] > nums[largest]:\n        largest = l\n    if r < n and nums[r] > nums[largest]:\n        largest = r\n    if largest!= i:\n        nums[i],nums[largest] = nums[largest],nums[i]\n        heapify(nums,largest,n)\ndef max_heap2(nums):\n    '''\n    Write a function to build a max heap.\n    '''\n    n = len(nums)\n    for i in range(n/2-1,-1,-1):\n        heapify(nums,i,n)\n    for i in range(n-1,0,-1):\n        nums[0],nums[i] = nums[i],nums[0]\n        heapify(nums,0,i)\ndef max_heap3(nums):\n    '''\n    Write a function to build a max heap.\n    '''\n    n = len(nums)\n    for i in range(n/2-1,-1,-1):\n        heapify3(nums,i,n)\n    for i in range(n-1,0,-1):\n        nums[0],nums[i] = nums[i],nums[0]\n        heapify3(nums,0,i)\ndef heapify3(nums,i,n):\n    '''\n    Implement max heapify\n    '''\n    l = 2*i+1\n    r = 2*i+2\n    largest = i\n    if l < n and nums[l] > nums[largest]:\n        largest = l\n    if r < n and nums[r] > nums[largest]:\n        largest = r\n    if largest!= i:\n        nums[i],nums[largest] = nums[largest],nums[i]\n        heapify3(nums,largest,n)\ndef min_heap(nums):\n    '''\n    Write a function to build a min heap.\n    '''\n    n = len(nums)\n    for i in range(n-1,-1,-1):\n        heapify(nums,i,n)\n    for i in range(n-1,0,-1):\n        nums[0],nums[i] = nums[i],nums[0]\n        heapify(nums,0,i)\ndef min_heap2(nums):\n    '''\n    Write a function to build a min heap.\n    '''\n    n = len(nums)\n    for i in range(n/2-1,-1,-1):\n        heapify(nums,i,n)\n    for i in range(n-1,0,-1):\n        nums[0],nums[i] = nums[i],nums[0]\n        heapify(nums,0,i)\ndef min_heap3(nums):\n    '''\n    Write a function to build a min heap.\n    '''\n    n = len(nums)\n    for i in range(n/2-1,-1,-1):\n        heapify3(nums,i,n)\n    for i in range(n-1,0,-1):\n        nums[0],nums[i] = nums[i],nums[0]\n        heapify3(nums,0,i)\ndef heapify3(nums,i,n):\n    '''\n    Implement max heapify\n    '''\n    l = 2*i+1\n    r = 2*i+2\n    smallest = i\n    if l < n and nums[l] < nums[smallest]:\n        smallest = l\n    if r < n and nums[r] < nums[smallest]:\n        smallest = r\n    if smallest!= i:\n        nums[i],nums[smallest] = nums[smallest],nums[i]\n        heapify3(nums,smallest,n)\ndef heap_sort(nums):\n    '''\n    Write a function to sort an array.\n    '''\n    n = len(nums)\n    max_heap(nums)\n    for i in range(n-1,-1,-1):\n        nums[i],nums[0] = nums[0],nums[i]\n        heapify(nums,0,i)\ndef min_heap4(nums):\n    '''\n    Write a function to build a min heap.\n    '''\n    n = len(nums)\n    for i in range(n/2-1,-1,-1):\n        heapify(nums,i,n)\n    for i in range(n-1,0,-1):\n        nums[0],nums[i] = nums[i],nums[0]\n        heapify(nums,0,i)\ndef heapify4(nums,i,n):\n    '''\n    Implement max heapify\n    '''\n    l = 2*i+1\n    r = 2*i+2\n    smallest = i\n    if l < n and nums[l] < nums[smallest]:\n        smallest = l\n    if r < n and nums[r] < nums[smallest]:\n        smallest = r\n    if smallest!= i:\n        nums[i],nums[smallest] = nums[smallest],nums[i]\n        heapify4(nums,smallest,n)\ndef min_heap5(nums):\n    '''\n    Write a function to build a min heap.\n    '''\n    n = len(nums)\n    for i in range("
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    if num1 is None and num2 is None and num3 is None:\n        return merged_list\n    if num1 is None:\n        merged_list = merged_list + num2\n    elif num2 is None:\n        merged_list = merged_list + num1\n    else:\n        merged_list = merged_list + num1 + num2\n    return sorted(merged_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    print num1,num2,num3\n    sorted_list = []\n    heapq.heappush(sorted_list, num1)\n    heapq.heappush(sorted_list, num2)\n    heapq.heappush(sorted_list, num3)\n    for i in range(len(sorted_list)):\n        print heapq.heappop(sorted_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list=[]\n    if num1:\n        merge_list.append(num1[0])\n    if num2:\n        merge_list.extend(num2)\n    if num3:\n        merge_list.extend(num3)\n    return merge_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    arr=[]\n    \n    if num1 is None:\n        arr.extend(num2)\n    elif num2 is None:\n        arr.extend(num1)\n    elif num3 is None:\n        arr.extend(num1)\n        arr.extend(num2)\n    else:\n        arr.extend(num1)\n        arr.extend(num2)\n        arr.extend(num3)\n    \n    return sorted(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    def all_0(s,n):\n        if s=='0'*n:\n            return True\n        else:\n            return False\n    \n    def all_1(s,n):\n        if s=='1'*n:\n            return True\n        else:\n            return False\n    \n    def rotate(s,n):\n        if n==0:\n            return s\n        elif n==1:\n            return s[1:]+s[0]\n        else:\n            return rotate(s[1:],n-1)+s[0]\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    length = len(s)\n    for i in range(n):\n        a = []\n        for j in range(length-1, -1, -1):\n            a.append(s[j])\n        s = ''.join(a)\n    print s\n    return s.count('1')\nprint '''\n1.   We write the function odd_Equivalent(s,n) that takes two parameters, s and n, where s is a binary string and n is an integer.\n2.   The function returns the number of numbers with an odd value when rotating a binary string the given number of times.\n3.   For example, if the binary string is '101011110', n is 2, then the output should be 9.\n4.   We use recursion to solve this problem.\n5.   We can do the following steps:\n   i)  For every bit in the string s, we place that bit in a variable named j, where j is the position of the bit in the string s.\n   ii) From position j to the end of the string, we put the bit in a new variable, b, and then rearrange the string s to put the new bit in position j.\n   iii) If the position of b is even, we increase the count by 1 and continue with the loop.\n   iv) If the position of b is odd, we do not increase the count and continue with the loop.\n   v) We return the count at the end of the loop.\n   vi) Once the loop exits, we return the final count.\n'''\nprint '''\n6.   Now we write an efficient function to count the number of bit-flips in a string of length n.\n7.   If the bit-flip is placed in the first position, the number of bit-flips increases by 1.\n   For example, if the binary string is '101011110', then the bit-flip is in position 0, so the number of bit-flips increases by 1.\n   If the bit-flip is placed in the last position, the number of bit-flips increases by 1.\n   For example, if the binary string is '101011110', then the bit-flip is in position 8, so the number of bit-flips increases by 1.\n   Note that the position of the bit-flip is not the same as the position of the bit.\n8.   The number of bit-flips is calculated by following the procedure above and by placing the bit-flip in each position.\n9.   To find the number of bit-flips, we will use a for-loop to iterate over the string, which loops over the positions of each bit.\n10.  At each position, we will calculate the number of bit-flips and add that number to a variable, nb_flips.\n11.  The function returns the sum of nb_flips.\n'''\ndef bit_flips(s):\n    '''\n    Write a python function to count the number of bit-flips in a string of length n.\n    '''\n    length = len(s)\n    nb_flips = 0\n    for i in range(length):\n        if s[i] == '1':\n            nb_flips += 1\n    return nb_flips\nprint '''\n12.  Now we write an efficient function to calculate the Hamming distance between two binary strings of equal length.\n13.  The Hamming distance is the number of bit positions in which the two binary strings differ.\n14.  In this example, we compare the binary strings '101011110' and '0101010110', which are a distance of 3.\n15.  The Hamming distance is 3.\n16.  The Hamming distance is calculated by following the procedure above.\n17.  We calculate the Hamming distance by following the procedure above.\n18.  To find the Hamming distance, we use the function bit_flips(s, n) to count the number of bit-flips in a string of length n.\n19.  We use a for-loop to iterate over the string, which loops over the positions of each bit.\n20.  At each position, we calculate the number of bit-flips and add that number to a variable, nb_flips.\n21.  The function returns the sum of nb_flips.\n'''\ndef Hamming_distance(s,n):\n    '''\n    Write a python function to calculate the Hamming distance between two binary strings of equal length.\n    '''\n    length = len(s)\n    nb_flips = 0\n    for i in range(length):\n        if s[i]!= '0':\n            nb_flips += 1\n    return nb_flips\nprint '''\n21.  The function returns the Hamming distance between two binary strings of equal length.\n22.  The Hamming distance is the number of bit positions in which the two binary strings differ.\n23.  In this example, we compare the binary strings '101011110' and '0101010110', which are a distance of 3.\n24.  The Hamming distance is 3.\n25.  The Hamming distance is calculated by following the procedure above.\n26.  We calculate the Hamming distance by following the procedure above.\n27.  To find the Hamming distance, we use the function bit_flips(s, n) to count the number of bit-flips in a string of length n.\n28.  We use a for-loop to iterate over the string, which loops over the positions of each bit.\n29.  At each position, we calculate the number of bit-flips and add that number to a variable, nb_flips.\n30.  The function returns the sum of nb_flips.\n'''\nprint '''\nWe now see how we can use recursion to solve the problem.\n'''\ndef complement(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    length = len(s)\n    for i in range(n):\n        a = []\n        for j in range(length-1, -1, -1):\n            a.append(s[j])\n        s = ''.join(a)\n    return s.count('1')\nprint '''\n1.   We write the function complement(s,n) that takes two parameters, s and n, where s is a binary string and n is an integer.\n2.   The function returns the number of numbers with an odd value when rotating a binary string the given number of times.\n3.   For example, if the binary string is '101011110', n is 2, then the output should be 9.\n4.   We use recursion to solve this problem.\n5.   We can do the following steps:\n   i)  For every bit in the string s, we place that bit in a variable named j, where j is the position of the bit in the string s.\n   ii) From position j to the end of the string, we put the bit in a new variable, b, and then rearrange the string s to put the new bit in position j.\n   iii) If the position of b is even, we increase the count by 1 and continue with the loop.\n   iv) If the position of b is odd, we do not increase the count and continue with the loop.\n   v) We return the count at the end of the loop.\n   vi) Once the loop exits, we return the final count.\n'''\ndef complement_2(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    length = len(s)\n    for i in range(n):\n        a = []\n        for j in range(length-1, -1, -1):\n            a.append(s[j])\n        s = ''.join(a)\n    return s.count('1')\nprint '''\n6.   Now we write an efficient function to count the number of bit-flips in a string of length n.\n7.   If the bit-flip is placed in the first position, the number of bit-flips increases by 1.\n   For example, if the binary string is '101011110', then the bit-flip is in position 0, so the number of bit-flips increases by 1.\n   If the bit-flip is placed in the last position, the number of bit-flips increases by 1.\n   For example, if the binary string is '101011110', then the bit-flip is in position 8, so the number of bit-flips increases by 1."
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    c = 0\n    for i in range(n):\n        if int(s[i:],2)%2 == 1:\n            c +=1\n    return c\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(0,len(s)):\n            if (int(s[j]) % 2 == 1):\n                count += 1\n            s = s[-1] + s[0:len(s)-1]\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    assert type(s) == str\n    assert type(n) == int\n    assert n >= 0\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) == 0:\n        return 0\n    if n > len(s):\n        return 0\n    return (1 + odd_Equivalent(s[1:], n) + odd_Equivalent(s[:-1], n))\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_Equivalent=0\n    for i in s:\n        if int(i)%2==1:\n            odd_Equivalent+=1\n    return odd_Equivalent\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    a = list(str(s))\n    b = a[:]\n    for i in range(n):\n        for j in range(len(a)):\n            if a[j]=='0':\n                a[j]='1'\n            elif a[j]=='1':\n                a[j]='0'\n    if a == b:\n        return True\n    else:\n        return False\ndef count_Num(s):\n    '''\n    Write a python function to count the number of 0\u2019s in a given binary string.\n    '''\n    b = list(str(s))\n    return b.count('0')\ndef rotate_Digit(s,n):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    b = list(str(s))\n    a = b[:]\n    c = 0\n    for i in range(n):\n        a.append(a[0])\n        a.pop(0)\n    for i in range(len(b)):\n        if b[i] == a[i]:\n            c = c + 1\n    return c\ndef rotate_Digit_reverse(s,n):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    b = list(str(s))\n    a = b[:]\n    c = 0\n    for i in range(n):\n        a.insert(0,a[-1])\n        a.pop(-1)\n    for i in range(len(b)):\n        if b[i] == a[i]:\n            c = c + 1\n    return c\ndef rotate_Digit_reverse_2(s,n):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    b = list(str(s))\n    a = b[:]\n    c = 0\n    for i in range(n):\n        a.insert(0,a[-1])\n        a.pop(-1)\n    for i in range(len(b)):\n        if b[i] == a[i]:\n            c = c + 1\n    return c\ndef rotate_Digit_reverse_3(s,n):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    b = list(str(s))\n    a = b[:]\n    c = 0\n    for i in range(n):\n        a.append(a[0])\n        a.pop(0)\n    for i in range(len(b)):\n        if b[i] == a[i]:\n            c = c + 1\n    return c\ndef rotate_Digit_reverse_4(s,n):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    b = list(str(s))\n    a = b[:]\n    c = 0\n    for i in range(n):\n        a.insert(0,a[-1])\n        a.pop(-1)\n    for i in range(len(b)):\n        if b[i] == a[i]:\n            c = c + 1\n    return c\ndef rotate_Digit_reverse_5(s,n):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    b = list(str(s))\n    a = b[:]\n    c = 0\n    for i in range(n):\n        a.insert(0,a[-1])\n        a.pop(-1)\n    for i in range(len(b)):\n        if b[i] == a[i]:\n            c = c + 1\n    return c\ndef reverse_Digit(s):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    b = list(str(s))\n    a = b[:]\n    c = 0\n    for i in range(len(b)):\n        if b[i] == a[-(i+1)]:\n            c = c + 1\n    return c\ndef sub_String(s,n):\n    '''\n    Write a python function to find the number of substrings of length n in a string s.\n    '''\n    a = list(str(s))\n    c = 0\n    for i in range(len(a)-n+1):\n        a1 = a[i:i+n]\n        c = c + 1\n    return c\ndef rotate_Digit_reverse_6(s,n):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    b = list(str(s))\n    a = b[:]\n    c = 0\n    for i in range(n):\n        a.insert(0,a[-1])\n        a.pop(-1)\n    for i in range(len(b)):\n        if b[i] == a[i]:\n            c = c + 1\n    return c\ndef rotate_Digit_reverse_7(s,n):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    b = list(str(s))\n    a = b[:]\n    c = 0\n    for i in range(n):\n        a.insert(0,a[-1])\n        a.pop(-1)\n    for i in range(len(b)):\n        if b[i] == a[i]:\n            c = c + 1\n    return c\ndef rotate_Digit_reverse_8(s,n):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    b = list(str(s))\n    a = b[:]\n    c = 0\n    for i in range(n):\n        a.append(a[0])\n        a.pop(0)\n    for i in range(len(b)):\n        if b[i] == a[i]:\n            c = c + 1\n    return c\ndef rotate_Digit_reverse_9(s,n):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    b = list(str(s))\n    a = b[:]\n    c = 0\n    for i in range(n):\n        a.insert(0,a[-1])\n        a.pop(-1)\n    for i in range(len(b)):\n        if b[i] == a[i]:\n            c = c + 1\n    return c\ndef rotate_Digit_reverse_10(s,n):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    b = list(str(s))\n    a = b[:]\n    c = 0\n    for i in range(n):\n        a.append(a[0])\n        a.pop(0)\n    for i in range(len(b)):\n        if b[i] == a[i]:\n            c = c + 1\n    return c\ndef multiply_Digit(a,b):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    return a*b\ndef multiply_Digit_reverse(a,b):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    return a/b\ndef multiply_Digit_reverse_2(a,b):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    return a%b\ndef multiply_Digit_reverse_3(a,b):\n    '''\n    Write a python function to find the number of digits in a number when rotated the given number of times.\n    '''\n    return a/b\ndef multiply_Digit"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #base case\n    if n==0:\n        return 1\n    else:\n        #code here\n        if n%2==0:\n            return 2**(n-1)*odd_Equivalent(s,n-1)\n        else:\n            return 2**(n-1)*(2*odd_Equivalent(s,n-1)-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    bits = bin(s)[2:]\n    numOfBits = len(bits)\n    \n    #pop the first 'n' bits of the string\n    for i in range(n):\n        bits.pop(0)\n    \n    #reverse the bits\n    bits.reverse()\n    \n    #return the number of bits in the string\n    return numOfBits\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    ans = set(nestedlist[0])\n    for item in nestedlist[1:]:\n        ans &= set(item)\n    return list(ans)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not isinstance(nestedlist, list):\n        return None\n    \n    results = set()\n    for nestedlist_item in nestedlist:\n        if not isinstance(nestedlist_item, list):\n            continue\n        for element in nestedlist_item:\n            if element in results:\n                break\n            results.add(element)\n    return list(results)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return_list = []\n    #print nestedlist\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in return_list:\n                return_list.append(item)\n    return return_list\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                continue\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    comon_list = []\n    for item in nestedlist:\n        if item not in comon_list:\n            comon_list.append(item)\n    return comon_list\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    lst = []\n    for l in nestedlist:\n        for m in lst:\n            if m in l:\n                lst.append(m)\n    lst.sort()\n    return lst\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not isinstance(nestedlist, list) or len(nestedlist) == 0:\n        return False\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    return [i for i in nestedlist[0] if i in nestedlist[1]]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    first = nestedlist[0]\n    second = nestedlist[1]\n    first_return = common_in_nested_lists(first)\n    second_return = common_in_nested_lists(second)\n    result = []\n    for x in first_return:\n        for y in second_return:\n            if x == y:\n                result.append(x)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    count=0\n    for i in nestedlist:\n        for j in nestedlist:\n            if i==j:\n                count=count+1\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for sublist in nestedlist:\n        for element in sublist:\n            if element in result:\n                pass\n            else:\n                result.append(element)\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Check if the text represents an integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(len(lst) == 0 for lst in list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True\n    \ndef is_int(s):\n    '''\n    Write a function to check if a string is an integer or not.\n    '''\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n    \ndef change_case(str1):\n    '''\n    Write a function to change case of a string.\n    '''\n    return str1.lower()\n    \ndef first_letter(str1):\n    '''\n    Write a function to return the first letter of a string.\n    '''\n    return str1[0]\n    \ndef test_first_letter():\n    '''\n    Write a function to check if first letter of a string is a digit or not.\n    '''\n    assert first_letter(\"a\") == \"a\"\n    assert first_letter(\"Hello\") == \"H\"\n    assert first_letter(\"!@#\") == \"!\"\n    assert first_letter(\"1\") == \"1\"\n    assert first_letter(\"a1\") == \"a\"\n    assert first_letter(\"123\") == \"1\"\n    assert first_letter(\"0\") == \"0\"\n    assert first_letter(\"a0\") == \"a\"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"#@\") == \" \"\n    assert first_letter(\"!@#$%^&*()\") == \" \"\n    assert first_letter(\"a \") == \"a\"\n    assert first_letter(\"\") == \"\"\n    assert first_letter(\"!@#$%^&*()\") == \" \"\n    assert first_letter(\"  !@#$%^&*()\") == \" \"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"   123\") == \" \"\n    assert first_letter(\"   \") == \" \"\n    assert first_letter(\"  !\") == \"!\"\n    assert first_letter(\"  !\") == \"!\"\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if not isinstance(x, dict):\n            return False\n        if x:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary)!= 0:\n            return False\n    return True\n    \ndef merge_dictionary(list1):\n    '''\n    Merge dictionaries without modifying the original dictionaries.\n    '''\n    for dictionary in list1:\n        for key in dictionary:\n            if key in list1[0]:\n                list1[0][key] += dictionary[key]\n            else:\n                list1[0][key] = dictionary[key]\n    return list1[0]\n    \ndef merge_dictionaries(list1):\n    '''\n    Merge dictionaries without modifying the original dictionaries.\n    '''\n    for dictionary in list1:\n        list1[0].update(dictionary)\n    return list1[0]\n    \ndef merge_dictionaries_with_loop(list1):\n    '''\n    Merge dictionaries without modifying the original dictionaries.\n    '''\n    dictionary = list1[0]\n    for i in range(1, len(list1)):\n        dictionary.update(list1[i])\n    return dictionary\n    \ndef merge_dictionaries_with_zip(list1):\n    '''\n    Merge dictionaries without modifying the original dictionaries.\n    '''\n    dictionary = {}\n    for i in range(len(list1)):\n        dictionary.update(list1[i])\n    return dictionary\n    \ndef merge_dictionaries_with_chain(list1):\n    '''\n    Merge dictionaries without modifying the original dictionaries.\n    '''\n    dictionary = list1[0]\n    for i in range(1, len(list1)):\n        dictionary = dictionary.merge(list1[i])\n    return dictionary\n    \ndef dict_from_list(list1):\n    '''\n    Convert a list of dictionaries to a single dictionary.\n    '''\n    dictionary = {}\n    for dictionary in list1:\n        dictionary.update(dictionary)\n    return dictionary\n    \ndef dict_from_list_with_id(list1):\n    '''\n    Convert a list of dictionaries to a single dictionary.\n    '''\n    dictionary = {}\n    for dictionary in list1:\n        dictionary['id'] = dictionary['id']\n        del dictionary['id']\n    return dictionary\n    \ndef dict_from_list_with_condition(list1):\n    '''\n    Convert a list of dictionaries to a single dictionary.\n    '''\n    dictionary = {}\n    for dictionary in list1:\n        dictionary['id'] = dictionary['id']\n        del dictionary['id']\n        if dictionary['id'] in dictionary:\n            dictionary[dictionary['id']] += dictionary['weight']\n        else:\n            dictionary[dictionary['id']] = dictionary['weight']\n    return dictionary\n    \ndef dict_from_list_with_condition_and_id(list1):\n    '''\n    Convert a list of dictionaries to a single dictionary.\n    '''\n    dictionary = {}\n    for dictionary in list1:\n        dictionary['id'] = dictionary['id']\n        del dictionary['id']\n        if dictionary['id'] in dictionary:\n            dictionary[dictionary['id']] += dictionary['weight']\n        else:\n            dictionary[dictionary['id']] = dictionary['weight']\n    return dictionary\n    \ndef dict_from_list_with_key(list1):\n    '''\n    Convert a list of dictionaries to a single dictionary.\n    '''\n    dictionary = {}\n    for dictionary in list1:\n        dictionary['id'] = dictionary['id']\n        del dictionary['id']\n        if dictionary['id'] in dictionary:\n            dictionary[dictionary['id']].append(dictionary['weight'])\n        else:\n            dictionary[dictionary['id']] = [dictionary['weight']]\n    return dictionary\n    \ndef dict_from_list_with_key_and_id(list1):\n    '''\n    Convert a list of dictionaries to a single dictionary.\n    '''\n    dictionary = {}\n    for dictionary in list1:\n        dictionary['id'] = dictionary['id']\n        del dictionary['id']\n        if dictionary['id'] in dictionary:\n            dictionary[dictionary['id']].append(dictionary['weight'])\n        else:\n            dictionary[dictionary['id']] = [dictionary['weight']]\n    return dictionary\n    \ndef dict_from_list_with_key_and_id_and_condition(list1):\n    '''\n    Convert a list of dictionaries to a single dictionary.\n    '''\n    dictionary = {}\n    for dictionary in list1:\n        dictionary['id'] = dictionary['id']\n        del dictionary['id']\n        if dictionary['id'] in dictionary:\n            dictionary[dictionary['id']].append(dictionary['weight'])\n        else:\n            dictionary[dictionary['id']] = [dictionary['weight']]\n    return dictionary\n    \ndef dict_from_list_with_key_and_id_and_condition_and_weight(list1):\n    '''\n    Convert a list of dictionaries to a single dictionary.\n    '''\n    dictionary = {}\n    for dictionary in list1:\n        dictionary['id'] = dictionary['id']\n        del dictionary['id']\n        if dictionary['id'] in dictionary:\n            dictionary[dictionary['id']].append(dictionary['weight'])\n        else:\n            dictionary[dictionary['id']] = [dictionary['weight']]\n    return dictionary\n    \ndef dict_from_list_with_key_and_id_and_condition_and_weight_and_id(list1):\n    '''\n    Convert a list of dictionaries to a single dictionary.\n    '''\n    dictionary = {}\n    for dictionary in list1:\n        dictionary['id'] = dictionary['id']\n        del dictionary['id']\n        if dictionary['id'] in dictionary:\n            dictionary[dictionary['id']].append(dictionary['weight'])\n        else:\n            dictionary[dictionary['id']] = [dictionary['weight']]\n    return dictionary\n    \ndef dict_from_list_with_key_and_id_and_condition_and_weight_and_id_and_key(list1):\n    '''\n    Convert a list of dictionaries to a single dictionary.\n    '''\n    dictionary = {}\n    for dictionary in list1:\n        dictionary['id'] = dictionary['id']\n        del dictionary['id']\n        if dictionary['id'] in dictionary:\n            dictionary[dictionary['id']].append(dictionary['weight'])\n        else:\n            dictionary[dictionary['id']] = [dictionary['weight']]\n    return dictionary\n    \ndef dict_from_list_with_key_and_id_and_condition_and_weight_and_id_and_key_and_id(list1):\n    '''\n    Convert a list of dictionaries to a single dictionary.\n    '''\n    dictionary = {}\n    for dictionary in list1:\n        dictionary['id'] = dictionary['id']\n        del dictionary['id']\n        if dictionary['id'] in dictionary:\n            dictionary[dictionary['id']].append(dictionary['weight'])\n        else:\n            dictionary[dictionary['id']] = [dictionary['weight']]\n    return dictionary\n    \ndef dict_from_list_with_key_and_id_and_condition_and_weight_and_id_and_key_and_id_and_key(list1):\n    '''\n    Convert a list of dictionaries to a single dictionary.\n    '''\n    dictionary = {}\n    for dictionary in list1:\n        dictionary['id'] = dictionary['id']\n        del dictionary['id']\n        if dictionary['id'] in dictionary:\n            dictionary[dictionary['id']].append(dictionary['weight'])\n        else:\n            dictionary[dictionary['id']] = [dictionary['weight']]\n    return dictionary\n    \ndef dict_from_list_with_key_and_id_and_condition_and_weight_and_id_and_key_and_id_and_key_and_id(list1):\n    '''\n    Convert a list of dictionaries to a single dictionary.\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n    \ndef last_word(string):\n    '''\n    Write a function to get the last word of a string.\n    '''\n    return string.split(' ')[-1]\n    \ndef compare_strings(str1, str2):\n    '''\n    Write a function to check if a string is lexicographically smaller than another string.\n    '''\n    for i in range(min(len(str1), len(str2))):\n        if str1[i] < str2[i]:\n            return True\n        if str1[i] > str2[i]:\n            return False\n    return len(str1) < len(str2)\n    \ndef order(sentence):\n    '''\n    Write a function to check if a sentence is in lexicographic order or not.\n    '''\n    words = sentence.split(' ')\n    for i in range(1, len(words)):\n        if compare_strings(words[i - 1], words[i]):\n            return False\n    return True\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef palindrome_permutation(string):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    temp = {}\n    for i in string:\n        if i in temp:\n            temp[i] += 1\n        else:\n            temp[i] = 1\n    flag = 0\n    for i in temp:\n        if temp[i] % 2!= 0:\n            flag = 1\n            break\n    return not flag\n    \ndef find_missing_number(list1, list2):\n    '''\n    Write a function to find the missing number in a given list of numbers\n    where each number is present in a separate list.\n    '''\n    for i in list1:\n        if i not in list2:\n            return i\n    return None\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\n    \ndef permute(list1, list2):\n    '''\n    Write a function to permute two strings.\n    '''\n    permuted = []\n    if len(list1)!= len(list2):\n        return []\n    for i in list1:\n        for j in list2:\n            temp = i + j\n            permuted.append(temp)\n    return permuted\n    \ndef check_anagram(string1, string2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    temp = {}\n    for i in string1:\n        if i in temp:\n            temp[i] += 1\n        else:\n            temp[i] = 1\n    for i in string2:\n        if i in temp:\n            temp[i] -= 1\n        else:\n            return False\n    for i in temp:\n        if temp[i]!= 0:\n            return False\n    return True\n    \ndef anagram(string1, string2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    temp = {}\n    for i in string1:\n        if i in temp:\n            temp[i] += 1\n        else:\n            temp[i] = 1\n    for i in string2:\n        if i in temp:\n            temp[i] -= 1\n        else:\n            return False\n    for i in temp:\n        if temp[i]!= 0:\n            return False\n    return True\n    \ndef top_scores(scores, number):\n    '''\n    Write a function to find the top three scores from a list of scores.\n    '''\n    scores.sort(reverse = True)\n    return scores[:number]\n    \ndef same_frequency(num1, num2):\n    '''\n    Write a function to check if two numbers are at the same frequency.\n    '''\n    num1 = str(num1)\n    num2 = str(num2)\n    temp = {}\n    for i in num1:\n        if i in temp:\n            temp[i] += 1\n        else:\n            temp[i] = 1\n    for i in num2:\n        if i in temp:\n            temp[i] -= 1\n        else:\n            return False\n    for i in temp:\n        if temp[i]!= 0:\n            return False\n    return True\n    \ndef is_member(list1, string):\n    '''\n    Write a function that checks if a string is a member of a list.\n    '''\n    return string in list1\n    \ndef rotate_left3(num1, num2):\n    '''\n    Write a function to rotate a list left by 3.\n    '''\n    return (num1 << 3) | (num2 << 2) | (num2 >> 2)\n    \ndef generate_hash(string, hash_size):\n    '''\n    Write a function to generate hash value for a string.\n    '''\n    temp = 0\n    for i in range(len(string)):\n        temp += ord(string[i])\n    return temp % hash_size\n    \ndef int_hash(string, hash_size):\n    '''\n    Write a function to generate hash value for a string.\n    '''\n    temp = 0\n    for i in string:\n        temp += ord(i)\n    return temp % hash_size\n    \ndef hash_function(string, hash_size):\n    '''\n    Write a function to generate hash value for a string.\n    '''\n    temp = 0\n    for i in string:\n        temp += ord(i)\n    return temp % hash_size\n    \ndef generate_hash(string, hash_size):\n    '''\n    Write a function to generate hash value for a string.\n    '''\n    temp = 0\n    for i in string:\n        temp += ord(i)\n    return temp % hash_size\n    \ndef check_permutation(string1, string2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    temp = {}\n    for i in string1:\n        if i in temp:\n            temp[i] += 1\n        else:\n            temp[i] = 1\n    for i in string2:\n        if i in temp:\n            temp[i] -= 1\n        else:\n            return False\n    for i in temp:\n        if temp[i]!= 0:\n            return False\n    return True\n    \ndef sorted_merge(list1, list2):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            i += 1\n        elif list1[i] > list2[j]:\n            j += 1\n        else:\n            list1.insert(i, list2[j])\n            i += 1\n            j += 1\n    return list1\n    \ndef power(base, exp):\n    '''\n    Write a function that takes two arguments and returns the value of base to the power of exp.\n    '''\n    return base ** exp\n    \ndef string_to_digit(num):\n    '''\n    Write a function that takes a string as input argument and returns the numeric equivalent.\n    '''\n    return int(num)\n    \ndef digit_to_string(num):\n    '''\n    Write a function that takes a number as input argument and returns the string equivalent.\n    '''\n    return str(num)\n    \ndef alternate_sort(list1):\n    '''\n    Write a function to sort a list alternate the position of the elements.\n    '''\n    for i in range(len(list1) - 1):\n        for j in range(len(list1) - 1 - i):\n            if list"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    elif isinstance(list1[0], dict):\n        return empty_dit(list1[1:])\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i) == True:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all([len(i) == 0 for i in list1]):\n        return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not bool(i):\n            return True\n    return False\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    n = len(nums)\n    total = 0\n    for i in range(n):\n        total = total + nums[i]*10**(n-1)\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(num) for num in nums]))\n    \ndef int_to_tuple(num):\n    '''\n    Write a function to convert a single integer into a tuple of positive integers.\n    '''\n    n = len(str(num))\n    return tuple([int(num // (10**i)) % 10 for i in range(n)])\n    \ndef fibonacci_number(num):\n    '''\n    Write a function to calculate the nth Fibonacci number, where n is greater than or equal to 1.\n    '''\n    if num <= 1:\n        return num\n    else:\n        return fibonacci_number(num - 1) + fibonacci_number(num - 2)\n        \ndef fibonacci_sequence(num):\n    '''\n    Write a function to generate the nth Fibonacci sequence, where n is greater than or equal to 1.\n    '''\n    if num <= 1:\n        return [1]\n    else:\n        fibs = [1, 1]\n        while len(fibs) < num:\n            fibs.append(fibs[-1] + fibs[-2])\n        return fibs\n    \ndef long_paths(tree, n):\n    '''\n    Given a binary tree, return the number of paths in the tree that \n    go from the root to a leaf that sum to n.\n    '''\n    if not tree:\n        return 0\n    if tree.val == n:\n        return 1 + long_paths(tree.left, n) + long_paths(tree.right, n)\n    return long_paths(tree.left, n) + long_paths(tree.right, n)\n    \ndef vertical_traversal(tree):\n    '''\n    Given a binary tree, return the vertical order traversal of its nodes' values.\n    '''\n    if not tree:\n        return []\n    queue = [(tree, 0)]\n    result = []\n    while queue:\n        node, index = queue.pop(0)\n        if len(result) <= index:\n            result.append([])\n        result[index].append(node.val)\n        if node.left:\n            queue.append((node.left, index - 1))\n        if node.right:\n            queue.append((node.right, index + 1))\n    return result\n    \ndef preorder_traversal(tree):\n    '''\n    Write a function that takes in a tree and outputs a list of the \n    nodes in the tree using the pre-order traversal method.\n    '''\n    if not tree:\n        return []\n    result = []\n    def traverse(node):\n        if node:\n            result.append(node.val)\n            traverse(node.left)\n            traverse(node.right)\n    traverse(tree)\n    return result\n    \ndef postorder_traversal(tree):\n    '''\n    Write a function that takes in a tree and outputs a list of the \n    nodes in the tree using the post-order traversal method.\n    '''\n    if not tree:\n        return []\n    result = []\n    def traverse(node):\n        if node:\n            traverse(node.left)\n            traverse(node.right)\n            result.append(node.val)\n    traverse(tree)\n    return result\n    \ndef inorder_traversal(tree):\n    '''\n    Write a function that takes in a tree and outputs a list of the \n    nodes in the tree using the in-order traversal method.\n    '''\n    if not tree:\n        return []\n    result = []\n    def traverse(node):\n        if node:\n            traverse(node.left)\n            result.append(node.val)\n            traverse(node.right)\n    traverse(tree)\n    return result\n    \ndef tree_sum(tree):\n    '''\n    Write a function that takes in a Binary Tree and returns the sum \n    of all of the nodes in the tree.\n    '''\n    if not tree:\n        return 0\n    return tree.val + tree_sum(tree.left) + tree_sum(tree.right)\n    \ndef is_subtree(tree, sub_tree):\n    '''\n    Write a function that takes in two Binary Trees and returns true\n    if one is a subtree of the other.\n    '''\n    if not tree and not sub_tree:\n        return True\n    if tree and sub_tree:\n        return tree_sum(tree) == tree_sum(sub_tree) and is_subtree(tree.left, sub_tree.left) and is_subtree(tree.right, sub_tree.right)\n    else:\n        return False\n        \ndef find_path(tree, sums):\n    '''\n    Write a function that takes in a Binary Tree and a list of sums. \n    The function should return a list of lists where each list is a path \n    (list of nodes) in the tree that sum to the corresponding value in sums.\n    '''\n    if not tree:\n        return []\n    if not sums:\n        return []\n    if tree.val == sums[0]:\n        return [[tree.val]]\n    left_paths = find_path(tree.left, sums)\n    right_paths = find_path(tree.right, sums)\n    result = []\n    for path in left_paths + right_paths:\n        result.append([tree.val] + path)\n    return result\n    \ndef find_duplicates(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list\n    of all the unique numbers in the list.\n    '''\n    result = []\n    for num in nums:\n        if nums.count(num) > 1 and num not in result:\n            result.append(num)\n    return result\n    \ndef find_permutations(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list\n    of all the possible permutations (without duplicates) of these numbers.\n    '''\n    result = [[]]\n    for num in nums:\n        new_result = []\n        for permutation in result:\n            for i in range(len(permutation) + 1):\n                new_result.append(permutation[:i] + [num] + permutation[i:])\n        result = new_result\n    return result\n    \ndef is_valid_sequence(sequence):\n    '''\n    Write a function that takes in a list of non-negative integers and \n    returns true if the sequence is valid, and false if it's not. A sequence \n    is valid if:\n    - The numbers in the sequence are in increasing order and \n      if a number is followed by a number that is less than or equal to \n      its previous number, the previous number is not greater than the number\n      in its current position. For example: [1, 2, 3, 4] is valid because 1 \n      occurs before 2, 3 occurs before 4, and 4 is not greater than 1.\n    '''\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i + 1]:\n            return False\n    return True\n    \ndef almost_sorted(sequence):\n    '''\n    Write a function that takes in a list of non-negative integers and \n    returns true if the list is almost sorted and false otherwise. A list \n    is almost sorted if:\n    - All of its elements are in increasing order, or\n    - All of its elements are in decreasing order, or\n    - The list is empty.\n    - If a list with two or more elements is almost sorted, the middle \n      element is greater than the sum of the other two elements.\n    '''\n    if not sequence:\n        return True\n    if sequence[0] < sequence[-1]:\n        return True\n    for i in range(1, len(sequence)):\n        if sequence[i] < sequence[i - 1]:\n            return False\n    if sequence[-1] < sum(sequence[:-1]):\n        return False\n    return True\n    \ndef is_balanced(tree):\n    '''\n    Write a function that takes in a tree and returns true if it is balanced, \n    and false otherwise. A tree is balanced if:\n    - It is empty, or\n    - It has the sam"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    l = len(nums)\n    r = 0\n    for i in range(0, l):\n        r += nums[i]*(2**(l-i-1))\n    return r\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total = total*10 + num\n    return total\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    tuple_sum = 0\n    for i in nums:\n        tuple_sum += i\n    return tuple_sum\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = sorted(nums)\n    return int(\"\".join(str(n) for n in nums))\n    \ndef find_pairs(nums, target):\n    '''\n    Find the first pair of two integers that sum to the target number.\n    '''\n    nums_set = set(nums)\n    for i in xrange(len(nums)):\n        for j in xrange(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return None\n    \ndef count_pairs(nums, target):\n    '''\n    Write a function to count the number of pairs of integers in a given array whose sum is equal to a given number.\n    '''\n    nums_set = set(nums)\n    count = 0\n    for i in xrange(len(nums)):\n        for j in xrange(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(num) for num in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    out = 0\n    for num in nums:\n        out *= 10\n        out += num\n    return out\n    \nprint(tuple_to_int((1,2,3)))\nprint(tuple_to_int((0,0)))\nprint(tuple_to_int((2,3)))\nprint(tuple_to_int((0,0,0)))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for i in nums:\n        res = res*10 + i\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # return reduce(lambda x,y: x*10+y, nums)\n    return int(''.join(str(x) for x in nums))\n    "
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = [float(x) for x in test_list[i]]\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for a in test_list:\n        for i in range(len(a)):\n            try:\n                a[i] = float(a[i])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # TODO: Write function here\n    float_list = []\n    for item in test_list:\n        try:\n            float_list.append(float(item))\n        except:\n            float_list.append(item)\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(list(map(float, i)))\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], float):\n                pass\n            elif isinstance(test_list[i][j], int):\n                test_list[i][j] = float(test_list[i][j])\n            elif isinstance(test_list[i][j], str):\n                test_list[i][j] = float(test_list[i][j])\n            else:\n                raise ValueError(\"List element is not convertible to float\")\n    \n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_float = []\n    for row in test_list:\n        new_row = []\n        for elem in row:\n            try:\n                new_row.append(float(elem))\n            except:\n                new_row.append(0)\n        test_list_float.append(new_row)\n    return test_list_float\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(i) for i in j] for j in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index, item in enumerate(test_list):\n        try:\n            test_list[index] = float(item)\n        except ValueError:\n            continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    def convert(list_item):\n        if type(list_item) is list:\n            for i in range(len(list_item)):\n                convert(list_item[i])\n        else:\n            try:\n                return float(list_item)\n            except ValueError:\n                return list_item\n    for i in range(len(test_list)):\n        convert(test_list[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(value) for value in test_list_element] for test_list_element in test_list]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string == '':\n        return []\n    else:\n        return [string] + string_to_list(string[1:])\n        \ndef string_to_int(string):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    if string == '':\n        return 0\n    else:\n        return int(string) + string_to_int(string[1:])\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.strip()\n    return string.split(' ')\n    \n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def search_helper(arr, num):\n        '''\n        Helper function to search helper function\n        '''\n        if len(arr) == 1:\n            if arr[0] == num:\n                return True\n            else:\n                return False\n        else:\n            index = int(len(arr)/2)\n            if arr[index] == num:\n                return True\n            elif arr[index] > num:\n                return search_helper(arr[:index], num)\n            else:\n                return search_helper(arr[index:], num)\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 1\n    for i in xrange(1,len(arr)):\n        if arr[i]!= arr[i-1]:\n            return arr[i-1]\n    return arr[-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        mid = (low+high)/2\n        if mid>0 and arr[mid-1] == arr[mid]:\n            mid = mid-1\n        if mid<len(arr)-1 and arr[mid+1] == arr[mid]:\n            mid = mid+1\n        if mid<len(arr)-1 and arr[mid] == arr[mid+1]:\n            mid = mid+1\n        if mid>0 and arr[mid] == arr[mid-1]:\n            mid = mid-1\n        if arr[mid]!= arr[high]:\n            low = mid+1\n        else:\n            high = mid\n    return arr[low]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 1\n    while i < len(arr):\n        if arr[i] == arr[i-1]:\n            i+=1\n        else:\n            break\n    return arr[i]\n    \ndef count_sort(arr):\n    '''\n    Write a python function to sort the array according to the frequency of the elements\n    '''\n    size = len(arr)\n    dic = {}\n    for ele in arr:\n        if ele in dic:\n            dic[ele] += 1\n        else:\n            dic[ele] = 1\n    sort_arr = []\n    for ele in dic:\n        if dic[ele] == 1:\n            sort_arr.append(ele)\n    return sort_arr\n    \ndef check_permutation(str1, str2):\n    '''\n    Write a python function to check if two strings are permutations of each other\n    '''\n    if len(str1)!= len(str2):\n        return False\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            return False\n    return True\n    \ndef longest_common_substring(str1, str2):\n    '''\n    Write a python function to find the longest common substring of two strings\n    '''\n    if len(str1) == 0 or len(str2) == 0:\n        return \"\"\n    if str1[-1] == str2[-1]:\n        return str1[-1] + longest_common_substring(str1[:-1], str2[:-1])\n    if str1[-1]!= str2[-1]:\n        return max(longest_common_substring(str1[:-1], str2), longest_common_substring(str1, str2[:-1]))\n    \ndef is_palindrome(arr):\n    '''\n    Write a python function to check if an array is a palindrome\n    '''\n    return arr == arr[::-1]\n    \ndef reverse_string(arr):\n    '''\n    Write a python function to reverse a string\n    '''\n    if len(arr) == 0:\n        return \"\"\n    return reverse_string(arr[:-1]) + arr[-1]\n    \ndef is_palindrome_string(str):\n    '''\n    Write a python function to check if a string is a palindrome\n    '''\n    return str == str[::-1]\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check if two strings are anagrams of each other\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            return False\n    return True\n    \ndef k_largest_elements(arr, k):\n    '''\n    Write a python function to find the k largest elements in an array\n    '''\n    arr.sort()\n    return arr[-k:]\n    \ndef smallest_divisor(a, b):\n    '''\n    Write a python function to find the smallest divisor of two numbers\n    '''\n    if a == b:\n        return a\n    if a < b:\n        return a\n    else:\n        return b\n    \ndef count_bits(num):\n    '''\n    Write a python function to count the number of bits set in a number\n    '''\n    if num == 0:\n        return 1\n    bit = 0\n    while num:\n        num &= (num-1)\n        bit+=1\n    return bit\n    \ndef is_perfect_square(n):\n    '''\n    Write a python function to check if a number is perfect square\n    '''\n    if n == 0:\n        return True\n    return n == int(n**0.5) ** 2\n    \ndef is_perfect_square_list(arr):\n    '''\n    Write a python function to check if an array of numbers is perfect square\n    '''\n    for i in range(len(arr)):\n        if not is_perfect_square(arr[i]):\n            return False\n    return True\n    \ndef gcd(a, b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers\n    '''\n    if b == 0:\n        return a\n    return gcd(b, a%b)\n    \ndef lcm(a, b):\n    '''\n    Write a python function to find the least common multiple of two numbers\n    '''\n    return a * b / gcd(a, b)\n    \ndef array_diff(arr1, arr2):\n    '''\n    Write a python function to find the differences between two arrays\n    '''\n    arr3 = []\n    for i in arr1:\n        if i not in arr2:\n            arr3.append(i)\n    for i in arr2:\n        if i not in arr1:\n            arr3.append(i)\n    return arr3\n    \ndef find_rotations(str):\n    '''\n    Write a python function to find all the possible rotations of a string\n    '''\n    if len(str) == 0 or len(str) == 1:\n        return [str]\n    rotated_str = str[-1] + find_rotations(str[:-1])\n    return rotated_str\n    \ndef k_smallest_elements(arr, k):\n    '''\n    Write a python function to find the k smallest elements in an array\n    '''\n    arr.sort()\n    return arr[:k]\n    \ndef right_rotate(arr, n):\n    '''\n    Write a python function to rotate an array by d elements\n    '''\n    return arr[n:] + arr[:n]\n    \ndef is_rotation(str1, str2):\n    '''\n    Write a python function to check if two strings are rotations of each other\n    '''\n    if len(str1)!= len(str2):\n        return False\n    return right_rotate(str1, len(str1)) == str2\n    \ndef is_anagram_dict(str1, str2):\n    '''\n    Write a python function to check if two strings are anagrams of each other\n    '''\n    if len(str1)!= len(str2):\n        return False\n    dic = {}\n    for i in str1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for i in str2:\n        if i in dic:\n            dic[i] -= 1\n        else:\n            dic[i] = 1\n    for val in dic.values():\n        if val!= 0:\n            return False\n    return True\n    \ndef max_alternating_signs(arr):\n    '''\n    Write a python function to find the maximum number of alternating sign changes\n    in an array of 0s and 1s\n    '''\n    if len(arr) == 1:\n        return 1\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            count += 1\n    return count\n    \ndef is_monotonic(arr):\n    '''\n    Write a python function to check if an array is monotonic\n    '''\n    if len(arr) == 1:\n        return True\n    is_dec = arr[1] > arr[0]\n    for i in range(2, len(arr)):\n        if is_dec:\n            if arr[i] < arr[i-1]:\n                return False\n        else:\n            if arr[i] > arr[i-1]:\n                return False\n    return True\n    \ndef reverse_an_array(arr):\n    '''\n    Write a python function to reverse an array\n    '''\n    for i in range(len(arr) // 2):\n        temp = arr[i]\n        arr[i] = arr[len(arr) - 1 - i]\n        arr[len(arr) - 1 - i] = temp\n    return arr\n    \ndef is_subset(arr1, arr2):\n    '''\n    Write a python function to check if "
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in xrange(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    length = len(arr)\n    if length == 0:\n        return -1\n    if length == 1:\n        return arr[0]\n    if arr[0]!= arr[1]:\n        return arr[0]\n    if arr[-1]!= arr[-2]:\n        return arr[-1]\n    left = 1\n    right = length - 2\n    while left <= right:\n        mid = left + (right - left) / 2\n        if arr[mid]!= arr[mid-1] and arr[mid]!= arr[mid+1]:\n            return arr[mid]\n        elif arr[mid]!= arr[mid-1]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n    return arr[len(arr)-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    small = 0\n    big = len(arr) - 1\n    while small < big:\n        mid = (small + big) // 2\n        if mid == small or mid == big:\n            return arr[mid]\n        if arr[mid] == arr[small] and arr[mid] == arr[big]:\n            small += 1\n            big -= 1\n        elif arr[mid] == arr[small]:\n            big = mid - 1\n        else:\n            small = mid + 1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return -1\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        if arr[0] == arr[1]:\n            return search(arr[1:])\n        else:\n            return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    while i < len(arr):\n        if arr[i] == arr[i+1]:\n            i = i+2\n        else:\n            return arr[i]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for x,y in list1:\n        temp = x*y\n        if temp > max_product:\n            max_product = temp\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[i][0]*list1[i][1])\n    return max(list2)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    m = max(list1)\n    a = max(max(item) for item in list1)\n    b = min(min(item) for item in list1)\n    return a*b\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product = list1[i][0]*list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    import itertools\n    return max(itertools.starmap(abs, list(zip(*list1))))\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if (list1[i][0]*list1[j][0])>prod:\n                prod = list1[i][0]*list1[j][0]\n    return prod\n    \ndef max_product_set(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            temp_prod = max_product_tuple(list1[i:j+1])\n            if temp_prod>max_prod:\n                max_prod = temp_prod\n    return max_prod\n    \ndef min_product_tuple(list1):\n    '''\n    Write a function to find the minimum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if (list1[i][0]*list1[j][0])<prod:\n                prod = list1[i][0]*list1[j][0]\n    return prod\n    \ndef min_product_set(list1):\n    '''\n    Write a function to find the minimum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    min_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            temp_prod = min_product_tuple(list1[i:j+1])\n            if temp_prod<min_prod:\n                min_prod = temp_prod\n    return min_prod\n    \ndef max_product_triplet(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in triplets of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                if (list1[i][0]*list1[j][0]*list1[k][0])>max_prod:\n                    max_prod = list1[i][0]*list1[j][0]*list1[k][0]\n    return max_prod\n    \ndef min_product_triplet(list1):\n    '''\n    Write a function to find the minimum absolute product between numbers in triplets of tuples within a given list.\n    '''\n    min_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                if (list1[i][0]*list1[j][0]*list1[k][0])<min_prod:\n                    min_prod = list1[i][0]*list1[j][0]*list1[k][0]\n    return min_prod\n    \ndef max_product_quadruplet(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in quadruplets of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                for l in range(k+1,len(list1)):\n                    if (list1[i][0]*list1[j][0]*list1[k][0]*list1[l][0])>max_prod:\n                        max_prod = list1[i][0]*list1[j][0]*list1[k][0]*list1[l][0]\n    return max_prod\n    \ndef min_product_quadruplet(list1):\n    '''\n    Write a function to find the minimum absolute product between numbers in quadruplets of tuples within a given list.\n    '''\n    min_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                for l in range(k+1,len(list1)):\n                    if (list1[i][0]*list1[j][0]*list1[k][0]*list1[l][0])<min_prod:\n                        min_prod = list1[i][0]*list1[j][0]*list1[k][0]*list1[l][0]\n    return min_prod\n    \ndef permutations(list1):\n    '''\n    Write a function to find all the permutations of the given list.\n    '''\n    from itertools import permutations\n    temp_list = list1[:]\n    res_list = [list(i) for i in permutations(temp_list)]\n    return res_list\n    \ndef combinations(list1):\n    '''\n    Write a function to find all the combinations of the given list.\n    '''\n    from itertools import combinations\n    temp_list = list1[:]\n    res_list = [list(i) for i in combinations(temp_list,2)]\n    return res_list\n    \ndef subsets(list1):\n    '''\n    Write a function to find all the subsets of the given list.\n    '''\n    from itertools import combinations\n    temp_list = list1[:]\n    res_list = [list(i) for i in combinations(temp_list,len(list1))]\n    return res_list\n    \ndef all_subsets(list1):\n    '''\n    Write a function to find all the subsets of the given list.\n    '''\n    from itertools import combinations\n    temp_list = list1[:]\n    res_list = [list(i) for i in combinations(temp_list,len(list1))]\n    return res_list\n    \ndef is_subset(list1,list2):\n    '''\n    Write a function to find if list2 is a subset of list1.\n    '''\n    for i in range(len(list2)):\n        if list2[i] not in list1:\n            return False\n    return True\n    \ndef intersection(list1,list2):\n    '''\n    Write a function to find the intersection of two given lists.\n    '''\n    temp_list = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            temp_list.append(list1[i])\n    return temp_list\n    \ndef union(list1,list2):\n    '''\n    Write a function to find the union of two given lists.\n    '''\n    temp_list = list1[:]\n    for i in range(len(list2)):\n        if list2[i] not in temp_list:\n            temp_list.append(list2[i])\n    return temp_list\n    \ndef subset_diff(list1,list2):\n    '''\n    Write a function to find the difference of two given lists.\n    '''\n    temp_list = list1[:]\n    for i in range(len(list2)):\n        if list2[i] in temp_list:\n            temp_list.remove(list2[i])\n    return temp_list\n    \ndef symmetric_diff(list1,list2):\n    '''\n    Write a function to find the symmetric difference of two given lists.\n    '''\n    temp_list = list1[:]\n    for i in range(len(list2)):\n        if list2[i] in temp_list:\n            temp_list.remove(list2[i])\n    for i in range(len(list2)):\n    "
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = []\n    if len(list1) == 0:\n        return False\n    for idx in range(0, len(list1), 2):\n        max_product.append(max(list1[idx] * list1[idx+1]))\n    return max(max_product)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    list2 = []\n    for i in range(0, len(list1), 2):\n        list2.append((list1[i], list1[i+1]))\n    for i in range(0, len(list2)):\n        max_product = max(max_product, abs(list2[i][0]*list2[i][1]))\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = max(list1[i] * list1[j] for i in range(len(list1)) for j in range(i + 1, len(list1)))\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) % 2 == 1:\n        return max(abs(list1[i] * list1[i + 1]) for i in range(0, len(list1), 2))\n    else:\n        return max(abs(list1[i] * list1[i + 1]) for i in range(0, len(list1), 2))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    amicable_numbers = set()\n    amicable_numbers_sum = 0\n    \n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = amicable_number(i)\n        if j!= i and j in amicable_numbers:\n            amicable_numbers_sum += i + j\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = []\n    for number in range(1, limit):\n        if number in result:\n            continue\n        divisor_sum = sum([int(i) for i in list(str(number))])\n        if divisor_sum == number:\n            result.append(number)\n            continue\n        divisor_sum = sum([int(i) for i in list(str(divisor_sum))])\n        if divisor_sum == number:\n            result.append(number)\n            result.append(divisor_sum)\n    return sum(result)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit + 1):\n        a = sum_of_divisors(i)\n        b = sum_of_divisors(a)\n        if i == b and i!= a:\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # http://stackoverflow.com/questions/10553776/sum-of-all-amicable-numbers-below-n\n    # http://www.mathsisfun.com/numbers/amicable.html\n    amicable_numbers = {i: 0 for i in range(1, limit)}\n    amicable_numbers[1] = 1\n    amicable_numbers[2] = 1\n    for i in range(3, limit):\n        amicable_numbers[i] = sum(divisors(i))\n        if i % 2 == 0:\n            # i is even\n            amicable_numbers[i] = amicable_numbers[i] * 2\n        if amicable_numbers[i] > limit:\n            break\n        if i % 2!= 0 and i!= 1 and amicable_numbers[amicable_numbers[i]] == i:\n            amicable_numbers[i] += i\n    return sum(amicable_numbers.values())\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [0] * limit\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sums = []\n    for i in range(2, limit+1):\n        sums.append(i)\n    for i in range(2, limit+1):\n        t = 0\n        for j in range(1, i):\n            if i % j == 0:\n                t += j\n        if t in sums and t!= i:\n            sums.remove(t)\n    return sum(sums)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = []\n    amicable_nums.extend(amicable_numbers(limit))\n    return sum(amicable_nums)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(filter(lambda x: amicable_numbers_sum_helper(x, limit), range(2, limit)))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # sum_of_amicable_numbers = 0\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if(a == 0):\n        return 0\n    else:\n        return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0:\n        if b > 0:\n            return cmath.pi/2\n        elif b < 0:\n            return -cmath.pi/2\n        elif b == 0:\n            return 0\n    else:\n        angle = cmath.phase(complex(a,b))\n        if angle < 0:\n            return angle + cmath.pi\n        else:\n            return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # a = (2+0j)\n    # b = (1-1j)\n    # cmath.polar(a)\n    # >>>(0.977845884654241+0.389320801196289j)\n    # >>>(1+1j)\n    # >>>(0.813733205514016-0.360820279164645j)\n    # >>>(-0.813733205514016+0.360820279164645j)\n    \n    # if a.imag >= 0:\n    #     rad = cmath.phase(a)+cmath.phase(b)\n    #     if rad > 0:\n    #         return rad\n    #     else:\n    #         return 2*cmath.pi + rad\n    # else:\n    #     rad = cmath.phase(a)+cmath.phase(b)\n    #     if rad < 0:\n    #         return 2*cmath.pi + rad\n    #     else:\n    #         return rad\n    # >>>0.0\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef angle(a,b):\n    '''\n    Write a function to get the angle of a positive integer.\n    '''\n    if a<0:\n        a = -a\n    if b<0:\n        b = -b\n    return (a+b)/(a*b)\ndef max_digit(n):\n    '''\n    Write a function to get the maximum digit of a number.\n    '''\n    return max(map(int, str(n)))\ndef rev_digit(n):\n    '''\n    Write a function to get the reverse of the maximum digit of a number.\n    '''\n    return int(str(n)[::-1])\ndef closest_int(n):\n    '''\n    Write a function to get the closest integer of a number.\n    '''\n    return int(n+0.5)\ndef closest_num(n):\n    '''\n    Write a function to get the closest number to a given number.\n    '''\n    if abs(n)<1:\n        return n\n    return n//abs(n)\ndef sum_digits(n):\n    '''\n    Write a function to get the sum of digits of a number.\n    '''\n    return sum(map(int, str(n)))\ndef factorial(n):\n    '''\n    Write a function to get the factorial of a number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact*i\n    return fact\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef sum_squares(n):\n    '''\n    Write a function to get the sum of squares of all the digits of a number.\n    '''\n    return sum(map(lambda x:x**2,map(int,str(n))))\ndef sum_powers(n, k):\n    '''\n    Write a function to get the sum of k power of digits of a number.\n    '''\n    return sum(map(lambda x:x**k,map(int,str(n))))\ndef sub_sum_odd(n):\n    '''\n    Write a function to get the sum of odd digits of a number.\n    '''\n    return sum(filter(lambda x:x%2==1,map(int,str(n))))\ndef sub_sum_even(n):\n    '''\n    Write a function to get the sum of even digits of a number.\n    '''\n    return sum(filter(lambda x:x%2==0,map(int,str(n))))\ndef sub_sum_odd_less_5(n):\n    '''\n    Write a function to get the sum of odd digits of a number if it is less than 5.\n    '''\n    return sum(filter(lambda x:x%2==1 and x<5,map(int,str(n))))\ndef sub_sum_even_less_5(n):\n    '''\n    Write a function to get the sum of even digits of a number if it is less than 5.\n    '''\n    return sum(filter(lambda x:x%2==0 and x<5,map(int,str(n))))\ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    if n<10:\n        return True\n    return n%10 == n/10%10\ndef is_pandigital(n, d):\n    '''\n    Write a function to check if a number is pandigital or not.\n    '''\n    if len(str(n))!= d:\n        return False\n    for i in range(d):\n        if str(i+1) not in str(n):\n            return False\n    return True\ndef is_pandigital_with_duplicates(n, d):\n    '''\n    Write a function to check if a number is pandigital with duplicates or not.\n    '''\n    if len(str(n))!= d:\n        return False\n    for i in range(d):\n        if str(i+1) in str(n):\n            return False\n    return True\ndef is_pandigital_with_repetition(n, d):\n    '''\n    Write a function to check if a number is pandigital with repetition or not.\n    '''\n    if len(str(n))!= d:\n        return False\n    for i in range(d):\n        if str(i+1) in str(n):\n            j = str(n).index(str(i+1))\n            if (str(j+1) not in str(n) or str(i+2) not in str(n) or str(i+1) not in str(n)):\n                return False\n    return True\ndef is_pandigital_with_repetition_and_duplicates(n, d):\n    '''\n    Write a function to check if a number is pandigital with repetition and duplicates or not.\n    '''\n    if len(str(n))!= d:\n        return False\n    for i in range(d):\n        if str(i+1) in str(n):\n            j = str(n).index(str(i+1))\n            if (str(j+1) not in str(n) or str(i+2) not in str(n) or str(i+1) not in str(n)):\n                return False\n            if str(j+2) not in str(n):\n                return False\n    return True\ndef max_alternating_digit(n):\n    '''\n    Write a function to get the maximum alternating digit of a number.\n    '''\n    if n<0:\n        return -1\n    if n<10:\n        return n\n    max_digit = max_digit(n)\n    sum_odd = sum_squares(n)\n    sum_even = sum_squares(n*2)\n    if sum_odd > sum_even:\n        return max_digit\n    return -1\ndef prime_factors(n):\n    '''\n    Write a function to get the prime factors of a number.\n    '''\n    if n%2 == 0:\n        while n%2 == 0:\n            n = n//2\n    if n%3 == 0:\n        while n%3 == 0:\n            n = n//3\n    if n%5 == 0:\n        while n%5 == 0:\n            n = n//5\n    if n%7 == 0:\n        while n%7 == 0:\n            n = n//7\n    return n\ndef count_consecutive(n):\n    '''\n    Write a function to count the number of consecutive 1s in a number.\n    '''\n    if n<0:\n        return -1\n    if n<10:\n        return 0\n    return sum(map(lambda x:x==1,map(int,str(n))))\ndef sum_of_digits(n):\n    '''\n    Write a function to get the sum of digits of a number.\n    '''\n    return sum(map(int,str(n)))\ndef is_perfect(n):\n    '''\n    Write a function to check if a number is perfect or not.\n    '''\n    perfect = False\n    for i in range(1,n):\n        if n%i == 0:\n            perfect = True\n    return perfect\ndef is_perfect_square(n):\n    '''\n    Write a function to check if a number is perfect square or not.\n    '''\n    perfect = False\n    if n>=0:\n        perfect = n**0.5 == int(n**0.5)\n    return perfect\ndef is_perfect_cube(n):\n    '''\n    Write a function to check if a number is perfect cube or not.\n    '''\n    perfect = False\n    if n>=0:\n        perfect = n**(1./3.) == int(n**(1./3.))\n    return perfect\ndef is_perfect_power(n):\n    '''\n    Write a function to check if a number is perfect power o"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #return (cmath.phase(a)+cmath.phase(b))/2\n    return (cmath.phase(a)+cmath.phase(b))\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    for i in range(len(string)): \n        if string[i] == '1': \n            continue \n        else: \n            zero, one = 0, 0 \n            for j in range(i, len(string)): \n                if string[j] == '1': \n                    one += 1 \n                else: \n                    zero += 1 \n                if zero == one: \n                    return (one - zero) \n                elif zero > one: \n                    return (zero - one) \n                elif zero < one: \n                    return (one - zero)\n    return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    res = 0\n    for i in range(len(string)):\n        c = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                c += 1\n            else:\n                break\n        for j in range(i, -1, -1):\n            if string[j] == '1':\n                c += 1\n            else:\n                break\n        res = max(res, c - i)\n    return res\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    length = len(string)\n    ones = 0\n    zeros = 0\n    for i in xrange(0,length):\n        if string[i] == '1':\n            ones += 1\n        elif string[i] == '0':\n            zeros += 1\n        count = max(ones-zeros, count)\n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)): \n        count_0 = 0\n        count_1 = 0\n        for j in range(i,len(string)): \n            if string[j] == '0': \n                count_0 += 1\n            else: \n                count_1 += 1\n            max_diff = max(count_0 - count_1, max_diff)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length=len(string)\n    n = 0\n    m = 0\n    zeros = []\n    ones = []\n    for i in range(length):\n        if string[i] == '0':\n            n += 1\n            zeros.append(i)\n        if string[i] == '1':\n            m += 1\n            ones.append(i)\n    max_diff = 0\n    for i in range(len(zeros)):\n        for j in range(i, len(zeros)):\n            current_diff = abs(zeros[i]-ones[j])\n            if max_diff < current_diff:\n                max_diff = current_diff\n    return max_diff\n    \ndef find_length_efficient(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length=len(string)\n    zeros = []\n    ones = []\n    for i in range(length):\n        if string[i] == '0':\n            zeros.append(i)\n        if string[i] == '1':\n            ones.append(i)\n    max_diff = 0\n    for i in range(len(zeros)):\n        for j in range(i, len(zeros)):\n            current_diff = abs(zeros[i]-ones[j])\n            if max_diff < current_diff:\n                max_diff = current_diff\n    return max_diff\n    \ndef find_length_w_two_pointers(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length=len(string)\n    zeros = []\n    ones = []\n    for i in range(length):\n        if string[i] == '0':\n            zeros.append(i)\n        if string[i] == '1':\n            ones.append(i)\n    max_diff = 0\n    for i in range(len(zeros)):\n        for j in range(i, len(zeros)):\n            current_diff = abs(zeros[i]-ones[j])\n            if max_diff < current_diff:\n                max_diff = current_diff\n    return max_diff\n    \ndef find_length_with_pointers_and_memo(string):\n    length = len(string)\n    \n    def find(string, i):\n        nonlocal length\n        if i == length:\n            return 0\n        if dp[i]!= -1:\n            return dp[i]\n        if string[i] == '0':\n            dp[i] = find(string, i+1)\n            return dp[i]\n        elif string[i] == '1':\n            dp[i] = 1 + min(find(string, i+1), find(string, i+2))\n            return dp[i]\n            \n    dp = [-1]*length\n    return find(string, 0)\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    count_0 = 0\n    count_1 = 0\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            return 0\n        max_len = max(count_0, count_1)\n    return max_len - 1\n    \ndef find_max_diff(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_len = 0\n    for i in range(n):\n        left = i\n        right = i\n        while right < n and string[right] == string[i]:\n            right += 1\n        while left >= 0 and right < n and string[left] == string[right]:\n            left -= 1\n            right += 1\n        max_len = max(max_len, right - left - 1)\n    return max_len\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    string = list(string)\n    max = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            max = max + 1\n        else:\n            max = max - 1\n    return max\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    zeros = 0\n    ones = 0\n    for i in string:\n        if i == '0':\n            zeros += 1\n        else:\n            ones += 1\n    return max(zeros-ones, ones-zeros)\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    for i in string:\n        if i == '0':\n            count += 1\n        else:\n            count -= 1\n    return count\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    print a,b\n    divisors=[]\n    for i in range(1,a):\n        if a%i==0 and b%i==0:\n            divisors.append(i)\n    divisors.append(a)\n    divisors.append(b)\n    print divisors\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result = 1\n    a = abs(a)\n    b = abs(b)\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            result = result*i\n    return result\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    try:\n        return sum([x for x in range(1,min(a,b)+1) if a%x==0 and b%x==0])\n    except Exception as e:\n        return e\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, min(a,b) + 1):\n        if a%i == 0 and b%i == 0:\n            common_divisors.append(i)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a<b:\n        c=a\n        a=b\n        b=c\n    l=[]\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            l.append(i)\n    return l\n    \ndef main():\n    a=input('Enter the number: ')\n    b=input('Enter the number: ')\n    print sum(a,b)\n    \nif __name__=='__main__':\n    main()"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a*b/gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s=0\n    while a%b==0:\n        a/=b\n        s+=b\n    return s\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s = 1\n    for i in range(2,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            s=s+i\n    return s\n    \ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    while b!=0:\n        a,b=b,a%b\n    return a\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    x = 0\n    while(b):\n        if(b&1):\n            x+=a\n        b >>= 1\n        a += 1\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # return x * y\n    # THIS WORKS BUT IT TAKES A LONG TIME\n    num1 = str(x)\n    num2 = str(y)\n    res = []\n    if len(num1) < len(num2):\n        num1, num2 = num2, num1\n    num2 = \"0\" * (len(num1) - len(num2)) + num2\n    carry = 0\n    for i in range(len(num1)):\n        product = int(num1[i]) * int(num2[i]) + carry\n        res.append(product % 10)\n        carry = product / 10\n    if carry:\n        res.append(carry)\n    return int(\"\".join(str(e) for e in res))\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # TODO: Write function to multiply two integers.\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    #Use the multiply method to multiply x and y\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n    \nprint multiply_int(2,3)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longer_words = [word for word in str if len(word) > n]\n    print longer_words\nlong_words(5, ['you','me','my', 'ours', 'yours'])\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [i for i in str.split() if len(i) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    a = set(str.split())\n    b = []\n    for i in a:\n        if len(i) > n:\n            b.append(i)\n    return b\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str.split():\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    ans = []\n    for word in str:\n        if len(word) > n:\n            ans.append(word)\n    return ans\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [i for i in str if len(i) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for i in str:\n        if len(i) > n:\n            long_words.append(i)\n    print(long_words)\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [str for str in str_list if len(str) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    res = []\n    for word in str:\n        if len(word) > n:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    #Check if each row is same\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    #Check if each column is same\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[i][j]:\n                return False\n    #Check if each diag is same\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    #Check if each anti-diag is same\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[n-1-j][n-1-i]:\n                return False\n    #The matrix is magic\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    \n    # Check if every row sum to 0\n    for row in range(size):\n        if sum(my_matrix[row])!= 0:\n            print \"Not a magic square\"\n            return False\n    \n    # Check if every column sum to 0\n    for column in range(size):\n        total = 0\n        for row in range(size):\n            total += my_matrix[row][column]\n        if total!= 0:\n            print \"Not a magic square\"\n            return False\n    \n    # Check if every diagonal sum to 0\n    total = 0\n    for row in range(size):\n        total += my_matrix[row][row]\n    if total!= 0:\n        print \"Not a magic square\"\n        return False\n    \n    total = 0\n    for row in range(size):\n        total += my_matrix[row][size-1-row]\n    if total!= 0:\n        print \"Not a magic square\"\n        return False\n    \n    print \"This is a magic square\"\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Test whether each element is in the row, column, and diagonal\n    # These are called magic numbers because they are a product of 4 numbers\n    # and the sum of all of those numbers is the same\n    def test_magic_number(my_matrix):\n        # Use a for loop to test each element in the matrix\n        for i in range(len(my_matrix)):\n            magic_number = 1\n            for j in range(len(my_matrix)):\n                magic_number = magic_number * my_matrix[i][j]\n            if magic_number!= my_matrix[i][i]:\n                return False\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    print('Beginning magic square test')\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sums = []\n    \n    # Check every row for sum\n    for i in range(len(my_matrix)):\n        sums.append(sum(my_matrix[i]))\n        \n    # Check every column for sum\n    for i in range(len(my_matrix[0])):\n        column_sum = 0\n        for j in range(len(my_matrix)):\n            column_sum += my_matrix[j][i]\n        sums.append(column_sum)\n        \n    # Check every diagonal for sum\n    diag_sum_left = 0\n    diag_sum_right = 0\n    for i in range(len(my_matrix)):\n        diag_sum_left += my_matrix[i][i]\n    sums.append(diag_sum_left)\n    for i in range(len(my_matrix)):\n        diag_sum_right += my_matrix[i][len(my_matrix)-1-i]\n    sums.append(diag_sum_right)\n    \n    # Check for equality\n    return sums == [sum(x) for x in zip(*my_matrix)]\n    \n    "
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for row in my_matrix:\n        if sum(row)!= 15:\n            return False\n    for i in range(len(my_matrix)):\n        col_sum = 0\n        for j in range(len(my_matrix)):\n            col_sum += my_matrix[j][i]\n        if col_sum!= 15:\n            return False\n    diag_sum_1 = 0\n    diag_sum_2 = 0\n    for i in range(len(my_matrix)):\n        diag_sum_1 += my_matrix[i][i]\n        diag_sum_2 += my_matrix[len(my_matrix)-1-i][i]\n    if diag_sum_1!= 15 or diag_sum_2!= 15:\n        return False\n    return True\n    \ndef lu_decomposition(matrix):\n    '''\n    Write a function that accepts a square matrix, performs an LU decomposition on it, and returns the U, L, and P matrices.\n    '''\n    for row in range(len(matrix)):\n        for col in range(row+1,len(matrix)):\n            matrix[row][col] = float(matrix[row][col])/float(matrix[row][row])\n            matrix[col][row] = matrix[row][col]\n    P = [[0 for i in range(len(matrix))] for j in range(len(matrix))]\n    L = [[0 for i in range(len(matrix))] for j in range(len(matrix))]\n    for i in range(len(matrix)):\n        L[i][i] = 1\n    for col in range(len(matrix)):\n        L[col][col] = 1\n        for row in range(col+1,len(matrix)):\n            p = float(matrix[row][col])\n            for j in range(col,len(matrix)):\n                matrix[row][j] = float(matrix[row][j]) - float(matrix[col][j])*float(p)\n    U = matrix\n    return [U,L,P]\n    \ndef lu_solve(U,L,P,b):\n    '''\n    Write a function that accepts a U, L, P, and b matrices, solves the equation Ax=b, and returns the solution vector.\n    '''\n    solution = [0 for i in range(len(U))]\n    for row in range(len(U)):\n        solution[row] = float(b[row])/float(L[row][row])\n        for col in range(row+1,len(U)):\n            solution[row] -= float(L[row][col])*float(solution[col])\n        solution[row] = solution[row]/float(L[row][row])\n    x = [0 for i in range(len(U))]\n    x[len(U)-1] = solution[len(U)-1]\n    for col in range(len(U)-1,0,-1):\n        x[col-1] = solution[col-1]\n        for row in range(col):\n            x[col-1] -= float(P[col][row])*float(x[row])\n        x[col-1] = float(x[col-1])/float(P[col][col])\n    return x\n    \ndef lu_inverse(U,L,P):\n    '''\n    Write a function that accepts a U, L, and P matrices, solves for the inverse of the matrix, and returns the solution vector.\n    '''\n    inverse = [[0 for i in range(len(U))] for j in range(len(U))]\n    for row in range(len(U)):\n        inverse[row][row] = 1\n    solution = lu_solve(U,L,P,inverse)\n    return solution\n    \ndef matrix_multiply(matrix1,matrix2):\n    '''\n    Write a function that takes two matrices and performs the matrix multiplication.\n    '''\n    if len(matrix1[0])!= len(matrix2):\n        raise Exception(\"Matrices are not valid for multiplication\")\n    else:\n        multiply_matrix = [[0 for i in range(len(matrix2[0]))] for j in range(len(matrix1))]\n        for row in range(len(matrix1)):\n            for col in range(len(matrix2[0])):\n                for i in range(len(matrix1[0])):\n                    multiply_matrix[row][col] += float(matrix1[row][i])*float(matrix2[i][col])\n        return multiply_matrix\n    \ndef matrix_addition(matrix1,matrix2):\n    '''\n    Write a function that takes two matrices and performs the matrix addition.\n    '''\n    if len(matrix1)!= len(matrix2) or len(matrix1[0])!= len(matrix2[0]):\n        raise Exception(\"Matrices are not valid for addition\")\n    else:\n        addition_matrix = [[0 for i in range(len(matrix1[0]))] for j in range(len(matrix1))]\n        for row in range(len(matrix1)):\n            for col in range(len(matrix1[0])):\n                addition_matrix[row][col] = float(matrix1[row][col])+float(matrix2[row][col])\n        return addition_matrix\n    \ndef matrix_subtract(matrix1,matrix2):\n    '''\n    Write a function that takes two matrices and performs the matrix subtraction.\n    '''\n    if len(matrix1)!= len(matrix2) or len(matrix1[0])!= len(matrix2[0]):\n        raise Exception(\"Matrices are not valid for subtraction\")\n    else:\n        subtract_matrix = [[0 for i in range(len(matrix1[0]))] for j in range(len(matrix1))]\n        for row in range(len(matrix1)):\n            for col in range(len(matrix1[0])):\n                subtract_matrix[row][col] = float(matrix1[row][col])-float(matrix2[row][col])\n        return subtract_matrix\n    \ndef matrix_transpose(matrix):\n    '''\n    Write a function that takes a matrix and performs the matrix transpose.\n    '''\n    transpose_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]\n    for row in range(len(matrix)):\n        for col in range(len(matrix[0])):\n            transpose_matrix[col][row] = matrix[row][col]\n    return transpose_matrix\n    \ndef matrix_determinant(matrix):\n    '''\n    Write a function that takes a matrix and performs the matrix determinant.\n    '''\n    if len(matrix)!= len(matrix[0]):\n        raise Exception(\"Matrix is not valid for determinant\")\n    else:\n        if len(matrix) == 2:\n            return float(matrix[0][0])*float(matrix[1][1]) - float(matrix[0][1])*float(matrix[1][0])\n        else:\n            determinant = 0\n            for i in range(len(matrix)):\n                sign = (-1)**i\n                det = 0\n                for j in range(len(matrix[0])):\n                    temp = matrix\n                    temp = temp[1:]\n                    for k in range(len(temp)):\n                        temp[k] = temp[k][:j]+temp[k][j+1:]\n                    det += float(sign)*float(matrix[0][j])*float(determinant(temp))\n                determinant = float(sign)*float(det)\n            return determinant\n    \ndef matrix_inverse(matrix):\n    '''\n    Write a function that takes a matrix and performs the matrix inverse.\n    '''\n    if len(matrix)!= len(matrix[0]):\n        raise Exceptio"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # get the sum of the matrix\n    sum_matrix = get_sum_of_matrix(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the sum of the matrix\n    sum_matrix = sum(my_matrix)\n    # Get the row sum\n    row_sum = sum(my_matrix[i] for i in range(len(my_matrix)))\n    # Get the column sum\n    col_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    # Get the diagonals sum\n    diag_sum = sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix)) if i == j)\n    # If the sum of each sum is equal to the sum of the matrix then the matrix is a magic square\n    if sum_matrix == row_sum == col_sum == diag_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_square = True\n    sum_row = 0\n    sum_col = 0\n    sum_diag = 0\n    for i in range(len(my_matrix)):\n        sum_row += my_matrix[i][i]\n        sum_col += my_matrix[i][len(my_matrix)-1-i]\n        sum_diag += my_matrix[i][i] + my_matrix[len(my_matrix)-1-i][i]\n    if sum_row!= sum_col and sum_diag!= sum_row:\n        magic_square = False\n    return magic_square\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        curr_count = nums.count(val)\n        if curr_count > max_count:\n            max_count = curr_count\n            max_val = val\n    return max_val\ndef max_occurences_in_sorted_list(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for i in range(len(nums)):\n        if nums[i] == nums[i-1]:\n            continue\n        curr_count = 0\n        for j in range(i,len(nums)):\n            if nums[j] == nums[i]:\n                curr_count += 1\n            else:\n                break\n        if curr_count > max_count:\n            max_count = curr_count\n            max_val = nums[i]\n    return max_val\ndef find_max_occurence_1(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        if nums.count(val) > max_count:\n            max_count = nums.count(val)\n            max_val = val\n    return max_val\ndef find_max_occurence_2(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        if nums.count(val) > max_count:\n            max_count = nums.count(val)\n            max_val = val\n    return max_val\ndef find_max_occurence_3(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        if nums.count(val) > max_count:\n            max_count = nums.count(val)\n            max_val = val\n    return max_val\ndef find_max_occurence_4(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        if nums.count(val) > max_count:\n            max_count = nums.count(val)\n            max_val = val\n    return max_val\ndef find_max_occurence_5(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        curr_count = 0\n        for num in nums:\n            if num == val:\n                curr_count += 1\n        if curr_count > max_count:\n            max_count = curr_count\n            max_val = val\n    return max_val\ndef find_max_occurence_6(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        curr_count = 0\n        for num in nums:\n            if num == val:\n                curr_count += 1\n        if curr_count > max_count:\n            max_count = curr_count\n            max_val = val\n    return max_val\ndef find_max_occurence_7(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        curr_count = 0\n        for num in nums:\n            if num == val:\n                curr_count += 1\n        if curr_count > max_count:\n            max_count = curr_count\n            max_val = val\n    return max_val\ndef find_max_occurence_8(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        curr_count = 0\n        for num in nums:\n            if num == val:\n                curr_count += 1\n        if curr_count > max_count:\n            max_count = curr_count\n            max_val = val\n    return max_val\ndef find_max_occurence_9(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        curr_count = 0\n        for num in nums:\n            if num == val:\n                curr_count += 1\n        if curr_count > max_count:\n            max_count = curr_count\n            max_val = val\n    return max_val\ndef find_max_occurence_10(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        curr_count = 0\n        for num in nums:\n            if num == val:\n                curr_count += 1\n        if curr_count > max_count:\n            max_count = curr_count\n            max_val = val\n    return max_val\ndef find_max_occurence_11(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        curr_count = 0\n        for num in nums:\n            if num == val:\n                curr_count += 1\n        if curr_count > max_count:\n            max_count = curr_count\n            max_val = val\n    return max_val\ndef find_max_occurence_12(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        curr_count = 0\n        for num in nums:\n            if num == val:\n                curr_count += 1\n        if curr_count > max_count:\n            max_count = curr_count\n            max_val = val\n    return max_val\ndef find_max_occurence_13(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        curr_count = 0\n        for num in nums:\n            if num == val:\n                curr_count += 1\n        if curr_count > max_count:\n            max_count = curr_count\n            max_val = val\n    return max_val\ndef find_max_occurence_14(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n        curr_count = 0\n        for num in nums:\n            if num == val:\n                curr_count += 1\n        if curr_count > max_count:\n            max_count = curr_count\n            max_val = val\n    return max_val\ndef find_max_occurence_15(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_val = None\n    for val in nums:\n    "
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return\n    dicti = defaultdict(int)\n    for i in nums:\n        dicti[i] += 1\n    max_freq = 0\n    max_item = None\n    for i in dicti:\n        if dicti[i] > max_freq:\n            max_item = i\n            max_freq = dicti[i]\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    num_dict = defaultdict(int)\n    for num in nums:\n        num_dict[num] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_count = max(count.values())\n    return [key for key, val in count.iteritems() if val == max_count]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max = 0\n    for i in set(nums):\n        if nums.count(i) > max:\n            max = nums.count(i)\n            max_item = i\n    return max_item\ndef move_zeroes(nums):\n    '''\n    Given an array nums, write a function to move all 0's to the end of it\n    without moving any non-zero element.\n    '''\n    if not nums:\n        return nums\n    max_idx = 0\n    for i in xrange(len(nums)):\n        if nums[i]!= 0:\n            nums[max_idx] = nums[i]\n            max_idx += 1\n    for i in xrange(max_idx, len(nums)):\n        nums[i] = 0\n    return nums\ndef longest_palindrome(s):\n    '''\n    Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n    '''\n    if not s:\n        return 0\n    max_len = 1\n    start = 0\n    for i in xrange(len(s)):\n        if i - max_len >= 1 and s[i-max_len-1:i+1] == s[i-max_len-1:i+1][::-1]:\n            start = i - max_len - 1\n            max_len += 2\n        if i - max_len >= 0 and s[i-max_len:i+1] == s[i-max_len:i+1][::-1]:\n            start = i - max_len\n            max_len += 1\n    return s[start:start+max_len]\ndef sort_array(nums):\n    '''\n    Given an array of integers, sort the array in ascending order.\n    '''\n    if not nums:\n        return []\n    for i in xrange(len(nums)-1):\n        for j in xrange(len(nums) - 1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\ndef find_minimum(nums):\n    '''\n    Find the minimum number in a list.\n    '''\n    if not nums:\n        return None\n    min_num = nums[0]\n    for i in nums:\n        if i < min_num:\n            min_num = i\n    return min_num\ndef find_middle(nums):\n    '''\n    Given a sorted array, find the middle element.\n    '''\n    if not nums:\n        return None\n    mid = len(nums) / 2\n    if len(nums) % 2 == 0:\n        return (nums[mid] + nums[mid-1]) / 2.0\n    else:\n        return nums[mid]\ndef find_median(nums):\n    '''\n    Given a list of numbers, return the median value.\n    '''\n    if not nums:\n        return None\n    mid = len(nums) / 2\n    if len(nums) % 2 == 0:\n        return (nums[mid] + nums[mid-1]) / 2.0\n    else:\n        return nums[mid]\ndef find_pivot(nums):\n    '''\n    Given a list of numbers, return the pivot index if there is one.\n    '''\n    if not nums:\n        return None\n    for i in xrange(len(nums)):\n        if nums[i] > nums[0]:\n            return i\n    return 0\ndef find_smallest(nums):\n    '''\n    Given a list of numbers, return the index of the smallest number.\n    '''\n    if not nums:\n        return None\n    min_num = nums[0]\n    min_idx = 0\n    for i in xrange(len(nums)):\n        if nums[i] < min_num:\n            min_num = nums[i]\n            min_idx = i\n    return min_idx\ndef binary_search(nums, target):\n    '''\n    Given a list of numbers, and a target number, return the index of the target number if it is in the list.\n    If not, return the index where it would be if it were inserted in order.\n    '''\n    if not nums:\n        return None\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if nums[left] < target else right + 1\ndef find_closest_elem(nums, target):\n    '''\n    Given a list of numbers, and a target number, return the index of the closest number.\n    '''\n    if not nums:\n        return None\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if nums[left] == target:\n        return left\n    if nums[right] == target:\n        return right\n    if abs(nums[left] - target) < abs(nums[right] - target):\n        return left\n    return right\ndef rotate(nums, k):\n    '''\n    Given a list of numbers and a number k, rotate the list by k elements.\n    '''\n    if not nums:\n        return None\n    k = k % len(nums)\n    nums[:] = nums[-k:] + nums[:-k]\n    return nums\ndef find_rotate_index(nums, target):\n    '''\n    Given a list of numbers and a target number, return the index of the target number if it is in the list.\n    If not, return the index where it would be if it were inserted in order.\n    '''\n    if not nums:\n        return None\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\ndef find_rotate_index_2(nums, target):\n    '''\n    Given a list of numbers and a target number, return the index of the target number if it is in the list.\n    If not, return the index where it would be if it were inserted in order.\n    '''\n    if not nums:\n        return None\n    for i in xrange(len(nums)):\n        if nums[i] == target:\n            return i\n        if i > 0 and nums[i] < nums[i-1]:\n            return i\n    return len(nums)\ndef sort_stack(nums):\n    '''\n    Given a list of numbers, sort the list using a stack.\n    '''\n    if not nums:\n        return []\n    stack = []\n    for i in nums:\n        while stack and stack[-1] > i:\n            stack.pop()\n        stack.append(i)\n    return stack\ndef is_valid_parenthese(s):\n    '''\n    Given a string, return true if it is a valid parenthese.\n    '''\n    if not s:\n        return True\n    bracket_map = defaultdict(int)\n    for i in s:\n        bracket_map[i] += 1\n    if bracket_map['('] == bracket_map[')']:\n        return True\n    if bracket_map[')'] > bracket_map['(']:\n        return False\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(')')\n        else:\n            if not stack or stack.pop("
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = {}\n    for n in nums:\n        dic[n] = dic.get(n,0) + 1\n    max_value = max(dic.values())\n    max_key = [k for k,v in dic.items() if v == max_value]\n    return max_key\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    n = len(nums)\n    freq = defaultdict(int)\n    for i in range(n):\n        freq[nums[i]] += 1\n    return max(freq, key=lambda key:freq[key])\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums_dict = defaultdict(int)\n    for n in nums:\n        nums_dict[n] += 1\n    max_freq_key = max(nums_dict, key=nums_dict.get)\n    return max_freq_key, nums_dict[max_freq_key]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    return max(count, key=lambda k: count[k])\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return None\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    return max(d.items(), key = lambda x: x[1])[0]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','y']\n    return ''.join(list(reversed([x for x in str1 if x.lower() not in vowels])))\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if len(str1) < 2:\n        return str1\n    vowels = 'aeiou'\n    list1 = []\n    for s in str1:\n        if s in vowels:\n            list1.append(s)\n    list1.reverse()\n    string = ''\n    for s in str1:\n        if s in vowels:\n            string = string + list1.pop()\n        else:\n            string = string + s\n    return string\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowel = ['a','e','i','o','u']\n    str2 = []\n    for i in str1:\n        if i not in vowel:\n            str2.append(i)\n    str2.reverse()\n    str3 = ''\n    for i in str2:\n        str3 = str3 + i\n    return str3\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i = 0\n    j = len(str1)-1\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    str1 = list(str1)\n    start = 0\n    end = len(str1) - 1\n    while start <= end:\n        if str1[start].lower() not in vowels:\n            start += 1\n        elif str1[end].lower() not in vowels:\n            end -= 1\n        else:\n            str1[start], str1[end] = str1[end], str1[start]\n            start += 1\n            end -= 1\n    return \"\".join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    list_str1 = list(str1)\n    str2 = ''\n    for x in list_str1:\n        if x in vowels:\n            str2 = str2+x\n    str2 = str2[::-1]\n    str3 = ''\n    for x in list_str1:\n        if x not in vowels:\n            str3 = str3+x\n    return str3+str2\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for char in str1:\n        if char in vowels:\n            str2 = str2 + char\n    str3 = str2[::-1]\n    return str3\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = list(str1)\n    start, end = 0, len(str1)-1\n    while start < end:\n        if str1[start].lower() not in vowels:\n            start += 1\n        elif str1[end].lower() not in vowels:\n            end -= 1\n        else:\n            str1[start], str1[end] = str1[end], str1[start]\n            start += 1\n            end -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    string = list(str1)\n    vowel_index = []\n    for i in range(len(string)):\n        if string[i] in vowels:\n            vowel_index.append(i)\n    \n    reverse_index = vowel_index[::-1]\n    reverse_list = [''] * len(reverse_index)\n    for i in range(len(reverse_index)):\n        reverse_list[i] = string[reverse_index[i]]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1=list(str1)\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1[i] = vowels[-1]\n            vowels.remove(str1[i])\n            vowels.append(str1[i])\n    return ''.join(str1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    new_str = ''\n    for ele in tup1:\n        new_str = new_str + ele\n    return new_str\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 = str1 + str(i)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(str(i) for i in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    return tuple(str(e) for e in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    new_tup = tuple(map(str, tup1))\n    new_str = ''.join(new_tup)\n    return new_str\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''.join(tup1)\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = str(tup1)\n    return s[1:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for x in tup1:\n        str1 += x\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = ''\n    for item in tup1:\n        tup_string += str(item)\n    return tup_string\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    for num in nums:\n        if num < 0:\n            return -sum(nums)\n    return sum(nums)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = [num for num in nums if num < 0]\n    return sum(negatives)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result += num\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] - sum_negativenum(nums[1:])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums: return 0\n    total = 0\n    for n in nums:\n        if n < 0:\n            total += n\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += num\n    return count\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return hexagonal_num(n - 1) + 2 * (n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_list = [0, 1, 6, 15, 28, 45, 66, 91, 120, 153, 178, 207, 236, 255, 294, 333, 360, 393, 414, 449, 486, 529, 576, 605]\n    return hex_list[n]\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n*(2*n - 1) / 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return hexagonal_num(n-1) + 2 * n - 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) < 2:\n        return 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count / float(len(nums))\ndef target_sum(nums, target):\n    '''\n    Given an array of integers, find the number of pairs of integers\n    that have a sum divisible by `target`.\n    '''\n    m = {}\n    for i in range(len(nums)):\n        tmp = target - nums[i]\n        if tmp in m:\n            return (m[tmp] + 1)\n        if nums[i] not in m:\n            m[nums[i]] = 1\n    return 0\ndef simple_multiply(x, y):\n    '''\n    Multiply two numbers in O(1) time and O(n) space\n    '''\n    y = y % 10\n    if y == 0:\n        return 0\n    if y == 1:\n        return x\n    elif y == 2:\n        return (x * 2) % 10\n    elif y == 3:\n        return (x * 3) % 10\n    elif y == 4:\n        return (x * 4) % 10\n    elif y == 5:\n        return (x * 5) % 10\n    elif y == 6:\n        return (x * 6) % 10\n    elif y == 7:\n        return (x * 7) % 10\n    elif y == 8:\n        return (x * 8) % 10\n    elif y == 9:\n        return (x * 9) % 10\n    return x\ndef find_missing_number(nums):\n    '''\n    Find the missing number in an array of consecutive integers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]!= i + 1:\n            return i + 1\n    return len(nums) + 1\ndef find_missing_number_2(nums):\n    '''\n    Find the missing number in an array of consecutive integers.\n    '''\n    n = len(nums)\n    s = sum(nums)\n    return (n * (n + 1)) / 2 - s\ndef rotate_array(nums, k):\n    '''\n    Given an array, rotate the array to the right by k steps, where k is non-negative.\n    '''\n    n = len(nums)\n    k = k % n\n    for i in range(k):\n        nums[i], nums[n - i - 1] = nums[n - i - 1], nums[i]\ndef rotate_array_2(nums, k):\n    '''\n    Given an array, rotate the array to the right by k steps, where k is non-negative.\n    '''\n    n = len(nums)\n    k = k % n\n    nums[:] = nums[n - k:] + nums[:n - k]\ndef max_rotate_array(nums, k):\n    '''\n    Given an array of integers, return the maximum possible sum of the array after applying at most k\n    rotations.\n    '''\n    n = len(nums)\n    k = k % n\n    max_sum = nums[n - k - 1]\n    curr_sum = nums[n - k - 1]\n    for i in range(n - k, n):\n        curr_sum = curr_sum + nums[i] - nums[n - i - 1]\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\ndef max_rotate_array_2(nums, k):\n    '''\n    Given an array of integers, return the maximum possible sum of the array after applying at most k\n    rotations.\n    '''\n    n = len(nums)\n    k = k % n\n    curr_sum = nums[n - k - 1]\n    max_sum = curr_sum\n    for i in range(n - k, n):\n        curr_sum = curr_sum + nums[i] - nums[n - i - 1]\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\ndef max_rotate_array_3(nums, k):\n    '''\n    Given an array of integers, return the maximum possible sum of the array after applying at most k\n    rotations.\n    '''\n    n = len(nums)\n    k = k % n\n    max_sum = nums[n - k - 1]\n    curr_sum = nums[n - k - 1]\n    for i in range(n - k, n):\n        curr_sum = curr_sum + nums[i] - nums[n - i - 1]\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\ndef reverse_array(nums, start, end):\n    '''\n    Given an array of integers, reverse the array in-place.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\ndef reverse_array_2(nums, start, end):\n    '''\n    Given an array of integers, reverse the array in-place.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\ndef reverse_array_3(nums, start, end):\n    '''\n    Given an array of integers, reverse the array in-place.\n    '''\n    nums[start:end + 1] = nums[end:start - 1:-1]\ndef reverse_array_4(nums, start, end):\n    '''\n    Given an array of integers, reverse the array in-place.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\ndef reverse_array_5(nums, start, end):\n    '''\n    Given an array of integers, reverse the array in-place.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\ndef reverse_array_6(nums, start, end):\n    '''\n    Given an array of integers, reverse the array in-place.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\ndef remove_duplicates(nums):\n    '''\n    Given an array of integers, remove the duplicates in place and return the new length.\n    Do not allocate extra space for another array, you must do this in place with constant space.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return n\n    i = 0\n    while i < n - 1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i + 1)\n            n -= 1\n        else:\n            i += 1\n    return n\ndef remove_duplicates_2(nums):\n    '''\n    Given an array of integers, remove the duplicates in place and return the new length.\n    Do not allocate extra space for another array, you must do this in place with constant space.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return n\n    i = 0\n    j = 1\n    while j < n:\n        if nums[j]!= nums[i]:\n            i += 1\n            nums[i] = nums[j]\n        j += 1\n    return i + 1\ndef remove_duplicates_3(nums):\n    '''\n    Given an array of integers, remove the duplicates in place and return the new length.\n    Do not allocate extra space for another array, you must do this in place with constant space.\n    '''\n    n = len(nums)\n    if n <= 1:\n        retur"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_nonzeros = 0\n    for num in nums:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_nonzeros += 1\n    return num_zeros / num_nonzeros\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    total_n = 0\n    total_z = 0\n    for num in nums:\n        if num == 0:\n            total_z += 1\n        else:\n            total_n += 1\n    return total_z/total_n\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i==0:\n            count+=1\n    return float(count)/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_non_zeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            num_zeroes += 1\n        else:\n            num_non_zeroes += 1\n    return float(num_zeroes)/float(num_non_zeroes)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return float(nums.count(0))/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n    return float(zeros)/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return float(nums.count(0))/float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    numzeros=0\n    nonzero=0\n    for x in nums:\n        if x==0:\n            numzeros+=1\n        else:\n            nonzero+=1\n    return numzeros/nonzero\n    \ndef binary_search(target, array):\n    '''\n    Given a sorted array, search for a target value.\n    Returns the index of the target value if found, else None.\n    '''\n    length=len(array)\n    start=0\n    end=length-1\n    while start<=end:\n        mid=start+(end-start)//2\n        if array[mid]==target:\n            return mid\n        if array[mid]>target:\n            end=mid-1\n        else:\n            start=mid+1\n    return None\n    \ndef find_next_closest_value(target, array):\n    '''\n    Given a sorted array, find the next closest value to a target value.\n    In the event of a tie, return the smaller value.\n    '''\n    length=len(array)\n    start=0\n    end=length-1\n    while start<=end:\n        mid=start+(end-start)//2\n        if array[mid]==target:\n            return array[mid+1]\n        if array[mid]<target:\n            start=mid+1\n        else:\n            end=mid-1\n    return array[start]\n    \ndef find_smallest_difference(array1, array2):\n    '''\n    Given two sorted arrays, return the smallest absolute difference between any 2 values in the arrays.\n    '''\n    length1=len(array1)\n    length2=len(array2)\n    if length1>length2:\n        return find_smallest_difference(array2, array1)\n    start=0\n    end=length1-1\n    while start<=end:\n        mid=start+(end-start)//2\n        value1=array1[mid]\n        if array2[mid]==value1:\n            return 0\n        if array2[mid]>value1:\n            start=mid+1\n        else:\n            end=mid-1\n    return abs(array1[end]-array2[end])\n    \ndef find_smallest_difference(array1, array2):\n    '''\n    Given two sorted arrays, return the smallest absolute difference between any 2 values in the arrays.\n    '''\n    length1=len(array1)\n    length2=len(array2)\n    start=0\n    end=length1-1\n    while start<=end:\n        mid=start+(end-start)//2\n        value1=array1[mid]\n        if array2[mid]==value1:\n            return 0\n        if array2[mid]>value1:\n            start=mid+1\n        else:\n            end=mid-1\n    return abs(array1[end]-array2[end])\n    \ndef find_smallest_difference(array1, array2):\n    '''\n    Given two sorted arrays, return the smallest absolute difference between any 2 values in the arrays.\n    '''\n    length1=len(array1)\n    length2=len(array2)\n    start=0\n    end=length1-1\n    min=abs(array1[start]-array2[start])\n    while start<=end:\n        mid=start+(end-start)//2\n        value1=array1[mid]\n        if array2[mid]==value1:\n            return 0\n        if array2[mid]>value1:\n            start=mid+1\n        else:\n            end=mid-1\n        if abs(array1[end]-array2[end])<min:\n            min=abs(array1[end]-array2[end])\n    return min\n    \ndef find_smallest_difference(array1, array2):\n    '''\n    Given two sorted arrays, return the smallest absolute difference between any 2 values in the arrays.\n    '''\n    length1=len(array1)\n    length2=len(array2)\n    start=0\n    end=length1-1\n    min=abs(array1[start]-array2[start])\n    while start<=end:\n        mid=start+(end-start)//2\n        value1=array1[mid]\n        if array2[mid]==value1:\n            return 0\n        if array2[mid]>value1:\n            start=mid+1\n        else:\n            end=mid-1\n        if abs(array1[end]-array2[end])<min:\n            min=abs(array1[end]-array2[end])\n    return min\n    \ndef find_smallest_difference(array1, array2):\n    '''\n    Given two sorted arrays, return the smallest absolute difference between any 2 values in the arrays.\n    '''\n    length1=len(array1)\n    length2=len(array2)\n    start=0\n    end=length1-1\n    min=abs(array1[start]-array2[start])\n    while start<=end:\n        mid=start+(end-start)//2\n        value1=array1[mid]\n        if array2[mid]==value1:\n            return 0\n        if array2[mid]>value1:\n            start=mid+1\n        else:\n            end=mid-1\n        if abs(array1[end]-array2[end])<min:\n            min=abs(array1[end]-array2[end])\n    return min\n    \ndef find_smallest_difference(array1, array2):\n    '''\n    Given two sorted arrays, return the smallest absolute difference between any 2 values in the arrays.\n    '''\n    length1=len(array1)\n    length2=len(array2)\n    start=0\n    end=length1-1\n    min=abs(array1[start]-array2[start])\n    while start<=end:\n        mid=start+(end-start)//2\n        value1=array1[mid]\n        if array2[mid]==value1:\n            return 0\n        if array2[mid]>value1:\n            start=mid+1\n        else:\n            end=mid-1\n        if abs(array1[end]-array2[end])<min:\n            min=abs(array1[end]-array2[end])\n    return min\n    \ndef find_smallest_difference(array1, array2):\n    '''\n    Given two sorted arrays, return the smallest absolute difference between any 2 values in the arrays.\n    '''\n    length1=len(array1)\n    length2=len(array2)\n    start=0\n    end=length1-1\n    min=abs(array1[start]-array2[start])\n    while start<=end:\n        mid=start+(end-start)//2\n        value1=array1[mid]\n        if array2[mid]==value1:\n            return 0\n        if array2[mid]>value1:\n            start=mid+1\n        else:\n            end=mid-1\n        if abs(array1[end]-array2[end])<min:\n            min=abs(array1[end]-array2[end])\n    return min\n    \ndef find_smallest_difference(array1, array2):\n    '''\n    Given two sorted arrays, return the smallest absolute difference between any 2 values in the arrays.\n    '''\n    length1=len(array1)\n    length2=len(array2)\n    start=0\n    end=length1-1\n    min=abs(array1[start]-array2[start])\n    while start<=end:\n        mid=start+(end-start)//2\n        value1=array1[mid]\n        if array2[mid]==value1:\n            return 0\n        if array2[mid]>value1:\n            start=mid+1\n        else:\n            end=mid-1\n        if abs(array1[end]-array2[end])<min:\n            min=abs(array1[end]-array2[end])\n    return min\n    \ndef find_smallest_difference(array1, array2):\n    '''\n    Given two sorted arrays, return the smallest absolute difference between any 2 values in the arrays.\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if nums:\n        x, y = 0, 0\n        for i in nums:\n            if i!= 0:\n                x += 1\n            elif i == 0:\n                y += 1\n        return y/float(x)\n    else:\n        return 0\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    result = 0\n    for i in range(n+1):\n        result = result + 2**i\n    if result == n:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def power_of_2(x):\n        return x & (x - 1) == 0\n    \n    if n == 0:\n        return True\n    if n == 1:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n = abs(n)\n    m = 0\n    while n >= 2:\n        m = m + 1\n        n = n / 2\n    return m\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    import math\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    while n > 0:\n        if n%2 == 1:\n            return False\n        n = n/2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n > 0:\n        if n & 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # count the number of 1s in the binary representation of n.\n    count = 0\n    while (n): \n        n &= (n-1)\n        count += 1\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n % 2 == 0:\n        n = n / 2\n    if n == 1:\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0: \n        return False\n    if n == 1:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def power_of_two(n): \n        if n == 1: \n            return True\n        elif n % 2 == 0: \n            return power_of_two(n//2)\n        else: \n            return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    k = 2\n    while k*k <= n: \n        if n%k == 0:\n            return False\n        k = k + 1\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Formula: c = 2 * pi * r\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #hint: use math.pi\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # @TODO: your code here\n    circumference = r * 2 * math.pi\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    if r < 0:\n        return 0\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return pi * 2 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * r**2\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    if not isinstance(r, (int, float)):\n        raise TypeError('The radius must be a number')\n    if r < 0:\n        raise ValueError('The radius must be positive')\n    return 2 * math.pi * r\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    flatten_list = [x for sublist in test_list for x in sublist]\n    \n    return flatten_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [i for elem in test_list for i in elem]\n    \ndef extract_doubles(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for elem in test_list for x in elem]\n    \ndef test_singly():\n    '''\n    test the singly function\n    '''\n    \n    list_1 = [[1,2],[3,4],[5,6]]\n    list_2 = [[7,8],[9,10]]\n    list_3 = [[11,12],[13,14],[15,16]]\n    \n    assert extract_singly(list_1) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    assert extract_singly(list_2) == [7,8,9,10,11,12,13,14]\n    assert extract_singly(list_3) == [11,12,13,14,15,16]\n    \ndef test_doubles():\n    '''\n    test the doubles function\n    '''\n    \n    list_1 = [[1,2],[3,4],[5,6]]\n    list_2 = [[7,8],[9,10]]\n    list_3 = [[11,12],[13,14],[15,16]]\n    \n    assert extract_doubles(list_1) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    assert extract_doubles(list_2) == [7,8,9,10,11,12,13,14]\n    assert extract_doubles(list_3) == [11,12,13,14,15,16]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output = []\n    for sublist in test_list:\n        output.extend(sublist)\n    return output\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [val for sublist in test_list for val in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for elem in test_list:\n        new_list += elem\n    return new_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([item for sublist in test_list for item in sublist])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for y in test_list for x in y]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        if nums[i]!= i + 1:\n            for j in range(n-1, i, -1):\n                if nums[j-1] > nums[j]:\n                    nums[j], nums[j-1] = nums[j-1], nums[j]\n            nums[i], nums[j] = nums[j], nums[i]\n            # nums[i:] = nums[i:][::-1]\n            for j in range(n-1, i, -1):\n                if nums[j-1] > nums[j]:\n                    nums[j], nums[j-1] = nums[j-1], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    N = len(nums)\n    k = int(N/2)\n    # for i in range(N):\n    #     print(i,k,nums)\n    for i in range(k):\n        if i!= N-1-i:\n            nums.append(nums.pop(i))\n        else:\n            pass\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    m = n - 1\n    curr = m\n    while curr > 0:\n        curr = m - 1\n        for i in range(curr):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n        curr -= 1\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def find_kth_largest(nums, k):\n        pivot = nums[0]\n        left = [n for n in nums if n <= pivot]\n        right = [n for n in nums if n > pivot]\n        if len(left) == k:\n            return pivot\n        elif len(left) > k:\n            return find_kth_largest(left, k)\n        else:\n            k = k - len(left) - 1\n            return find_kth_largest(right, k)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        curr = nums[i-1]\n        j = i - 1\n        while j > 0 and nums[j-1] > curr:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = curr\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        max_pos = find_max_pos(nums, i)\n        if max_pos!= i - 1:\n            nums = flip(nums, max_pos + 1, i)\n            nums = flip(nums, 1, i - 1)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j-1] > nums[max_index]:\n                max_index = j-1\n        if max_index!= i-1:\n            nums = swap(nums, max_index, i-1)\n        nums = nums[:i] + nums[:i-1:-1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        max_val = max(nums[i:])\n        max_idx = nums[i:].index(max_val)\n        nums[i:i+max_idx+1] = nums[i:i+max_idx+1][::-1]\n        nums[i:i+max_idx+1] = nums[i:i+max_idx+1][::-1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        k = find_max_i(nums, i)\n        if k!= i:\n            nums[:k] = nums[:k][::-1]\n            nums[k:i] = nums[k:i][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        # Find the biggest value in the list\n        max_value = max(nums[0:i])\n        max_idx = nums[0:i].index(max_value)\n        # If it is not the last element, swap with the element at the end\n        if max_idx!= i-1:\n            nums[0:i] = nums[0:i][::-1]\n            # Reverse the sub-list\n            nums[max_idx+1:i] = nums[max_idx+1:i][::-1]\n            # Reverse the whole list\n            nums[0:max_idx+1] = nums[0:max_idx+1][::-1]\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]:\n            counter+=1\n    for i in range(len(list1)):\n        if list3[i]==list2[i]:\n            counter+=1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_pair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            same_pair += 1\n    return same_pair\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if (list1[i] == list2[i] and list1[i] == list3[i]):\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return 0\n    else:\n        count = 0\n        for i in range(len(list1)):\n            if list1[i] == list2[i] and list1[i] == list3[i]:\n                count += 1\n        return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    i = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            i += 1\n    return i\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    ans = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for x in Input:\n        if x == ():\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    #base case: \n    if len(Input) == 0: \n        return 0\n    elif type(Input[0]) == type(()): \n        return 1 + find_lists(Input[0])\n    else: \n        return 0 \n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    def find_brackets(Input):\n        '''\n        Write a function to find the number of bracket pairs present in the given input.\n        '''\n        count = 0\n        for i in Input:\n            if i == '(':\n                count += 1\n            elif i == ')':\n                count -= 1\n                if count < 0:\n                    return -1\n        return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = list(Input)\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count +=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == type(()):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input) == str:\n        return 0\n    elif type(Input) == tuple:\n        return 1 + find_lists(Input[0]) + find_lists(Input[1])\n    else:\n        return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = list(Input)\n    length = len(Input)\n    count = 0\n    for i in range(length):\n        if Input[i] == ',':\n            count = count + 1\n        elif Input[i] == ')':\n            count = count - 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input) == 0:\n        return 0\n    if len(Input) == 1:\n        if isinstance(Input[0],list):\n            return 1\n        else:\n            return 0\n    if isinstance(Input[0],list):\n        return 1+find_lists(Input[1:])\n    else:\n        return 0+find_lists(Input[1:])\n    return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    N=len(Input)\n    a=0\n    for i in xrange(N):\n        if type(Input[i]) is list:\n            a+=1\n    return a\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_diff = max(max_diff, abs(arr[i]-arr[j]))\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[-1]-arr[0]\n    for i in range(len(arr)-1):\n        max_diff = max(max_diff, arr[i+1]-arr[i])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    l = len(arr)\n    arr.sort()\n    if l==0:\n        return 0\n    if l==1:\n        return 0\n    if l==2:\n        return abs(arr[0]-arr[1])\n    return max(abs(arr[0]-arr[1]),abs(arr[l-1]-arr[l-2]))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    if arr == []:\n        return 0\n    \n    else:\n        #print 'hello'\n        max_diff = arr[1] - arr[0]\n        for i in range(len(arr)-1):\n            if abs(arr[i] - arr[i+1]) > max_diff:\n                max_diff = abs(arr[i] - arr[i+1])\n            #print max_diff\n        #print max_diff\n        return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)<2:\n        return 0\n    arr.sort()\n    return max(arr[i+1]-arr[i] for i in range(len(arr)-1))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max([abs(arr[i]-arr[i+1]) for i in xrange(len(arr)-1)])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = -1\n    for i in range(n):\n        for j in range(i+1,n):\n            temp = abs(arr[i] - arr[j])\n            if temp > max_diff:\n                max_diff = temp\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    i = 0\n    max_diff = -10000\n    while i < len(arr): \n        j = i + 1\n        while j < len(arr): \n            temp = abs(arr[i] - arr[j])\n            if temp > max_diff: \n                max_diff = temp\n            j = j + 1\n        i = i + 1\n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max([abs(arr[i]-arr[i+1]) for i in range(len(arr)-1)])\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return (n / a, 0)\n    else:\n        divisor = gcd(a, b)\n        if n % divisor!= 0:\n            return None\n        else:\n            return (n / divisor, n / divisor)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n // b):\n        if a * x + b * (n - a * x) == n:\n            return x, n - a * x\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (a, 0)\n    elif n > 0:\n        for a_i in range(a, n // a + 1):\n            for b_i in range(b, n // b + 1):\n                if a_i * b_i == n:\n                    return (a_i, b_i)\n    elif n < 0:\n        for a_i in range(a, -n // a - 1, -1):\n            for b_i in range(b, -n // b - 1, -1):\n                if a_i * b_i == -n:\n                    return (a_i, b_i)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        if (((a*x) + b) == n):\n            return (x, n/a)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    x,y = 0,1\n    while(a*x + b*y!= n):\n        if(a*x + b*y < n):\n            x += 1\n        else:\n            y += 1\n    return (x,y)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = n - (b * (a * (a + 1) // 2))\n    y = a * x + b\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return a, b\n    if n < 0:\n        return find_solution(-a, b, -n)\n    return find_solution(b, a, n - a * b)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        for y in range(1, n):\n            if a * x + b * y == n:\n                return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def gcd(a, b):\n        '''\n        Euclid's algorithm\n        '''\n        if b == 0:\n            return a\n        return gcd(b, a%b)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 1:\n        return b % n, 1\n    else:\n        g, x, y = egcd(a, n)\n        if g!= 1:\n            return None\n        else:\n            return (b*x) % n, x % n\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] in list2:\n            list1.pop(i)\n        else:\n            i += 1\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    print new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    final_list = []\n    for elem in list1:\n        if elem not in list2:\n            final_list.append(elem)\n    return final_list\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [1,2,3,4]\n    list2 = [2,3,4,5,6]\n    list3 = [1,2,3,4]\n    \n    for i in list2:\n        list1.remove(i)\n    print list1\n    \n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    newlist=[]\n    for item in list1:\n        if item not in list2:\n            newlist.append(item)\n    return newlist\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [item for item in list1 if item not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.sort()\n    list2.sort()\n    index1 = 0\n    index2 = 0\n    result = []\n    while index1 < len(list1) and index2 < len(list2):\n        if list1[index1] == list2[index2]:\n            result.append(list1[index1])\n            index1 += 1\n            index2 += 1\n        elif list1[index1] > list2[index2]:\n            index2 += 1\n        else:\n            index1 += 1\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return 0\n    if n % 2 == 0:\n        return n // 2\n    return n - 2 + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #// returns the sum of 1/2n! + 1/4n! +... + 1/2n-1! + 1/n\n    #// the function that we need to solve\n    #// calculate sum of 1/2n! + 1/4n! +... + 1/2n-1! + 1/n\n    #// the code for this is the following:\n    #//return(1/2**n + 1/2**(n-1) + 1/2**(n-2) + 1/2**(n-3) +... + 1/2**2 + 1/2**1 + 1/2**0)\n    #// the code for the question itself is this:\n    #return(((n%2 == 0) and n or n-2) + sum_series(n-1))\n    #//if n is even and n is greater than 0, return n\n    #// if n is even and n is less than 0, return 0\n    #// otherwise return n - 1\n    #// if n is even and n is zero, return 1\n    #// if n is even and n is one, return 1\n    #// if n is even and n is two, return 2\n    #// if n is odd and n is greater than zero, return n - 1\n    #// if n is odd and n is zero, return 1\n    #// if n is odd and n is one, return 2\n    #// if n is odd and n is two, return 3\n    #// return n - 1\n    #//if n is even and n is greater than 0, return n\n    #// if n is even and n is less than 0, return 0\n    #// otherwise return n\n    #// if n is even and n is zero, return 1\n    #// if n is even and n is one, return 2\n    #// if n is even and n is two, return 3\n    #// if n is odd and n is greater than zero, return n - 1\n    #// if n is odd and n is zero, return 1\n    #// if n is odd and n is one, return 3\n    #// if n is odd and n is two, return 5\n    #// return n - 1\n    #//if n is even and n is greater than 0, return n\n    #// if n is even and n is less than 0, return 0\n    #// otherwise return n\n    #// if n is even and n is zero, return 1\n    #// if n is even and n is one, return 2\n    #// if n is even and n is two, return 3\n    #// if n is odd and n is greater than zero, return n - 1\n    #// if n is odd and n is zero, return 1\n    #// if n is odd and n is one, return 3\n    #// if n is odd and n is two, return 5\n    #// return n - 1\n    #//if n is even and n is greater than 0, return n\n    #// if n is even and n is less than 0, return 0\n    #// otherwise return n\n    #// if n is even and n is zero, return 1\n    #// if n is even and n is one, return 2\n    #// if n is even and n is two, return 3\n    #// if n is odd and n is greater than zero, return n - 1\n    #// if n is odd and n is zero, return 1\n    #// if n is odd and n is one, return 3\n    #// if n is odd and n is two, return 5\n    #// return n - 1\n    #// if n is even and n is greater than 0, return n\n    #// if n is even and n is less than 0, return 0\n    #// otherwise return n\n    #// if n is even and n is zero, return 1\n    #// if n is even and n is one, return 2\n    #// if n is even and n is two, return 3\n    #// if n is odd and n is greater than zero, return n - 1\n    #// if n is odd and n is zero, return 1\n    #// if n is odd and n is one, return 3\n    #// if n is odd and n is two, return 5\n    #// return n - 1\n    #// if n is even and n is greater than 0, return n\n    #// if n is even and n is less than 0, return 0\n    #// otherwise return n\n    #// if n is even and n is zero, return 1\n    #// if n is even and n is one, return 2\n    #// if n is even and n is two, return 3\n    #// if n is odd and n is greater than zero, return n - 1\n    #// if n is odd and n is zero, return 1\n    #// if n is odd and n is one, return 3\n    #// if n is odd and n is two, return 5\n    #// return n - 1\n    #//if n is even and n is greater than 0, return n\n    #// if n is even and n is less than 0, return 0\n    #// otherwise return n\n    #// if n is even and n is zero, return 1\n    #// if n is even and n is one, return 2\n    #// if n is even and n is two, return 3\n    #// if n is odd and n is greater than zero, return n - 1\n    #// if n is odd and n is zero, return 1\n    #// if n is odd and n is one, return 3\n    #// if n is odd and n is two, return 5\n    #// return n - 1\n    #// if n is even and n is greater than 0, return n\n    #// if n is even and n is less than 0, return 0\n    #// otherwise return n\n    #// if n is even and n is zero, return 1\n    #// if n is even and n is one, return 2\n    #// if n is even and n is two, return 3\n    #// if n is odd and n is greater than zero, return n - 1\n    #// if n is odd and n is zero, return 1\n    #// if n is odd and n is one, return 3\n    #// if n is odd and n is two, return 5\n    #// return n - 1\n    #// if n is even and n is greater than 0, return n\n    #// if n is even and n is less than 0, return 0\n    #// otherwise return n\n    #// if n is even and n is zero, return 1\n    #// if n is even and n is one, return 2\n    #// if n is even and n is two, return 3\n    #// if n is odd and n is greater than zero, return n - 1\n    #// if n is odd and n is zero, return 1\n    #// if n is odd and n is one, return 3\n    #// if n is odd and n is two, return 5\n    #// return n - 1\n    #// if n is even and n is greater than 0, return n\n    #// if n is even and n is less than 0, return 0\n    #// otherwise return n\n    #// if n is even and n is zero, return 1\n    #// if n is even and n is one, return 2\n    #// if n is even and n is two, return 3\n    #// if n is odd and n is greater than zero, return n - 1\n    #// if n is odd and n is zero, return 1\n    #// if n is odd and n is one, return 3\n    #// if n is odd and n is two, return 5\n    #// return n - 1\n    #// if n is even and n is greater than 0, return n\n    #// if n is even and n is less than 0, return 0\n    #// otherwise return n\n    #// if n is even and n is zero, return 1\n    #// if n is even and n is one, return 2\n    #// if n is even and n is two, return 3\n    #// if n is odd and n is greater than zero, return n - 1\n    #// if n is odd and n is zero, return 1\n    #// if n is odd and n is one, return 3\n    #// if n is odd and n is two, return 5\n    #// return n - 1\n    #// if n is even and n is greater than 0, return n\n    #// if n is even and n is less than 0, return 0\n    #// otherwise return n\n    #// if n is even and n is zer"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n - 2)*(sum_series(n-1) + sum_series(n-2))"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return n*(n+1)/2\n    else:\n        return n*(n+1)/2 + n*(n+1)/2 - sum_series(n-1)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n - 2) + (n - 4) + (n - 6) + (n - 8) + (n - 10) + (n - 12)\n    \n    \n    "
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return None\n    elif n < 2:\n        return n\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([n - 2*i for i in range(n//2)])\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 3:\n        return 0\n    else:\n        return (s * (s - 2 * l) / 2) * (1 / tan(pi / s))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(s+2)*l)/(4*tan(pi/s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    a = s * l / (2 * tan(pi/l))\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l < 2:\n        raise Exception('The polygon has less than two sides.')\n    area = (l ** 2) / (4 * tan(pi / l))\n    return round(area, 3)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l**2) / (tan(pi/l))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    import math\n    n = s\n    m = l / 2\n    a = m / n * math.tan(pi / n)\n    area = m * a\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l)/2*tan(pi/l)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # returns area of regular polygon for given sides and length\n    return (0.25*s*(l**2))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s * l / 2.0 * tan(pi / n)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * l**2) / tan(pi / l)\ndef test_area_polygon():\n    '''\n    Write a function to test the area_polygon function.\n    '''\n    assert area_polygon(3, 4) == 12.5\n    assert area_polygon(3, 5) == 60\n    assert area_polygon(3, 10) == 78.5\n    assert area_polygon(3, 14) == 216\n    assert area_polygon(3, 16) == 324\n    assert area_polygon(3, 19) == 396\n    assert area_polygon(3, 22) == 486\n    assert area_polygon(3, 24) == 648\n    assert area_polygon(3, 25) == 750\n    assert area_polygon(3, 26) == 810\n    assert area_polygon(3, 27) == 954\n    assert area_polygon(3, 28) == 1076\n    assert area_polygon(3, 29) == 1186\n    assert area_polygon(3, 30) == 1294\n    assert area_polygon(3, 31) == 1388\n    assert area_polygon(3, 32) == 1476\n    assert area_polygon(3, 33) == 1584\n    assert area_polygon(3, 34) == 1690\n    assert area_polygon(3, 35) == 1798\n    assert area_polygon(3, 36) == 1826\n    assert area_polygon(3, 37) == 1895\n    assert area_polygon(3, 38) == 1927\n    assert area_polygon(3, 39) == 2027\n    assert area_polygon(3, 40) == 2135\n    assert area_polygon(3, 41) == 2217\n    assert area_polygon(3, 42) == 2290\n    assert area_polygon(3, 43) == 2322\n    assert area_polygon(3, 44) == 2425\n    assert area_polygon(3, 45) == 2528\n    assert area_polygon(3, 46) == 2631\n    assert area_polygon(3, 47) == 2734\n    assert area_polygon(3, 48) == 2837\n    assert area_polygon(3, 49) == 2940\n    assert area_polygon(3, 50) == 3043\n    assert area_polygon(3, 51) == 3156\n    assert area_polygon(3, 52) == 3268\n    assert area_polygon(3, 53) == 3370\n    assert area_polygon(3, 54) == 3483\n    assert area_polygon(3, 55) == 3566\n    assert area_polygon(3, 56) == 3749\n    assert area_polygon(3, 57) == 3942\n    assert area_polygon(3, 58) == 4045\n    assert area_polygon(3, 59) == 4148\n    assert area_polygon(3, 60) == 4250\n    assert area_polygon(3, 61) == 4353\n    assert area_polygon(3, 62) == 4466\n    assert area_polygon(3, 63) == 4569\n    assert area_polygon(3, 64) == 4672\n    assert area_polygon(3, 65) == 4775\n    assert area_polygon(3, 66) == 4878\n    assert area_polygon(3, 67) == 4971\n    assert area_polygon(3, 68) == 5074\n    assert area_polygon(3, 69) == 5167\n    assert area_polygon(3, 70) == 5270\n    assert area_polygon(3, 71) == 5373\n    assert area_polygon(3, 72) == 5466\n    assert area_polygon(3, 73) == 5569\n    assert area_polygon(3, 74) == 5772\n    assert area_polygon(3, 75) == 5875\n    assert area_polygon(3, 76) == 5978\n    assert area_polygon(3, 77) == 6071\n    assert area_polygon(3, 78) == 6264\n    assert area_polygon(3, 79) == 6367\n    assert area_polygon(3, 80) == 6470\n    assert area_polygon(3, 81) == 6573\n    assert area_polygon(3, 82) == 6666\n    assert area_polygon(3, 83) == 6769\n    assert area_polygon(3, 84) == 6872\n    assert area_polygon(3, 85) == 6975\n    assert area_polygon(3, 86) == 7068\n    assert area_polygon(3, 87) == 7171\n    assert area_polygon(3, 88) == 7274\n    assert area_polygon(3, 89) == 7367\n    assert area_polygon(3, 90) == 7490\n    assert area_polygon(3, 91) == 7573\n    assert area_polygon(3, 92) == 7666\n    assert area_polygon(3, 93) == 7769\n    assert area_polygon(3, 94) == 7882\n    assert area_polygon(3, 95) == 7975\n    assert area_polygon(3, 96) == 8068\n    assert area_polygon(3, 97) == 8171\n    assert area_polygon(3, 98) == 8264\n    assert area_polygon(3, 99) == 8367\n    assert area_polygon(3, 100) == 8490\n    assert area_polygon(3, 101) == 8573\n    assert area_polygon(3, 102) == 8666\n    assert area_polygon(3, 103) == 8769\n    assert area_polygon(3, 104) == 8882\n    assert area_polygon(3, 105) == 8975\n    assert area_polygon(3, 106) == 9068\n    assert area_polygon(3, 107) == 9171\n    assert area_polygon(3, 108) == 9264\n    assert area_polygon(3, 109) == 9367\n    assert area_polygon(3, 110) == 9490\n    assert area_polygon(3, 111) == 9573\n    assert area_polygon(3, 112) == 9666\n    assert area_polygon(3, 113) == 9669\n    assert area_polygon(3, 114) == 9672\n    assert area_polygon(3, 115) == 9685\n    assert area_polygon(3, 116) == 9768\n    assert area_polygon(3, 117) == 9871\n    assert area_polygon(3, 118) == 9974\n    assert area_polygon(3, 119) == 10077\n    assert area_polygon(3, 120) == 10180\n    assert area_polygon(3, 121) == 10253\n    assert area_polygon(3, 122) == 10356\n    assert area_polygon(3, 123) == 10459\n    assert area_polygon(3, 124) == 10552\n    assert area_polygon(3, 125) == 10665\n    assert area_polygon(3, 126) == 10778\n    assert area_polygon(3, 127) == 10971\n    assert area_polygon(3, 128) == 11074\n    assert area_polygon(3, 129) == 11177\n    assert area_polygon(3, 130) == 11280\n    assert area_polygon(3, 131) == 11383\n    assert area_polygon(3, 132) == 11476\n    assert area_polygon(3, 133) == 11579\n    assert area_polygon(3, 134) == 11672\n    assert area_polygon(3, 135) == 11775\n    assert area_polygon(3, 136) == 11878\n    assert area_polygon(3, 137) == 11981\n    assert area_polygon(3, 138) == 12084\n    assert area_polygon(3, 139) == 12187\n    assert area_polygon(3, 140) == 12300\n    assert area_polygon(3, 141) == 12313\n    assert area_polygon(3, 142) == 12336\n    assert area_polygon(3, 143) == 12339\n    assert area_polygon(3, 144) == 12342\n    assert area_polygon(3, 145) == 12341\n    assert area_polygon(3, 146) == 12340\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = get_divisors(n)\n    if sum(divisors) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor.add(i)\n            divisor.add(n/i)\n    return sum(divisor) == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # r = 1\n    # for i in range(1,int(math.sqrt(n))+1):\n    #     if n % i == 0:\n    #         r += i + n/i\n    # return r == n\n    return sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]) == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # if n == 1:\n    #     return False\n    # if n < 1:\n    #     return False\n    # divisors = [1]\n    # for i in range(2, int(math.sqrt(n)) + 1):\n    #     if n % i == 0:\n    #         divisors.append(i)\n    #         divisors.append(int(n / i))\n    # if sum(divisors) == n:\n    #     return True\n    # else:\n    #     return False\n    divisors = []\n    if n < 1:\n        return False\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(int(n / i))\n    return sum(divisors) == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s_divisors = set()\n    divisors_2 = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            s_divisors.add(i)\n            s_divisors.add(n//i)\n            divisors_2.append(i)\n            divisors_2.append(n//i)\n    if sum(divisors_2) == sum(s_divisors):\n        return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x, d = n, 1\n    while d*d <= x:\n        if x % d == 0:\n            d += 1\n        else:\n            d += 2\n    return x % d!= 0\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True \n    x, y = 1, 1\n    if n % 2 == 0:\n        while n % 2 == 0:\n            n = n / 2\n            x = x + 1\n        #print(x, n)\n    else:\n        while n % 2 == 1:\n            n = n - 1\n            y = y + 1\n        #print(y, n)\n    if x == y:\n        return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        # the number is odd, so add 1 to the end\n        limit = int(math.ceil(math.sqrt(n)))\n        # add 1 to the end to get the upper limit\n        for i in range(3, limit + 1, 2):\n            if n % i == 0:\n                if i == n/i:\n                    return True\n                else:\n                    return False\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 1:\n        return False\n    return sum([i for i in range(1, n) if n % i == 0]) == sum([i for i in range(1, int(n**0.5)) if n % i == 0])\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return n == sum_div(n)\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    counter = 0\n    for char in str1:\n        if char in alphabet:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    letter = dict()\n    result = 0\n    for i in xrange(0, 26):\n        letter[chr(ord('a')+i)] = 0\n    for index in xrange(0, len(str1)):\n        if str1[index].isalpha():\n            letter[str1[index].lower()] += 1\n            if letter[str1[index].lower()] == 1:\n                result += 1\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    alphabets = {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26}\n    \n    result = 0\n    for i in range(0,len(str1)):\n        if str1[i].lower() in alphabets:\n            result += (i+1)*alphabets[str1[i].lower()]\n    return result\n    \n    \ndef count_char_rotation(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    alphabets = {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26}\n    \n    result = 0\n    for i in range(1,len(str1)):\n        tmp = str1[i:len(str1)] + str1[0:i]\n        tmp_str = ''\n        for c in tmp:\n            tmp_str += c\n            if tmp_str.lower() in alphabets:\n                result += (i+1)*alphabets[tmp_str.lower()]\n    return result\n    \n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    result = 0\n    for i in range(len(str1)):\n        if str1.lower().count(str1[i]) == 1:\n            result += 1\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for i in range(26):\n        d[chr(97 + i)] = i\n    count = 0\n    for i in range(len(str1)):\n        count += d[str1[i].lower()] == d[str1[i].lower()]\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position = {\n        'a': 1,\n        'b': 2,\n        'c': 3,\n        'd': 4,\n        'e': 5,\n        'f': 6,\n        'g': 7,\n        'h': 8,\n        'i': 9,\n        'j': 10,\n        'k': 11,\n        'l': 12,\n        'm': 13,\n        'n': 14,\n        'o': 15,\n        'p': 16,\n        'q': 17,\n        'r': 18,\n        's': 19,\n        't': 20,\n        'u': 21,\n        'v': 22,\n        'w': 23,\n        'x': 24,\n        'y': 25,\n        'z': 26\n    }\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counts = [0] * 26\n    for char in str1:\n        counts[ord(char) - ord('a')] += 1\n    return counts\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return [len([i for i in range(len(str1)) if str1[i].lower() == str1[j].lower() and i == j]) for j in range(len(str1))]\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letters = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\"\n    ]\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if alphabet.find(str1[i]) == i:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # make a list of xor of all pairs\n    xor_list = [bin(A[i]^A[i+1])[2:].zfill(32) for i in range(len(A)-1)]\n    \n    # count the number of pairs\n    count = 0\n    for i in xor_list:\n        if int(i,2)%2 == 0:\n            count += 1\n    \n    return count\n    \n    \ndef find_even_pair2(A): \n    '''\n    Use binary search to find the number of pairs of integers in a list that xor to an even number.\n    '''\n    # make a list of xor of all pairs\n    xor_list = [bin(A[i]^A[i+1])[2:].zfill(32) for i in range(len(A)-1)]\n    \n    # count the number of pairs\n    count = 0\n    for i in xor_list:\n        if int(i,2)%2 == 0:\n            count += 1\n    \n    return count\n    \n    \ndef find_even_pair3(A): \n    '''\n    Use an array to store the number of pairs.\n    '''\n    # make a list of xor of all pairs\n    xor_list = [bin(A[i]^A[i+1])[2:].zfill(32) for i in range(len(A)-1)]\n    \n    # count the number of pairs\n    count = 0\n    for i in xor_list:\n        if int(i,2)%2 == 0:\n            count += 1\n    \n    return count\n    \n    \ndef find_even_pair4(A): \n    '''\n    Use an array to store the number of pairs.\n    '''\n    # make a list of xor of all pairs\n    xor_list = [bin(A[i]^A[i+1])[2:].zfill(32) for i in range(len(A)-1)]\n    \n    # count the number of pairs\n    count = 0\n    for i in xor_list:\n        if int(i,2)%2 == 0:\n            count += 1\n    \n    return count\n    \n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return sum(a[0]^a[1] for a in zip(A,A[1:]))\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j]%2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if (A[i]^A[j])%2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    seen = []\n    for x in A:\n        if x in seen:\n            return True\n        seen.append(x)\n    return False\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    a = 0\n    for i in range(len(A)):\n        if (A[i] ^ i) % 2 == 0:\n            a += 1\n    return a\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Filter out even numbers\n    evens = filter(lambda x: x%2==0, A)\n    # zip xor with each other element \n    return len(list(zip(*[iter(A)]*2))[0]) - len(set(evens))\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j and (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    def _find_even_pair(A):\n        left = 0\n        right = len(A) - 1\n        count = 0\n        while left < right:\n            if A[left] ^ A[right] % 2 == 0:\n                count += 1\n            left += 1\n            right -= 1\n        return count\n    return _find_even_pair(A)\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    N = len(A)\n    ans = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j] ) %2 == 0:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 0: return 0\n    result = 0\n    evens = [x for x in A if x % 2 == 0]\n    for i in range(len(evens)):\n        for j in range(i, len(evens)):\n            if (evens[i] ^ evens[j]) in evens:\n                result += 1\n    return result\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n.bit_length()-1)\n    \nassert next_power_of_2(1000) == 1024\nassert next_power_of_2(10000) == 1048576\nassert next_power_of_2(1000000) == 1073741824\nassert next_power_of_2(2000000) == 2147483648\nassert next_power_of_2(4) == 4\nassert next_power_of_2(5) == 8\nassert next_power_of_2(9) == 16\nassert next_power_of_2(10) == 32\nassert next_power_of_2(13) == 64\nassert next_power_of_2(15) == 128\nassert next_power_of_2(16) == 256\nassert next_power_of_2(17) == 512\nassert next_power_of_2(18) == 1024\nassert next_power_of_2(19) == 2048\nassert next_power_of_2(20) == 4096\nassert next_power_of_2(21) == 8192\nassert next_power_of_2(22) == 16384\nassert next_power_of_2(23) == 32768\nassert next_power_of_2(24) == 65536\nassert next_power_of_2(25) == 131072\nassert next_power_of_2(26) == 262144\nassert next_power_of_2(27) == 524288\nassert next_power_of_2(28) == 1048576\nassert next_power_of_2(29) == 2097152\nassert next_power_of_2(30) == 4194304\nassert next_power_of_2(31) == 8388608\nassert next_power_of_2(32) == 16777216\nassert next_power_of_2(33) == 33554432\nassert next_power_of_2(34) == 67108864\nassert next_power_of_2(35) == 134217728\nassert next_power_of_2(36) == 268435456\nassert next_power_of_2(37) == 536870912\nassert next_power_of_2(38) == 1073741824\nassert next_power_of_2(39) == 2147483648\nassert next_power_of_2(40) == 4194304\nassert next_power_of_2(41) == 8388608\nassert next_power_of_2(42) == 16777216\nassert next_power_of_2(43) == 33554432\nassert next_power_of_2(44) == 67108864\nassert next_power_of_2(45) == 134217728\nassert next_power_of_2(46) == 268435456\nassert next_power_of_2(47) == 536870912\nassert next_power_of_2(48) == 1073741824\nassert next_power_of_2(49) == 2147483648\nassert next_power_of_2(50) == 4194304\nassert next_power_of_2(51) == 8388608\nassert next_power_of_2(52) == 16777216\nassert next_power_of_2(53) == 33554432\nassert next_power_of_2(54) == 67108864\nassert next_power_of_2(55) == 134217728\nassert next_power_of_2(56) == 268435456\nassert next_power_of_2(57) == 536870912\nassert next_power_of_2(58) == 1073741824\nassert next_power_of_2(59) == 2147483648\nassert next_power_of_2(60) == 4194304\nassert next_power_of_2(61) == 8388608\nassert next_power_of_2(62) == 16777216\nassert next_power_of_2(63) == 33554432\nassert next_power_of_2(64) == 67108864\nassert next_power_of_2(65) == 134217728\nassert next_power_of_2(66) == 268435456\nassert next_power_of_2(67) == 536870912\nassert next_power_of_2(68) == 1073741824\nassert next_power_of_2(69) == 2147483648\nassert next_power_of_2(70) == 4194304\nassert next_power_of_2(71) == 8388608\nassert next_power_of_2(72) == 16777216\nassert next_power_of_2(73) == 33554432\nassert next_power_of_2(74) == 67108864\nassert next_power_of_2(75) == 134217728\nassert next_power_of_2(76) == 268435456\nassert next_power_of_2(77) == 536870912\nassert next_power_of_2(78) == 1073741824\nassert next_power_of_2(79) == 2147483648\nassert next_power_of_2(80) == 4194304\nassert next_power_of_2(81) == 8388608\nassert next_power_of_2(82) == 16777216\nassert next_power_of_2(83) == 33554432\nassert next_power_of_2(84) == 67108864\nassert next_power_of_2(85) == 134217728\nassert next_power_of_2(86) == 268435456\nassert next_power_of_2(87) == 536870912\nassert next_power_of_2(88) == 1073741824\nassert next_power_of_2(89) == 2147483648\nassert next_power_of_2(90) == 4194304\nassert next_power_of_2(91) == 8388608\nassert next_power_of_2(92) == 16777216\nassert next_power_of_2(93) == 33554432\nassert next_power_of_2(94) == 67108864\nassert next_power_of_2(95) == 134217728\nassert next_power_of_2(96) == 268435456\nassert next_power_of_2(97) == 536870912\nassert next_power_of_2(98) == 1073741824\nassert next_power_of_2(99) == 2147483648\nassert next_power_of_2(100) == 4194304\nassert next_power_of_2(101) == 8388608\nassert next_power_of_2(102) == 16777216\nassert next_power_of_2(103) == 33554432\nassert next_power_of_2(104) == 67108864\nassert next_power_of_2(105) == 134217728\nassert next_power_of_2(106) == 268435456\nassert next_power_of_2(107) == 536870912\nassert next_power_of_2(108) == 1073741824\nassert next_power_of_2(109) == 2147483648\nassert next_power_of_2(110) == 4194304\nassert next_power_of_2(111) == 8388608\nassert next_power_of_2(112) == 16777216\nassert next_power_of_2(113) == 33554432\nassert next_power_of_2(114) == 67108864\nassert next_power_of_2(115) == 134217728\nassert next_power_of_2(116) == 268435456\nassert next_power_of_2(117) == 536870912\nassert next_power_of_2(118) == 1073741824\nassert next_power_of_2(119) == 2147483648\nassert next_power_of_2(120) == 4194304\nassert next_power_of_2(121) == 8388608\nassert next_power_of_2(122) == 16777216\nassert next_power_of_2(123) == 33554432\nassert next_power_of_2(124) == 67108864\nassert next_power_of_2(125) == 134217728\nassert next_power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    num = n\n    count = 0\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    import math\n    return math.ceil(math.log(n,2))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** math.ceil(math.log2(n))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    count = 0\n    while n > 1:\n        n /= 2\n        count += 1\n    return pow(2, count)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return int(2**math.ceil(math.log(n,2)))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return int(math.pow(2, math.ceil(math.log(n, 2))))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    count = 1\n    while count <= n:\n        count *= 2\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    assert type(n) == int\n    return 1<<(n-1).bit_length()\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b = []\n    for i in a:\n        if i == x:\n            b.append(i)\n    return len(b)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in range(len(a)): \n        if a[i] == x: \n            count += 1 \n    return count \n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b=[]\n    for i in range(len(a)):\n        if a[i]==x:\n            b.append(i)\n    return b\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a.sort()\n    return len([i for i in a if i==x])\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if a[0]==x:\n        return 1+frequency(a[1:],x)\n    else:\n        return 0+frequency(a[1:],x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    x=int(x)\n    count=0\n    for ele in a:\n        if ele==x:\n            count+=1\n    print count\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in list1:\n        if (m <= i <= n):\n            result += i\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # sum_list = list1[m] + list1[m+1] +... + list1[n]\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    list2 = list1[m:n]\n    sum = 0\n    for num in list2:\n        sum += num\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:\n        return sum(list1)\n    else:\n        return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = sum(list1[m:n])\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:\n        return 0\n    else:\n        return list1[n] - list1[m-1]\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m,n+1):\n        s = s + list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m,n):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return(5*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Perimeter = 2*(math.sqrt(5) - 1)*a\n    # return Perimeter\n    return 2*(math.sqrt(5) - 1)*a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + (a**2)*math.sqrt(5)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*5*math.sqrt(5)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6 * a\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 7 * a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8 * a\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return 10 * a\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (3 * math.sqrt(2) * a) + (4 * a)\ndef perimeter_hexaagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (2 * a) + (3 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (2 * a) + (3 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_hexaagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return (6 * a) + (4 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (2 * a) + (3 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (2 * a) + (3 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (2 * a) + (3 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (8 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a) + (6 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (2 * a) + (4 * a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (4 * a"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a + a + 6\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5+(a**2*(3**0.5)/2)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.ceil(a*(5**0.5))*4\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 7\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 8\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 9\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_octagon_d(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 9 + a\ndef area_octagon_d(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_nonagon_d(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 9 + a\ndef area_nonagon_d(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_heptagon_d(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 7 + a\ndef area_heptagon_d(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_octagon_d(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 8 + a\ndef area_octagon_d(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_nonagon_d(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 8 + a\ndef area_nonagon_d(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_octagon_l(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 9 + a\ndef area_octagon_l(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_nonagon_l(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 9 + a\ndef area_nonagon_l(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_heptagon_l(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 7 + a\ndef area_heptagon_l(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_octagon_l(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 8 + a\ndef area_octagon_l(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_nonagon_l(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 8 + a\ndef area_nonagon_l(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_octagon_b(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 8 + a + a\ndef area_octagon_b(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_nonagon_b(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 8 + a + a\ndef area_nonagon_b(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_heptagon_b(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 7 + a + a\ndef area_heptagon_b(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(3) * math.pow(a, 2) / 4\ndef perimeter_octagon_b(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 8 + a + a\ndef area_octagon_b(a):\n    '''\n    Write a function to find the area of a regular hexagon from the lengt"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    a = s.lower().count('std')\n    return a\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occ = 0\n    for i in range(0, len(s)):\n        if s[i:i+3] =='std':\n            occ += 1\n    return occ\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt = 0\n    n = len(s)\n    for i in xrange(n):\n        if s[i:i+4] =='std':\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tup = test_tuple\n    if not isinstance(tup, tuple):\n        return False\n    return all(isinstance(item, type(tup[0])) for item in tup)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(i) == type(test_tuple[0]) for i in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) > 1:\n        for i in test_tuple:\n            if type(i)!= type(test_tuple[0]):\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0]) is type(test_tuple[1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_of_elements = [type(x) for x in test_tuple]\n    return all(type_of_elements[0] == type(x) for x in type_of_elements)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return type(test_tuple[0]) == type(test_tuple[1])\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    my_list=list(test_tuple)\n    if len(my_list)==0:\n        return\n    elif isinstance(my_list[0],int):\n        return True\n    elif isinstance(my_list[0],str):\n        return True\n    elif isinstance(my_list[0],float):\n        return True\n    elif isinstance(my_list[0],bool):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    if len(test_tuple) == 1:\n        return True\n    else:\n        return all(isinstance(item, type(test_tuple[0])) for item in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    dtype_of_elements = [type(x) for x in test_tuple]\n    return dtype_of_elements.count(dtype_of_elements[0]) == len(dtype_of_elements)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if mid == x:\n            return True\n        if arr[mid] == arr[left]:\n            left += 1\n        elif arr[mid] == arr[right]:\n            right -= 1\n        else:\n            return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # base case: if array is length 1, return the element\n    if n == 1:\n        return arr[0]\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0: return False\n    if n == 1: return True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return arr.count(x) > n // 2\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(0, n):\n        if arr[i] == x:\n            count += 1\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return True if count > n/2 else False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    c = 0\n    for i in range(n):\n        if arr[i] == x:\n            c += 1\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n    \ndef is_majority2(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n-1\n    while left <= right:\n        mid = (left + right) / 2\n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n    if left > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    n = len(arr)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    first = arr[0]\n    if first == x:\n        return True\n    if n == 2:\n        return arr[1] == x\n    if n % 2 == 0:\n        first_count = 0\n        second_count = 0\n        for i in xrange(n):\n            if arr[i] == first:\n                first_count += 1\n            elif arr[i] == x:\n                second_count += 1\n        if second_count > n/2:\n            return True\n        else:\n            return False\n    else:\n        first_count = 0\n        second_count = 0\n        for i in xrange(n):\n            if arr[i] == first:\n                first_count += 1\n            elif arr[i] == x:\n                second_count += 1\n        if second_count > n/2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        if n & 1: \n            count += 1\n        n = n >> 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n&1:\n            count+=1\n        n>>=1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while n:\n        n &= (n-1)\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return len([x for x in bin(n) if x == '1'])\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while (n):\n        if n&1:\n            count += 1\n        n = n >> 1\n    return count\n    \n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        if n & 1: \n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # To get set bits, perform bitwise AND of an integer with itself.\n    # The result of the bitwise AND is a 1 in the result if the bit being ANDed is 1, and 0 otherwise.\n    # If the input is negative, we need to do a 2's compliment (suppose the input is 5, then the result should be -6).\n    # We can do this by adding 1 to the input (5+1=6) and then perform the bitwise AND of the input and the result.\n    # The result of this bitwise and will be another 1 in the result if both bits are 1, and will be 0 otherwise.\n    # This process continues until the input is 0.\n    # Once we reach 0, the count is the number of 1's present in the output.\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Initialize result\n    cnt = 0\n    # Loop to iterate over the bits of 'n'\n    while n:\n        # Count the number of 1s in\n        # each iteration\n        cnt += n & 1\n        # Toggle 'n' to 0\n        n >>= 1\n    return cnt\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str[1:]\n    str = str[:-1]\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string = str\n    if len(string) < 1:\n        return False\n    else:\n        for i in range(1, len(string)):\n            if i%2 == 0:\n                string = string[0:i] + string[i+1:len(string)]\n    return string\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    a = len(l)\n    i = 0\n    while i < a:\n        if i % 2 == 1:\n            del l[i]\n        else:\n            i = i + 1\n    s = ''.join(l)\n    return s\ndef odd_values_string1(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Start writing your code here\n    for i in range(len(str)):\n        if i % 2 == 1:\n            str = str.replace(str[i],\"\")\n    return str\ndef increment_string(str):\n    '''\n    Write a python function to increment the characters of a given string.\n    '''\n    # Start writing your code here\n    for i in range(len(str)):\n        str = str[:i] + chr(ord(str[i]) + 1) + str[i + 1:]\n    return str\ndef increment_string1(str):\n    '''\n    Write a python function to increment the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    a = len(l)\n    i = 0\n    while i < a:\n        if ord(l[i]) < 122:\n            l[i] = chr(ord(l[i]) + 1)\n        else:\n            l[i] = chr(ord(l[i]) - 26)\n            l[i - 1] = chr(ord(l[i - 1]) + 1)\n        i = i + 1\n    s = ''.join(l)\n    return s\ndef sort_characters(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort()\n    s = ''.join(l)\n    return s\ndef sort_characters1(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(reverse=True)\n    s = ''.join(l)\n    return s\ndef sort_characters2(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=str.index)\n    s = ''.join(l)\n    return s\ndef sort_characters3(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: ord(x))\n    s = ''.join(l)\n    return s\ndef sort_characters4(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: str.index(x))\n    s = ''.join(l)\n    return s\ndef sort_characters5(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=str.index)\n    s = ''.join(l)\n    return s\ndef sort_characters6(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: x[0])\n    s = ''.join(l)\n    return s\ndef sort_characters7(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: x[1])\n    s = ''.join(l)\n    return s\ndef sort_characters8(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: x[2])\n    s = ''.join(l)\n    return s\ndef sort_characters9(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: x[2])\n    s = ''.join(l)\n    return s\ndef sort_characters10(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: x[2])\n    s = ''.join(l)\n    return s\ndef sort_characters11(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: x[2])\n    s = ''.join(l)\n    return s\ndef sort_characters12(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: x[2])\n    s = ''.join(l)\n    return s\ndef sort_characters13(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: x[2])\n    s = ''.join(l)\n    return s\ndef sort_characters14(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: x[2])\n    s = ''.join(l)\n    return s\ndef sort_characters15(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: x[2])\n    s = ''.join(l)\n    return s\ndef sort_characters16(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: x[2])\n    s = ''.join(l)\n    return s\ndef sort_characters17(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: x[2])\n    s = ''.join(l)\n    return s\ndef sort_characters18(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: x[2])\n    s = ''.join(l)\n    return s\ndef sort_characters19(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambda x: x[2])\n    s = ''.join(l)\n    return s\ndef sort_characters20(str):\n    '''\n    Write a python function to sort the characters of a given string.\n    '''\n    # Start writing your code here\n    l = list(str)\n    l.sort(key=lambd"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if str == None:\n        return None\n    else:\n        result = \"\"\n        for i in range(0, len(str)):\n            if i%2 == 0:\n                result = result + str[i]\n        return result\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    return ''.join([x for idx, x in enumerate(str) if idx % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = list(str)\n    str = [i for i in str if i.isalpha()]\n    return ''.join(str)\n    \nprint(odd_values_string('abcdegfhijk'))\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if not isinstance(str, str):\n        return 'Invalid Input'\n    if len(str) == 1:\n        return str\n    if len(str) == 0:\n        return ''\n    if len(str) == 2:\n        if ord(str[0]) % 2 == 0 and ord(str[1]) % 2 == 1:\n            return str[0] + str[1]\n        elif ord(str[0]) % 2 == 1 and ord(str[1]) % 2 == 0:\n            return str[1] + str[0]\n    return str[0] + odd_values_string(str[1:])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\nprint(odd_values_string('spam'))\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_of_three = min(a,b,c)\n    return min_of_three\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a\n    elif b < a and b < c: \n        return b\n    else: \n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # if a is greater than b, swap a and b and continue \n    if a > b:\n        a, b = b, a\n    # if a is greater than c, swap a and c and continue \n    if a > c:\n        a, c = c, a\n    # if b is greater than c, swap b and c and continue \n    if b > c:\n        b, c = c, b\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # assert a>=b and a>=c, \"a must be greater than or equal to b and c\"\n    # return min(a,b,c)\n    # return a if a<=b else b if a<b else c\n    return a if a<=b else b if a<b else c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n & (1 << l)):\n        return 0\n    elif (n & (1 << r)):\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n&l == 0 and n&r == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    k = bin(n).count('0')\n    if (k == 0) or (k == 1 and l==r):\n        return True\n    else:\n        return False\n    \ndef all_Bits_Set_In_The_Given_Range_2(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    s = '{0:b}'.format(n)\n    if all(x == '0' for x in s[l:r+1]):\n        return True\n    else:\n        return False\n    \ndef all_Bits_Set_In_The_Given_Range_3(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all(int(i) == 0 for i in bin(n)[l:r+1])\n    \ndef all_Bits_Set_In_The_Given_Range_4(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n).count('0',l,r+1) == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_5(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n).count('0',l,r+1) == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_6(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n).count('0',l,r+1) == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_7(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_8(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_9(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_10(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_11(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_12(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_13(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_14(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_15(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_16(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_17(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_18(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_19(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_20(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_21(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_22(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_23(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_24(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_25(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (bin(n)[l:r+1].count('0') == 0)\n    \ndef all_Bits_Set_In_The_Given_Range_26(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given rang"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (n & l) == 0 and (n & r) == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l,r+1):\n        if n & i == 0:\n            count = count + 1\n    if count == 1:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n >> l) & 1) == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = n & (2**l-1)\n    return not n & (2**r-1)\n    \n    "
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n & (1<<l)):\n        return 0\n    if (n & (1<<r)):\n        return 0\n    for i in range(l+1,r):\n        if (n & (1<<i)):\n            return 0\n    return 1\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    ans = True\n    for i in range(l,r+1):\n        if n&(1<<i):\n            ans = False\n            break\n    return ans\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = abs(n)\n    m = 2**n\n    for i in range(l,r+1):\n        if (i&m)==0:\n            return False\n    return True\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = []\n    count = 0\n    for x in arr:\n        if x < 0:\n            result.append(x)\n            count += 1\n        else:\n            result.append(x)\n            count += 1\n    return result + [0] * (n - count)\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    if arr == None or len(arr) == 0:\n        return None\n    \n    i = 0\n    j = len(arr) - 1\n    \n    while i < n and j >= n:\n        if arr[i] < 0 and arr[j] < 0:\n            i += 1\n        elif arr[i] >= 0 and arr[j] >= 0:\n            j -= 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    \n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[n:] + arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your code here\n    arr_pos = []\n    arr_neg = []\n    \n    for ele in arr:\n        if ele >= 0:\n            arr_pos.append(ele)\n        else:\n            arr_neg.append(ele)\n    \n    if len(arr_pos) > n:\n        return arr_pos[0:n] + arr_neg\n    else:\n        return arr_pos + arr_neg[0:n - len(arr_pos)]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = [el for el in arr]\n    for i in range(0, n):\n        if arr[i] < 0:\n            j = i\n            while j < len(arr):\n                if arr[j] < 0:\n                    break\n                j += 1\n            arr.insert(j, arr.pop(i))\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return sorted(arr, reverse = True)[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[:n] + arr[n:][::-1]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if arr[0] < 0:\n        arr = arr[0] + arr[1:]\n    elif arr[-1] > 0:\n        arr = arr[-1:0:-1] + arr\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[n:] + arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] > 0:\n            i += 1\n            continue\n        if arr[j] < 0:\n            j -= 1\n            continue\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == \" \":\n            new_str += char\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    for c in str1:\n        if c =='':\n            c = char\n        str2 = str2 + c\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if type(str1)!= str:\n        return False\n    if char == '' or char =='':\n        return str1\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1[i] = char\n    return ''.join(str1)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i =='':\n            str2 += char\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    assert isinstance(str1, str)\n    assert isinstance(char, str)\n    assert len(char) == 1\n    new_str = str1.replace(' ', char)\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\"+char+\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char in str1:\n        return str1.replace(' ','')\n    else:\n        return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = char + str1 + char\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        heapq.heapify(list1)\n        return list1[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    sorted_list = sorted(list1,key=float,reverse = True)\n    return sorted_list[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # your code here\n    return heapq.nlargest(n,list1)\n    \ndef larg_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    # your code here\n    return heapq.nsmallest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        return list1[-n:]\n    \ndef larg_nume(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        return list1[:n]\n    \ndef larg_nume_val(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list with their values.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        return list1[:n]\n    \ndef main():\n    #Testing larg_nnum function\n    print larg_nnum([3,1,2,4,5,6],2)\n    print larg_nnum([1,2,3,4,5,6],2)\n    print larg_nnum([1,2,3,4,5,6],3)\n    print larg_nnum([3,1,2,4,5,6],10)\n    print larg_nnum([],10)\n    print larg_nnum([-1,0,-2,3,4],2)\n    print larg_nnum([-1,0,-2,3,4],3)\n    print larg_nnum([-1,0,-2,3,4],10)\n    print larg_nnum([-1,0,-2,3,4],0)\n    print larg_nnum([1,0,-2,3,4],0)\n    print larg_nnum([0,-1,0,0],1)\n    print larg_nnum([0,-1,0,0],2)\n    print larg_nnum([0,-1,0,0],3)\n    print larg_nnum([0,-1,0,0],4)\n    print larg_nnum([0,-1,0,0],5)\n    print larg_nnum([0,-1,0,0],6)\n    print larg_nnum([0,-1,0,0],7)\n    print larg_nnum([0,-1,0,0],8)\n    print larg_nnum([0,-1,0,0],9)\n    print larg_nnum([0,-1,0,0],10)\n    print larg_nnum([0,-1,0,0],11)\n    print larg_nnum([0,-1,0,0],12)\n    print larg_nnum([0,-1,0,0],13)\n    print larg_nnum([0,-1,0,0],14)\n    print larg_nnum([0,-1,0,0],15)\n    print larg_nnum([0,-1,0,0],16)\n    print larg_nnum([0,-1,0,0],17)\n    print larg_nnum([0,-1,0,0],18)\n    print larg_nnum([0,-1,0,0],19)\n    print larg_nnum([0,-1,0,0],20)\n    print larg_nnum([0,-1,0,0],21)\n    print larg_nnum([0,-1,0,0],22)\n    print larg_nnum([0,-1,0,0],23)\n    print larg_nnum([0,-1,0,0],24)\n    print larg_nnum([0,-1,0,0],25)\n    print larg_nnum([0,-1,0,0],26)\n    print larg_nnum([0,-1,0,0],27)\n    print larg_nnum([0,-1,0,0],28)\n    print larg_nnum([0,-1,0,0],29)\n    print larg_nnum([0,-1,0,0],30)\n    print larg_nnum([0,-1,0,0],31)\n    print larg_nnum([0,-1,0,0],32)\n    print larg_nnum([0,-1,0,0],33)\n    print larg_nnum([0,-1,0,0],34)\n    print larg_nnum([0,-1,0,0],35)\n    print larg_nnum([0,-1,0,0],36)\n    print larg_nnum([0,-1,0,0],37)\n    print larg_nnum([0,-1,0,0],38)\n    print larg_nnum([0,-1,0,0],39)\n    print larg_nnum([0,-1,0,0],40)\n    print larg_nnum([0,-1,0,0],41)\n    print larg_nnum([0,-1,0,0],42)\n    print larg_nnum([0,-1,0,0],43)\n    print larg_nnum([0,-1,0,0],44)\n    print larg_nnum([0,-1,0,0],45)\n    print larg_nnum([0,-1,0,0],46)\n    print larg_nnum([0,-1,0,0],47)\n    print larg_nnum([0,-1,0,0],48)\n    print larg_nnum([0,-1,0,0],49)\n    print larg_nnum([0,-1,0,0],50)\n    print larg_nnum([0,-1,0,0],51)\n    print larg_nnum([0,-1,0,0],52)\n    print larg_nnum([0,-1,0,0],53)\n    print larg_nnum([0,-1,0,0],54)\n    print larg_nnum([0,-1,0,0],55)\n    print larg_nnum([0,-1,0,0],56)\n    print larg_nnum([0,-1,0,0],57)\n    print larg_nnum([0,-1,0,0],58)\n    print larg_nnum([0,-1,0,0],59)\n    print larg_nnum([0,-1,0,0],60)\n    print larg_nnum([0,-1,0,0],61)\n    print larg_nnum([0,-1,0,0],62)\n    print larg_nnum([0,-1,0,0],63)\n    print larg_nnum([0,-1,0,0],64)\n    print larg_nnum([0,-1,0,0],65)\n    print larg_nnum([0,-1,0,0],66)\n    print larg_nnum([0,-1,0,0],67)\n    print larg_nnum([0,-1,0,0],68)\n    print larg_nnum([0,-1,0,0],69)\n    print larg_nnum([0,-1,0,0],70)\n    print larg_nnum([0,-1,0,0],71)\n    print larg_nnum([0,-1,0,0],72)\n    print larg_nnum([0,-1,0,0],73)\n    print larg_nnum([0,-1,0,0],74)\n    print larg_nnum([0,-1,0,0],75)\n    print larg_nnum([0,-1,0,0],76)\n    print larg_nnum([0,-1,0,0],77)\n    print larg_nnum([0,-1,0,0],78)\n    print larg_nnum([0,-1,0,0],79)\n    print larg_nnum([0,-1,0,0],80)\n    print larg_nnum([0,-1,0,0],81)\n    print larg_nnum([0,-1,0,0],82)\n    print larg_nnum([0,-1,0,0],83)\n    print larg_nnum([0,-1,0,0],84)\n    print larg_nnum([0,-1,0,0],85)\n    print larg_nnum([0,-1,0,0],86)\n    print larg_nnum([0,-1,0,0],87)\n    print larg_nnum([0,-1,0,0],88)\n    print larg_n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>len(list1) or n<0:\n        print('wrong input')\n    else:\n        list1.sort()\n        list2=[]\n        for i in range(n):\n            list2.append(list1[len(list1)-1-i])\n        return list2\ndef ksmallest(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns a list containing the k smallest items from the list.\n    '''\n    if k>len(list1) or k<0:\n        print('wrong input')\n    else:\n        list1.sort()\n        list2=[]\n        for i in range(k):\n            list2.append(list1[i])\n        return list2\ndef larg_dis(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>len(list1) or n<0:\n        print('wrong input')\n    else:\n        list1.sort()\n        list2=[]\n        for i in range(n):\n            list2.append(list1[len(list1)-1-i])\n        return list2\ndef ksmallest_dis(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns a list containing the k smallest items from the list.\n    '''\n    if k>len(list1) or k<0:\n        print('wrong input')\n    else:\n        list1.sort()\n        list2=[]\n        for i in range(k):\n            list2.append(list1[i])\n        return list2\ndef list_str(list1):\n    '''\n    Write a function that takes in a list and returns a string that contains the elements in the list.\n    '''\n    str1='['\n    for i in range(len(list1)-1):\n        str1=str1+str(list1[i])\n        str1=str1+','\n    str1=str1+str(list1[len(list1)-1])\n    str1=str1+']'\n    return str1\ndef list_sum(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all the elements in the list.\n    '''\n    sum1=0\n    for i in range(len(list1)):\n        sum1=sum1+list1[i]\n    return sum1\ndef list_max(list1):\n    '''\n    Write a function that takes in a list and returns the maximum value in the list.\n    '''\n    max1=list1[0]\n    for i in range(1,len(list1)):\n        if max1<list1[i]:\n            max1=list1[i]\n    return max1\ndef list_min(list1):\n    '''\n    Write a function that takes in a list and returns the minimum value in the list.\n    '''\n    min1=list1[0]\n    for i in range(1,len(list1)):\n        if min1>list1[i]:\n            min1=list1[i]\n    return min1\ndef list_len(list1):\n    '''\n    Write a function that takes in a list and returns the length of the list.\n    '''\n    return len(list1)\ndef list_index(list1,v):\n    '''\n    Write a function that takes in a list and an integer v and returns the index in the list of the integer v.\n    '''\n    if v in list1:\n        for i in range(len(list1)):\n            if v==list1[i]:\n                return i\n    else:\n        print('not found')\ndef list_reverse(list1):\n    '''\n    Write a function that takes in a list and returns a new list that is the reverse of the original list.\n    '''\n    new_list=[]\n    for i in range(len(list1)):\n        new_list.append(list1[len(list1)-1-i])\n    return new_list\ndef list_pop(list1):\n    '''\n    Write a function that takes in a list and returns a new list that is the same as the original list except with the last element.\n    '''\n    if len(list1)==0:\n        print('empty list')\n    else:\n        list1.pop()\n        return list1\ndef list_append(list1,v):\n    '''\n    Write a function that takes in a list and an integer v and returns a new list that is the same as the original list except with v inserted at the end of the list.\n    '''\n    if len(list1)==0:\n        print('empty list')\n    else:\n        list1.append(v)\n        return list1\ndef list_insert(list1,v,i):\n    '''\n    Write a function that takes in a list, an integer v and an integer i and inserts v at the ith position of the list.\n    '''\n    if i>len(list1) or i<0:\n        print('wrong input')\n    else:\n        list1.insert(i,v)\n        return list1\ndef list_remove(list1,v):\n    '''\n    Write a function that takes in a list and an integer v and removes the ith element from the list.\n    '''\n    if v in list1:\n        for i in range(len(list1)):\n            if v==list1[i]:\n                list1.pop(i)\n                return list1\n    else:\n        print('not found')\ndef list_sort(list1):\n    '''\n    Write a function that takes in a list and returns a new list that is the same as the original list but sorted.\n    '''\n    if len(list1)==0:\n        print('empty list')\n    else:\n        list1.sort()\n        return list1\ndef list_bubble_sort(list1):\n    '''\n    Write a function that takes in a list and returns a new list that is the same as the original list but sorted using the bubble sort algorithm.\n    '''\n    if len(list1)==0:\n        print('empty list')\n    else:\n        for i in range(len(list1)):\n            for j in range(len(list1)-1-i):\n                if list1[j]>list1[j+1]:\n                    list1[j],list1[j+1]=list1[j+1],list1[j]\n        return list1\ndef list_merge(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains the elements from both lists in the same order.\n    '''\n    if len(list1)>=len(list2):\n        new_list=list1\n        for i in range(len(list2)):\n            new_list.append(list2[i])\n        return new_list\n    else:\n        new_list=list2\n        for i in range(len(list1)):\n            new_list.append(list1[i])\n        return new_list\ndef list_contains(list1,v):\n    '''\n    Write a function that takes in a list and an integer v and returns True if the integer v is in the list and False otherwise.\n    '''\n    if v in list1:\n        return True\n    else:\n        return False\ndef list_member(list1,v):\n    '''\n    Write a function that takes in a list and an integer v and returns True if the integer v is in the list and False otherwise.\n    '''\n    if v in list1:\n        return True\n    else:\n        return False\ndef list_rotate(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns a new list that is the same as the original list but with the first k elements of the list shifted to the end of the list.\n    '''\n    if k>len(list1) or k<0:\n        print('wrong input')\n    else:\n        list1.append(list1[0])\n        list1.pop(0)\n        return list1\ndef list"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1,reverse=True)[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=sorted(list1,reverse=True)\n    list3=list2[0:n]\n    return list3\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    new_list=list(list1)\n    if n<1:\n        return \"Enter a positive integer\"\n    elif len(new_list)<=n:\n        return new_list\n    else:\n        heapq.heapify(new_list)\n        print(new_list)\n        heapq.heappop(new_list)\n        return new_list\n        \nlist1=[1,2,3,4,5,6]\nprint(larg_nnum(list1,3))\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    def large_sub(list1,n):\n        sub=[]\n        if n<=0:\n            return []\n        else:\n            for i in range(n):\n                max=0\n                for j in range(len(list1)):\n                    if list1[j]>max:\n                        max=list1[j]\n                        ind=j\n                sub.append(max)\n                list1[ind]=0\n        return sub\n    def large_sub1(list1,n):\n        sub=[]\n        if n<=0:\n            return []\n        else:\n            for i in range(n):\n                max=list1[0]\n                for j in range(len(list1)):\n                    if list1[j]>max:\n                        max=list1[j]\n                        ind=j\n                sub.append(max)\n                list1[ind]=0\n        return sub\n    return large_sub(list1,n)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = math.pi\n    return pi * (r**2) * 2 + pi * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    S = math.pi*(r**2)*h\n    return S\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi * (r**2) + (2 * h * r)\n    \ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi * (r**2) + (2 * (r**2 + h**2)**0.5)\n    \ndef lateralvolume_cylinder(r,h):\n    '''\n    Write a function to find the lateral volume of a cylinder.\n    '''\n    return pi * (r**2) * h\n    \ndef lateralvolume_cone(r,h):\n    '''\n    Write a function to find the lateral volume of a cone.\n    '''\n    return pi * (r**2) * (h**2) / 3\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi * (r**2) * 2 + (2 * (r**2 + h**2)**0.5)\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi * (r**2) * 2 + (2 * h * (r**2 + h**2)**0.5)\n    \ndef lateralvolume_cylinder(r,h):\n    '''\n    Write a function to find the lateral volume of a cylinder.\n    '''\n    return pi * (r**2) * h\n    \ndef lateralvolume_cone(r,h):\n    '''\n    Write a function to find the lateral volume of a cone.\n    '''\n    return pi * (r**2) * h / 3\n    "
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #the area of a cylinder is the spherical area + the area of a circle\n    #2*pi*r^2 + 2*pi*r*h\n    return (2*pi*r**2 + 2*pi*r*h)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi * (r**2) + 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    import math\n    area=math.pi*r*(r+h)\n    return area\n    \n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    \n    import math\n    volume=(math.pi*r*r*h)/3\n    return volume\n    \n    \ndef is_rectangular(r,h):\n    '''\n    Write a function to find if a cylinder is rectangular or not.\n    '''\n    \n    import math\n    if (r**2)*h>=(r*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_cuboid(b,h):\n    '''\n    Write a function to find if a cylinder is cuboid or not.\n    '''\n    \n    import math\n    if (b**3)*h>=(b*3)**3*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_spherical(r):\n    '''\n    Write a function to find if a sphere is spherical or not.\n    '''\n    \n    import math\n    if math.pi*r**2>=math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_circular(r):\n    '''\n    Write a function to find if a cylinder is circular or not.\n    '''\n    \n    import math\n    if (r**2)*math.pi>=math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_conical(r,h):\n    '''\n    Write a function to find if a cone is conical or not.\n    '''\n    \n    import math\n    if (r**2)*h>=r*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_convex(r,h):\n    '''\n    Write a function to find if a cone is convex or not.\n    '''\n    \n    import math\n    if (r**2)*h>=(r*math.tan(math.pi/3))**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_concav(r,h):\n    '''\n    Write a function to find if a cone is concav or not.\n    '''\n    \n    import math\n    if (r**2)*h>=r*math.tan(math.pi/6)*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_right(r,h):\n    '''\n    Write a function to find if a cylinder is right or not.\n    '''\n    \n    import math\n    if (r**2)*h>=(r*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_square(r,h):\n    '''\n    Write a function to find if a cylinder is square or not.\n    '''\n    \n    import math\n    if (r**2)*h>=r*2**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_parallelogram(a,b):\n    '''\n    Write a function to find if a cylinder is parallelogram or not.\n    '''\n    \n    import math\n    if a**2+b**2>=(a*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_trap(a,b,c):\n    '''\n    Write a function to find if a cylinder is trap or not.\n    '''\n    \n    import math\n    if a**2+b**2+c**2>=(a*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_octahedral(a,b):\n    '''\n    Write a function to find if a cylinder is octahedral or not.\n    '''\n    \n    import math\n    if a**2+b**2+2*a*b>=(a*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_icosahedral(a,b):\n    '''\n    Write a function to find if a cylinder is icosahedral or not.\n    '''\n    \n    import math\n    if a**2+b**2+2*a*b+2*b*a>=(a*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_tetrahedral(a,b,c):\n    '''\n    Write a function to find if a cylinder is tetrahedral or not.\n    '''\n    \n    import math\n    if a**2+b**2+c**2+2*a*b+2*b*c+2*a*c>=(a*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_triangular(a,b,c):\n    '''\n    Write a function to find if a cylinder is triangular or not.\n    '''\n    \n    import math\n    if a**2+b**2+c**2>=(a*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_hypotenuse(a,b):\n    '''\n    Write a function to find if a cylinder is hypotenuse or not.\n    '''\n    \n    import math\n    if a**2+b**2>=(a*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_bipyramid(a,b,c):\n    '''\n    Write a function to find if a cylinder is bipyramid or not.\n    '''\n    \n    import math\n    if a**2+b**2+c**2>=(a*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_dodecagonal(a,b,c):\n    '''\n    Write a function to find if a cylinder is dodecagonal or not.\n    '''\n    \n    import math\n    if a**2+b**2+c**2+2*a*b+2*b*c+2*a*c>=(a*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_trigonoidal(a,b,c):\n    '''\n    Write a function to find if a cylinder is trigonoidal or not.\n    '''\n    \n    import math\n    if a**2+b**2+c**2>=(a*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_trinagular(a,b,c):\n    '''\n    Write a function to find if a cylinder is triangular or not.\n    '''\n    \n    import math\n    if a**2+b**2+c**2>=(a*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_square_pyramid(a,b,c):\n    '''\n    Write a function to find if a cylinder is square pyramid or not.\n    '''\n    \n    import math\n    if a**2+b**2+c**2>=(a*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_right_pyramid(a,b,c):\n    '''\n    Write a function to find if a cylinder is right pyramid or not.\n    '''\n    \n    import math\n    if a**2+b**2+c**2>=(a*2)**2*math.pi:\n        return True\n    else:\n        return False\n    \n    \ndef is_right_octahedral(a,b,c):\n    '''\n    Write a function to find if a cylinder is right octahedral or not.\n    '''\n    \n    import math\n    i"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*r*r*2 + 2*math.pi*r*h\n    #return math.pi*r*r\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2 + h**2)/4\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A = 2 * pi * r * h\n    B = pi * r**2\n    return A,B\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    return (l*l*l)\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(3**0.5 * l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    from math import pow\n    return pow(l, 3)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        if n & 1 == 0:\n            return even_bit_set_number(n >> 1)\n        else:\n            return (n * 3) + 1\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    # Get the rightmost 1 bit\n    while n:\n        if n & 1:\n            even_bits += 1\n        n = n >> 1\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n &= ~0x1\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n=n&(n-1)\n    n=n|(1<<(n.bit_length()-1))\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert to binary string\n    # use int(binary_string, 2) to convert the string to an integer\n    return int(''.join('1' if int(x) % 2 else '0' for x in bin(n)[2:]), 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    i = n\n    while i > 0:\n        if i & 1 == 0:\n            i = i >> 1\n        else:\n            i = i - 1\n            i = i | 1\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # n = int(n)\n    if n < 0:\n        return 0\n    else:\n        res = 0\n        while n:\n            res += n & 1\n            n >>= 1\n        return res\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 1\n    return n | mask \n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    n &= n - 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0x55555555\n    n |= (n >> 2) & 0x33333333\n    n |= (n >> 2) & 0x33333333\n    return n\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # get frequency\n    counter = Counter(test_list)\n    # print(counter)\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    print('\\nTESTING check_occurences()...')\n    assert check_occurences([(1, 1), (2, 2), (3, 3), (4, 4), (4, 4), (5, 5)]) == {(1, 1): 1, (2, 2): 1, (3, 3): 1, (4, 4): 2, (5, 5): 1}\n    assert check_occurences([(1, 1), (1, 1), (1, 1), (2, 2), (3, 3), (3, 3)]) == {(1, 1): 3, (2, 2): 1, (3, 3): 3}\n    assert check_occurences([(1, 1), (1, 1), (1, 1), (2, 2), (3, 3), (3, 3), (3, 3), (3, 3)]) == {(1, 1): 4, (2, 2): 1, (3, 3): 4}\n    assert check_occurences([(1, 1), (1, 1), (1, 1), (2, 2), (2, 2), (3, 3), (3, 3), (3, 3), (3, 3)]) == {(1, 1): 4, (2, 2): 2, (3, 3): 4}\n    assert check_occurences([(1, 1), (1, 1), (1, 1), (2, 2), (3, 3), (3, 3), (3, 3), (3, 3), (4, 4), (5, 5)]) == {(1, 1): 4, (2, 2): 2, (3, 3): 4, (4, 4): 1, (5, 5): 1}\n    assert check_occurences([(1, 1), (1, 1), (1, 1), (2, 2), (3, 3), (3, 3), (3, 3), (3, 3), (4, 4), (5, 5), (5, 5)]) == {(1, 1): 4, (2, 2): 2, (3, 3): 4, (4, 4): 1, (5, 5): 2}\n    assert check_occurences([(1, 1), (1, 1), (1, 1), (2, 2), (3, 3), (3, 3), (3, 3), (3, 3), (4, 4), (5, 5), (6, 6)]) == {(1, 1): 4, (2, 2): 2, (3, 3): 4, (4, 4): 1, (5, 5): 2, (6, 6): 1}\n    print('SUCCESSFUL!')\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for tup in test_list:\n        if tup in dictionary:\n            dictionary[tup] += 1\n        else:\n            dictionary[tup] = 1\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict = {}\n    for item in test_list:\n        if item in dict:\n            dict[item] +=1\n        else:\n            dict[item] = 1\n    return dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    print \"check_occurences\"\n    print test_list\n    occurence_dict = Counter(test_list)\n    print occurence_dict\n    return occurence_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = Counter(test_list)\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for items in test_list:\n        key = items\n        value = test_list.count(items)\n        test_dict[key] = value\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str.split(\" \"))\n    \ndef number_of_substrings_v2(str):\n    return len(re.findall(r'[\\w]+', str))\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    i = 0\n    j = 0\n    while j < len(str):\n        if str[j]!='':\n            i = j\n            j = j + 1\n            while j < len(str) and str[j]!='':\n                j = j + 1\n            count = count + 1\n        else:\n            j = j + 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    '''\n    solution:\n    We will store the indices of all the non-empty substrings and use a hashtable to keep track of the numbers of non-empty substrings.\n    '''\n    #empty string\n    if not str: \n        return 0\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    dict = {}\n    count = 0\n    length = len(str)\n    for i in xrange(length):\n        for j in xrange(i,length):\n            substr = str[i:j+1]\n            if substr:\n                count += 1\n                dict[substr] = count\n    return dict\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str)-sum(str.count(letter) for letter in set(str))\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring = ''\n    count = 0\n    for i in range(len(str)):\n        substring += str[i]\n        if substring!= '':\n            count += 1\n        substring = ''\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str)==0:\n        return 0\n    i=0\n    j=1\n    count=0\n    while j<len(str):\n        if str[i]==str[j]:\n            j+=1\n        else:\n            i+=1\n            count+=1\n            j=i+1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str) - len(str.replace(' ', ''))\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if not str:\n        return 0\n    if len(str)==1:\n        return 1\n    count = 1\n    l = []\n    for i in range(1, len(str)):\n        if len(str[i-1:i+1])==2:\n            l.append(str[i-1:i+1])\n        else:\n            l.append(str[i-1:i+1])\n            count = count + len(l)\n            l=[]\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    m = int(m)\n    n = int(n)\n    if n == 0:\n        return 1\n    else:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(n):\n        if (i + 2) * (i + 1) / 2 <= m:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m * n\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = n + 1\n    for i in range(2, n+1):\n        total *= m - i + 1\n    return total\n    \n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2:\n        return 0\n    elif m == 2:\n        return 1\n    else:\n        return (get_total_number_of_sequences(m-1,n) + get_total_number_of_sequences(m-2,n))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return (m*(m+1))/2\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    if m == 1:\n        return 1\n    elif n == 1:\n        return 1\n    elif m == 2 and n == 2:\n        return 2\n    else:\n        if n == 2:\n            count += get_total_number_of_sequences(m, m)\n        else:\n            for i in range(m-1, 2, -1):\n                count += get_total_number_of_sequences(i, n-1)\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 1:\n        return 1\n    if m == 2:\n        return 1\n    if m == 3:\n        return 2\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    return get_total_number_of_sequences(m-1,n) + get_total_number_of_sequences(m, n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return n\n    if n == 2:\n        return m\n    return (get_total_number_of_sequences(m,n-1) + m*get_total_number_of_sequences(m-1,n-1))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    assert m > 1 and n > 0 and isinstance(m,int) and isinstance(n,int) and n > 0\n    if n==1:\n        return m\n    else:\n        return (m*(m-1))/2*n\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        return \"Lists not the same length\"\n    for i in range(len(list1)-1):\n        list1[i] = list1[i+1]\n    for i in range(len(list2)):\n        list1[-1-i] = list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        return list1\n    else:\n        list1[-1] = list2\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    try:\n        list1[-1:] = list2\n        return list1\n    except:\n        print \"Error: your second list should have the same length as the first list.\"\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:len(list1)-1]+list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for element in list1:\n        new_list.append(element)\n    new_list.append(list2)\n    return new_list\n    "
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1):\n        list1[i] = list2[i]\n    list1[len(list1)-1] = list2[len(list2)-1]\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    print len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    d = dict()\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(0,len(str1)):\n        count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for char in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num_charac = 0\n    for char in str1:\n        num_charac += 1\n    return num_charac\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \n    \ndef count_letters(str1):\n    '''\n    Write a function to count the total number of letters in a string.\n    '''\n    return len(str1)\n    \n    \ndef count_vowels(str1):\n    '''\n    Write a function that counts the number of vowels in a string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in str1:\n        if i in vowels:\n            count += 1\n    return count\n    \n    \ndef count_consonants(str1):\n    '''\n    Write a function that counts the number of consonants in a string.\n    '''\n    count = 0\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n    for i in str1:\n        if i in consonants:\n            count += 1\n    return count\n    \n    \ndef count_spaces(str1):\n    '''\n    Write a function to count the total number of spaces in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i =='':\n            count += 1\n    return count\n    \n    \ndef count_digit(str1):\n    '''\n    Write a function to count the total number of digits in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i in ['1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            count += 1\n    return count\n    \n    \ndef count_digit_in_range(str1, start, stop):\n    '''\n    Write a function to count the total number of digits in a string within a range\n    '''\n    count = 0\n    for i in str1:\n        if i in ['1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            if int(i) >= start and int(i) <= stop:\n                count += 1\n    return count\n    \n    \ndef count_lowercase_letter(str1):\n    '''\n    Write a function to count the total number of lowercase letters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i.islower():\n            count += 1\n    return count\n    \n    \ndef count_uppercase_letter(str1):\n    '''\n    Write a function to count the total number of uppercase letters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i.isupper():\n            count += 1\n    return count\n    \n    \ndef count_lowercase_vowels(str1):\n    '''\n    Write a function to count the total number of lowercase vowels in a string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in str1:\n        if i in vowels:\n            if i.islower():\n                count += 1\n    return count\n    \n    \ndef count_uppercase_vowels(str1):\n    '''\n    Write a function to count the total number of uppercase vowels in a string.\n    '''\n    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    for i in str1:\n        if i in vowels:\n            if i.isupper():\n                count += 1\n    return count\n    \n    \ndef count_whitespace(str1):\n    '''\n    Write a function to count the total number of whitespace characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i =='':\n            count += 1\n    return count\n    \n    \ndef count_digit_in_range_v2(str1, start, stop):\n    '''\n    Write a function to count the total number of digits in a string within a range.\n    '''\n    count = 0\n    for i in str1:\n        if i in ['1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            if int(i) >= start and int(i) <= stop:\n                count += 1\n    return count\n    \n    \ndef count_upper_in_range(str1, start, stop):\n    '''\n    Write a function to count the total number of uppercase letters in a string within a range.\n    '''\n    count = 0\n    for i in str1:\n        if i.isupper():\n            if int(i) >= start and int(i) <= stop:\n                count += 1\n    return count\n    \n    \ndef count_lower_in_range(str1, start, stop):\n    '''\n    Write a function to count the total number of lowercase letters in a string within a range.\n    '''\n    count = 0\n    for i in str1:\n        if i.islower():\n            if int(i) >= start and int(i) <= stop:\n                count += 1\n    return count\n    \n    \ndef count_lowercase_in_range(str1, start, stop):\n    '''\n    Write a function to count the total number of lowercase letters in a string within a range.\n    '''\n    count = 0\n    for i in str1:\n        if i.islower():\n            if int(i) >= start and int(i) <= stop:\n                count += 1\n    return count\n    \n    \ndef count_uppercase_in_range(str1, start, stop):\n    '''\n    Write a function to count the total number of uppercase letters in a string within a range.\n    '''\n    count = 0\n    for i in str1:\n        if i.isupper():\n            if int(i) >= start and int(i) <= stop:\n                count += 1\n    return count\n    \n    \ndef count_lowercase_in_range_v2(str1, start, stop):\n    '''\n    Write a function to count the total number of lowercase letters in a string within a range.\n    '''\n    count = 0\n    for i in str1:\n        if i.islower():\n            if int(i) >= start and int(i) <= stop:\n                count += 1\n    return count\n    \n    \ndef count_uppercase_in_range_v2(str1, start, stop):\n    '''\n    Write a function to count the total number of uppercase letters in a string within a range.\n    '''\n    count = 0\n    for i in str1:\n        if i.isupper():\n            if int(i) >= start and int(i) <= stop:\n                count += 1\n    return count\n    \n    \ndef count_lowercase_in_range_v3(str1, start, stop):\n    '''\n    Write a function to count the total number of lowercase letters in a string within a range.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].islower():\n            if int(str1[i]) >= start and int(str1[i]) <= stop:\n                count += 1\n    return count\n    \n    \ndef count_uppercase_in_range_v3(str1, start, stop):\n    '''\n    Write a function to count the total number of uppercase letters in a string within a range.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            if int(str1[i]) >= start and int(str1[i]) <= stop:\n                count += 1\n    return count\n    \n    \ndef count_lowercase_in_range_v4(str1, start, stop):\n    '''\n    Write a function to count the total number of lowercase letters in a string within a range.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if st"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root=math.ceil(math.sqrt(N))\n    while True:\n        if root**2>N:\n            break\n        root+=1\n    return root**2\ndef is_perfect_square(N):\n    '''\n    Write a python function to check whether the given number is a perfect square\n    '''\n    root=math.sqrt(N)\n    if int(root)==root:\n        return True\n    return False\ndef is_perfect_square2(N):\n    '''\n    Write a python function to check whether the given number is a perfect square\n    '''\n    i=1\n    root=math.sqrt(N)\n    while i<root:\n        if root%i==0:\n            root1=root/i\n            if i*i==N:\n                return True\n        i+=1\n    return False\ndef is_perfect_square3(N):\n    '''\n    Write a python function to check whether the given number is a perfect square\n    '''\n    root=math.sqrt(N)\n    return int(root)**2==N\ndef find_fibo(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    num1=0\n    num2=1\n    for i in range(N):\n        num1,num2=num2,num1+num2\n    return num1\ndef find_fibo2(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    a,b=0,1\n    for i in range(N):\n        a,b=b,a+b\n    return a\ndef find_fibo3(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return (math.sqrt(5)+1)/2**N-(math.sqrt(5)-1)/2**N\ndef find_fibo4(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    x=1\n    y=1\n    for i in range(N-1):\n        x,y=y,x+y\n    return x\ndef find_fibo5(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo6(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    a,b=0,1\n    for i in range(N):\n        a,b=b,a+b\n    return a\ndef find_fibo7(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return (5**N-2**(N-1))/(5-2)\ndef find_fibo8(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return (2**(1/2)-1)**N\ndef find_fibo9(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return 2**(1/2)**N\ndef find_fibo10(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return (5**N-2**(N-1))/(5-2)\ndef find_fibo11(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((3**(1/2)-1)**N/(3-1))\ndef find_fibo12(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((3**(1/2)-1)**N/(3-1))\ndef find_fibo13(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((3**(1/2)-1)**N/(3-1))\ndef find_fibo14(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo15(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo16(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo17(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo18(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo19(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo20(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo21(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo22(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo23(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo24(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo25(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo26(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo27(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo28(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo29(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo30(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo31(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))\ndef find_fibo32(N):\n    '''\n    Write a python function to find Nth fibonacci number\n    '''\n    return int((5**N-2**(N-1))/(5-2))"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    if N == root**2:\n        return root + 1\n    else:\n        return root**2\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqr = int(math.sqrt(N))\n    #print sqr\n    while(sqr*sqr<=N):\n        sqr+=1\n    return sqr*sqr\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return 1\n    else:\n        return int(math.sqrt(N))+1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n    \ndef power(a,n):\n    '''\n    Write a python function to calculate a^n\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return a\n    else:\n        return a*power(a,n-1)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if math.sqrt(N) == int(math.sqrt(N)):\n        return int(math.sqrt(N)+1)**2\n    else:\n        return int(math.sqrt(N))**2\n    \ndef is_Prime(N):\n    '''\n    Write a python function to find whether a given number is prime or not.\n    '''\n    for i in range(2,int(math.sqrt(N))+1):\n        if N%i == 0:\n            return False\n    return True\n    \ndef is_Palindrome(N):\n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    temp = str(N)\n    return temp[::-1] == temp\n    \ndef is_Armstrong(N):\n    '''\n    Write a python function to check whether a given number is an Armstrong number or not.\n    '''\n    temp = 0\n    while N > 0:\n        digit = N%10\n        temp = temp+digit**3\n        N = N//10\n    if temp == N:\n        return True\n    else:\n        return False\n    \ndef is_Pentagonal(N):\n    '''\n    Write a python function to check whether a given number is a pentagonal number or not.\n    '''\n    temp = 0\n    for i in range(1,N//2+1):\n        if (N-3*(i**2))/2 == i:\n            temp = i\n            break\n    if temp == 0:\n        return False\n    else:\n        return True\n    \ndef is_Hexagonal(N):\n    '''\n    Write a python function to check whether a given number is a hexagonal number or not.\n    '''\n    temp = 0\n    for i in range(1,N//2+1):\n        if (N-2*(i**2))/2 == i:\n            temp = i\n            break\n    if temp == 0:\n        return False\n    else:\n        return True\n    \ndef is_Heptagonal(N):\n    '''\n    Write a python function to check whether a given number is a heptagonal number or not.\n    '''\n    temp = 0\n    for i in range(1,N//2+1):\n        if (N-3*(i**2))/2 == i:\n            temp = i\n            break\n    if temp == 0:\n        return False\n    else:\n        return True\n    \ndef is_Octagonal(N):\n    '''\n    Write a python function to check whether a given number is an octagonal number or not.\n    '''\n    temp = 0\n    for i in range(1,N//2+1):\n        if (N-4*(i**2))/2 == i:\n            temp = i\n            break\n    if temp == 0:\n        return False\n    else:\n        return True\n    \ndef is_Nonagonal(N):\n    '''\n    Write a python function to check whether a given number is a nonagonal number or not.\n    '''\n    temp = 0\n    for i in range(1,N//2+1):\n        if (N-5*(i**2))/2 == i:\n            temp = i\n            break\n    if temp == 0:\n        return False\n    else:\n        return True\n    \ndef is_Special_Pentagonal(N):\n    '''\n    Write a python function to check whether a given number is a special pentagonal number or not.\n    '''\n    temp = 0\n    for i in range(1,N//2+1):\n        if (N-3*(i**2))/2 == i:\n            temp = i\n            break\n    if temp == 0:\n        return False\n    else:\n        return True\n    \ndef is_Special_Hexagonal(N):\n    '''\n    Write a python function to check whether a given number is a special hexagonal number or not.\n    '''\n    temp = 0\n    for i in range(1,N//2+1):\n        if (N-4*(i**2))/2 == i:\n            temp = i\n            break\n    if temp == 0:\n        return False\n    else:\n        return True\n    \ndef is_Special_Heptagonal(N):\n    '''\n    Write a python function to check whether a given number is a special heptagonal number or not.\n    '''\n    temp = 0\n    for i in range(1,N//2+1):\n        if (N-5*(i**2))/2 == i:\n            temp = i\n            break\n    if temp == 0:\n        return False\n    else:\n        return True\n    \ndef is_Special_Octagonal(N):\n    '''\n    Write a python function to check whether a given number is a special octagonal number or not.\n    '''\n    temp = 0\n    for i in range(1,N//2+1):\n        if (N-6*(i**2))/2 == i:\n            temp = i\n            break\n    if temp == 0:\n        return False\n    else:\n        return True\n    \ndef is_Fibonacci(N):\n    '''\n    Write a python function to check whether a given number is a Fibonacci number or not.\n    '''\n    if (N-1)%2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_Fibonacci_Prime(N):\n    '''\n    Write a python function to check whether a given number is a Fibonacci number with prime digits or not.\n    '''\n    if is_Prime(N) and is_Fibonacci(N) == True:\n        return True\n    else:\n        return False\n    \ndef is_Fibonacci_Largest(N):\n    '''\n    Write a python function to find the largest Fibonacci number that can be represented by a given number.\n    '''\n    if is_Fibonacci_Prime(N):\n        temp = 1\n        while True:\n            if is_Fibonacci_Prime(N-temp) == True:\n                temp = temp+1\n            else:\n                return N-temp\n    else:\n        return N\n    \ndef is_Fibonacci_Smallest(N):\n    '''\n    Write a python function to find the smallest Fibonacci number that can be represented by a given number.\n    '''\n    if is_Fibonacci_Prime(N):\n        temp = 1\n        while True:\n            if is_Fibonacci_Prime(N+temp) == True:\n                temp = temp+1\n            else:\n                return N+temp\n    else:\n        return N\n    \ndef is_Fibonacci_Number(N):\n    '''\n    Write a python function to check whether a given number is a Fibonacci number or not.\n    '''\n    return is_Fibonacci(N)\n    \ndef is_Fibonacci_Number_Prime(N):\n    '''\n    Write a python function to check whether a given number is a Fibonacci number with prime digits or not.\n    '''\n    return is_Fibonacci_Prime(N)\n    \ndef is_Fibonacci_Number_Largest(N):\n    '''\n    Write a python function to find the largest Fibonacci number that can be represented by a given number.\n    '''\n    return is_Fibonacci_Largest(N)\n    \ndef is_Fibonacci_Number_Smallest(N):\n    '''\n    Write a python function to find the smallest Fibonacci number that can be represented by a given number.\n    '''\n    return is_Fibonacci_Smallest(N)\n    \ndef is_Fibonacci_Number_Prime_Smallest(N):\n    '''\n    Write a python function to find the smallest Fibonacci number that can be represented by a given number with prime digits or not.\n    '''\n    return is_Fibonacci_Prime_Smallest(N)\n    \ndef is_Fibonacci_Number_Prime_Largest(N):\n    '''\n    Write a python function to find the largest Fibonacci number that can be represented by a given number with prime digits or not.\n    '''\n    return is_Fibonacci_Prime_Larges"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.ceil(math.sqrt(N)) ** 2\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)) ** 2)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return None\n    if N == 1:\n        return 2\n    left = 2\n    right = N\n    while left <= right:\n        mid = (left + right) // 2\n        if mid*mid > N:\n            right = mid - 1\n        elif mid*mid < N:\n            left = mid + 1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def max_bitonic(arr):\n        '''\n        To do this, we keep track of two variables. One is to keep track of the maximum sum of increasing subsequence and the other is to keep track of the maximum sum of decreasing subsequence. We iterate through the array in reverse order and keep track of the maximum sums of increasing and decreasing subsequences.\n        '''\n        n = len(arr)\n        increasing = [0] * n\n        decreasing = [0] * n\n        increasing[-1] = arr[-1]\n        decreasing[0] = arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # if there is only 1 element in array then return that element\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # iterate from the end of the array\n    for i in range(len(arr) - 2, -1, -1):\n        # iterate from the start of the array\n        for j in range(i + 1, len(arr)):\n            # check if the sum of the array from the start and end is less than the value of the array\n            if sum(arr[i:j + 1]) < arr[i]:\n                # replace the value of the array if it is less than the sum of the array from the start and end\n                arr[i] = sum(arr[i:j + 1])\n    # return the max sum of the array\n    return max(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    current_max = arr[0]\n    max_sum = arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    ans = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            ans = max(ans, arr[j] - arr[i])\n    return ans\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    mid = len(arr)/2\n    first = arr[0]\n    max_left = arr[0]\n    max_right = arr[-1]\n    \n    for i in range(1, mid):\n        max_left = max(max_left, arr[i])\n        first = max(first, max_left)\n    \n    for i in range(mid, len(arr)):\n        max_right = max(max_right, arr[i])\n        first = max(first, max_right)\n    \n    return max(first, max_left, max_right)\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def max_sum_rec(arr, low, high):\n        if high == low:\n            return arr[low]\n        mid = int((low + high) / 2)\n        if mid < high and arr[mid] < arr[mid + 1]:\n            return max_sum_rec(arr, mid + 1, high)\n        if mid > low and arr[mid] > arr[mid - 1]:\n            return max_sum_rec(arr, low, mid)\n        return max(arr[mid] + max_sum_rec(arr, low, mid - 1), arr[mid] + max_sum_rec(arr, mid + 1, high))\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if arr is None:\n        return None\n    curr_max = arr[0]\n    prev_max = arr[0]\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], arr[i]+prev_max)\n        prev_max = curr_max\n        max_sum = max(max_sum, curr_max)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # if len(arr) < 3:\n    #     return arr\n    # max_ending_here = max(arr[0], arr[1])\n    # max_local = arr[1]\n    # for i in xrange(2, len(arr)):\n    #     max_ending_here = max(max_ending_here + arr[i], arr[i])\n    #     max_local = max(max_ending_here, max_local)\n    # return max_local\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    bitonic_seq = [0]\n    for i in xrange(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            bitonic_seq.append(arr[i])\n        else:\n            bitonic_seq.append(arr[i-1])\n    print arr\n    print bitonic_seq\n    return sum(bitonic_seq)\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    while abs(guess*guess - number) > 0.000001:\n        guess = (guess + number/guess)/2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return (number**0.5)\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = 0\n    guess = number / 2.0\n    while guess!= approx:\n        approx = guess\n        guess = (guess + number / guess) / 2.0\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def error_check(guess, number):\n        if (number == 0):\n            return 0\n        elif (guess**2 < number):\n            return 2*guess\n        else:\n            return error_check(guess/2, number)\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    else:\n        left = 1\n        right = number / 2\n        while left <= right:\n            mid = (left + right) / 2\n            mid_squared = mid * mid\n            if mid_squared == number:\n                return mid\n            elif mid_squared > number:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return mid - 1\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    start = 0\n    end = number\n    guess = (start + end) / 2.0\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = 1.0\n    curr_guess = 0.0\n    while True:\n        curr_guess = (approx + number / approx) / 2\n        if abs(curr_guess - approx) < 0.001:\n            return curr_guess\n        approx = curr_guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while guess*guess!= number:\n        guess = (guess + number/guess)/2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if not isinstance(number, int) or number < 0:\n        return None\n    if number == 0 or number == 1:\n        return number\n    # find the order of the number\n    order = 1\n    while number / order >= 10:\n        order *= 10\n    order /= 10\n    # print the order\n    #print 'the order of the number is %s' % order\n    # take the order of the number and compute the number of times the order\n    # of the number is needed to be divided\n    times = int(order/2)\n    #print 'number of times need to be divided is %s' % times\n    #print 'the number of time is %s' % order\n    # compute the sum of the number\n    sum = number\n    while times > 0:\n        # compute the remainder\n        remainder = sum % order\n        # compute the quotient\n        quotient = sum/order\n        #print 'the remainder is %s' % remainder\n        #print 'the quotient is %s' % quotient\n        # compute the next sum\n        sum = remainder * 10 + quotient\n        #print 'the sum is %s' % sum\n        times -= 1\n    #print 'the sum is %s' % sum\n    # return the sum\n    return sum\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #a = 0.1\n    #b = 0.9\n    #c = 1.1\n    #d = 0.9\n    #e = 2.1\n    #f = 0.9\n    #g = 2.1\n    #h = 0.9\n    #i = 1.1\n    #j = 1.1\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Inorder to find the longest palindromic subsequnece, we must take the max of \n    # the maximum possible palindromic subsequnce in the string plus the max of the remaining string\n    # minus the max of the palindromic subsequnce of the string minus the current element\n    # We create a 2D array with size len(str)+1 by len(str)+1\n    # Then we populate the 2D array using the DP algorithm\n    # We take the element of the string at row 0 and column 0 to be 0 as it is the base case of the recursion\n    # Then we can build the palindromic subsequnce from the right diagonal to the left diagonal\n    # and the substring is on the diagonal or from the left diagonal to the right diagonal\n    # We can use a 2D array to find the subsequnce of the max of the remaining substring\n    # And the max of the remaining substring can be found by subtracting the subsequnce of the current element\n    # plus the max of the remaining substring\n    \n    # We can use a 2D array to find the subsequnce of the max of the remaining substring\n    # And the max of the remaining substring can be found by subtracting the subsequnce of the current element\n    # plus the max of the remaining substring\n    # The max of the remaining substring can be found by using the max_of_2_DP(str, i, j) function\n    # This function return the max of the remaining substring\n    # if we don't find the max of the remaining substring, we return 0\n    # else we return 1 + max of the remaining substring\n    \n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # we use a 2D array to find the max of the remaining substring\n    # w"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    \n    # If input is single character, then output is 1 \n    if n == 1: \n        return 1\n    \n    # Matrix to store results of subproblems \n    l = [[0 for x in range(n)] for x in range(n)] \n    \n    # Strings of length 1 are palindrome of length 1 \n    for i in range(n): \n        l[i][i] = 1\n    \n    # Start from middle and find LPS starting \n    # from that middle \n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                l[i][j] = 2\n            elif str[i] == str[j]: \n                l[i][j] = l[i+1][j-1] + 2\n            else: \n                l[i][j] = max(l[i][j-1], l[i+1][j]); \n    return l[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i + 1][j - 1] + 2\n            else: \n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n    return L[0][n - 1] \n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    length = len(str)\n    if length <= 1:\n        return length\n    P = [[0 for _ in xrange(length)] for _ in xrange(length)]\n    maxlen = 1\n    for i in xrange(length):\n        P[i][i] = 1\n    for i in xrange(length-1):\n        if str[i] == str[i+1]:\n            P[i][i+1] = 2\n            maxlen = 2\n    for j in xrange(3, length+1):\n        for i in xrange(length-j+1):\n            j1 = i+j-1\n            if str[i] == str[j1] and j >= 2:\n                P[i][j1] = P[i+1][j1-1]+2\n                if P[i][j1] > maxlen:\n                    maxlen = P[i][j1]\n            elif j == 2:\n                P[i][j1] = 0\n    return maxlen\n    \ndef lps_dp(str):\n    length = len(str)\n    P = [0 for _ in xrange(length)]\n    maxlen = 1\n    for i in xrange(length):\n        P[i] = 1\n    for j in xrange(2, length+1):\n        for i in xrange(length-j+1):\n            if str[i] == str[i+j-1] and j >= 2:\n                P[i] = P[i+1]+2\n                if P[i] > maxlen:\n                    maxlen = P[i]\n            elif j == 2:\n                P[i] = 0\n    return maxlen\n    \ndef lps_recursive(str, i, j):\n    '''\n    The LPS problem is to find the longest palindromic subsequence in a string. \n    A subsequence is a sequence that can be derived from another sequence by deleting some elements without \n    changing the order of the remaining elements. \n    The longest palindromic subsequence problem is to find the length of the longest palindromic subsequence in a string.\n    '''\n    if i >= j:\n        return 0\n    if str[i] == str[j]:\n        return lps_recursive(str, i+1, j-1) + 2\n    else:\n        return max(lps_recursive(str, i, j-1), lps_recursive(str, i+1, j))\n    \ndef lps_substring(str):\n    length = len(str)\n    if length == 0:\n        return 0\n    P = [[0 for _ in xrange(length)] for _ in xrange(length)]\n    for i in xrange(length):\n        P[i][i] = 1\n    for i in xrange(length-1):\n        if str[i] == str[i+1]:\n            P[i][i+1] = 2\n            maxlen = 2\n    for j in xrange(3, length+1):\n        for i in xrange(length-j+1):\n            j1 = i+j-1\n            if str[i] == str[j1] and j >= 2:\n                P[i][j1] = P[i+1][j1-1]+2\n                if P[i][j1] > maxlen:\n                    maxlen = P[i][j1]\n            elif j == 2:\n                P[i][j1] = 0\n    return maxlen\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    if len(str) == 1:\n        return 1\n    \n    if len(str) == 2:\n        if str[0] == str[1]:\n            return 2\n        else:\n            return 1\n        \n    if len(str) == 3:\n        if str[0] == str[2]:\n            return 3\n        elif str[1] == str[2]:\n            return 2\n        else:\n            return 1\n    \n    # Important Case: If str is odd length\n    if len(str)%2 == 1:\n        subseq = str[:len(str)//2]\n        substr = str[len(str)//2:]\n    else:\n        subseq = str[:len(str)//2]\n        substr = str[len(str)//2:]\n    \n    # To find the max of the two longest palindromic substrings, we have to use two pointers approach\n    \n    # Step 1: Create two pointers - i, j\n    i = 0\n    j = len(subseq)-1\n    \n    # Initialize count and maxCount as 0\n    count = 0\n    maxCount = 0\n    \n    # Step 2: Now move i, j until i and j become equal\n    while i < j:\n        \n        # Case 1: If the i, j letters are same, move both pointers one step ahead\n        if subseq[i] == subseq[j]:\n            i += 1\n            j -= 1\n            count += 2\n            \n        # Case 2: If the i, j letters are not same, then move i, j one step ahead until one of them becomes equal to the other\n        else:\n            i += 1\n            j -= 1\n            \n            # If i, j becomes equal, we can calculate the number of characters to be added to the palindrome\n            if i == j:\n                if count + 1 > maxCount:\n                    maxCount = count + 1\n                    count += 1\n                count = 0\n            \n            # If i and j become equal, we can calculate the number of characters to be added to the palindrome\n            elif i == j - 1:\n                if count + 1 > maxCount:\n                    maxCount = count + 1\n                    count += 1\n                count = 0\n    \n    # Now we have maxCount, we have to calculate the length of the longest palindromic substring\n    return maxCount\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    T = [[0 for i in range(len(str))] for j in range(len(str))]\n    result = 0\n    for i in range(len(str)):\n        T[i][i] = 1\n        result = max(result,T[i][i])\n    for cl in range(2,len(str)+1):\n        for i in range(len(str)-cl+1):\n            j = i+cl-1\n            if str[i]==str[j] and cl==2:\n                T[i][j] = 2\n            elif str[i]==str[j]:\n                T[i][j] = T[i+1][j-1]+2\n            else:\n                T[i][j] = max(T[i+1][j],T[i][j-1])\n            result = max(result,T[i][j])\n    return result\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    table = [[0 for i in range(len(str))] for j in range(len(str))] \n    maxLen = 1\n    i = 1\n    while i < len(str): \n        j = 0\n        while j < i: \n            if str[j] == str[i]: \n                if i - j == 1 or table[j + 1][i - 1] >= maxLen: \n                    table[j][i] = table[j + 1][i - 1] + 2\n                    if maxLen < table[j][i]: \n                        maxLen = table[j][i] \n                else: \n                    table[j][i] = table[j + 1][i - 1]\n            else: \n                table[j][i] = table[j + 1][i]\n            j += 1\n        i += 1\n    return maxLen \n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # dp[i][j] is the LPS length of substring str[i..j]\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    max_len = 0\n    max_lps = 0\n    for i in range(n):\n        dp[i][i] = 1\n        if max_len < dp[i][i]:\n            max_len = dp[i][i]\n            max_lps = i\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    res = 0\n    for i in range(n):\n        dp[i][i] = 1\n        res = max(res, dp[i][i])\n    for i in range(n - 1):\n        if str[i] == str[i + 1]:\n            dp[i][i + 1] = 2\n            res = max(res, dp[i][i + 1])\n    for i in range(3, n + 1):\n        for j in range(n - i + 1):\n            if str[j] == str[j + i - 1] and dp[j + 1][j + i - 2] == i - 1:\n                dp[j][j + i - 1] = i\n                res = max(res, dp[j][j + i - 1])\n    return res\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    #dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    if n == 0:\n        return 0\n    #result = 1\n    #for i in range(n):\n    #    dp[i][i] = 1\n    #    result = max(result,dp[i][i])\n    #print result\n    #for i in range(n-1,-1,-1):\n    #    for j in range(i+1,n):\n    #        if str[i] == str[j]:\n    #            dp[i][j] = dp[i+1][j-1] + 2\n    #            result = max(result,dp[i][j])\n    #        else:\n    #            dp[i][j] = max(dp[i+1][j],dp[i][j-1])\n    #print result\n    return n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + (harmonic_sum(n-1))\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # to be implemented...\n    return\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def summation(num, count):\n        if num == 0:\n            return count\n        else:\n            return summation(num - 1, count + 1)\n    return summation(n, 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n - 1\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1/n + 1/harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # TODO: Fix this\n    return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n if n <= 1 else harmonic_sum(n-1) + 1/n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n - 1/n**2 + 1/n**3 - 1/n**4 +... + 1/n**n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + (1/n)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # first element of nums1\n    n1 = array_nums1[0]\n    # first element of nums2\n    n2 = array_nums2[0]\n    # first element of both arrays\n    n3 = array_nums1[0]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for i in array_nums1:\n        if i in array_nums2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # TODO: Write your code here.\n    intersection_array = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection_array.append(num)\n    return intersection_array\n    \n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) == 0 or len(array_nums2) == 0:\n        return []\n    #set1 = set(array_nums1)\n    #set2 = set(array_nums2)\n    #if len(set1) < len(set2):\n    #    set1,set2 = set2,set1\n    #res = []\n    #for i in set2:\n    #    if i in set1:\n    #        res.append(i)\n    res = [i for i in array_nums1 if i in array_nums2]\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if array_nums1 == None or array_nums2 == None:\n        return None\n    \n    result = []\n    for i in array_nums1:\n        if i in array_nums2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if array_nums1 is None or array_nums2 is None:\n        return None\n    if len(array_nums1) == 0 and len(array_nums2) == 0:\n        return None\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    array_len1 = len(array_nums1)\n    array_len2 = len(array_nums2)\n    result = []\n    i = 0\n    j = 0\n    while(i < array_len1 and j < array_len2):\n        if array_nums1[i] < array_nums2[j]:\n            i += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        else:\n            result.append(array_nums1[i])\n            i += 1\n            j += 1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) == 0 or len(array_nums2) == 0:\n        return []\n    array_nums1.sort()\n    array_nums2.sort()\n    i = 0\n    j = 0\n    count = 0\n    res = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            res.append(array_nums1[i])\n            i += 1\n            j += 1\n            count += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        else:\n            i += 1\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    n1 = len(array_nums1)\n    n2 = len(array_nums2)\n    if n1 > n2:\n        for i in range(n2-1):\n            if array_nums2[i] in array_nums1:\n                return array_nums2[i]\n        return array_nums2[-1]\n    else:\n        for i in range(n1-1):\n            if array_nums1[i] in array_nums2:\n                return array_nums1[i]\n        return array_nums1[-1]\n    return None\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect_array = []\n    for i in array_nums1:\n        if i in array_nums2:\n            intersect_array.append(i)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n    \nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 1) == 5\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 4) == 2\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 2) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 1) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 3) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 5) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 6) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 4) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 2) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 5) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 1) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 3) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 2) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 3) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 6) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 6) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 5) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 6) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 4) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 1) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 3) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 6) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 4) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 2) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 1) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 3) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 5) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 6) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 7) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 4) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 2) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 3) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 5) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 6) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 7) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 8) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 4) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 2) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 3) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 1) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 6) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 5) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 2) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 6) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 7) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 8) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 4) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 2) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 3) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 5) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 6) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 1) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 6) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 7) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 8) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 4) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 2) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 3) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 1) == 1\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 6) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 5) == 0\nassert count_X((1, 2, 1, 1, 1, 3, 2, 3, 4, 4, 4), 2) == 1\nassert count_"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occurences = 0\n    for item in tup: \n        if item == x: \n            occurences += 1\n    return occurences \n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    i = 0\n    for n in tup:\n        if n == x:\n            i = i + 1\n    return i\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #define the function\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list\n    #print(new_list)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    return list[0:1] + [element] + list[1:]\n    \n    \ndef remove_element(list,element):\n    '''\n    Write a function that takes in a list and an element and removes the element from the list.\n    '''\n    \n    list.remove(element)\n    return list\n    \ndef print_list(list):\n    '''\n    Write a function that takes in a list and prints each element of the list on a new line.\n    '''\n    \n    for i in list:\n        print i\n        \ndef reverse_list(list):\n    '''\n    Write a function that takes in a list and returns a new list that is the reverse of the old list.\n    '''\n    \n    return list[::-1]\n    \ndef print_list_indices(list):\n    '''\n    Write a function that takes in a list and returns a list of all the indices in the list.\n    '''\n    \n    return range(len(list))\n    \ndef main():\n    \n    # Do not change these lines\n    # Your code goes here.\n    element = raw_input('Enter an element: ')\n    \n    list = [1,2,3,4,5]\n    \n    print_list(insert_element(list,element))\n    print_list(remove_element(list,element))\n    print_list(print_list_indices(list))\n    \n    print_list(reverse_list(list))\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    while i < len(list):\n        list.insert(i,element)\n        i += 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    l = []\n    for e in list:\n        l.append(e)\n        l.append(element)\n    return l\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    n = len(numbers)\n    a = []\n    for i in range(n):\n        a.append(polar(numbers[i]))\n    return a\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    absol=numbers.real\n    angle=cmath.phase(numbers)\n    if angle<0:\n        angle=360+angle\n    return (absol,angle)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    arr=[]\n    for i in numbers:\n        r = i.real\n        i = i.imag\n        a = cmath.polar(complex(r,i))\n        arr.append(a)\n    return arr\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \n    \ndef convert1(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert2(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert3(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert4(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert5(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert6(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert7(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert8(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert9(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert10(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert11(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert12(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert13(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert14(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert15(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert16(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert17(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert18(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert19(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert20(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert21(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert22(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert23(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert24(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert25(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert26(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert27(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert28(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert29(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert30(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert31(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert32(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert33(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert34(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert35(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert36(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert37(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert38(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    return cmath.polar(complex(numbers))\n    \ndef convert39(numbers):    \n    '''\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = [complex(x) for x in numbers]\n    return cmath.polar(complex_numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(numbers)\n    print(cmath.phase(numbers))\n    \ndef print_complex(complex_numbers):\n    '''\n    Write a python function to print out the magnitude and phase of a complex number.\n    '''\n    print(cmath.polar(complex_numbers))\n    \ndef add_complex(c1,c2):\n    '''\n    Write a python function to add two complex numbers.\n    '''\n    return cmath.rect(c1.real+c2.real,c1.imag+c2.imag)\n    \ndef subtract_complex(c1,c2):\n    '''\n    Write a python function to subtract two complex numbers.\n    '''\n    return cmath.rect(c1.real-c2.real,c1.imag-c2.imag)\n    \ndef multiply_complex(c1,c2):\n    '''\n    Write a python function to multiply two complex numbers.\n    '''\n    return cmath.rect(c1.real*c2.real-c1.imag*c2.imag,c1.real*c2.imag+c1.imag*c2.real)\n    \ndef divide_complex(c1,c2):\n    '''\n    Write a python function to divide two complex numbers.\n    '''\n    #division by zero\n    denominator = c2.real*c2.real+c2.imag*c2.imag\n    if denominator == 0:\n        return \"Cannot divide by zero\"\n    else:\n        return cmath.rect(c1.real*c2.real+c1.imag*c2.imag,c1.real*c2.imag-c1.imag*c2.real)/denominator\n        \ndef sqrt_complex(c1):\n    '''\n    Write a python function to find the square root of a complex number.\n    '''\n    return cmath.sqrt(c1.real*c1.real+c1.imag*c1.imag)\n    \ndef c_to_p(complex_number):\n    '''\n    Write a python function to convert a complex number to polar coordinates.\n    '''\n    return complex(cmath.phase(complex_number),abs(complex_number))\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    t=0\n    for i in numbers:\n        t=t+abs(i)\n    return t\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def convert_complex_to_polar(complex_numbers):\n        '''\n        Write a python function to convert complex numbers to polar coordinates.\n        '''\n        def polar(complex_numbers):\n            '''\n            Write a python function to convert complex numbers to polar coordinates.\n            '''\n            return cmath.polar(complex_numbers)\n        return map(polar,complex_numbers)\n    return convert_complex_to_polar(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers)==complex:\n        return cmath.polar(numbers)\n    else:\n        return None\ndef convert_to_complex(polar):\n    '''\n    Write a python function to convert polar numbers to complex numbers.\n    '''\n    if type(polar)==tuple:\n        return complex(polar[0],polar[1])\n    else:\n        return None\ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a number.\n    '''\n    if type(n)==int:\n        if n<0:\n            return None\n        elif n==0:\n            return 1\n        else:\n            return n*factorial(n-1)\n    else:\n        return None\ndef is_prime(n):\n    '''\n    Write a python function to test if a number is a prime number.\n    '''\n    if type(n)==int:\n        if n<=1:\n            return False\n        elif n==2:\n            return True\n        else:\n            i=2\n            while i<=n/2:\n                if n%i==0:\n                    return False\n                else:\n                    i+=1\n            return True\n    else:\n        return None\ndef nth_prime(n):\n    '''\n    Write a python function to find nth prime number.\n    '''\n    if type(n)==int:\n        if n<0:\n            return None\n        else:\n            n-=1\n            count=1\n            i=1\n            while count<n:\n                if is_prime(i):\n                    count+=1\n                i+=1\n            return i\n    else:\n        return None\ndef is_palindrome(n):\n    '''\n    Write a python function to test if a number is a palindrome.\n    '''\n    if type(n)==int:\n        if n<0:\n            return None\n        elif n==0:\n            return True\n        else:\n            n=str(n)\n            if len(n)%2==0:\n                return n[0:(len(n)/2)]==n[(len(n)/2):len(n)][::-1]\n            else:\n                return n[0:(len(n)/2+1)]==n[(len(n)/2+1):len(n)][::-1]\n    else:\n        return None\ndef is_powerful(n):\n    '''\n    Write a python function to test if a number is powerful.\n    '''\n    if type(n)==int:\n        if n<=1:\n            return False\n        elif n==2:\n            return True\n        else:\n            i=2\n            while i<=n/2:\n                if n%i==0:\n                    return False\n                else:\n                    i+=1\n            return True\n    else:\n        return None\ndef is_perfect(n):\n    '''\n    Write a python function to test if a number is perfect.\n    '''\n    if type(n)==int:\n        s=0\n        for i in range(1,n):\n            if n%i==0:\n                s+=i\n        if s==n:\n            return True\n        else:\n            return False\n    else:\n        return None\ndef is_abundant(n):\n    '''\n    Write a python function to test if a number is abundant.\n    '''\n    if type(n)==int:\n        if n<=0:\n            return None\n        else:\n            s=0\n            for i in range(1,n):\n                if n%i==0:\n                    s+=i\n            if s>n:\n                return True\n            else:\n                return False\n    else:\n        return None\ndef is_sosu(n):\n    '''\n    Write a python function to test if a number is a sosu number.\n    '''\n    if type(n)==int:\n        if n<=0:\n            return None\n        elif n==1:\n            return False\n        else:\n            i=2\n            while i<=n/2:\n                if n%i==0:\n                    return False\n                else:\n                    i+=1\n            return True\n    else:\n        return None\ndef is_pentagonal(n):\n    '''\n    Write a python function to test if a number is pentagonal.\n    '''\n    if type(n)==int:\n        if n<=0:\n            return None\n        else:\n            s=int(n*(3*n-1)/2)\n            if s==n:\n                return True\n            else:\n                return False\n    else:\n        return None\ndef is_hexagonal(n):\n    '''\n    Write a python function to test if a number is hexagonal.\n    '''\n    if type(n)==int:\n        if n<=0:\n            return None\n        else:\n            s=int(n*(2*n-1))\n            if s==n:\n                return True\n            else:\n                return False\n    else:\n        return None\ndef is_heptagonal(n):\n    '''\n    Write a python function to test if a number is heptagonal.\n    '''\n    if type(n)==int:\n        if n<=0:\n            return None\n        else:\n            s=int(n*(5*n-3)/2)\n            if s==n:\n                return True\n            else:\n                return False\n    else:\n        return None\ndef is_octagonal(n):\n    '''\n    Write a python function to test if a number is octagonal.\n    '''\n    if type(n)==int:\n        if n<=0:\n            return None\n        else:\n            s=int(n*(3*n-2))\n            if s==n:\n                return True\n            else:\n                return False\n    else:\n        return None\ndef is_octagonal_triangular(n):\n    '''\n    Write a python function to test if a number is octagonal triangular.\n    '''\n    if type(n)==int:\n        if n<=0:\n            return None\n        else:\n            s=int(n*(2*n-1))\n            if s==n:\n                return True\n            else:\n                return False\n    else:\n        return None\ndef is_icosagonal(n):\n    '''\n    Write a python function to test if a number is icosagonal.\n    '''\n    if type(n)==int:\n        if n<=0:\n            return None\n        else:\n            s=int(n*(6*n-5))\n            if s==n:\n                return True\n            else:\n                return False\n    else:\n        return None\ndef is_icosagonal_triangular(n):\n    '''\n    Write a python function to test if a number is icosagonal triangular.\n    '''\n    if type(n)==int:\n        if n<=0:\n            return None\n        else:\n            s=int(n*(2*n-1))\n            if s==n:\n                return True\n            else:\n                return False\n    else:\n        return None\ndef is_tetrahedral(n):\n    '''\n    Write a python function to test if a number is tetrahedral.\n    '''\n    if type(n)==int:\n        if n<=0:\n            return None\n        else:\n            s=int(n*(4*n-2))\n            if s==n:\n                return True\n            else:\n                return False\n    else:\n        return None\ndef is_pentagonal_square(n):\n    '''\n    Write a python function to test if a number is pentagonal square.\n    '''\n    if type(n)==int:\n        if n<=0:\n            return None\n        else:\n            s=int(n*(3*n-1)/2)\n            if s==n:\n                return True\n            else:\n                return False\n    else:\n        return None\ndef is_hexagonal_square(n):\n    '''\n    Write a python function to test if a number is hexagonal square.\n    '''\n    if type(n)==int:\n        if n<"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    if type(numbers) == complex:\n        return cmath.polar(numbers)\n    else:\n        print \"This is not a complex number\"\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for each in list1:\n        if isinstance(each,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list1 = str(list1)\n    a = list1.count(\"1\")\n    b = list1.count(\"2\")\n    c = list1.count(\"3\")\n    d = list1.count(\"4\")\n    e = list1.count(\"5\")\n    f = list1.count(\"6\")\n    g = list1.count(\"7\")\n    h = list1.count(\"8\")\n    i = list1.count(\"9\")\n    j = list1.count(\"0\")\n    n = a+b+c+d+e+f+g+h+i+j\n    return n\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    count = 0\n    \n    for each in list1:\n        if isinstance(each, int):\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if type(x) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x,int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num = 0\n    for i in list1:\n        if type(i) == int:\n            num = num + 1\n    return num\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for each in list1:\n        if isinstance(each,int):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i+n]) for i in range(len(l) - n + 1)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in combinations_with_replacement(l, n):\n        print i\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in list(combinations_with_replacement(l, n))]\ndef test_combinations_colors():\n    assert combinations_colors([1,2,3], 2) == [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]\n    assert combinations_colors([1,2,3,4], 3) == [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]\n    assert combinations_colors([1,2,3,4,5], 2) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\n    assert combinations_colors([1,2,3,4,5,6], 3) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]\n    assert combinations_colors([1,2,3,4,5,6,7], 2) == [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (6, 7)]\ndef combinations_colors_decorator(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in list(combinations_with_replacement(l, n))]\ndef test_combinations_colors_decorator():\n    assert combinations_colors_decorator([1,2,3], 2) == [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]\n    assert combinations_colors_decorator([1,2,3,4], 3) == [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]\n    assert combinations_colors_decorator([1,2,3,4,5], 2) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\n    assert combinations_colors_decorator([1,2,3,4,5,6], 3) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]\n    assert combinations_colors_decorator([1,2,3,4,5,6,7], 2) == [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (6, 7)]\ndef combinations_colors_filter(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(filter(lambda x: len(x) == n, combinations_with_replacement(l, n)))\ndef test_combinations_colors_filter():\n    assert combinations_colors_filter([1,2,3], 2) == [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]\n    assert combinations_colors_filter([1,2,3,4], 3) == [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]\n    assert combinations_colors_filter([1,2,3,4,5], 2) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\n    assert combinations_colors_filter([1,2,3,4,5,6], 3) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]\n    assert combinations_colors_filter([1,2,3,4,5,6,7], 2) == [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (6, 7)]\ndef combinations_colors_filter_decorator(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(filter(lambda x: len(x) == n, combinations_with_replacement(l, n)))\ndef test_combinations_colors_filter_decorator():\n    assert combinations_colors_filter_decorator([1,2,3], 2) == [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]\n    assert combinations_colors_filter_decorator([1,2,3,4], 3) == [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]\n    assert combinations_colors_filter_decorator([1,2,3,4,5], 2) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\n    assert combinations_colors_filter_decorator([1,2,3,4,5,6], 3) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]\n    assert combinations_colors_filter_decorator([1,2,3,4,5,6,7], 2) == [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (6, 7)]\ndef combinations_colors_filter_decorator_filter(l, "
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return []\n    l_list = list(l)\n    all_combos = []\n    for i in range(len(l)):\n        l_list.remove(l[i])\n        for j in range(1, len(l) - i + 1):\n            for k in combinations_with_replacement(l_list, j):\n                all_combos.append(k)\n            l_list.append(l[i])\n    return all_combos\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        return []\n    elif n == 0:\n        return [[]]\n    else:\n        return [ x + [y] for y in l for x in combinations_colors(l, n - 1) ]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    lst=list(combinations_with_replacement(l, n))\n    #print lst\n    return lst\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    c = list(combinations_with_replacement(l, n))\n    return c\nprint combinations_colors([1,2,3,4], 2)\nprint combinations_colors([1,2,3,4], 3)\nprint combinations_colors([1,2,3,4], 4)\nprint combinations_colors([1,2,3,4], 5)\nprint combinations_colors([1,2,3,4], 6)\nprint combinations_colors([1,2,3,4], 7)\nprint combinations_colors([1,2,3,4], 8)\nprint combinations_colors([1,2,3,4], 9)\nprint combinations_colors([1,2,3,4], 10)\nprint combinations_colors([1,2,3,4], 11)\nprint combinations_colors([1,2,3,4], 12)\nprint combinations_colors([1,2,3,4], 13)\nprint combinations_colors([1,2,3,4], 14)\nprint combinations_colors([1,2,3,4], 15)\nprint combinations_colors([1,2,3,4], 16)\nprint combinations_colors([1,2,3,4], 17)\nprint combinations_colors([1,2,3,4], 18)\nprint combinations_colors([1,2,3,4], 19)\nprint combinations_colors([1,2,3,4], 20)\nprint combinations_colors([1,2,3,4], 21)\nprint combinations_colors([1,2,3,4], 22)\nprint combinations_colors([1,2,3,4], 23)\nprint combinations_colors([1,2,3,4], 24)\nprint combinations_colors([1,2,3,4], 25)\nprint combinations_colors([1,2,3,4], 26)\nprint combinations_colors([1,2,3,4], 27)\nprint combinations_colors([1,2,3,4], 28)\nprint combinations_colors([1,2,3,4], 29)\nprint combinations_colors([1,2,3,4], 30)\nprint combinations_colors([1,2,3,4], 31)\nprint combinations_colors([1,2,3,4], 32)\nprint combinations_colors([1,2,3,4], 33)\nprint combinations_colors([1,2,3,4], 34)\nprint combinations_colors([1,2,3,4], 35)\nprint combinations_colors([1,2,3,4], 36)\nprint combinations_colors([1,2,3,4], 37)\nprint combinations_colors([1,2,3,4], 38)\nprint combinations_colors([1,2,3,4], 39)\nprint combinations_colors([1,2,3,4], 40)\nprint combinations_colors([1,2,3,4], 41)\nprint combinations_colors([1,2,3,4], 42)\nprint combinations_colors([1,2,3,4], 43)\nprint combinations_colors([1,2,3,4], 44)\nprint combinations_colors([1,2,3,4], 45)\nprint combinations_colors([1,2,3,4], 46)\nprint combinations_colors([1,2,3,4], 47)\nprint combinations_colors([1,2,3,4], 48)\nprint combinations_colors([1,2,3,4], 49)\nprint combinations_colors([1,2,3,4], 50)\nprint combinations_colors([1,2,3,4], 51)\nprint combinations_colors([1,2,3,4], 52)\nprint combinations_colors([1,2,3,4], 53)\nprint combinations_colors([1,2,3,4], 54)\nprint combinations_colors([1,2,3,4], 55)\nprint combinations_colors([1,2,3,4], 56)\nprint combinations_colors([1,2,3,4], 57)\nprint combinations_colors([1,2,3,4], 58)\nprint combinations_colors([1,2,3,4], 59)\nprint combinations_colors([1,2,3,4], 60)\nprint combinations_colors([1,2,3,4], 61)\nprint combinations_colors([1,2,3,4], 62)\nprint combinations_colors([1,2,3,4], 63)\nprint combinations_colors([1,2,3,4], 64)\nprint combinations_colors([1,2,3,4], 65)\nprint combinations_colors([1,2,3,4], 66)\nprint combinations_colors([1,2,3,4], 67)\nprint combinations_colors([1,2,3,4], 68)\nprint combinations_colors([1,2,3,4], 69)\nprint combinations_colors([1,2,3,4], 70)\nprint combinations_colors([1,2,3,4], 71)\nprint combinations_colors([1,2,3,4], 72)\nprint combinations_colors([1,2,3,4], 73)\nprint combinations_colors([1,2,3,4], 74)\nprint combinations_colors([1,2,3,4], 75)\nprint combinations_colors([1,2,3,4], 76)\nprint combinations_colors([1,2,3,4], 77)\nprint combinations_colors([1,2,3,4], 78)\nprint combinations_colors([1,2,3,4], 79)\nprint combinations_colors([1,2,3,4], 80)\nprint combinations_colors([1,2,3,4], 81)\nprint combinations_colors([1,2,3,4], 82)\nprint combinations_colors([1,2,3,4], 83)\nprint combinations_colors([1,2,3,4], 84)\nprint combinations_colors([1,2,3,4], 85)\nprint combinations_colors([1,2,3,4], 86)\nprint combinations_colors([1,2,3,4], 87)\nprint combinations_colors([1,2,3,4], 88)\nprint combinations_colors([1,2,3,4], 89)\nprint combinations_colors([1,2,3,4], 90)\nprint combinations_colors([1,2,3,4], 91)\nprint combinations_colors([1,2,3,4], 92)\nprint combinations_colors([1,2,3,4], 93)\nprint combinations_colors([1,2,3,4], 94)\nprint combinations_colors([1,2,3,4], 95)\nprint combinations_colors([1,2,3,4], 96)\nprint combinations_colors([1,2,3,4], 97)\nprint combinations_colors([1,2,3,4], 98)\nprint combinations_colors([1,2,3,4], 99)\nprint combinations_colors([1,2,3,4], 100)\nprint combinations_colors([1,2,3,4], 101)\nprint combinations_colors([1,2,3,4], 102)\nprint combinations_colors([1,2,3,4], 103)\nprint combinations_colors([1,2,3,4], 104)\nprint combinations_colors([1,2,3,4], 105)\nprint combinations_colors([1,2,3,4], 106)\nprint combinations_colors([1,2,3,4], 107)\nprint combinations_colors([1,2,3,4], 108)\nprint combinations_colors([1,2,3,4], 109)\nprint combinations_colors([1,2,3,4], 110)\nprint combinations_colors([1,2,3,4], 111)\nprint combinations_colors([1,2,3,4], 112)\nprint combinations_colors([1,2,3,4], 113)\nprint combinations_colors([1,2,3,4], 114)\nprint combinations_colors([1,2,3,4], 115)\nprint combinations_colors([1,2,3,4], 116)"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [x for x in combinations_with_replacement(l, n)]\nprint combinations_colors([1,2,3,4], 3)\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #Solution 1\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        l = [2]\n        for i in range(3, n):\n            if i % 2 == 0:\n                continue\n            for j in l:\n                if j * j - 1 > i:\n                    l.append(i)\n                    break\n                if i % j == 0:\n                    break\n        return len(l)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return 0\n    elif n % 3 == 0:\n        return 0\n    else:\n        for i in range(5, int(n**0.5) + 1, 6):\n            if n % i == 0:\n                return 0\n        return 1\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # declare variables\n    is_prime = [True] * n\n    count = 0\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count\n    \nprint count_Primes_nums(4)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if type(n)!= int:\n        raise TypeError('n must be a non-negative integer')\n    if n < 0:\n        raise ValueError('n must be a non-negative integer')\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    primes = [2]\n    for num in range(3, n + 1):\n        is_prime = True\n        for prime in primes:\n            if prime > num ** 0.5:\n                break\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def prime_num(n):\n        if n < 2:\n            return False\n        elif n == 2:\n            return True\n        for x in range(2, n):\n            if n % x == 0:\n                return False\n        return True\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_num_count = 0\n    num = 2\n    while num < n:\n        if n % num == 0:\n            prime_num_count += 1\n        num += 1\n    return prime_num_count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    import math\n    \n    if n <= 1:\n        return 0\n    \n    if n == 2:\n        return 1\n    \n    if n == 3:\n        return 2\n    \n    if n%2 == 0 or n%3 == 0:\n        return 0\n    \n    count = 0\n    \n    num = 5\n    \n    while num < n:\n        prime = True\n        \n        for i in range(2,int(math.sqrt(num))+1):\n            if num%i == 0:\n                prime = False\n                break\n        \n        if prime:\n            count += 1\n            \n        num += 2\n    \n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #TODO:\n    #1. count the number of prime numbers less than the input\n    #2. when the count equals or exceeds n, return n\n    def is_Prime(n):\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\n    count = 0\n    for i in range(2, n):\n        if is_Prime(i):\n            count += 1\n        if count == n:\n            return n\n    return count\n    \ndef find_Primes_less_than(n):\n    '''\n    Write a python function that takes in a non-negative number and returns a list of prime numbers less than the given non-negative number in ascending order\n    '''\n    #TODO:\n    #1. count the number of prime numbers less than the input\n    #2. when the count equals or exceeds n, return n\n    #3. otherwise return the count\n    def is_Prime(n):\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\n    count = 0\n    for i in range(2, n):\n        if is_Prime(i):\n            count += 1\n        if count == n:\n            return count\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i**2, n, i):\n                is_prime[j] = False\n    return sum(is_prime)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup = (b,a)\n    return tup\n    \ndef increment_list(a):\n    '''\n    Write a function that takes a list of numbers and returns a new list with each value incremented by 1.\n    '''\n    new_list = []\n    for value in a:\n        new_list.append(value+1)\n    return new_list\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_element = max(test_tup1) if test_tup1 > test_tup2 else max(test_tup2)\n    return [max_element]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    first_tup = test_tup1\n    second_tup = test_tup2\n    return (first_tup, second_tup)\n    \ndef maximize_elements2(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    first_tup = max(test_tup1, test_tup2)\n    second_tup = min(test_tup1, test_tup2)\n    return (first_tup, second_tup)\n    \ndef maximize_elements3(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    first_tup = tuple([max(x, y) for x, y in zip(test_tup1, test_tup2)])\n    second_tup = tuple([min(x, y) for x, y in zip(test_tup1, test_tup2)])\n    return (first_tup, second_tup)\n    \ndef maximize_elements4(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    first_tup = tuple([max(x, y) for x, y in zip(test_tup1, test_tup2)])\n    second_tup = tuple([min(x, y) for x, y in zip(test_tup1, test_tup2)])\n    return (first_tup, second_tup)\n    \ndef maximize_elements5(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    first_tup = tuple([max(x, y) for x, y in zip(test_tup1, test_tup2)])\n    second_tup = tuple([min(x, y) for x, y in zip(test_tup1, test_tup2)])\n    return (first_tup, second_tup)\n    \ndef test_function(test_case):\n    output = maximize_elements(test_case[0], test_case[1])\n    if output == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return [max(x,y) for x,y in zip(test_tup1,test_tup2)]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1, test_tup2), test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_list.append(test_tup1[i])\n        else:\n            max_list.append(test_tup2[i])\n    return max_list\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    list1 = test_tup1[0]\n    list2 = test_tup2[0]\n    \n    list1.sort()\n    list2.sort()\n    \n    while (len(list1)!= 0) and (len(list2)!= 0):\n        if list1[0] >= list2[0]:\n            list1.pop(0)\n        else:\n            list2.pop(0)\n    \n    return list1 + list2\n    \n    \ndef main():\n    list1 = [3, 2, 4, 1]\n    list2 = [3, 2, 1, 1]\n    \n    test_tup1 = (list1, list2)\n    test_tup2 = (list1, list2)\n    \n    print maximize_elements(test_tup1, test_tup2)\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(max(test_tup1), max(test_tup2))\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    if (n == 1):\n        return 2\n    elif (n == 2):\n        return 3\n    elif (n % 2 == 0):\n        return 2\n    elif (n == 3):\n        return 5\n    else:\n        count = 0\n        x = 5\n        y = 2\n        while(count < n-1):\n            x = (x**2 + 1) % n\n            y = (y**2 + 1) % n\n            if (x == 1):\n                count = n\n            elif (x == n - 1):\n                count += 1\n        if (count == n - 1):\n            return n\n        else:\n            return n - 1\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    newman_prime = 1\n    while True:\n        if i > n:\n            break\n        if isPrime(i):\n            newman_prime = i\n            i += 1\n        else:\n            i += 1\n    return newman_prime\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 2\n    \n    f = lambda x: (x**2 + 1) % n\n    \n    r = newman(f, n, 2)\n    \n    return r\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    else:\n        return find_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n==2 or n==3: return True\n        if n%2==0 or n<2: return False\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0: return False\n        return True\n    \n    def prime_generator(n):\n        for i in range(2,n):\n            if is_prime(i): yield i\n    \n    def newman_williams(p,n):\n        rn = pow(p,n,n**2)\n        rn2 = pow(rn,2,n**2)\n        rn3 = pow(rn2,2,n**2)\n        rn4 = pow(rn3,2,n**2)\n        rn5 = pow(rn4,2,n**2)\n        rn6 = pow(rn5,2,n**2)\n        rn7 = pow(rn6,2,n**2)\n        rn8 = pow(rn7,2,n**2)\n        rn9 = pow(rn8,2,n**2)\n        rn10 = pow(rn9,2,n**2)\n        rn11 = pow(rn10,2,n**2)\n        rn12 = pow(rn11,2,n**2)\n        rn13 = pow(rn12,2,n**2)\n        rn14 = pow(rn13,2,n**2)\n        rn15 = pow(rn14,2,n**2)\n        rn16 = pow(rn15,2,n**2)\n        rn17 = pow(rn16,2,n**2)\n        rn18 = pow(rn17,2,n**2)\n        rn19 = pow(rn18,2,n**2)\n        rn20 = pow(rn19,2,n**2)\n        rn21 = pow(rn20,2,n**2)\n        rn22 = pow(rn21,2,n**2)\n        rn23 = pow(rn22,2,n**2)\n        rn24 = pow(rn23,2,n**2)\n        rn25 = pow(rn24,2,n**2)\n        rn26 = pow(rn25,2,n**2)\n        rn27 = pow(rn26,2,n**2)\n        rn28 = pow(rn27,2,n**2)\n        rn29 = pow(rn28,2,n**2)\n        rn30 = pow(rn29,2,n**2)\n        rn31 = pow(rn30,2,n**2)\n        rn32 = pow(rn31,2,n**2)\n        rn33 = pow(rn32,2,n**2)\n        rn34 = pow(rn33,2,n**2)\n        rn35 = pow(rn34,2,n**2)\n        rn36 = pow(rn35,2,n**2)\n        rn37 = pow(rn36,2,n**2)\n        rn38 = pow(rn37,2,n**2)\n        rn39 = pow(rn38,2,n**2)\n        rn40 = pow(rn39,2,n**2)\n        rn41 = pow(rn40,2,n**2)\n        rn42 = pow(rn41,2,n**2)\n        rn43 = pow(rn42,2,n**2)\n        rn44 = pow(rn43,2,n**2)\n        rn45 = pow(rn44,2,n**2)\n        rn46 = pow(rn45,2,n**2)\n        rn47 = pow(rn46,2,n**2)\n        rn48 = pow(rn47,2,n**2)\n        rn49 = pow(rn48,2,n**2)\n        rn50 = pow(rn49,2,n**2)\n        rn51 = pow(rn50,2,n**2)\n        rn52 = pow(rn51,2,n**2)\n        rn53 = pow(rn52,2,n**2)\n        rn54 = pow(rn53,2,n**2)\n        rn55 = pow(rn54,2,n**2)\n        rn56 = pow(rn55,2,n**2)\n        rn57 = pow(rn56,2,n**2)\n        rn58 = pow(rn57,2,n**2)\n        rn59 = pow(rn58,2,n**2)\n        rn60 = pow(rn59,2,n**2)\n        rn61 = pow(rn60,2,n**2)\n        rn62 = pow(rn61,2,n**2)\n        rn63 = pow(rn62,2,n**2)\n        rn64 = pow(rn63,2,n**2)\n        rn65 = pow(rn64,2,n**2)\n        rn66 = pow(rn65,2,n**2)\n        rn67 = pow(rn66,2,n**2)\n        rn68 = pow(rn67,2,n**2)\n        rn69 = pow(rn68,2,n**2)\n        rn70 = pow(rn69,2,n**2)\n        rn71 = pow(rn70,2,n**2)\n        rn72 = pow(rn71,2,n**2)\n        rn73 = pow(rn72,2,n**2)\n        rn74 = pow(rn73,2,n**2)\n        rn75 = pow(rn74,2,n**2)\n        rn76 = pow(rn75,2,n**2)\n        rn77 = pow(rn76,2,n**2)\n        rn78 = pow(rn77,2,n**2)\n        rn79 = pow(rn78,2,n**2)\n        rn80 = pow(rn79,2,n**2)\n        rn81 = pow(rn80,2,n**2)\n        rn82 = pow(rn81,2,n**2)\n        rn83 = pow(rn82,2,n**2)\n        rn84 = pow(rn83,2,n**2)\n        rn85 = pow(rn84,2,n**2)\n        rn86 = pow(rn85,2,n**2)\n        rn87 = pow(rn86,2,n**2)\n        rn88 = pow(rn87,2,n**2)\n        rn89 = pow(rn88,2,n**2)\n        rn90 = pow(rn89,2,n**2)\n        rn91 = pow(rn90,2,n**2)\n        rn92 = pow(rn91,2,n**2)\n        rn93 = pow(rn92,2,n**2)\n        rn94 = pow(rn93,2,n**2)\n        rn95 = pow(rn94,2,n**2)\n        rn96 = pow(rn95,2,n**2)\n        rn97 = pow(rn96,2,n**2)\n        rn98 = pow(rn97,2,n**2)\n        rn99 = pow(rn98,2,n**2)\n        rn100 = pow(rn99,2,n**2)\n        rn101 = pow(rn100,2,n**2)\n        rn102 = pow(rn101,2,n**2)\n        rn103 = pow(rn102,2,n**2)\n        rn104 = pow(rn103,2,n**2)\n        rn105 = pow(rn104,2,n**2)\n        rn106 = pow(rn105,2,n**2)\n        rn107 = pow(rn106,2,n**2)\n        rn108 = pow(rn107,2,n**2)\n        rn109 = pow(rn108,2,n**2)\n        rn110 = pow(rn109,2,n**2)\n        rn111 = pow(rn110,2,n**2)\n        rn112 = pow(rn111,2,n**2)\n        rn113 = pow(rn112,2,n**2)\n        rn114 = pow(rn113,2,n**2)\n        rn115 = pow(rn114,2,n**2)\n        rn116 = pow(rn115,2,n**2)\n        rn117 = pow(rn116,2,n**2)\n        rn118 = pow(rn117,2,n**2)"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        sq = int(math.floor(math.sqrt(n)))\n        for i in range(3,sq+1,2):\n            if n % i == 0:\n                return False\n        return True\n    \n    def nth_prime(n):\n        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 5\n        \n        # find the nth prime\n        p_count = 1\n        p = 2\n        while p_count < n:\n            p = p + 1\n            if is_prime(p):\n                p_count += 1\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        # print(n)\n        return newman_williams(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert n > 0\n    k = 0\n    while True:\n        if newman_williams(n) == n:\n            return n\n        k += 1\n        n += k\n    \n    "
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return newman_prime(n-1) + (newman_prime(n-2) - 2*newman_prime(n-3))\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1: return 2\n    for p in prime():\n        if p**(n-1) == n-1: return p\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] / test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    element_tup1 = list(test_tup1)\n    element_tup2 = list(test_tup2)\n    \n    element_tup1_len = len(element_tup1)\n    element_tup2_len = len(element_tup2)\n    \n    result_tup = list()\n    \n    if element_tup1_len == element_tup2_len:\n        \n        for i in range(element_tup1_len):\n            \n            result_tup.append((element_tup1[i] / element_tup2[i]))\n            \n    return tuple(result_tup)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result1 = []\n    result2 = []\n    for num1, num2 in zip(test_tup1, test_tup2):\n        result1.append(num1 / num2)\n        result2.append(num2 / num1)\n    return tuple(result1), tuple(result2)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    if type(test_tup1) == int or type(test_tup1) == float:\n        raise TypeError('The first tuple cannot be a float')\n    if type(test_tup2) == int or type(test_tup2) == float:\n        raise TypeError('The second tuple cannot be a float')\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    len_tup1 = len(test_tup1)\n    len_tup2 = len(test_tup2)\n    \n    if len_tup1 == len_tup2:\n        \n        new_tup1 = ()\n        new_tup2 = ()\n        \n        for index in range(len_tup1):\n            new_tup1 += (test_tup1[index] / test_tup2[index],)\n            new_tup2 += (test_tup2[index] / test_tup1[index],)\n        \n        return new_tup1, new_tup2\n    \n    return 'Not possible!'\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    first_list = []\n    second_list = []\n    for item in test_tup1:\n        first_list.append(item)\n    for item in test_tup2:\n        second_list.append(item)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    div_tup1 = ()\n    div_tup2 = ()\n    for index, element in enumerate(test_tup1):\n        div_tup1 += (element/test_tup2[index],)\n    for index, element in enumerate(test_tup2):\n        div_tup2 += (element/test_tup1[index],)\n    return div_tup1, div_tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    return tuple([test_tup1[i] / test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if not test_tup1:\n        return test_tup2\n    elif not test_tup2:\n        return test_tup1\n    else:\n        return tuple(tup1/tup2 for tup1,tup2 in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert isinstance(test_tup1, tuple), \"First input is not a tuple.\"\n    assert isinstance(test_tup2, tuple), \"Second input is not a tuple.\"\n    assert len(test_tup1) == len(test_tup2), \"Both tuples must be same length.\"\n    for elem in zip(test_tup1, test_tup2):\n        assert isinstance(elem, tuple), \"Both tuples must be tuple.\"\n    def division_elem(tup1, tup2):\n        '''\n        Divide the elements of the tuple by each other.\n        '''\n        assert isinstance(tup1, tuple), \"First input is not a tuple.\"\n        assert isinstance(tup2, tuple), \"Second input is not a tuple.\"\n        assert len(tup1) == len(tup2), \"Both tuples must be same length.\"\n        assert not isinstance(tup1, str), \"First input is not a string.\"\n        assert not isinstance(tup2, str), \"Second input is not a string.\"\n        return tuple([a/b for a,b in zip(tup1, tup2)])\n    return division_elem(test_tup1, test_tup2)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first = []\n    second = []\n    for i in range(L):\n        first.append(list1[i])\n    for i in range(L, len(list1)):\n        second.append(list1[i])\n    return (first, second)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_one = list1[:L]\n    list1_two = list1[L:]\n    return (list1_one, list1_two)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = list1[L:]\n    list1 = list1[:L]\n    return (list1, list2)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n    \n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    return [list1[L:], list1[:L]]\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 2:\n        return h_age*7\n    else:\n        return h_age*9\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 7\n    return years\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return round((h_age * 7) + (1.5 * h_age), 1)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = round((h_age * 10) + 0.5)\n    return age\n    \ndef dog_years(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = age / 10\n    return years\n    \ndef dog_years_to_dog_age(years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = years * 10\n    return age\n    \ndef dog_age_in_dog_years(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = dog_years(age)\n    return years\n    \ndef dog_age_in_years(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = dog_years(age)\n    return years\n    \ndef dog_age_in_weeks(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    weeks = dog_years(age) * 7\n    return weeks\n    \ndef dog_age_in_days(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    days = dog_years(age) * 365\n    return days\n    \ndef dog_age_in_hours(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    hours = dog_years(age) * 24 * 60\n    return hours\n    \ndef dog_age_in_minutes(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    minutes = dog_years(age) * 24 * 60 * 60\n    return minutes\n    \ndef dog_age_in_seconds(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    seconds = dog_years(age) * 24 * 60 * 60 * 24\n    return seconds\n    \ndef dog_age_in_milliseconds(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    milliseconds = dog_years(age) * 24 * 60 * 60 * 24 * 1000\n    return milliseconds\n    \ndef dog_age_in_microseconds(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    microseconds = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000\n    return microseconds\n    \ndef dog_age_in_pico_seconds(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    pico_seconds = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000\n    return pico_seconds\n    \ndef dog_age_in_petaseconds(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    petaseconds = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000\n    return petaseconds\n    \ndef dog_age_in_picoseconds(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    picoseconds = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000\n    return picoseconds\n    \ndef dog_age_in_femtoseconds(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    femtoseconds = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000\n    return femtoseconds\n    \ndef dog_age_in_attoseconds(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    attoseconds = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000\n    return attoseconds\n    \ndef dog_age_in_gigaseconds(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    gigaseconds = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000\n    return gigaseconds\n    \ndef dog_age_in_teraseconds(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    teraseconds = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000\n    return teraseconds\n    \ndef dog_age_in_petabyte(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    petabyte = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000\n    return petabyte\n    \ndef dog_age_in_terabyte(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    terabyte = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000\n    return terabyte\n    \ndef dog_age_in_gigabyte(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    gigabyte = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000\n    return gigabyte\n    \ndef dog_age_in_terabyte(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    terabyte = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000\n    return terabyte\n    \ndef dog_age_in_petabyte(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    petabyte = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000\n    return petabyte\n    \ndef dog_age_in_terabyte(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    terabyte = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000\n    return terabyte\n    \ndef dog_age_in_petabyte(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    petabyte = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000\n    return petabyte\n    \ndef dog_age_in_petabits(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    petabits = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000\n    return petabits\n    \ndef dog_age_in_terabits(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    terabits = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000\n    return terabits\n    \ndef dog_age_in_gigabits(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    gigabits = dog_years(age) * 24 * 60 * 60 * 24 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000\n    return gigabit"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print(\"The dog's age cannot be negative.\")\n    elif h_age == 1:\n        print(\"The dog is one year old.\")\n    else:\n        print(\"The dog is \" + str(h_age) + \" years old.\")\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 0:\n        return h_age * 7\n    else:\n        return 0\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return round((float(h_age) * 7) + 2.5, 1)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <=0:\n        return 0\n    return (17 * h_age) + 1\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lists = []\n    i = 0\n    while i < len(S):\n        lists.append(S[i:i+step])\n        i += step\n    return lists\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) == 0:\n        return []\n    if len(S) == 1:\n        return [S]\n    if len(S) % step == 0:\n        return [S[i::step] for i in range(step)]\n    return [S[i::step] for i in range(step)] + list_split(S[step::], step)\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_of_lists = [S[i:i + step] for i in range(0, len(S), step)]\n    return list_of_lists\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = []\n    for i in range(0, len(S), step):\n        l.append(S[i:i+step])\n    return l\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    ret = []\n    for i in range(0, len(S), step):\n        ret.append(S[i:i+step])\n    return ret\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Your Code Here\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side = l*4\n    perimeter = side*6\n    area = side**2\n    return (perimeter, area)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    l = l**2\n    return 6 * (l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    A = 6\n    return A * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    assert type(l) == int, 'The side length should be an integer'\n    if l >= 0:\n        return 6 * l * l\n    else:\n        return 'Invalid side length'\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # import pdb; pdb.set_trace()\n    # assert(isinstance(l, int) and l > 0)\n    # import pdb; pdb.set_trace()\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateral = 4 * l**2\n    return lateral\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i*i for i in xrange(1,n+1) if i%2==1])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1, n+1, 2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(x**2 for x in range(n) if x%2)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x**2 for x in range(1, n+1, 2)])\n    \ndef sum_odd_and_square_sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the odd and the square sum of the first n odd natural numbers.\n    '''\n    return sum([x for x in range(1, n+1, 2)] + [x**2 for x in range(1, n+1, 2)])\n    \ndef all_natural_squares(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    return sum([x**2 for x in range(1, n+1)])\n    \ndef all_odd_squares(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x**2 for x in range(1, n+1, 2)])\n    \ndef is_prime(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is prime and False if n is not prime.\n    '''\n    # Check the number against a list of divisors that only have 2 divisors\n    if n < 2:\n        return False\n    return not any([n % x == 0 for x in range(2, int(n**.5))])\n    \ndef get_first_prime(n):\n    '''\n    Write a python function that takes in an integer n and returns the first prime number that is greater than or equal to n.\n    '''\n    # Check if n is prime\n    if is_prime(n):\n        return n\n    # Check if n is less than 2\n    if n < 2:\n        return None\n    # Find the largest prime that is less than n\n    return next(x for x in range(n, 1, -1) if is_prime(x))\n    \ndef get_all_primes(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of all primes between 1 and n inclusive.\n    '''\n    # Check if n is prime\n    if is_prime(n):\n        return [n]\n    # Check if n is less than 2\n    if n < 2:\n        return []\n    # Find all primes from 1 to n\n    return [x for x in range(2, n+1) if is_prime(x)]\n    \ndef get_all_divisors(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of all divisors of n including 1 and n.\n    '''\n    # Check if n is prime\n    if is_prime(n):\n        return [1, n]\n    # Check if n is less than 2\n    if n < 2:\n        return []\n    # Find all divisors of n from 2 to n\n    return [x for x in range(2, n+1) if n % x == 0]\n    \ndef get_factors(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of all the factors of n including 1 and n.\n    '''\n    # Check if n is prime\n    if is_prime(n):\n        return [1, n]\n    # Check if n is less than 2\n    if n < 2:\n        return []\n    # Find all divisors of n from 2 to n\n    return [x for x in range(2, n+1) if n % x == 0]\n    \ndef get_all_divisors_and_factors(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of all the divisors and their factors of n including 1 and n.\n    '''\n    # Check if n is prime\n    if is_prime(n):\n        return [1, n]\n    # Check if n is less than 2\n    if n < 2:\n        return []\n    # Find all divisors of n from 2 to n\n    return [x for x in range(2, n+1) if n % x == 0] + [1, n]\n    \ndef get_all_divisors_and_factors_sorted(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of all the divisors and their factors of n including 1 and n in the sorted order of the divisors.\n    '''\n    # Check if n is prime\n    if is_prime(n):\n        return [1, n]\n    # Check if n is less than 2\n    if n < 2:\n        return []\n    # Find all divisors of n from 2 to n\n    divisors = [x for x in range(2, n+1) if n % x == 0]\n    # Find all divisors and factors of n from 2 to n\n    divisor_and_factors = [x for x in range(2, n+1) if n % x == 0] + [1, n]\n    # Sort the divisors and factors\n    divisors.sort()\n    divisor_and_factors.sort()\n    return divisor_and_factors\n    \ndef get_largest_prime_factor(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest prime factor of n.\n    '''\n    # Check if n is prime\n    if is_prime(n):\n        return n\n    # Check if n is less than 2\n    if n < 2:\n        return None\n    # Find the largest prime that is less than n\n    return next(x for x in range(n, 1, -1) if is_prime(x))\n    \ndef get_all_prime_factors(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of all the prime factors of n including 1 and n.\n    '''\n    # Check if n is prime\n    if is_prime(n):\n        return [1, n]\n    # Check if n is less than 2\n    if n < 2:\n        return []\n    # Find all divisors of n from 2 to n\n    return [x for x in range(2, n+1) if n % x == 0]\n    \ndef get_all_prime_factors_sorted(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of all the prime factors of n including 1 and n in the sorted order of the prime factors.\n    '''\n    # Check if n is prime\n    if is_prime(n):\n        return [1, n]\n    # Check if n is less than 2\n    if n < 2:\n        return []\n    # Find all prime factors of n from 2 to n\n    divisors = [x for x in range(2, n+1) if n % x == 0]\n    # Sort the divisors\n    divisors.sort()\n    return divisors\n    \ndef get_all_factors(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of all the factors of n including 1 and n.\n    '''\n    # Check if n is prime\n    if is_prime(n):\n        return [1, n]\n    # Check if n is less than 2\n    if n < 2:\n        return []\n    # Find all divisors of n from 2 to n\n    return [x for x in range(2, n+1) if n % x == 0]\n    \ndef get_all_factors_sorted(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of all the factors of n including 1 and n in the sorted order of the factors.\n    '''\n    # Check if n is prime\n    if is_prime(n):\n        return [1, n]\n    # Check if n is less than 2\n    if n < 2:\n        return []\n    # Find all divisors of n from 2 to n\n    divisors = [x for x in range(2, n+1) if n % x == 0]\n    # Sort the divisors\n    divisors.sort()\n    return divisors\n    \ndef get_smallest_multiple(n):\n    '"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if i % 2!= 0:\n            sum += i ** 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1,n+1,2):\n        sum_of_squares += i*i\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(i%2 == 1):\n            sum = sum + (i*i)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        if n < 0:\n            print('Invalid Input')\n        else:\n            sum = 0\n            for i in range(1,n+1,2):\n                sum = sum + i*i\n            print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = n // 10\n        print(sum)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the number n.\n    '''\n    if not isinstance(n, int):\n        print('Invalid Input')\n    else:\n        sum = 0\n        while(n > 0):\n            sum = sum + n % 10\n            n = "
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 1:\n            sum += i * i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for num in range(1, n+1):\n        if num % 2 == 1:\n            sum = sum + (num ** 2)\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 5\n    if n == 2:\n        return 15\n    if n == 3:\n        return 85\n    if n == 4:\n        return 175\n    if n == 5:\n        return 215\n    if n == 6:\n        return 265\n    if n == 7:\n        return 325\n    if n == 8:\n        return 385\n    if n == 9:\n        return 435\n    if n == 10:\n        return 495\n    if n == 11:\n        return 555\n    if n == 12:\n        return 615\n    if n == 13:\n        return 665\n    if n == 14:\n        return 725\n    if n == 15:\n        return 775\n    if n == 16:\n        return 835\n    if n == 17:\n        return 885\n    if n == 18:\n        return 945\n    if n == 19:\n        return 995\n    if n == 20:\n        return 1055\n    if n == 21:\n        return 1125\n    if n == 22:\n        return 1175\n    if n == 23:\n        return 1235\n    if n == 24:\n        return 1285\n    if n == 25:\n        return 1345\n    if n == 26:\n        return 1395\n    if n == 27:\n        return 1455\n    if n == 28:\n        return 1515\n    if n == 29:\n        return 1565\n    if n == 30:\n        return 1625\n    if n == 31:\n        return 1675\n    if n == 32:\n        return 1735\n    if n == 33:\n        return 1785\n    if n == 34:\n        return 1845\n    if n == 35:\n        return 1905\n    if n == 36:\n        return 1957\n    if n == 37:\n        return 2025\n    if n == 38:\n        return 2075\n    if n == 39:\n        return 2135\n    if n == 40:\n        return 2185\n    if n == 41:\n        return 2245\n    if n == 42:\n        return 2295\n    if n == 43:\n        return 2355\n    if n == 44:\n        return 2415\n    if n == 45:\n        return 2465\n    if n == 46:\n        return 2525\n    if n == 47:\n        return 2575\n    if n == 48:\n        return 2635\n    if n == 49:\n        return 2685\n    if n == 50:\n        return 2745\n    if n == 51:\n        return 2805\n    if n == 52:\n        return 2765\n    if n == 53:\n        return 2825\n    if n == 54:\n        return 2875\n    if n == 55:\n        return 2935\n    if n == 56:\n        return 2985\n    if n == 57:\n        return 3045\n    if n == 58:\n        return 3105\n    if n == 59:\n        return 3165\n    if n == 60:\n        return 3225\n    if n == 61:\n        return 3275\n    if n == 62:\n        return 3345\n    if n == 63:\n        return 3395\n    if n == 64:\n        return 3455\n    if n == 65:\n        return 3515\n    if n == 66:\n        return 3565\n    if n == 67:\n        return 3625\n    if n == 68:\n        return 3655\n    if n == 69:\n        return 3715\n    if n == 70:\n        return 3775\n    if n == 71:\n        return 3835\n    if n == 72:\n        return 3895\n    if n == 73:\n        return 3955\n    if n == 74:\n        return 4015\n    if n == 75:\n        return 4065\n    if n == 76:\n        return 4125\n    if n == 77:\n        return 4185\n    if n == 78:\n        return 4225\n    if n == 79:\n        return 4275\n    if n == 80:\n        return 4345\n    if n == 81:\n        return 4395\n    if n == 82:\n        return 4445\n    if n == 83:\n        return 4495\n    if n == 84:\n        return 4545\n    if n == 85:\n        return 4615\n    if n == 86:\n        return 4665\n    if n == 87:\n        return 4725\n    if n == 88:\n        return 4785\n    if n == 89:\n        return 4835\n    if n == 90:\n        return 4895\n    if n == 91:\n        return 4955\n    if n == 92:\n        return 5015\n    if n == 93:\n        return 5065\n    if n == 94:\n        return 5125\n    if n == 95:\n        return 5185\n    if n == 96:\n        return 5235\n    if n == 97:\n        return 5295\n    if n == 98:\n        return 5355\n    if n == 99:\n        return 5315\n    if n == 100:\n        return 5365\n    if n == 101:\n        return 5425\n    if n == 102:\n        return 5485\n    if n == 103:\n        return 5535\n    if n == 104:\n        return 5595\n    if n == 105:\n        return 5645\n    if n == 106:\n        return 5715\n    if n == 107:\n        return 5765\n    if n == 108:\n        return 5825\n    if n == 109:\n        return 5875\n    if n == 110:\n        return 5935\n    if n == 111:\n        return 5985\n    if n == 112:\n        return 6045\n    if n == 113:\n        return 6105\n    if n == 114:\n        return 6155\n    if n == 115:\n        return 6215\n    if n == 116:\n        return 6265\n    if n == 117:\n        return 6335\n    if n == 118:\n        return 6395\n    if n == 119:\n        return 6445\n    if n == 120:\n        return 6515\n    if n == 121:\n        return 6565\n    if n == 122:\n        return 6625\n    if n == 123:\n        return 6675\n    if n == 124:\n        return 6735\n    if n == 125:\n        return 6795\n    if n == 126:\n        return 6845\n    if n == 127:\n        return 6905\n    if n == 128:\n        return 6955\n    if n == 129:\n        return 7015\n    if n == 130:\n        return 7065\n    if n == 131:\n        return 7125\n    if n == 132:\n        return 7185\n    if n == 133:\n        return 7235\n    if n == 134:\n        return 7295\n    if n == 135:\n        return 7355\n    if n == 136:\n        return 7315\n    if n == 137:\n        return 7365\n    if n == 138:\n        return 7425\n    if n == 139:\n        return 7485\n    if n == 140:\n        return 7535\n    if n == 141:\n        return 7595\n    if n == 142:\n        return 7645\n    if n == 143:\n        return 7715\n    if n == 144:\n        return 7765\n    if n == 145:\n        return 7825\n    if n == 146:\n        return 7885\n    if n == 147:\n        return 7935\n    if n == 148:\n        return 7995\n    if n == 149:\n        return 8055\n    if n == 150:\n        return 8015\n    if n == 151:\n        return 8065\n    if n == 152:\n        return 8125\n    if n == 153:\n        return 8185\n    if n == 154:\n        return 8225\n    if n == 155:\n        return 8285\n    if n == 156:\n        return 8345\n    if n == 157:\n        return 8395\n    if n == 158:\n        return 8455\n    if n == 159:\n        return 8415\n    if n == 160:\n        return 8465\n    if n == 161:\n        return 8525\n    if n == 162:\n        return 8575\n    if n == 163:\n        return 8635\n    if n == 164:\n        return 8695\n    if n == 165:\n        return 8745\n    if n == 166:\n        return 8805\n    if n == 167:\n        return 8855\n    if n == 168:\n        return 8915"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(round(1.0/3.0 * (2**n - 1)))\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 5 * find_star_num(n - 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    '''\n    example:\n    find_star_num(5) == 15\n    find_star_num(0) == 1\n    '''\n    # the star number starts from 1\n    num = 1\n    # then'th star number is the sum of n-1, n-2,..., 1\n    for i in range(0, n):\n        num = num + i\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1:\n        return 'There is no %s-star' % n\n    if n == 1:\n        return 1\n    else:\n        return n * (find_star_num(n - 1) * 2 - 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num_of_stars = 1\n    for i in range(n):\n        num_of_stars = num_of_stars * (i + 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int((n*(n+1))/2)\n    "
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Helper function to find number of stars that have been used\n    def find_stars(stars):\n        # Starting with no stars we will have to use all stars\n        num_stars = 0\n        # If star is lower than number of stars we can use it\n        while stars > num_stars: \n            num_stars += 1\n            # If star number is higher than n we don't need to use stars\n            if stars < num_stars:\n                return False\n        return True\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    seq = ''\n    while len(seq) < n:\n        seq += str(n)\n        n -= 1\n    return int(seq)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1,n):\n        x = i*(i+1)\n        if x > n:\n            return i\n            break\n        if x == n:\n            return i\n    return 0\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k in string.ascii_letters:\n        return ord(k)\n    if k in string.digits:\n        return ord(k) - ord('0') + 10\n    return ord(k) - ord('a') + 36\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \n    \ndef base_change(k, b1, b2):\n    '''\n    Write a function to convert a base-k number to base-b number\n    Use the ascii_value function as the base.\n    '''\n    k = int(k)\n    b1 = int(b1)\n    b2 = int(b2)\n    \n    def base_convert(k, b1, b2):\n        if b1 == b2:\n            return k\n        elif b1 < b2:\n            return base_convert(int(k, b1), b2)\n        elif b2 < b1:\n            return base_convert(int(k, b2), b1)\n    \n    return base_convert(k, b1, b2)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k) - 32\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) is str:\n        k = k.lower()\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k in string.ascii_letters:\n        return ord(k)\n    elif k in string.digits:\n        return ord(k)\n    elif k in string.punctuation:\n        return ord(k)\n    else:\n        return None\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == 'a':\n        return 97\n    elif k == 'b':\n        return 98\n    elif k == 'c':\n        return 99\n    elif k == 'd':\n        return 100\n    elif k == 'e':\n        return 101\n    elif k == 'f':\n        return 102\n    elif k == 'g':\n        return 103\n    elif k == 'h':\n        return 104\n    elif k == 'i':\n        return 105\n    elif k == 'j':\n        return 106\n    elif k == 'k':\n        return 107\n    elif k == 'l':\n        return 108\n    elif k =='m':\n        return 109\n    elif k == 'n':\n        return 110\n    elif k == 'o':\n        return 111\n    elif k == 'p':\n        return 112\n    elif k == 'q':\n        return 113\n    elif k == 'r':\n        return 114\n    elif k =='s':\n        return 115\n    elif k == 't':\n        return 116\n    elif k == 'u':\n        return 117\n    elif k == 'v':\n        return 118\n    elif k == 'w':\n        return 119\n    elif k == 'x':\n        return 120\n    elif k == 'y':\n        return 121\n    elif k == 'z':\n        return 122\n    elif k == '1':\n        return 48\n    elif k == '2':\n        return 49\n    elif k == '3':\n        return 50\n    elif k == '4':\n        return 51\n    elif k == '5':\n        return 52\n    elif k == '6':\n        return 53\n    elif k == '7':\n        return 54\n    elif k == '8':\n        return 55\n    elif k == '9':\n        return 56\n    elif k == '0':\n        return 57\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k in ascii_value_table:\n        return ascii_value_table[k]\n    else:\n        return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if not isinstance(arr, list):\n        return False\n    else:\n        result = 0\n        for i in range(0, len(arr), 2):\n            if i == len(arr):\n                break\n            else:\n                result += arr[i]\n        return result\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_arr = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i] %2 == 0:\n            sum_arr = sum_arr + arr[i]\n    return sum_arr\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0,len(arr),2):\n        if arr[i]%2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total = total + arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0,len(arr),2):\n        if arr[i]%2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            res += arr[i]\n    return res\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[i] for i in range(0, len(arr), 2))\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for x in range(1, n + 1):\n        if x % 2 == 0:\n            sum += x ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([x**5 for x in xrange(2,n,2) if x**5 % 4 == 0])\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        print('invalid')\n    elif n == 0:\n        return 0\n    else:\n        return n**5 + even_Power_Sum(n-1)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return (sum(range(n, 0, -2)))\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for num in range(1, n + 1):\n        if num ** 5 % 2 == 0:\n            result += num\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2==0:\n            sum = sum + i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        if i%2 == 0:\n            total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(n*(x**5) for x in range(1,n+1) if x%2 == 0)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize result\n    result = 0\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if i ** 5 % 2 == 0:\n            sum += i ** 5\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    return [item[-1] for item in test_list]\n    \ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    \n    return [item[0] for item in test_list]\n    \ndef word_lengths(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list of the length of each word in the tuple.\n    '''\n    \n    return [len(item) for item in test_list]\n    \ndef longer_word(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the longest word in each tuple.\n    '''\n    \n    return [max(item) for item in test_list]\n    \ndef shorter_word(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the shortest word in each tuple.\n    '''\n    \n    return [min(item) for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        result.append(i[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [a[1] for a in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    # list of tuples\n    list_of_tuples = [('John', 'New York'), ('Jack', 'Los Angeles'), ('Jill', 'Chicago'), ('Nathan', 'Medan')]\n    \n    # list of strings\n    list_of_strings = ['John', 'Jack', 'Jill', 'Nathan']\n    \n    # list of ints\n    list_of_ints = [1,2,3,4,5,6,7]\n    \n    # list of floats\n    list_of_floats = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]\n    \n    # list of mixed data types\n    list_of_mixed_data_types = [1, 'a', 2.0, 'b', True, 4, 'd', 'e']\n    \n    # list of dictionaries\n    list_of_dictionaries = [{'name': 'John', 'city': 'New York'}, {'name': 'Jack', 'city': 'Los Angeles'}, {'name': 'Jill', 'city': 'Chicago'}, {'name': 'Nathan', 'city': 'Medan'}]\n    \n    # list of lists\n    list_of_lists = [[1,2,3,4,5,6,7], [8,9,10,11,12,13,14]]\n    \n    # Return the last element of each tuple in the list_of_tuples\n    # def rear_extract(test_list):\n    #     list_of_tuples = [('John', 'New York'), ('Jack', 'Los Angeles'), ('Jill', 'Chicago'), ('Nathan', 'Medan')]\n    #     for i in test_list:\n    #         print i[-1]\n    \n    print('Rear Extract')\n    print('List of tuples: ', list_of_tuples)\n    print('List of strings: ', list_of_strings)\n    print('List of integers: ', list_of_ints)\n    print('List of floats: ', list_of_floats)\n    print('List of mixed data types: ', list_of_mixed_data_types)\n    print('List of dictionaries: ', list_of_dictionaries)\n    print('List of lists: ', list_of_lists)\n    print()\n    \n    return_list = []\n    for i in list_of_tuples:\n        return_list.append(i[-1])\n    \n    print('Returned list: ', return_list)\n    \n    return_list2 = []\n    for i in list_of_strings:\n        return_list2.append(i[-1])\n    \n    print('Returned list: ', return_list2)\n    \n    return_list3 = []\n    for i in list_of_ints:\n        return_list3.append(i[-1])\n    \n    print('Returned list: ', return_list3)\n    \n    return_list4 = []\n    for i in list_of_floats:\n        return_list4.append(i[-1])\n    \n    print('Returned list: ', return_list4)\n    \n    return_list5 = []\n    for i in list_of_mixed_data_types:\n        return_list5.append(i[-1])\n    \n    print('Returned list: ', return_list5)\n    \n    return_list6 = []\n    for i in list_of_dictionaries:\n        return_list6.append(i['city'][-1])\n    \n    print('Returned list: ', return_list6)\n    \n    return_list7 = []\n    for i in list_of_lists:\n        return_list7.append(i[-1])\n    \n    print('Returned list: ', return_list7)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    length = min(len(test_tup1), len(test_tup2))\n    print 'length', length\n    for i in range(length):\n        new_tup = (test_tup1[i] - test_tup2[i],)\n        test_tup1 = test_tup1[0:i] + new_tup + test_tup1[i+1:]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your Code Here\n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1], test_tup1[2] - test_tup2[2])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples are not of the same length\"\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(operator.sub, test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    output = ()\n    for i in range(len(test_tup1)):\n        output += (test_tup1[i] - test_tup2[i],)\n    return output\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(0, len(test_tup1)):\n        new_tup.append(test_tup1[i]-test_tup2[i])\n    return tuple(new_tup)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #O(n) time and space\n    return tuple(map(lambda tup: tup[0]-tup[1], zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 0\n    while i <= n:\n        bin_sum += (math.factorial(n) / (math.factorial(n - i) * math.factorial(i)))\n        i+=2\n    return bin_sum\ndef even_binomial_Coeff_Sum2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    i = 0\n    sum = 0\n    while i <= n:\n        sum = sum + ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i = i + 2\n    return sum\ndef odd_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 1\n    while i <= n:\n        bin_sum += (math.factorial(n) / (math.factorial(i) * math.factorial(n - i)))\n        i+=2\n    return bin_sum\ndef odd_binomial_Coeff_Sum2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        sum = sum + ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i = i + 2\n    return sum\ndef odd_binomial_Coeff_Sum3(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 0\n    while i <= n:\n        bin_sum += ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i+=2\n    return bin_sum\ndef even_binomial_Coeff_Sum3(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 0\n    while i <= n:\n        bin_sum += ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i+=2\n    return bin_sum\ndef even_binomial_Coeff_Sum4(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 0\n    while i <= n:\n        bin_sum += ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i=i+2\n    return bin_sum\ndef even_binomial_Coeff_Sum5(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 0\n    while i <= n:\n        bin_sum += ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i=i+2\n    return bin_sum\ndef even_binomial_Coeff_Sum6(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 0\n    while i <= n:\n        bin_sum += ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i=i+2\n    return bin_sum\ndef even_binomial_Coeff_Sum7(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 0\n    while i <= n:\n        bin_sum += ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i=i+2\n    return bin_sum\ndef even_binomial_Coeff_Sum8(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 0\n    while i <= n:\n        bin_sum += ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i=i+2\n    return bin_sum\ndef even_binomial_Coeff_Sum9(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 0\n    while i <= n:\n        bin_sum += ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i=i+2\n    return bin_sum\ndef odd_binomial_Coeff_Sum1(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 1\n    while i <= n:\n        bin_sum += ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i=i+2\n    return bin_sum\ndef odd_binomial_Coeff_Sum2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 1\n    while i <= n:\n        bin_sum += ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i=i+2\n    return bin_sum\ndef odd_binomial_Coeff_Sum3(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 0\n    while i <= n:\n        bin_sum += ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i=i+2\n    return bin_sum\ndef even_binomial_Coeff_Sum4(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 0\n    while i <= n:\n        bin_sum += ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i=i+2\n    return bin_sum\ndef even_binomial_Coeff_Sum5(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 0\n    while i <= n:\n        bin_sum += ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i=i+2\n    return bin_sum\ndef even_binomial_Coeff_Sum6(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    bin_sum = 0\n    i = 0\n    while i <= n:\n        bin_sum += ((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        i=i+2\n    return bin_sum\ndef even_binomial_Coeff"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    a = [0 for x in xrange(n+1)]\n    a[0] = 1\n    for i in xrange(1, n+1):\n        j = min(i, n)\n        while j > 0:\n            a[j] += a[j-1]\n            j -= 1\n    return a[n]\n    \ndef even_binomial_coeff(n,k):\n    '''\n    Write a python function that takes in two positive integers n and k and returns the kth binomial coefficient of n.\n    '''\n    if n < k:\n        return 0\n    elif n==k or k==0:\n        return 1\n    else:\n        return even_binomial_coeff(n-1,k-1) + even_binomial_coeff(n-1,k)\n    \ndef binomial_coeff_sum(n,k):\n    '''\n    Write a python function that takes in two positive integers n and k and returns the sum of kth index binomial coefficients of n.\n    '''\n    s = 0\n    for i in xrange(k+1):\n        s += even_binomial_coeff(n,i)\n    return s\n    \ndef binomial_coeff_sum_recursive(n,k):\n    '''\n    Write a python function that takes in two positive integers n and k and returns the sum of kth index binomial coefficients of n.\n    '''\n    if n == k:\n        return 1\n    elif k == 0:\n        return 1\n    else:\n        return binomial_coeff_sum_recursive(n-1,k-1) + binomial_coeff_sum_recursive(n-1,k)\n    \ndef factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the factorial of n.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef comb(n,r):\n    '''\n    Write a python function that takes in two positive integers n and r and returns the n choose r value.\n    '''\n    if n<r:\n        return 0\n    elif r==n:\n        return 1\n    else:\n        return factorial(n)/(factorial(r)*factorial(n-r))\n    \ndef sum_of_comb(n,r):\n    '''\n    Write a python function that takes in two positive integers n and r and returns the sum of n choose r values.\n    '''\n    s = 0\n    for i in xrange(r+1):\n        s += comb(n,i)\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    bin_coeff_sum = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            bin_coeff_sum += binomial_coeff(n, i)\n    return bin_coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 1\n    else:\n        return (n/2)*(2*even_binomial_Coeff_Sum(n-1))\ndef factorial( n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef num_digits( n):\n    if n == 0:\n        return 1\n    return 1 + num_digits(n/10)\ndef factorial_digits( n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_digits(n-1)\ndef fibonacci( n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef fibonacci_memo( n, memo):\n    if n == 0 or n == 1:\n        return n\n    if memo[n]!= -1:\n        return memo[n]\n    else:\n        memo[n] = fibonacci_memo(n-1, memo) + fibonacci_memo(n-2, memo)\n        return memo[n]\ndef fibonacci_tab( n):\n    if n == 0 or n == 1:\n        return n\n    memo = [0 for i in xrange(n+1)]\n    memo[0] = 0\n    memo[1] = 1\n    for i in xrange(2, n+1):\n        memo[i] = memo[i-1] + memo[i-2]\n    return memo[n]\ndef nth_fibonacci( n, memo):\n    if n == 0 or n == 1:\n        return n\n    if memo[n]!= -1:\n        return memo[n]\n    else:\n        memo[n] = nth_fibonacci(n-1, memo) + nth_fibonacci(n-2, memo)\n        return memo[n]\ndef nth_fibonacci_tab( n):\n    memo = [0 for i in xrange(n+1)]\n    memo[0] = 0\n    memo[1] = 1\n    for i in xrange(2, n+1):\n        memo[i] = memo[i-1] + memo[i-2]\n    return memo[n]\ndef sum_of_squares( n):\n    if n == 0:\n        return 0\n    else:\n        return n*n + sum_of_squares(n-1)\ndef sum_of_squares_memo( n):\n    if n == 0:\n        return 0\n    else:\n        if n in memo_dict:\n            return memo_dict[n]\n        else:\n            memo_dict[n] = n*n + sum_of_squares_memo(n-1)\n            return memo_dict[n]\ndef sum_of_squares_tab( n):\n    memo = [0 for i in xrange(n+1)]\n    memo[0] = 0\n    for i in xrange(1, n+1):\n        memo[i] = i*i + memo[i-1]\n    return memo[n]\ndef pascals_triangle(n):\n    if n == 0:\n        return [1]\n    else:\n        return pascals_triangle(n-1) + [1]\ndef pascals_triangle_memo( n):\n    if n == 0:\n        return [1]\n    if n in memo_dict:\n        return memo_dict[n]\n    else:\n        memo_dict[n] = pascals_triangle(n-1) + [1]\n        return memo_dict[n]\ndef pascals_triangle_tab( n):\n    memo = [0 for i in xrange(n+1)]\n    memo[0] = [1]\n    for i in xrange(1, n+1):\n        memo[i] = [1] + [memo[i-1][j] + memo[i-1][j-1] for j in xrange(1, i)]\n    return memo[n]\ndef sum_of_elements_in_lst( lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        return lst[0] + sum_of_elements_in_lst(lst[1:])\ndef sum_of_elements_in_lst_memo( lst):\n    if len(lst) == 0:\n        return 0\n    if lst in memo_dict:\n        return memo_dict[lst]\n    else:\n        memo_dict[lst] = lst[0] + sum_of_elements_in_lst_memo(lst[1:])\n        return memo_dict[lst]\ndef sum_of_elements_in_lst_tab( lst):\n    memo = [0 for i in xrange(len(lst)+1)]\n    memo[0] = 0\n    for i in xrange(1, len(lst)+1):\n        memo[i] = lst[i-1] + memo[i-1]\n    return memo[len(lst)]\ndef sum_of_elements_in_lst_iter( lst):\n    total = 0\n    for i in xrange(len(lst)):\n        total += lst[i]\n    return total\ndef sum_of_elements_in_lst_tab( lst):\n    memo = [0 for i in xrange(len(lst)+1)]\n    memo[0] = 0\n    for i in xrange(1, len(lst)+1):\n        memo[i] = memo[i-1] + lst[i-1]\n    return memo[len(lst)]\ndef sum_of_elements_in_lst_memo( lst):\n    if len(lst) == 0:\n        return 0\n    if lst in memo_dict:\n        return memo_dict[lst]\n    else:\n        memo_dict[lst] = lst[0] + sum_of_elements_in_lst_memo(lst[1:])\n        return memo_dict[lst]\ndef sum_of_elements_in_lst_memo( lst):\n    if len(lst) == 0:\n        return 0\n    if lst in memo_dict:\n        return memo_dict[lst]\n    else:\n        memo_dict[lst] = lst[0] + sum_of_elements_in_lst_memo(lst[1:])\n        return memo_dict[lst]\ndef sum_of_elements_in_lst_memo( lst):\n    if len(lst) == 0:\n        return 0\n    memo_dict[lst] = lst[0] + sum_of_elements_in_lst_memo(lst[1:])\n    return memo_dict[lst]\ndef sum_of_elements_in_lst_memo( lst):\n    if len(lst) == 0:\n        return 0\n    memo_dict[lst] = lst[0] + sum_of_elements_in_lst_memo(lst[1:])\n    return memo_dict[lst]\ndef sum_of_elements_in_lst_memo( lst):\n    if len(lst) == 0:\n        return 0\n    memo_dict[lst] = lst[0] + sum_of_elements_in_lst_memo(lst[1:])\n    return memo_dict[lst]\ndef sum_of_elements_in_lst_memo( lst):\n    if len(lst) == 0:\n        return 0\n    memo_dict[lst] = lst[0] + sum_of_elements_in_lst_memo(lst[1:])\n    return memo_dict[lst]\ndef sum_of_elements_in_"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0; # initialize as 0\n    for i in range(0, n):\n        s += binomial_coeff(i, n);\n    return s;\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #binomial_coeff = [1]\n    sum = 0\n    a = 1\n    b = 1\n    for i in range(0,n):\n        a = (a * (n-i))//(i+1)\n        b = (b * i)//(i+1)\n        sum = sum + b\n        #binomial_coeff.append(a*b)\n    #return sum\n    #return binomial_coeff\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0):\n        return 1\n    elif (n == 1):\n        return 1\n    elif (n == 2):\n        return 2\n    else:\n        return binomial_coeff(n)\ndef binomial_coeff(n, k):\n    '''\n    Write a python function that takes in two positive integers and returns the binomial coefficient of k over n\n    '''\n    if (k == 0):\n        return 1\n    elif (k > n):\n        return 0\n    else:\n        if (k == 1):\n            return n\n        else:\n            return binomial_coeff(n-1, k-1) + binomial_coeff(n-1, k)\ndef find_factors(n):\n    '''\n    Write a python function that takes in a positive integer n and returns a list of the prime factors of the number.\n    '''\n    if (n % 2 == 0):\n        return [2]\n    else:\n        p = 3\n        prime_factors = []\n        while (p <= n):\n            if (n % p == 0):\n                prime_factors.append(p)\n                n = n / p\n            else:\n                p = p + 2\n        return prime_factors\ndef gcd(x, y):\n    '''\n    Write a python function that takes in two positive integers and returns their greatest common divisor.\n    '''\n    while (y):\n        x, y = y, x % y\n    return x\ndef phi(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the value of phi(n)\n    '''\n    primes = find_factors(n)\n    phi = 1\n    for p in primes:\n        phi = phi * (1 - (1 / p))\n    return int(round(phi))\ndef reduced_form(a, b, m):\n    '''\n    Write a python function that takes in three nonnegative integers a, b and m, and returns the tuple (A, B, M) where A is the greatest integer such that A is divisible by m, B is the least such integer, and M is equal to A / B.\n    '''\n    A = a * m\n    B = b * m\n    M = A / B\n    return (A, B, M)\ndef sum_of_factors(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the unique factors of n.\n    '''\n    factors = find_factors(n)\n    factor_sum = 0\n    for f in factors:\n        factor_sum += f\n    return factor_sum\ndef find_prime_factors(n):\n    '''\n    Write a python function that takes in a positive integer n and returns a list of the prime factors of the number.\n    '''\n    primes = [2]\n    i = 3\n    while (i <= n):\n        if (n % i == 0):\n            primes.append(i)\n            n = n / i\n        else:\n            i = i + 2\n    return primes\ndef sum_of_divisors(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the divisors of n.\n    '''\n    divisors = 1\n    primes = find_prime_factors(n)\n    for p in primes:\n        divisors += (p - 1)\n    return divisors\ndef divisors(n):\n    '''\n    Write a python function that takes in a positive integer n and returns a list of all of the divisors of n.\n    '''\n    divisors = [1]\n    primes = find_prime_factors(n)\n    for p in primes:\n        divisors.append(p)\n        divisors.append(int(round(n / p)))\n    return divisors\ndef is_perfect(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is perfect and False otherwise.\n    '''\n    divisors = divisors(n)\n    if (n == sum_of_divisors(n)):\n        return True\n    else:\n        return False\ndef is_abundant(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is abundant and False otherwise.\n    '''\n    divisors = divisors(n)\n    if (n < sum_of_divisors(n)):\n        return True\n    else:\n        return False\ndef is_deficient(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is deficient and False otherwise.\n    '''\n    divisors = divisors(n)\n    if (n > sum_of_divisors(n)):\n        return True\n    else:\n        return False\ndef is_primitive_root(a, p):\n    '''\n    Write a python function that takes in a positive integer a and a positive integer p and returns True if a is a primitive root of p and False otherwise.\n    '''\n    if (math.gcd(a, p)!= 1):\n        return False\n    for i in range(1, p):\n        if (a ** (i * p) % p == 1):\n            return False\n    return True\ndef primitive_root(p):\n    '''\n    Write a python function that takes in a positive integer p and returns a list of all primitive roots of p.\n    '''\n    root_list = []\n    for a in range(2, p):\n        if (is_primitive_root(a, p)):\n            root_list.append(a)\n    return root_list\ndef is_prime(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    if (n == 1):\n        return False\n    elif (n == 2):\n        return True\n    elif (n == 3):\n        return True\n    elif (n % 2 == 0):\n        return False\n    else:\n        return (is_prime(n - 1))\ndef is_generator(g, p):\n    '''\n    Write a python function that takes in a generator g, a positive integer p and returns True if g is a generator of a prime field F_p and False otherwise.\n    '''\n    if (is_prime(p)):\n        if (g ** ((p - 1) / 2) % p == 1):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef generate_generators(p):\n    '''\n    Write a python function that takes in a prime p and returns a list of all the generators of F_p.\n    '''\n    gens = []\n    for a in range(1, p):\n        if (is_generator(a, p)):\n            gens.append(a)\n    return gens\ndef primitive_element(p):\n    '''\n    Write a python function that takes in a positive integer p and returns a primitive element of F_p.\n    '''\n    gens = generate_generators(p)\n    return gens[0]\ndef is_primitive_element(a, p):\n    '''\n    Write a python function that takes in a positive integer a and a positive integer p and returns True if a is a primitive element of F_p and False otherwise.\n    '''\n    if (a in generate_generators(p)):\n        return False\n    else:\n        return True\ndef is_generator_of_order(g, p, o):\n    '''\n    Write a python function that takes in a generator g, a positive integer p and an integer o and returns True if g**o is the identity element of F_p and False otherwise.\n    '''\n    if (g ** o % p == 1):\n        return True\n    else:\n        return False\ndef order_of_generator(g, p):\n    '''\n    Write a python function that takes in a generator g, a positive integer p and returns the order of g modulo p.\n    '''\n    if (is_primitive_element(g, p)):\n        return p - 1\n    else:\n        return "
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Coeff_sum = 0\n    for i in range(0, n+1):\n        Coeff_sum += binomial_coefficient(i,n)\n    return Coeff_sum\n    \ndef binomial_coefficient(n, k): \n    '''\n    Write a python function that takes in two positive integers and finds the binomial coefficient.\n    '''\n    binomial_coefficient = 1\n    for i in range(0, k):\n        binomial_coefficient = binomial_coefficient * (n - i) / (i+1)\n    return binomial_coefficient\n    \ndef binomial_coefficient_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of binomial coefficients of every even index.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += binomial_coefficient(i,n)\n    return sum\n    \ndef Trinomial_coefficient(n,k):\n    '''\n    Write a python function that takes in two positive integers and finds the k-th trinomial coefficient.\n    '''\n    coefficient = 1\n    for i in range(1, k+1):\n        coefficient = coefficient * (n + 1 - i) / i\n    return coefficient\n    \ndef Trinomial_coefficient_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all trinomial coefficients of every even index.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += Trinomial_coefficient(i, n)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for i in range(n+1):\n        if (i%2==0):\n            total += i\n    return total\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    total = 0\n    for i in range(n):\n        total += math.factorial(n)/(math.factorial(i)*math.factorial(n - i))\n    return int(total)\n    \n    \ndef nth_row_pascal( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the nth row of the Pascal Triangle.\n    The first row is [1], the second row is [1,1] and so on.\n    '''\n    row = [1]\n    for i in range(n - 1):\n        new_row = [1]\n        for j in range(len(row) - 1):\n            new_row.append(row[j] + row[j + 1])\n        new_row.append(1)\n        row = new_row\n    return row\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.1415\n    volume = pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi*r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return np.pi*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14 * (r**2) * h)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Remember to use 2.0 * 3.14 * r * h / 3.0\n    return (2.0 * 3.14 * r * h / 3.0)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return math.pi*r*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newdict={k:v for (k,v) in dict.items() if v >= n}\n    return newdict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Your code here\n    result = {}\n    for key,value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    res = {}\n    for key in dict:\n        if dict[key] >= n:\n            res[key] = dict[key]\n    return res\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #\n    return {k: v for k,v in dict.iteritems() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}\n    \n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    output = {}\n    for k,v in dict.items():\n        if v >= n:\n            output[k] = v\n    return output\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict2 = {}\n    for key,value in dict.items():\n        if value >= n:\n            dict2[key] = value\n    return dict2\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key in dict:\n        if dict[key] < n:\n            del dict[key]\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #copy dictionary\n    new_dict = dict.copy()\n    #iterate through dictionary\n    for key,value in new_dict.items():\n        #if value is >= n, remove from dictionary\n        if value >= n:\n            new_dict.pop(key)\n    #return new dictionary\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key, value in dict.items():\n        if value >= n:\n            print key,value\n    return\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    new_tup = tuple(i[0] for i in test_tup)\n    \n    return len(new_tup)\n    \ndef count_first_elements_2(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    new_tup = tuple(i[0] for i in test_tup)\n    \n    return len(new_tup) - new_tup.index(test_tup[0][0])\n    \n    \ndef count_first_elements_3(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    new_tup = tuple(i[0] for i in test_tup)\n    \n    return len(new_tup) - test_tup.index(min(test_tup, key=lambda x: x[0]))\n    \n    \ndef count_first_elements_4(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    new_tup = tuple(i[0] for i in test_tup)\n    \n    return len(new_tup) - test_tup.index(min(test_tup, key=lambda x: x[0]))\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup = test_tup[1]\n    count = 0\n    for element in test_tup[0]:\n        if element == tup:\n            break\n        count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num = 0\n    for i in test_tup:\n        if test_tup.index(i) == 0:\n            num += 1\n    return num\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return reduce(lambda count, value: count + 1, test_tup[:], 0)\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return sum(1 for i in test_tup if i == test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for x in test_tup:\n        if x == 1:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    counter = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            counter += 1\n        else:\n            return counter\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return tuple(map(lambda x: x[0], test_tup))\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    #convert to list to sort\n    test_list = list(test_tup)\n    \n    #sort list\n    test_list.sort()\n    \n    #first element is second element in tuple\n    return test_list[0]\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if type(test_tup)!= tuple:\n        print 'Error - input is not a tuple'\n        return None\n    else:\n        pass\n    dict_of_first_occurences = {}\n    for x in test_tup:\n        if x in dict_of_first_occurences:\n            dict_of_first_occurences[x] += 1\n        else:\n            dict_of_first_occurences[x] = 1\n    return dict_of_first_occurences\n    \ndef count_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs in the given tuple.\n    '''\n    if type(test_tup)!= tuple:\n        print 'Error - input is not a tuple'\n        return None\n    else:\n        pass\n    dict_of_element_occurences = {}\n    for x in test_tup:\n        if x in dict_of_element_occurences:\n            dict_of_element_occurences[x] += 1\n        else:\n            dict_of_element_occurences[x] = 1\n    return dict_of_element_occurences\n    \ndef remove_tuple_elements(test_tup):\n    '''\n    Write a function to remove the tuple elements if their number is 1.\n    '''\n    if type(test_tup)!= tuple:\n        print 'Error - input is not a tuple'\n        return None\n    else:\n        pass\n    new_tuple = []\n    for x in test_tup:\n        if x!= 1:\n            new_tuple.append(x)\n    return tuple(new_tuple)\n    \ndef remove_tuple_elements2(test_tup):\n    '''\n    Write a function to remove the tuple elements if their number is 1.\n    '''\n    if type(test_tup)!= tuple:\n        print 'Error - input is not a tuple'\n        return None\n    else:\n        pass\n    new_tuple = tuple(x for x in test_tup if x!= 1)\n    return new_tuple\n    \ndef split_tuple(test_tup, split_element):\n    '''\n    Write a function to split the tuple into smaller tuples based on the split_element.\n    '''\n    if type(test_tup)!= tuple:\n        print 'Error - input is not a tuple'\n        return None\n    else:\n        pass\n    if type(split_element)!= int:\n        print 'Error - element to split is not an integer'\n        return None\n    else:\n        pass\n    new_tuple_list = []\n    index = 0\n    for x in test_tup:\n        if x == split_element:\n            new_tuple_list.append(test_tup[0:index])\n            new_tuple_list.append(test_tup[index:])\n            index += 1\n        else:\n            index += 1\n    return new_tuple_list\n    \ndef group_tuple(test_tup):\n    '''\n    Write a function to group the tuple elements based on the length of the element.\n    '''\n    if type(test_tup)!= tuple:\n        print 'Error - input is not a tuple'\n        return None\n    else:\n        pass\n    dict_of_length_tups = {}\n    for x in test_tup:\n        if len(x) not in dict_of_length_tups:\n            dict_of_length_tups[len(x)] = [x]\n        else:\n            dict_of_length_tups[len(x)].append(x)\n    return dict_of_length_tups\n    \ndef remove_tuple_by_key(test_tup, key_value):\n    '''\n    Write a function to remove the tuple element with the given key.\n    '''\n    if type(test_tup)!= tuple:\n        print 'Error - input is not a tuple'\n        return None\n    else:\n        pass\n    if type(key_value)!= int:\n        print 'Error - key to remove is not an integer'\n        return None\n    else:\n        pass\n    new_tuple = tuple(x for x in test_tup if x.keys()!= key_value)\n    return new_tuple\n    \ndef tuple_to_list(test_tup):\n    '''\n    Write a function to convert the tuple to a list.\n    '''\n    if type(test_tup)!= tuple:\n        print 'Error - input is not a tuple'\n        return None\n    else:\n        pass\n    return list(test_tup)\n    \ndef list_to_tuple(test_list):\n    '''\n    Write a function to convert the list to a tuple.\n    '''\n    if type(test_list)!= list:\n        print 'Error - input is not a list'\n        return None\n    else:\n        pass\n    return tuple(test_list)\n    \ndef list_to_dict(test_list):\n    '''\n    Write a function to convert the list to a dictionary.\n    '''\n    if type(test_list)!= list:\n        print 'Error - input is not a list'\n        return None\n    else:\n        pass\n    dict_of_list = {}\n    for x in test_list:\n        if x in dict_of_list:\n            dict_of_list[x] += 1\n        else:\n            dict_of_list[x] = 1\n    return dict_of_list\n    \ndef tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the tuple to a dictionary.\n    '''\n    if type(test_tup)!= tuple:\n        print 'Error - input is not a tuple'\n        return None\n    else:\n        pass\n    dict_of_tup = {}\n    for x in test_tup:\n        if x in dict_of_tup:\n            dict_of_tup[x] += 1\n        else:\n            dict_of_tup[x] = 1\n    return dict_of_tup\n    \ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the dictionary to a tuple.\n    '''\n    if type(test_dict)!= dict:\n        print 'Error - input is not a dictionary'\n        return None\n    else:\n        pass\n    return tuple(test_dict.items())\n    \ndef dict_to_list(test_dict):\n    '''\n    Write a function to convert the dictionary to a list.\n    '''\n    if type(test_dict)!= dict:\n        print 'Error - input is not a dictionary'\n        return None\n    else:\n        pass\n    return list(test_dict.items())\n    \ndef sort_by_key(test_tup):\n    '''\n    Write a function to sort the tuple based on the key of the tuple.\n    '''\n    if type(test_tup)!= tuple:\n        print 'Error - input is not a tuple'\n        return None\n    else:\n        pass\n    return sorted(test_tup, key=lambda x: x[0])\n    \ndef sort_by_key2(test_tup):\n    '''\n    Write a function to sort the tuple based on the key of the tuple.\n    '''\n    if type(test_tup)!= tuple:\n        print 'Error - input is not a tuple'\n        return None\n    else:\n        pass\n    return sorted(test_tup, key=lambda x: x[1])\n    \ndef sort_by_key3(test_tup):\n    '''\n    Write a function to sort the tuple based on the key of the tuple.\n    '''\n    if type(test_tup)!= tuple:\n        print 'Error - input is not a tuple'\n        return None\n    else:\n        pass\n    return sorted(test_tup, key=lambda x: x[0], reverse=True)\n    \ndef sort_by_key4(test_tup):\n    '''\n    Write a function to sort the tuple based on the key of the tuple.\n    '''\n    if type(test_tup)!= tuple:\n        print 'Error - inpu"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # A decagonal number is a number such that \n    # 1/n is an integer.\n    # Since n is even, the number has an even number of digits.\n    # Since n is even, it is divisible by 4.\n    # So n/2 is divisible by 4.\n    # Since n/4 is an integer, it can be converted into an integer.\n    # Hence, the number can be multiplied by 2.\n    # Hence, n can be represented as 4n/2.\n    # Thus, n is even.\n    # The number of digits is 2*n/2, hence the number is even.\n    # Hence, n/2 is an integer.\n    # Hence, n/4 is an integer.\n    # Hence, n/8 is an integer.\n    # Hence, n/16 is an integer.\n    # Hence, n/32 is an integer.\n    # Hence, n/64 is an integer.\n    # Hence, n/128 is an integer.\n    # Hence, n/256 is an integer.\n    # Hence, n/512 is an integer.\n    # Hence, n/1024 is an integer.\n    # Hence, n/2048 is an integer.\n    # Hence, n/4096 is an integer.\n    # Hence, n/8192 is an integer.\n    # Hence, n/16384 is an integer.\n    # Hence, n/32768 is an integer.\n    # Hence, n/65536 is an integer.\n    # Hence, n/131072 is an integer.\n    # Hence, n/262144 is an integer.\n    # Hence, n/524288 is an integer.\n    # Hence, n/1048576 is an integer.\n    # Hence, n/2097152 is an integer.\n    # Hence, n/4194304 is an integer.\n    # Hence, n/8388608 is an integer.\n    # Hence, n/16777216 is an integer.\n    # Hence, n/33554432 is an integer.\n    # Hence, n/67108864 is an integer.\n    # Hence, n/134217728 is an integer.\n    # Hence, n/268435456 is an integer.\n    # Hence, n/536870912 is an integer.\n    # Hence, n/1073741824 is an integer.\n    # Hence, n/2147483648 is an integer.\n    # Hence, n/4294967296 is an integer.\n    # Hence, n/900719928 is an integer.\n    # Hence, n/18446744073709551616 is an integer.\n    # Hence, n/36554574709717440 is an integer.\n    # Hence, n/72057594037927934 is an integer.\n    # Hence, n/1407374883553282304 is an integer.\n    # Hence, n/281474976710656 is an integer.\n    # Hence, n/576460752303423488 is an integer.\n    # Hence, n/1125899906842624 is an integer.\n    # Hence, n/2251799813685248 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence, n/117964827836604512 is an integer.\n    # Hence"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    return n == 0 or (n-1)*(n+1) == 2*((n*n) + (n*n) + 1)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n + 1) / 2 \n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # nth decagonal number is the number of rows that have the sum of\n    # the square of the numbers on the row that is n-th row is.\n    # For example, if n = 1, nth decagonal number is the number of rows\n    # that have the sum of the square of the numbers on the row that is 1-th row\n    # is 1^2 + 2^2 + 3^2 = 10\n    # If n = 2, nth decagonal number is the number of rows that have the sum\n    # of the square of the numbers on the row that is 2-th row is 7^2 + 9^2 = 49\n    # If n = 3, nth decagonal number is the number of rows that have the sum\n    # of the square of the numbers on the row that is 3-th row is 36^2 + 49^2 = 361\n    # You will be given a positive integer n.\n    # Your function should return the nth decagonal number.\n    # You can assume that the n is always valid.\n    # Example:\n    # If n = 1, nth decagonal number is the number of rows that have\n    # the sum of the square of the numbers on the row that is 1-th row\n    # is 1^2 + 2^2 + 3^2 = 10\n    # If n = 2, nth decagonal number is the number of rows that have\n    # the sum of the square of the numbers on the row that is 2-th row\n    # is 7^2 + 9^2 = 49\n    # If n = 3, nth decagonal number is the number of rows that have\n    # the sum of the square of the numbers on the row that is 3-th row\n    # is 36^2 + 49^2 = 361\n    # If n = 4, nth decagonal number is the number of rows that have\n    # the sum of the square of the numbers on the row that is 4-th row\n    # is 68^2 + 81^2 + 96^2 = 688 + 981 + 1004 = 1319\n    # Return the nth decagonal number.\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the decagonal number to 1\n    nth_decagonal = 1\n    \n    # Iterate over the decagonal numbers\n    for i in xrange(n - 1):\n        # Compute the next decagonal number by taking the sum of the \n        # first i + 1 decagonals\n        nth_decagonal += (n - i) * (n - i - 1) / 2\n        \n    return nth_decagonal\n    "
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n-1)/2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    d = 0\n    while d < n:\n        n += 9*d - 7*(d**2)\n        d += 1\n    return n\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(n-1))/2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in xrange(n):\n        j = i - ((n - i) / 2) * 2\n        if j < 0:\n            j = n - 1\n        if ((n - i) / 2) ** 2 == j:\n            print 'The {}th decagonal number is {}'.format(i + 1, (n - i) / 2)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if dlist is None:\n        return None\n    idx = 0\n    for el in dlist:\n        if el == item:\n            return (True, idx)\n        idx += 1\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, val in enumerate(dlist):\n        if val == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    idx = 0\n    while idx < len(dlist) and not found:\n        if dlist[idx] == item:\n            found = True\n        else:\n            idx += 1\n    return (found, idx)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            position = i\n            break\n    return (True, position)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    idx = 0\n    for i in dlist:\n        if i == item:\n            found = True\n            idx = dlist.index(i)\n    return (found, idx)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, val in enumerate(dlist):\n        if val == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == 0:\n        return True\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp = []\n    for i in test_list:\n        if i not in temp:\n            temp.append(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp = []\n    for i in test_list:\n        if i in temp:\n            return False\n        else:\n            temp.append(i)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp=[]\n    for i in test_list:\n        if i in temp:\n            return False\n        else:\n            temp.append(i)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for item in test_list:\n        if test_list.count(item) > 1:\n            unique = False\n            break\n    return unique\n    \ndef intersection(list1, list2):\n    '''\n    Write a python function to compute the intersection of two given lists\n    '''\n    return [val for val in list1 if val in list2]\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    list_len = len(test_list)\n    for i in range(list_len-1):\n        for j in range(i+1, list_len):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #test_list = [4,5,6,7,7,4,5]\n    #unique_list = [4,5,6,7]\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in nums1:\n        if i in nums2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n    \ndef over_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [num1 + num2 for num1, num2 in zip(nums1, nums2)]\n    \ndef multiply_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    return [num1 * num2 for num1, num2 in zip(nums1, nums2)]\n    \ndef add_lists(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return sum(nums1) + sum(nums2)\n    \ndef unique_elements(nums):\n    '''\n    Write a function to remove duplicates from a list\n    '''\n    return list(set(nums))\n    \ndef intersection_list(nums1,nums2):\n    '''\n    Write a function to compute the intersection of two lists\n    '''\n    return list(set(nums1) & set(nums2))\n    \ndef union_list(nums1,nums2):\n    '''\n    Write a function to compute the union of two lists\n    '''\n    return list(set(nums1) | set(nums2))\n    \ndef find_duplicates(nums):\n    '''\n    Write a function to find duplicates in a list\n    '''\n    return list(set(nums))\n    \ndef anagram(s1,s2):\n    '''\n    Write a function to find anagrams in a list\n    '''\n    return list(set(s1) & set(s2))\n    \ndef find_permutations(nums):\n    '''\n    Write a function to find permutations of a list\n    '''\n    return list(set(permutations(nums)))\n    \ndef find_product(nums):\n    '''\n    Write a function to find the product of the numbers in a list\n    '''\n    return reduce(lambda x,y: x*y, nums)\n    \ndef find_power(nums):\n    '''\n    Write a function to find the power of the numbers in a list\n    '''\n    return [x**nums.index(x) for x in nums]\n    \ndef find_prime(nums):\n    '''\n    Write a function to find the prime numbers in a list\n    '''\n    for i in nums:\n        if i < 2:\n            nums.remove(i)\n        else:\n            j = 2\n            while j*j <= i:\n                if i % j == 0:\n                    nums.remove(i)\n                j+=1\n    return nums\n    \ndef find_smallest_num(nums):\n    '''\n    Write a function to find the smallest number in a list\n    '''\n    return min(nums)\n    \ndef find_largest_num(nums):\n    '''\n    Write a function to find the largest number in a list\n    '''\n    return max(nums)\n    \ndef remove_repetitions(nums):\n    '''\n    Write a function to remove the repetitions in a list\n    '''\n    return list(set(nums))\n    \ndef sort_list(nums):\n    '''\n    Write a function to sort a list\n    '''\n    return sorted(nums)\n    \ndef find_median(nums):\n    '''\n    Write a function to find the median of a list\n    '''\n    return numpy.median(nums)\n    \ndef find_mode(nums):\n    '''\n    Write a function to find the mode of a list\n    '''\n    return max(nums, key=nums.count)\n    \ndef find_mean(nums):\n    '''\n    Write a function to find the mean of a list\n    '''\n    return sum(nums)/len(nums)\n    \ndef find_standard_deviation(nums):\n    '''\n    Write a function to find the standard deviation of a list\n    '''\n    return sqrt(sum(map(lambda x: (x - mean(nums))**2, nums))/len(nums))\n    \ndef find_minimum(nums):\n    '''\n    Write a function to find the minimum number in a list\n    '''\n    return min(nums)\n    \ndef find_maximum(nums):\n    '''\n    Write a function to find the maximum number in a list\n    '''\n    return max(nums)\n    \ndef print_menu():\n    '''\n    Write a function to print the menu of the application\n    '''\n    print(\"\"\"\n    Welcome to the application.\n    1) Create a list\n    2) Insert a value in a list\n    3) Delete a value in a list\n    4) Replace a value in a list\n    5) Sort a list\n    6) Remove duplicates from a list\n    7) Find duplicates in a list\n    8) Intersection of two lists\n    9) Union of two lists\n    10) Subtract two lists\n    11) Add two lists\n    12) Multiply two lists\n    13) Find anagrams in a list\n    14) Find permutations of a list\n    15) Find the product of the numbers in a list\n    16) Find the power of the numbers in a list\n    17) Find the prime numbers in a list\n    18) Find the smallest number in a list\n    19) Find the largest number in a list\n    20) Remove duplicates from a list\n    21) Sort a list\n    22) Find the median of a list\n    23) Find the mode of a list\n    24) Find the mean of a list\n    25) Find the standard deviation of a list\n    26) Find the minimum number in a list\n    27) Find the maximum number in a list\n    \"\"\")\n    \ndef read_input():\n    '''\n    Write a function to read the input of the application\n    '''\n    print(\"Enter the numbers separated by a space: \")\n    num_list = [float(x) for x in input().split()]\n    return num_list\n    \ndef main():\n    print_menu()\n    inp = int(input(\"Enter your choice: \"))\n    \n    if inp == 1:\n        num_list = read_input()\n    \n    elif inp == 2:\n        num_list = read_input()\n        num_list.append(float(input(\"Enter a number to be inserted: \")))\n    \n    elif inp == 3:\n        num_list = read_input()\n        num_list.remove(float(input(\"Enter a number to be deleted: \")))\n        \n    elif inp == 4:\n        num_list = read_input()\n        num_list[int(input(\"Enter the index of the number to be replaced: \"))] = float(input(\"Enter the new number: \"))\n        \n    elif inp == 5:\n        num_list = read_input()\n        num_list = sort_list(num_list)\n        \n    elif inp == 6:\n        num_list = read_input()\n        num_list = remove_repetitions(num_list)\n        \n    elif inp == 7:\n        num_list = read_input()\n        print(intersection_list(num_list, num_list))\n        \n    elif inp == 8:\n        num_list = read_input()\n        print(union_list(num_list, num_list))\n        \n    elif inp == 9:\n        num_list = read_input()\n        print(sub_list(num_list, num_list))\n        \n    elif inp == 10:\n        num_list = read_input()\n        print(over_list(num_list, num_list))\n        \n    elif inp == 11:\n        num_list = read_input()\n        print(multiply_list(num_list, num_list))\n        \n    elif inp == 12:\n        num_list = read_input()\n        print(find_product(num_list))\n        \n    elif inp == 13"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert(len(nums1)==len(nums2))\n    return [num2-num1 for num1,num2 in zip(nums1,nums2)]\n    \ndef main():\n    nums1 = [1, 2, 3, 4, 5]\n    nums2 = [2, 3, 4, 5, 6]\n    print(sub_list(nums1,nums2))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for x in range(len(nums2)):\n        nums1[x] -= nums2[x]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        return sub_list(nums2,nums1)\n    \n    nums1 = nums1[::-1]\n    nums2 = nums2[::-1]\n    \n    i = 0\n    j = 0\n    \n    while i < len(nums1):\n        while j < len(nums2) and nums1[i] == nums2[j]:\n            j += 1\n        \n        nums1[i] = nums2[j]\n        \n        j += 1\n        i += 1\n    \n    return nums1[::-1]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    len1 = len(nums1)\n    len2 = len(nums2)\n    i = 0\n    j = 0\n    if len1 < len2:\n        len1,len2 = len2,len1\n    ans = []\n    while i < len1:\n        ans.append(nums1[i] - nums2[j])\n        i += 1\n        j += 1\n    return ans\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n<10:\n        return True\n    else:\n        if n%10!=0 and n%10 not in [int(x) for x in str(n)]:\n            return False\n        else:\n            if len([int(x) for x in str(n)])<=len(str(n)):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    import re\n    if n == 0:\n        return True\n    d = {}\n    while n > 0:\n        key = n % 10\n        if key not in d:\n            d[key] = 1\n        else:\n            d[key] += 1\n        n = n // 10\n    return all(i <= j for i,j in d.items())\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    for i in range(len(str(n))):\n        if str(n)[i] not in d.keys():\n            d[str(n)[i]] = 1\n        else:\n            d[str(n)[i]] += 1\n    print(d)\n    for i in d:\n        if d[i] > int(i):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def func(n):\n        c = [int(i) for i in str(n)]\n        count = [0] * 10\n        for i in c:\n            count[i] += 1\n        for i in count:\n            if i > 1:\n                return False\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return n <= 9*sum(int(i) for i in str(n))\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int: \n        return False\n    if n <= 0: \n        return False\n    if n == 1: \n        return False\n    s = str(n)\n    for i in range(10): \n        if s.count(str(i)) > i: \n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    temp = n\n    r=0\n    while temp > 0:\n        r = r*10 + temp%10\n        temp = temp//10\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Make sure n is a positive integer\n    if type(n)!= int or n < 0:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dic = {}\n    for i in str(n):\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for k in dic:\n        if dic[k] > int(k):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    res = ''\n    if n < 0:\n        n = -n\n    if n == 0:\n        return 0\n    while n!= 0:\n        res = str(n%10) + res\n        n = n // 10\n    for i in range(10):\n        if str(i) * (str(i) in res):\n            return 0\n    return 1\n    \n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == [element] * len(list):\n        return True\n    else:\n        return False\n    \ndef check_domino(list):\n    '''\n    Write a function that takes in a list and returns true if the items are dominoes, and false otherwise.\n    '''\n    if len(list) == 1:\n        return True\n    else:\n        return list[0][0] == list[-1][1] and check_domino(list[1:-1])\n        \ndef check_domino_recursive(list):\n    '''\n    Write a function that takes in a list and returns true if the items are dominoes, and false otherwise.\n    '''\n    if len(list) == 1:\n        return True\n    elif len(list) == 2:\n        return list[0][0] == list[-1][1]\n    else:\n        return check_domino_recursive(list[1:-1]) and list[0][0] == list[-1][1]\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return list.count(element) == len(list)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(element == x for x in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(0,len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return element in list\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == [element]*len(list):\n        return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(0,len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    check = re.search(r'ab*', text)\n    if check:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"a[bbb]*\"\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search(r'\\Ab{2,3}\\b', text)\n    return match\ndef text_match_three_letter(text):\n    '''\n    Write a function that checks whether a string contains a specific substring.\n    '''\n    match = re.search(r'\\b[a-z]{3}\\b', text)\n    return match\ndef text_match_uppercase(text):\n    '''\n    Write a function that checks whether a string contains only uppercase letters.\n    '''\n    match = re.search(r'[A-Z]+', text)\n    return match\ndef text_match_lowercase(text):\n    '''\n    Write a function that checks whether a string contains only lowercase letters.\n    '''\n    match = re.search(r'[a-z]+', text)\n    return match\ndef text_match_digits(text):\n    '''\n    Write a function that checks whether a string contains only digits.\n    '''\n    match = re.search(r'\\d+', text)\n    return match\ndef text_match_digits_plus_commas(text):\n    '''\n    Write a function that checks whether a string contains digits and commas in it.\n    '''\n    match = re.search(r'\\d+(,|\\.\\d+)*', text)\n    return match\ndef text_match_digits_plus_commas_plus_dot(text):\n    '''\n    Write a function that checks whether a string contains digits, commas, and a dot in it.\n    '''\n    match = re.search(r'\\d+(,|\\.\\d+)*\\.?', text)\n    return match\ndef text_match_digits_plus_commas_plus_commas(text):\n    '''\n    Write a function that checks whether a string contains digits, commas, and a comma in it.\n    '''\n    match = re.search(r'\\d+(,|\\.\\d+)*,', text)\n    return match\ndef text_match_digits_comma_comma(text):\n    '''\n    Write a function that checks whether a string contains digits, commas, and a comma in it.\n    '''\n    match = re.search(r'\\d+(,|\\.\\d+)*,', text)\n    return match\ndef text_match_digits_comma_comma_comma(text):\n    '''\n    Write a function that checks whether a string contains digits, commas, and a comma in it.\n    '''\n    match = re.search(r'\\d+(,|\\.\\d+)*,', text)\n    return match\ndef text_match_question_mark(text):\n    '''\n    Write a function that checks whether a string contains a question mark.\n    '''\n    match = re.search(r'\\?+', text)\n    return match\ndef text_match_exclamation_mark(text):\n    '''\n    Write a function that checks whether a string contains an exclamation mark.\n    '''\n    match = re.search(r'\\!+', text)\n    return match\ndef text_match_hash_mark(text):\n    '''\n    Write a function that checks whether a string contains a hash mark.\n    '''\n    match = re.search(r'\\#+', text)\n    return match\ndef text_match_semicolon(text):\n    '''\n    Write a function that checks whether a string contains a semicolon.\n    '''\n    match = re.search(r'\\;+', text)\n    return match\ndef text_match_colon(text):\n    '''\n    Write a function that checks whether a string contains a colon.\n    '''\n    match = re.search(r'\\:+', text)\n    return match\ndef text_match_semicolon_comma(text):\n    '''\n    Write a function that checks whether a string contains a semicolon, and a comma.\n    '''\n    match = re.search(r'\\;+\\,', text)\n    return match\ndef text_match_colon_comma(text):\n    '''\n    Write a function that checks whether a string contains a colon, and a comma.\n    '''\n    match = re.search(r'\\:+\\,', text)\n    return match\ndef text_match_semicolon_comma_comma(text):\n    '''\n    Write a function that checks whether a string contains a semicolon, a comma, and a comma.\n    '''\n    match = re.search(r'\\;+\\,+\\,', text)\n    return match\ndef text_match_colon_comma_comma(text):\n    '''\n    Write a function that checks whether a string contains a colon, a comma, and a comma.\n    '''\n    match = re.search(r'\\:+\\,+\\,', text)\n    return match\ndef text_match_and(text):\n    '''\n    Write a function that checks whether a string contains 'and'.\n    '''\n    match = re.search(r'\\band\\b', text)\n    return match\ndef text_match_or(text):\n    '''\n    Write a function that checks whether a string contains 'or'.\n    '''\n    match = re.search(r'\\b(or)\\b', text)\n    return match\ndef text_match_not(text):\n    '''\n    Write a function that checks whether a string contains 'not'.\n    '''\n    match = re.search(r'\\b(not)\\b', text)\n    return match\ndef text_match_and_comma(text):\n    '''\n    Write a function that checks whether a string contains 'and' and a comma.\n    '''\n    match = re.search(r'\\band\\,', text)\n    return match\ndef text_match_and_comma_comma(text):\n    '''\n    Write a function that checks whether a string contains 'and' and a comma and a comma.\n    '''\n    match = re.search(r'\\band\\,+\\,', text)\n    return match\ndef text_match_or_comma(text):\n    '''\n    Write a function that checks whether a string contains 'or' and a comma.\n    '''\n    match = re.search(r'\\b(or)\\,', text)\n    return match\ndef text_match_or_comma_comma(text):\n    '''\n    Write a function that checks whether a string contains 'or' and a comma and a comma.\n    '''\n    match = re.search(r'\\b(or)\\,+\\,', text)\n    return match\ndef text_match_not_comma(text):\n    '''\n    Write a function that checks whether a string contains 'not' and a comma.\n    '''\n    match = re.search(r'\\b(not)\\,', text)\n    return match\ndef text_match_not_comma_comma(text):\n    '''\n    Write a function that checks whether a string contains 'not' and a comma and a comma.\n    '''\n    match = re.search(r'\\b(not)\\,+\\,', text)\n    return match\ndef text_match_not_comma_comma_comma(text):\n    '''\n    Write a function that checks whether a string contains 'not' and a comma, a comma, and a comma.\n    '''\n    match = re.search(r'\\b(not)\\,+\\,+\\,', text)\n    return match\ndef text_match_not_comma_comma_comma_comma(text):\n    '''\n    Write a function that checks whether a string contains 'not' and a comma, a comma, and a comma.\n    '''\n    match = re.search(r'\\b(not)\\,+\\,+\\,+\\,', text)\n    return match\ndef text_match_not_comma_comma_comma_comma_comma(text):\n    '''\n    Write a function that checks whether a string contains 'not' and a comma, a comma, and a comma.\n    '''\n    match = re.search(r'\\b(not)\\,+\\,+\\,+\\,+\\,+"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = re.compile(r'ab{2,3}')\n    matches = regex.findall(text)\n    return matches\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.match(r'\\Ab\\b', text)\n    return result\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}', text))\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match=re.search(r'ab{2,3}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_two_three_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match=re.search(r'ab{2,3}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_one_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters.\n    '''\n    match=re.search(r'ab{2}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_one_two_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters.\n    '''\n    match=re.search(r'ab{2}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_three_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    match=re.search(r'ab{3}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_three_one_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    match=re.search(r'ab{3}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by exactly two 'b' characters.\n    '''\n    match=re.search(r'ab{2}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_two_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by exactly two 'b' characters.\n    '''\n    match=re.search(r'ab{2}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_two_one_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by exactly two 'b' characters.\n    '''\n    match=re.search(r'ab{2}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by exactly three 'b' characters.\n    '''\n    match=re.search(r'ab{3}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_three_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by exactly three 'b' characters.\n    '''\n    match=re.search(r'ab{3}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_three_one_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by exactly three 'b' characters.\n    '''\n    match=re.search(r'ab{3}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    match=re.search(r'ab{4}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_four_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    match=re.search(r'ab{4}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_four_one_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    match=re.search(r'ab{4}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    match=re.search(r'ab{5}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_five_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    match=re.search(r'ab{5}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_five_one_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    match=re.search(r'ab{5}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    match=re.search(r'ab{6}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_six_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    match=re.search(r'ab{6}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_six_one_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    match=re.search(r'ab{6}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven 'b' characters.\n    '''\n    match=re.search(r'ab{7}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_seven_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven 'b' characters.\n    '''\n    match=re.search(r'ab{7}',text)\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found\")\ndef text_match_n_seven_one_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seve"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r\"(?<=\\s)[ab]{2,3}(?=\\s)\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_two_three_no_punctuation(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    The function should ignore the spaces in the string.\n    '''\n    pattern = re.compile(r\"(?<=\\s)[ab]{2,3}(?=\\S)\")\n    if pattern.search(text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.match(r'.*?([ab]{2,3}).*', text)\n    return result\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a_counter = 0\n    for i in text:\n        if i == 'a':\n            a_counter += 1\n        if a_counter == 2 or a_counter == 3:\n            return True\n    return False\ndef text_match_two_three_regex(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has more than three vowels in it.\n    '''\n    pattern = r'\\b[aeiou]{3,}\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_2(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has three consecutive letters, like 'einleichung', or 'beschneiden'.\n    '''\n    pattern = r'[eieio\u00f6au][eieio\u00f6au]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_3(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has two 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{2}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_4(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has five 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{5}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_5(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has three 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_6(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has three 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{3,}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_7(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has five 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{5,}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_8(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has three 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{,5}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_9(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has three 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_10(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has three 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{,5}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_11(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has five 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{5}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_12(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has three 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{,5}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_13(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has five 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{5,}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_14(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has three 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{5,}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_15(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has three 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{5,5}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_16(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has five 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{5,}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_17(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has three 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{5,5}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_18(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has five 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{5,5}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_19(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has five 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{5,}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_20(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has five 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{5,}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_21(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has five 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{5,}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two_three_regex_22(text):\n    '''\n    Write a regular expression that checks whether a string contains a word that has five 'e's in it, like 'elephant'.\n    '''\n    pattern = r'e{5,5}'\n    if re.search(pattern, text):\n        return True\n    else"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def max_sub_array_sum_repeated_helper(k, start, end):\n        if k == 1:\n            return end - start + 1\n        return max(max_sub_array_sum_repeated_helper(k - 1, start, (end + start) / 2), max_sub_array_sum_repeated_helper(k - 1, (end + start) / 2 + 1, end))\n    return max_sub_array_sum_repeated_helper(k, 0, n)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(k):\n        if i == 0:\n            max_sum = max(max_sum, sum(a))\n        else:\n            max_sum = max(max_sum, sum(a) + max_sum)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = [0] * (n-k+1)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_so_far = a[0]\n    max_ending_here = 0\n    for i in range(k):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # First solution \n    # return max_sub_array_sum_repeated_rec(a, n, k)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(n):\n        a[i] = a[i] * k\n    best = min(a)\n    curr = max(a)\n    if a == []:\n        return 0\n    if len(a) == 1:\n        return a[0]\n    for i in range(n):\n        curr = curr - a[i] + a[i+1]\n        if curr > best:\n            best = curr\n    return best\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    \n    arr = [0 for i in xrange(n)]\n    arr[0] = a[0]\n    \n    for i in xrange(1, n):\n        arr[i] = max(arr[i-1] + a[i], a[i])\n    \n    start = end = 0\n    max_end = 0\n    count = 0\n    while end < n and count < k:\n        max_end = max(max_end, arr[end])\n        end += 1\n        count += 1\n    \n    start = end = 0\n    max_start = 0\n    count = 0\n    while start < n and count < k:\n        max_start = max(max_start, arr[start])\n        start += 1\n        count += 1\n    \n    return max(max_start, max_end)\n    \n    \ndef max_sub_array_sum_2(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a[0]\n    \n    max_sum = 0\n    current_sum = 0\n    for i in xrange(n):\n        current_sum += a[i]\n        if current_sum < 0:\n            current_sum = 0\n        elif current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n    \n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    def max_sub_array_sum_repeated_helper(a, n, k, curr_sum, max_sum):\n        \n        if curr_sum >= max_sum:\n            max_sum = curr_sum\n        \n        if n == 0:\n            return max_sum\n        \n        if k == 1:\n            curr_sum += a[0]\n            return max_sub_array_sum_repeated_helper(a[1:], n-1, k-1, curr_sum, max_sum)\n        \n        return max(max_sub_array_sum_repeated_helper(a[1:], n-1, k, curr_sum + a[0], max_sum), \n                    max_sub_array_sum_repeated_helper(a[1:], n-1, k-1, curr_sum, max_sum))\n            \n    return max_sub_array_sum_repeated_helper(a, n, k, 0, 0)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n        if i < k:\n            max_sum = max(max_sum, sum)\n            continue\n        if i >= k:\n            sum -= a[i-k]\n            max_sum = max(max_sum, sum)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(a)\n    if k == 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(a[0], 0)\n    \n    max_sum = float('-inf')\n    for i in range(n - k + 1):\n        if i == 0:\n            temp_sum = sum(a[0:k])\n        else:\n            temp_sum += a[k + i - 1] - a[i - 1]\n        max_sum = max(max_sum, temp_sum)\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #print \"Input : \", n \n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n%2 == 1:\n        return n**2+square_Sum(n-1)\n    return n**2 + square_Sum(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # even_sum = 0\n    # for i in range(1,n+1):\n    #     if i%2 == 0:\n    #         even_sum += i**2\n    # return even_sum\n    return sum(i**2 for i in range(1,n+1) if i%2 == 0)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 0:\n        return False\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        if i%2 == 0:\n            total = total + (i*i)\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(x**2 for x in range(n) if x % 2 == 0)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    sum_of_squares = 0\n    for i in range(0,n,2):\n        sum_of_squares = sum_of_squares + (i*i)\n    \n    return sum_of_squares\n    \n    \n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #The solution is the sum of the squares of the first n even natural numbers\n    return sum(i**2 for i in range(2,n+1,2) if i%2==0)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 0\n    res = 0\n    while i < n:\n        if i % 2 == 0:\n            res = res + i*i\n        i = i + 1\n    return res\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(i**2 for i in range(n+1) if i%2==0)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([x*x for x in range(n) if x % 2 == 0])\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlen = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > maxlen:\n            maxlen = len(list1[i])\n    return maxlen\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = []\n    for sublist in list1:\n        l.append(len(sublist))\n    return max(l)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lenlist = [len(x) for x in list1]\n    return lenlist\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = []\n    for i in list1:\n        length.append(len(i))\n    return max(length)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list2=[]\n    for item in list1:\n        if len(item)==0:\n            continue\n        else:\n            list2.append(len(item))\n    return max(list2)\n    \ndef sublist_max(input_list, begin_index, end_index):\n    '''\n    Write a function that takes a list of numbers and returns the largest sublist \n    of consecutive numbers.\n    '''\n    max_length=1\n    for i in range(begin_index,end_index+1):\n        if i+1==len(input_list):\n            return max_length\n        elif input_list[i]+1==input_list[i+1]:\n            max_length+=1\n        else:\n            max_length=1\n    return max_length\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = len(list1[0])\n    for i in range(len(list1)):\n        if max_len < len(list1[i]):\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list_of_max_length = []\n    for i in range(0,len(list1)):\n        if len(list1[i]) == max(map(len,list1)):\n            list_of_max_length.append(list1[i])\n    return list_of_max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = -1\n    for l in list1:\n        if len(l) > max:\n            max = len(l)\n    return max\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1: \n        return k \n    elif n == 2: \n        return (k * k) \n    elif k == 1: \n        return (2 * count_no_of_ways(n - 1, 1)) \n    elif k == 2: \n        return (2 * count_no_of_ways(n - 1, 1) * 2) \n    else: \n        return (2 * count_no_of_ways(n - 1, k - 1) + (count_no_of_ways(n - 2, k - 1) * k)) \n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2: \n        return 1\n    if n == 2:\n        return k\n    return sum(count_no_of_ways(n-1, k) + (k - 1) * count_no_of_ways(n-2, k-1) for i in range(0, k))\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif k == 1:\n        return n\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Following is a function to count the number of ways to paint\n    # the fence with n posts and k colors such that at most 2 adjacent\n    # posts have the same color for the given fence. \n    \n    # Stores the number of ways to paint the fence with n posts and k colors\n    # such that at most 2 adjacent posts have the same color for the given\n    # fence. \n    ways = [1] * (k+1)\n    \n    # Base case if there are only 1 color, then there is 1 way to paint\n    # the fence with 1 post and that color. \n    for i in range(1, n+1): \n        for j in range(1, k+1): \n            # Checking if the color of the post on the left is the same as\n            # the color of the post on the right. If the color is same, then\n            # increment the number of ways to paint the fence with n posts \n            # and k colors such that at most 2 adjacent posts have the same\n            # color for the given fence. \n            if i > 1:\n                if graph[i-1][j] == graph[i][j]: \n                    ways[j] += ways[j-1]\n            # Checking if the color of the post on the right is the same as\n            # the color of the post on the left. If the color is same, then\n            # increment the number of ways to paint the fence with n posts and\n            # k colors such that at most 2 adjacent posts have the same color\n            # for the given fence. \n            if i < n:\n                if graph[i][j] == graph[i+1][j]: \n                    ways[j] += ways[j]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n: \n        return 0\n    if k == 0 or n == 0: \n        return 1\n    if n == 1: \n        return k \n    if n == 2: \n        if k == 1: \n            return k\n        else: \n            return k*k\n    if k == 1: \n        return n\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k) + count_no_of_ways(n-3, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    table = [[0 for _ in range(n)] for _ in range(k+1)] \n    table[0][0] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k < 1:\n        return 0\n    if n <= 0:\n        return 1\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case\n    if k == 1:\n        return n\n    if k == 2:\n        return n * n + (n - 1) * (n - 2) // 2\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0: \n        return 1\n    elif n == 1:\n        if k == 1:\n            return 2\n        else:\n            return 1\n    else: \n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > (n+1):\n        return 0\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    from math import trunc\n    return trunc(n/m)\n    "
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        raise ZeroDivisionError\n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    num1 = n\n    num2 = m\n    if num1 < num2:\n        q = num1 // num2\n    else:\n        q = num2 // num1\n    return q\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return 0\n    return int(n/m)\n    \ndef gcd(a,b):\n    '''\n    Write a python function to calculate gcd of two numbers.\n    '''\n    if b==0:\n        return a\n    return gcd(b,a%b)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    if n % m == 0:\n        return n/m\n    if n % m > 0:\n        return n/m + 1\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print n//m\n    \ndef add(n,m):  \n    '''\n    Write a python function to return sum of two numbers (use '+' instead of'sum' keyword).\n    '''\n    print n+m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return 0\n    elif n<0 and m<0:\n        return -(find(abs(n),abs(m)))\n    elif n>0 and m<0:\n        return -(find(n,abs(m)))\n    elif n<0 and m>0:\n        return -(find(abs(n),m))\n    elif n>0 and m>0:\n        if n>m:\n            return find(n,m)\n        else:\n            return find(n,m)\n    elif n==m:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        return n//m\n    else:\n        return m//n\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n / m\n    \ndef sum(n,m):  \n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return n + m\n    \ndef subtract(n,m):  \n    '''\n    Write a python function to find the difference of two numbers.\n    '''\n    return n - m\n    \ndef multiply(n,m):  \n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    return n * m\n    \ndef division(n,m):  \n    '''\n    Write a python function to find the quotient of two numbers.\n    '''\n    return n / m\n    \ndef remainder(n,m):  \n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    return n % m\n    \ndef power(n,m):  \n    '''\n    Write a python function to find the power of two numbers.\n    '''\n    return n ** m\n    \ndef log(n):  \n    '''\n    Write a python function to find the logarithm of two numbers.\n    '''\n    return math.log(n)\n    \ndef ceil(n):  \n    '''\n    Write a python function to find the ceiling of a number.\n    '''\n    return math.ceil(n)\n    \ndef floor(n):  \n    '''\n    Write a python function to find the floor of a number.\n    '''\n    return math.floor(n)\n    \ndef factorial(n):  \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    return math.factorial(n)\n    \ndef absolute(n):  \n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    return abs(n)\n    \ndef main():\n    for i in range(0,9):\n        print(\"Round down: \", find(i,2))\n        print(\"Sum: \", sum(i,2))\n        print(\"Subtract: \", subtract(i,2))\n        print(\"Multiply: \", multiply(i,2))\n        print(\"Division: \", division(i,2))\n        print(\"Remainder: \", remainder(i,2))\n        print(\"Power: \", power(i,2))\n        print(\"Log: \", log(i))\n        print(\"Ceil: \", ceil(i))\n        print(\"Floor: \", floor(i))\n        print(\"Factorial: \", factorial(i))\n        print(\"Absolute: \", absolute(i))\n        print(\" \")\n        \nmain("
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h == 0:\n        raise ZeroDivisionError\n    return w*w/(h*h)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    '''\n    A - B\n    |   |\n    C - D\n    '''\n    s1 = w**2 + h**2\n    s2 = w*h\n    s3 = -(w*w+h*h)\n    return math.sqrt(s1+s2+s3)\ndef x_y_circumference(w,h):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*(w+h)\ndef x_y_area(w,h):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(w*h)\ndef x_y_perimeter(w,h):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2*math.pi*(w+h)\ndef x_y_diagonal(w,h):\n    '''\n    Write a function to find the diagonal of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef x_y_rectangle(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return w*h\ndef x_y_triangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (w*h)/2\ndef x_y_triangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (w*h)/2\ndef x_y_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef x_y_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*math.pi*(r**3)/3\ndef x_y_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi*r**2+2*math.pi*r*h+2*math.pi*(r**2+h**2)\ndef x_y_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\ndef x_y_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*h/3\ndef x_y_square(w,h):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return w*h\ndef x_y_cube(w,h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return w*h*h\ndef x_y_octagon(w,h):\n    '''\n    Write a function to find the volume of a octagon.\n    '''\n    return w*h*(math.sqrt(2)/2)\ndef x_y_octagon(w,h):\n    '''\n    Write a function to find the volume of a octagon.\n    '''\n    return w*h*(math.sqrt(2)/2)\ndef x_y_rhombus(w,h):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return w*h*math.sqrt(2)/4\ndef x_y_dodecagon(w,h):\n    '''\n    Write a function to find the volume of a dodecagon.\n    '''\n    return w*h*(math.sqrt(3)/2)\ndef x_y_pentagon(w,h):\n    '''\n    Write a function to find the volume of a pentagon.\n    '''\n    return w*h*(math.sqrt(5)/2)\ndef x_y_hexagon(w,h):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    return w*h*(3/2)\ndef x_y_heptagon(w,h):\n    '''\n    Write a function to find the volume of a heptagon.\n    '''\n    return w*h*(5/2)\ndef x_y_octagon(w,h):\n    '''\n    Write a function to find the volume of an octagon.\n    '''\n    return w*h*(3/2)\ndef x_y_decagon(w,h):\n    '''\n    Write a function to find the volume of a decagon.\n    '''\n    return w*h*(5/2)\ndef x_y_triangle(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return w*h/2\ndef x_y_rightangled(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)/2\ndef x_y_square(w,h):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return w*h\ndef x_y_square(w,h):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return w*h\ndef x_y_pythagorean(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)\ndef x_y_pythagorean(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)\ndef x_y_pythagorean(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)\ndef x_y_pythagorean(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)\ndef x_y_pythagorean(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)\ndef x_y_pythagorean(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)\ndef x_y_pythagorean(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)\ndef x_y_pythagorean(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)\ndef x_y_pythagorean(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)\ndef x_y_pythagorean(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)\ndef x_y_pythagorean(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)\ndef x_y_pythagorean(a,b):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2+h**2 == h**2:\n        return math.sqrt(w**2+h**2)\n    else:\n        return None\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h!= 0:\n        a = math.sqrt(w**2+h**2)\n        b = 2*w*h/a\n        c = w**2-h**2\n        return a,b,c\n    elif h == 0:\n        return None\n    else:\n        return None\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** (1/2)\n    return s\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # h = w * math.sqrt(1/3)\n    # w = h * 3/4\n    # w = 2/math.sqrt(3) * h\n    # h = w * math.sqrt(3/4)\n    # return [w,h]\n    # return [2/math.sqrt(3),w]\n    return [w,h]\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\ndef side_length(s1,s2):\n    '''\n    Write a function that takes two sides of a right-angled triangle, and returns the hypotenuse of the triangle.\n    '''\n    return math.sqrt(s1**2 + s2**2)\ndef side_length_and_area(a,b,c):\n    '''\n    Write a function that takes three sides of a right-angled triangle and returns the area of the triangle.\n    '''\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a right-angled triangle given its sides.\n    '''\n    return a+b+c\ndef calculate_area(a,b,c):\n    '''\n    Write a function to find the area of a right-angled triangle given its sides.\n    '''\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef factorial(n):\n    '''\n    Write a function to find factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a function to find the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef to_radians(angle_degs):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return angle_degs*math.pi/180\ndef to_degrees(angle_rads):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return angle_rads*180/math.pi\ndef to_celsius(temperature_fahrenheit):\n    '''\n    Write a function to convert Fahrenheit to Celsius.\n    '''\n    return (temperature_fahrenheit-32)*5/9\ndef to_fahrenheit(temperature_celsius):\n    '''\n    Write a function to convert Celsius to Fahrenheit.\n    '''\n    return (temperature_celsius*9/5)+32\ndef days_in_month(month,year):\n    '''\n    Write a function to find the number of days in a month for a given year.\n    '''\n    if month == 2:\n        if year % 400 == 0:\n            return 29\n        elif year % 100 == 0:\n            return 28\n        elif year % 4 == 0:\n            return 29\n        else:\n            return 28\n    elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return 31\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return 30\ndef season(month):\n    '''\n    Write a function to find the season (spring, summer, fall or winter) for a given month.\n    '''\n    if month == 12 or month == 1 or month == 2:\n        return 'winter'\n    elif month == 3 or month == 4 or month == 5:\n        return'spring'\n    elif month == 6 or month == 7 or month == 8:\n        return'summer'\n    elif month == 9 or month == 10 or month == 11:\n        return 'fall'\ndef to_words(integer):\n    '''\n    Write a function to convert an integer to its word equivalent.\n    '''\n    if integer == 1:\n        return 'one'\n    elif integer == 2:\n        return 'two'\n    elif integer == 3:\n        return 'three'\n    elif integer == 4:\n        return 'four'\n    elif integer == 5:\n        return 'five'\n    elif integer == 6:\n        return'six'\n    elif integer == 7:\n        return'seven'\n    elif integer == 8:\n        return 'eight'\n    elif integer == 9:\n        return 'nine'\n    elif integer == 10:\n        return 'ten'\n    elif integer == 11:\n        return 'eleven'\n    elif integer == 12:\n        return 'twelve'\n    elif integer == 13:\n        return 'thirteen'\n    elif integer == 14:\n        return 'fourteen'\n    elif integer == 15:\n        return 'fifteen'\n    elif integer == 16:\n        return'sixteen'\n    elif integer == 17:\n        return'seventeen'\n    elif integer == 18:\n        return 'eighteen'\n    elif integer == 19:\n        return 'nineteen'\n    elif integer == 20:\n        return 'twenty'\n    elif integer == 21:\n        return 'twenty-one'\n    elif integer == 22:\n        return 'twenty-two'\n    elif integer == 23:\n        return 'twenty-three'\n    elif integer == 24:\n        return 'twenty-four'\n    elif integer == 25:\n        return 'twenty-five'\n    elif integer == 26:\n        return 'twenty-six'\n    elif integer == 27:\n        return 'twenty-seven'\n    elif integer == 28:\n        return 'twenty-eight'\n    elif integer == 29:\n        return 'twenty-nine'\n    elif integer == 30:\n        return 'thirty'\n    elif integer == 31:\n        return 'thirty-one'\n    elif integer == 32:\n        return 'thirty-two'\n    elif integer == 33:\n        return 'thirty-three'\n    elif integer == 34:\n        return 'thirty-four'\n    elif integer == 35:\n        return 'thirty-five'\n    elif integer == 36:\n        return 'thirty-six'\n    elif integer == 37:\n        return 'thirty-seven'\n    elif integer == 38:\n        return 'thirty-eight'\n    elif integer == 39:\n        return 'thirty-nine'\n    elif integer == 40:\n        return 'forty'\n    elif integer == 41:\n        return 'forty-one'\n    elif integer == 42:\n        return 'forty-two'\n    elif integer == 43:\n        return 'forty-three'\n    elif integer == 44:\n        return 'forty-four'\n    elif integer == 45:\n        return 'forty-five'\n    elif integer == 46:\n        return 'forty-six'\n    elif integer == 47:\n        return 'forty-seven'\n    elif integer == 48:\n        return 'forty-eight'\n    elif integer == 49:\n        return 'forty-nine'\n    elif integer == 50:\n        return 'fifty'\n    elif integer == 51:\n        return 'fifty-one'\n    elif integer == 52:\n        return 'fifty-two'\n    elif integer == 53:\n        return 'fifty-three'\n    elif integer == 54:\n        return 'fifty-four'\n    elif integer == 55:\n        return 'fifty-five'\n    elif integer == 56:\n        return 'fifty-six'\n    elif integer == 57:\n        return 'fifty-seven'\n    elif integer == 58:\n        return 'fifty-eight'\n    elif integer == 59:\n        return 'fifty-nine'\n    elif integer == 60:\n        return'sixty'\n    elif integer == 61:\n        return'sixty-one'\n    elif integer == 62:\n        return'sixty-two'\n    elif integer == 63:\n        return'sixty-three'\n    elif integer == 64:\n        return'sixty-four'\n    elif integer == 65:\n        return'sixty-five'\n    elif integer == 66:\n        return'sixty-six'\n    elif integer == 67:\n        return'sixty-seven'\n    elif integer == 68:\n        retur"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        return False\n    elif h == w*(math.sqrt(2)):\n        return True\n    else:\n        return False\ndef otherside_equilateral(a):\n    '''\n    Write a function to find the third side of an equilateral triangle.\n    '''\n    if a == a**2 or a == a**3:\n        return True\n    else:\n        return False\ndef otherside_isoceles(b,c):\n    '''\n    Write a function to find the third side of an isoceles triangle.\n    '''\n    if b == c or b == c**2:\n        return True\n    else:\n        return False\ndef otherside_isosceles(b,c):\n    '''\n    Write a function to find the third side of an isoceles triangle.\n    '''\n    if b == c**2 or c == b**2:\n        return True\n    else:\n        return False\ndef otherside_rightangled(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c and b == c:\n        return False\n    elif a == b and a!= c:\n        return False\n    elif c == a and b!= c:\n        return False\n    else:\n        return True\ndef otherside_rightangled2(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == b:\n        return True\n    elif b == c:\n        return True\n    elif c == a:\n        return True\n    else:\n        return False\ndef otherside_rightangled3(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled4(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == b:\n        return True\n    elif b == c:\n        return True\n    elif a == c:\n        return True\n    else:\n        return False\ndef otherside_rightangled5(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled6(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled7(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled8(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled9(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled10(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled11(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled12(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled13(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled14(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled15(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled16(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled17(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled18(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if a == b == c:\n        return False\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef otherside_rightangled19(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # A recursive approach\n    # Time - O(2^n)\n    # Space - O(n)\n    # for i in range(len(listval)):\n    #     if listval[i] > max_val(listval[:i] + listval[i+1:]):\n    #         max_val = listval[i]\n    # return max_val\n    \n    # Another recursive approach\n    # Time - O(n)\n    # Space - O(n)\n    def max_val(listval):\n        if len(listval) == 0:\n            return None\n        if len(listval) == 1:\n            return listval[0]\n        return max(listval[0], max_val(listval[1:]))\n    return max_val(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = -1\n    for item in listval:\n        if maxval < item:\n            maxval = item\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for item in listval:\n        if item > maxval:\n            maxval = item\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval = listval.split(',')\n    maxval = 0\n    for ele in listval:\n        if int(ele) > maxval:\n            maxval = int(ele)\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if max_val < listval[i]:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for item in listval:\n        if item > maxval:\n            maxval = item\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval[0], max_val(listval[1:]))\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for element in listval:\n            if element > max_val:\n                max_val = element\n        return max_val\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    divisors = []\n    for i in range(1, int(number/2) + 1):\n        if number % i == 0:\n            divisors.append(i)\n    divisors.append(number)\n    for divisor in divisors:\n        result += divisor\n    return result\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number <= 0:\n        return 0\n    divisors = 0\n    for i in range(1, number):\n        if number % i == 0:\n            divisors += i\n    return divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([i for i in range(1, number) if number % i == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for x in range(2, int(number**0.5)+1):\n        if number % x == 0:\n            divs.append(x)\n            divs.append(int(number/x))\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 1:\n        return -1\n    else:\n        divisors = []\n        divisor_list = []\n        divisors = divisors + range(1, number)\n        for divisor in divisors:\n            if number % divisor == 0:\n                divisor_list.append(divisor)\n        return sum(divisor_list)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    n = number\n    s = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for divisor in range(2,int(sqrt(number))):\n        if number % divisor == 0:\n            sum_div += divisor\n    return sum_div\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([i for i in range(1, number + 1) if number % i == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [1]\n    for i in range(2,number):\n        if number%i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    #this is for dynamic programming\n    #count = [0]*len(arr)\n    #Inversion_Count(arr, count, 0, len(arr)-1)\n    \n    #This is for linear runtime, better than the above code\n    count = 0\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[j] > arr[i]:\n                count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    N = len(arr)\n    Inv_Count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if arr[i] > arr[j]:\n                Inv_Count += 1\n    return Inv_Count\n    \ndef Largest_Diff(arr):\n    '''\n    Write a python function to find the Largest difference between two elements in a sorted array.\n    '''\n    N = len(arr)\n    diff = -1\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if arr[j] - arr[i] > diff:\n                diff = arr[j] - arr[i]\n    return diff\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1:\n        return arr, 0\n    else:\n        mid = len(arr)//2\n        l_arr, l_inv = get_Inv_Count(arr[:mid])\n        r_arr, r_inv = get_Inv_Count(arr[mid:])\n        arr, inv = merge_arr(l_arr, r_arr)\n        return arr, (l_inv + r_inv + inv)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    else:\n        middle = len(arr) / 2\n        left = arr[0:middle]\n        right = arr[middle:]\n        return get_Inv_Count(left) + get_Inv_Count(right) + get_Merge(left, right, arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return sum(1 for i in xrange(len(arr)) for j in xrange(i+1,len(arr)) if arr[i]>arr[j])\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(len(arr)): \n        for j in range(i+1,len(arr)): \n            if (arr[i] > arr[j]): \n                inversions = inversions + 1\n    return inversions \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    total_inv = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                total_inv += 1\n    return total_inv\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    if arr is None:\n        return 0\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for i in list1:\n        if type(i) == list:\n            res.extend(flatten_list(i))\n        else:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list(itertools.chain.from_iterable(list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def sublist(list2):\n        return list2[0]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for el in list1:\n        if isinstance(el, list):\n            flatten_list(el)\n        else:\n            flat_list.append(el)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for i in list1:\n        if isinstance(i,list):\n            for j in flatten_list(i):\n                yield j\n        else:\n            yield i\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return []\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    newList = []\n    for el in list1:\n        if type(el) is list:\n            newList.extend(flatten_list(el))\n        else:\n            newList.append(el)\n    return newList\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for item in list1:\n        if isinstance(item, list):\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    for k,v in stdata:\n        aggregate[k] += v\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(lambda:0)\n    for elem in stdata:\n        data[elem[0]] += elem[1]\n    return max(data.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maximum_aggregate = 0\n    \n    # Initialize aggregate list with zeros\n    aggregate_list = [0] * len(stdata)\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(list)\n    for k,v in stdata:\n        aggregate[k].append(v)\n    return aggregate\ndef max_count(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    for k,v in stdata:\n        aggregate[k] = aggregate[k] + v\n    return aggregate\ndef max_overall(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = 0\n    for k,v in stdata:\n        aggregate = aggregate + v\n    return aggregate\ndef max_average(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = 0\n    if len(stdata) > 0:\n        for k,v in stdata:\n            aggregate = aggregate + v/len(stdata)\n        return aggregate\n    else:\n        return aggregate\ndef max_key(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxkey = 0\n    for k,v in stdata:\n        if v > maxkey:\n            maxkey = v\n    return maxkey\ndef max_min(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    minkey = None\n    for k,v in stdata:\n        if minkey == None or v < minkey:\n            minkey = v\n    return minkey\ndef max_max(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxkey = None\n    for k,v in stdata:\n        if maxkey == None or v > maxkey:\n            maxkey = v\n    return maxkey\ndef max_median(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    import numpy\n    maxkey = None\n    sortedlist = sorted(stdata)\n    if len(stdata) % 2 == 0:\n        return (sortedlist[len(stdata)/2] + sortedlist[(len(stdata)/2)-1])/2.0\n    else:\n        return sortedlist[len(stdata)/2]\ndef max_mean(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return sum(stdata)/float(len(stdata))\ndef max_median_ratio(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    import numpy\n    maxkey = None\n    sortedlist = sorted(stdata)\n    if len(stdata) % 2 == 0:\n        return (sortedlist[len(stdata)/2] - sortedlist[(len(stdata)/2)-1])/float(sortedlist[len(stdata)/2])\n    else:\n        return sortedlist[len(stdata)/2] - sortedlist[len(stdata)/2-1]\ndef max_quartile(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    import numpy\n    maxkey = None\n    sortedlist = sorted(stdata)\n    if len(stdata) % 2 == 0:\n        return (sortedlist[len(stdata)/2] + sortedlist[(len(stdata)/2)-1])/2.0\n    else:\n        return sortedlist[len(stdata)/2]\ndef max_quintile(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    import numpy\n    maxkey = None\n    sortedlist = sorted(stdata)\n    if len(stdata) % 2 == 0:\n        return (sortedlist[len(stdata)/2-1] + sortedlist[len(stdata)/2])/2.0\n    else:\n        return sortedlist[len(stdata)/2-1]\ndef max_decile(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    import numpy\n    maxkey = None\n    sortedlist = sorted(stdata)\n    if len(stdata) % 2 == 0:\n        return sortedlist[len(stdata)/2-1]\n    else:\n        return sortedlist[len(stdata)/2]\ndef max_std_dev(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    import numpy\n    maxkey = None\n    sortedlist = sorted(stdata)\n    if len(stdata) % 2 == 0:\n        return (sortedlist[len(stdata)/2] - sortedlist[(len(stdata)/2)-1])/2.0\n    else:\n        return sortedlist[len(stdata)/2]\ndef max_variance(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    import numpy\n    maxkey = None\n    sortedlist = sorted(stdata)\n    if len(stdata) % 2 == 0:\n        return (sortedlist[len(stdata)/2] - sortedlist[(len(stdata)/2)-1])/2.0\n    else:\n        return sortedlist[len(stdata)/2]\ndef max_sample_variance(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    import numpy\n    maxkey = None\n    sortedlist = sorted(stdata)\n    if len(stdata) % 2 == 0:\n        return (sortedlist[len(stdata)/2] - sortedlist[(len(stdata)/2)-1])/2.0\n    else:\n        return sortedlist[len(stdata)/2]\ndef max_skewness(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    import numpy\n    maxkey = None\n    sortedlist = sorted(stdata)\n    if len(stdata) % 2 == 0:\n        return (sortedlist[len(stdata)/2] - sortedlist[(len(stdata)/2)-1])/2.0\n    else:\n        return sortedlist[len(stdata)/2]\ndef max_kurtosis(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    import numpy\n    maxkey = None\n    sortedlist = sorted(stdata)\n    if len(stdata) % 2 == 0:\n        return (sortedlist[len(stdata)/2] - sortedlist[(len(stdata)/2)-1])/2.0\n    else:\n        return sortedlist[len(stdata)/2]\ndef max_skewness_ratio(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    import numpy\n    maxkey = None\n    sortedlist = sorted(stdata)\n    if len(stdata) % 2 == 0:\n        return (sortedlist[len(stdata)/2] - sortedlist[(len(stdata)/2)-1])/2.0\n    else:\n        return sortedlist[len(stdata)/2]\ndef max_kurtosis_ratio(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    import numpy\n    maxkey = None\n    sortedlist = sorted(stdata)\n    if len(stdata) % 2 == 0:\n        return (sortedlist[len(stdata)/2] - sortedlist[(len(stdata)/2)-1])/2.0\n    else:\n        return sortedlist[len(stdata)/2]\ndef max_skewness_ratio_to_mean(stdata):"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    t=defaultdict(float)\n    for i in stdata:\n        t[i[0]]=max(i[1],t[i[0]])\n    return t\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=max(tup)\n        max_sum.append(x)\n    return max_sum\ndef max_aggregate_tup(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=max(tup)\n        max_sum.append(x)\n    return max_sum\ndef max_aggregate_dict(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=max(tup)\n        max_sum.append(x)\n    return max_sum\ndef max_aggregate_sort(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-1])\n    return max_sum\ndef max_aggregate_sort_tup(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-1])\n    return max_sum\ndef max_aggregate_sort_dict(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-1])\n    return max_sum\ndef max_aggregate_sort_tup2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-2])\n    return max_sum\ndef max_aggregate_sort_dict2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-2])\n    return max_sum\ndef max_aggregate_dict2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-2])\n    return max_sum\ndef max_aggregate_sort_tup3(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-3])\n    return max_sum\ndef max_aggregate_sort_dict3(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-3])\n    return max_sum\ndef max_aggregate_sort_tup4(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-4])\n    return max_sum\ndef max_aggregate_sort_dict4(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-4])\n    return max_sum\ndef max_aggregate_sort_tup5(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-5])\n    return max_sum\ndef max_aggregate_sort_dict5(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-5])\n    return max_sum\ndef max_aggregate_sort_tup6(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-6])\n    return max_sum\ndef max_aggregate_sort_dict6(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-6])\n    return max_sum\ndef max_aggregate_sort_tup7(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-7])\n    return max_sum\ndef max_aggregate_sort_dict7(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-7])\n    return max_sum\ndef max_aggregate_sort_tup8(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max_sum.append(x[-8])\n    return max_sum\ndef max_aggregate_sort_dict8(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum=[]\n    for i in range(len(stdata)):\n        tup=stdata[i]\n        x=sorted(tup)\n        max"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    res = defaultdict(int)\n    for s,d,c,m in stdata:\n        res[(s,m)] += c\n        res[(d,m)] += c\n    return max(res.items(), key = lambda x:x[1])[0]\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = {}\n    max_aggregate = {}\n    for s in stdata:\n        if s[0] not in aggregate:\n            aggregate[s[0]] = s[1]\n        else:\n            aggregate[s[0]] += s[1]\n    for k,v in aggregate.items():\n        max_aggregate[k] = max(v,max_aggregate.get(k,0))\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_list=[]\n    for elt in stdata:\n        agg_list.append(elt[0]+elt[1]+elt[2])\n    return max(agg_list)\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    l = [float(x[1]) for x in stdata]\n    print(sum(l))\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    res = [0]\n    res = res*2\n    \n    for i in range(n):\n        res[i] = res[i] + 1\n        res[i+n] = res[i]\n    return res\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    c = 0\n    for i in range(1, 2**n):\n        for j in range(i+1, 2**n):\n            s = bin(i)[2:] + bin(j)[2:]\n            if s[-n:] == s[:-n]:\n                c += 1\n    return c\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    n2 = 2**n\n    n3 = 2*n2\n    n4 = 3*n2\n    n5 = 4*n2\n    n6 = 5*n2\n    n7 = 6*n2\n    n8 = 7*n2\n    n9 = 8*n2\n    n10 = 9*n2\n    n11 = 10*n2\n    n12 = 11*n2\n    n13 = 12*n2\n    n14 = 13*n2\n    n15 = 14*n2\n    n16 = 15*n2\n    n17 = 16*n2\n    n18 = 17*n2\n    n19 = 18*n2\n    n20 = 19*n2\n    n21 = 20*n2\n    n22 = 21*n2\n    n23 = 22*n2\n    n24 = 23*n2\n    n25 = 24*n2\n    n26 = 25*n2\n    n27 = 26*n2\n    n28 = 27*n2\n    n29 = 28*n2\n    n30 = 29*n2\n    n31 = 30*n2\n    n32 = 31*n2\n    n33 = 32*n2\n    n34 = 33*n2\n    n35 = 34*n2\n    n36 = 35*n2\n    n37 = 36*n2\n    n38 = 37*n2\n    n39 = 38*n2\n    n40 = 39*n2\n    n41 = 40*n2\n    n42 = 41*n2\n    n43 = 42*n2\n    n44 = 43*n2\n    n45 = 44*n2\n    n46 = 45*n2\n    n47 = 46*n2\n    n48 = 47*n2\n    n49 = 48*n2\n    n50 = 49*n2\n    n51 = 50*n2\n    n52 = 51*n2\n    n53 = 52*n2\n    n54 = 53*n2\n    n55 = 54*n2\n    n56 = 55*n2\n    n57 = 56*n2\n    n58 = 57*n2\n    n59 = 58*n2\n    n60 = 59*n2\n    n61 = 60*n2\n    n62 = 61*n2\n    n63 = 62*n2\n    n64 = 63*n2\n    n65 = 64*n2\n    n66 = 65*n2\n    n67 = 66*n2\n    n68 = 67*n2\n    n69 = 68*n2\n    n70 = 69*n2\n    n71 = 70*n2\n    n72 = 71*n2\n    n73 = 72*n2\n    n74 = 73*n2\n    n75 = 74*n2\n    n76 = 75*n2\n    n77 = 76*n2\n    n78 = 77*n2\n    n79 = 78*n2\n    n80 = 79*n2\n    n81 = 80*n2\n    n82 = 81*n2\n    n83 = 82*n2\n    n84 = 83*n2\n    n85 = 84*n2\n    n86 = 85*n2\n    n87 = 86*n2\n    n88 = 87*n2\n    n89 = 88*n2\n    n90 = 89*n2\n    n91 = 90*n2\n    n92 = 91*n2\n    n93 = 92*n2\n    n94 = 93*n2\n    n95 = 94*n2\n    n96 = 95*n2\n    n97 = 96*n2\n    n98 = 97*n2\n    n99 = 98*n2\n    n100 = 99*n2\n    n101 = 100*n2\n    n102 = 101*n2\n    n103 = 102*n2\n    n104 = 103*n2\n    n105 = 104*n2\n    n106 = 105*n2\n    n107 = 106*n2\n    n108 = 107*n2\n    n109 = 108*n2\n    n110 = 109*n2\n    n111 = 110*n2\n    n112 = 111*n2\n    n113 = 112*n2\n    n114 = 113*n2\n    n115 = 114*n2\n    n116 = 115*n2\n    n117 = 116*n2\n    n118 = 117*n2\n    n119 = 118*n2\n    n120 = 119*n2\n    n121 = 120*n2\n    n122 = 121*n2\n    n123 = 122*n2\n    n124 = 123*n2\n    n125 = 124*n2\n    n126 = 125*n2\n    n127 = 126*n2\n    n128 = 127*n2\n    n129 = 128*n2\n    n130 = 129*n2\n    n131 = 130*n2\n    n132 = 131*n2\n    n133 = 132*n2\n    n134 = 133*n2\n    n135 = 134*n2\n    n136 = 135*n2\n    n137 = 136*n2\n    n138 = 137*n2\n    n139 = 138*n2\n    n140 = 139*n2\n    n141 = 140*n2\n    n142 = 141*n2\n    n143 = 142*n2\n    n144 = 143*n2\n    n145 = 144*n2\n    n146 = 145*n2\n    n147 = 146*n2\n    n148 = 147*n2\n    n149 = 148*n2\n    n150 = 149*n2\n    n151 = 150*n2\n    n152 = 151*n2\n    n153 = 152*n2\n    n154 = 153*n2\n    n155 = 154*n2\n    n156 = 155*n2\n    n157 = 156*n2\n    n158 = 157*n2\n    n159 = 158*n2\n    n160 = 159*n2\n    n161 = 160*n2\n    n162 = 161*n2\n    n163 = 162*n2\n    n164 = 163*n2\n    n165 = 164*n2\n    n166 = 165*n2\n    n167 = 166*n2\n    n168 = 167*n2\n    n169 = 168*n2\n    n170 = 169*n2\n    n171 = 170*n2\n    n172 = 171*n2\n    n173 = 172*n2\n    n174 = 173*n2\n    n175 = 174*n2\n    n176 = 175*n2\n    n177 = 176*n2\n    n178 = 177*n2\n    n179 = 178*n2\n    n180 = 179*n2\n    n181 = 180*n2\n    n182 = 181*n2\n    n183 = 182*n2\n    n184 = 183*n2\n    n185 = 184*n2\n    n186 = 185*n2\n    n187 = 186*n2\n    n188 = 187*n2\n    n189 = 188*n2\n    n190 = 189*n2\n    n191 = 190*n2\n    n192 = 191*n2\n    n193 = 192*n2\n    n194 = 193*n2\n    n195 = 194*n2\n    n196 = 195*n2\n    n197 = 196*n2\n    n198 = 197*n2\n    n199 = 198*n2\n    n200 = 199*n2\n    n201 = 200*n2\n    n202 = 201*n2\n    n203 = 202*n2\n    n204 = 203*n2\n    n205 = 204*n2\n    n206 = 205*n2\n    n207 = 206*n2\n    n208 = 207*n2\n    n209 = 208*n2\n    n210 = 209*n2\n    n211 = 210*n2\n    n212 = 211*n2\n    n213 = 212*n2\n    n214 = 213*n2\n    n215 = 214*n2\n    n216 = 215*n2\n    n217 = 216*n2\n    n218 = 217*n2\n    n219 = 218*n2\n    "
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0: \n        return 1\n    if n == 1: \n        return 2\n    prev = count_binary_seq(n-1)\n    curr = count_binary_seq(n-1)\n    return prev + 2*curr\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return count_binary_seq(n - 1) + count_binary_seq(n - 2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    memo = {}\n    def count(s,n):\n        if n==0:\n            return 1\n        if n==1:\n            return 1\n        if s=='0'*n:\n            return 0\n        if (s,n) in memo:\n            return memo[(s,n)]\n        count = 0\n        for i in range(n):\n            if s[i]=='1':\n                count += count_binary_seq(s[i+1:],n-i-1)\n        memo[(s,n)] = count\n        return count\n    return count_binary_seq('1'*n,'0'*n)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    memo = {}\n    def count(n):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        if n in memo:\n            return memo[n]\n        ans = 0\n        for i in range(1, n+1):\n            ans += count(n-i)\n        memo[n] = ans\n        return ans\n    return count(2*n)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 2\n    return count_binary_seq(n-1) * 2 + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def get_all_binary_sequences(n):\n        '''\n        A recursive method to get all possible binary sequences of length 2n.\n        '''\n        if n == 0:\n            return [[]]\n        else:\n            combinations_of_two_binary_sequences = get_all_binary_sequences(n-1)\n            combinations_of_two_binary_sequences = list(itertools.product(['0','1'], repeat = 2*n))\n            binary_sequences = []\n            for sequence in combinations_of_two_binary_sequences:\n                if int(sequence[0],2) + int(sequence[-1],2) == int(sequence[-2],2) + int(sequence[-3],2):\n                    binary_sequences.append(sequence)\n            return binary_sequences\n    return get_all_binary_sequences(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 2\n    \n    count = 0\n    for i in range(2,n+1):\n        count += count_binary_seq(i-1) * 2**(i-1)\n    \n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if type(d) == dict:\n        depth += 1\n        for k,v in d.items():\n            depth = max(depth, dict_depth(v))\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        depth = 0\n        for _,v in d.items():\n            depth = max(depth, dict_depth(v) + 1)\n        return depth\n    else:\n        return 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        return 1 + max([dict_depth(v) for v in d.itervalues()])\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return max([dict_depth(v) for k, v in d.iteritems()]) + 1\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # if isinstance(d, dict):\n    #     return 1 + max(dict_depth(v) for v in d.values())\n    # else:\n    #     return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    first = ranges[0]\n    last = ranges[1]\n    rotations = rotations[index]\n    first = (first + rotations) % len(arr)\n    last = (last + rotations) % len(arr)\n    return arr[first:last]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start = ranges[0]\n    end = ranges[1]\n    target = ranges[2]\n    rotation = rotations[index]\n    if index == 0 :\n        return arr[0]\n    if index == 1 :\n        return arr[end]\n    if index == 2 :\n        return arr[target]\n    if index == 3 :\n        return arr[start]\n    if index == 4 :\n        return arr[rotation]\n    if index == 5 :\n        return arr[rotation-1]\n    if index == 6 :\n        return arr[rotation+1]\n    if index == 7 :\n        return arr[rotation+2]\n    if index == 8 :\n        return arr[rotation+3]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for rot in range(rotations) : \n        index = (index+arr[index])%len(arr)\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    n = len(arr)\n    target_val = arr[index]\n    for i in xrange(rotations) :\n        target_val = (target_val - 1 + n) % n\n    \n    return target_val\n    \n    \ndef reverse_list(arr) :\n    \n    '''\n    Write a python function to reverse a list.\n    '''\n    \n    return arr[::-1]\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    result = 0\n    length = len(ranges)\n    for i in range(0,length):\n        \n        if(ranges[i]<=rotations and ranges[i]>=rotations):\n            print \"found in index \", i\n            result = arr[i]\n            break\n            \n    return result\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index == len(arr) :\n        return True\n    \n    elif (index + rotations) < len(arr) :\n        return find_Element(arr,ranges,rotations,index+rotations)\n    else :\n        return find_Element(arr,ranges,rotations,index)\n    \n    \n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges == 1 :\n        return arr[index]\n    elif rotations == 0 :\n        return arr[(index+1)%len(arr)]\n    else :\n        return arr[index-rotations]\n    \n    \ndef find_Element_bitwise(arr,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return (arr[index] - arr[(index-rotations)%len(arr)])%len(arr)\n    \n    \ndef find_Element_bitwise_linear(arr,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return (arr[index] - arr[index-rotations])%len(arr)\n    \n    \ndef main() : \n    n = int(input().strip())\n    arr = list(map(int,input().split(' ')))\n    ranges = int(input().strip())\n    rotations = int(input().strip())\n    arr.sort()\n    res = find_Element_bitwise(arr,rotations,n-1)\n    print(res)\n    \nmain("
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    global answer\n    #print(index,rotations,ranges)\n    if rotations == len(arr) :\n        answer+=arr[index]\n        return\n    if ranges == 0 :\n        find_Element(arr,rotations+1,ranges,index)\n    elif ranges < len(arr) :\n        find_Element(arr,rotations,ranges-1,index)\n        find_Element(arr,rotations+1,ranges,index)\n        find_Element(arr,rotations+1,ranges,index+1)\n    else :\n        answer+=arr[index]\n        find_Element(arr,rotations+1,ranges,index+1)\n    return\n    \ndef compare(arr,rotations,ranges) :\n    '''\n    Write a python function to find the element in sorted array after given number of rotations.\n    '''\n    global answer\n    if rotations == len(arr) :\n        return answer\n    if ranges == 0 :\n        return compare(arr,rotations+1,ranges)\n    elif ranges < len(arr) :\n        return compare(arr,rotations,ranges-1) + compare(arr,rotations+1,ranges)\n    else :\n        return compare(arr,rotations+1,ranges)\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #rotation = rotations[index]\n    #rotation = (rotations[index]+1)%2\n    \n    #print \"rotation : \",rotations[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    temp = []\n    for i in range(len(arr)) :\n        temp.append(rotations[i])\n    temp.append(arr[index])\n    \n    for i in range(len(ranges)) :\n        if ranges[i] <= len(temp) :\n            return temp[ranges[i]-1]\n        else :\n            return temp[len(temp)-1]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p' and word[1]!= 'p':\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_list = []\n    for word in words:\n        if word.startswith('p'):\n            p_list.append(word)\n    return p_list\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list_word = []\n    for word in words:\n        if word[0] == 'p':\n            list_word.append(word)\n    return list_word\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    r1 = filter(lambda x: x[0]=='p',words)\n    return r1\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pwords = []\n    for word in words:\n        if word[0] == 'p':\n            pwords.append(word)\n    return pwords\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    match = re.findall(\"^p\", words)\n    if match:\n        return match[0], match[1]\n    else:\n        return ''\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    global result\n    for i in range(0, len(words)):\n        if words[i].startswith(\"p\"):\n            result = words[i]\n            return result\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index > n - 1:\n        return a[index]\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    # max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(max_sum_increasing_subseq(a, n, index + 1, k) + a[index], max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index])\n    # return max(max_sum_increasing_subseq(a, n, index + 1, k) + a[index], max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # Base condition\n    if index < 0 or n < 0 or k < 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return a[0]\n    elif n == index:\n        return 0\n    elif index == n - 1 and a[index] > k:\n        return 0\n    elif a[index] > k:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k + 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case\n    if index >= n:\n        return 0\n    if a[index] == k:\n        return 1\n    if a[index] > k:\n        return 1\n    # max( max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (index == n):\n        return 0\n    if (index > n):\n        return -1\n    if (k > index):\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # print index\n    if k < 0:\n        return 0\n    if index == n:\n        return a[n-1]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global max_sum\n    if index >= n:\n        return 0\n    elif k > index:\n        return max_sum\n    elif max_sum[index][k]!= -1:\n        return max_sum[index][k]\n    else:\n        max_sum[index][k] = max_sum_increasing_subseq(a, n, index + 1, k)\n        if max_sum[index][k] > max_sum[index][k - 1] + a[index]:\n            max_sum[index][k] = max_sum[index][k] + a[index]\n        else:\n            max_sum[index][k] = max_sum[index][k - 1] + a[index]\n    return max_sum[index][k]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return k\n    if index > n:\n        return 0\n    max1 = max_sum_increasing_subseq(a, n, index+1, k)\n    max2 = max_sum_increasing_subseq(a, n, index+1, k+a[index])\n    return max(max1, max2)\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n    left = 0\n    right = 0\n    global max_sum\n    # find left sum\n    while right < n:\n        if index == right:\n            max_sum = max(max_sum, left + a[right])\n        elif a[right] > a[left]:\n            left = right\n        right = right + 1\n    \n    # find right sum\n    left = 0\n    right = index - 1\n    while left < n:\n        if index == left:\n            max_sum = max(max_sum, right + a[left])\n        elif a[left] > a[right]:\n            right = left\n        left = left + 1\n    \n    # print max_sum\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if index > n:\n        return -1\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0 and n>0:\n        return tuple(tuplex[m:]+tuplex[:n])\n    elif m==0 and n==0:\n        return tuple(tuplex)\n    elif m>0 and n==0:\n        return tuple(tuplex[m:])\n    else:\n        return tuple(tuplex[m:n])\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if m>=0:\n            if n>=0:\n                tuplex[i]=tuplex[i][:m]+\":\"+tuplex[i][m:n]+\":\"+tuplex[i][n:]\n            else:\n                tuplex[i]=tuplex[i][:m]+\":\"+tuplex[i][m:len(tuplex[i])]\n        else:\n            if n>=0:\n                tuplex[i]=tuplex[i][len(tuplex[i])-m:]+\":\"+tuplex[i][len(tuplex[i])-m:n]+\":\"+tuplex[i][n:]\n            else:\n                tuplex[i]=tuplex[i][len(tuplex[i])-m:]+\":\"+tuplex[i][len(tuplex[i])-m:len(tuplex[i])]\n    return tuplex\ndef flatten_2D(lis,n):\n    '''\n    Write a function to flatten a 2D list.\n    '''\n    for i in range(len(lis)):\n        for j in range(len(lis[i])):\n            lis[i][j]=lis[i][j]+n\n    return lis\ndef flatten_list(lis,n):\n    '''\n    Write a function to flatten a 2D list.\n    '''\n    lis2=[]\n    for i in range(len(lis)):\n        lis2=lis2+lis[i]\n    for i in range(len(lis2)):\n        lis2[i]=lis2[i]+n\n    return lis2\ndef find_duplicate(lis):\n    '''\n    Write a function to find the duplicate element in a list.\n    '''\n    for i in range(len(lis)):\n        for j in range(len(lis)):\n            if i!=j and lis[i]==lis[j]:\n                return lis[i]\n    return -1\ndef remove_duplicate_elem(lis):\n    '''\n    Write a function to remove duplicate element in a list.\n    '''\n    lis2=[]\n    for i in range(len(lis)):\n        if lis[i] not in lis2:\n            lis2.append(lis[i])\n    return lis2\ndef get_duplicate_elem(lis):\n    '''\n    Write a function to get the duplicate element in a list.\n    '''\n    for i in range(len(lis)):\n        if lis.count(lis[i])>1:\n            return lis[i]\n    return -1\ndef remove_duplicate_elem_2D(lis):\n    '''\n    Write a function to remove duplicate element in a 2D list.\n    '''\n    for i in range(len(lis)):\n        lis2=[]\n        for j in range(len(lis[i])):\n            if lis[i][j] not in lis2:\n                lis2.append(lis[i][j])\n    return lis2\ndef get_duplicate_elem_2D(lis):\n    '''\n    Write a function to get the duplicate element in a 2D list.\n    '''\n    for i in range(len(lis)):\n        if lis.count(lis[i])>1:\n            return lis[i]\n    return -1\ndef reverse_lis_2D(lis):\n    '''\n    Write a function to reverse a 2D list.\n    '''\n    for i in range(len(lis)):\n        lis[i].reverse()\n    return lis\ndef swap_lis_2D(lis,i,j):\n    '''\n    Write a function to swap two element in a 2D list.\n    '''\n    tmp=lis[i]\n    lis[i]=lis[j]\n    lis[j]=tmp\n    return lis\ndef compare_lis_2D(lis1,lis2):\n    '''\n    Write a function to compare two 2D list.\n    '''\n    for i in range(len(lis1)):\n        if lis1[i]!=lis2[i]:\n            return False\n    return True\ndef generate_lis_2D(lis):\n    '''\n    Write a function to generate a 2D list.\n    '''\n    for i in range(len(lis)):\n        lis2=[]\n        for j in range(len(lis[i])):\n            lis2.append(i*j)\n        lis.append(lis2)\n    return lis\ndef compress_lis_2D(lis):\n    '''\n    Write a function to compress a 2D list.\n    '''\n    lis2=[]\n    for i in range(len(lis)):\n        lis2.append(lis[i][0])\n    return lis2\ndef rotate_lis_2D(lis):\n    '''\n    Write a function to rotate a 2D list.\n    '''\n    for i in range(len(lis)):\n        lis[i].reverse()\n    return lis\ndef sum_lis_2D(lis):\n    '''\n    Write a function to sum up a 2D list.\n    '''\n    lis2=[]\n    for i in range(len(lis)):\n        lis2.append(sum(lis[i]))\n    return lis2\ndef prod_lis_2D(lis):\n    '''\n    Write a function to product a 2D list.\n    '''\n    lis2=[]\n    for i in range(len(lis)):\n        lis2.append(reduce(lambda x,y:x*y,lis[i]))\n    return lis2\ndef xor_lis_2D(lis):\n    '''\n    Write a function to do XOR operation on a 2D list.\n    '''\n    lis2=[]\n    for i in range(len(lis)):\n        lis2.append(xor_lis(lis[i]))\n    return lis2\ndef sub_lis_2D(lis):\n    '''\n    Write a function to do subtraction operation on a 2D list.\n    '''\n    lis2=[]\n    for i in range(len(lis)):\n        lis2.append(sub_lis(lis[i]))\n    return lis2\ndef xor_lis(lis):\n    '''\n    Write a function to do XOR operation on a list.\n    '''\n    lis2=[]\n    for i in range(len(lis)):\n        lis2.append(lis[i]^1)\n    return lis2\ndef cadd_lis_2D(lis):\n    '''\n    Write a function to do carry addition on a 2D list.\n    '''\n    lis2=[]\n    for i in range(len(lis)):\n        lis2.append(cadd_lis(lis[i]))\n    return lis2\ndef chxor_lis_2D(lis):\n    '''\n    Write a function to do chxor operation on a 2D list.\n    '''\n    lis2=[]\n    for i in range(len(lis)):\n        lis2.append(chxor_lis(lis[i]))\n    return lis2\ndef chmul_lis_2D(lis):\n    '''\n    Write a function to do chmul operation on a 2D list.\n    '''\n    lis2=[]\n    for i in range(len(lis)):\n        lis2.append(chmul_lis(lis[i]))\n    return lis2\ndef carry_lis_2D(lis):\n    '''\n    Write a function to do carry operation on a 2D list.\n    '''\n    lis2=[]\n    for i in range(len(lis)):\n        lis2.append(carry_lis(lis[i]))\n    return lis2\ndef mul_lis_2D(lis):\n    '''\n    Write a function to do multiplication operation on a 2D list.\n    '''\n    lis2=[]\n    for i in range(len(lis)):\n        lis2.append(mul_lis(lis[i]))\n    retur"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==1:\n        return tuplex[n]\n    elif m==2:\n        return tuplex[n][0]\n    elif m==3:\n        return tuplex[n][0][0]\n    elif m==4:\n        return tuplex[n][0][0][0]\n    elif m==5:\n        return tuplex[n][0][0][0][0]\n    elif m==6:\n        return tuplex[n][0][0][0][0][0]\n    elif m==7:\n        return tuplex[n][0][0][0][0][0][0]\n    elif m==8:\n        return tuplex[n][0][0][0][0][0][0][0]\n    elif m==9:\n        return tuplex[n][0][0][0][0][0][0][0][0]\n    elif m==10:\n        return tuplex[n][0][0][0][0][0][0][0][0][0]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex[m][n] = tuplex[m][n] + 1\n    return tuplex\n    \ndef print_tuplex(tuplex):\n    '''\n    Write a function to print a tuple.\n    '''\n    for i in range(len(tuplex)):\n        print tuplex[i]\n    return\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m):\n        for j in range(n):\n            if (i+j)%2==0:\n                print tuplex[i][j],\n        print\n    return\n    \ndef expand_string(string,m,n):\n    '''\n    Write a function that will return a string with the first letter of each word from the given string expanded until its length is as long as possible.\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # print(tuplex)\n    # print(tuplex[m:n])\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    s=tuplex[0]\n    l=tuplex[1]\n    s=s[:m]+s[m:n]+s[n:]\n    l=l[:m]+l[m:n]+l[n:]\n    tuplex=(s,l)\n    return tuplex\ndef password(password):\n    '''\n    Write a function to get the password, given the index.\n    '''\n    passwd=[]\n    for i in password:\n        passwd.append(i)\n    return passwd\ndef reverse_list(l):\n    '''\n    Write a function to reverse a list.\n    '''\n    l.reverse()\n    return l\ndef reverse_list_comp(l):\n    '''\n    Write a function to reverse a list.\n    '''\n    return l[::-1]\ndef rotate_list(l):\n    '''\n    Write a function to rotate a list.\n    '''\n    l.insert(0,l.pop())\n    return l\ndef rotate_list_comp(l):\n    '''\n    Write a function to rotate a list.\n    '''\n    return l[1:]+l[:1]\ndef rotate_list_comp_2(l):\n    '''\n    Write a function to rotate a list.\n    '''\n    return l[-1:]+l[:-1]\ndef rotate_list_comp_3(l):\n    '''\n    Write a function to rotate a list.\n    '''\n    return l[-2:]+l[:-2]\ndef is_palindrome(s):\n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    return s[::-1]==s\ndef is_palindrome_comp(s):\n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    return s[::-1]==s\ndef rotate_string(s,k):\n    '''\n    Write a function to rotate a string.\n    '''\n    if k>len(s):\n        k=k%len(s)\n    s_l=[]\n    for i in s:\n        s_l.append(i)\n    for i in range(k):\n        s_l.append(s_l.pop(0))\n    return ''.join(s_l)\ndef rotate_string_comp(s,k):\n    '''\n    Write a function to rotate a string.\n    '''\n    if k>len(s):\n        k=k%len(s)\n    return s[k:]+s[:k]\ndef index_of_first_item(l,m):\n    '''\n    Write a function to get the index of the first item, given the index of the item.\n    '''\n    if l.index(m)==0:\n        return -1\n    else:\n        return l.index(m)-1\ndef index_of_first_item_comp(l,m):\n    '''\n    Write a function to get the index of the first item, given the index of the item.\n    '''\n    if l.index(m)==0:\n        return -1\n    else:\n        return l.index(m)-1\ndef index_of_last_item(l,m):\n    '''\n    Write a function to get the index of the last item, given the index of the item.\n    '''\n    if l.index(m)==len(l)-1:\n        return -1\n    else:\n        return l.index(m)+1\ndef index_of_last_item_comp(l,m):\n    '''\n    Write a function to get the index of the last item, given the index of the item.\n    '''\n    if l.index(m)==len(l)-1:\n        return -1\n    else:\n        return l.index(m)+1\ndef find_all_indexes(l,m):\n    '''\n    Write a function to find all the indexes of the item, given the item.\n    '''\n    return [i for i in range(len(l)) if l[i]==m]\ndef find_all_indexes_comp(l,m):\n    '''\n    Write a function to find all the indexes of the item, given the item.\n    '''\n    return [i for i,v in enumerate(l) if v==m]\ndef find_all_items(l,m):\n    '''\n    Write a function to find all the items, given the item.\n    '''\n    return [i for i,v in enumerate(l) if v==m]\ndef find_all_items_comp(l,m):\n    '''\n    Write a function to find all the items, given the item.\n    '''\n    return [i for i,v in enumerate(l) if v==m]\ndef find_first_item(l,m):\n    '''\n    Write a function to find the index of the first item, given the index of the item.\n    '''\n    if l.index(m)==0:\n        return -1\n    else:\n        return l.index(m)-1\ndef find_first_item_comp(l,m):\n    '''\n    Write a function to find the index of the first item, given the index of the item.\n    '''\n    if l.index(m)==0:\n        return -1\n    else:\n        return l.index(m)-1\ndef find_last_item(l,m):\n    '''\n    Write a function to find the index of the last item, given the index of the item.\n    '''\n    if l.index(m)==len(l)-1:\n        return -1\n    else:\n        return l.index(m)+1\ndef find_last_item_comp(l,m):\n    '''\n    Write a function to find the index of the last item, given the index of the item.\n    '''\n    if l.index(m)==len(l)-1:\n        return -1\n    else:\n        return l.index(m)+1\ndef count_letters(s):\n    '''\n    Write a function to count the number of letters in a string.\n    '''\n    return len([x for x in s if x.isalpha()])\ndef count_letters_comp(s):\n    '''\n    Write a function to count the number of letters in a string.\n    '''\n    return len([x for x in s if x.isalpha()])\ndef most_common_item(l):\n    '''\n    Write a function to get the most common item in a list.\n    '''\n    a=max(l,key=l.count)\n    return a\ndef most_common_item_comp(l):\n    '''\n    Write a function to get the most common item in a list.\n    '''\n    a=max(l,key=l.count)\n    return a\ndef most_common_item_2(l):\n    '''\n    Write a function to get the most common item in a list.\n    '''\n    a=max(l,key=lambda x:l.count(x))\n    return a\ndef most_common_item_2_comp(l):\n    '''\n    Write a function to get the most common item in a list.\n    '''\n    a=max(l,key=lambda x:l.count(x))\n    return a\ndef get_longest_word(l):\n    '''\n    Write a function to get the longest word in a list.\n    '''\n    return max(l,key=len)\ndef get_longest_word_comp(l):\n    '''\n    Write a function to get the longest word in a list.\n    '''\n    return max(l,key=len)\ndef get_longest_word_2(l):\n    '''\n    Write a function to get the longest word in a list.\n    '''\n    return max(l,key=lambda x:len(x))\ndef get_longest_word_2_comp(l):\n    '''\n    Write a function to get the longest word in a list.\n    '''\n    return max(l,key=lambda x:len(x))\ndef get_longest_word_3(l):\n    '"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m-1:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m-1:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0:\n        return ()\n    else:\n        return (tuplex[m-1],)+colon_tuplex(tuplex,m-1,n)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    p = [0] * N\n    for i in range(N):\n        p[i] = [nums1[i] * nums2[i], nums1[i], nums2[i]]\n        p[i].sort()\n        p[i] = p[i][0]\n    return p\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    prod = []\n    for i in range(N):\n        prod.append(nums1[i] * nums2[N - i - 1])\n    return prod\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * nums1[i]\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * nums2[i]\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * min(nums1[i],nums2[i])\n    # return prod\n    \n    # prod = 1\n    # for i in range(N):\n    #     prod = prod * max(nums1[i],nums2[i]"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    # get product of two max_number and append to result\n    for i in range(N):\n        product_max = 1\n        for num in nums1:\n            if num <= 0:\n                continue\n            product_max *= num\n        for num in nums2:\n            if num <= 0:\n                continue\n            product_max *= num\n        result.append(product_max)\n    # return max_product\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        nums1_product = 1\n        nums2_product = 1\n        for j in range(len(nums1)):\n            nums1_product *= nums1[j]\n        for k in range(len(nums2)):\n            nums2_product *= nums2[k]\n        products.append(max(nums1_product, nums2_product))\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    product_nums = []\n    num_products = 0\n    if len(nums1) > len(nums2):\n        large_list = nums1\n        small_list = nums2\n    else:\n        large_list = nums2\n        small_list = nums1\n    if len(small_list) < N:\n        return large_product(nums1, nums2, N)\n    for i in range(N):\n        for j in range(N):\n            product = 1\n            for k in range(len(small_list)):\n                product *= large_list[k]**small_list[k]\n            if product > num_products:\n                num_products = product\n                product_nums = [large_list[k], small_list[k]]\n    return product_nums\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    product_list = []\n    for num in nums1:\n        for factor in nums2:\n            product_list.append(num * factor)\n    product_list.sort(reverse=True)\n    return product_list[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    prods = []\n    for i in range(N):\n        prods.append(nums1[i]*nums2[i])\n    return prods\n    \n    \n    \ndef largest_product(nums, N):\n    '''\n    Write a function to find the largest product from two given lists, each of size N\n    '''\n    if N <= 2:\n        return largest_product_top_down(nums)\n    # top down approach\n    # recursive calls are made with the following three cases:\n    # 1. the length of the list is 1\n    # 2. the length of the list is 2\n    # 3. the length of the list is 3\n    return max(largest_product(nums[1:], N), largest_product(nums[:-1], N), largest_product_top_down(nums[:2]))\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import sys\n    def find_product(sorted_nums, N):\n        count = 0\n        num_list = []\n        for i in range(N):\n            if count == 0:\n                num_list.append(sorted_nums[i])\n                count += 1\n            else:\n                product = num_list[count-1] * sorted_nums[i]\n                if product > num_list[count-1]:\n                    num_list.append(product)\n                    count += 1\n        return num_list\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list_char = list(str1)\n    tuple_char = tuple(list_char)\n    return tuple_char\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup1=str1.split(',')\n    return tuple(tup1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup1 = str1\n    tup2 = []\n    for i in tup1:\n        tup2.append(i)\n    return tuple(tup2)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = str1[::-1]\n    return tuple(str2)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    res = ()\n    for i in str1:\n        res += (i,)\n    return res\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    new_str = str1\n    a = tuple(new_str)\n    return a\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #Python program to set the leftmost \n    #bit of a number to 1 \n    #print n&-(n&1)\n    return n&-(n&1)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & (n-1): \n        n = n & ~(n-1)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 0:\n        n &= 0xffffffff\n    n |= (1 << (32 - 1))\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (n & n - 1)\n    "
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    temp = set_left_most_unset_bit(n / 2)\n    if n % 2 == 0: \n        return temp\n    else: \n        if (n % 4 == 1):\n            return (temp | 1)\n        else:\n            return (temp | 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize n = n - 1\n    while n & 1 == 0:\n        n = n >> 1\n    # now we can set the left most unset bit \n    n = n | 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # convert the number to binary\n    binary_num = bin(n)\n    # convert the binary to a list\n    binary_num = list(binary_num)\n    # check if the first element of the list is 0 or 1\n    if binary_num[0] == '1':\n        # replace the first element of the list with 0\n        binary_num[0] = '0'\n    else:\n        # replace the first element of the list with 1\n        binary_num[0] = '1'\n    # convert the binary list to a string\n    binary_num = ''.join(binary_num)\n    return int(binary_num,2)\n    "
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # count = 0\n    # while (n & 1) == 0:\n    #     n = n >> 1\n    #     count += 1\n    # n = n | (1 << count)\n    # return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    return n | (1 << (len(bin(n)) - 2))\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n ^ (n & (n - 1))\n    n = n ^ (n & (n - 1))\n    return n\n    "
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3.0*math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r*r*h)/3.0\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r*r*h)/3.0\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r*r*h)/3.0\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r*r*h)/3.0\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r*r*h)/3.0\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r*r*h)/3.0\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r*r*h)/3.0\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r*r*h)/3.0\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_s"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*(r**2)*(h/3)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r=float(r)\n    h=float(h)\n    V=math.pi*r*r*h/3\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1.0/3.0*math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r*r*r\ndef volume_pyramid(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 1.0/3.0*math.pi*r*r*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return h*math.pi*r*r\ndef volume_paralelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a paralelpiped.\n    '''\n    return a*b*c\ndef volume_right_rect(l,b):\n    '''\n    Write a function to find the volume of a right rect.\n    '''\n    return l*b\ndef volume_rhomb(r,h):\n    '''\n    Write a function to find the volume of a rhomb.\n    '''\n    return 1.0/3.0*r*r*h\ndef volume_rectangular_prism(l,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return l*b*h\ndef volume_prism(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h\ndef volume_torus(r,h):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return 2.0*math.pi*r*r*math.sqrt(math.pi*h*h/math.pi)\ndef volume_icosahedron(r):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    return (5.0*math.pi*r*r*r)/12.0\ndef volume_tetrahedron(r):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r*r*r\ndef volume_sphere_ball(r):\n    '''\n    Write a function to find the volume of a sphere ball.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_sphere_cap(r):\n    '''\n    Write a function to find the volume of a sphere cap.\n    '''\n    return (8.0/3.0)*math.pi*r*r*r\ndef volume_sphere_elip(r,h):\n    '''\n    Write a function to find the volume of a sphere elip.\n    '''\n    return (4.0/3.0)*math.pi*r*r*h\ndef volume_cylinder_cap(r,h):\n    '''\n    Write a function to find the volume of a cylinder cap.\n    '''\n    return math.pi*r*r*h\ndef volume_cylinder_elip(r,h):\n    '''\n    Write a function to find the volume of a cylinder elip.\n    '''\n    return math.pi*r*r*h\ndef volume_cone_cap(r,h):\n    '''\n    Write a function to find the volume of a cone cap.\n    '''\n    return 1.0/3.0*math.pi*r*r*h\ndef volume_cone_elip(r,h):\n    '''\n    Write a function to find the volume of a cone elip.\n    '''\n    return 1.0/3.0*math.pi*r*r*h\ndef volume_sphere_cap_ball(r):\n    '''\n    Write a function to find the volume of a sphere cap ball.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r\ndef volume_sphere_cap_elip(r,h):\n    '''\n    Write a function to find the volume of a sphere cap elip.\n    '''\n    return (4.0/3.0)*math.pi*r*r*h\ndef volume_cylinder_cap_elip(r,h):\n    '''\n    Write a function to find the volume of a cylinder cap elip.\n    '''\n    return math.pi*r*r*h\ndef volume_cone_cap_elip(r,h):\n    '''\n    Write a function to find the volume of a cone cap elip.\n    '''\n    return 1.0/3.0*math.pi*r*r*h\ndef volume_pyramid_cap(r,h):\n    '''\n    Write a function to find the volume of a pyramid cap.\n    '''\n    return 1.0/3.0*math.pi*r*r*h\ndef volume_rectangular_prism_cap(l,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism cap.\n    '''\n    return l*b*h\ndef volume_rhomb_cap(r,h):\n    '''\n    Write a function to find the volume of a rhomb cap.\n    '''\n    return 1.0/3.0*r*r*h\ndef volume_paralelepiped_cap(a,b,h):\n    '''\n    Write a function to find the volume of a paralelpiped cap.\n    '''\n    return a*b*h\ndef volume_right_rect_cap(l,b):\n    '''\n    Write a function to find the volume of a right rect cap.\n    '''\n    return l*b\ndef volume_rhomb_elip(r,h):\n    '''\n    Write a function to find the volume of a rhomb elip.\n    '''\n    return 1.0/3.0*r*r*h\ndef volume_paralelepiped_elip(a,b,h):\n    '''\n    Write a function to find the volume of a paralelpiped elip.\n    '''\n    return a*b*h\ndef volume_rhomb_elip_cap(r,h):\n    '''\n    Write a function to find the volume of a rhomb elip cap.\n    '''\n    return 1.0/3.0*r*r*h\ndef volume_paralelepiped_elip_cap(a,b,h):\n    '''\n    Write a function to find the volume of a paralelpiped elip cap.\n    '''\n    return a*b*h\ndef volume_right_rect_elip(l,b):\n    '''\n    Write a function to find the volume of a right rect elip.\n    '''\n    return l*b\ndef volume_icosahedron_elip(r):\n    '''\n    Write a function to find the volume of an icosahedron elip.\n    '''\n    return (5.0/3.0)*math.pi*r*r*r*r\ndef volume_tetrahedron_elip(r):\n    '''\n    Write a function to find the volume of a tetrahedron elip.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r*r\ndef volume_cube_elip(r):\n    '''\n    Write a function to find the volume of a cube elip.\n    '''\n    return (8.0/3.0)*math.pi*r*r*r*r\ndef volume_sphere_elip_ball(r,h):\n    '''\n    Write a function to find the volume of a sphere elip ball.\n    '''\n    return (4.0/3.0)*math.pi*r*r*r*h\ndef volume_sphere_elip_cap(r,h):\n    '''\n    Write a function to find the volume of a sphere elip cap.\n    '''\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*r*h/3\ndef get_triangle_area(base, height):\n    '''\n    Write a function that returns the area of a right-angled triangle with given base and height.\n    '''\n    return (base * height)/2\ndef get_square_area(side):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return side * side\ndef get_rectangle_area(length, width):\n    '''\n    Write a function that returns the area of a rectangle.\n    '''\n    return length * width\ndef get_circle_area(radius):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*radius*radius\ndef get_sphere_area(radius):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*math.pi*radius*radius\ndef get_cylinder_area(radius,height):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return 2*math.pi*radius*radius + 2*math.pi*radius*height\ndef get_sphere_surface_area(radius):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*radius*radius\ndef get_sphere_volume(radius):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius*radius*radius\ndef get_cube_surface_area(side):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*side*side\ndef get_cube_volume(side):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return side*side*side\ndef get_cube_diagonal(side):\n    '''\n    Write a function to find the diagonal of a cube.\n    '''\n    return side*side\ndef get_sphere_diagonal(radius):\n    '''\n    Write a function to find the diagonal of a sphere.\n    '''\n    return radius*radius*2*math.pi\ndef get_octagon_perimeter(side):\n    '''\n    Write a function to find the perimeter of an octagon.\n    '''\n    return side*8\ndef get_octagon_area(side):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    return side*side*0.5\ndef get_octagon_diagonal(side):\n    '''\n    Write a function to find the diagonal of an octagon.\n    '''\n    return side*math.sqrt(2)\ndef get_octagon_apothem(side):\n    '''\n    Write a function to find the apothem of an octagon.\n    '''\n    return side*math.sqrt(2)/2\ndef get_heptagon_perimeter(side):\n    '''\n    Write a function to find the perimeter of a heptagon.\n    '''\n    return side*7\ndef get_heptagon_area(side):\n    '''\n    Write a function to find the area of a heptagon.\n    '''\n    return side*side*1.5\ndef get_heptagon_diagonal(side):\n    '''\n    Write a function to find the diagonal of a heptagon.\n    '''\n    return side*math.sqrt(2)*5/2\ndef get_heptagon_apothem(side):\n    '''\n    Write a function to find the apothem of a heptagon.\n    '''\n    return side*math.sqrt(3)/2\ndef get_nonagon_perimeter(side):\n    '''\n    Write a function to find the perimeter of a nonagon.\n    '''\n    return side*6\ndef get_nonagon_area(side):\n    '''\n    Write a function to find the area of a nonagon.\n    '''\n    return side*side*1.5\ndef get_nonagon_diagonal(side):\n    '''\n    Write a function to find the diagonal of a nonagon.\n    '''\n    return side*math.sqrt(2)*4/2\ndef get_nonagon_apothem(side):\n    '''\n    Write a function to find the apothem of a nonagon.\n    '''\n    return side*math.sqrt(3)/2\ndef get_octagon_diagonal(side):\n    '''\n    Write a function to find the diagonal of an octagon.\n    '''\n    return side*math.sqrt(2)\ndef get_heptagon_diagonal(side):\n    '''\n    Write a function to find the diagonal of a heptagon.\n    '''\n    return side*math.sqrt(3)/2\ndef get_heptagon_apothem(side):\n    '''\n    Write a function to find the apothem of a heptagon.\n    '''\n    return side*math.sqrt(3)/2\ndef get_nonagon_diagonal(side):\n    '''\n    Write a function to find the diagonal of a nonagon.\n    '''\n    return side*math.sqrt(2)\ndef get_pentagon_perimeter(side):\n    '''\n    Write a function to find the perimeter of a pentagon.\n    '''\n    return side*5\ndef get_pentagon_area(side):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    return side*side*1.5\ndef get_pentagon_diagonal(side):\n    '''\n    Write a function to find the diagonal of a pentagon.\n    '''\n    return side*math.sqrt(2)*5/4\ndef get_pentagon_apothem(side):\n    '''\n    Write a function to find the apothem of a pentagon.\n    '''\n    return side*math.sqrt(3)/4\ndef get_hexagon_perimeter(side):\n    '''\n    Write a function to find the perimeter of a hexagon.\n    '''\n    return side*6\ndef get_hexagon_area(side):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return side*side*1.5\ndef get_hexagon_diagonal(side):\n    '''\n    Write a function to find the diagonal of a hexagon.\n    '''\n    return side*math.sqrt(2)*4/3\ndef get_hexagon_apothem(side):\n    '''\n    Write a function to find the apothem of a hexagon.\n    '''\n    return side*math.sqrt(3)/3\ndef get_triangle_perimeter(base, height):\n    '''\n    Write a function to find the perimeter of a right-angled triangle with given base and height.\n    '''\n    return base + height + base\ndef get_triangle_area(base, height):\n    '''\n    Write a function to find the area of a right-angled triangle with given base and height.\n    '''\n    return base*height/2\ndef get_triangle_diagonal(base, height):\n    '''\n    Write a function to find the diagonal of a right-angled triangle with given base and height.\n    '''\n    return math.sqrt(base*base + height*height)\ndef get_triangle_perimeter(side1, side2, side3):\n    '''\n    Write a function to find the perimeter of a right-angled triangle with given sides.\n    '''\n    return side1 + side2 + side3\ndef get_triangle_area(side1, side2, side3):\n    '''\n    Write a function to find the area of a right-angled triangle with given sides.\n    '''\n    s = (side1 + side2 + side3)/2\n    return math.sqrt(s*(s-side1)*(s-side2)*(s-side3))\ndef get_triangle_diagonal(side1, side2, side3):\n    '''\n    Write a function to find the diagonal of a right-angled triangle with given sides.\n    '''\n    return math.sqrt(side1*side1 "
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((math.pi*r**2)/3)*(math.sin((math.pi*r*h)/3))\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #V = 1/3 * pi * r^2 * h\n    v = (1/3) * math.pi * r**2 * h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    import math\n    assert r > 0 and r > h\n    return (1/3) * (math.pi * math.pow(r,2)) * h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return ((1/3)*(math.pi)*(r**2)*h)\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 1:\n        return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    power = 1\n    while (power < n):\n        power *= 2\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    i=0\n    highest_power=1\n    while highest_power<=n:\n        i=i+1\n        highest_power=2**i\n    \n    return i\n    \ndef knapsack(weights, values, max_weight, max_value): \n    '''\n    Write a python function to solve the 0/1 knapsack problem.\n    \n    Input: The weights and values of each item in the knapsack, the maximum weight of the knapsack, and the maximum value.\n    Output: The maximum value of items that can fit in the knapsack.\n    \n    For example, knapsack(weights=[2, 1, 3, 4], values=[6, 10, 18, 22], max_weight=10, max_value=45) should return 22\n    because items 1 and 2 (10 + 18) are the highest value items that can fit in the knapsack.\n    '''\n    \n    n=len(values)\n    t=[[0 for i in range(max_weight+1)] for j in range(n+1)]\n    \n    for i in range(1,n+1):\n        for j in range(1,max_weight+1):\n            if weights[i-1]<=j:\n                t[i][j]=max(t[i-1][j],values[i-1]+t[i-1][j-weights[i-1]])\n            else:\n                t[i][j]=t[i-1][j]\n    \n    return t[n][max_weight]\n    \ndef generate_Superset(listA,listB):\n    '''\n    Write a python function to generate all the possible combinations of two lists\n    '''\n    \n    n=len(listA)\n    listC=[]\n    for i in range(0,n):\n        for j in range(i+1,n):\n            listC.append([listA[i],listB[j]])\n    \n    return listC\n    \ndef count_set_bits(number):\n    '''\n    Write a python function to count the number of set bits in a 32 bit number.\n    '''\n    \n    n=number\n    count=0\n    while n:\n        n&=(n-1)\n        count=count+1\n        \n    return count\n    \ndef generate_all_strings(listA):\n    '''\n    Write a python function to generate all the permutations of a list of strings\n    '''\n    \n    n=len(listA)\n    listC=[]\n    for i in range(n):\n        for j in range(n):\n            listC.append([listA[i],listA[j]])\n    \n    return listC\n    \ndef f(n):\n    '''\n    Write a python function to solve the 0/1 knapsack problem.\n    \n    Input: The weights and values of each item in the knapsack, the maximum weight of the knapsack, and the maximum value.\n    Output: The maximum value of items that can fit in the knapsack.\n    \n    For example, knapsack(weights=[2, 1, 3, 4], values=[6, 10, 18, 22], max_weight=10, max_value=45) should return 22\n    because items 1 and 2 (10 + 18) are the highest value items that can fit in the knapsack.\n    '''\n    \n    weights=[2, 1, 3, 4]\n    values=[6, 10, 18, 22]\n    max_weight=10\n    max_value=45\n    \n    n=len(values)\n    t=[[0 for i in range(max_weight+1)] for j in range(n+1)]\n    \n    for i in range(1,n+1):\n        for j in range(1,max_weight+1):\n            if weights[i-1]<=j:\n                t[i][j]=max(t[i-1][j],values[i-1]+t[i-1][j-weights[i-1]])\n            else:\n                t[i][j]=t[i-1][j]\n    \n    return t[n][max_weight]\n    \ndef comb_sort(listA):\n    '''\n    Write a python function to implement comb sort, a sorting algorithm which improves on bubble sort.\n    \n    Input: A list of numbers\n    Output: A sorted list of numbers\n    \n    For example, comb_sort([1, 5, 3, 2, 4, 6]) should return [1, 2, 3, 4, 5, 6]\n    '''\n    \n    n=len(listA)\n    gap=n\n    \n    while gap>1:\n        gap=int(gap/1.3)\n        if gap<1:\n            gap=1\n        \n    #start the sorting\n    swapped=True\n    \n    while swapped:\n        swapped=False\n        for i in range(0,n-gap):\n            if listA[i]>listA[i+gap]:\n                listA[i],listA[i+gap]=listA[i+gap],listA[i]\n                swapped=True\n    \n    return listA\n    \ndef radix_sort(listA,base=10):\n    '''\n    Write a python function to implement radix sort, a sorting algorithm that improves on the counting sort algorithm.\n    \n    Input: A list of numbers\n    Output: A sorted list of numbers\n    \n    For example, radix_sort([111, 22, 3, 4, 5, 6, 7, 8, 9]) should return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    \n    n=len(listA)\n    k=n\n    \n    while k>1:\n        count=[0 for i in range(base)]\n        for i in range(n):\n            digit=(listA[i]/pow(base,k-1))%base\n            count[digit]+=1\n        \n        j=0\n        for i in range(base):\n            while count[i]:\n                listA[j]=i*pow(base,k-1)+j\n                count[i]-=1\n                j+=1\n        k-=1\n    \n    return listA\n    \ndef is_anagram(str1,str2):\n    '''\n    Write a python function to check if two strings are anagrams of each other\n    \n    Input: Two strings\n    Output: Boolean indicating if the strings are anagrams or not\n    '''\n    \n    listA=[]\n    listB=[]\n    \n    for i in range(len(str1)):\n        listA.append(str1[i])\n        listB.append(str2[i])\n        \n    return listA==listB\n    \ndef get_frequencies(str1):\n    '''\n    Write a python function to count the frequency of characters in a string\n    '''\n    \n    n=len(str1)\n    freq=[0 for i in range(128)]\n    \n    for i in range(n):\n        freq[ord(str1[i])]+=1\n    \n    return freq\n    \ndef reverse_complement(str1):\n    '''\n    Write a python function to reverse complement a string\n    \n    Input: A string\n    Output: The reverse complement of the string\n    \n    For example, reverse_complement(\"CCTGGATCA\") should return \"CTGACGGATC\"\n    '''\n    \n    n=len(str1)\n    reversed=str1[::-1]\n    \n    complement=''\n    for i in range(n):\n        if str1[i]=='A':\n            complement+='T'\n        elif str1[i]=='T':\n            complement+='A'\n        elif str1[i]=='C':\n            complement+='G'\n        else:\n            complement+='C'\n    \n    return complement\n    \ndef split_str(str1,n):\n    '''\n    Write a python function to split a string into n chunks\n    \n    Input: A string and an integer n\n    Output: A list of n strings\n    \n    For example, split_str(\"ABCDE\",3) should return [\"ABC\",\"DEF\"]\n    '''\n    \n    listA=[]\n    \n    while len(st"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2**int(log(n,2))\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #Base case\n    if n == 1:\n        return 1\n    \n    power = 1\n    while power < n:\n        power *= 2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 0\n    while n > 1:\n        p = p + 1\n        n = n >> 1\n    return p\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power=1\n    while(power<=n):\n        power*=2\n    return power/2\ndef decimal_binary(n):\n    '''\n    Write a python function to convert an integer n to a binary string of bits, and return the string.\n    '''\n    binary=''\n    while(n!=0):\n        if(n%2==0):\n            binary='0'+binary\n        else:\n            binary='1'+binary\n        n=n/2\n    return binary[::-1]\ndef inverse_of_2(n):\n    '''\n    Write a python function to convert a string of bits to an integer. Return the integer.\n    '''\n    inverse=0\n    for i in range(len(n)):\n        inverse+=int(n[i])*pow(2,i)\n    return inverse\ndef Number_of_1s(n):\n    '''\n    Write a python function to count the number of 1s in a binary string.\n    '''\n    count=0\n    while(n!=0):\n        if(n%2==1):\n            count+=1\n        n/=2\n    return count\ndef factorial_of_number(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    fact=1\n    for i in range(1,n+1):\n        fact*=i\n    return fact\ndef Modular_Exponentiation(a,b,m):\n    '''\n    Write a python function to compute a^b mod m, where a,b,m are all integers. Return the result.\n    '''\n    if(b==0):\n        return 1\n    if(b%2==0):\n        return Modular_Exponentiation(a,b/2,m)**2 % m\n    else:\n        return (a*Modular_Exponentiation(a,b-1,m)) % m\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth number of the fibonacci sequence.\n    '''\n    if(n==1 or n==2):\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    sum=0\n    while(n!=0):\n        sum+=n%10\n        n/=10\n    return sum\ndef sudoku_Solver(grid):\n    '''\n    Write a python function to solve a sudoku puzzle.\n    '''\n    def row_and_column_values(n):\n        '''\n        Write a python function to find the row and column values of a number.\n        '''\n        row=n/9\n        column=n%9\n        return (row,column)\n    def row_and_column_possibilities(n):\n        '''\n        Write a python function to find the row and column values of a number and return a list of possible numbers.\n        '''\n        possibilities=[]\n        (row,column)=row_and_column_values(n)\n        for i in range(1,10):\n            if(grid[row][column]==0):\n                possibilities.append(i)\n        return possibilities\n    def row_possibilities(n):\n        '''\n        Write a python function to find the row values of a number and return a list of possible numbers.\n        '''\n        possibilities=[]\n        (row,column)=row_and_column_values(n)\n        for i in range(1,10):\n            if(grid[row][column]==0):\n                possibilities.append(i)\n        return possibilities\n    def column_possibilities(n):\n        '''\n        Write a python function to find the column values of a number and return a list of possible numbers.\n        '''\n        possibilities=[]\n        (row,column)=row_and_column_values(n)\n        for i in range(1,10):\n            if(grid[row][column]==0):\n                possibilities.append(i)\n        return possibilities\n    def grid_possibilities(n):\n        '''\n        Write a python function to find the grid values of a number and return a list of possible numbers.\n        '''\n        possibilities=[]\n        (row,column)=row_and_column_values(n)\n        for i in range(1,10):\n            if(grid[row][column]==0):\n                possibilities.append(i)\n        return possibilities\n    def possible_numbers(n):\n        '''\n        Write a python function to find all possible numbers in the same row, column, or grid that a number can be placed in.\n        '''\n        possibilities=[]\n        (row,column)=row_and_column_values(n)\n        possibilities+=row_possibilities(n)\n        possibilities+=column_possibilities(n)\n        possibilities+=grid_possibilities(n)\n        return possibilities\n    def solve(n):\n        '''\n        Write a python function to recursively solve a sudoku puzzle.\n        '''\n        global grid\n        (row,column)=row_and_column_values(n)\n        if(row==8 and column==8):\n            grid[row][column]=n\n            return True\n        else:\n            possibilities=possible_numbers(n)\n            for i in possibilities:\n                grid[row][column]=i\n                if(solve(n)):\n                    return True\n            grid[row][column]=0\n    grid=grid\n    for i in range(1,10):\n        solve(i)\n    return grid\ndef sudoku_Solver_2(grid):\n    '''\n    Write a python function to solve a sudoku puzzle.\n    '''\n    def row_and_column_values(n):\n        '''\n        Write a python function to find the row and column values of a number.\n        '''\n        row=n/9\n        column=n%9\n        return (row,column)\n    def row_and_column_possibilities(n):\n        '''\n        Write a python function to find the row and column values of a number and return a list of possible numbers.\n        '''\n        possibilities=[]\n        (row,column)=row_and_column_values(n)\n        for i in range(1,10):\n            if(grid[row][column]==0):\n                possibilities.append(i)\n        return possibilities\n    def row_possibilities(n):\n        '''\n        Write a python function to find the row values of a number and return a list of possible numbers.\n        '''\n        possibilities=[]\n        (row,column)=row_and_column_values(n)\n        for i in range(1,10):\n            if(grid[row][column]==0):\n                possibilities.append(i)\n        return possibilities\n    def column_possibilities(n):\n        '''\n        Write a python function to find the column values of a number and return a list of possible numbers.\n        '''\n        possibilities=[]\n        (row,column)=row_and_column_values(n)\n        for i in range(1,10):\n            if(grid[row][column]==0):\n                possibilities.append(i)\n        return possibilities\n    def grid_possibilities(n):\n        '''\n        Write a python function to find the grid values of a number and return a list of possible numbers.\n        '''\n        possibilities=[]\n        (row,column)=row_and_column_values(n)\n        for i in range(1,10):\n            if(grid[row][column]==0):\n                possibilities.append(i)\n        return possibilities\n    def possible_numbers(n):\n        '''\n        Write a python function to find all possible numbers in the same row, column, or grid that a number can be placed in.\n        '''\n        possibilities=[]\n        (row,column)=row_and_column_values(n)\n        possibilities+=row_possibilities(n)\n        possibilities+=column_possibilities(n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    i = 1\n    while i*2 <= n:\n        i *= 2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    while (1<<p) <= n:\n        p += 1\n    return p-1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    import math\n    n=int(n)\n    highest_power=0\n    for i in range(n,0,-1):\n        if math.log(i,2)<=1:\n            highest_power=i\n            break\n    return highest_power\ndef binary_search(n): \n    '''\n    Write a python function to find the index i where the list A is strictly increasing, strictly decreasing, or neither, to\n    reach n (element at index i is equal to n).\n    '''\n    n=int(n)\n    A=[1,2,3,4,5,6,7,8,9,10]\n    if n<=A[0]:\n        return 0\n    elif n>A[-1]:\n        return len(A)-1\n    else:\n        low=0\n        high=len(A)-1\n        mid=0\n        while low<=high:\n            mid=(high+low)/2\n            if n<=A[mid]:\n                high=mid-1\n            elif n>A[mid]:\n                low=mid+1\n        return mid\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: return 2\n    if n == 1: return 1\n    if n == 2: return 3\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = [2, 1]\n        for i in range(2, n):\n            lucas.append(lucas[-1] + lucas[-2])\n        return lucas[-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_number_1 = 2\n    lucas_number_2 = 1\n    index = 1\n    while index < n:\n        lucas_number_1, lucas_number_2 = lucas_number_2, lucas_number_1 + lucas_number_2\n        index += 1\n    return lucas_number_1\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_list = [1,2]\n    for i in range(2,n):\n        lucas_list.append(lucas_list[i-1] + lucas_list[i-2])\n    return lucas_list[n-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return ( (((1 + (5**0.5))**n) - ((1 - (5**0.5))**n)) / (2**0.5) )\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_numbers = [2, 1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    s = [1, 2]\n    while len(s) < n:\n        s.append(s[-2] + s[-1])\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    l = len(list_)\n    for i in range(l):\n        list_[i] = list_[i] % string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = map(str, list_)\n    format_ = string.format(*list_)\n    return format_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index in range(len(list_)):\n        list_[index] += string\n    return list_\n    \ndef add_string_at_index(list_, string, index):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_[index] += string\n    return list_\n    \ndef add_string_after_pattern(list_, pattern, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index in range(len(list_)):\n        if list_[index].startswith(pattern):\n            list_[index] += string\n    return list_\n    \ndef add_string_after_pattern_in_list(list_, pattern, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index in range(len(list_)):\n        for index2 in range(len(list_[index])):\n            if list_[index][index2:].startswith(pattern):\n                list_[index] = list_[index][:index2] + string + list_[index][index2:]\n                break\n    return list_\n    \ndef add_string_after_pattern_in_list2(list_, pattern, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index in range(len(list_)):\n        for index2 in range(len(list_[index])):\n            if list_[index][index2:].startswith(pattern):\n                list_[index] = list_[index][:index2] + string + list_[index][index2:]\n                break\n    return list_\n    \ndef concatenate_list_of_strings(list_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_of_strings = []\n    for index in range(len(list_)):\n        list_of_strings.append(list_[index])\n    return list_of_strings\n    \ndef concatenate_list_of_strings_using_join(list_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return \"\".join(list_)\n    \ndef format_list(list_, pattern, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_of_strings = []\n    for index in range(len(list_)):\n        list_of_strings.append(list_[index].replace(pattern, string))\n    return list_of_strings\n    \ndef split_string_at_character(string, character):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = []\n    for index in range(len(string)):\n        if string[index] == character:\n            list_.append(string[:index])\n            string = string[index+1:]\n    list_.append(string)\n    return list_\n    \ndef split_string_at_character_in_list(list_, character):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_of_strings = []\n    for index in range(len(list_)):\n        list_of_strings.append(list_[index].split(character))\n    return list_of_strings\n    \ndef split_string_at_character_in_list2(list_, character):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_of_strings = []\n    for index in range(len(list_)):\n        list_of_strings.append([])\n        for index2 in range(len(list_[index])):\n            if list_[index][index2] == character:\n                list_of_strings[-1].append(list_[index][:index2])\n                list_of_strings[-1].append(list_[index][index2+1:])\n    return list_of_strings\n    \ndef format_list_of_strings(list_, pattern, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_of_strings = []\n    for index in range(len(list_)):\n        list_of_strings.append(list_[index].replace(pattern, string))\n    return list_of_strings\n    \ndef replace_string_at_index(list_, index, pattern, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_[index] = list_[index].replace(pattern, string)\n    return list_\n    \ndef replace_string_at_index_in_list(list_, index, pattern, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_[index] = list_[index].replace(pattern, string)\n    return list_\n    \ndef replace_string_at_index_in_list2(list_, index, pattern, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_[index] = list_[index].replace(pattern, string)\n    return list_\n    \ndef replace_string_at_index_in_list3(list_, index, pattern, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index2 in range(len(list_[index])):\n        if list_[index][index2:].startswith(pattern):\n            list_[index] = list_[index][:index2] + string + list_[index][index2:]\n            break\n    return list_\n    \ndef replace_string_at_index_in_list4(list_, index, pattern, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index2 in range(len(list_[index])):\n        if list_[index][index2:].startswith(pattern):\n            list_[index] = list_[index][:index2] + string + list_[index][index2:]\n            break\n    return list_\n    \ndef replace_string_at_index_in_list5(list_, index, pattern, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index2 in range(len(list_[index])):\n        if list_[index][index2:].startswith(pattern):\n            list_[index] = list_[index][:index2] + string + list_[index][index2:]\n            break\n    return list_\n    \ndef replace_string_after_pattern(list_, pattern, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index in range(len(list_)):\n        if list_[index].startswith(pattern):\n            list_[index] += string\n    return list_\n    \ndef replace_string_after_pattern_in_list(list_, pattern, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index in range(len(list_)):\n        for index2 in range(len(list_[index])):\n            if list_[index][index2:].startswith(pattern):\n                list_[index] = list_[index][:index2] + string + list_[index][index2:]\n                break\n    return list_\n    \ndef replace_string_after_pattern_in_list2(list_, pattern, string):\n    '''\n    Writ"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = ['a', 'b', 'c']\n    print(string.join(list_))\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    lst = []\n    for elem in list_:\n        lst.append(string % elem)\n    return lst\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        list_[list_.index(element)] = string % element\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string % item)\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if len(string) == 0:\n        return\n    list_ = ['{:s}'.format(i) for i in list_]\n    \n    list_ = [i.format(string) for i in list_]\n    \n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list(list_)\n    newlist = []\n    for elem in list_:\n        newlist.append(elem.format(string))\n    return newlist\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    #return list(map(lambda x: {l2[i]: l1[x] for i, x in enumerate(l2)}, l3))\n    return [{l2[i]: l1[x] for i, x in enumerate(l2)} for l1 in l3]\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2) or len(l2)!= len(l3):\n        return \"Invalid Input\"\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]:{l2[i]:l3[i]} for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l = zip(l1, l2, l3)\n    return {k: dict(zip(l1, l2)) for k, l in l}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    dict_l = []\n    for i in range(len(l1)):\n        dict_l.append({l1[i]: l2[i], l3[i]: l3[i]})\n    return dict_l\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    for i in range(len(l1)):\n        if not l1[i] in res:\n            res[l1[i]] = {}\n        if not l2[i] in res[l1[i]]:\n            res[l1[i]][l2[i]] = l3[i]\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: l3[i]} for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # if len(l1) > 0:\n    #     return {l1[0]: convert_list_dictionary(l1[1:], l2, l3)}\n    # else:\n    #     return {l2[0]: convert_list_dictionary(l1, l2[1:], l3)}\n    #     # return convert_list_dictionary(l1, l2[1:], l3)\n    return {l3[0]: convert_list_dictionary(l1, l2, l3[1:])}\n    # return convert_list_dictionary(l1, l2, l3[1:])\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i, j, k in zip(l1, l2, l3):\n        d[i] = {j: k}\n    return d\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case\n    if n == 1:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    else:\n        return 11\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(n)\n    if n == 1:\n        return n\n    else:\n        if n % 2 == 0:\n            return max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n)\n        else:\n            return max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n - 1), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # base case\n    if n == 1:\n        return 1\n    \n    # dp array\n    dp = [0] * (n+1)\n    \n    # initialize dp array with base case values\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 4\n    \n    for i in range(4, n+1):\n        dp[i] = max(dp[i-1], dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5])\n    \n    # return max sum\n    return dp[n]\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    ans = 0\n    for i in range(2, int(n/2) + 1):\n        ans = max(ans, i*(i+1) + get_max_sum(n-i))\n    return ans\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    elif n % 2 == 0:\n        return (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n    else:\n        return (get_max_sum((n/2) + 1) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    elif (n % 2 == 0):\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return max(get_max_sum((n+1)/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + 1\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if not input_list:\n        return None\n    else:\n        max_length = len(input_list[0])\n        for i in range(1, len(input_list)):\n            if max_length < len(input_list[i]):\n                max_length = len(input_list[i])\n        return max_length\n    \ndef merge_sort(input_list):\n    '''\n    Write a function to sort a list using the merge sort algorithm.\n    '''\n    if len(input_list) > 1:\n        mid = len(input_list) / 2\n        left = input_list[:mid]\n        right = input_list[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        \n        left_pointer = 0\n        right_pointer = 0\n        input_pointer = 0\n        while left_pointer < len(left) and right_pointer < len(right):\n            if left[left_pointer] < right[right_pointer]:\n                input_list[input_pointer] = left[left_pointer]\n                left_pointer += 1\n            else:\n                input_list[input_pointer] = right[right_pointer]\n                right_pointer += 1\n            input_pointer += 1\n        \n        while left_pointer < len(left):\n            input_list[input_pointer] = left[left_pointer]\n            left_pointer += 1\n            input_pointer += 1\n        \n        while right_pointer < len(right):\n            input_list[input_pointer] = right[right_pointer]\n            right_pointer += 1\n            input_pointer += 1\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_len_list = []\n    for list in input_list:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_len_list = list\n    return max_len_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = [i]\n        elif len(i) == max_len:\n            max_list.append(i)\n    return max_list\n    \ndef max_string_list(input_list):\n    '''\n    Write a function to find the list with maximum string.\n    '''\n    max_str = ''\n    max_list = []\n    for i in input_list:\n        if len(max_str) < len(i):\n            max_str = i\n            max_list = [i]\n        elif len(max_str) == len(i):\n            max_list.append(i)\n    return max_list\n    \ndef first_n_smallest(input_list, n):\n    '''\n    Write a function to find the first n smallest integers in the list.\n    '''\n    if n == 0:\n        return []\n    if n > len(input_list):\n        return input_list\n    elif n < 0:\n        return []\n    else:\n        return sorted(input_list)[:n]\n        \ndef last_n_biggest(input_list, n):\n    '''\n    Write a function to find the last n biggest integers in the list.\n    '''\n    if n == 0:\n        return []\n    if n > len(input_list):\n        return input_list\n    elif n < 0:\n        return []\n    else:\n        return sorted(input_list)[-n:]\n        \ndef select_a_string(input_str):\n    '''\n    Write a function to select a string from a list of strings.\n    '''\n    select_str = input_str[0]\n    for i in input_str[1:]:\n        if i > select_str:\n            select_str = i\n    return select_str\n    \ndef count_same_string(input_str):\n    '''\n    Write a function to count the number of same characters in the string.\n    '''\n    count = 0\n    for i in range(len(input_str)):\n        if input_str[i] == input_str[i+1]:\n            count += 1\n    return count\n    \ndef max_string_count(input_list):\n    '''\n    Write a function to find the list with maximum string count.\n    '''\n    max_str = ''\n    max_count = 0\n    for i in input_list:\n        if len(i) > len(max_str):\n            max_str = i\n            max_count = count_same_string(i)\n        elif len(i) == len(max_str):\n            if count_same_string(i) > max_count:\n                max_str = i\n                max_count = count_same_string(i)\n    return [max_str, max_count]\n    \ndef reverse_string(input_str):\n    '''\n    Write a function to reverse the string.\n    '''\n    new_str = ''\n    for i in range(len(input_str)-1, -1, -1):\n        new_str += input_str[i]\n    return new_str\n    \ndef palindrome_test(input_str):\n    '''\n    Write a function to test whether a string is a palindrome or not.\n    '''\n    input_str = input_str.lower()\n    for i in range(len(input_str)):\n        if input_str[i]!= input_str[len(input_str)-1-i]:\n            return False\n    return True\n    \ndef find_upper(input_str):\n    '''\n    Write a function to find the string with upper case letters.\n    '''\n    for i in input_str:\n        if i.isupper():\n            return i\n    return ''\n    \ndef find_lower(input_str):\n    '''\n    Write a function to find the string with lower case letters.\n    '''\n    for i in input_str:\n        if i.islower():\n            return i\n    return ''\n    \ndef find_digit(input_str):\n    '''\n    Write a function to find the string with digit.\n    '''\n    for i in input_str:\n        if i.isdigit():\n            return i\n    return ''\n    \ndef find_alphabet(input_str):\n    '''\n    Write a function to find the string with alphabet.\n    '''\n    for i in input_str:\n        if i.isalpha():\n            return i\n    return ''\n    \ndef find_space(input_str):\n    '''\n    Write a function to find the string with space.\n    '''\n    for i in input_str:\n        if i.isspace():\n            return i\n    return ''\n    \ndef find_alphanumeric(input_str):\n    '''\n    Write a function to find the string with alphabet and number.\n    '''\n    for i in input_str:\n        if i.isalnum():\n            return i\n    return ''\n    \ndef find_alphanumeric_space(input_str):\n    '''\n    Write a function to find the string with alphabet, number and space.\n    '''\n    for i in input_str:\n        if i.isalnum() or i.isspace():\n            return i\n    return ''\n    \ndef find_number_string(input_str):\n    '''\n    Write a function to find the string with number.\n    '''\n    for i in input_str:\n        if i.isdigit():\n            return i\n    return ''\n    \ndef find_number_string_space(input_str):\n    '''\n    Write a function to find the string with number and space.\n    '''\n    for i in input_str:\n        if i.isdigit() or i.isspace():\n            return i\n    return ''\n    \ndef find_number_string_space_alphabet(input_str):\n    '''\n    Write a function to find the string with number, space and alphabet.\n    '''\n    for i in input_str:\n        if i.isdigit() or i.isalpha():\n            return i\n    return ''\n    \ndef find_number_string_space_alphanumeric(input_str):\n    '''\n    Write a function to find the string with number, space, alphabet and number.\n    '''\n    for i in input_str:\n        if i.isdigit() or i.isalpha() or i.isspace():\n            return i\n    return ''\n    \ndef find_uppercase_string(input_str):\n    '''\n    Write a function to find the string with uppercase letters.\n    '''\n    for i in input_str:\n        if i.isupper():\n            return i\n    return ''\n    \ndef find_lowercase_string(input_str):\n    '''\n    Write a function to find the string with lowercase letters.\n    '''\n    for i in input_str:\n        if i.islower():\n            return i\n    return ''\n    \ndef find_capitalize_string(input_str):\n    '''\n    Write a function to find the string with uppercase letters and lowercase letters.\n    '''\n    for i in input_str:\n        if i.isupper() or i.islower():\n            return i\n    return ''\n    \ndef is_palindrome(input_str):\n    '''\n    Write a function to test whether a string is palindrome.\n    '''\n    input_str = input_str.lower()\n    for i in range(len(input_str)):\n        if input_str[i]!= input_str[len(input_str)-1-i]:\n            return False\n    return True\n    \ndef is_abecedarian(input_str):\n    '''\n    Write a function to test whether a string is abecedarian.\n    '''\n    for i in range(len(input_str)-1):\n        if input_str[i] > input_str[i+1]:\n            return False\n    return True\n    \ndef is_palindrome_permutation(input_str):\n    '''\n    Write a function to test whether a string is palindrom"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = [input_list[0]]\n    for i in range(1, len(input_list)):\n        if max_len < len(input_list[i]):\n            max_len = len(input_list[i])\n            max_list = [input_list[i]]\n        elif max_len == len(input_list[i]):\n            max_list.append(input_list[i])\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    max_length = 0\n    max_length_list = []\n    \n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_length_list = input_list[i]\n    \n    print(max_length_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    result = input_list[0]\n    for i in input_list:\n        if max_length < len(i):\n            max_length = len(i)\n            result = i\n    return result\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    result = input_list[0]\n    for i in range(1,len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            result = input_list[i]\n    return result\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # initialize an empty set\n    s = set()\n    # traverse in the string\n    for x in test_tup:\n        # check if exists in set or not\n        if x in s:\n            print \"Test tuple\", test_tup, \"contains duplicate\"\n            return False\n        # add to set\n        s.add(x)\n    print \"Test tuple\", test_tup, \"does not contain duplicates\"\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    list1 = [x for x in test_tup]\n    set1 = set(list1)\n    if len(list1) == len(set1):\n        return True\n    else:\n        return False\n    \nif __name__ == '__main__':\n    test_tup = (1,2,3,4,5,6,7,8,9,10)\n    print(check_distinct(test_tup))\n    # Tru"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup_list = list(test_tup)\n    tup_list.sort()\n    if len(tup_list) == len(set(tup_list)):\n        return True\n    return False\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    characters = {}\n    first_non_repeating_char = None\n    for c in str1:\n        if c in characters:\n            characters[c] += 1\n        else:\n            characters[c] = 1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # for i in str1:\n    #     count[i] = count.get(i, 0) + 1\n    # for i in str1:\n    #     if count[i] == 1:\n    #         return i\n    # return None\n    count = {}\n    for i in str1:\n        count[i] = count.get(i, 0) + 1\n    for i in str1:\n        if count[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        count = 0\n        for j in range(len(str1)):\n            if i!= j and str1[j] == str1[i]:\n                count += 1\n        if count == 1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    new_str = ''\n    for i in str1:\n        if str1.count(i) == 1:\n            new_str += i\n    if new_str == '':\n        return -1\n    return new_str\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for ch in str1:\n        if str1.count(ch) == 1:\n            return ch\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return None\n    letters = {}\n    for l in str1:\n        if l not in letters:\n            letters[l] = 0\n        letters[l] += 1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    l = len(str1)\n    c = 0\n    for i in xrange(l):\n        flag = 1\n        for j in xrange(i+1,l):\n            if str1[i] == str1[j]:\n                flag = 0\n                break\n        if flag == 1:\n            return str1[i]\n            break\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for c in str1:\n        if str1.find(c, 1) == -1:\n            return c\n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex,string)!= None\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string): \n        return True \n    else: \n        return False \ndef test_check_char(): \n    assert check_char('abc') == True \n    assert check_char('def') == False \n    assert check_char('.abc') == False \n    assert check_char('a.bc') == True \n    assert check_char('abc') == True \n    assert check_char('abcdef') == True \n    assert check_char('') == False \n    assert check_char('abcd') == False \n    assert check_char('abcdef') == False \n    assert check_char('abcd.ef') == False \n    assert check_char('abcd.e') == True \n    assert check_char('abcde') == True \n    assert check_char('abcdefe') == True \n    assert check_char('abcdefa') == False \n    assert check_char('abcdef') == True \n    assert check_char('abcdef') == True \ndef test_check_char2(): \n    assert check_char('a') == True \n    assert check_char('b') == True \n    assert check_char('c') == True \n    assert check_char('d') == True \n    assert check_char('e') == True \n    assert check_char('f') == True \n    assert check_char('g') == True \n    assert check_char('h') == True \n    assert check_char('i') == True \n    assert check_char('j') == True \n    assert check_char('k') == True \n    assert check_char('l') == True \n    assert check_char('m') == True \n    assert check_char('n') == True \n    assert check_char('o') == True \n    assert check_char('p') == True \n    assert check_char('q') == True \n    assert check_char('r') == True \n    assert check_char('s') == True \n    assert check_char('t') == True \n    assert check_char('u') == True \n    assert check_char('v') == True \n    assert check_char('w') == True \n    assert check_char('x') == True \n    assert check_char('y') == True \n    assert check_char('z') == True \n    assert check_char('A') == True \n    assert check_char('B') == True \n    assert check_char('C') == True \n    assert check_char('D') == True \n    assert check_char('E') == True \n    assert check_char('F') == True \n    assert check_char('G') == True \n    assert check_char('H') == True \n    assert check_char('I') == True \n    assert check_char('J') == True \n    assert check_char('K') == True \n    assert check_char('L') == True \n    assert check_char('M') == True \n    assert check_char('N') == True \n    assert check_char('O') == True \n    assert check_char('P') == True \n    assert check_char('Q') == True \n    assert check_char('R') == True \n    assert check_char('S') == True \n    assert check_char('T') == True \n    assert check_char('U') == True \n    assert check_char('V') == True \n    assert check_char('W') == True \n    assert check_char('X') == True \n    assert check_char('Y') == True \n    assert check_char('Z') == True \n    assert check_char('0') == False \n    assert check_char('1') == False \n    assert check_char('2') == False \n    assert check_char('3') == False \n    assert check_char('4') == False \n    assert check_char('5') == False \n    assert check_char('6') == False \n    assert check_char('7') == False \n    assert check_char('8') == False \n    assert check_char('9') == False \ndef test_check_char3(): \n    assert check_char('a') == True \n    assert check_char('b') == True \n    assert check_char('c') == True \n    assert check_char('d') == True \n    assert check_char('e') == True \n    assert check_char('f') == True \n    assert check_char('g') == True \n    assert check_char('h') == True \n    assert check_char('i') == True \n    assert check_char('j') == True \n    assert check_char('k') == True \n    assert check_char('l') == True \n    assert check_char('m') == True \n    assert check_char('n') == True \n    assert check_char('o') == True \n    assert check_char('p') == True \n    assert check_char('q') == True \n    assert check_char('r') == True \n    assert check_char('s') == True \n    assert check_char('t') == True \n    assert check_char('u') == True \n    assert check_char('v') == True \n    assert check_char('w') == True \n    assert check_char('x') == True \n    assert check_char('y') == True \n    assert check_char('z') == True \n    assert check_char('A') == True \n    assert check_char('B') == True \n    assert check_char('C') == True \n    assert check_char('D') == True \n    assert check_char('E') == True \n    assert check_char('F') == True \n    assert check_char('G') == True \n    assert check_char('H') == True \n    assert check_char('I') == True \n    assert check_char('J') == True \n    assert check_char('K') == True \n    assert check_char('L') == True \n    assert check_char('M') == True \n    assert check_char('N') == True \n    assert check_char('O') == True \n    assert check_char('P') == True \n    assert check_char('Q') == True \n    assert check_char('R') == True \n    assert check_char('S') == True \n    assert check_char('T') == True \n    assert check_char('U') == True \n    assert check_char('V') == True \n    assert check_char('W') == True \n    assert check_char('X') == True \n    assert check_char('Y') == True \n    assert check_char('Z') == True \n    assert check_char('0') == True \n    assert check_char('1') == True \n    assert check_char('2') == True \n    assert check_char('3') == True \n    assert check_char('4') == True \n    assert check_char('5') == True \n    assert check_char('6') == True \n    assert check_char('7') == True \n    assert check_char('8') == True \n    assert check_char('9') == True \ndef test_check_char4(): \n    assert check_char('a') == True \n    assert check_char('b') == True \n    assert check_char('c') == True \n    assert check_char('d') == True \n    assert check_char('e') == True \n    assert check_char('f') == True \n    assert check_char('g') == True \n    assert check_char('h') == True \n    assert check_char('i') == True \n    assert check_char('j') == True \n    assert check_char('k') == True \n    assert check_char('l') == True \n    assert check_char('m') == True \n    assert check_char('n') == True \n    assert check_char('o') == True \n    assert check_char('p') == True \n    assert check_char('q') == True \n    assert check_char('r') == Tru"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string): \n        print('True')\n    else: \n        print('False')\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string) is not None:\n        return True\n    else:\n        return False\nprint(check_char('ab'))\nprint(check_char('abc'))\nprint(check_char('abcdef'))\nprint(check_char('abcdefg'))\nprint(check_char('abcdefgh'))\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    s = re.match(regex,string)\n    if s: \n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return \"true\"\n    else:\n        return \"false\"\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        print \"Given string is a valid palindrome\"\n    else:\n        print \"Given string is not a valid palindrome\"\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a>b) and (a>c):\n        median = a\n    elif (b>a) and (b>c):\n        median = b\n    else:\n        median = c\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #sorting in ascending order\n    nums=[a,b,c]\n    nums.sort()\n    if a==b==c:\n        return a\n    elif a==b or a==c or b==c:\n        return nums[1]\n    else:\n        return nums[2]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    l = [a,b,c]\n    l.sort()\n    if a == l[0] and b == l[1] and c == l[2]:\n        return None\n    elif a == l[0]:\n        return b\n    elif b == l[0]:\n        return a\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    else:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return sorted([a,b,c])[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    elif a>b:\n        if b>c:\n            return c\n        elif a<c:\n            return a\n        else:\n            return b\n    else:\n        return a\ndef new_list(a):\n    '''\n    Take a list and return a new list with unique values\n    '''\n    b = []\n    for i in a:\n        if i not in b:\n            b.append(i)\n    return b\ndef all_the_same(a):\n    '''\n    Write a function that takes a list and returns True if all the elements\n    are the same and False if not.\n    '''\n    if len(a) == 1:\n        return True\n    else:\n        if a[0] == a[1]:\n            return all_the_same(a[1:])\n        else:\n            return False\ndef remove_duplicates(a):\n    '''\n    Write a function that takes a list and returns a new list that contains only\n    the first occurrence of each distinct element in the original list.\n    '''\n    b = []\n    for i in a:\n        if i not in b:\n            b.append(i)\n    return b\ndef largest(a,b):\n    '''\n    Write a function that takes two lists and returns the second list if the first\n    list is empty and the first list is not empty, otherwise, the first list should\n    be returned.\n    '''\n    if len(a) == 0:\n        return b\n    else:\n        return a\ndef check_item(a,b):\n    '''\n    Write a function that takes two lists, finds the element that appears in the\n    first list but not in the second list, and returns that element.\n    '''\n    for i in a:\n        if i in b:\n            a.remove(i)\n    return a\ndef remove_duplicates(a):\n    '''\n    Write a function that takes a list and returns a new list that contains\n    only the first occurrence of each distinct element in the original list.\n    '''\n    b = []\n    for i in a:\n        if i not in b:\n            b.append(i)\n    return b\ndef halvesies(a,b):\n    '''\n    Write a function that takes a list of ints and returns a new list with each\n    element's first half added to the end of the list and each element's second\n    half added to the beginning of the list. The function should not modify the\n    input list.\n    '''\n    b = [a[len(a)//2:], a[:len(a)//2]]\n    return b\ndef diff21(a):\n    '''\n    Write a function that takes an integer as input and returns the absolute\n    difference between the integer and 21.\n    '''\n    if a == 21:\n        return 0\n    else:\n        return abs(a-21)\ndef alphabetic_index(a):\n    '''\n    Write a function that takes a string as input and returns the index of the\n    first occurrence of the letter a in the string.\n    '''\n    b = 0\n    for i in a:\n        if i == 'a':\n            return b\n        else:\n            b += 1\ndef swap(a, b):\n    '''\n    Write a function that takes two integers and returns their sum. However, if\n    the sum is between 10 and 20, then the function should return 20.\n    '''\n    if a + b == 10 or a + b == 20:\n        return 20\n    else:\n        return a + b\ndef count_hi(a):\n    '''\n    Write a function that takes a string and returns the number of times that the\n    string \"hi\" appears in the string.\n    '''\n    b = 0\n    for i in a:\n        if i == 'hi':\n            b += 1\n    return b\ndef cat_dog(a):\n    '''\n    Write a function that takes a string and returns a string that is the same\n    length but has the first letter from the original string at the end and the\n    second letter at the beginning.\n    '''\n    b = ''\n    for i in range(len(a)//2):\n        b += a[i]\n    b += a[-1]\n    b += a[0]\n    return b\ndef every_other_letter(a):\n    '''\n    Write a function that takes a string and returns a string that has every other\n    character of the original string.\n    '''\n    b = ''\n    for i in range(0, len(a), 2):\n        b += a[i]\n    return b\ndef replace_letter(a):\n    '''\n    Write a function that replaces every letter in the input string with the letter\n    that comes next in the alphabet in the input string.\n    '''\n    b = ''\n    for i in a:\n        if i == 'z':\n            b += 'a'\n        else:\n            b += i\n    return b\ndef reverse_string(a):\n    '''\n    Write a function that takes a string as input and returns that string in\n    reverse order.\n    '''\n    return a[::-1]\ndef sort_sentence(a):\n    '''\n    Write a function that takes a string as input and returns the string sorted\n    in alphabetical order.\n    '''\n    return ''.join(sorted(a))\ndef poker_hand(a):\n    '''\n    Write a function that takes five strings as input and returns True if the\n    strings can be a valid poker hand and False otherwise. Each string represents\n    a card and the first letter represents its rank (2, 3, 4, 5, 6, 7, 8, 9, T, J,\n    Q, K, A) and the second string represents its suit (s, h, d, c).\n    '''\n    b = [a[0:2], a[2:4], a[4:6], a[6:8]]\n    c = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']\n    for i in b:\n        if i not in c:\n            return False\n    if b.count(b[0]) == len(b):\n        return False\n    return True\ndef sum13(a):\n    '''\n    Write a function that takes a list of integers and returns the sum of all the\n    numbers in the list that are between 1 and 13 inclusive.\n    '''\n    b = 0\n    for i in a:\n        if i <= 13 and i >= 1:\n            b += i\n    return b\ndef spy_game(a):\n    '''\n    Write a function that takes a list of integers and returns True if the first\n    and last integers of the list are one another and the list has more than\n    one integer. Otherwise, the function should return False.\n    '''\n    if len(a) > 1:\n        if a[0] == a[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef count_code(a):\n    '''\n    Write a function that takes a list of strings and counts the number of strings\n    in the list that have the character c in it.\n    '''\n    b = 0\n    for i in a:\n        if 'c' in i:\n            b += 1\n    return b\ndef sum_range(a, b):\n    '''\n    Write a function that takes two numbers as input and returns the sum of all the\n    numbers from the first number to the second number (both numbers included).\n    '''\n    return sum(range(a, b+1))\ndef capitalize(a):\n    '''\n    Write a function that takes a string as input and returns the string with\n    each word's first letter capitalized.\n    '''\n    b = ''\n    for i in a:\n        if i =='':\n            b +=''\n        else:\n            b += i.capitalize()\n    return b\ndef flip_case(a):\n    '''\n    Write a function that takes a string and returns the string with upper case\n    letters converted to lowercase and lower case letters converted to uppercase.\n    '''\n    b = ''\n    for i in "
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = 0\n    if a > b:\n        if a > c:\n            median = a\n        elif b > c:\n            median = b\n        else:\n            median = c\n    else:\n        if b > c:\n            median = b\n        elif c > a:\n            median = c\n        else:\n            median = a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return sort([a,b,c])[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a <= b:\n        if b <= c:\n            return b\n        elif a <= c:\n            return c\n        else:\n            return a\n    else:\n        if a <= c:\n            return a\n        elif b <= c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        result.append(sum([int(x) for x in str(num)]))\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def _sum_of_digits(nums):\n        '''\n        Returns the sum of digits of each element of a given list.\n        '''\n        sum_of_digits = 0\n        for num in nums:\n            sum_of_digits += sum(int(i) for i in str(num))\n        return sum_of_digits\n    return _sum_of_digits(nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return reduce(lambda x, y: x + y, map(lambda x: int(x), nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(str(n)[0]) for n in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for digit in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits = sum_of_digits + sum(map(int, str(num)))\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(x) for x in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum_of_digits(nums):\n        if nums==[]:\n            return 0\n        return nums%10 + sum_of_digits(nums//10)\n    return sum(list(map(sum_of_digits,nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(nums)))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tup = ()\n    for i in xrange(len(test_tup1)):\n        xor_tup += (test_tup1[i] ^ test_tup2[i],)\n    return xor_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(x)^int(y) for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    ret_tup = []\n    for i, j in zip(test_tup1, test_tup2):\n        ret_tup.append(i ^ j)\n    return ret_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([tup1[i]^tup2[i] for i in range(len(tup1))])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor_value = tuple((tup1[i] ^ tup2[i] for i in range(len(tup1))))\n    return bitwise_xor_value\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    xor_tup = ()\n    \n    for i in range(len(test_tup1)):\n        xor_tup += (test_tup1[i] ^ test_tup2[i],)\n    \n    return xor_tup\n    \n    \ndef bin(int_value):\n    '''\n    Write a function to convert an integer into a string of 0's and 1's.\n    '''\n    \n    str_bin = \"\"\n    \n    if int_value == 0:\n        return \"0\"\n    \n    while int_value > 1:\n        \n        if int_value % 2 == 0:\n            str_bin += \"0\"\n        else:\n            str_bin += \"1\"\n        \n        int_value = int_value / 2\n    \n    if int_value == 1:\n        str_bin += \"1\"\n    \n    str_bin = str_bin[::-1]\n    \n    return str_bin\n    \n    \ndef swap_bits(str_bit_seq, start_bit, end_bit):\n    '''\n    Write a function to swap two bits in a string of 0's and 1's.\n    '''\n    \n    bit_seq = list(str_bit_seq)\n    \n    if start_bit > end_bit:\n        raise ValueError(\"The start bit cannot be greater than the end bit.\")\n    \n    if start_bit == end_bit:\n        return bit_seq\n    \n    start_index = start_bit - 1\n    end_index = end_bit - 1\n    \n    bit_seq[start_index], bit_seq[end_index] = bit_seq[end_index], bit_seq[start_index]\n    \n    return ''.join(bit_seq)\n    \n    \ndef to_binary(num):\n    '''\n    Write a function to convert a non-negative integer into a string of 0's and 1's.\n    '''\n    \n    if num == 0:\n        return \"0\"\n    \n    bits = []\n    \n    while num > 0:\n        \n        if num % 2 == 0:\n            bits.append(\"0\")\n        else:\n            bits.append(\"1\")\n        \n        num = num / 2\n    \n    return ''.join(bits)\n    \n    \ndef count_ones(str_value):\n    '''\n    Write a function to count the number of 1's in a string of 0's and 1's.\n    '''\n    \n    num_ones = 0\n    \n    for bit in str_value:\n        \n        if bit == \"1\":\n            num_ones += 1\n            \n    return num_ones\n    \n    \ndef count_flips(str_value):\n    '''\n    Write a function to count the number of 0's and 1's in a string of 0's and 1's.\n    '''\n    \n    num_flips = 0\n    \n    for bit in str_value:\n        \n        if bit == \"0\":\n            num_flips += 1\n            \n    return num_flips\n    \n    \ndef get_substring(str_value, start_bit, end_bit):\n    '''\n    Write a function to get the substring of the given string between the start and end bit positions.\n    '''\n    \n    start_index = start_bit - 1\n    end_index = end_bit - 1\n    \n    return str_value[start_index:end_index]\n    \n    \ndef bitwise_and(str_seq1, str_seq2):\n    '''\n    Write a function to compute the bitwise AND operation on the given strings.\n    '''\n    \n    and_bit_seq = \"\"\n    \n    for bit1, bit2 in zip(str_seq1, str_seq2):\n        \n        if bit1 == bit2:\n            and_bit_seq += bit1\n        else:\n            and_bit_seq += \"0\"\n    \n    return and_bit_seq\n    \n    \ndef swap_and_count_flips(str_seq1, str_seq2):\n    '''\n    Write a function to compute the swap and the count of 0's and 1's in a string of 0's and 1's.\n    '''\n    \n    swap_flips = 0\n    \n    for bit1, bit2 in zip(str_seq1, str_seq2):\n        \n        if bit1!= bit2:\n            swap_flips += 1\n    \n    return swap_flips\n    \n    \ndef n_bit_addition(num1, num2, n):\n    '''\n    Write a function to compute the n-bit addition of the given integers.\n    '''\n    \n    if n == 1:\n        return num1 + num2\n    \n    addition_value = 0\n    \n    for i in range(n):\n        \n        temp_sum = num1 + num2\n        \n        if temp_sum > 1:\n            num1 = 1\n            num2 = temp_sum - 1\n        else:\n            num2 = 0\n    \n        addition_value += num1\n    \n    return addition_value\n    \n    \ndef n_bit_subtraction(num1, num2, n):\n    '''\n    Write a function to compute the n-bit subtraction of the given integers.\n    '''\n    \n    if n == 1:\n        return num1 - num2\n    \n    subtraction_value = 0\n    \n    for i in range(n):\n        \n        temp_sum = num1 - num2\n        \n        if temp_sum > 0:\n            num1 = temp_sum\n            num2 = 1\n        else:\n            num2 = 0\n    \n        subtraction_value += num1\n    \n    return subtraction_value\n    \n    \ndef number_to_binary(num, n):\n    '''\n    Write a function to convert a positive integer into a string of n 1's and 0's.\n    '''\n    \n    str_bin = \"\"\n    \n    if n == 0:\n        return \"0\"\n    \n    while num > 0:\n        \n        if num % 2 == 0:\n            str_bin += \"0\"\n        else:\n            str_bin += \"1\"\n        \n        num = num / 2\n    \n    while len(str_bin) < n:\n        \n        str_bin += \"0\"\n    \n    return str_bin\n    \n    \ndef binary_to_number(str_num):\n    '''\n    Write a function to convert a string of 0's and 1's into a positive integer.\n    '''\n    \n    num = 0\n    \n    for bit in str_num:\n        \n        if bit == \"0\":\n            num += 1\n    \n    return num\n    \n    \ndef power_of_two(num):\n    '''\n    Write a function to check if the given integer is a power of 2.\n    '''\n    \n    if num < 0:\n        raise ValueError(\"The number cannot be negative.\")\n    \n    if num == 0:\n        return True\n    \n    while num > 1:\n        \n        if num % 2 == 0:\n            num = num / 2\n        else:\n            return False\n    \n    if num == 1:\n        return True\n    \n    return False\n    \n    \ndef is_palindrome(num):\n    '''\n    Write a function to check if the given integer is a palindrome.\n    '''\n    \n    if num < 0:\n        raise ValueError(\"The number cannot be negative.\")\n    \n    num_str = str(num)\n    num_length = len(num_str)\n    \n    for i in range(num_length / 2):\n        \n        if num_str[i]!= num_str[num_length - i - 1]:\n            return False\n    \n    return True\n    \n    \ndef is_perfect_square(num):\n    '''\n    Write a function to check if the given integer is a perfect square.\n    '''\n    \n    if num < 0:\n        raise ValueError(\"The number cannot be negative.\")\n    \n    if num == 0:\n        return True\n    \n    i = 1\n    \n    while i * i < num:\n        \n        if i * i == num:\n            return True\n        \n        i += 1\n    \n    return False"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for element in test_list:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for key in test_list:\n        freq[key] = freq.get(key,0) + 1\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #return len(set(test_list))\n    if not isinstance(test_list, list):\n        return None\n    if not len(test_list):\n        return None\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    a = list(set(test_list))\n    return a\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict.keys():\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict.keys())\n    \n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return len(unique_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    def count_items(lst):\n        if not lst:\n            return 0\n        return len(lst) + count_items(lst[1:])\n    def extract_tuples(lst):\n        if not lst:\n            return []\n        return [lst[0]] + extract_tuples(lst[1:])\n    return count_items(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    total_tuple_list = []\n    for each_tuple in test_list:\n        if each_tuple in total_tuple_list:\n            pass\n        else:\n            total_tuple_list.append(each_tuple)\n    return len(total_tuple_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple):\n        return test_tup2\n    elif not isinstance(test_tup2, tuple):\n        return test_tup1\n    else:\n        return tuple(x + y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    assert isinstance(test_tup1, tuple)\n    assert isinstance(test_tup2, tuple)\n    assert len(test_tup1) == len(test_tup2)\n    return tuple(map(operator.add, test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = []\n    if len(test_tup1)!= len(test_tup2):\n        print 'Tuples must be of same length'\n    else:\n        for i in range(len(test_tup1)):\n            new_tup.append(test_tup1[i] + test_tup2[i])\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) == 1:\n        return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    else:\n        return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1], add_nested_tuples(test_tup1[2], test_tup2[2]))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i] + test_tup2[i])\n    return tuple(test_tup3)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda x,y:x+y, test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup1 = []\n    new_tup2 = []\n    for elem1 in test_tup1:\n        new_tup1.append(elem1)\n    for elem2 in test_tup2:\n        new_tup2.append(elem2)\n    new_tup = []\n    for elem1, elem2 in zip(new_tup1, new_tup2):\n        new_tup.append((elem1, elem2))\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    l1, l2 = len(test_tup1), len(test_tup2)\n    i = 0\n    while i<l1:\n        if i<l2:\n            addition = (test_tup1[i]+test_tup2[i])\n            test_tup1.remove(test_tup1[i])\n            test_tup2.remove(test_tup2[i])\n            test_tup1.insert(i, addition)\n            i+=1\n        elif i>l2:\n            test_tup1.remove(test_tup1[i])\n            i+=1\n        else:\n            return test_tup1 + test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] + test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef average(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return (a+b)/2\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n        \ndef mod(a,b):\n    '''\n    Write a python function to find the modulus of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return a%b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef parse_int(s):\n    '''\n    Write a python function to parse integers from a string.\n    '''\n    if s.isdigit():\n        return int(s)\n    else:\n        return None\ndef create_word_dict():\n    '''\n    Write a python function to create a python dictionary from a file.\n    '''\n    words = {}\n    f = open('words.txt','r')\n    for line in f.readlines():\n        if line[-1]=='\\n':\n            line = line[:-1]\n        if line.isalpha():\n            words[line] = line\n    return words\ndef fill_in_the_blanks(s):\n    '''\n    Write a python function to fill in the blanks.\n    '''\n    words = create_word_dict()\n    output = ''\n    for word in s:\n        if word in words:\n            output+=word\n        else:\n            output+=words[(minimum(output[-1],word))]\n    return output\ndef remove_duplicates(s):\n    '''\n    Write a python function to remove duplicates.\n    '''\n    return ''.join(sorted(set(s)))\ndef is_palindrome(s):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    return s == s[::-1]\ndef is_valid_email(s):\n    '''\n    Write a python function to check if a string is a valid email.\n    '''\n    return (s.count('@')==1 and s.count('.')>0)\ndef is_valid_url(s):\n    '''\n    Write a python function to check if a string is a valid url.\n    '''\n    return s.count('://')==1\ndef is_valid_phone(s):\n    '''\n    Write a python function to check if a string is a valid phone number.\n    '''\n    return s.count('-')==1 and s.count('')==0\ndef is_unique_name(s):\n    '''\n    Write a python function to check if a string is unique.\n    '''\n    return len(set(s)) == len(s)\ndef is_anagram(s1,s2):\n    '''\n    Write a python function to check if two strings are anagrams.\n    '''\n    return sorted(s1) == sorted(s2)\ndef replace_string(s,x,y):\n    '''\n    Write a python function to replace a string with another string.\n    '''\n    return s.replace(x,y)\ndef remove_string(s,x):\n    '''\n    Write a python function to remove a string.\n    '''\n    return s.replace(x,'')\ndef valid_phone(s):\n    '''\n    Write a python function to check if a string is a valid phone number.\n    '''\n    if is_valid_phone(s)==True:\n        return 'YES'\n    else:\n        return 'NO'\ndef valid_email(s):\n    '''\n    Write a python function to check if a string is a valid email.\n    '''\n    if is_valid_email(s)==True:\n        return 'YES'\n    else:\n        return 'NO'\ndef remove_punctuation(s):\n    '''\n    Write a python function to remove punctuation.\n    '''\n    output = ''\n    for letter in s:\n        if letter.isalpha():\n            output+=letter\n    return output\ndef count_words(s):\n    '''\n    Write a python function to count words in a string.\n    '''\n    return len(s.split())\ndef word_count(s):\n    '''\n    Write a python function to count the words in a string.\n    '''\n    words = s.split()\n    return len(words)\ndef word_length(s):\n    '''\n    Write a python function to count the length of words in a string.\n    '''\n    words = s.split()\n    return [len(word) for word in words]\ndef valid_word(s):\n    '''\n    Write a python function to check if a string is a valid word.\n    '''\n    return s.isalpha()\ndef valid_score(s):\n    '''\n    Write a python function to check if a score is valid.\n    '''\n    return s.isdigit() and s>=0 and s<=100\ndef score_to_letter(s):\n    '''\n    Write a python function to convert a score to letter grade.\n    '''\n    if s >= 90:\n        return 'A'\n    elif s >= 80:\n        return 'B'\n    elif s >= 70:\n        return 'C'\n    elif s >= 60:\n        return 'D'\n    else:\n        return 'F'\ndef letter_grade(s):\n    '''\n    Write a python function to convert a letter grade to a score.\n    '''\n    return chr(ord('A')+s-1)\ndef valid_ip(s):\n    '''\n    Write a python function to check if a string is a valid ip.\n    '''\n    return s.count('.')==3 and s[0]!='.' and s[-1]!='.'\ndef remove_punctuation(s):\n    '''\n    Write a python function to remove punctuation.\n    '''\n    output = ''\n    for letter in s:\n        if letter.isalpha():\n            output+=letter\n    return output\ndef words_to_sentence(s):\n    '''\n    Write a python function to convert a string into a sentence.\n    '''\n    s = s.split()\n    output = ''\n    for i in range(0,len(s)-1):\n        output+=s[i]+' '\n    return output+s[-1]\ndef add_punctuation(s):\n    '''\n    Write a python function to add punctuation to a string.\n    '''\n    output = ''\n    for letter in s:\n        output+=letter\n    return output\ndef remove_punctuation(s):\n    '''\n    Write a python function to remove punctuation from a string.\n    '''\n    output = ''\n    for letter in s:\n        if letter.isalpha():\n            output+=letter\n    return output\ndef valid_pwd(s):\n    '''\n    Write a python function to check if a password is valid.\n    '''\n    return len(s) >= 8 and len(s) <= 100\ndef valid_pw(s):\n    '''\n    Write a python function to check if a password is valid.\n    '''\n    return s.isdigit() or s.isalpha() or s.isalnum()\ndef valid_pw2(s):\n    '''\n    Write a python function to check if a password is valid.\n    '''\n    return s.isdigit() or s.isalpha() or s.isalnum() or s.islower() or s.isupper()\ndef valid_pw3(s):\n    '''\n    Write a python function to check if a password is valid.\n    '''\n    return s.isdigit() or s.isalpha() or s.isalnum() or s.islower() or s.isupper() or s.isalpha()\ndef valid_pw4(s):\n    '''\n    Write a python function to check if a password is valid.\n    '''\n    return s.isdigit() or s.isalpha() or s.isalnum() or s.islower() or s.isupper() or s.isalpha()\ndef valid_pw5(s):\n    '''\n    Write a python function to check if a password is valid.\n    '''\n    return s.isdigit() or s.isalpha() or s.isalnum() or s.islower() or s.isupper() or s.isalpha()\ndef valid_pw6(s):\n    '''\n    Write a python function to check if a password is valid.\n    '''\n    return s"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef mid(a,b):\n    '''\n    Write a python function to find the midpoint of two numbers.\n    '''\n    return (a+b)/2\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    for tup in tuplex: \n        if tup == tuple1: \n            return True \n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        print 'tuplex is equal to tuple1'\n    elif tuplex == None:\n        print 'tuplex is None'\n    else:\n        print 'tuplex is not equal to tuple1'\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    return False\n    \ndef check_tuplex2(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuple1)):\n        if tuplex == tuple1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element == tuple1:\n            return True\n    return False\ndef check_tuplex_index(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_2(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_3(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_4(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_5(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_6(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_7(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_8(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_9(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_10(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_11(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_12(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_13(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_14(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_15(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_16(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_17(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_18(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_19(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_20(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_21(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_22(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_23(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_24(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_25(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_26(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for index, element in enumerate(tuplex):\n        if element == tuple1:\n            return index\n    return -1\ndef check_tuplex_index_27(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exist"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuple1 = eval(tuple1)\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex:\n        if len(tuplex)==len(tuple1):\n            for i in range(len(tuplex)):\n                if tuplex[i]==tuple1[i]:\n                    print \"ok\"\n                else:\n                    print \"Not ok\"\n                    break\n        else:\n            print \"Not ok\"\n    else:\n        print \"No\"\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex.count(tuple1) > 0\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    if x%2==0:\n        return 'Parity even'\n    else:\n        return 'Parity odd'\n    "
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x & 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return True if (x & 1) == 1 else False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # Need to take modulo of the number \n    # since 2 is the only even number\n    if (x%2 == 0): \n        return 0 \n    else:\n        return 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    n = int(x)\n    if n & 1 == 0:\n        print(\"The parity is zero\")\n    else:\n        print(\"The parity is one\")\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = x & 0x55555555;\n    x = ((x >> 1) & 0x55555555) | ((x & 1) << 1);\n    x = ((x >> 2) & 0x55555555) | ((x & 2) << 2);\n    x = ((x >> 4) & 0x55555555) | ((x & 4) << 4);\n    x = ((x >> 8) & 0x55555555) | ((x & 8) << 8);\n    x = ((x >> 16) & 0x55555555) | ((x & 16) << 16);\n    x = ((x >> 32) & 0x55555555) | ((x & 32) << 32);\n    return x\n    \ndef find_Parity_2(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = x & 0x55555555;\n    x = (x & 0x33333333) + (x & 0xcccc0000) + (x & 0xaaad0000) + (x & 0x55555555)\n    return x\n    \ndef get_parity(data): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    num = 0\n    for i in range(len(data)):\n        num = (num << 8) | data[i]\n    return find_Parity(num)\n    \ndef get_parity_2(data):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    num = 0\n    for i in range(len(data)):\n        num = (num << 8) | data[i]\n    return find_Parity_2(num)\n    \ndef check_parity(data):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    num = 0\n    for i in range(len(data)):\n        num = (num << 8) | data[i]\n    return (find_Parity(num) == 0)\n    \ndef check_parity_2(data):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    num = 0\n    for i in range(len(data)):\n        num = (num << 8) | data[i]\n    return (find_Parity_2(num) == 0)\n    \ndef checksum(data):\n    '''\n    Write a python function to calculate the checksum for a given message.\n    '''\n    #print(data)\n    num = 0\n    for i in range(len(data)):\n        num = (num << 8) | data[i]\n    #print(num)\n    num = ~num\n    num = num & 0xffff\n    return num\n    \ndef calculate_checksum(data):\n    '''\n    Write a python function to calculate the checksum for a given message.\n    '''\n    #print(data)\n    num = 0\n    for i in range(len(data)):\n        num = (num << 8) | data[i]\n    #print(num)\n    num = ~num\n    num = num & 0xffff\n    num = num >> 8 | (num << 8 & 0xff00)\n    return num\n    \ndef verify_checksum(data):\n    '''\n    Write a python function to verify the checksum for a given message.\n    '''\n    #print(data)\n    num = 0\n    for i in range(len(data)):\n        num = (num << 8) | data[i]\n    #print(num)\n    num = ~num\n    num = num & 0xffff\n    return (num == 0)\n    \ndef verify_checksum_2(data):\n    '''\n    Write a python function to verify the checksum for a given message.\n    '''\n    #print(data)\n    num = 0\n    for i in range(len(data)):\n        num = (num << 8) | data[i]\n    #print(num)\n    num = ~num\n    num = num & 0xffff\n    num = num >> 8 | (num << 8 & 0xff00)\n    return (num == 0)\n    \ndef checksum_with_parity(data):\n    '''\n    Write a python function to calculate the checksum for a given message.\n    '''\n    num = 0\n    for i in range(len(data)):\n        num = (num << 8) | data[i]\n    num = ~num\n    num = num & 0xffff\n    parity = get_parity(num)\n    num = num >> 8 | (num << 8 & 0xff00)\n    return num, parity\n    \ndef calculate_checksum_with_parity(data):\n    '''\n    Write a python function to calculate the checksum for a given message.\n    '''\n    num = 0\n    for i in range(len(data)):\n        num = (num << 8) | data[i]\n    num = ~num\n    num = num & 0xffff\n    parity = get_parity(num)\n    num = num >> 8 | (num << 8 & 0xff00)\n    return num, parity\n    \ndef verify_checksum_with_parity(data, checksum, parity):\n    '''\n    Write a python function to verify the checksum for a given message.\n    '''\n    num = 0\n    for i in range(len(data)):\n        num = (num << 8) | data[i]\n    num = ~num\n    num = num & 0xffff\n    num, _ = calculate_checksum_with_parity(num)\n    return (num == checksum) and (get_parity(num) == parity)\n    \ndef verify_checksum_with_parity_2(data, checksum, parity):\n    '''\n    Write a python function to verify the checksum for a given message.\n    '''\n    num = 0\n    for i in range(len(data)):\n        num = (num << 8) | data[i]\n    num = ~num\n    num = num & 0xffff\n    num, _ = calculate_checksum_with_parity(num)\n    return (num == checksum) and (get_parity(num) == parity)\n    \ndef get_bit(num, bit):\n    return (num & (1 << bit))\n    \ndef set_bit(num, bit):\n    return num | (1 << bit)\n    \ndef clear_bit(num, bit):\n    return num & ~(1 << bit)\n    \ndef set_bit_at_offset(num, bit, offset):\n    return num | (1 << (bit + offset))\n    \ndef clear_bit_at_offset(num, bit, offset):\n    return num & ~(1 << (bit + offset))\n    \ndef set_byte(num, byte, bit):\n    return num | (byte << bit)\n    \ndef clear_byte(num, byte, bit):\n    return num & ~(byte << bit)\n    \ndef set_byte_at_offset(num, byte, bit, offset):\n    return num | (byte << (bit + offset))\n    \ndef clear_byte_at_offset(num, byte, bit, offset):\n    return num & ~(byte << (bit + offset))\n    \ndef is_bit_set(num, bit):\n    return get_bit(num, bit) == 1\n    \ndef is_bit_clear(num, bit):\n    return get_bit(num, bit) == 0\n    \ndef flip_bit(num, bit):\n    return num ^ (1 << bit)\n    \ndef flip_byte(num, byte, bit):\n    return num ^ (byte << bit)\n    \ndef flip_byte_at_offset(num, byte, bit, offset):\n    return num ^ (byte << (bit + offset))\n    \ndef flip_bits(num, start, count):\n    mask = ~0\n    for i in range(start, start + count):\n        mask |= (1 << i)\n    return num ^ mask\n    \ndef checksum_array(data):\n    '''\n    Write a python function to calculate the checksum for a given message.\n    '''\n    #print(data"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = abs(x)\n    if x == 0:\n        return 0\n    count = 0\n    while x:\n        count += 1\n        x &= x-1\n    if count % 2 == 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1) \n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = str(x)\n    return x[::-1].find('1')\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    output = []\n    for i in range(len(n)):\n        if n[i] > n[i-1]:\n            j = i-1\n            while j > 0 and n[j] < n[j-1]:\n                n[j], n[j-1] = n[j-1], n[j]\n                j -= 1\n            output.append(n[j])\n        else:\n            output.append(n[i])\n    return ''.join(str(i) for i in output)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if not isinstance(n, int):\n        return None\n    if n <= 0:\n        return 0\n    if n == 1:\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    assert n<=1000000\n    digits = map(int,list(str(n)))\n    \n    for i in xrange(len(digits)-1,0,-1):\n        for j in xrange(i-1,-1,-1):\n            if digits[j]>digits[i]:\n                digits[i],digits[j] = digits[j],digits[i]\n                break\n    return int(''.join(map(str,digits)))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def helper(n):\n        if n == 0:\n            return 0\n        digit_1 = n % 10\n        n /= 10\n        digit_2 = n % 10\n        if digit_1 > digit_2:\n            return (digit_1*10 + digit_2)*10 + helper(n)\n        else:\n            return (digit_1*10 + digit_2)*10 + n\n    return helper(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    for i in range(len(s)-1):\n        if int(s[i]) < int(s[i+1]):\n            for j in range(i+1, len(s)):\n                if int(s[j]) > int(s[i]):\n                    k = s[j]\n                    break\n            t = s[:i] + k + s[i+1:len(s)]\n            return int(t)\n    return -1\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = [int(x) for x in str(n)]\n    i = len(arr) - 1\n    while i > 0:\n        if arr[i] >= arr[i-1]:\n            i -= 1\n        else:\n            break\n    if i == 0:\n        return -1\n    else:\n        j = len(arr) - 1\n        while j > i:\n            if arr[j] >= arr[i-1]:\n                arr[j], arr[i-1] = arr[i-1], arr[j]\n                break\n            j -= 1\n        arr[i:] = sorted(arr[i:])\n        return int(''.join([str(x) for x in arr]))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    nums = list(str(n))\n    for i in range(len(nums)-1,0,-1):\n        if nums[i] > nums[i-1]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n            break\n    return int(''.join(nums))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    length = len(str_n)\n    if length == 1:\n        return 0\n    smallest = str_n[0]\n    largest = str_n[length - 1]\n    if int(smallest) > int(largest):\n        smallest, largest = largest, smallest\n    new_n = str_n[0]\n    for i in xrange(1, length):\n        if smallest > str_n[i]:\n            new_n += str_n[i]\n    new_n += str_n[length - 1]\n    new_n += str_n[1:length - 1]\n    return int(new_n)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == None:\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    if n < 10:\n        return n\n    n = list(str(n))\n    # reverse the list\n    n.reverse()\n    if n[0] < n[1]:\n        n[0], n[1] = n[1], n[0]\n        return int(''.join(n))\n    else:\n        return int(''.join(n))\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (-nums1[i], nums2[i]))\n    for i in range(k, len(nums1)):\n        if heap[0][1] > nums1[i]:\n            heapq.heapreplace(heap, (-nums1[i], nums2[i]))\n    return [heapq.heappop(heap)[1] for i in range(k)]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # sort the array\n    nums1.sort()\n    nums2.sort()\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2: return []\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    m = len(nums1)\n    n = len(nums2)\n    #for i in range(m):\n        #for j in range(n):\n            #if nums1[i] < nums2[j]:\n                #pairs.append((nums1[i], nums2[j]))\n    #return pairs\n    heap = []\n    for i in range(min(k,m)):\n        heapq.heappush(heap,(nums1[i],nums2[0]))\n    for i in range(min(k,m),m):\n        nums1[i] < nums2[0]\n        if len(heap) == k:\n            if heap[0][0] > nums2[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap,(nums1[i],nums2[0]))\n        else:\n            heapq.heappush(heap,(nums1[i],nums2[0]))\n    while len(heap)!= 0:\n        pairs.append(heapq.heappop(heap))\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k >= len(nums1) * len(nums2):\n        return []\n    pair = []\n    heap = []\n    for i in xrange(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i]+nums2[0], [nums1[i], nums2[0]]))\n    for i in xrange(len(nums1)):\n        while heap and (heap[0][0] < nums1[i]+nums2[0]):\n            pair.append(heapq.heappop(heap)[1])\n        if len(pair) == k:\n            return pair\n        if len(pair) < k:\n            heapq.heappush(heap, (nums1[i]+nums2[0], [nums1[i], nums2[0]]))\n    return pair\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n    first_list = []\n    for i in range(len(nums1)):\n        first_list.append([nums1[i],i])\n    second_list = []\n    for i in range(len(nums2)):\n        second_list.append([nums2[i],i])\n    first_list.sort()\n    second_list.sort()\n    i = 0\n    j = 0\n    pairs = []\n    while i < k and j < len(second_list):\n        if first_list[i][0] <= second_list[j][0]:\n            pairs.append([first_list[i][0], second_list[j][0]])\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return pairs\ndef k_smallest_pairs_v2(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n    first_list = []\n    for i in range(len(nums1)):\n        first_list.append([nums1[i],i])\n    second_list = []\n    for i in range(len(nums2)):\n        second_list.append([nums2[i],i])\n    first_list.sort()\n    second_list.sort()\n    i = 0\n    j = 0\n    pairs = []\n    while i < k and j < len(second_list):\n        if first_list[i][0] <= second_list[j][0]:\n            pairs.append([first_list[i][0], second_list[j][0]])\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return pairs\ndef k_smallest_pairs_v3(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs_v3(nums2, nums1, k)\n    first_list = []\n    for i in range(len(nums1)):\n        first_list.append([nums1[i],i])\n    second_list = []\n    for i in range(len(nums2)):\n        second_list.append([nums2[i],i])\n    first_list.sort()\n    second_list.sort()\n    i = 0\n    j = 0\n    pairs = []\n    while i < k and j < len(second_list):\n        if first_list[i][0] <= second_list[j][0]:\n            pairs.append([first_list[i][0], second_list[j][0]])\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return pairs\ndef k_smallest_pairs_v4(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs_v4(nums2, nums1, k)\n    first_list = []\n    for i in range(len(nums1)):\n        first_list.append([nums1[i],i])\n    second_list = []\n    for i in range(len(nums2)):\n        second_list.append([nums2[i],i])\n    first_list.sort()\n    second_list.sort()\n    i = 0\n    j = 0\n    pairs = []\n    while i < k and j < len(second_list):\n        if first_list[i][0] <= second_list[j][0]:\n            pairs.append([first_list[i][0], second_list[j][0]])\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return pairs\ndef k_smallest_pairs_v5(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs_v5(nums2, nums1, k)\n    first_list = []\n    for i in range(len(nums1)):\n        first_list.append([nums1[i],i])\n    second_list = []\n    for i in range(len(nums2)):\n        second_list.append([nums2[i],i])\n    first_list.sort()\n    second_list.sort()\n    i = 0\n    j = 0\n    pairs = []\n    while i < k and j < len(second_list):\n        if first_list[i][0] <= second_list[j][0]:\n            pairs.append([first_list[i][0], second_list[j][0]])\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return pairs\ndef k_smallest_pairs_v6(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs_v6(nums2, nums1, k)\n    first_list = []\n    for i in range(len(nums1)):\n        first_list.append([nums1[i],i])\n    second_list = []\n    for i in range(len(nums2)):\n        second_list.append([nums2[i],i])\n    first_list.sort()\n    second_list.sort()\n    i = 0\n    j = 0\n    pairs = []\n    while i < k and j < len(second_list):\n        if first_list[i][0] <= second_list[j][0]:\n            pairs.append([first_list[i][0], second_list[j][0]])\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return pairs\ndef k_smallest_pairs_v7(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs_v7(nums2, nums1, k)\n    first_list = []\n    for i in range(len(nums1)):\n        first_list.append([nums1[i],i])\n    second_list = []\n    for i in range(len(nums2)):\n        second_list.append([nums2[i],i])\n    first_list.sort()\n    second_list.sort()\n    i = 0\n    j = 0\n    pairs = []\n    while i < k and j < len(second_list):\n        if first_list[i][0] <= second_list[j][0]:\n            pairs.append([first_list[i][0], second_list[j][0]])\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return pairs\ndef k_smallest_pairs_v8(nums1, nums2, k):\n    '''\n    Write a function to find k number of smalles"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    if k == 0:\n        return res\n    if len(nums1) == 0:\n        return res\n    if len(nums2) == 0:\n        return res\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, [nums1[i] + nums2[0], i, 0])\n    while len(res) < k and heap:\n        res.append([nums1[heap[0][1]], nums2[heap[0][2]]])\n        heapq.heappop(heap)\n        if heap:\n            heapq.heappop(heap)\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if len(nums1) == 1:\n        return [(nums1[0], nums2[0])] if nums1[0] < nums2[0] else [(nums2[0], nums1[0])]\n    # convert to array of tuples (dist, num)\n    tups = [(nums1[i] + nums2[i], i) for i in range(len(nums1))]\n    # heapify the array\n    heapq.heapify(tups)\n    # pop first k elements\n    ret = []\n    for _ in range(k):\n        ret.append(tups[0])\n        tups[0] = heapq.heappop(tups)\n    return ret\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def helper(nums1, nums2, k):\n        result = []\n        m = len(nums1)\n        n = len(nums2)\n        if m == 0 or n == 0:\n            return result\n        for _ in xrange(k):\n            min1 = min(nums1)\n            min2 = min(nums2)\n            if min1 < min2:\n                nums1.remove(min1)\n                result.append((min1, min2))\n                continue\n            nums2.remove(min2)\n            result.append((min2, min1))\n        return result\n    return helper(nums1, nums2, k)\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    '''\n    Algorithm\n    1. Sort the first array and get sorted array of second array and add those two array together\n    2. Sort the resultant array and return kth smallest element\n    '''\n    # 1. Sort the first array and get sorted array of second array and add those two array together\n    res = []\n    def pair_add(s1, s2):\n        for i in range(len(s1)):\n            res.append([s1[i], s2[i]])\n    if len(nums1) > len(nums2):\n        pair_add(sorted(nums1), sorted(nums2))\n    else:\n        pair_add(sorted(nums2), sorted(nums1))\n    # 2. Sort the resultant array and return kth smallest element\n    res.sort(key = lambda x: x[0] + x[1])\n    return res[k - 1]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    from itertools import product\n    list2 = [item for tup in list1 for item in tup]\n    return min(product(*list2))\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    \n    min_product = list1[0]\n    for tup in list1:\n        if min_product[0] * tup[0] < min_product[0] * tup[1]:\n            min_product = tup\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # list1 = [((1,2), (3,4)), ((4,3), (5,6)), ((7,8), (9,10))]\n    # list1 = [((1,2), (3,4)), ((4,3), (5,6)), ((7,8), (9,10))]\n    list1 = [((1,2), (3,4)), ((4,3), (5,6)), ((7,8), (9,10)), ((1,3), (2,4)), ((4,5), (6,7)), ((5,6), (7,8))]\n    product_list = []\n    for i in list1:\n        product_list.append(i[0][0]*i[0][1]*i[1][0]*i[1][1])\n    min_product = min(product_list)\n    return (min_product, product_list.index(min_product), list1[product_list.index(min_product)])\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return list1\n    else:\n        min_tup = list1[0]\n        for tup in list1:\n            if tup[0] * tup[1] < min_tup[0] * min_tup[1]:\n                min_tup = tup\n        return min_tup\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]*list1[0][1]\n    for i in range(1,len(list1)):\n        current_product = list1[i][0]*list1[i][1]\n        if current_product < min_product:\n            min_product = current_product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # convert the list to list of tuples\n    list_of_tuples = [tuple(pair) for pair in list1]\n    # find the min product\n    product = min(list_of_tuples, key = lambda x:x[0]*x[1])\n    # return the min product\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = 1\n    for i in range(len(list1)):\n        product *= list1[i][0] * list1[i][1]\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    from operator import mul\n    result = list1[0]\n    for elem in list1[1:]:\n        result = min(result, mul(elem, result))\n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = [x for x in list1 if x[0]!= x[1]]\n    if not list2:\n        return 1\n    min_list = [x[0]*x[1] for x in list2]\n    return min(min_list)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    lst = []\n    min_product = 9999\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            lst.append((list1[i], list1[j]))\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # If list is empty\n    if len(listval) == 0:\n        return None\n    # If list is a singleton\n    if len(listval) == 1:\n        return listval[0]\n    # If list has just 2 elements\n    if len(listval) == 2:\n        if listval[0] <= listval[1]:\n            return listval[0]\n        else:\n            return listval[1]\n    # If list has more than 2 elements\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval, key=lambda x: x[1])[1]\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    assert listval!= [], 'List cannot be empty'\n    minval = listval[0]\n    for elem in listval:\n        if elem < minval:\n            minval = elem\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # use re.sub\n    if word == '':\n        return ''\n    # print(word)\n    words = word.split('_')\n    # print(words)\n    ret = ''\n    for i in range(len(words)):\n        if i == 0:\n            ret += words[i].capitalize()\n        elif i == len(words) - 1:\n            ret += words[i].lower()\n        else:\n            ret += words[i].lower() + words[i+1].capitalize()\n    # print(ret)\n    return ret\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word is None:\n        return None\n    # pattern = re.compile('_([a-z])')\n    # matches = pattern.finditer(word)\n    # for match in matches:\n    #     word = word[:match.start()] + match.group(1).upper() + word[match.end():]\n    # return word\n    return ''.join(word.split('_')[0:]) + ''.join(x.title() for x in word.split('_')[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_word = []\n    for i, s in enumerate(word):\n        if s.isupper():\n            if i == 0:\n                new_word.append('_')\n                new_word.append(s.lower())\n            else:\n                new_word.append(s.lower())\n        else:\n            new_word.append(s)\n    return ''.join(new_word)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() if i == 0 else x for i, x in enumerate(re.findall('[a-z]+',word)))\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    if word.lower()=='lower':\n        return 'lower'\n    if word.lower()=='upper':\n        return 'upper'\n    if word[0].isupper():\n        return word[0].lower() + word[1:].lower()\n    else:\n        return word[0].upper() + word[1:].lower()\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if not word:\n        return ''\n    if word.lower()=='lower':\n        return 'lower'\n    if word.lower()=='upper':\n        return 'upper'\n    if word[0].isupper():\n        return word[0].lower() + word[1:].lower()\n    else:\n        return word[0].upper() + word[1:].lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '' or word == None:\n        return word\n    elif word[0].isupper():\n        return word\n    else:\n        return re.sub(r'_([a-z])', lambda x:x.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word=='':\n        return word\n    else:\n        if word[0].isupper():\n            return word\n        else:\n            #return word[0].lower()+word[1:]\n            result=''\n            for i in range(len(word)):\n                if word[i]=='_':\n                    result=result+' '\n                else:\n                    result=result+word[i].lower()\n            return result\n    return ''\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'([a-z]+)([A-Z])', r'\\1_\\2', word)\n    return word.lower()\ndef get_full_name(name, first_name=None, last_name=None):\n    '''\n    Return the full name of the student. If first_name or last_name is not provided,\n    return full name of first_name and last_name separated by a space.\n    '''\n    if first_name is None:\n        first_name =''\n    if last_name is None:\n        last_name =''\n    return first_name + last_name\ndef sort_in_reverse(a):\n    '''\n    Sort the list a in reverse order.\n    '''\n    a.sort(reverse=True)\n    return a\ndef get_string_array(line):\n    '''\n    Return a list of strings parsed from the given line.\n    '''\n    if line is None:\n        return []\n    if not isinstance(line, list):\n        return [line]\n    return line\ndef get_string(line):\n    '''\n    Return the string parsed from the given line.\n    '''\n    if line is None:\n        return None\n    if isinstance(line, basestring):\n        return line\n    return line[0]\ndef get_array(line):\n    '''\n    Return the array parsed from the given line.\n    '''\n    if line is None:\n        return None\n    if isinstance(line, list):\n        return line\n    return [line]\ndef get_int_from_string(string):\n    '''\n    Return the int value parsed from the given string.\n    '''\n    if string is None:\n        return None\n    return int(string)\ndef get_double_from_string(string):\n    '''\n    Return the double value parsed from the given string.\n    '''\n    if string is None:\n        return None\n    return float(string)\ndef get_boolean_from_string(string):\n    '''\n    Return the boolean value parsed from the given string.\n    '''\n    if string is None:\n        return None\n    if isinstance(string, basestring):\n        if string.lower() == 'true':\n            return True\n        if string.lower() == 'false':\n            return False\n        return None\n    if isinstance(string, bool):\n        return string\n    return None\ndef get_date_from_string(string):\n    '''\n    Return the date value parsed from the given string.\n    '''\n    if string is None:\n        return None\n    if isinstance(string, basestring):\n        if len(string) == 10:\n            try:\n                return datetime.strptime(string, '%Y-%m-%d')\n            except ValueError:\n                return None\n        if len(string) == 19:\n            try:\n                return datetime.strptime(string, '%Y-%m-%d %H:%M:%S')\n            except ValueError:\n                return None\n        return None\n    return None\ndef get_year_month_from_string(string):\n    '''\n    Return the date value parsed from the given string.\n    '''\n    if string is None:\n        return None\n    if isinstance(string, basestring):\n        if len(string) == 6:\n            try:\n                return datetime.strptime(string, '%y%m')\n            except ValueError:\n                return None\n        if len(string) == 8:\n            try:\n                return datetime.strptime(string, '%Y%m')\n            except ValueError:\n                return None\n        return None\n    return None\ndef get_year_month_from_string(string):\n    '''\n    Return the date value parsed from the given string.\n    '''\n    if string is None:\n        return None\n    if isinstance(string, basestring):\n        if len(string) == 6:\n            try:\n                return datetime.strptime(string, '%y%m')\n            except ValueError:\n                return None\n        if len(string) == 8:\n            try:\n                return datetime.strptime(string, '%Y%m')\n            except ValueError:\n                return None\n        return None\n    return None\ndef get_year_month_day_from_string(string):\n    '''\n    Return the date value parsed from the given string.\n    '''\n    if string is None:\n        return None\n    if isinstance(string, basestring):\n        if len(string) == 8:\n            try:\n                return datetime.strptime(string, '%Y%m%d')\n            except ValueError:\n                return None\n        return None\n    return None\ndef get_year_month_day_hour_minute_from_string(string):\n    '''\n    Return the date value parsed from the given string.\n    '''\n    if string is None:\n        return None\n    if isinstance(string, basestring):\n        if len(string) == 8:\n            try:\n                return datetime.strptime(string, '%Y%m%d%H%M%S')\n            except ValueError:\n                return None\n        return None\n    return None\ndef get_datetime_from_string(string):\n    '''\n    Return the datetime value parsed from the given string.\n    '''\n    if string is None:\n        return None\n    if isinstance(string, basestring):\n        if len(string) == 19:\n            try:\n                return datetime.strptime(string, '%Y-%m-%d %H:%M:%S')\n            except ValueError:\n                return None\n        if len(string) == 10:\n            try:\n                return datetime.strptime(string, '%Y-%m-%d')\n            except ValueError:\n                return None\n        return None\n    return None\ndef get_datetime_from_string(string):\n    '''\n    Return the datetime value parsed from the given string.\n    '''\n    if string is None:\n        return None\n    if isinstance(string, basestring):\n        if len(string) == 19:\n            try:\n                return datetime.strptime(string, '%Y-%m-%d %H:%M:%S')\n            except ValueError:\n                return None\n        if len(string) == 10:\n            try:\n                return datetime.strptime(string, '%Y-%m-%d')\n            except ValueError:\n                return None\n        return None\n    return None\ndef get_date_from_datetime(datetime):\n    '''\n    Return the date value parsed from the given datetime.\n    '''\n    if datetime is None:\n        return None\n    if isinstance(datetime, datetime):\n        return datetime.date()\n    return None\ndef get_time_from_datetime(datetime):\n    '''\n    Return the time value parsed from the given datetime.\n    '''\n    if datetime is None:\n        return None\n    if isinstance(datetime, datetime):\n        return datetime.time()\n    return None\ndef get_duration_from_string(string):\n    '''\n    Return the duration value parsed from the given string.\n    '''\n    if string is None:\n        return None\n    if isinstance(string, basestring):\n        if len(string) == 11:\n            try:\n                return datetime.strptime(string, '%H:%M:%S')\n            except ValueError:\n                return None\n        if len(string) == 10:\n            try:\n                return datetime.strptime(string, '%H:%M')\n            except ValueError:\n                return None\n        if len(string) == 8:\n            try:\n                return datetime.strptime(string, '%H')\n            except ValueError:\n                return None\n        return None\n    return None\ndef get_duration_from_datetime(datetime):\n    '''\n    Return the duration value parsed from the given datetime.\n    '''\n    if datetime is None:\n        return None\n    if isinstance(datetime, datetime):\n        return datetime.hour * 6"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return word\n    else:\n        if word[0].isupper():\n            return word\n        else:\n            return word[0].lower() + camel_case(word[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    splitted_word = word.split('_')\n    return splitted_word[0]+''.join(splitted_word[1:]).capitalize()\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    word = re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()\n    return re.sub('_+', '_', word).lstrip('_')\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [item for item in l if item%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [x for x in l if x%2==0]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for item in l:\n        if item % 2 == 1:\n            l.remove(item)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = l[:-1]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i]%2!= 0:\n            l.pop(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [n for n in l if n%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #returns the nth element from a given list of tuples\n    return [item[n] for item in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i, (a,b) in enumerate(list1):\n        if i == n:\n            return b\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 0:\n        raise IndexError(\"n has to be greater than 0\")\n    else:\n        for i in range(n):\n            list1.pop()\n        return list1\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item[n] for item in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #If the nth element is at the end of the list, return the last element\n    if n > len(list1):\n        return list1[-1]\n    #Otherwise, start at the front, and traverse the list to find the nth element\n    else:\n        for i in range(0, len(list1)):\n            if i == n - 1:\n                return list1[i]\n            else:\n                continue\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return \"n is greater than the length of the list\"\n    return list1[n-1]\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #Return True if the set of elements in list1 is a subset of the set of elements in list2\n    return len(set(list1) & set(list2)) > 0\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) > len(list2):\n        return False\n    for element in list1:\n        if element in list2:\n            return True\n    return False\ndef consecutive(list1):\n    '''\n    Write a python function to check whether the sequence is consecutive or not.\n    '''\n    for index in range(0,len(list1)-1):\n        if list1[index+1] - list1[index]!= 1:\n            return False\n    return True\ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef palindrome(s):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return palindrome(s[1:-1])\n        else:\n            return False\ndef binary_to_decimal(n):\n    '''\n    Write a python function to convert a binary number to a decimal number.\n    '''\n    decimal = 0\n    n = n[::-1]\n    for index, bit in enumerate(n):\n        if bit == '1':\n            decimal += pow(2, index)\n    return decimal\ndef fizzbuzz(n):\n    '''\n    Write a python function to print the fizz buzz series upto n.\n    '''\n    fizzbuzz = []\n    for index in range(1, n+1):\n        if index % 3 == 0 and index % 5 == 0:\n            fizzbuzz.append('FizzBuzz')\n        elif index % 3 == 0:\n            fizzbuzz.append('Fizz')\n        elif index % 5 == 0:\n            fizzbuzz.append('Buzz')\n        else:\n            fizzbuzz.append(index)\n    return fizzbuzz\ndef reverse_string(s):\n    '''\n    Write a python function to print the reversed string.\n    '''\n    s = s[::-1]\n    return s\ndef gcd(a, b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n    else:\n        return is_prime(n-1)\ndef count_vowels(s):\n    '''\n    Write a python function to count the vowels in a string.\n    '''\n    counter = 0\n    for letter in s:\n        if letter in 'aeiouAEIOU':\n            counter += 1\n    return counter\ndef fizz_buzz_series(n):\n    '''\n    Write a python function to print the fizz buzz series upto n.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        if n % 3 == 0 and n % 5 == 0:\n            return 'FizzBuzz'\n        elif n % 3 == 0:\n            return 'Fizz'\n        elif n % 5 == 0:\n            return 'Buzz'\n        else:\n            return n\ndef sort_by_length(list_of_strings):\n    '''\n    Write a python function to sort a list of strings by length.\n    '''\n    return sorted(list_of_strings, key=len)\ndef sum_of_digits(n):\n    '''\n    Write a python function to calculate the sum of digits of a given number.\n    '''\n    digits = list(str(n))\n    sum_of_digits = 0\n    for digit in digits:\n        sum_of_digits += int(digit)\n    return sum_of_digits\ndef count_and_reverse(s):\n    '''\n    Write a python function to count the occurrence of a given character in a string and print the characters in descending order of occurrence.\n    '''\n    d = {}\n    for char in s:\n        if char in d.keys():\n            d[char] += 1\n        else:\n            d[char] = 1\n    new_d = {}\n    for k in d.keys():\n        new_d[d[k]] = k\n    for index in sorted(new_d.keys(), reverse=True):\n        print new_d[index],\n    return None\ndef last_chars(s):\n    '''\n    Write a python function to calculate the last characters of a string.\n    '''\n    last_chars = s[-1]\n    return last_chars\ndef binary_number(s):\n    '''\n    Write a python function to check whether the given number is a binary number or not.\n    '''\n    if s[0] == '0' and s[-1] == '0':\n        return False\n    return True\ndef get_median(list1):\n    '''\n    Write a python function to calculate the median of a given list of numbers.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        list1 = sorted(list1)\n        n = len(list1)\n        if n % 2 == 0:\n            return (list1[n/2] + list1[n/2 - 1])/2.0\n        else:\n            return list1[n/2]\ndef is_anagram(s1, s2):\n    '''\n    Write a python function to check whether the given strings are anagram or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    if s1 == s2:\n        return True\n    else:\n        return False\ndef is_pandigital(n, start=9, end=0):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    if len(str(n)) == end:\n        return True\n    else:\n        if n < start:\n            return False\n        if n % 10 == 0:\n            return is_pandigital(n/10, start, end)\n        else:\n            return False\ndef nth_fibonacci_number(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    a = 1\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for index in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b\ndef is_armstrong(n):\n    '''\n    Write a python function to check whether a given number is an armstrong number or not.\n    '''\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit**3\n        temp /= 10\n    if sum == n:\n        return True\n    return False\ndef largest_factor(n):\n    '''\n    Write a python function to find the largest factor of a given number.\n    '''\n    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\ndef get_largest_prime_factor(n):\n    '''\n    Write a python function to find the largest prime factor of a given number.\n    '''\n    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            return i\n    return n\ndef get_smallest_prime_factor(n):\n    '''\n    Write a python function to find the smallest prime factor of a given number.\n    '''\n    if n == 1:\n        return 1\n    for i in range(2, "
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(i in list1 for i in list2)\n    \ndef missing(list1,list2):\n    '''\n    Write a python function to check whether a list contains all the elements of another list.\n    '''\n    return all(i in list1 for i in list2)\n    \ndef intersection(list1,list2):\n    '''\n    Write a python function to check whether two sequences are of the same type and return the intersecion of the two sequences.\n    '''\n    return list(set(list1).intersection(list2))\n    \ndef union(list1,list2):\n    '''\n    Write a python function to check whether two sequences are of the same type and return the union of the two sequences.\n    '''\n    return list(set(list1).union(list2))\n    \ndef difference(list1,list2):\n    '''\n    Write a python function to check whether two sequences are of the same type and return the difference of the two sequences.\n    '''\n    return list(set(list1).difference(list2))\n    \ndef k_fold_cross_validation(k, data):\n    '''\n    Write a python function to split the dataset into k folds. The function should return a list of k lists, each containing one fold of the dataset.\n    '''\n    n = len(data)\n    fold_size = int(n/k)\n    \n    folds = []\n    for i in range(k):\n        folds.append(data[i*fold_size:(i+1)*fold_size])\n        \n    return folds\n    \ndef euclidean_distance(vec1, vec2):\n    '''\n    Write a python function to compute the euclidean distance between two vectors.\n    '''\n    distance = 0.0\n    for i in range(len(vec1)):\n        distance += (vec1[i] - vec2[i])**2\n    return math.sqrt(distance)\n    \ndef pearson_similarity(vec1, vec2):\n    '''\n    Write a python function to compute the pearson similarity between two vectors.\n    '''\n    n = len(vec1)\n    if (n!= len(vec2)):\n        return 0\n    s = sum([vec1[i]*vec2[i] for i in range(n)])\n    sum1 = sum([vec1[i]**2 for i in range(n)])\n    sum2 = sum([vec2[i]**2 for i in range(n)])\n    sum1 = sum1**(0.5)\n    sum2 = sum2**(0.5)\n    return s / (sum1 * sum2)\n    \ndef cosine_similarity(vec1, vec2):\n    '''\n    Write a python function to compute the cosine similarity between two vectors.\n    '''\n    n = len(vec1)\n    if (n!= len(vec2)):\n        return 0\n    return sum(vec1[i]*vec2[i] for i in range(n))\n    \ndef mean(numbers):\n    '''\n    Write a python function to compute the mean of a list of numbers.\n    '''\n    return sum(numbers)/float(len(numbers))\n    \ndef std(numbers):\n    '''\n    Write a python function to compute the standard deviation of a list of numbers.\n    '''\n    avg = mean(numbers)\n    variance = sum([(x-avg)**2 for x in numbers]) / float(len(numbers)-1)\n    return math.sqrt(variance)\n    \ndef variance(numbers):\n    '''\n    Write a python function to compute the variance of a list of numbers.\n    '''\n    avg = mean(numbers)\n    variance = sum([(x-avg)**2 for x in numbers]) / float(len(numbers)-1)\n    return variance\n    \ndef interquartile_range(numbers):\n    '''\n    Write a python function to compute the interquartile range of a list of numbers.\n    '''\n    n = len(numbers)\n    numbers.sort()\n    if n % 2 == 0:\n        return numbers[n/2-1] - numbers[n/2]\n    else:\n        return numbers[n/2]\n    \ndef covariance(X, mean_x, Y, mean_y):\n    '''\n    Write a python function to compute the covariance of two lists.\n    '''\n    n = len(X)\n    covar = 0.0\n    for i in range(n):\n        covar += (X[i] - mean_x) * (Y[i] - mean_y)\n    return covar / float(n-1)\n    \ndef correlation(X, Y):\n    '''\n    Write a python function to compute the correlation of two lists.\n    '''\n    mean_x = mean(X)\n    mean_y = mean(Y)\n    covar = covariance(X, mean_x, Y, mean_y)\n    std_x = std(X)\n    std_y = std(Y)\n    if std_x > 0 and std_y > 0:\n        return covar / float(std_x * std_y)\n    else:\n        return 0\n    \ndef iqr(numbers):\n    '''\n    Write a python function to compute the interquartile range of a list of numbers.\n    '''\n    n = len(numbers)\n    numbers.sort()\n    if n % 2 == 0:\n        return numbers[n/2-1] - numbers[n/2]\n    else:\n        return numbers[n/2]\n    \ndef dtw(s1,s2):\n    '''\n    Write a python function to compute the dynamic time warping distance between two sequences.\n    '''\n    n1 = len(s1)\n    n2 = len(s2)\n    if n1 > n2:\n        s1, s2 = s2, s1\n        n1, n2 = n2, n1\n    d = {}\n    for i in range(-1,n1):\n        d[(i,-1)] = i+1\n    for i in range(n2):\n        d[(-1,i)] = i+1\n    for i in range(n1-2,-1,-1):\n        for j in range(n2-2,-1,-1):\n            d[(i,j)] = min(\n                d[(i+1,j)] + 1,\n                d[(i,j+1)] + 1,\n                d[(i+1,j+1)] + (s1[i]!= s2[j])\n            )\n    return d[(0,0)]\n    \ndef knn(k, points, query):\n    '''\n    Write a python function to find the k-nearest neighbours for a given query point using a k-dimensial space.\n    '''\n    distances = []\n    for point in points:\n        distances.append((point,euclidean_distance(point,query)))\n    distances.sort(key=lambda x:x[1])\n    return [x[0] for x in distances[:k]]\n    \ndef knn_classification(k, training, test):\n    '''\n    Write a python function to classify the test data using the k-nearest neighbours algorithm.\n    '''\n    predictions = []\n    for point in test:\n        neighbours = knn(k, training, point)\n        label = max(set(neighbours), key=neighbours.count)\n        predictions.append(label)\n    return predictions\n    \ndef evaluation(actual, predicted):\n    '''\n    Write a python function to compute the accuracy of a prediction.\n    '''\n    correct = 0\n    for i in range(len(actual)):\n        if actual[i] == predicted[i]:\n            correct += 1\n    return 1.0*correct/len(actual)\n    \ndef max_class(labels):\n    '''\n    Write a python function to compute the mode of a list of labels.\n    '''\n    counts = {}\n    for label in labels:\n        if label not in counts:\n            counts[label] = 0\n        counts[label] += 1\n    max_count = max(count"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return(set(list1) & set(list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(element in list2 for element in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(i in list2 for i in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(\"yes\")\n            break\n        else:\n            print(\"no\")\n            break\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(True for x in list1 if x in list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                result.append(list1[i])\n    if result == []:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]*arr[1]*arr[2]\n    max_index = [0,1,2]\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i]*arr[j]>max_product):\n                max_product = arr[i]*arr[j]\n                max_index = [i,j]\n    print(max_index)\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # if array is empty return -1 \n    if len(arr) == 0: \n        return -1\n    # array must contain atleast two elements to calculate product \n    if len(arr) < 2: \n        return -1\n    # initialize an empty array for the maxProduct\n    maxProduct = [-1]*len(arr)\n    # iterate through the array \n    for i in range(len(arr)): \n        # set maxProduct to the value of arr[i] as is \n        maxProduct[i] = arr[i]\n        # update maxProduct with products of all elements to the left of it \n        j = i - 1\n        while j >= 0: \n            maxProduct[i] = max(maxProduct[i], maxProduct[j]*arr[i], arr[j]*arr[i])\n            j -= 1\n    # return the maxProduct from the array \n    return maxProduct[-1]\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = arr[0] * arr[1]\n    max_product_index = [0, 1]\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_product_index = [i, j]\n    print max_product_index\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    for i in range(len(arr)-1): \n        if i>0 and arr[i]==arr[i-1]:\n            continue\n        left=i+1\n        right=len(arr)-1\n        while left<right: \n            if arr[i]*arr[left]*arr[right]<arr[i]*arr[right]*arr[left]:\n                left+=1\n            else: \n                right-=1\n        print arr[i],arr[left],arr[right]\nmax_Product([-10, -5, -3, -1, -100])"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    l=len(arr)\n    if l<4:\n        return -1\n    if l==4:\n        if arr[0]*arr[1]*arr[2]*arr[3]>arr[1]*arr[2]*arr[3]*arr[0]:\n            return arr[0]*arr[1]*arr[2]*arr[3]\n        else:\n            return arr[1]*arr[2]*arr[3]*arr[0]\n    if l==5:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]>arr[0]*arr[1]*arr[3]*arr[4]*arr[2]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]\n        else:\n            return arr[0]*arr[1]*arr[3]*arr[4]*arr[2]\n    if l==6:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[3]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[3]\n    if l==7:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[4]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[4]\n    if l==8:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[5]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[5]\n    if l==9:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[6]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[6]\n    if l==10:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[7]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[7]\n    if l==11:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[8]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[8]\n    if l==12:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[9]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[9]\n    if l==13:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]>arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]*arr[10]:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]\n        else:\n            return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]*arr[10]\n    if l==14:\n        if arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*ar"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_so_far = arr[0]\n    min_ending_here = 1\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_product = -1\n    for i in range(len(arr) - 1):\n        if arr[i] < 0:\n            return max_product\n        else:\n            max_product = max(arr[i] * arr[i + 1], max_product)\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = None\n    for i in xrange(len(arr)):\n        for j in xrange(i+1, len(arr)):\n            if max_product is None or max_product < arr[i]*arr[j]:\n                max_product = arr[i]*arr[j]\n    return max_product\n    \nprint max_Product([1,5,5,5,5,5,5])\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maximum = 0\n    product = 1\n    for i in range(len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            product *= arr[i]\n        elif arr[i] > 0:\n            product = max(product,arr[i])\n    return product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    #n is length of array\n    n = len(arr) \n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return [{x[0] for x in Input}]\n    \n    \ndef main():\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input= [('a', 'b'), ('x', 'y'), ('z', 'a')]\n    print (group_tuples(Input))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in Input:\n        if i[0] not in Output:\n            Output.append(i[0])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Result = []\n    Group = {}\n    for i in Input:\n        Key = i[0]\n        if not Group.has_key(Key):\n            Group[Key] = i\n        else:\n            Temp = Group[Key]\n            Temp.append(i)\n            Group[Key] = Temp\n    for i in Group.values():\n        if len(i) > 1:\n            Result.append(i)\n    return Result\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    output = {}\n    for i in Input:\n        if i[0] not in output:\n            output[i[0]] = set()\n        output[i[0]].add(i[1])\n    return output\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_of_tuples = Input\n    sorted_list_of_tuples = sorted(list_of_tuples)\n    dictionaries = []\n    for item in sorted_list_of_tuples:\n        tmp_dictionary = {}\n        tmp_dictionary[item[0]] = 1\n        dictionaries.append(tmp_dictionary)\n    #print dictionaries\n    result = {}\n    for i in range(len(dictionaries)):\n        for j in range(len(dictionaries)):\n            if i == j:\n                continue\n            else:\n                tmp_dictionary = dictionaries[i]\n                tmp_dictionary_2 = dictionaries[j]\n                for ele in tmp_dictionary:\n                    if ele in tmp_dictionary_2:\n                        tmp_dictionary_2[ele] += 1\n                for ele in tmp_dictionary_2:\n                    if tmp_dictionary[ele] < tmp_dictionary_2[ele]:\n                        tmp_dictionary_2[ele] = tmp_dictionary[ele]\n                dictionaries[j] = tmp_dictionary_2\n    #print dictionaries\n    for i in range(len(dictionaries)):\n        for j in dictionaries[i]:\n            if dictionaries[i][j] > 1:\n                result[j] = 1\n    return result\n    \n    \ndef count_in_dict(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_of_tuples = Input\n    sorted_list_of_tuples = sorted(list_of_tuples)\n    dictionaries = []\n    for item in sorted_list_of_tuples:\n        tmp_dictionary = {}\n        tmp_dictionary[item[0]] = 1\n        dictionaries.append(tmp_dictionary)\n    #print dictionaries\n    result = {}\n    for i in range(len(dictionaries)):\n        for j in range(len(dictionaries)):\n            if i == j:\n                continue\n            else:\n                tmp_dictionary = dictionaries[i]\n                tmp_dictionary_2 = dictionaries[j]\n                for ele in tmp_dictionary:\n                    if ele in tmp_dictionary_2:\n                        tmp_dictionary_2[ele] += 1\n                for ele in tmp_dictionary_2:\n                    if tmp_dictionary[ele] < tmp_dictionary_2[ele]:\n                        tmp_dictionary_2[ele] = tmp_dictionary[ele]\n                dictionaries[j] = tmp_dictionary_2\n    #print dictionaries\n    for i in range(len(dictionaries)):\n        for j in dictionaries[i]:\n            if dictionaries[i][j] > 1:\n                result[j] = 1\n    return result\n    \ndef count_in_dict2(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_of_tuples = Input\n    dictionaries = []\n    for item in list_of_tuples:\n        tmp_dictionary = {}\n        tmp_dictionary[item[0]] = 1\n        dictionaries.append(tmp_dictionary)\n    #print dictionaries\n    result = {}\n    for i in range(len(dictionaries)):\n        for j in range(len(dictionaries)):\n            if i == j:\n                continue\n            else:\n                tmp_dictionary = dictionaries[i]\n                tmp_dictionary_2 = dictionaries[j]\n                for ele in tmp_dictionary:\n                    if ele in tmp_dictionary_2:\n                        tmp_dictionary_2[ele] += 1\n                for ele in tmp_dictionary_2:\n                    if tmp_dictionary[ele] < tmp_dictionary_2[ele]:\n                        tmp_dictionary_2[ele] = tmp_dictionary[ele]\n                dictionaries[j] = tmp_dictionary_2\n    #print dictionaries\n    for i in range(len(dictionaries)):\n        for j in dictionaries[i]:\n            if dictionaries[i][j] > 1:\n                result[j] = 1\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    out = []\n    for i in range(len(Input)):\n        if Input[0] == Input[i]:\n            out.append(Input[0])\n    return out\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    #implement your function here\n    \n    l = sorted(Input)\n    l = list(set(l))\n    \n    return l[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List = []\n    for i in Input:\n        List.append(i[0])\n    return List\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #common = list(set([x[0] for x in Input if x[1]>1]))\n    common = list(set([x[0] for x in Input]))\n    return common\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return reduce(lambda a, b: set(a).intersection(set(b)), map(lambda x: x[0], Input))\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum = -1\n    maximum_index = -1\n    for i in range(len(lst)):\n        if len(lst[i])>maximum:\n            maximum = len(lst[i])\n            maximum_index = i\n    return lst[maximum_index]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n            return max_len\n    "
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    max_element = lst[0]\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for item in lst:\n        if len(item) > max:\n            max = len(item)\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum=max(lst,key=len)\n    return maximum\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    ind, val = 0, 0\n    for i in range(len(lst)):\n        if len(lst[i]) > val:\n            ind, val = i, len(lst[i])\n    return lst[ind]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = lst[0]\n    for i in range(1,len(lst)):\n        if len(m) < len(lst[i]):\n            m = lst[i]\n    return m\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for val in lst:\n        if len(val)>max_len:\n            max_len = len(val)\n            max_word = val\n    return max_word\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    round_list = [round(num) for num in list1]\n    print(sum(round_list)*len(list1))\n    \n    \n    \n    \ndef any_double(list1):\n    '''\n    Write a function to return True if the first item of the list is equal to the second item and the third item is equal to the fourth item and so on. Print the number of times it repeats.\n    '''\n    \n    if list1[0] == list1[1] and list1[1] == list1[2]:\n        print(1)\n    elif list1[1] == list1[2] and list1[2] == list1[3]:\n        print(2)\n    elif list1[2] == list1[3] and list1[3] == list1[4]:\n        print(3)\n    elif list1[3] == list1[4] and list1[4] == list1[5]:\n        print(4)\n    elif list1[4] == list1[5] and list1[5] == list1[6]:\n        print(5)\n    elif list1[5] == list1[6] and list1[6] == list1[7]:\n        print(6)\n    elif list1[6] == list1[7] and list1[7] == list1[8]:\n        print(7)\n    elif list1[8] == list1[9] and list1[9] == list1[10]:\n        print(8)\n    elif list1[9] == list1[10] and list1[10] == list1[11]:\n        print(9)\n    elif list1[11] == list1[12] and list1[12] == list1[13]:\n        print(10)\n    elif list1[12] == list1[13] and list1[13] == list1[14]:\n        print(11)\n    elif list1[14] == list1[15] and list1[15] == list1[16]:\n        print(12)\n    elif list1[15] == list1[16] and list1[16] == list1[17]:\n        print(13)\n    elif list1[17] == list1[18] and list1[18] == list1[19]:\n        print(14)\n    elif list1[19] == list1[20] and list1[20] == list1[21]:\n        print(15)\n    elif list1[21] == list1[22] and list1[22] == list1[23]:\n        print(16)\n    elif list1[23] == list1[24] and list1[24] == list1[25]:\n        print(17)\n    elif list1[25] == list1[26] and list1[26] == list1[27]:\n        print(18)\n    elif list1[27] == list1[28] and list1[28] == list1[29]:\n        print(19)\n    elif list1[29] == list1[30] and list1[30] == list1[31]:\n        print(20)\n    elif list1[31] == list1[32] and list1[32] == list1[33]:\n        print(21)\n    elif list1[33] == list1[34] and list1[34] == list1[35]:\n        print(22)\n    elif list1[35] == list1[36] and list1[36] == list1[37]:\n        print(23)\n    elif list1[37] == list1[38] and list1[38] == list1[39]:\n        print(24)\n    elif list1[39] == list1[40] and list1[40] == list1[41]:\n        print(25)\n    elif list1[41] == list1[42] and list1[42] == list1[43]:\n        print(26)\n    elif list1[43] == list1[44] and list1[44] == list1[45]:\n        print(27)\n    elif list1[45] == list1[46] and list1[46] == list1[47]:\n        print(28)\n    elif list1[47] == list1[48] and list1[48] == list1[49]:\n        print(29)\n    elif list1[49] == list1[50] and list1[50] == list1[51]:\n        print(30)\n    elif list1[51] == list1[52] and list1[52] == list1[53]:\n        print(31)\n    elif list1[53] == list1[54] and list1[54] == list1[55]:\n        print(32)\n    elif list1[55] == list1[56] and list1[56] == list1[57]:\n        print(33)\n    elif list1[57] == list1[58] and list1[58] == list1[59]:\n        print(34)\n    elif list1[59] == list1[60] and list1[60] == list1[61]:\n        print(35)\n    elif list1[61] == list1[62] and list1[62] == list1[63]:\n        print(36)\n    elif list1[63] == list1[64] and list1[64] == list1[65]:\n        print(37)\n    elif list1[65] == list1[66] and list1[66] == list1[67]:\n        print(38)\n    elif list1[67] == list1[68] and list1[68] == list1[69]:\n        print(39)\n    elif list1[69] == list1[70] and list1[70] == list1[71]:\n        print(40)\n    elif list1[71] == list1[72] and list1[72] == list1[73]:\n        print(41)\n    elif list1[73] == list1[74] and list1[74] == list1[75]:\n        print(42)\n    elif list1[75] == list1[76] and list1[76] == list1[77]:\n        print(43)\n    elif list1[77] == list1[78] and list1[78] == list1[79]:\n        print(44)\n    elif list1[79] == list1[80] and list1[80] == list1[81]:\n        print(45)\n    elif list1[81] == list1[82] and list1[82] == list1[83]:\n        print(46)\n    elif list1[83] == list1[84] and list1[84] == list1[85]:\n        print(47)\n    elif list1[85] == list1[86] and list1[86] == list1[87]:\n        print(48)\n    elif list1[87] == list1[88] and list1[88] == list1[89]:\n        print(49)\n    elif list1[89] == list1[90] and list1[90] == list1[91]:\n        print(50)\n    elif list1[91] == list1[92] and list1[92] == list1[93]:\n        print(51)\n    elif list1[93] == list1[94] and list1[94] == list1[95]:\n        print(52)\n    elif list1[95] == list1[96] and list1[96] == list1[97]:\n        print(53)\n    elif list1[97] == list1[98] and list1[98] == list1[99]:\n        print(54)\n    elif list1[99] == list1[100] and list1[100] == list1[101]:\n        print(55)\n    elif list1[101] == list1[102] and list1[102] == list1[103]:\n        print(56)\n    elif list1[103] == list1[104] and list1[104] == list1[105]:\n        print(57)\n    elif list1[105] == list1[106] and list"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(map(lambda x: round(x,2), list1)) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for i in list1:\n        i = int(i)\n        i = math.ceil(i)\n        sum1 += i\n    print(sum1*len(list1))\n    return sum1*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(map(lambda x: round(x,2), list1)) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    return total_sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(map(lambda x: round(x, 1), list1)) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(round(total))\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_list = []\n    for item in list1:\n        round_list.append(round(item))\n    return round_list, sum(round_list) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for i in list1:\n        i = round(i)\n        sum1 += i\n    return sum1 * len(list1)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in xrange(n):\n        total += (2 * i + 1)**3\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 0\n    c = 0\n    while i < n:\n        if i % 2 == 0:\n            c = c + i ** 3\n        i = i + 1\n    return c\n    \ndef sqrt(n):\n    '''\n    Write a python function to find the square root of first n even natural numbers.\n    '''\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            i = i + 1\n            continue\n        if (i ** 0.5) % 1 == 0:\n            return i\n        i = i + 1\n    \ndef Sum(n):\n    '''\n    Write a python function to find the sum of first n even natural numbers.\n    '''\n    i = 0\n    s = 0\n    while i < n:\n        s = s + i\n        i = i + 1\n    return s\n    \ndef factorization(n):\n    '''\n    Write a python function to find the factorization of first n even natural numbers.\n    '''\n    i = 2\n    f = []\n    while i <= n:\n        if n % i == 0:\n            f.append(i)\n            n = n / i\n        else:\n            i = i + 1\n    return f\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 1:\n        return None\n    return int((n * n * n) / 3)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([n**3 for n in range(1,n+1,2)])\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_n_cubes = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum_of_n_cubes += i**3\n    return sum_of_n_cubes\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([x**3 for x in range(n) if x%2==0])\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n = int(n)\n    if n<2:\n        return 0\n    c = n*(n+1)*(2*n+1)\n    return c/6\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    return n**3 + cube_Sum(n-1)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(0,n):\n        s = s + pow(i,3)\n    return s\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n * n * n\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        new_tup += (str(i),)\n    return new_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    tup_str = delimiter.join(test_tup)\n    return tup_str\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = ()\n    for t in test_tup:\n        new_tup += tuple(t)\n    return new_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i)\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = ''\n    for t in test_tup:\n        test_str += t + '-'\n    return test_str[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # init_str = ''\n    # for tup in test_tup:\n    #     init_str += tup\n    # return init_str\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if not isinstance(test_tup, tuple):\n        return ''\n    else:\n        return ''.join(str(x) for x in test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    c = 1\n    l = []\n    while(c <= n):\n        l.append(c ** 3)\n        c += 1\n    return sum(l) / float(len(l))\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    lst = []\n    for i in range(1,n+1):\n        lst.append(i**3)\n    return sum(lst)/n\n    \nprint(find_Average_Of_Cube(20))\n    \n    \n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    c = 0\n    for i in range(1,n+1):\n        c = c + (i**3)\n    average = c/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total / n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i<=n:\n        sum = sum + i*i*i\n        i = i + 1\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    average=0\n    for i in range(n+1):\n        average+=i**3\n    average=average/(n+1)\n    return average\n    \ndef find_Sum_of_First_n_Even_Numbers(n):\n    '''\n    Write a python function to find the sum of first n even numbers.\n    '''\n    summation=0\n    for i in range(n+1):\n        if i%2==0:\n            summation+=i\n    return summation\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return (n * (n + 1) * (2 * n + 1)) / 6\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    x = 0\n    for i in range(n+1):\n        x += i**3\n    return x/n\n    \ndef find_Average_Of_Cubed_Digits(n):  \n    '''\n    Write a python function to find the average of cubed digits of first n natural numbers.\n    '''\n    x = 0\n    for i in range(n+1):\n        temp = i\n        s = str(i)\n        for j in s:\n            temp = temp * int(j)\n        x += temp\n    return x/n\n    \ndef reverse_Digits(n):\n    '''\n    Write a python function to reverse the digits of first n natural numbers.\n    '''\n    x = 0\n    for i in range(n+1):\n        s = str(i)\n        t = \"\"\n        for j in s:\n            t = j + t\n        x = x * 10 + int(t)\n    return x\n    \ndef nth_Term_Sum_Series(n):\n    '''\n    Write a python function to find the sum of nth term of series 1,1,2,4,7,11,16,23,28,36,45,55...\n    '''\n    x = 0\n    for i in range(1,n+1):\n        x = x + i\n    return x\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    x = 1\n    for i in range(1,n+1):\n        x = x * i\n    return x\n    \ndef nth_Fibonacci(n):\n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    x = 0\n    y = 1\n    z = 0\n    for i in range(n-1):\n        z = y\n        y = x + y\n        x = z\n    return y\n    \ndef find_Pentagonal(n):\n    '''\n    Write a python function to find the nth pentagonal number.\n    '''\n    x = (1 + (n-1)*5) * (2 + (n-1)*5)\n    return x\n    \ndef nth_Prime(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    x = 2\n    while(True):\n        if(n%x == 0):\n            n = n/x\n        else:\n            break\n    return x\n    \ndef find_Prime_Prime_Prime(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    x = 2\n    while(True):\n        if(n%x == 0):\n            n = n/x\n        else:\n            x += 1\n            if(n%x == 0):\n                n = n/x\n        if(n == 1):\n            break\n    return x\n    \ndef nth_Armstrong(n):\n    '''\n    Write a python function to find the nth Armstrong number.\n    '''\n    x = n\n    s = 0\n    while(x > 0):\n        s += (x%10)**3\n        x = x//10\n    if(s == n):\n        return True\n    return False\n    \ndef nth_Perfect_Number(n):\n    '''\n    Write a python function to find the nth perfect number.\n    '''\n    x = 1\n    for i in range(1,n):\n        x = x + i\n        if(x == n):\n            return i\n    return x\n    \ndef Sum_of_Pentagonal_Numbers(n):\n    '''\n    Write a python function to find the sum of first n pentagonal numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        x = x + find_Pentagonal(i)\n    return x\n    \ndef Sum_of_Triangular_Numbers(n):\n    '''\n    Write a python function to find the sum of first n triangular numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        x = x + (i * (i + 1))/2\n    return x\n    \ndef Sum_of_Square_Numbers(n):\n    '''\n    Write a python function to find the sum of first n square numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        x = x + i**2\n    return x\n    \ndef Sum_of_Hexagonal_Numbers(n):\n    '''\n    Write a python function to find the sum of first n hexagonal numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        x = x + (2 * i * (i + 1))/2\n    return x\n    \ndef Sum_of_Heptagonal_Numbers(n):\n    '''\n    Write a python function to find the sum of first n heptagonal numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        x = x + (3 * i * (i + 1))/2\n    return x\n    \ndef Sum_of_Octagonal_Numbers(n):\n    '''\n    Write a python function to find the sum of first n octagonal numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        x = x + (4 * i * (i + 1))/2\n    return x\n    \ndef Sum_of_Non_Square_Numbers(n):\n    '''\n    Write a python function to find the sum of first n non-square numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        x = x + (i*(i+1)*(2*i+1))/6\n    return x\n    \ndef Sum_of_Quadradtic_Numbers(n):\n    '''\n    Write a python function to find the sum of first n quadradtic numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        x = x + (i*(i+1)*(2*i+1)*(3*i+1))/8\n    return x\n    \ndef Sum_of_Cube_Numbers(n):\n    '''\n    Write a python function to find the sum of first n cube numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        x = x + i**3\n    return x\n    \ndef Sum_of_Fibonacci_Numbers(n):\n    '''\n    Write a python function to find the sum of first n fibonacci numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        x = x + nth_Fibonacci(i)\n    return x\n    \ndef Sum_of_Numbers_Powers_Of_Ten(n):\n    '''\n    Write a python function to find the sum of first n numbers powers of 10.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        x = x + i**10\n    return x\n    \ndef Sum_of_Digits_Of_A_Number(n):\n    '''\n    Write a python function to find the sum of first n digits of a given number.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        s = str(i)\n        for j in s:\n            x = x + int(j)\n    return x\n    \ndef Sum_of_Square_Digits_Of_A_Number(n):\n    '''\n    Write a python function to find the sum of first n square digits of a given number.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        s = str(i)\n        for j in s:\n            x = x + (int(j)**2)\n    return x\n    \ndef Sum_of_Cube_Digits_Of_A_Number(n):\n    '''\n    Write a python function to find the sum of first n cube digits of a given number.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        s = str(i)"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    total = 0\n    for i in range(1, n+1):\n        total += i ** 3\n    return total / n\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(elem[-1] for elem in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(rear_str.split(\".\")[-1] for rear_str in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    list_index = []\n    for i in range(len(test_tuple)):\n        list_index.append(test_tuple[i][-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [i[-1] for i in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [i[-1] for i in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [t[-1] for t in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    if len(test_tuple) == 0:\n        return ()\n    return tuple(test_tuple[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(s[-1] for s in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = tuple(map(lambda x:x[-1],test_tuple))\n    return result\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    i=0\n    count=0\n    while i<len(list1):\n        if x in list1[i]:\n            count=count+1\n        i=i+1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for sublist in list1:\n        if x in sublist:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return sum(1 for i in list1 if x in i)\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0 \n    for i in range(len(list1)): \n        if list1[i] == x: \n            count += 1 \n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # List Comprehension\n    return [x for x in nums if x % 2 == 1]\n    # return [x for x in nums if not x % 2]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2!=0,nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x:x%2!=0,nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n    \n    \nif __name__ == '__main__':\n    l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(filter_oddnumbers(l))"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered = list(filter(lambda x:x%2!=0,nums))\n    return filtered\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num%2 == 0]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:]+'-'+dt[3:5]+'-'+dt[:2]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:] + '-' + dt[3:5] + '-' + dt[:2]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace('-', '/')\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt[0] == '0':\n        return dt[1:]\n    elif dt[0] == '1':\n        return dt[2:]\n    else:\n        return dt[3:]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year, month, day = re.split('-', dt)\n    return '{:02d}-{:02d}-{:04d}'.format(int(day), int(month), int(year))\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_regex = re.compile(r'\\b(?P<day>\\d{2})\\s+(?P<month>\\d{2})\\s+(?P<year>\\d{4})\\b')\n    date_change = date_regex.search(dt)\n    if date_change:\n        day = date_change.group('day')\n        month = date_change.group('month')\n        year = date_change.group('year')\n        new_date = day + '-' + month + '-' + year\n        return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_str = re.findall(r'(^\\d{4}-\\d{2}-\\d{2})',dt)\n    if not date_str:\n        return dt\n    date_str = date_str[0]\n    date_str = date_str.replace('-','/')\n    date_str = date_str +'' + str(datetime.now().year)\n    return date_str\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = re.compile('(\\d{4})-(\\d{2})-(\\d{2})')\n    date_format_2 = re.compile('(\\d{2})-(\\d{2})-(\\d{4})')\n    dd = int(dt[8:10])\n    mm = int(dt[5:7])\n    yyyy = int(dt[0:4])\n    if date_format.match(dt) is not None:\n        return '{:02d}-{:02d}-{:04d}'.format(dd, mm, yyyy)\n    elif date_format_2.match(dt) is not None:\n        return '{:02d}-{:02d}-{:02d}'.format(dd, mm, yyyy)\n    else:\n        return 'Wrong format'\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[2] + '-' + dt[1] + '-' + dt[0]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    day = date[0]\n    month = date[1]\n    year = date[2]\n    return day+'-'+month+'-'+year\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n    \nif __name__ == '__main__':\n    import random\n    a = [random.randint(0, 100) for _ in range(10)]\n    print('Before sorting: %s' % a)\n    print('After sorting: %s' % shell_sort(a)"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # The main concept of shell sort is to group sublists into contiguous blocks\n    # of size k. The first sublist is of size 1, then the second one of size k,\n    # etc.\n    sublist_size = len(my_list) // 2\n    while sublist_size > 0:\n        for start_position in range(sublist_size):\n            gap_insertion_sort(my_list, start_position, sublist_size)\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    assert type(my_list) == list\n    assert type(my_list[0]) == int\n    assert type(my_list[1]) == int\n    assert len(my_list) > 0\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    interval = n//2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # base case when list is empty or single element\n    if len(my_list) <= 1:\n        return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            my_list[j] = temp\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, n):\n            j = i\n            while j >= h and my_list[j] < my_list[j-h]:\n                temp = my_list[j]\n                my_list[j] = my_list[j-h]\n                my_list[j-h] = temp\n                j -= h\n        h //= 3\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # your code here\n    return (list(test_tup1[0])[0], list(test_tup2[0])[0])\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res = []\n    for i, j in zip(test_tup1, test_tup2):\n        res.append(i and j)\n    return tuple(res)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return ((x1 and x2) for x1, x2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0], test_tup2[1]), (test_tup1[1], test_tup2[0])\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Convert to lists to support non-iterable arguments\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (\n        [(a, b) for a, b in zip(test_tup1, test_tup2)],\n        [(a, b) for a, b in zip(test_tup1, test_tup2) if a == b]\n    )\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup1 = [test_tup1[i]&test_tup2[i] for i in range(len(test_tup1))]\n    return new_tup1\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    def extract_and(a, b):\n        if len(a)!= len(b):\n            raise ValueError('Tuples are not of the same length')\n        return [a[i] + b[i] for i in range(len(a))]\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Write your code here\n    # first, find the local minimum of the parabola\n    # find a value of t that will be at a minimum of the parabola\n    # find the coordinates of that point, (x', y')\n    # find the line that goes through that point and the origin\n    # line = y - m*x, y = mx + c\n    # so, find m = (y' - y) / (x' - x)\n    # since we are looking for a minimum, we set m to negative\n    # find the intersection of that line and the y axis\n    # t = (y - y0) / m\n    # then, find the y coordinate of the point\n    # y = mx + c, y = mx + c, m = 1/m\n    # then, find the x coordinate of the point\n    # x = t, x = t\n    # then, find the new origin, (0, 0)\n    # then, find the new y coordinate of the directrix\n    # y = mx + c, y = mx + c, m = 1/m\n    # then, find the x coordinate of the directrix\n    # x = t, x = t\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b**2) - (4*a*c)\n    \ndef intersection_of_directrix_and_line(a, b, c, d):\n    '''\n    Write a function to find the intersection of a line and a directrix.\n    '''\n    # first directrix\n    x = (-b + (b**2 - (4*a*c))**0.5) / (2*a)\n    y = a*x + c/a\n    # second directrix\n    x = (-b - (b**2 - (4*a*c))**0.5) / (2*a)\n    y = a*x + c/a\n    # lines\n    x_1 = -c/b\n    y_1 = a*x_1 + d/b\n    x_2 = -c/b\n    y_2 = a*x_2 + d/b\n    return x, y\n    \ndef bisection(a, b, function, epsilon):\n    '''\n    Write a function to find the roots of a function between two points,\n    using the bisection method.\n    '''\n    y = function(a)\n    x = (a+b)/2\n    if abs(y) < epsilon:\n        return x\n    else:\n        y = function(x)\n        if y*function(b) < 0:\n            return bisection(a, x, function, epsilon)\n        else:\n            return bisection(x, b, function, epsilon)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a == 0):\n        if b == 0:\n            if c == 0:\n                return None\n            else:\n                return None\n        else:\n            if c == 0:\n                return -1/b\n            else:\n                return None\n    else:\n        d = b**2 - 4*a*c\n        if d < 0:\n            return None\n        else:\n            x1 = (-b + d**0.5)/(2*a)\n            x2 = (-b - d**0.5)/(2*a)\n            return [x1, x2]\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b*b) - (4*a*c)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_axis = -b / (2 * a)\n    y_axis = -(b * b) / (4 * a * a)\n    return x_axis, y_axis\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return [i for i in set(list1) if i in set(list2)][0] is not None\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1 & set2 == set():\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n    \n    \nprint(common_element([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))\nprint(common_element([1, 2, 3, 4, 5], [4, 6, 8, 10]))\nprint(common_element([1, 2, 3, 4, 5], [6, 8, 10]))\nprint(common_element([1, 2, 3, 4, 5], []))\nprint(common_element([], [1, 2, 3, 4, 5]))\nprint(common_element([1], [1]))\nprint(common_element([1], []))\nprint(common_element([], [])"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    result = False\n    for x in list1:\n        for y in list2:\n            if x == y:\n                result = True\n                break\n    return result\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    result = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            result.append(list1[i])\n    print(result)\n    return False\n    \ndef common_element_2(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return True if list(set(list1) & set(list2)) else False\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = base1/2\n    base2 = base2/2\n    height = height/2\n    return base1 + base2 + height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return height*(base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1.0*(base1+base2)*height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print 'The median length of a trapezium is', (base1 + base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2.0 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) / 2 * height\n    return area\n    \ndef main():\n    x = int(input(\"Enter first base\"))\n    y = int(input(\"Enter second base\"))\n    z = int(input(\"Enter height\"))\n    print(median_trapezium(x,y,z))\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2)/2.0)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2.0 * height\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return max(arr) > number\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > min(arr)\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    if len(arr) == 1:\n        if arr[0] > number:\n            greater = True\n    elif arr[len(arr)-1] > number:\n        greater = True\n    else:\n        for i in range(len(arr)):\n            if arr[i] < number:\n                greater = True\n                break\n    return greater\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # print (arr[0])\n    if (arr[0] < number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    n = len(arr)\n    if n > 0:\n        if arr[n-1] < number:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = True\n    for i in arr:\n        if i > number:\n            flag = False\n    return flag\n    \n    \n    \ndef check_greater_elem(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = False\n    for i in arr:\n        if i > number:\n            flag = True\n    return flag\n    \ndef find_missing_elem(arr):\n    '''\n    Write a function to find a missing element in an array\n    '''\n    if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] - 1 + find_missing_elem(arr[1:])\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if elem > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr[number] > number\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    length = len(arr)\n    for i in xrange(length):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[ab]+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[ab]+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_match_twenty_eight(tex"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by 10 or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by 11 or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by sixteen or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by seventeen or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by eighteen or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by nineteen or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty one or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty two or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty three or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty four or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty five or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty six or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty seven or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_twenty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty eight or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_twenty_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty nine or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_thirty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty one or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_thirty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty two or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_thirty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty three or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_thirty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty four or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_thirty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty five or more b's.\n    '''\n    return bool(re.search(r\"ab+\",text))\ndef text_match_thirty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty six or more b's.\n    '''\n    return bool(re.search("
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    matches = re.search(r'ab+', text)\n    if matches:\n        return 'Found a match!'\n    return 'Not matched!'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text) is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.startswith('a'):\n        if re.search('b+', text):\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match('a.*b+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pat = re.compile(r'ab+')\n    if re.search(pat, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b', re.IGNORECASE)\n    match = pattern.search(text)\n    return match\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # import re\n    # pattern = r'a(.*)(b+)'\n    # match = re.match(pattern, text)\n    # return match.group(1) + match.group(2)\n    return re.sub(r'a(.*)b+', r'\\1', text)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # print (n % 10)\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #If the number is negative, return the absolute value\n    if n < 0:\n        return abs(n) % 10\n    #else return the last digit\n    else:\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    return last_Digit(n/10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = int(n)\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n/10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n >= 0 :\n        return n % 10\n    else :\n        return -((-n) % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n % 10)\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n    \ndef neg_nos_dict(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return {x:x for x in list1 if x < 0}\n    \ndef pos_nos(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    return [x for x in list1 if x > 0]\n    \ndef pos_nos_dict(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    return {x:x for x in list1 if x > 0}\n    \ndef sum_all(list1):\n    '''\n    Write a python function to return the sum of all numbers in a list.\n    '''\n    return sum(list1)\n    \ndef avg(list1):\n    '''\n    Write a python function to return the average of all numbers in a list.\n    '''\n    return sum(list1) / len(list1)\n    \ndef mul_all(list1):\n    '''\n    Write a python function to return the product of all numbers in a list.\n    '''\n    return reduce(lambda x,y:x*y, list1)\n    \ndef map_all(list1):\n    '''\n    Write a python function to return the product of all numbers in a list.\n    '''\n    return map(lambda x:x*x, list1)\n    \ndef filter_nos(list1):\n    '''\n    Write a python function to return the product of all numbers in a list.\n    '''\n    return filter(lambda x:x%2==0, list1)\n    \ndef map_nos(list1):\n    '''\n    Write a python function to return the product of all numbers in a list.\n    '''\n    return map(lambda x:x%2==0, list1)\n    \ndef filter_nos_dict(list1):\n    '''\n    Write a python function to return the product of all numbers in a list.\n    '''\n    return {x:x%2==0 for x in list1}\n    \ndef map_nos_dict(list1):\n    '''\n    Write a python function to return the product of all numbers in a list.\n    '''\n    return {x:x%2==0 for x in list1}\n    \ndef divisors(num):\n    '''\n    Write a python function to return the divisors of a number.\n    '''\n    return [x for x in range(1,num+1) if num%x == 0]\n    \ndef is_prime(num):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    return sum(divisors(num)) == 2*num\n    \ndef is_prime_dict(num):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    return {x:is_prime(x) for x in num}\n    \ndef primes_less_than(num):\n    '''\n    Write a python function to print all primes less than a number.\n    '''\n    return [x for x in range(2,num+1) if is_prime(x)]\n    \ndef primes_less_than_dict(num):\n    '''\n    Write a python function to print all primes less than a number.\n    '''\n    return {x:is_prime(x) for x in range(2,num+1)}\n    \ndef sum_odds(list1):\n    '''\n    Write a python function to return the sum of all odd numbers in a list.\n    '''\n    return sum([x for x in list1 if x%2==1])\n    \ndef sum_odds_dict(list1):\n    '''\n    Write a python function to return the sum of all odd numbers in a list.\n    '''\n    return {x:x for x in list1 if x%2==1}\n    \ndef sum_evens(list1):\n    '''\n    Write a python function to return the sum of all even numbers in a list.\n    '''\n    return sum([x for x in list1 if x%2==0])\n    \ndef sum_evens_dict(list1):\n    '''\n    Write a python function to return the sum of all even numbers in a list.\n    '''\n    return {x:x for x in list1 if x%2==0}\n    \ndef average_odds(list1):\n    '''\n    Write a python function to return the average of all odd numbers in a list.\n    '''\n    return sum_odds(list1) / len(list1)\n    \ndef average_odds_dict(list1):\n    '''\n    Write a python function to return the average of all odd numbers in a list.\n    '''\n    return {x:x for x in list1}\n    \ndef average_evens(list1):\n    '''\n    Write a python function to return the average of all even numbers in a list.\n    '''\n    return sum_evens(list1) / len(list1)\n    \ndef average_evens_dict(list1):\n    '''\n    Write a python function to return the average of all even numbers in a list.\n    '''\n    return {x:x for x in list1}\n    \ndef sort_by_length(list1):\n    '''\n    Write a python function to sort a list in ascending order based on length of the strings.\n    '''\n    return sorted(list1, key=len)\n    \ndef sort_by_length_dict(list1):\n    '''\n    Write a python function to sort a list in ascending order based on length of the strings.\n    '''\n    return {x:x for x in sorted(list1, key=len)}\n    \ndef sort_by_length_in_descending_order(list1):\n    '''\n    Write a python function to sort a list in descending order based on length of the strings.\n    '''\n    return sorted(list1, key=len, reverse=True)\n    \ndef sort_by_length_in_descending_order_dict(list1):\n    '''\n    Write a python function to sort a list in descending order based on length of the strings.\n    '''\n    return {x:x for x in sorted(list1, key=len, reverse=True)}\n    \ndef first_and_last_values(list1):\n    '''\n    Write a python function to return the first and last values of a list.\n    '''\n    return list1[0], list1[-1]\n    \ndef first_and_last_values_dict(list1):\n    '''\n    Write a python function to return the first and last values of a list.\n    '''\n    return {x:x for x in list1[0]}, {x:x for x in list1[-1]}\n    \ndef sum_of_list_of_numbers(list1):\n    '''\n    Write a python function to return the sum of all numbers in a list.\n    '''\n    return sum(list1)\n    \ndef sum_of_list_of_numbers_dict(list1):\n    '''\n    Write a python function to return the sum of all numbers in a list.\n    '''\n    return {x:x for x in list1}\n    \ndef product_of_list_of_numbers(list1):\n    '''\n    Write a python function to return the product of all numbers in a list.\n    '''\n    return reduce(lambda x,y:x*y, list1)\n    \ndef product_of_list_of_numbers_dict(list1):\n    '''\n    Write a python function to return the product of all numbers in a list.\n    '''\n    return {x:x for x in list1}\n    \ndef sum_of_list_of_squares(list1):\n    '''\n    Write a python function to return the sum of all squares in a list.\n    '''\n    return sum([x**2 for x in list1])\n    \ndef sum_of_list_of_squares_dict(list1):\n    '''\n    Write a python function to return the sum of all squares in a list.\n    '''\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5]\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print i\n            \ndef pos_nos(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    for i in list1:\n        if i > 0:\n            print i\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos=[]\n    for num in list1:\n        if num<0:\n            neg_nos.append(num)\n    return neg_nos\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if i % 2!= 0:\n            str1 = str1[0:i] + str1[i + 1:]\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if (i+1) % 2 == 0:\n            result = result + str1[i]\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    res = \"\"\n    for i in range(len(str1)):\n        if i%2 == 0:\n            res += str1[i]\n    return res\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([str1[i] for i in range(0, len(str1), 2)])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    s = list(str1)\n    for i in range(len(str1)):\n        if ord(s[i])%2:\n            s[i] = \"\"\n    return \"\".join(s)\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(x for x in str1 if x.isdigit())\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1 == '':\n        return str1\n    res = ''\n    for i in range(0,len(str1)):\n        if i % 2 == 0:\n            res += str1[i]\n    return res\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(filter(lambda x: x%2==0, str1))\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # example test_list: [(1, 2), (3, 4), (5, 6), (7, 8)]\n    pairs = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list and (test_list[j], test_list[i]) in test_list:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    left_to_right = 0\n    right_to_left = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]) or (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]):\n                left_to_right += 1\n            if (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]) or (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]):\n                right_to_left += 1\n    return left_to_right, right_to_left\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    tuple_pairs = []\n    for i in range(0, len(test_list) - 1, 2):\n        tuple_pairs.append((test_list[i], test_list[i+1]))\n    return tuple_pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    tuple_pairs = []\n    for i in xrange(0, len(test_list)):\n        for j in xrange(i + 1, len(test_list)):\n            tuple_pairs.append((test_list[i], test_list[j]))\n    count = 0\n    for tuple1 in tuple_pairs:\n        for tuple2 in tuple_pairs:\n            if tuple1[1] == tuple2[0] and tuple2[1] == tuple1[0]:\n                count += 1\n    print count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for i, j in test_list:\n        d[(i, j)] += 1\n        d[(j, i)] += 1\n    return sum(d.values()) / float(len(d))\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    d = {}\n    for i in test_list:\n        a = i[0]\n        b = i[1]\n        if a not in d:\n            d[a] = {}\n        if b not in d[a]:\n            d[a][b] = 1\n        else:\n            d[a][b] += 1\n        if b not in d:\n            d[b] = {}\n        if a not in d[b]:\n            d[b][a] = 1\n        else:\n            d[b][a] += 1\n    count = 0\n    for i in d:\n        for j in d[i]:\n            if d[i][j] == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    n = len(test_list)\n    if n < 2:\n        return 0\n    n_half = n // 2\n    bidirectional = 0\n    for i in range(n_half):\n        # look for a tuple pair [x, y, z,..., x, y]\n        # with x <= y and x >= z\n        x, y = test_list[i], test_list[i + n_half]\n        if x <= y and x >= x[i]:\n            bidirectional += 1\n    return bidirectional\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for x, y in itertools.combinations(test_list, 2):\n        if y[0] < x[0] and y[1] < x[1]:\n            result += 1\n        elif y[0] < x[0] and y[1] > x[1]:\n            result += 1\n        elif y[0] > x[0] and y[1] < x[1]:\n            result += 1\n        elif y[0] > x[0] and y[1] > x[1]:\n            result += 1\n    return result\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    dict = {}\n    for i in test_list:\n        if i[0] in dict:\n            dict[i[0]] = dict[i[0]] + 1\n        else:\n            dict[i[0]] = 1\n        if i[1] in dict:\n            dict[i[1]] = dict[i[1]] + 1\n        else:\n            dict[i[1]] = 1\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    return int(str(reduce(lambda x, y: x * 10 + y, L))[::-1])\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(e) for e in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return int(''.join([str(x) for x in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return L[0]*10**len(L) + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def convert(e):\n        if isinstance(e, list):\n            return int(''.join([str(x) for x in e]))\n        else:\n            return int(e)\n    return convert(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # return int(''.join(L))\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    pass\n    \n    \ndef is_even(number):\n    '''\n    Write a function that takes an integer as a parameter and returns True if the parameter is an even number.\n    '''\n    pass\n    \ndef even_to_odd(number):\n    '''\n    Write a function that takes an even number and returns the number to the odd.\n    '''\n    pass\n    \ndef multiply_by_two(number):\n    '''\n    Write a function that takes a number as a parameter and returns the number multiplied by two.\n    '''\n    pass\n    \ndef is_prime(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a prime number.\n    '''\n    pass\n    \ndef is_even(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is an even number.\n    '''\n    pass\n    \ndef is_odd(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is an odd number.\n    '''\n    pass\n    \ndef is_perfect(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a perfect number.\n    '''\n    pass\n    \ndef is_triangle(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a triangle number.\n    '''\n    pass\n    \ndef is_integer(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is an integer.\n    '''\n    pass\n    \ndef is_palindrome(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a palindrome number.\n    '''\n    pass\n    \ndef is_pandigital(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a pandigital number.\n    '''\n    pass\n    \ndef is_apostrophe_at_end(string):\n    '''\n    Write a function that takes a string as a parameter and returns True if the parameter ends with an apostrophe.\n    '''\n    pass\n    \ndef is_apostrophe_at_beginning(string):\n    '''\n    Write a function that takes a string as a parameter and returns True if the parameter begins with an apostrophe.\n    '''\n    pass\n    \ndef is_punctuation(string):\n    '''\n    Write a function that takes a string as a parameter and returns True if the parameter is a punctuation.\n    '''\n    pass\n    \ndef is_digit(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a digit number.\n    '''\n    pass\n    \ndef is_number(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a number.\n    '''\n    pass\n    \ndef is_number_string(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a number string.\n    '''\n    pass\n    \ndef is_number_string_format(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a number string, formatted as an integer or float.\n    '''\n    pass\n    \ndef reverse_string(string):\n    '''\n    Write a function that takes a string as a parameter and returns the string in reverse order.\n    '''\n    pass\n    \ndef string_length(string):\n    '''\n    Write a function that takes a string as a parameter and returns the length of the string.\n    '''\n    pass\n    \ndef num_to_string(number):\n    '''\n    Write a function that takes a number as a parameter and returns the string representation of that number.\n    '''\n    pass\n    \ndef is_alphanumeric(string):\n    '''\n    Write a function that takes a string as a parameter and returns True if the string contains only alphanumeric characters.\n    '''\n    pass\n    \ndef is_alphabet(string):\n    '''\n    Write a function that takes a string as a parameter and returns True if the string contains only alphabetic characters.\n    '''\n    pass\n    \ndef is_alphabetical(string):\n    '''\n    Write a function that takes a string as a parameter and returns True if the string contains only alphabetical characters.\n    '''\n    pass\n    \ndef is_alphabetical_string(string):\n    '''\n    Write a function that takes a string as a parameter and returns True if the string contains only alphabetical characters.\n    '''\n    pass\n    \ndef string_to_list(string):\n    '''\n    Write a function that takes a string as a parameter and returns a list of characters contained in that string.\n    '''\n    pass\n    \ndef list_to_string(string):\n    '''\n    Write a function that takes a string as a parameter and returns a string of characters from that list.\n    '''\n    pass\n    \ndef string_to_int(string):\n    '''\n    Write a function that takes a string as a parameter and returns an integer of the string.\n    '''\n    pass\n    \ndef int_to_string(integer):\n    '''\n    Write a function that takes a number as a parameter and returns the string representation of that number.\n    '''\n    pass\n    \ndef is_even(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is an even number.\n    '''\n    pass\n    \ndef is_odd(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is an odd number.\n    '''\n    pass\n    \ndef is_perfect(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a perfect number.\n    '''\n    pass\n    \ndef is_triangle(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a triangle number.\n    '''\n    pass\n    \ndef is_integer(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is an integer.\n    '''\n    pass\n    \ndef is_palindrome(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a palindrome number.\n    '''\n    pass\n    \ndef is_pandigital(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a pandigital number.\n    '''\n    pass\n    \ndef is_apostrophe_at_end(string):\n    '''\n    Write a function that takes a string as a parameter and returns True if the parameter ends with an apostrophe.\n    '''\n    pass\n    \ndef is_apostrophe_at_beginning(string):\n    '''\n    Write a function that takes a string as a parameter and returns True if the parameter begins with an apostrophe.\n    '''\n    pass\n    \ndef is_punctuation(string):\n    '''\n    Write a function that takes a string as a parameter and returns True if the parameter is a punctuation.\n    '''\n    pass\n    \ndef is_digit(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a digit number.\n    '''\n    pass\n    \ndef is_number(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a number.\n    '''\n    pass\n    \ndef is_number_string(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a number string.\n    '''\n    pass\n    \ndef is_number_string_format(number):\n    '''\n    Write a function that takes a number as a parameter and returns True if the parameter is a number string, formatted as an integer or float.\n    '''\n    pass\n    \ndef reverse_string(string):\n    '''\n    Write a function that takes a string as a parameter and returns the string in reverse order"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = re.compile(r'''\n    \\b([a-z]+)\\s*\n    ''', re.VERBOSE)\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #find the first adverb\n    first_adverb = re.search(r\"(?<=\\s)([a-zA-Z]*)(?=\\s[a-zA-Z]+\\s)\", text)\n    return first_adverb\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r\"([a-zA-Z]+\\s){1}[a-zA-Z]{1}\")\n    matches = pattern.findall(text)\n    print(matches)\n    return matches\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    s = text.split(' ')\n    pos = []\n    for i in range(len(s)):\n        if s[i] == 'adverb':\n            pos.append(i)\n    return pos\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\w+|[^\\w\\s]'\n    text = re.findall(pattern,text)\n    n = len(text)\n    i = 0\n    adverb_index = []\n    while i < n:\n        if text[i] in ['is','are','has','have','am','are','was','were','being','been','be','will','shall','will','would','should']:\n            adverb_index.append(i)\n            i+=1\n        else:\n            i+=1\n    return adverb_index\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    l = re.finditer(r'\\w+', text)\n    for i in l:\n        print(i.span())\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #regex_pattern = r'''(?x)    # set flag to allow verbose regexps\n    #        ([\\w]+)?         # optional\n    #        (   #start capturing group\n    #            (<V.*>)|      #<V.*> is the regex for \"a verb\"\n    #            (<N.*>)|      #<N.*> is the regex for \"a noun\"\n    #            (<A.*>)|      #<A.*> is the regex for \"an adjective\"\n    #            (<D.*>)|      #<D.*> is the regex for \"a determiner\"\n    #            (<U.*>)|      #<U.*> is the regex for \"a preposition\"\n    #            (<N.*>)|      #<N.*> is the regex for \"a noun\"\n    #            (<V.*>)|      #<V.*> is the regex for \"a verb\"\n    #            (<R.*>)|      #<R.*> is the regex for \"a adverb\"\n    #            (<N.*>)|      #<N.*> is the regex for \"a noun\"\n    #            (<.*>)|       #<.*> is the regex for \"any character\"\n    #            ([\\w]+))         # end the capturing group with a verb\n    #        |(<.*>)*      # there can be zero or more <.*>\n    #        (<.*>)?)        # <.*> is a verb or a noun or a number\n    #        '''\n    regex_pattern = r
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # print(text)\n    # print(re.search(r'(\\w*) (\\w*)', text).groups())\n    position = {}\n    position[0] = re.search(r'(\\w*) (\\w*)', text).groups()\n    position[1] = re.search(r'(\\w*) (\\w*)', text).groups()\n    return position\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text\n    words = sentence.split()\n    for i in range(0,len(words)):\n        if words[i] == \"adverb\":\n            return words[i], i\n    return None, None\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'(?<=\\s)(\\w+)', re.I)\n    text = re.sub('[\\(\\[].*?[\\)\\]]', '', text)\n    adverb = pattern.findall(text)\n    pattern_position = re.compile(r'(?<=\\s)(\\w+)(?=\\s)', re.I)\n    position = pattern_position.findall(text)\n    return adverb, position\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*6\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    print(3*l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    l=int(l)\n    s=6*l**2\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return float(count) / len(nums)\n    \ndef fraction_of_negative_numbers(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += 1\n    return float(count) / len(nums)\n    \ndef log_histogram(nums):\n    '''\n    Write a function to create a histogram of the log of a list of numbers.\n    '''\n    nums = sorted(nums)\n    hist = {}\n    for i in nums:\n        hist[i] = hist.get(i,0) + 1\n    keys = hist.keys()\n    keys.sort()\n    for i in keys:\n        print i, hist[i]\n        \ndef numbers_with_duplicates(nums):\n    '''\n    Write a function to count the number of duplicates in a list of integers.\n    '''\n    hist = {}\n    for i in nums:\n        hist[i] = hist.get(i,0) + 1\n    for i in hist:\n        if hist[i] > 1:\n            return hist[i]\n    return 0\n    \ndef max_value(nums):\n    '''\n    Write a function to find the maximum value in a list of integers.\n    '''\n    return max(nums)\n    \ndef calculate_sum(nums):\n    '''\n    Write a function to find the sum of a list of numbers.\n    '''\n    return sum(nums)\n    \ndef max_value_index(nums):\n    '''\n    Write a function to find the index of a maximum value in a list of integers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] > nums[i-1]:\n            return i\n    return len(nums)\n    \ndef is_even(n):\n    '''\n    Write a function that returns True if a number is even and False if it is odd.\n    '''\n    return n % 2 == 0\n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if a string is a palindrome and False if it is not.\n    '''\n    for i in range(len(s)/2):\n        if s[i]!= s[len(s)-1-i]:\n            return False\n    return True\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function that returns True if two strings are anagrams of each other and False if they are not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef reverse_string(s):\n    '''\n    Write a function that returns the reverse of a string.\n    '''\n    return s[::-1]\n    \ndef find_longest_string(strings):\n    '''\n    Write a function that returns the longest string in a list of strings.\n    '''\n    longest = strings[0]\n    for i in strings:\n        if len(i) > len(longest):\n            longest = i\n    return longest\n    \ndef is_permutation(s1, s2):\n    '''\n    Write a function that returns True if the two strings are permutations of each other and False if they are not.\n    '''\n    dict = {}\n    for i in s1:\n        dict[i] = dict.get(i,0) + 1\n    for i in s2:\n        if i in dict:\n            dict[i] -= 1\n        else:\n            return False\n    for i in dict:\n        if dict[i]!= 0:\n            return False\n    return True\n    \ndef is_anagram_of_permutation(s1, s2):\n    '''\n    Write a function that returns True if the two strings are anagrams of each other and False if they are not.\n    '''\n    dict = {}\n    for i in s1:\n        dict[i] = dict.get(i,0) + 1\n    for i in s2:\n        if i in dict:\n            dict[i] -= 1\n        else:\n            return False\n    for i in dict:\n        if dict[i]!= 0:\n            return False\n    return True\n    \ndef is_anagram_of_permutation2(s1, s2):\n    '''\n    Write a function that returns True if the two strings are anagrams of each other and False if they are not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef sum_of_digits(n):\n    '''\n    Write a function that returns the sum of the digits in a number.\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef sum_of_digits2(n):\n    '''\n    Write a function that returns the sum of the digits in a number.\n    '''\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\n    \ndef is_unique(n):\n    '''\n    Write a function that returns True if a number is unique and False if it is not.\n    '''\n    return len(set(str(n))) == len(str(n))\n    \ndef is_palindrome2(n):\n    '''\n    Write a function that returns True if a number is a palindrome and False if it is not.\n    '''\n    t = str(n)\n    for i in range(len(t)/2):\n        if t[i]!= t[len(t)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome3(n):\n    '''\n    Write a function that returns True if a number is a palindrome and False if it is not.\n    '''\n    t = str(n)\n    return t == t[::-1]\n    \ndef is_palindrome4(n):\n    '''\n    Write a function that returns True if a number is a palindrome and False if it is not.\n    '''\n    t = str(n)\n    for i in range(len(t)/2):\n        if t[i]!= t[len(t)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome5(n):\n    '''\n    Write a function that returns True if a number is a palindrome and False if it is not.\n    '''\n    return str(n) == str(n)[::-1]\n    \ndef is_palindrome6(n):\n    '''\n    Write a function that returns True if a number is a palindrome and False if it is not.\n    '''\n    t = str(n)\n    return t == t[::-1]\n    \ndef is_palindrome7(n):\n    '''\n    Write a function that returns True if a number is a palindrome and False if it is not.\n    '''\n    t = str(n)\n    for i in range(len(t)/2):\n        if t[i]!= t[len(t)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome8(n):\n    '''\n    Write a function that returns True if a number is a palindrome and False if it is not.\n    '''\n    t = str(n)\n    for i in range(len(t)/2):\n        if t[i]!= t[len(t)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome9(n):\n    '''\n    Write a function that returns True if a number is a palindrome and False if it is not.\n    '''\n    t = str(n)\n    return t == t[::-1]\n    \ndef is_palindrome10(n):\n    '''\n    Write a function that returns True if a number is a palindrome and False if it is not.\n    '''\n    t = str(n)\n    return t == t[::-1]\n    \ndef is_palindrome11(n):\n    ''"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    a=0\n    b=0\n    for i in nums:\n        if i>0:\n            a+=1\n        if i<0:\n            b+=1\n    return a/float(a+b)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = 0\n    for i in nums:\n        if i > 0:\n            n += 1\n    return float(n) / len(nums)\ndef func2(a, b):\n    return abs(a) + abs(b)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for i in nums:\n        if i > 0:\n            pos_count += 1\n    return pos_count/float(len(nums))\n    \ndef test():\n    assert positive_count([1,2,3,4,5]) == 0.6\n    assert positive_count([1,2,3,4,5,0,1,2,3,4,5]) == 0.6\n    assert positive_count([1,2,3,4,5,0,-1,-2,-3,-4,-5]) == 0.6\n    assert positive_count([0,1,2,3,4,5]) == 0.6\n    assert positive_count([0,1,2,3,4,5,6]) == 0.6\n    assert positive_count([0,0,0,0,0]) == 0\n    assert positive_count([0,0,0,0,0,0]) == 0\n    assert positive_count([]) == 0\n    assert positive_count([-1,-2,-3,-4,-5]) == 0\n    assert positive_count([1,2,3,4,5,6]) == 0.6\n    assert positive_count([-1,2,-3,-4,-5,-6]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0]) == 0.6\n    assert positive_count([]) == 0\n    assert positive_count([-1]) == 0\n    assert positive_count([-1,-2]) == 0\n    assert positive_count([1,2,3]) == 0.3\n    assert positive_count([-1,-2,-3]) == 0\n    assert positive_count([-1,-2,-3,-4]) == 0\n    assert positive_count([-1,-2,-3,-4,-5]) == 0\n    assert positive_count([-1,-2,-3,-4,-5,-6]) == 0\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 0\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0]) == 0\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) == 0.6\n    assert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,2"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    result = 0\n    for i in nums:\n        if i > 0:\n            result += 1\n    return result/float(len(nums))\ndef positive_ratio_solution_1(arr):\n    '''\n    Using a for loop\n    '''\n    result = 0\n    for i in arr:\n        if i > 0:\n            result += 1\n    return result/float(len(arr))\ndef positive_ratio_solution_2(arr):\n    '''\n    Using a while loop\n    '''\n    i = 0\n    while i < len(arr):\n        if arr[i] > 0:\n            i += 1\n    return i/float(len(arr))\ndef student_grade(score):\n    '''\n    Write a function that accepts a score and returns the letter grade associated with the score.\n    '''\n    if score >= 90:\n        return 'A'\n    elif score >= 80:\n        return 'B'\n    elif score >= 70:\n        return 'C'\n    elif score >= 60:\n        return 'D'\n    else:\n        return 'F'\ndef get_intersection(list1, list2):\n    '''\n    Write a function that accepts two lists and returns a list of those items that are present in both lists.\n    '''\n    if not list1:\n        return []\n    if not list2:\n        return []\n    result = []\n    for i in list1:\n        if i in list2:\n            result.append(i)\n    return result\ndef find_closest(target, arr):\n    '''\n    Write a function that accepts two arguments. The first argument is an array of integers and the second is an integer. The function should return the index of the integer within the array that is closest to the given integer.\n    '''\n    result = abs(arr[0]-target)\n    closest = 0\n    for i in range(len(arr)):\n        if abs(arr[i]-target) < result:\n            result = abs(arr[i]-target)\n            closest = i\n    return closest\ndef find_closest_2(target, arr):\n    '''\n    Write a function that accepts two arguments. The first argument is an array of integers and the second is an integer. The function should return the index of the integer within the array that is closest to the given integer.\n    '''\n    arr_len = len(arr)\n    low = 0\n    high = arr_len - 1\n    while low < high:\n        mid = (low+high)/2\n        if target == arr[mid]:\n            return mid\n        elif target < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    if abs(arr[low]-target) < abs(arr[high]-target):\n        return low\n    else:\n        return high\ndef longest_common_prefix(arr):\n    '''\n    Write a function that accepts an array of strings and returns the longest common prefix among them.\n    '''\n    if not arr:\n        return ''\n    result = arr[0]\n    for i in range(1, len(arr)):\n        while result!= arr[i][:len(result)]:\n            result = result[:len(result)-1]\n    return result\ndef longest_common_prefix_2(arr):\n    '''\n    Write a function that accepts an array of strings and returns the longest common prefix among them.\n    '''\n    if not arr:\n        return ''\n    result = arr[0]\n    for i in range(1, len(arr)):\n        while result!= arr[i][:len(result)]:\n            result = result[:len(result)-1]\n            if not result:\n                return result\n    return result\ndef is_all_upper(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    for i in str:\n        if not i.isupper():\n            return False\n    return True\ndef is_all_upper_2(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    if not str:\n        return True\n    return str.isupper()\ndef is_all_upper_3(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    return str.upper() == str\ndef is_all_upper_4(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    for i in str:\n        if i.isupper():\n            return True\n    return False\ndef is_all_upper_5(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    for i in str:\n        if not i.isupper():\n            return False\n    return True\ndef is_all_upper_6(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    if not str:\n        return True\n    return str.upper() == str\ndef is_all_upper_7(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    return str.upper() == str\ndef is_all_upper_8(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    if not str:\n        return True\n    return str.upper() == str\ndef is_all_upper_9(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    if not str:\n        return True\n    return str.upper() == str\ndef is_all_upper_10(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    if not str:\n        return True\n    for i in str:\n        if not i.isupper():\n            return False\n    return True\ndef is_all_upper_11(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    if not str:\n        return True\n    return str.upper() == str\ndef is_all_upper_12(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    if not str:\n        return True\n    return str.upper() == str\ndef is_all_upper_13(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    if not str:\n        return True\n    return str.upper() == str\ndef is_all_upper_14(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    if not str:\n        return True\n    return str.upper() == str\ndef is_all_upper_15(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    if not str:\n        return True\n    return str.upper() == str\ndef is_all_upper_16(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    if not str:\n        return True\n    return str.upper() == str\ndef is_all_upper_17(str):\n    '''\n    Write a function that accepts a string and returns true if all characters in the string are upper case and false otherwise.\n    '''\n    if not str:\n        return True\n    return str.upper() == str\ndef is_all_upper_18(str):\n    '''\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    for i in nums:\n        if i > 0:\n            positive += 1\n        elif i < 0:\n            negative += 1\n    return positive/negative\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for x in nums:\n        if x > 0:\n            positive_count += 1\n    return float(positive_count) / len(nums)\n    \ndef sum_of_squares(nums):\n    '''\n    Write a function to calculate the sum of the squares of all the elements in an array.\n    '''\n    squares = []\n    for x in nums:\n        squares.append(x*x)\n    return sum(squares)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -999999999\n    for i in list1:\n        if i < max and i!= 0:\n            max = i\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg=list1[0]\n    for i in list1:\n        if i < 0:\n            max_neg=i\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_negative = -1*(10**10)\n    for item in list1:\n        if item < 0 and item > max_negative:\n            max_negative = item\n    return max_negative\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Your code here\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            return list1[i]\n    return \"Empty list\"\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sorted(list1, reverse=True)[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1==None:\n        return None\n    max_num = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > max_num:\n            max_num = list1[i]\n    return max_num\n    \ndef square(list1):\n    '''\n    Write a python function to find the square of each element of the list.\n    '''\n    if list1==None:\n        return None\n    for i in range(len(list1)):\n        list1[i] = list1[i]*list1[i]\n    return list1\n    \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from the list.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n    return list2\n    \ndef palindrome(list1):\n    '''\n    Write a python function to check if the list is palindrome or not.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[i])\n    list2.reverse()\n    if list1 == list2:\n        return True\n    else:\n        return False\n    \ndef subset(list1,list2):\n    '''\n    Write a python function to check if the list1 is subset of list2 or not.\n    '''\n    if list1==None:\n        return None\n    list3 = []\n    for i in range(len(list1)):\n        list3.append(list1[i])\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            return False\n    return True\n    \ndef count_even(list1):\n    '''\n    Write a python function to count the even numbers in the list.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            list2.append(list1[i])\n    return len(list2)\n    \ndef count_odd(list1):\n    '''\n    Write a python function to count the odd numbers in the list.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            list2.append(list1[i])\n    return len(list2)\n    \ndef count_vowels(list1):\n    '''\n    Write a python function to count the vowels in the list.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] in ['a','e','i','o','u']:\n            list2.append(list1[i])\n    return len(list2)\n    \ndef get_digit_count(list1):\n    '''\n    Write a python function to count the number of digits in the list.\n    '''\n    if list1==None:\n        return None\n    count = 0\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            count+=1\n    return count\n    \ndef sum_of_digit(list1):\n    '''\n    Write a python function to find the sum of digits in the list.\n    '''\n    if list1==None:\n        return None\n    sum_of_digit = 0\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            sum_of_digit += int(list1[i])\n    return sum_of_digit\n    \ndef count_numbers(list1):\n    '''\n    Write a python function to count the numbers in the list.\n    '''\n    if list1==None:\n        return None\n    count = 0\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            count+=1\n    return count\n    \ndef get_digits(list1):\n    '''\n    Write a python function to get digits from the list.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            list2.append(list1[i])\n    return list2\n    \ndef get_characters(list1):\n    '''\n    Write a python function to get characters from the list.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        if not list1[i].isdigit():\n            list2.append(list1[i])\n    return list2\n    \ndef get_palindromes(list1):\n    '''\n    Write a python function to get palindromes from the list.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] == list1[i][::-1]:\n            list2.append(list1[i])\n    return list2\n    \ndef get_capital_letters(list1):\n    '''\n    Write a python function to get capital letters from the list.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i].isupper():\n            list2.append(list1[i])\n    return list2\n    \ndef get_lower_case_letters(list1):\n    '''\n    Write a python function to get lower case letters from the list.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i].islower():\n            list2.append(list1[i])\n    return list2\n    \ndef get_integer(list1):\n    '''\n    Write a python function to get integers from the list.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            list2.append(list1[i])\n    return list2\n    \ndef get_alphas(list1):\n    '''\n    Write a python function to get alphabets from the list.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i].isalpha():\n            list2.append(list1[i])\n    return list2\n    \ndef get_lowercase_alphas(list1):\n    '''\n    Write a python function to get lowercase alphabets from the list.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i].isalpha() and list1[i].islower():\n            list2.append(list1[i])\n    return list2\n    \ndef get_uppercase_alphas(list1):\n    '''\n    Write a python function to get uppercase alphabets from the list.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i].isalpha() and list1[i].isupper():\n            list2.append(list1[i])\n    return list2\n    \ndef get_letters(list1):\n    '''\n    Write a python function to get letters from the list.\n    '''\n    if list1==None:\n        return None\n    list2 = []\n    for i in range(len(list1)):"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # if no element is present in the list return -1\n    if not list1: \n        return -1\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    if list1[0]<0:\n        return list1[0]\n    else:\n        return None\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    maximum = -10000000\n    for i in list1:\n        if i<maximum and i>=0:\n            maximum = i\n    return maximum\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    tuple_list = []\n    for i in test_list:\n        if len(i) == K:\n            tuple_list.append(i)\n    return tuple_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(t[0], t[1]) for t in test_list if t[1] <= K]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for t in test_list:\n        print t[:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    res = []\n    for i in test_list:\n        res.append(i[:K])\n    return res\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    for element in test_list:\n        element = tuple(element[:K])\n        \n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    ret = []\n    for item in test_list:\n        if len(item) < K:\n            ret.append(item)\n    return ret\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    ret_list = []\n    for element in test_list:\n        if len(element) >= K:\n            ret_list.append(element)\n    return ret_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for each_tuple in test_list:\n        new_list.append(each_tuple[:K])\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [(test_tup1[i]+test_tup2[i]) for i in range(len(test_tup1))]\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple([test_tup1[i] * test_tup2[i] for i in xrange(len(test_tup1))])\n    else:\n        raise ValueError('The tuples are of different sizes')\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    out = []\n    for i in range(len(test_tup1)):\n        out.append(test_tup1[i] * test_tup2[i])\n    return tuple(out)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n    length = length1 if length1 > length2 else length2\n    result_tup = []\n    for i in range(length):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return tuple(result_tup)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # write your logic here\n    list1 = []\n    list2 = []\n    for i in range(len(test_tup1)):\n        list1.append(test_tup1[i] * test_tup2[i])\n    return tuple(list1)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0]*test_tup2[0]+test_tup1[1]*test_tup2[1],\n    test_tup1[0]*test_tup2[1]+test_tup1[1]*test_tup2[0])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    \n    \n    \ndef main():\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    index_multiplication(test_tup1, test_tup2)\n    \n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(0, len(test_tup1)):\n        result.append(test_tup1[i]*test_tup2[i])\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in lst: \n        if i in tup: \n            print (i, \" Occurrence is : \", tup.count(i)) \n        else: \n            print (i, \" Not Found\") \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tup.count(lst) \ndef most_occuring(lst): \n    '''\n    Write a python function to count the most occuring elements of list in a tuple.\n    '''\n    return Counter(lst).most_common(1) \ndef duplicates(lst): \n    '''\n    Write a python function to count the duplicate elements of list in a tuple.\n    '''\n    return Counter(lst).keys() \ndef duplicate_removal(lst): \n    '''\n    Write a python function to remove all the duplicates from a list of tuples.\n    '''\n    return list(set(lst)) \ndef find_missing(lst): \n    '''\n    Write a python function to find the missing elements of list in a tuple.\n    '''\n    return [x for x in range(1, max(lst) + 1) if x not in lst] \ndef find_unique(lst): \n    '''\n    Write a python function to find the unique elements of list in a tuple.\n    '''\n    return [x for x in range(1, max(lst) + 1) if x not in lst] \ndef find_even(lst): \n    '''\n    Write a python function to find the even elements of list in a tuple.\n    '''\n    return [x for x in lst if x % 2 == 0] \ndef find_odd(lst): \n    '''\n    Write a python function to find the odd elements of list in a tuple.\n    '''\n    return [x for x in lst if x % 2!= 0] \ndef find_sum(lst): \n    '''\n    Write a python function to find the sum of elements of list in a tuple.\n    '''\n    return sum(lst) \ndef find_product(lst): \n    '''\n    Write a python function to find the product of elements of list in a tuple.\n    '''\n    return reduce(lambda x, y: x*y, lst) \ndef find_max(lst): \n    '''\n    Write a python function to find the maximum elements of list in a tuple.\n    '''\n    return max(lst) \ndef find_min(lst): \n    '''\n    Write a python function to find the minimum elements of list in a tuple.\n    '''\n    return min(lst) \ndef find_consecutive(lst): \n    '''\n    Write a python function to find the consecutive elements of list in a tuple.\n    '''\n    return [x for x in range(1, max(lst) + 1) if x in lst] \ndef find_clumps(lst, k): \n    '''\n    Write a python function to find the k-clumps in a tuple.\n    '''\n    for i in lst:\n        if len(i) == k:\n            print i \ndef find_split_count(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x for x in lst if len(x) == k] \ndef find_split_value(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[k-1] for x in lst if len(x) == k] \ndef find_split_index(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x for x in lst if len(x) == k] \ndef find_split_ranges(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[-1] for x in lst if len(x) == k] \ndef find_split_digit(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[k-1] for x in lst if len(x) == k] \ndef find_split_digits(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[-1] for x in lst if len(x) == k] \ndef find_split_number(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[k-1] for x in lst if len(x) == k] \ndef find_split_numbers(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[k-1] for x in lst if len(x) == k] \ndef find_count_numbers(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[-1] for x in lst if len(x) == k] \ndef find_index_numbers(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[-1] for x in lst if len(x) == k] \ndef find_split_indexes(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[-1] for x in lst if len(x) == k] \ndef find_split_tuple(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[k-1] for x in lst if len(x) == k] \ndef find_split_tuples(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[k-1] for x in lst if len(x) == k] \ndef find_split_string(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[k-1] for x in lst if len(x) == k] \ndef find_split_strings(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[k-1] for x in lst if len(x) == k] \ndef find_split_occurrence(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[-1] for x in lst if len(x) == k] \ndef find_split_occurrence_count(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[-1] for x in lst if len(x) == k] \ndef find_split_occurrence_count_2(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[-1] for x in lst if len(x) == k] \ndef find_split_occurrence_count_3(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[-1] for x in lst if len(x) == k] \ndef find_split_occurrence_count_4(lst, k): \n    '''\n    Write a python function to find the k-splits in a tuple.\n    '''\n    return [x[-1] for x in lst if len(x) == k] \ndef find_split_occurrence_count_5(lst, k): \n    '''\n    Write a python function t"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len([i for i in lst if i == tup]) \ndef split_words(sentence): \n    '''\n    Write a python function to split the input sentence into words. \n    '''\n    return sentence.split()\ndef words_Count_Map(tup): \n    '''\n    Write a python function to count the occurence of each word in a tuple. \n    '''\n    return Counter(tup) \ndef Most_Common(tup, limit): \n    '''\n    Write a python function to print the most common words in a tuple. \n    '''\n    return tup.most_common(limit) \ndef count_Occurrence_in_file(tup, filename): \n    '''\n    Write a python function to count the occurence of each word in a tuple in a file. \n    '''\n    with open(filename, 'r') as f: \n        lst = f.readlines() \n        count = 0 \n        for i in lst: \n            lst2 = i.split() \n            for j in tup: \n                if j in lst2: \n                    count += 1 \n    return count \ndef most_Common_in_file(tup, filename, limit): \n    '''\n    Write a python function to print the most common words in a tuple in a file. \n    '''\n    with open(filename, 'r') as f: \n        lst = f.readlines() \n        count = 0 \n        for i in lst: \n            lst2 = i.split() \n            for j in tup: \n                if j in lst2: \n                    count += 1 \n    return tup.most_common(limit) \ndef main(): \n    sentence = raw_input('Enter a sentence: ') \n    words = split_words(sentence) \n    count_words = words_Count_Map(words) \n    print 'The most common words are:' \n    for i in Most_Common(count_words, 3): \n        print'', i[0] \n    lst = [2, 3, 4, 4, 5, 4, 4, 4, 5, 2, 3, 2, 2] \n    print 'The count of Occurrence of each word is:' \n    print '\\n', count_Occurrence(lst, count_words) \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text2.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text3.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text4.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text5.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text6.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text7.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text8.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text9.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text10.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text11.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text12.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text13.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text14.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text15.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text16.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text17.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text18.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text19.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text20.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text21.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text22.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text23.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text24.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text25.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text26.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text27.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text28.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text29.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text30.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text31.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text32.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text33.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text34.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text35.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text36.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text37.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text38.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text39.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text40.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text41.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text42.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text43.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text44.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text45.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text46.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text47.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text48.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text49.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text50.txt') \n    print '\\n', count_Occurrence_in_file(lst, 'd:/text51.txt'"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return count \ndef remove_duplicates(lst): \n    '''\n    Write a python function to remove duplicates elements in a list.\n    '''\n    return list(set(lst))\ndef print_list_elem(lst, index): \n    '''\n    Write a python function to print a particular element in a list.\n    '''\n    print (lst[index])\ndef reverse_string(string): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return string[::-1]\ndef is_palindrome(string): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    return string == reverse_string(string)\ndef is_numeric(string): \n    '''\n    Write a python function to check if a string is numeric or not.\n    '''\n    try:\n        float(string)\n        return True\n    except:\n        return False\ndef is_leap_year(year): \n    '''\n    Write a python function to check if a year is leap year or not.\n    '''\n    return (year % 4 == 0 and year % 100!= 0) or year % 400 == 0\ndef is_palindrome_sentence(string): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    return string == reverse_string(string)\ndef count_non_vowels(string): \n    '''\n    Write a python function to count non vowels in a string.\n    '''\n    return len(string) - count_Occurrence(string, \"aeiouAEIOU\")\ndef count_vowels(string): \n    '''\n    Write a python function to count vowels in a string.\n    '''\n    return count_Occurrence(string, \"aeiouAEIOU\")\ndef alphabet_position(string): \n    '''\n    Write a python function to find alphabet position of each character of a string.\n    '''\n    return ''.join(str(ord(i) - ord('a') + 1) for i in string.lower())\ndef hourglass_sum(array): \n    '''\n    Write a python function to find the hourglass sum of a 6x6 array.\n    '''\n    return (array[0][0] + array[1][1] + array[2][2] + array[3][3] + array[4][4] + array[5][5]) + (array[0][5] + array[1][4] + array[2][3] + array[3][2] + array[4][1] + array[5][0])\ndef make_absolute(num): \n    '''\n    Write a python function to return absolute value of a number.\n    '''\n    return abs(num)\ndef palindrome_permutation(string): \n    '''\n    Write a python function to check if a string is palindrome permutation or not.\n    '''\n    return Counter(string) == Counter(reverse_string(string))\ndef find_occurence(lst, num): \n    '''\n    Write a python function to find the index of a particular element in a list.\n    '''\n    return lst.index(num)\ndef is_permutation(lst1, lst2): \n    '''\n    Write a python function to check if two lists are permutations of each other.\n    '''\n    return Counter(lst1) == Counter(lst2)\ndef compute_average(lst): \n    '''\n    Write a python function to compute average of a list.\n    '''\n    return sum(lst)/float(len(lst))\ndef compute_average_of_even_numbers(lst): \n    '''\n    Write a python function to compute average of all even numbers in a list.\n    '''\n    return compute_average([i for i in lst if i%2 == 0])\ndef smallest_difference(lst1, lst2): \n    '''\n    Write a python function to find the smallest difference between 2 lists.\n    '''\n    return min([abs(i-j) for i in lst1 for j in lst2])\ndef find_missing_letter(string1, string2): \n    '''\n    Write a python function to find the missing letter in 2 strings.\n    '''\n    return [i for i in string1 if i not in string2][0]\ndef is_isogram(string): \n    '''\n    Write a python function to check if a string is isogram or not.\n    '''\n    return len(string) == len(remove_duplicates(string))\ndef factorial(n): \n    '''\n    Write a python function to find factorial of a number.\n    '''\n    return reduce(lambda x,y:x*y, range(1, n+1))\ndef is_prime(n): \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    return n > 1 and all(n%i for i in range(2,n))\ndef sum_n_numbers(n): \n    '''\n    Write a python function to find sum of n numbers.\n    '''\n    return n * (n+1) / 2\ndef max_digit(num): \n    '''\n    Write a python function to find the max digit of a number.\n    '''\n    return int(max(str(num)))\ndef max_number_of_consecutive_ones(n): \n    '''\n    Write a python function to find max number of consecutive 1's in a number.\n    '''\n    count = 0\n    while n: \n        n &= n - 1\n        count += 1\n    return count\ndef is_powerful(number): \n    '''\n    Write a python function to check if a number is powerful or not.\n    '''\n    if number == 1:\n        return False\n    elif number == 2 or number == 5:\n        return True\n    elif number%2 == 0:\n        return is_powerful(number/2)\n    elif number%5 == 0:\n        return is_powerful(number/5)\n    else:\n        return False\ndef is_perfect(number): \n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    return sum_n_numbers(number) == number\ndef is_an_abundant_number(number): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    return sum_n_numbers(number) > number\ndef is_abundant_number(number): \n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    return sum_n_numbers(number) > number and is_an_abundant_number(number)\ndef is_anti_abundant_number(number): \n    '''\n    Write a python function to check if a number is anti abundant or not.\n    '''\n    return sum_n_numbers(number) < number and is_an_abundant_number(number)\ndef is_antiabundant_number(number): \n    '''\n    Write a python function to check if a number is anti abundant or not.\n    '''\n    return sum_n_numbers(number) < number and is_anti_abundant_number(number)\ndef is_antidigit_number(number): \n    '''\n    Write a python function to check if a number is antidigit or not.\n    '''\n    return not any(int(i) for i in str(number))\ndef is_anti_digit_number(number): \n    '''\n    Write a python function to check if a number is antidigit or not.\n    '''\n    return not any(int(i) for i in str(number)) and is_antidigit_number(number)\ndef is_arithmatic_number(number): \n    '''\n    Write a python function to check if a number is arithmatic or not.\n    '''\n    return sum_n_number"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len([item for item in tup if item in lst])\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup = str(tup)\n    lst = str(lst)\n    if (lst not in tup) and (lst not in str(tup)):\n        lst = lst[0].upper() + lst[1:]\n        tup = tup[0].upper() + tup[1:]\n        if (tup not in lst) and (lst not in tup):\n            lst = lst[0].upper() + lst[1:]\n            tup = tup[0].upper() + tup[1:]\n    return Counter(tup)[lst]\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    ans = 0\n    for x in lst: \n        if x == tup: \n            ans+=1\n    return ans\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_count = Counter(lst) \n    lst_count.update(tup) \n    return lst_count\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    list1 = [num ** 3 for num in nums]\n    return list1\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print('\\nCube of individual elements in a list:')\n    for i in nums:\n        print(i ** 3)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    output = []\n    for num in nums:\n        output.append(num**3)\n    return output\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in range(len(nums)):\n        cubes.append(nums[i]**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**3\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for item in nums:\n        result.append(item**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_dict = {}\n    for num in nums:\n        cube_dict[num] = num**3\n    return cube_dict\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    i = 1\n    sum = 0\n    while i < n:\n        k = 0\n        sum = 0\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    return sum\n    \n    \ndef find_perrin_number():\n    '''\n    Write a function to find all the perrin numbers within a given range.\n    '''\n    range = input(\"Enter range:\")\n    i = 0\n    while i < range:\n        k = 0\n        sum = 0\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef is_perrin_number():\n    '''\n    Write a function to find if a given number is a perrin number or not.\n    '''\n    number = input(\"Enter the number:\")\n    i = 1\n    sum = 0\n    while i < number:\n        k = 0\n        sum = 0\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \n    \ndef find_perfect_number():\n    '''\n    Write a function to find all the perfect numbers within a given range.\n    '''\n    range = input(\"Enter the range:\")\n    i = 1\n    sum = 0\n    while i < range:\n        k = 0\n        sum = 0\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef find_perfect_number_factors():\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    number = input(\"Enter the number:\")\n    i = 1\n    sum = 0\n    while i < number:\n        k = 0\n        sum = 0\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef is_perfect_number():\n    '''\n    Write a function to find if a given number is a perfect number or not.\n    '''\n    number = input(\"Enter the number:\")\n    i = 1\n    sum = 0\n    while i < number:\n        k = 0\n        sum = 0\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef find_perfect_number_factors():\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    number = input(\"Enter the number:\")\n    i = 1\n    sum = 0\n    while i < number:\n        k = 0\n        sum = 0\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef find_perfect_number_factors_v2():\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    number = input(\"Enter the number:\")\n    i = 1\n    sum = 0\n    while i < number:\n        k = 1\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef find_perfect_number_factors_v3():\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    number = input(\"Enter the number:\")\n    i = 1\n    sum = 0\n    while i < number:\n        k = 1\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef find_perfect_number_factors_v4():\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    number = input(\"Enter the number:\")\n    i = 1\n    sum = 0\n    while i < number:\n        k = 1\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef find_perfect_number_factors_v5():\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    number = input(\"Enter the number:\")\n    i = 1\n    sum = 0\n    while i < number:\n        k = 1\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef find_perfect_number_factors_v6():\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    number = input(\"Enter the number:\")\n    i = 1\n    sum = 0\n    while i < number:\n        k = 1\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef find_perfect_number_factors_v7():\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    number = input(\"Enter the number:\")\n    i = 1\n    sum = 0\n    while i < number:\n        k = 1\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef find_perfect_number_factors_v8():\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    number = input(\"Enter the number:\")\n    i = 1\n    sum = 0\n    while i < number:\n        k = 1\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef find_perfect_number_factors_v9():\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    number = input(\"Enter the number:\")\n    i = 1\n    sum = 0\n    while i < number:\n        k = 1\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef find_perfect_number_factors_v10():\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    number = input(\"Enter the number:\")\n    i = 1\n    sum = 0\n    while i < number:\n        k = 1\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef find_perfect_number_factors_v11():\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    number = input(\"Enter the number:\")\n    i = 1\n    sum = 0\n    while i < number:\n        k = 1\n        while k < i:\n            if i % k == 0:\n                sum = sum + k\n            k += 1\n        if sum == i:\n            print(i)\n        i += 1\n    \n    \ndef find_perfect_number_factors_v12():\n    '''"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1))/2\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    assert type(n) is int\n    sum_numbers = 0\n    for i in range(n):\n        if i % 3 == 2 or i % 5 == 2:\n            sum_numbers += i\n        else:\n            sum_numbers += 0\n    return sum_numbers\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    return cal_sum(n-1) + n\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s += i + 1\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * (n+1) / 2\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n: \n        sum += i\n        i += 2\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def perrin_sum(n): \n        if n <= 3: return n\n        if n%2 == 0: \n            return n + perrin_sum(n-1)\n        else: \n            return perrin_sum(n-1) + n\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start = 0\n    end = l\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[l[0]:l[1]]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[:l] for x in str]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i[0:l] for i in str]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return''.join([str[i:i+l] for i in range(0, len(str), l)])\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    def helper(l, size):\n        if len(l) == size:\n            return l\n        else:\n            return helper(l[1:], size)\n    \n    def helper2(l, size):\n        if len(l) == size:\n            return [l]\n        else:\n            return helper(l[1:], size) + helper2(l[1:], size)\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        if len(s) < l:\n            result.append(s)\n        else:\n            result.append(s[:l])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) <= l:\n        return str\n    else:\n        return str[0:l] + extract_string(str[l:], l)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+', '', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(' ', '')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    text2 = re.sub(pattern, '', text1)\n    print(\"The string after removing all the whitespaces is {}\".format(text2))\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = ''.join(text1.split())\n    return text\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount < 0:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return abs(actual_cost - sale_amount)\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost!= sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0\n    \ndef loss_percent(loss_amount,actual_cost): \n    '''\n    Write a function that gives loss percentage on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost!= loss_amount:\n        loss_percent = loss_amount * 100 / actual_cost\n        return loss_percent\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return 0 if actual_cost > sale_amount else sale_amount - actual_cost\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            if i%2 == 0 :\n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for x in range(2, (int)(math.sqrt(n))+1): \n        if (n % x == 0): \n            if ((n / x) % 2 == 0): \n                s = s + x + (n / x) \n            else: \n                s = s + x \n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(2*x for x in range(1, n+1) if n % x == 0) \n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,(n // 2) + 1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(n % i == 0):\n            if (i % 2 == 0):\n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n==0:\n        return 0\n    total = 1\n    for i in range(2, n/2 + 1):\n        if n % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n%2 == 0 : \n        return 0\n    else : \n        return ((n/2) + 1)*(n/2) \ndef findSum(num) : \n    '''\n    Write a python function to find the sum of first n numbers \n    where n is a power of 2.\n    '''\n    if num%2 == 1 : \n        return num/2 + 1\n    else : \n        return num/2\ndef findPrimeFactors(num) : \n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    if num%2 == 0 : \n        print 2\n    while num%2 == 0 : \n        print 2\n        num = num/2\n    for i in range(3,int(math.sqrt(num))+1,2) : \n        while num%i == 0 : \n            print i\n            num = num/i\n    if num > 2 : \n        print num\ndef printfactors(num) : \n    '''\n    Write a python function to print all the factors of a number\n    '''\n    for i in range(1,num+1) : \n        if num%i == 0 : \n            print i\ndef sumofDigits(num) : \n    '''\n    Write a python function to find the sum of the digits of a number\n    '''\n    sum = 0\n    while num > 0 : \n        sum = sum + num%10\n        num = num/10\n    return sum\ndef factorial(num) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if num == 1 : \n        return 1\n    else : \n        return num*factorial(num-1)\ndef factorialRecursion(num) : \n    '''\n    Write a python function to find the factorial of a number using recursion.\n    '''\n    if num == 1 : \n        return 1\n    else : \n        return num*factorialRecursion(num-1)\ndef palindrome(str) : \n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if len(str) == 0 : \n        return True\n    elif str[0]!= str[-1] : \n        return False\n    else : \n        return palindrome(str[1:-1])\ndef palindromeRecursion(str) : \n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if len(str) == 0 : \n        return True\n    elif str[0]!= str[-1] : \n        return False\n    else : \n        return palindromeRecursion(str[1:-1])\ndef bfs(graph, start, destination) : \n    '''\n    Write a python function to return the shortest path between two vertices using breadth first search.\n    '''\n    queue = []\n    visited = []\n    graph[start] = [start]\n    visited.append(start)\n    queue.append(start)\n    while queue : \n        current = queue.pop(0)\n        for neighbour in graph[current] : \n            if neighbour == destination : \n                return graph[current]\n            if neighbour not in visited : \n                graph[neighbour] = [current]\n                graph[current].append(neighbour)\n                visited.append(neighbour)\n                queue.append(neighbour)\ndef bfsRecursive(graph, start, destination) : \n    '''\n    Write a python function to return the shortest path between two vertices using breadth first search.\n    '''\n    queue = []\n    visited = []\n    graph[start] = [start]\n    visited.append(start)\n    queue.append(start)\n    while queue : \n        current = queue.pop(0)\n        for neighbour in graph[current] : \n            if neighbour == destination : \n                return graph[current]\n            if neighbour not in visited : \n                graph[neighbour] = [current]\n                graph[current].append(neighbour)\n                visited.append(neighbour)\n                queue.append(neighbour)\ndef dijkstra(graph, start, destination) : \n    '''\n    Write a python function to return the shortest path between two vertices using Dijkstra's algorithm.\n    '''\n    queue = []\n    visited = []\n    graph[start] = [start]\n    visited.append(start)\n    queue.append(start)\n    while queue : \n        current = queue.pop(0)\n        for neighbour in graph[current] : \n            if neighbour == destination : \n                return graph[current]\n            if neighbour not in visited : \n                graph[neighbour] = [current]\n                graph[current].append(neighbour)\n                visited.append(neighbour)\n                queue.append(neighbour)\ndef dijkstraRecursive(graph, start, destination) : \n    '''\n    Write a python function to return the shortest path between two vertices using Dijkstra's algorithm.\n    '''\n    queue = []\n    visited = []\n    graph[start] = [start]\n    visited.append(start)\n    queue.append(start)\n    while queue : \n        current = queue.pop(0)\n        for neighbour in graph[current] : \n            if neighbour == destination : \n                return graph[current]\n            if neighbour not in visited : \n                graph[neighbour] = [current]\n                graph[current].append(neighbour)\n                visited.append(neighbour)\n                queue.append(neighbour)\ndef longestPath(graph) : \n    '''\n    Write a python function to return the longest path between two vertices in a graph using Dijkstra's algorithm.\n    '''\n    maxpath = 0\n    for i in range(1,len(graph)) : \n        for j in range(1,len(graph)) : \n            if i!= j : \n                path = dijkstraRecursive(graph,i,j)\n                if len(path) > maxpath : \n                    maxpath = len(path)\n    return maxpath\ndef longestPathRecursive(graph) : \n    '''\n    Write a python function to return the longest path between two vertices in a graph using Dijkstra's algorithm.\n    '''\n    maxpath = 0\n    for i in range(1,len(graph)) : \n        for j in range(1,len(graph)) : \n            if i!= j : \n                path = dijkstraRecursive(graph,i,j)\n                if len(path) > maxpath : \n                    maxpath = len(path)\n    return maxpath\ndef spiralTraversal(graph) : \n    '''\n    Write a python function to traverse the graph in spiral order.\n    '''\n    pass\ndef spiralTraversalRecursive(graph) : \n    '''\n    Write a python function to traverse the graph in spiral order.\n    '''\n    pass\ndef transposeGraph(graph) : \n    '''\n    Write a python function to transpose the graph.\n    '''\n    transpose = {}\n    for i in graph : \n        if i not in transpose : \n            transpose[i] = [i]\n        for j in graph[i] : \n            if j not in transpose : \n                transpose[j] = [i]\n            transpose[j].append(i)\n    return transpose\ndef transposeGraphRecursive(graph) : \n    '''\n    Write a python function to transpose the graph.\n    '''\n    transpose = {}\n    for i in graph : \n        if i not in transpose : \n            transpose[i] = [i]\n        for j in graph[i] : \n            if j not in transpose : \n                transpose[j] = [i]\n            transpose[j].append(i)\n    return transpose\ndef matrixMultiplication(graph) : \n    '''\n    Write a python function to multiply two matrices.\n    '''\n    firstMatrix = {}\n    secondMatrix = {}\n    matrix1 = raw_input(\"Enter the first matrix : "
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            else:\n                sum += n/i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n%2 == 0:\n        return 2 + sumofFactors(n/2)\n    return sumofFactors(n-1) + 1\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # your code here\n    return re.search(r'\\w*z\\w*', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.search(r'\\b(\\w*z)\\w*', text)\n    if regx:\n        print(regx.group(1))\n        return regx.group(1)\n    else:\n        return 'No match'\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z+',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    r = re.compile(r'\\b[a-z]z\\b')\n    return r.search(text)\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint(text_match_wordz('The quick zit pzadfqz'))\nprint"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r\"\\b[a-z]*z\\b\", re.IGNORECASE)\n    result = pattern.findall(text)\n    if len(result) > 0:\n        print(result)\n    else:\n        print(\"No word found\")\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    words = re.findall(r'\\b[a-z][z]+\\b', text)\n    return words\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    return re.search('[a-z]+z',text)\n    \n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall('\\w+\\s*z',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b(?:z*\\w+)\\b')\n    match = pattern.search(text)\n    if match:\n        print('Found match!', match.group(1))\n    else:\n        print('No match found!')\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\b[a-z]+[z]+\\b', text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Write your logic here\n    if (monthnum2 <= 0):\n        return -1\n    elif (monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12):\n        return 31\n    else:\n        return 30\ndef print_date(monthnum2,daynum2):\n    '''\n    Write a function to print the given month and day number as date.\n    '''\n    # Write your logic here\n    month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n    if (daynum2 <= 31):\n        print(\"{} {}\".format(month[monthnum2-1],daynum2))\n    else:\n        print(\"{} {}\".format(month[monthnum2-1],daynum2-31))\ndef get_day(monthnum2,daynum2):\n    '''\n    Write a function to get the day number from the given month and day number.\n    '''\n    # Write your logic here\n    if (daynum2 <= 31):\n        return daynum2\n    else:\n        return 31\ndef check_date(monthnum2,daynum2):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    # Write your logic here\n    if (daynum2 <= check_monthnumb_number(monthnum2)):\n        return 1\n    else:\n        return 0\ndef print_days(monthnum2,daynum2):\n    '''\n    Write a function to print the month number and day number in the format DD Mmm YY.\n    '''\n    # Write your logic here\n    day = check_date(monthnum2,daynum2)\n    if (day == 1):\n        print_date(monthnum2,daynum2)\n        print(daynum2,end=\"\")\n        print(\" days of \",end=\"\")\n        month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n        print(\"{} \".format(month[monthnum2-1]))\n    else:\n        print_date(monthnum2,daynum2)\n        print(daynum2-check_monthnumb_number(monthnum2),end=\"\")\n        print(\" days of \",end=\"\")\n        month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n        print(\"{} \".format(month[monthnum2-1]))\ndef get_month_number(month_name):\n    '''\n    Write a function to get the month number from the given month name.\n    '''\n    # Write your logic here\n    month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n    if (month_name == \"January\" or month_name == \"March\" or month_name == \"May\" or month_name == \"July\" or month_name == \"August\" or month_name == \"October\" or month_name == \"December\"):\n        return 1\n    elif (month_name == \"February\"):\n        return 2\n    elif (month_name == \"April\" or month_name == \"June\" or month_name == \"September\" or month_name == \"November\"):\n        return 3\n    else:\n        return 4\ndef check_month_name(month_name):\n    '''\n    Write a function to check whether the given month name is valid or not.\n    '''\n    # Write your logic here\n    if (month_name == \"January\" or month_name == \"March\" or month_name == \"May\" or month_name == \"July\" or month_name == \"August\" or month_name == \"October\" or month_name == \"December\"):\n        return 1\n    else:\n        return 0\ndef print_month_name(month_name):\n    '''\n    Write a function to print the month name in the format DD Mmm YY.\n    '''\n    # Write your logic here\n    day = check_date(get_month_number(month_name),31)\n    if (day == 1):\n        print_date(get_month_number(month_name),day)\n        print(day,end=\"\")\n        print(\" days of \",end=\"\")\n        print(month_name)\n    else:\n        print_date(get_month_number(month_name),day)\n        print(day-31,end=\"\")\n        print(\" days of \",end=\"\")\n        print(month_name)\ndef get_day_number(day_name):\n    '''\n    Write a function to get the day number from the given day name.\n    '''\n    # Write your logic here\n    day = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n    if (day_name == \"Sunday\" or day_name == \"Monday\" or day_name == \"Tuesday\" or day_name == \"Wednesday\" or day_name == \"Thursday\" or day_name == \"Friday\" or day_name == \"Saturday\"):\n        return 1\n    else:\n        return 0\ndef check_day_name(day_name):\n    '''\n    Write a function to check whether the given day name is valid or not.\n    '''\n    # Write your logic here\n    if (day_name == \"Sunday\" or day_name == \"Monday\" or day_name == \"Tuesday\" or day_name == \"Wednesday\" or day_name == \"Thursday\" or day_name == \"Friday\" or day_name == \"Saturday\"):\n        return 1\n    else:\n        return 0\ndef print_day_name(day_name):\n    '''\n    Write a function to print the day name in the format DD Mmm YY.\n    '''\n    # Write your logic here\n    day = check_day_name(day_name)\n    if (day == 1):\n        print_date(get_month_number(day_name),1)\n        print(day_name,end=\"\")\n        print(\" days of \",end=\"\")\n        month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n        print(\"{} \".format(month[get_month_number(day_name)-1]))\n    else:\n        print_date(get_month_number(day_name),1)\n        print(day_name,end=\"\")\n        print(\" days of \",end=\"\")\n        month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n        print(\"{} \".format(month[get_month_number(day_name)-1]))\ndef get_next_date(monthnum2,daynum2):\n    '''\n    Write a function to get the next date from the given month and day number.\n    '''\n    # Write your logic here\n    day = check_date(monthnum2,daynum2)\n    if (day == 1):\n        daynum2 += 1\n        if (daynum2 <= 31):\n            return daynum2\n        else:\n            daynum2 = 1\n            if (monthnum2 == 12):\n                return 1\n            else:\n                monthnum2 += 1\n                return 2\n    else:\n        daynum2 += 1\n        if (daynum2 <= check_monthnumb_number(monthnum2)):\n            return daynum2\n        else:\n            daynum2 = 1\n            if (monthnum2 == 12):\n                return 1\n            else:\n                monthnum2 += 1\n                return 2\ndef print_next_date(monthnum2,daynum2):\n    '''\n    Write a function to print the next date from the given month and day number.\n    '''\n    # Write your logic here\n    day = check_date(monthnum2,daynum2)\n    if (day == 1):\n        print_date(monthnum2,daynum2)\n        print(daynum2,end=\"\")\n        print(\" days of \",end=\"\")\n        month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n        print(\"{} \".format(month[monthnum2-1]))\n        daynum2 += 1\n    else:\n        print_date(monthnum2,daynum2)\n    "
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print(\"January has 31 days\")\n    elif monthnum2 == 2:\n        print(\"February has 28 days\")\n    elif monthnum2 == 3:\n        print(\"March has 31 days\")\n    elif monthnum2 == 4:\n        print(\"April has 30 days\")\n    elif monthnum2 == 5:\n        print(\"May has 31 days\")\n    elif monthnum2 == 6:\n        print(\"June has 30 days\")\n    elif monthnum2 == 7:\n        print(\"July has 31 days\")\n    elif monthnum2 == 8:\n        print(\"August has 31 days\")\n    elif monthnum2 == 9:\n        print(\"September has 30 days\")\n    elif monthnum2 == 10:\n        print(\"October has 31 days\")\n    elif monthnum2 == 11:\n        print(\"November has 30 days\")\n    elif monthnum2 == 12:\n        print(\"December has 31 days\")\n    else:\n        print(\"Month number is wrong\")\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # The default value of the function is False.\n    # It should return True or False.\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        if year > 0:\n            if monthnum2 > 1:\n                print(\"The number of days in the month is: 31\")\n            elif monthnum2 == 1:\n                print(\"The number of days in the month is: 31\")\n            elif monthnum2 == 3:\n                print(\"The number of days in the month is: 31\")\n            elif monthnum2 == 5:\n                print(\"The number of days in the month is: 31\")\n            elif monthnum2 == 7:\n                print(\"The number of days in the month is: 31\")\n            elif monthnum2 == 8:\n                print(\"The number of days in the month is: 31\")\n            elif monthnum2 == 10:\n                print(\"The number of days in the month is: 31\")\n            elif monthnum2 == 12:\n                print(\"The number of days in the month is: 31\")\n            else:\n                print(\"Invalid month number\")\n        else:\n            if monthnum2 > 1:\n                print(\"The number of days in the month is: 31\")\n            elif monthnum2 == 1:\n                print(\"The number of days in the month is: 31\")\n            elif monthnum2 == 3:\n                print(\"The number of days in the month is: 31\")\n            elif monthnum2 == 5:\n                print(\"The number of days in the month is: 31\")\n            elif monthnum2 == 7:\n                print(\"The number of days in the month is: 31\")\n            elif monthnum2 == 8:\n                print(\"The number of days in the month is: 31\")\n            elif monthnum2 == 10:\n                print(\"The number of days in the month is: 31\")\n            elif monthnum2 == 12:\n                print(\"The number of days in the month is: 31\")\n            else:\n                print(\"Invalid month number\")\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        if year > 0:\n            if monthnum2 > 1:\n                print(\"The number of days in the month is: 30\")\n            elif monthnum2 == 1:\n                print(\"The number of days in the month is: 30\")\n            elif monthnum2 == 4:\n                print(\"The number of days in the month is: 30\")\n            elif monthnum2 == 6:\n                print(\"The number of days in the month is: 30\")\n            elif monthnum2 == 9:\n                print(\"The number of days in the month is: 30\")\n            elif monthnum2 == 11:\n                print(\"The number of days in the month is: 30\")\n            else:\n                print(\"Invalid month number\")\n        else:\n            if monthnum2 > 1:\n                print(\"The number of days in the month is: 30\")\n            elif monthnum2 == 1:\n                print(\"The number of days in the month is: 30\")\n            elif monthnum2 == 4:\n                print(\"The number of days in the month is: 30\")\n            elif monthnum2 == 6:\n                print(\"The number of days in the month is: 30\")\n            elif monthnum2 == 9:\n                print(\"The number of days in the month is: 30\")\n            elif monthnum2 == 11:\n                print(\"The number of days in the month is: 30\")\n            else:\n                print(\"Invalid month number\")\n    else:\n        if year > 0:\n            if monthnum2 > 1:\n                print(\"The number of days in the month is: 29\")\n            elif monthnum2 == 1:\n                print(\"The number of days in the month is: 29\")\n            elif monthnum2 == 4:\n                print(\"The number of days in the month is: 29\")\n            elif monthnum2 == 6:\n                print(\"The number of days in the month is: 29\")\n            elif monthnum2 == 9:\n                print(\"The number of days in the month is: 29\")\n            elif monthnum2 == 11:\n                print(\"The number of days in the month is: 29\")\n            else:\n                print(\"Invalid month number\")\n        else:\n            if monthnum2 > 1:\n                print(\"The number of days in the month is: 29\")\n            elif monthnum2 == 1:\n                print(\"The number of days in the month is: 29\")\n            elif monthnum2 == 4:\n                print(\"The number of days in the month is: 29\")\n            elif monthnum2 == 6:\n                print(\"The number of days in the month is: 29\")\n            elif monthnum2 == 9:\n                print(\"The number of days in the month is: 29\")\n            elif monthnum2 == 11:\n                print(\"The number of days in the month is: 29\")\n            else:\n                print(\"Invalid month number\")\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4,6,9,11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    else:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return 1\n    elif monthnum2 == 2:\n        return 29\n    elif monthnum2 == 3:\n        return 31\n    elif monthnum2 == 4:\n        return 30\n    elif monthnum2 == 5:\n        return 31\n    elif monthnum2 == 6:\n        return 30\n    elif monthnum2 == 7:\n        return 31\n    elif monthnum2 == 8:\n        return 31\n    elif monthnum2 == 9:\n        return 30\n    elif monthnum2 == 10:\n        return 31\n    elif monthnum2 == 11:\n        return 30\n    elif monthnum2 == 12:\n        return 31\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    print \"Test Case 1:\",\n    if monthnumb_number(31,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 2:\",\n    if monthnumb_number(30,monthnum2) == False:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 3:\",\n    if monthnumb_number(29,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 4:\",\n    if monthnumb_number(28,monthnum2) == False:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 5:\",\n    if monthnumb_number(1,monthnum2) == False:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 6:\",\n    if monthnumb_number(2,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 7:\",\n    if monthnumb_number(3,monthnum2) == False:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 8:\",\n    if monthnumb_number(4,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 9:\",\n    if monthnumb_number(5,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 10:\",\n    if monthnumb_number(6,monthnum2) == False:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 11:\",\n    if monthnumb_number(7,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 12:\",\n    if monthnumb_number(8,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 13:\",\n    if monthnumb_number(9,monthnum2) == False:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 14:\",\n    if monthnumb_number(10,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 15:\",\n    if monthnumb_number(11,monthnum2) == False:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 16:\",\n    if monthnumb_number(12,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 17:\",\n    if monthnumb_number(13,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 18:\",\n    if monthnumb_number(14,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 19:\",\n    if monthnumb_number(15,monthnum2) == False:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 20:\",\n    if monthnumb_number(16,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 21:\",\n    if monthnumb_number(17,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 22:\",\n    if monthnumb_number(18,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 23:\",\n    if monthnumb_number(19,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 24:\",\n    if monthnumb_number(20,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 25:\",\n    if monthnumb_number(21,monthnum2) == False:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 26:\",\n    if monthnumb_number(22,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 27:\",\n    if monthnumb_number(23,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 28:\",\n    if monthnumb_number(24,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 29:\",\n    if monthnumb_number(25,monthnum2) == False:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 30:\",\n    if monthnumb_number(26,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 31:\",\n    if monthnumb_number(27,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 32:\",\n    if monthnumb_number(28,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 33:\",\n    if monthnumb_number(29,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 34:\",\n    if monthnumb_number(30,monthnum2) == False:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 35:\",\n    if monthnumb_number(31,monthnum2) == False:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 36:\",\n    if monthnumb_number(32,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 37:\",\n    if monthnumb_number(33,monthnum2) == False:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 38:\",\n    if monthnumb_number(34,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 39:\",\n    if monthnumb_number(35,monthnum2) == False:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 40:\",\n    if monthnumb_number(36,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 41:\",\n    if monthnumb_number(37,monthnum2) == True:\n        print \"Passed\"\n    else:\n        print \"Failed\"\n    print\n    print \"Test Case 42:\",\n    if monthnumb_number(38,monthnum2) == True:\n        print \"Passed\"\n    else:\n        prin"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        reversed_stringlist.append(string[::-1])\n    return reversed_stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    length = len(stringlist)\n    result = []\n    for i in range(0, length):\n        result.append(stringlist[i][::-1])\n    return result\n    \ndef reverse_string_list2(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    result = []\n    for string in stringlist:\n        result.append(string[::-1])\n    return result\n    \ndef reverse_string_list3(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    return [s[::-1] for s in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [i[::-1] for i in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    newlist = []\n    for string in stringlist:\n        newlist.append(string[::-1])\n    return newlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for item in stringlist:\n        result.append(item[::-1])\n    return result\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for item in stringlist:\n        item = item[::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #your code here\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [str[::-1] for str in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for string in stringlist:\n        print(string[::-1])\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m = len(lst) \n    for s in range(len(lst)): \n        for i in range(len(lst)-s): \n            if len(lst[i:i+s+1]) < m: \n                m = len(lst[i:i+s+1]) \n                res = lst[i:i+s+1] \n    return res \n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 1:\n        return lst\n    else:\n        return Find_Min([lst[0]]+Find_Min(lst[1:]))\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m = len(lst)\n    s = []\n    for i in range(len(lst)):\n        s.append(lst[i])\n        if len(s) > m:\n            s = []\n            m = len(s)\n    return m\ndef Convert_List_To_String(lst):\n    s = \"\"\n    for i in range(len(lst)):\n        s += lst[i]\n    return s\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min= len(lst[0])\n    min_list = lst[0]\n    for i in lst:\n        if len(i) <= min:\n            min_list = i\n            min = len(i)\n    print 'The minimum length sublist is', min_list\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_of_min=[]\n    for i in lst:\n        if len(i)==len(lst[0]):\n            lst_of_min.append(i)\n    lst_of_min.sort()\n    return lst_of_min\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if lst == []:\n        return None\n    minimum = lst[0]\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            minimum = i\n            min_length = len(i)\n    return minimum\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_item = lst[0]\n    for item in lst[1:]:\n        if len(item) < min_len:\n            min_len = len(item)\n            min_item = item\n    return min_item\n    \n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # lst = [1, 3, 4, 6, 7, 1, 5, 9, 1, 2, 4, 3, 5, 3, 3, 4, 6, 8, 6, 3, 2, 1]\n    '''\n    # FIND MINIMUM SUBLIST IN A LIST\n    if len(lst) == 1:\n        return lst\n    else:\n        current_min = lst[0]\n        current_min_index = 0\n        for index, num in enumerate(lst):\n            if num < current_min:\n                current_min = num\n                current_min_index = index\n        return current_min_index\n    '''\n    min_index = 0\n    min_value = lst[0]\n    for index, num in enumerate(lst):\n        if num < min_value:\n            min_value = num\n            min_index = index\n    return min_index\n    \n    \ndef Delete_Min(lst):\n    '''\n    Write a python function to delete the sublist having minimum length.\n    '''\n    min_index = Find_Min(lst)\n    del lst[min_index]\n    return lst\n    \n    \ndef Merge_2_Sorted_Lists(lst1, lst2):\n    '''\n    Write a python function to merge 2 sorted sublists.\n    '''\n    # lst1 = [1, 3, 4, 6, 7, 1, 5, 9, 1, 2, 4, 3, 5, 3, 3, 4, 6, 8, 6, 3, 2, 1]\n    # lst2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\n    '''\n    # MERGE TWO SORTED SUBLISTS\n    lst3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    lst4 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\n    '''\n    lst3 = []\n    lst4 = []\n    # while lst1 or lst2:\n    for index, num in enumerate(lst1):\n        lst3.append(num)\n    for index, num in enumerate(lst2):\n        lst4.append(num)\n    lst3.extend(lst4)\n    return lst3\n    \n    \ndef Quicksort(lst):\n    '''\n    Write a python function to implement quicksort.\n    '''\n    # lst = [1, 3, 4, 6, 7, 1, 5, 9, 1, 2, 4, 3, 5, 3, 3, 4, 6, 8, 6, 3, 2, 1]\n    '''\n    # QUICKSORT\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    '''\n    # lst = [1, 3, 4, 6, 7, 1, 5, 9, 1, 2, 4, 3, 5, 3, 3, 4, 6, 8, 6, 3, 2, 1]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    if len(lst) <= 1:\n        return lst\n    else:\n        pivot = lst[-1]\n    less = [x for x in lst if x < pivot]\n    greater = [x for x in lst if x > pivot]\n    return Quicksort(less) + [pivot] + Quicksort(greater)\n    \n    \ndef Find_Median(lst):\n    '''\n    Write a python function to find the median of a list of numbers.\n    '''\n    # lst = [1, 3, 4, 6, 7, 1, 5, 9, 1, 2, 4, 3, 5, 3, 3, 4, 6, 8, 6, 3, 2, 1]\n    '''\n    # FIND MEDIAN OF A LIST\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    '''\n    # lst = [1, 3, 4, 6, 7, 1, 5, 9, 1, 2, 4, 3, 5, 3, 3, 4, 6, 8, 6, 3, 2, 1]\n    '''\n    # MEDIAN OF A SORTED LIST\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    '''\n    # MEDIAN OF A NON-SORTED LIST\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    '''\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    '''\n    # lst = [1, 3, 4, 6, 7, 1, 5, 9, 1, 2, 4, 3, 5, 3, 3, 4, 6, 8, 6, 3, 2, 1]\n    '''\n    # FIND MEDIAN OF A SORTED SUBLIST\n    lst = [1, 3, 4, 6, 7, 1, 5, 9, 1, 2, 4, 3, 5, 3, 3, 4, 6, 8, 6, 3, 2, 1]\n    '''\n    # FIND MEDIAN OF A NON-SORTED SUBLIST\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    '''\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    '''\n    # FIND MEDIAN OF A SORTED SUBLIST\n    lst = [1, 3, 4, 6, 7, 1, 5, 9, 1, 2, 4, 3, 5, 3, 3, 4, 6, 8, 6, 3, 2, 1]\n    '''\n    # FIND MEDIAN OF A NON-SORTED SUBLIST\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    '''\n    # lst = [1, 3, 4, 6, 7, 1, 5, 9, 1, 2, 4, 3, 5, 3, 3, 4, 6, 8, 6, 3, 2"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = None\n    min_lst = None\n    for i in lst:\n        if min_len is None:\n            min_len = len(i)\n            min_lst = i\n        else:\n            if len(i) == min_len:\n                min_lst += i\n            elif len(i) < min_len:\n                min_lst = i\n                min_len = len(i)\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min=lst[0]\n    min_index=0\n    for i in range(len(lst)):\n        if len(lst[i]) < len(min):\n            min=lst[i]\n            min_index=i\n    return min_index\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print area\nrectangle_area(2,3)\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n    \ndef square_area(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = a**2\n    return area\n    \ndef triangle_area(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (b*h)/2\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    newstr = pattern.sub('', str1)\n    return newstr\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = re.findall(r'[A-Z][^A-Z]*', str1)\n    return ''.join(result)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = re.sub('[A-Z]+', '', str1)\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = ''\n    for x in range(len(str1)):\n        if(str1[x].isupper()):\n            continue\n        else:\n            new_str += str1[x]\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=str1.upper()\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    no_uppercase_list = re.findall('[A-Z]+', str1)\n    if len(no_uppercase_list) == 0:\n        return str1\n    else:\n        no_uppercase_str = ''\n        for x in no_uppercase_list:\n            no_uppercase_str = no_uppercase_str + x\n        return no_uppercase_str\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #first solution\n    #return ''.join([x for x in str1 if not x.isupper()])\n    #Second solution\n    #return re.sub('[A-Z]', '', str1)\n    #Third solution\n    return re.sub('[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]', '', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #return re.sub('[A-Z]', '', str1)\n    str2 = ''\n    for letter in str1:\n        if letter.islower():\n            str2 += letter\n    return str2\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res=[]\n    for i in lst:\n        res.append(i[0])\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    list_of_lists=[]\n    for i in range(len(lst)):\n        list_of_lists.append(lst[i][0])\n    return list_of_lists\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        return [lst[0]] + Extract(lst[1:])\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n    \n    \ndef main():\n    \n    # the python interpreter will know this function is a main function\n    #if you don't have this it will ignore the main function\n    #main function is to be used as a command line function\n    \n    #print out the name of the function called\n    print(__name__)\n    \n    #now we can get the elements of the list\n    print(Extract([[1,2,3], [10,20,30], [100,200,300]]))\n    \n    \n    "
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    out=[]\n    for i in lst:\n        out.append(i[0])\n    return out\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        if (str[i].isupper()):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum([1 for c in str if c.isupper()])\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for c in str:\n        if c.isupper():\n            upper_ctr+=1\n    return upper_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt = 0\n    for i in str:\n        if i.isupper():\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len(re.findall(r'[A-Z]',str))\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for s in str:\n        if s.isupper():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str_ctr = 0\n    for i in str:\n        if i.isupper():\n            str_ctr += 1\n    return str_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    n = 0\n    for i in str:\n        if i.isupper():\n            n += 1\n    print n\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    i=0\n    for c in str:\n        if c.isupper():\n            i=i+1\n    return i\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    \n    def combination_helper(list1, start, end, res):\n        if start == end:\n            combinations.append(res)\n            return\n        else:\n            for i in range(start, end):\n                combination_helper(list1, i + 1, end, res + [list1[i]])\n    \n    combination_helper(list1, 0, len(list1), [])\n    \n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if list1 == []:\n        return [[]]\n    return [list1[:1]] + combinations_list(list1[1:])\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    result = []\n    for i in range(len(list1)):\n        t = list1[i]\n        remaining = list1[:i] + list1[i+1:]\n        for c in combinations_list(remaining):\n            result.append([t] + c)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    #return all combinations of the elements of a given list\n    if len(list1)==0:\n        return []\n    if len(list1)==1:\n        return [[list1[0]], []]\n    else:\n        first=list1[0]\n        second=list1[1:]\n        return [ [first] + x for x in combinations_list(second)] + [ [first] + x for x in combinations_list(second)]\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    length = len(list1)\n    print(length)\n    for i in range(1, length + 1):\n        l = list(combinations(list1, i))\n        for sublist in l:\n            result.append(list(sublist))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    res = []\n    if len(list1) == 0:\n        return [[]]\n    \n    for i in xrange(len(list1)):\n        x = list1[i]\n        for j in combinations_list(list1[i+1:]):\n            res.append([x] + j)\n    \n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #returns a list of tuples, each tuple contains 1 element from the list\n    return list(itertools.combinations(list1,2))\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return list1\n    else:\n        output = []\n        for i in range(len(list1)):\n            output.append(list1[i])\n            rest = combinations_list(list1[:i] + list1[i+1:])\n            output += rest\n        return output\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    for i in xrange(len(list1)):\n        for j in combinations_list(list1[:i]+list1[i+1:]):\n            res.append([list1[i]]+j)\n    return res\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    # result array\n    result = [None] * len(arr)\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 3:\n        return arr[0]\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return None\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    curr_max = arr[0]\n    curr_min = arr[0]\n    for i in xrange(1, len(arr)):\n        temp = curr_max\n        curr_max = max(arr[i], curr_max * arr[i], curr_min * arr[i])\n        curr_min = min(arr[i], temp * arr[i], curr_min * arr[i])\n        max_product = max(curr_max, max_product)\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    left_max = [0] * len(arr)\n    left_max[0] = arr[0]\n    for i in range(1, len(arr)):\n        left_max[i] = max(left_max[i - 1] * arr[i], arr[i])\n    right_max = [0] * len(arr)\n    right_max[-1] = arr[-1]\n    for i in range(len(arr) - 2, -1, -1):\n        right_max[i] = max(right_max[i + 1] * arr[i], arr[i])\n    max_product = -1000000000\n    for i in range(len(arr)):\n        max_product = max(max_product, left_max[i] * right_max[i])\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return None\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return None\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr is None:\n        return 0\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    curr_max = 1\n    max_product = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            curr_max = 1\n        curr_max = max(curr_max * num, num)\n        max_product = max(max_product, curr_max)\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    res = True\n    for k,v in dict.iteritems():\n        if v!= v[0]:\n            res = False\n    return res\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    #code here\n    if len(dict.values())==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) > 1:\n        return False\n    else:\n        if len(set(dict.values())) == 1:\n            return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    print \"==========Checking value==========\"\n    for key in dict.keys():\n        if len(dict[key])!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    res = True\n    value = dict.values()[0]\n    for i in range(0, len(dict)):\n        if dict[i]!= value:\n            res = False\n            break\n    return res\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val = dict[n]\n    for key,value in dict.items():\n        if val!= value:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val = dict[n]\n    for x in dict:\n        if dict[x]!= val:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return False\n    else:\n        return n == dict.values()[0]\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    d = dict.values()\n    return len(set(d)) == 1 and not d[0] == n\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= n:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    newdict = {k: v for k, v in dict1.items() if v!= ''}\n    return newdict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not dict1:\n        return []\n    else:\n        return [k for k, v in dict1.items() if v]\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    res = {k:v for k,v in dict1.iteritems() if v!= []}\n    return res\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {x:dict1[x] for x in dict1 if dict1[x]!=[]}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    #dict1 = {'b':1, 'a':2, 'c':3}\n    #return {k:v for k,v in dict1.items() if v}\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict((k,v) for k,v in dict1.iteritems() if v)\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    \n    return max(arr[0] * arr[1], arr[0] * max_product(arr[2:]))\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n <= 2:\n        return 0\n    if n == 3:\n        return max(arr)\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    result = arr[0]\n    for i in range(1, n):\n        if arr[i] > 0:\n            result = max(result, arr[i])\n        else:\n            result = min(result, arr[i])\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    for i in xrange(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            max_product = max(max_product, arr[i] * arr[i-1])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = arr[0] * arr[1]\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[j]*arr[i] > max_prod:\n                max_prod = arr[j] * arr[i]\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    maximum = 1\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            left = right = arr[i]\n            arr[i] = 1\n        else:\n            left = right = 1\n            for j in range(i):\n                if arr[j] < arr[i]:\n                    left = max(left, arr[j])\n            for k in range(i + 1, len(arr)):\n                if arr[k] < arr[i]:\n                    right = max(right, arr[k])\n            arr[i] = left * right * arr[i]\n            maximum = max(maximum, arr[i])\n    return maximum\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_val = 1\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            max_val = 1\n        else:\n            max_val *= arr[i]\n    return max_val\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            continue\n        else:\n            if result < arr[i] * arr[i-1]:\n                result = arr[i] * arr[i-1]\n    return result\n    "
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr is None or len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            return 0\n        else:\n            max_product = max(arr[i], max_product * arr[i])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    return max(arr[0] * arr[1], arr[1] * arr[2])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    addition = tuple(a+b for a, b in zip(test_tup[:-1],test_tup[1:]))\n    return addition\n    \n    \nif __name__ == '__main__':\n    # Your code goes here\n    test_tup = (1,2,3,4)\n    print(add_pairwise(test_tup))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(test_tup[0]+test_tup[1])\n    return None\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup) - 1))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple([x+y for x, y in zip(test_tup[:-1], test_tup[1:])])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return\n    elif len(test_tup) == 1:\n        return test_tup\n    else:\n        return test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    pairwise = []\n    for i in range(n):\n        pairwise.append((test_tup[i], test_tup[i+1]))\n    return pairwise\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    answer_list = []\n    for index in range(0, len(test_tup) - 1):\n        answer_list.append(test_tup[index] + test_tup[index + 1])\n    answer_tup = tuple(answer_list)\n    return answer_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple([x + y for x, y in zip(test_tup[0:-1], test_tup[1:])])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return 0\n    else:\n        return test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test = tuple(test_tup)\n    new_tup = test[1:] + test[:1]\n    return new_tup\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    from functools import reduce\n    import operator\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in arr:\n        res = (res * i) % n\n    return res\n    \ndef find_product(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in arr:\n        res = (res * i) % n\n    return res\n    \ndef gcd(a, b): \n    '''\n    Write a python function to find the GCD of two numbers.\n    '''\n    while b!= 0:\n        a, b = b, a % b\n    return a\n    \ndef mod_inverse(a, m): \n    '''\n    Write a python function to find the modular inverse of two numbers.\n    '''\n    for x in range(1, m):\n        if (a * x) % m == 1:\n            return x\n    return None\n    \ndef is_pandigital(n, i, j):\n    '''\n    Write a python function to check if a string is pandigital or not.\n    '''\n    num = list(str(n))\n    if len(num)!= len(str(i)) or len(num)!= len(str(j)):\n        return False\n    if len(str(i)) == 1 or len(str(j)) == 1:\n        return True\n    for k in num:\n        if int(k) < 0 or int(k) > 9:\n            return False\n        if int(k) < int(str(i)[-1]) or int(k) > int(str(j)[-1]):\n            return False\n    return True\n    \ndef is_pandigital_set(n, i, j, k):\n    '''\n    Write a python function to check if a string is pandigital or not.\n    '''\n    num = list(str(n))\n    if len(num)!= len(str(i)) or len(num)!= len(str(j)) or len(num)!= len(str(k)):\n        return False\n    if len(str(i)) == 1 or len(str(j)) == 1 or len(str(k)) == 1:\n        return True\n    for k in num:\n        if int(k) < 0 or int(k) > 9:\n            return False\n        if int(k) < int(str(i)[-1]) or int(k) > int(str(j)[-1]) or int(k) > int(str(k)[-1]):\n            return False\n    return True\n    \ndef is_pandigital_n(n, i, j):\n    '''\n    Write a python function to check if a string is pandigital or not.\n    '''\n    num = list(str(n))\n    if len(num)!= len(str(i)) or len(num)!= len(str(j)):\n        return False\n    if len(str(i)) == 1 or len(str(j)) == 1:\n        return True\n    for k in num:\n        if int(k) < 0 or int(k) > 9:\n            return False\n        if int(k) < int(str(i)[-1]) or int(k) > int(str(j)[-1]):\n            return False\n    return True\n    \ndef is_pandigital_set_n(n, i, j, k):\n    '''\n    Write a python function to check if a string is pandigital or not.\n    '''\n    num = list(str(n))\n    if len(num)!= len(str(i)) or len(num)!= len(str(j)) or len(num)!= len(str(k)):\n        return False\n    if len(str(i)) == 1 or len(str(j)) == 1 or len(str(k)) == 1:\n        return True\n    for k in num:\n        if int(k) < 0 or int(k) > 9:\n            return False\n        if int(k) < int(str(i)[-1]) or int(k) > int(str(j)[-1]) or int(k) > int(str(k)[-1]):\n            return False\n    return True\n    \ndef product_of_array(arr):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in arr:\n        res = (res * i) % 100\n    return res\n    \ndef is_prime(n): \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                return False\n    return True\n    \ndef is_superprime(n):\n    '''\n    Write a python function to check if a number is superprime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                return False\n    return True\n    \ndef is_superprime_set(n, i, j):\n    '''\n    Write a python function to check if a number is superprime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                return False\n    return True\n    \ndef is_superprime_n(n, i, j):\n    '''\n    Write a python function to check if a number is superprime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                return False\n    return True\n    \ndef is_superprime_set_n(n, i, j, k):\n    '''\n    Write a python function to check if a number is superprime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                return False\n    return True\n    \ndef is_palindrome(n): \n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    n = str(n)\n    if len(n) == 1:\n        return True\n    elif n[0]!= n[len(n)-1]:\n        return False\n    else:\n        return is_palindrome(n[1:len(n)-1])\n    \ndef is_palindrome_n(n, i, j):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    n = str(n)\n    if len(n) == 1:\n        return True\n    elif n[0]!= n[len(n)-1]:\n        return False\n    else:\n        return is_palindrome_n(n[1:len(n)-1], i, j)\n    \ndef is_palindrome_set_n(n, i, j, k):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    n = str(n)\n    if len(n) == 1:\n        return True\n    elif n[0]!= n[len(n)-1]:\n        return False\n    else:\n        return is_palindrome_set_n(n[1:len(n)-1], i, j, k)\n    \ndef is_palindrome_set(n, i, j):\n    '''\n    Write a python function to check if a number is palindrome or no"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    \n    product_of_arr = 1\n    \n    for i in range(n):\n        product_of_arr = (product_of_arr * arr[i]) % n\n        \n    return product_of_arr\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = result * i % n\n    return result\n    \ndef find_result_s3(n, arr):\n    result = 0\n    for i in arr:\n        result = (result + i) % n\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod * i % n\n    return prod \n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n): \n        product = (product * arr[i]) % n \n    return product \n    \n    \n    \ndef find_inverse(a, m): \n    '''\n    Write a python function to find the inverse of a mod m.\n    '''\n    a = a % m \n    for i in range(1, m): \n        if ((a * i) % m == 1): \n            return i \n    return -1\n    \n    \n    \ndef GCD(a, b): \n    '''\n    Write a python function to return the GCD of a and b.\n    '''\n    if (b == 0): \n        return a \n    else: \n        return GCD(b, a % b) \n    \n    \n    \ndef is_prime(a): \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if (a < 2): \n        return False\n    if (a == 2): \n        return True\n    if (a % 2 == 0): \n        return False\n    for i in range(3, int(a ** (1 / 2)) + 1, 2): \n        if (a % i == 0): \n            return False\n    return True\n    \n    \n    \ndef is_perfect_square(n): \n    '''\n    Write a python function to check if a number is a perfect square or not.\n    '''\n    x = n \n    y = (x + 1) / 2\n    while (y - x > 0): \n        if (x ** 2 > n): \n            break\n        if (x ** 2 == n): \n            return True\n        x = (x + y) / 2\n        y = (x + y) / 2\n    return False\n    \n    \n    \ndef is_perfect_square_root(n): \n    '''\n    Write a python function to check if a number is a perfect square root or not.\n    '''\n    x = n\n    y = (x + 1) / 2\n    while (y - x > 0): \n        if (x ** 2 > n): \n            break\n        if (x ** 2 == n): \n            return True\n        x = (x + y) / 2\n        y = (x + y) / 2\n    return False\n    \n    \n    \ndef is_quadratic_residue(a, p): \n    '''\n    Write a python function to check if a number is a quadratic residue or not.\n    '''\n    if (p < 2): \n        return False\n    if (p % 4 == 3): \n        return (GCD(a, p) == 1)\n    if (p % 8 == 5): \n        return ((GCD(a, 4) == 1) and (GCD(a, p) == 1))\n    if (p % 8 == 1): \n        return (GCD(a, 2 * p) == 1)\n    return False\n    \n    \n    \ndef is_square(n): \n    '''\n    Write a python function to check if a number is a perfect square or not.\n    '''\n    x = n \n    y = (x + 1) / 2\n    while (y - x > 0): \n        if (x ** 2 > n): \n            break\n        if (x ** 2 == n): \n            return True\n        x = (x + y) / 2\n        y = (x + y) / 2\n    return False\n    \n    \n    \ndef mod_exp(a, b, n): \n    '''\n    Write a python function to return a mod exponent\n    '''\n    res = 1\n    a = a % n \n    while (b > 0): \n        if (b & 1): \n            res = (res * a) % n \n        a = (a * a) % n \n        b = (b >> 1)\n    return res\n    \n    \n    \ndef mod_inv(a, n): \n    '''\n    Write a python function to return the inverse of a mod m.\n    '''\n    a = a % n \n    for i in range(1, n): \n        if ((a * i) % n == 1): \n            return i \n    return -1\n    \n    \n    \ndef find_generator(a, b, m): \n    '''\n    Write a python function to find a generator of a cyclic group.\n    '''\n    if (GCD(a, m)!= 1): \n        return -1\n    if (GCD(b, m)!= 1): \n        return -1\n    for i in range(1, m): \n        if (GCD(mod_exp(a, i, m), m)!= 1): \n            return -1\n        if (GCD(mod_exp(b, i, m), m)!= 1): \n            return -1\n    return 1\n    \n    \n    \ndef convert_to_base_26(n): \n    '''\n    Write a python function to convert a decimal number to its equivalent in base 26.\n    '''\n    if (n == 0): \n        return 0\n    digits = []\n    while (n > 0): \n        digits.append(int(n % 26))\n        n = int(n / 26)\n    digits.reverse()\n    return ''.join(map(str, digits))\n    \n    \n    \ndef convert_to_base_10(n, b): \n    '''\n    Write a python function to convert a decimal number to its equivalent in base b.\n    '''\n    if (b < 2): \n        return 0\n    if (n == 0): \n        return 0\n    digits = []\n    while (n > 0): \n        digits.append(int(n % b))\n        n = int(n / b)\n    return ''.join(map(str, digits))\n    \n    \n    \ndef convert_to_base_10_from_base_26(n, b): \n    '''\n    Write a python function to convert a decimal number from its equivalent in base 26 to base b.\n    '''\n    if (n == 0): \n        return 0\n    digits = []\n    while (n > 0): \n        digits.append(int(n % b))\n        n = int(n / b)\n    return ''.join(map(str, digits))\n    \n    \n    \ndef modular_inverse(a, m): \n    '''\n    Write a python function to return the modular inverse of a and m.\n    '''\n    return mod_inv(a, m)\n    \n    \n    \ndef mod_exp_inverse(a, b, m): \n    '''\n    Write a python function to return the inverse of a mod m.\n    '''\n    if (GCD(a, m)!= 1): \n        return -1\n    x, y, u, v = a, 1, 0, 1\n    while (b > 0): \n        if (b % 2 == 1): \n            u = (u * x) % m\n            v = (v * x) % m\n            x = (x * x) % m\n        x = (x * x) % m\n        b = int(b / 2)\n    return (u * v) % m\n    \n    \n    \ndef mod_exp_to_base_b(a, b, m): \n    '''\n    Write a python function to return the modular exponentiation of a to b in base m.\n    '''\n    if (GCD(a, m)!= 1): \n        return -1\n    x, y, u, v = a, 1, 0, 1\n    while (b > 0): \n        if (b % 2 == 1): \n            u = (u * x) % m\n            v = (v * x) % m\n            x = (x * x) % m\n        x = (x * x) % m\n        b = int(b / 2)\n    return (u * v) % m\n    \n    \n    \ndef nth_root(a, n, m): \n    '''\n    Write a python function to return the nth root of a mod m.\n    '''\n    if (GCD(a, m)!= 1): "
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    from fractions import Fraction\n    p=1\n    for i in arr:\n        p=p*i\n    return Fraction(p, n)\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr: \n        product = (product * i) % n \n    return product \n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 1:\n        return 1\n    if len(arr) == 0:\n        return 1\n    remainder = find_remainder(arr[1:], n/arr[0])\n    if n % arr[0] == 0:\n        return remainder\n    return (remainder * (n % arr[0])) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # arr[0]*arr[1]*arr[2]*...*arr[n-1]\n    return reduce(lambda x, y: x * y, arr) % n\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # return True\n    for i in range(0,len(l)-1):\n        if (l[i+1]-l[i])!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if (l[i] + 1)!= l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # if len(l)<2:\n    #     return True\n    # elif (l[0] + 1 == l[1]) and (l[1] + 1 == l[2]):\n    #     return True\n    # else:\n    #     return False\n    return all(l[i] - l[i-1] == 1 for i in range(1,len(l)))\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False \n    return True \n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n    \n    \ndef find_all_consecutive(l):\n    '''\n    Write a python function to find all the consecutive numbers in the given list and print them on console\n    '''\n    for i in range(len(l)):\n        if check_Consecutive(l[i:]):\n            print(l[i])\n            \n            \ndef main():\n    l = [1,2,3,4,5,6,7,8,9]\n    find_all_consecutive(l)\n    \nif __name__ == '__main__':\n    main()\n    \n    \n'''\n[1,2,3,4,5,6,7,8,9]\n2\n3\n4\n5\n6\n7\n8\n9\n''"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = list(l)\n    l.sort()\n    if len(l)>0:\n        for i in range(len(l)-1):\n            if l[i+1]==l[i]+1:\n                continue\n            else:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    count = 0\n    for i in range(1, len(l)):\n        if l[i-1] + 1 == l[i]:\n            count += 1\n        else:\n            break\n    if count == len(l) - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    l1 = [item for item in l if item % 2 == 1]\n    l2 = [item for item in l if item % 2 == 0]\n    if len(l1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    if len(l) < 2:\n        return True\n    else:\n        return l[0] + 1 == l[1] and check_Consecutive(l[1:])\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_dict = {}\n    for i in test_list1:\n        if i not in tuple_dict:\n            tuple_dict[i] = 1\n    for j in test_list2:\n        if j in tuple_dict:\n            tuple_dict.pop(j)\n    return tuple(tuple_dict.keys())\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    ret_list = []\n    for elt1 in test_list1:\n        for elt2 in test_list2:\n            if elt1 == elt2:\n                ret_list.append(elt1)\n                break\n    return ret_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    s_list1 = set(test_list1)\n    s_list2 = set(test_list2)\n    intersection = s_list1.intersection(s_list2)\n    return list(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # there can be more than one elements having same keys\n    res = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1[0] == tup2[0]:\n                res.append(tup1)\n                test_list2.remove(tup2)\n                break\n    return res\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #initially define a function to get the intersection\n    def get_intersection(test_list1, test_list2):\n        intersection = []\n        for item1 in test_list1:\n            for item2 in test_list2:\n                if item1 == item2:\n                    intersection.append(item1)\n        return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1.sort()\n    test_list2.sort()\n    for i, val1 in enumerate(test_list1):\n        for j, val2 in enumerate(test_list2):\n            if val1 == val2:\n                print(val1)\n                break\n            else:\n                continue\n    else:\n        print('No tuple pair found')\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    hash_list = {}\n    for i in test_list1:\n        hash_list[i] = True\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for index in range(len(test_list1)):\n        if test_list1[index] in test_list2:\n            intersection_list.append(test_list1[index])\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if not test_list1 or not test_list2:\n        return 0\n    \n    hash_set1 = set(test_list1)\n    hash_set2 = set(test_list2)\n    \n    return hash_set1.intersection(hash_set2)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    a = str1.replace(ch,newch)\n    return a\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n    \ndef remove_char(str1,ch):\n    '''\n    Write a function to remove characters from a string.\n    '''\n    return str1.replace(ch,'')\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = str1.replace(ch,newch)\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    index = str1.index(ch)\n    str1 = str1[:index] + newch + str1[index+1:]\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr=str1.replace(ch,newch)\n    print(newstr)\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if ch in str1:\n        return str1.replace(ch,newch)\n    else:\n        return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # s = str1\n    str1 = list(str1)\n    i=0\n    while i<len(str1):\n        if str1[i]==ch:\n            str1[i]=newch\n        i=i+1\n    return ''.join(str1)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1], reverse = True)\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef count_words(string1):\n    '''\n    Write a function to count the number of each character in a string.\n    '''\n    count_dict = {}\n    for i in string1:\n        if i not in count_dict.keys():\n            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n    return count_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef count_words(string1):\n    '''\n    Write a function to count the number of each character in a string.\n    '''\n    count_dict = {}\n    for i in string1:\n        if i not in count_dict.keys():\n            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n    return count_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key = lambda x:x[1])\n    return sort_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # my_dict = {}\n    # for key, value in dict1.items():\n    #     if value not in my_dict:\n    #         my_dict[value] = [key]\n    #     else:\n    #         my_dict[value].append(key)\n    # for key in sorted(my_dict.keys()):\n    #     print key, my_dict[key]\n    #     for item in my_dict[key]:\n    #         print item\n    #     print\n    #     \n    # print dict1.items()\n    # for key, value in dict1.items():\n    #     print key, value\n    # print dict1\n    return sorted(dict1.items(), key=lambda x:x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x:x[1], reverse = True)\n    \n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # dict1 = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    dict1 = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = sorted(dict1, key = dict1.get, reverse = True)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\ndef most_common(dict1):\n    '''\n    Write a function to return the most common elements in a dictionary.\n    '''\n    return Counter(dict1).most_common()\ndef flatten_list(lst):\n    '''\n    Write a function to flatten a list of lists.\n    '''\n    l = []\n    for i in lst:\n        if type(i)==list:\n            for j in i:\n                l.append(j)\n        else:\n            l.append(i)\n    return l\ndef count_word(string,word):\n    '''\n    Write a function to count the number of occurrences of a word in a string.\n    '''\n    return string.count(word)\ndef count_vowels(string):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    count = 0\n    vowels = ['a','e','i','o','u']\n    for i in string:\n        if i in vowels:\n            count+=1\n    return count\ndef count_vowels_2(string):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    return sum([1 for i in string if i in ['a','e','i','o','u']])\ndef sum_two_numbers(a,b):\n    '''\n    Write a function to sum two numbers.\n    '''\n    return a+b\ndef super_reduced_string(string):\n    '''\n    Write a function to reduce a string to its superstring.\n    '''\n    if len(string)==1:\n        return string\n    if len(string)==0:\n        return string\n    count = 0\n    while len(string)>1:\n        if string[0]==string[1]:\n            string = string[1:]\n            count+=1\n        else:\n            break\n    return string[0]*count+super_reduced_string(string[1:])\ndef super_reduced_string_2(string):\n    '''\n    Write a function to reduce a string to its superstring.\n    '''\n    if len(string)==1:\n        return string\n    if len(string)==0:\n        return string\n    i = 1\n    while i<len(string)-1:\n        if string[i]==string[i+1]:\n            string = string[:i]+string[i+2:]\n            i-=1\n        else:\n            i+=1\n    return string\ndef is_anagram(string1,string2):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    if sorted(string1)==sorted(string2):\n        return True\n    else:\n        return False\ndef is_anagram_2(string1,string2):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    return sorted(string1)==sorted(string2)\ndef is_permutation(string1,string2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(string1)!=len(string2):\n        return False\n    if sorted(string1)==sorted(string2):\n        return True\n    else:\n        return False\ndef is_permutation_2(string1,string2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(string1)!=len(string2):\n        return False\n    char_list = []\n    for i in range(len(string1)):\n        if string1[i] not in char_list:\n            char_list.append(string1[i])\n        if string2[i] not in char_list:\n            char_list.append(string2[i])\n    if char_list==sorted(char_list):\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string)==0 or len(string)==1:\n        return True\n    if string[0]==string[-1]:\n        return is_palindrome(string[1:-1])\n    else:\n        return False\ndef is_palindrome_2(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string)==0 or len(string)==1:\n        return True\n    if string[0]==string[-1]:\n        return is_palindrome_2(string[1:-1])\n    else:\n        return False\ndef is_palindrome_3(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string)==0 or len(string)==1:\n        return True\n    if string[0]==string[-1]:\n        return is_palindrome_3(string[1:-1])\n    else:\n        return False\ndef is_palindrome_4(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string)==0 or len(string)==1:\n        return True\n    if string[0]==string[-1]:\n        return is_palindrome_4(string[1:-1])\n    else:\n        return False\ndef is_palindrome_5(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string)==0 or len(string)==1:\n        return True\n    if string[0]==string[-1]:\n        return is_palindrome_5(string[1:-1])\n    else:\n        return False\ndef is_palindrome_6(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string)==0 or len(string)==1:\n        return True\n    if string[0]==string[-1]:\n        return is_palindrome_6(string[1:-1])\n    else:\n        return False\ndef count_letter_frequency(string):\n    '''\n    Write a function to count the frequency of letters in a string.\n    '''\n    char_count = Counter(string)\n    return char_count\ndef count_letter_frequency_2(string):\n    '''\n    Write a function to count the frequency of letters in a string.\n    '''\n    char_count = {}\n    for i in string:\n        char_count[i]=char_count.get(i,0)+1\n    return char_count\ndef count_letter_frequency_3(string):\n    '''\n    Write a function to count the frequency of letters in a string.\n    '''\n    char_count = {}\n    for i in string:\n        char_count[i]=char_count.get(i,0)+1\n    return Counter(char_count)\ndef count_letter_frequency_4(string):\n    '''\n    Write a function to count the frequency of letters in a string.\n    '''\n    char_count = Counter(string)\n    return char_count.most_common()\ndef count_letter_frequency_5(string):\n    '''\n    Write a function to count the frequency of letters in a string.\n    '''\n    char_count = {}\n    for i in string:\n        char_count[i]=char_count.get(i,0)+1\n    return [char_count.get(i,0) for i in sorted(char_count)]\ndef count_letter_frequency_6(string):\n    '''\n    Write a function to count the frequency of letters in a string.\n    '''\n    char_count = Counter(string)\n    return sorted(char_count.items(),key=lambda x:x[1],reverse=True)\ndef get_max_key(dict1):\n    '''\n    Write a function to get the key wit"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::2])\n    \n    \ndef max_small_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums,reverse=True)[::2])\n    \n    \ndef lone_sum(a, b, c):\n    '''\n    Write a python function that accepts 3 integer values a,b,c and returns the \n    sum of the values from the two numbers that share the same \n    number of unique digits. For example, given 1,2,3,4, the function would \n    return 9 (the sum of 1 and 4).\n    '''\n    total = 0\n    for num in [a,b,c]:\n        unique_digits = set(str(num))\n        if len(unique_digits) == 1:\n            total += num\n    return total\n    \ndef unique_digits(a, b):\n    '''\n    Write a python function that returns a boolean whether the numbers \n    have the same unique digits.\n    '''\n    return len(set(str(a))) == len(set(str(b)))\n    \n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    return sum(int(digit) for digit in str(n))\n    \n    \ndef max_digit(n):\n    '''\n    Write a python function to return the maximum digit of a given number.\n    '''\n    return max(int(digit) for digit in str(n))\n    \n    \ndef sum_of_factorial(n):\n    '''\n    Write a python function to find the sum of the factorial of all the numbers \n    from 1 to n (inclusive).\n    '''\n    return sum(math.factorial(x) for x in range(1,n+1))\n    \n    \ndef sum_of_squares(n):\n    '''\n    Write a python function to calculate the sum of the squares of all the \n    numbers from 1 to n (inclusive).\n    '''\n    return sum(x*x for x in range(1,n+1))\n    \n    \ndef double_char(s):\n    '''\n    Write a python function to return a string with all the same \n    characters repeated twice.\n    '''\n    return ''.join(ch*2 for ch in s)\n    \n    \ndef double_num(n):\n    '''\n    Write a python function to return a given number with its digits repeated\n    twice.\n    '''\n    return int(str(n)*2)\n    \n    \ndef plus_one(n):\n    '''\n    Write a python function to add 1 to a number and return the result.\n    '''\n    return n+1\n    \n    \ndef first_last6(nums):\n    '''\n    Write a python function to return the first and last elements of a given list \n    of integers.\n    '''\n    return [nums[0],nums[-1]]\n    \n    \ndef centered_average(nums):\n    '''\n    Write a python function to return the average of the numbers in a given list\n    of integers, but ignoring the largest and smallest numbers in the list.\n    '''\n    return (sum(nums)-max(nums)-min(nums))/len(nums)\n    \n    \ndef reverse_int(n):\n    '''\n    Write a python function to return the reverse of a given integer.\n    '''\n    return int(str(n)[::-1])\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is a palindrome.\n    '''\n    return str(n) == str(n)[::-1]\n    \n    \ndef is_power_of_2(n):\n    '''\n    Write a python function to check if a given number is a power of 2.\n    '''\n    return n & (n-1) == 0\n    \n    \ndef lucky_sum(a, b, c):\n    '''\n    Write a python function to check if a given set of numbers is a lucky \n    set. A lucky set is a set of three distinct numbers from an array that \n    add up to the same number.\n    '''\n    return a == b == c\n    \n    \ndef count_consecutive_summers(n):\n    '''\n    Write a python function to count the number of consecutive \n    summers starting from 1.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i\n        if total_sum == n:\n            return 1\n    return 0\n    \n    \ndef find_substring(s, k):\n    '''\n    Write a python function to check if a given string contains a \n    substring of length k.\n    '''\n    for i in range(len(s) - k + 1):\n        if s[i:i+k] == s[i+1:i+1+k]:\n            return True\n    return False\n    \n    \ndef has_duplicates(nums):\n    '''\n    Write a python function to return True if a given list contains any \n    duplicates or False otherwise.\n    '''\n    return len(nums)!= len(set(nums))\n    \n    \ndef has_consecutive_sum(nums):\n    '''\n    Write a python function to return True if a given list contains two \n    consecutive numbers that add up to a number k, and False otherwise.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i] + nums[i+1] == nums[i+2]:\n            return True\n    return False\n    \n    \ndef swap_adjacent(nums):\n    '''\n    Write a python function to swap adjacent elements in a given list of \n    integers.\n    '''\n    for i in range(len(nums)):\n        if i!= len(nums) - 1:\n            temp = nums[i]\n            nums[i] = nums[i+1]\n            nums[i+1] = temp\n    return nums\n    \n    \ndef count_char(s, c):\n    '''\n    Write a python function to count the number of times a given character \n    appears in a string.\n    '''\n    return s.count(c)\n    \n    \ndef count_hi(s):\n    '''\n    Write a python function to count the number of times a substring \n    'hi' appears in a given string.\n    '''\n    return s.count('hi')\n    \n    \ndef my_atoi(s):\n    '''\n    Write a python function to return the value of the first non-negative \n    number in a given string.\n    '''\n    num = []\n    for i,c in enumerate(s):\n        if c in '0123456789':\n            num.append(int(c))\n        else:\n            if num:\n                return int(''.join(num))\n            else:\n                return 0\n    if num:\n        return int(''.join(num))\n    else:\n        return 0\n    \n    \ndef my_atoi2(s):\n    '''\n    Write a python function to return the value of the first non-negative \n    number in a given string.\n    '''\n    return int(re.search(r'^[+-]?\\d+', s).group())\n    \n    \ndef char_histogram(s):\n    '''\n    Write a python function to return a dictionary with the number of occurances \n    of each character in a given string.\n    '''\n    counts = {}\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n    return counts\n    \n    \ndef long_repeat(s):\n    '''\n    Write a python function to return the length of the longest substring \n    that consists of the same character.\n    '''\n    counts = {}\n    for i,c in enumerate(s):\n        if c in counts:\n        "
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if nums is None:\n        return None\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    assert isinstance(string, str)\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    return ''.join(str1.split(str1.lower()))\n    \n    \ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]+', '', str1)\n    \n    \ndef remove_numbers(str1):\n    '''\n    Write a function to remove all the numbers from a given string.\n    '''\n    \n    return re.sub('[0-9]+', '', str1)\n    \n    \ndef remove_multiple_spaces(str1):\n    '''\n    Write a function to remove all the multiple spaces from a given string.\n    '''\n    \n    return re.sub(' +','', str1)\n    \n    \ndef change_to_capital_letters(str1):\n    '''\n    Write a function to change the first letter of every word to capital letter in a given string.\n    '''\n    \n    return str1.title()\n    \n    \ndef change_to_lower_case(str1):\n    '''\n    Write a function to change the first letter of every word to lowercase in a given string.\n    '''\n    \n    return str1.lower()\n    \n    \ndef add_spaces(str1):\n    '''\n    Write a function to add spaces between words in a given string.\n    '''\n    \n    return re.sub(' ', '', str1)\n    \n    \ndef capitalize_words(str1):\n    '''\n    Write a function to capitalize words in a given string.\n    '''\n    \n    return str1.capitalize()\n    \n    \ndef convert_string_to_lowercase(str1):\n    '''\n    Write a function to convert a string to lowercase.\n    '''\n    \n    return str1.lower()\n    \n    \ndef convert_string_to_uppercase(str1):\n    '''\n    Write a function to convert a string to uppercase.\n    '''\n    \n    return str1.upper()\n    \n    \ndef swap_case(str1):\n    '''\n    Write a function to swap the case of a string.\n    '''\n    \n    return str1.swapcase()\n    \n    \ndef compute_average(arr1):\n    '''\n    Write a function to compute average of numbers in a given array.\n    '''\n    \n    return sum(arr1) / len(arr1)\n    \n    \ndef compute_median(arr1):\n    '''\n    Write a function to compute median of numbers in a given array.\n    '''\n    \n    return sorted(arr1)[len(arr1)/2]\n    \n    \ndef compute_mode(arr1):\n    '''\n    Write a function to compute mode of numbers in a given array.\n    '''\n    \n    return max(set(arr1), key=arr1.count)\n    \n    \ndef get_first_and_last_index(str1):\n    '''\n    Write a function to get the first and last index of a substring in a given string.\n    '''\n    \n    return str1.find(str1[0], str1.find(str1[-1]) + 1)\n    \n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    \n    return str1 == str1[::-1]\n    \n    \ndef remove_vowels(str1):\n    '''\n    Write a function to remove vowels from a given string.\n    '''\n    \n    return re.sub('[aeiouAEIOU]', '', str1)\n    \n    \ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]+', '', str1)\n    \n    \ndef is_pangram(str1):\n    '''\n    Write a function to check whether a given string is pangram or not.\n    '''\n    \n    return set(str1) >= set('abcdefghijklmnopqrstuvwxyz')\n    \n    \ndef is_unique(str1):\n    '''\n    Write a function to check whether a given string has all unique characters or not.\n    '''\n    \n    return len(set(str1)) == len(str1)\n    \n    \ndef duplicate_count(str1):\n    '''\n    Write a function to count the number of duplicate characters in a given string.\n    '''\n    \n    count = {}\n    \n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    return sum([1 for key, value in count.iteritems() if value > 1])\n    \n    \ndef rotate_string(str1, num):\n    '''\n    Write a function to rotate a given string by the specified number of times.\n    '''\n    \n    return str1[num:] + str1[:num]\n    \n    \ndef is_palindrome_permutation(str1):\n    '''\n    Write a function to check whether a given string is a permutation of a palindrome or not.\n    '''\n    \n    str1 = str1.lower()\n    \n    str1 = remove_special_characters(str1)\n    \n    str1 = remove_numbers(str1)\n    \n    str1 = remove_multiple_spaces(str1)\n    \n    str1 = change_to_lower_case(str1)\n    \n    str1 = change_to_uppercase(str1)\n    \n    str1 = add_spaces(str1)\n    \n    str1 = convert_string_to_lowercase(str1)\n    \n    str1 = convert_string_to_uppercase(str1)\n    \n    str1 = capitalize_words(str1)\n    \n    return duplicate_count(str1) == 1 and is_palindrome(str1)\n    \n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    \n    return sorted(str1) == sorted(str2)\n    \n    \ndef remove_duplicate_letters(str1):\n    '''\n    Write a function to remove duplicate letters from a given string.\n    '''\n    \n    return ''.join(sorted(set(str1)))\n    \n    \ndef is_rotated_string(str1, str2):\n    '''\n    Write a function to check whether a given string is a rotated version of another string or not.\n    '''\n    \n    return rotate_string(str1, len(str2)) == str2\n    \n    \ndef are_rotations(str1, str2):\n    '''\n    Write a function to check whether a given string is a rotation of another string or not.\n    '''\n    \n    return rotate_string(str1, len(str2)) == str2\n    \n    \ndef replace_character(str1, old_char, new_char):\n    '''\n    Write a function to replace a character in a given string with another character.\n    '''\n    \n    return str1.replace(old_char, new_char)\n    \n    \ndef count_substring(str1, sub):\n    '''\n    Write a function to count the number of times a substring occurs in a given string.\n    '''\n    \n    return str1.count(sub)\n    \n    \ndef remove_occurences_of_substring(str1, sub):\n    '''\n    Write a function to remove all the occurences of a substring from a given string.\n    '''\n    \n    return re.sub('{}'.format(sub), '', str1)\n    \n    \ndef print_alternate_string(str1):\n    '''\n    Write a function to print alternate characters of a given string.\n    '''\n    \n    for i in range(0, len(str1), 2):\n        print str1[i],\n    print ''\n    \n    for i i"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]*', '', str1, flags=re.I)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    r = re.compile(r'[a-z]', re.IGNORECASE)\n    result = r.sub('', str1)\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            str1 = str1[:i] + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return ''.join([i for i in str1 if not i.islower()])\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('\\w*\\d\\w*\\d\\w*','',str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1\n    re.sub(r'(.)*(.)',r'\\2',str2)\n    return str2\ndef remove_non_alphanumeric(str1):\n    '''\n    Write a function to remove non-alphanumeric characters from a given string.\n    '''\n    str2 = ''\n    re.sub(r'[^a-zA-Z0-9]+',r'',str1)\n    return str2\ndef remove_blank_spaces(str1):\n    '''\n    Write a function to remove blank spaces from a given string.\n    '''\n    str2 = ''\n    str1 = re.sub(r'\\s+',r' ',str1)\n    return str2\ndef remove_hyphen_words(str1):\n    '''\n    Write a function to remove hyphens from words in a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[a-zA-Z0-9]',r'',str2)\n    return str2\ndef remove_words_starting_with_end_characters(str1):\n    '''\n    Write a function to remove words starting with an end character from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'(.)*',r'\\1',str2)\n    return str2\ndef get_lower_case(str1):\n    '''\n    Write a function to get the lowercase characters from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[^a-z]+',r'',str2)\n    return str2\ndef get_upper_case(str1):\n    '''\n    Write a function to get the uppercase characters from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[^A-Z]+',r'',str2)\n    return str2\ndef get_non_alphanumeric(str1):\n    '''\n    Write a function to get the non-alphanumeric characters from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[a-zA-Z0-9]+',r'',str2)\n    return str2\ndef get_non_alpha_numeric_and_space(str1):\n    '''\n    Write a function to get the non-alphanumeric and space from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[^a-zA-Z\\s]+',r'',str2)\n    return str2\ndef get_non_space_words(str1):\n    '''\n    Write a function to get the non-space words from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get_words_with_n_characters(str1):\n    '''\n    Write a function to get the words with the length n from a given string.\n    '''\n    str2 = str1\n    str2 = re.sub(r'[\\s]+',r'',str2)\n    return str2\ndef get"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    x=''\n    for i in str1:\n        if i.isupper():\n            x+=i\n    return x\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    temp = str(n)\n    if temp[0] == '0' :\n        return 0\n    else :\n        return int(temp[0])\n    \ndef second_Digit(n) :\n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    temp = str(n)\n    if temp[1] == '0' :\n        return 0\n    else :\n        return int(temp[1])\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = str(n)\n    return x[0]\n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    x = str(n)\n    return x[-1]\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    print(n%10)\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 : \n        return 0\n    else :\n        return int(n%10)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n)%10\ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n)//10\ndef reverse(n) :\n    '''\n    Write a python function to reverse a given number.\n    '''\n    return last_Digit(n)+first_Digit(n)\nn=int(input('Enter a number'))\nfirst_Digit(n)\nlast_Digit(n)\nreverse(n)"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #print 'The first digit of a given number is',n%10\n    return n%10\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    elif n < 100 :\n        return n/10\n    elif n < 1000 :\n        return (n%10)\n    else :\n        return ((n%10)+(n/100))\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef reverse_Digit(n) :  \n    '''\n    Write a python function to reverse a given number\n    '''\n    rev = 0\n    while n > 0 :\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n / 10\n    return rev\n    \ndef isPalindrome(n) :  \n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    return n == reverse_Digit(n)\n    \ndef isPrime(n) :  \n    '''\n    Write a python function to check whether the given number is a prime or not.\n    '''\n    if n <= 1 :\n        return False\n    elif n == 2 :\n        return True\n    else :\n        for i in range(2, n) :\n            if n % i == 0 :\n                return False\n            else :\n                return True\n    \ndef nth_Digit(n) :  \n    '''\n    Write a python function to find the nth digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef count_Digit(n) :  \n    '''\n    Write a python function to count the digits in a number.\n    '''\n    digits = 0\n    while n > 0 :\n        digits = digits + 1\n        n = n / 10\n    return digits\n    \ndef factorial(n) :  \n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    n = abs(n)\n    if n == 0 :\n        return 1\n    else :\n        fact = 1\n        for i in range(1, n+1) :\n            fact = fact * i\n        return fact\n    \ndef isHappy(n) :  \n    '''\n    Write a python function to check whether the given number is a happy number or not.\n    '''\n    flag = 1\n    while n > 0 :\n        n = n / 10\n        temp = n\n        n = n + temp\n        if n == temp :\n            flag = 0\n            break\n    return flag\n    \ndef isArmstrong(n) :  \n    '''\n    Write a python function to check whether the given number is an Armstrong number or not.\n    '''\n    sum = 0\n    temp = n\n    while temp > 0 :\n        d = temp % 10\n        sum = sum + pow(d, count_Digit(temp))\n        temp = temp / 10\n    if n == sum :\n        return True\n    else :\n        return False\n    \ndef isTruncatable(n) :  \n    '''\n    Write a python function to check whether the given number is a truncatable number or not.\n    '''\n    rev = 0\n    while n > 0 :\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n / 10\n    rev = str(rev)\n    t = str(n)\n    if len(t) == len(rev) :\n        return True\n    else :\n        return False\n    \ndef isPandigital(n) :  \n    '''\n    Write a python function to check whether the given number is a pandigital number or not.\n    '''\n    pandigital = 0\n    for i in range(1, 10) :\n        pandigital = pandigital + n % 10\n        n = n / 10\n    if n == 0 :\n        return True\n    else :\n        return False\n    \ndef isArmstrong_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef isTruncatable_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef isPandigital_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef isPalindrome_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef isPrime_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef nth_Digit_Digit(n) :  \n    '''\n    Write a python function to find the nth digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef isPalindrome_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef isPrime_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef isPalindrome_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef factorial_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef isPandigital_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef isPalindrome_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef nth_Digit_Digit(n) :  \n    '''\n    Write a python function to find the nth digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef isPandigital_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef isPalindrome_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef isPrime_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef isTruncatable_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n > 0 :\n        n = n / 10\n    return n\n    \ndef isPalindrome_Digit"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if (i % 2) == 1:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_return = []\n    for item in list:\n        if item%2!= 0:\n            list_return.append(item)\n    return list_return\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in range(0,len(list)): \n        if (list[i] % 2)!= 0:\n            return list[i]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = [i for i in list if i%2==1]\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list = [x for x in list if x % 2!= 0]\n    return list\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i % 2!= 0:\n            odds.append(i)\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in list:\n        if i%2!= 0:\n            print(i)\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1 = []\n    list2 = []\n    for i in list:\n        if i%2!= 0:\n            list1.append(i)\n        else:\n            list2.append(i)\n    return list1, list2\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n < 1 :\n        return 0\n    return int((n**3 + n**2) * (n - 1) / 2) - (n * (n + 1)) / 2\n    \nif __name__ == \"__main__\" :\n    assert(difference(1) == 0)\n    assert(difference(2) == -1)\n    assert(difference(3) == -1)\n    assert(difference(4) == 1)\n    assert(difference(5) == 1)\n    assert(difference(10) == 2640)\n    assert(difference(100) == 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000)\n    assert(difference(1000) == 233168)\n    assert(difference(10000) == 25164150)\n    print(\"All test cases passed successfully.\""
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    lst = []\n    lst = lst + [0]\n    for i in range(0,n) :\n        lst.append(lst[i] + lst[i+1])\n    sum1 = sum(lst)\n    \n    lst = []\n    lst = lst + [0]\n    for i in range(0,n) :\n        lst.append(lst[i] + lst[i+1])\n    sum2 = sum(lst)\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([x**3 for x in range(1,n+1)]) - sum([x for x in range(1,n+1)])\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    import math\n    s = 0\n    for i in range(1, n+1) :\n        s = s + math.pow(i, 3)\n    t = 0\n    for i in range(1, n+1) :\n        t = t + i\n    return abs(s - t)\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # n = int(input())\n    return (n * (n + 1) * (n + 2)) // 6\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Complete this function\n    return n*(n+1)*(2*n+1)/6 - sum(range(1, n+1))**3\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n1 = n*(n+1)**2/2\n    n2 = n*(n+1)\n    return (n1 - n2)\n    "
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(n) :\n        total = total + i*i*i\n    return total - sum_of_cubes(n)\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    diff = (n * (n + 1) * (2 * n + 1)) // 6\n    return diff\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = sum(x**3 for x in xrange(1,n+1))\n    sum2 = sum(x for x in xrange(1,n+1))\n    return sum1-sum2\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if (A[i]^A[j]&1) :\n                return A[i]^A[j]\n    return 0\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # write code here\n    count = 0\n    for i in range(0,N-1) : \n        if ( A[i] ^ A[i+1] ) % 2 == 1 :\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1) : \n        for j in range(i+1,N) : \n            if A[i]^A[j]&1 : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    \n    #Odd pairs \n    count = 0 \n    \n    for i in range(N-1):\n        for j in range(i+1,N):\n            \n            if (A[i]^A[j])&1 :\n                count+=1\n    return count \n    \n    \n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) :\n            if ((A[i] ^ A[j]) & 0x1) == 1 : \n                count += 1 \n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in xrange(N-1):\n        for j in xrange(i+1,N):\n            xor = A[i]^A[j]\n            if xor%2 == 1:\n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] & 1 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if (A[i]^A[j])%2 == 1 : \n                count = count + 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1 : \n                count += 1 \n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if not A : \n        return 0\n    else :\n        if A[0]%2 == 1 : \n            return A[0]\n        else : \n            return (find_Odd_Pair(A[1:],N) + A[0])\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    #tempting to solve this problem without using a library\n    if (string == ''):\n        return ''\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    l = []\n    for i in string:\n        if i.islower():\n            l.append(i.upper())\n        else:\n            l.append(i.lower())\n    return ''.join(l)\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle(char):\n        if char.isalpha():\n            return char.lower()\n        else:\n            return char\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        if string.isupper():\n            return string.lower()\n        elif string.islower():\n            return string.upper()\n        else:\n            return string\n    result = ''\n    for i in range(len(string)):\n        if string[i].isupper():\n            result += string[i].lower()\n        elif string[i].islower():\n            result += string[i].upper()\n        else:\n            result += string[i]\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    import string\n    return string.capwords(string)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert strings to integers\n    n1 = int(n1)\n    n2 = int(n2)\n    # find the distance between the two integers in terms of digits\n    # return the sum of the distance between the two integers\n    # You can use the digit_distance function defined below\n    return digit_distance(n1, n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Using string convertion function to return the differnce between the two integers in a string\n    n1, n2 = str(n1), str(n2)\n    return sum(int(a) - int(b) for a, b in zip(n1, n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1, d2 = len(str(n1)), len(str(n2))\n    if d1 > d2:\n        n1, n2 = n2, n1\n        d1, d2 = d2, d1\n    d1 = d1 - d2\n    return sum([int(s1!= s2) for s1, s2 in zip(str(n1), str(n2))]) + d1 * (d1 + 1) / 2\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > n2:\n        n1, n2 = n2, n1\n    diff = n1 - n2\n    res = 0\n    while diff:\n        res += diff % 10\n        diff //= 10\n    return res\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    result = 0\n    for i in range(0,len(n1)):\n        result += abs(int(n1[i]) - int(n2[i]))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(c) - int(d)) for c, d in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(map(operator.sub, n1, n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    if len(n1_list) > len(n2_list):\n        n2_list.extend(['0'] * (len(n1_list) - len(n2_list)))\n    else:\n        n1_list.extend(['0'] * (len(n2_list) - len(n1_list)))\n    total_diff = 0\n    for index in range(len(n1_list)):\n        if n1_list[index]!= n2_list[index]:\n            total_diff += 1\n    return total_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(n1)-int(n2)) for n1, n2 in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(map(lambda x: abs(int(x[0])-int(x[1])), zip(str(n1), str(n2))))\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    else:\n        max_ending_here = max(a[0], a[1])\n        max_so_far = max_ending_here\n        for i in range(2, size):\n            max_ending_here = max(a[i], max_ending_here + a[i])\n            max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) == 0:\n        return 0\n    max_ending_here = max_so_far = a[0]\n    for i in xrange(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    \n    max_sum = -float('inf')\n    for i in xrange(size):\n        max_sum = max(max_sum, sum(a[i:i+size]))\n    \n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n    max_ending_here = max(a[0], 0)\n    max_so_far = max_ending_here\n    for i in range(1,size):\n        max_ending_here = max(max_ending_here + a[i], 0)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = a[0]\n    max_so_far = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = max_so_far = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    start = 0\n    end = 0\n    max_so_far = -(float('inf'))\n    curr_max = -(float('inf'))\n    while end < size:\n        curr_max = max(curr_max + a[end], a[end])\n        max_so_far = max(max_so_far, curr_max)\n        end += 1\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    assert size > 1, \"size is not valid\"\n    max_sum = 0\n    curr_sum = 0\n    for i in range(size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = []\n    #Write your code here\n    for element in test_tup1:\n        if element not in result:\n            result.append(element)\n    for element in test_tup2:\n        if element not in result:\n            result.append(element)\n    result.sort()\n    return result\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    test_union = sorted(test_set1 | test_set2)\n    return test_union\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #return sorted(set(test_tup1) | set(test_tup2))\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = list(union_set)\n    union_list.sort()\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1).union(set(test_tup2)))\n    return sorted(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    for i in test_tup1:\n        if i not in union_tup:\n            union_tup.append(i)\n    for i in test_tup2:\n        if i not in union_tup:\n            union_tup.append(i)\n    union_tup.sort()\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    res = []\n    i, j = 0, 0\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] < test_tup2[j]:\n            res.append(test_tup1[i])\n            i += 1\n        elif test_tup1[i] > test_tup2[j]:\n            res.append(test_tup2[j])\n            j += 1\n        else:\n            res.append(test_tup1[i])\n            i += 1\n            j += 1\n    if i < len(test_tup1):\n        res = res + test_tup1[i:]\n    if j < len(test_tup2):\n        res = res + test_tup2[j:]\n    return res\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1_set = set(test_tup1)\n    tup2_set = set(test_tup2)\n    union_set = tup1_set.union(tup2_set)\n    union_list = list(union_set)\n    union_list.sort()\n    return tuple(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    print 'input', test_tup1, test_tup2\n    union = list(set(test_tup1) | set(test_tup2))\n    union.sort()\n    print 'union', union\n    return union\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    #Approach 1: Brute Force\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    m=0\n    for i in lst:\n        if len(i)>m:\n            m=len(i)\n    return m\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for i in lst:\n        for j in lst:\n            if j>i:\n                count+=1\n    print count\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    Max_Len = 0\n    for i in lst:\n        temp_len = 0\n        for j in range(0, len(i)):\n            if temp_len < len(i) - j:\n                temp_len = len(i) - j\n        if temp_len > Max_Len:\n            Max_Len = temp_len\n    return Max_Len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    m = 0\n    i = 0\n    while i < len(lst):\n        j = i + 1\n        while j < len(lst) and lst[j] == lst[j-1]:\n            j += 1\n        if j - i > m:\n            m = j - i\n        i = j\n    return m\n        \nlst = [1,2,3,1,2,3,4,5]\nprint Find_Max_Length(lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #initialize variables\n    max_length = 0\n    max_length_list = []\n    for index, value in enumerate(lst):\n        if len(lst[index:]) > max_length:\n            max_length = len(lst[index:])\n            max_length_list = lst[index:]\n    return max_length_list\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        return 1 + Find_Max_Length(lst[1:])\n    \ndef Find_Max_Length_of_Subarray(lst, start, end):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if start == end:\n        return 1\n    else:\n        mid = (start + end)/2\n        left = Find_Max_Length_of_Subarray(lst, start, mid)\n        right = Find_Max_Length_of_Subarray(lst, mid+1, end)\n        return max(left, right)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxi = 0\n    for i in lst:\n        if len(i) > maxi:\n            maxi = len(i)\n    return maxi\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    longest_length = 0\n    i = 0\n    while i < len(lst):\n        for j in range(i,len(lst)):\n            length = 0\n            for k in range(i,j+1):\n                length += 1\n            if length > longest_length:\n                longest_length = length\n        i+=1\n    return longest_length\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"(.*?)\"',text)\n    if values:\n        return values[0]\n    return \"\"\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #text = \"t=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0\"\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = \"t=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0\"\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,0; n=0.5,0.3,0; s=0.5,0.3,0; e=0.5,0.3,0'\n    #text = 't=7.4,3; c1=1.9,3.3,0; c2=4.5,4.7,"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return None\n    pattern = re.compile(r\"\\b[\\\"']+[^\\\"']*[\\\"']+\\b\")\n    matches = pattern.finditer(text)\n    values = []\n    for match in matches:\n        values.append(match.group())\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    r = re.findall(r'[\\\"](.*?)[\\\"]', text)\n    return r\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    m=re.search(r\"\\\"(.*?)\\\"\", text)\n    if m:\n        return m.group(1)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\\".*?\\\"'\n    matches = re.findall(pattern, text)\n    matches = [re.sub('\\\"', '', match) for match in matches]\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.search('(?<=\\\")(.*?)(?=\\\")', text)\n    if match:\n        return match.group(0)\n    return ''\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = []\n    if not text:\n        return result\n    if not text[0]:\n        return result\n    current = text[0]\n    in_quotation = False\n    for c in text[1:]:\n        if in_quotation:\n            if c == '\"':\n                in_quotation = False\n            current += c\n        else:\n            if c == '\"':\n                in_quotation = True\n            else:\n                current += c\n    if not current:\n        return result\n    result.append(current)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # add \\s+ to remove the overlapping of \"1\" and \"1\"\n    text = re.sub(r'\\s+','', text)\n    # add the quotation mark to search for\n    text = '\\\"' + text + '\\\"'\n    # find all the matches of the quotation mark\n    return re.findall(text,'')\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    list_values = []\n    if len(text) == 0:\n        return list_values\n    elif len(text) == 1:\n        if text[0] == '\"':\n            list_values.append(text[1:len(text)-1])\n            return list_values\n        else:\n            return []\n    else:\n        start = 0\n        end = 1\n        while end <= len(text):\n            if text[start] == '\"':\n                if end == len(text) - 1:\n                    list_values.append(text[start+1:end])\n                    return list_values\n                else:\n                    if text[end] == '\"':\n                        list_values.append(text[start+1:end])\n                        end += 1\n                        start = end\n                    else:\n                        end += 1\n            else:\n                end += 1\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count+=1 \n    return count \n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if not arr:\n        return 0\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n < 2:\n        return 0\n    i = 0\n    j = 1\n    count = 0\n    while j < n:\n        if arr[i]!= arr[j]:\n            count += 1\n            i = j\n        j += 1\n    return count\ndef count_Pairs_Hash(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n < 2:\n        return 0\n    hash = {}\n    for i in range(n):\n        if arr[i] not in hash:\n            hash[arr[i]] = 1\n        else:\n            hash[arr[i]] += 1\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if hash[arr[i]] > 1 and hash[arr[j]] > 1:\n                count += 1\n    return count\narr = [1,1,1,1,1]\nprint count_Pairs(arr,len(arr))\narr = [1,2,3,4,5,6,7,8]\nprint count_Pairs_Hash(arr,len(arr))"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    result = 0\n    d = {}\n    for i in range(n):\n        d[arr[i]] = i\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            result += 1\n    return result\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count=count+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    #print arr\n    ans = 0\n    for i in range(n-1):\n        j = i+1\n        while j<n:\n            if arr[i]==arr[j]:\n                ans += 1\n            j += 1\n    print ans\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    n_arr = [0 for i in range(n)]\n    for i in range(len(arr)):\n        n_arr[arr[i]] += 1\n    pair_cnt = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if n_arr[i] > 0 and n_arr[j] > 0:\n                pair_cnt += n_arr[i] * n_arr[j]\n    return pair_cnt\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] < arr[j] and arr[j]!= arr[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    \n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n /= 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    nums = str(n)\n    digit_sum = 0\n    for i in nums:\n        digit_sum += int(i)\n    return digit_sum\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(x) for x in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n:\n        total += n % 10\n        n //= 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(c) for c in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return sum_digits(n//10) + n%10\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return sum_digits(n // 10) + n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_digit = 0\n    while n > 0:\n        sum_digit += n % 10\n        n = n // 10\n    return sum_digit\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i-1]>=list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    elif list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag = 1\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            flag = 0\n    return flag\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0, len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag = 0\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            flag = 1\n            break\n    return flag\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1.sort()\n    if list1 == range(list1[0], list1[-1]+1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n    \ndef dict_list_to_dict(dict_list):\n    '''\n    Create a dictionary from a list of dictionaries\n    '''\n    return {dict_list[x]['name']:dict_list[x]['age'] for x in range(len(dict_list))}\n    \ndef get_dict_from_file(filename):\n    '''\n    Create a dictionary from a file.\n    '''\n    with open(filename, 'r') as f:\n        data = f.read()\n    return eval(data)\n    \ndef set_dict_from_file(filename):\n    '''\n    Create a dictionary from a file, save to a file.\n    '''\n    with open(filename, 'w') as f:\n        f.write(str(dict_list_to_dict(dict_list)))\n    \n    \ndef create_dictionary(filename):\n    '''\n    Create a dictionary from a file.\n    '''\n    dict_list = get_dict_from_file(filename)\n    dict_list = dict_list_to_dict(dict_list)\n    return dict_list\n    \ndef find_maximum(dict_list):\n    '''\n    Find the maximum value in a list of dictionaries.\n    '''\n    max_val = 0\n    for i in range(len(dict_list)):\n        if dict_list[i] > max_val:\n            max_val = dict_list[i]\n    return max_val\n    \ndef compare_dictionaries(dict_list):\n    '''\n    Compare the age of two dictionaries, return True if they are the same age, otherwise False.\n    '''\n    return dict_list[0]['age'] == dict_list[1]['age']\n    \ndef count_keys(dict_list):\n    '''\n    Count how many dictionaries have the same age.\n    '''\n    return len([dict_list[x]['age'] for x in range(len(dict_list)) if dict_list[x]['age'] == dict_list[0]['age']])\n    \ndef save_list(dict_list):\n    '''\n    Save a list of dictionaries as a JSON file.\n    '''\n    with open('file_name.json', 'w') as f:\n        json.dump(dict_list, f, indent=4)\n        \ndef open_list(filename):\n    '''\n    Open a list of dictionaries as a JSON file.\n    '''\n    with open(filename) as f:\n        data = json.load(f)\n    return data\n    \ndef dictionary_list_to_list(dict_list):\n    '''\n    Convert a list of dictionaries to a list of tuples.\n    '''\n    return [(dict_list[x]['name'], dict_list[x]['age']) for x in range(len(dict_list))]\n    \ndef dict_list_to_dict(dict_list):\n    '''\n    Create a dictionary from a list of dictionaries\n    '''\n    return {dict_list[x]['name']:dict_list[x]['age'] for x in range(len(dict_list))}\n    \ndef get_dict_from_file(filename):\n    '''\n    Create a dictionary from a file.\n    '''\n    with open(filename, 'r') as f:\n        data = f.read()\n    return eval(data)\n    \ndef set_dict_from_file(filename):\n    '''\n    Create a dictionary from a file, save to a file.\n    '''\n    with open(filename, 'w') as f:\n        f.write(str(dict_list_to_dict(dict_list)))\n    \ndef create_dictionary(filename):\n    '''\n    Create a dictionary from a file.\n    '''\n    dict_list = get_dict_from_file(filename)\n    dict_list = dict_list_to_dict(dict_list)\n    return dict_list\n    \ndef find_maximum(dict_list):\n    '''\n    Find the maximum value in a list of dictionaries.\n    '''\n    max_val = 0\n    for i in range(len(dict_list)):\n        if dict_list[i] > max_val:\n            max_val = dict_list[i]\n    return max_val\n    \ndef compare_dictionaries(dict_list):\n    '''\n    Compare the age of two dictionaries, return True if they are the same age, otherwise False.\n    '''\n    return dict_list[0]['age'] == dict_list[1]['age']\n    \ndef count_keys(dict_list):\n    '''\n    Count how many dictionaries have the same age.\n    '''\n    return len([dict_list[x]['age'] for x in range(len(dict_list)) if dict_list[x]['age'] == dict_list[0]['age']])\n    \ndef save_list(dict_list):\n    '''\n    Save a list of dictionaries as a JSON file.\n    '''\n    with open('file_name.json', 'w') as f:\n        json.dump(dict_list, f, indent=4)\n        \ndef open_list(filename):\n    '''\n    Open a list of dictionaries as a JSON file.\n    '''\n    with open(filename) as f:\n        data = json.load(f)\n    return data\n    \ndef dictionary_list_to_list(dict_list):\n    '''\n    Convert a list of dictionaries to a list of tuples.\n    '''\n    return [(dict_list[x]['name'], dict_list[x]['age']) for x in range(len(dict_list))]\n    \ndef dict_list_to_dict(dict_list):\n    '''\n    Create a dictionary from a list of dictionaries\n    '''\n    return {dict_list[x]['name']:dict_list[x]['age'] for x in range(len(dict_list))}\n    \ndef get_dict_from_file(filename):\n    '''\n    Create a dictionary from a file.\n    '''\n    with open(filename, 'r') as f:\n        data = f.read()\n    return eval(data)\n    \ndef set_dict_from_file(filename):\n    '''\n    Create a dictionary from a file, save to a file.\n    '''\n    with open(filename, 'w') as f:\n        f.write(str(dict_list_to_dict(dict_list)))\n    \ndef create_dictionary(filename):\n    '''\n    Create a dictionary from a file.\n    '''\n    dict_list = get_dict_from_file(filename)\n    dict_list = dict_list_to_dict(dict_list)\n    return dict_list\n    \ndef find_maximum(dict_list):\n    '''\n    Find the maximum value in a list of dictionaries.\n    '''\n    max_val = 0\n    for i in range(len(dict_list)):\n        if dict_list[i] > max_val:\n            max_val = dict_list[i]\n    return max_val\n    \ndef compare_dictionaries(dict_list):\n    '''\n    Compare the age of two dictionaries, return True if they are the same age, otherwise False.\n    '''\n    return dict_list[0]['age'] == dict_list[1]['age']\n    \ndef count_keys(dict_list):\n    '''\n    Count how many dictionaries have the same age.\n    '''\n    return len([dict_list[x]['age'] for x in range(len(dict_list)) if dict_list[x]['age'] == dict_list[0]['age']])\n    \ndef save_list(dict_list):\n    '''\n    Save a list of dictionaries as a JSON file.\n    '''\n    with open('file_name.json', 'w') as f:\n        json.dump(dict_list, f, indent=4)\n        \ndef open_list(filename):\n    '''\n    Open a list of dictionaries as a JSON file.\n    '''\n    with open(filename) as f:\n        data = json.load(f)"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(0, length):\n        result.append(dict())\n    return result\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1 = [x for x in list1 if x!= []]\n    list2 = []\n    for l in list1:\n        list2.append(sorted(l))\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(i) for i in list1]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # List of lists\n    list_of_lists = [list1[i:i + 5] for i in range(0, len(list1), 5)]\n    # Empty list to store the results\n    results = []\n    # Iterate over each sublist and sort each sublist in the list of lists\n    for sublist in list_of_lists:\n        sublist.sort()\n    # Add each sorted sublist to results list\n    for sublist in list_of_lists:\n        results.extend(sublist)\n    # Return results\n    return results\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # print(list1)\n    for i in range(0, len(list1)):\n        list1[i].sort()\n        # print(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(sorted(list1[i]))\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(i) for i in list1]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in list1:\n        sublist.sort()\n        result.append(sublist)\n    return result\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    list_len = len(nums)\n    for i in range(list_len):\n        nums[i] = list(set(nums[i]))\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    s = set(nums)\n    return list(s)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    return len(unique_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    return len(counts) == len(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    def remove_duplicate_nums(list_of_nums):\n        '''\n        Write a python function to remove duplicate numbers from a given number of lists.\n        '''\n        def remove_duplicate_nums_recursive(list_of_nums):\n            if not list_of_nums:\n                return []\n            elif len(list_of_nums) == 1:\n                return list_of_nums\n            elif list_of_nums[0] == list_of_nums[1]:\n                return remove_duplicate_nums_recursive(list_of_nums[1:])\n            else:\n                return [list_of_nums[0]] + remove_duplicate_nums_recursive(list_of_nums[1:])\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    set_nums = set(nums)\n    return list(set_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums)<=2:\n        return None\n    else:\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                if nums[i]==nums[j]:\n                    nums[j] = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                nums[i] = None\n        return nums\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data) == 0:\n        return 1\n    return list_data[0] * unique_product(list_data[1:])\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_product = 1\n    for value in list_data:\n        unique_product *= value\n    return unique_product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product=1\n    for item in list_data:\n        if list_data.count(item)==1:\n            product=product*item\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data) <= 1:\n        return list_data[0]\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    new_list = []\n    for i in list_data:\n        if i not in new_list:\n            new_list.append(i)\n    for j in new_list:\n        product = product * j\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        if i not in product:\n            product = product * i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dict_data = {}\n    for data in list_data:\n        if data in dict_data:\n            dict_data[data] += 1\n        else:\n            dict_data[data] = 1\n    total_products = 1\n    for key in dict_data:\n        total_products *= (key ** dict_data[key])\n    return total_products\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    area = 2*math.pi*r*(r+h)\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*r*r + 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surf_area_cyl = pi*r**2 + 2*pi*r*h + 2*pi*h**2\n    return surf_area_cyl\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if r==0 or h==0:\n        return \"This is not a valid value\"\n    else:\n        return 2*3.14*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    s=2*math.pi*r*(r+h)\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * r * 2 + pi * r**2 * h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * r * 2 + pi * r ** 2 * h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (math.pi*(r**2) + math.pi*(r**2)*h)\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    A = A[:]\n    for item in B: \n        if item in A: \n            A.remove(item)\n        else: \n            return False\n    return True\n    \n    \ndef is_Sub_Set(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    A = A[:]\n    for item in B: \n        if item in A: \n            A.remove(item)\n        else: \n            return False\n    return True\n    \ndef is_Sub_List(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    for item in A: \n        if item not in B: \n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if B[i] in A:\n            A = A[A.index(B[i])+1:]\n            if not A:\n                return True\n    return False\ndef max_element(A,k): \n    '''\n    Write a python function to find the index of maximum element in an array.\n    '''\n    maximum = max(A)\n    if A.count(maximum)>k:\n        return A.index(maximum)\n    else:\n        return -1\ndef is_circular(A):\n    '''\n    Write a python function to check if the given array is circular or not.\n    '''\n    for i in range(len(A)):\n        if A[i]==A[len(A)-1]:\n            return True\n    return False\ndef is_cyclic_permutation(A,B):\n    '''\n    Write a python function to check if two array are cyclic permutations or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    if len(A)<4:\n        return True\n    else:\n        for i in range(len(A)):\n            if not A[i]==B[i]:\n                return False\n        return True\ndef is_cyclic_permutation_2(A,B):\n    '''\n    Write a python function to check if two array are cyclic permutations or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    if len(A)<4:\n        return True\n    else:\n        for i in range(len(A)):\n            if not A[i]==B[i]:\n                A[i],A[B[i]]=A[B[i]],A[i]\n                if A==B:\n                    return True\n                A[i],A[B[i]]=A[B[i]],A[i]\n    return False\ndef is_rotated(A,B):\n    '''\n    Write a python function to check if an array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    if len(A)<4:\n        return True\n    else:\n        A.sort()\n        B.sort()\n        if A==B:\n            return True\n        return False\ndef is_rotated_2(A,B):\n    '''\n    Write a python function to check if an array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    if len(A)<4:\n        return True\n    else:\n        if A.index(min(A))==B.index(min(B)):\n            return True\n    return False\ndef n_grams(s,n):\n    '''\n    Write a python function to generate all n-grams in the string s.\n    '''\n    for i in range(1,n):\n        for j in range(len(s)-i+1):\n            yield s[j:j+i]\ndef is_permutation(A,B):\n    '''\n    Write a python function to check if two arrays are permutations or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    if len(A)<4:\n        return True\n    else:\n        A.sort()\n        B.sort()\n        if A==B:\n            return True\n        return False\ndef is_anagram(A,B):\n    '''\n    Write a python function to check if two arrays are anagram or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    if len(A)<4:\n        return True\n    else:\n        A.sort()\n        B.sort()\n        if A==B:\n            return True\n        return False\ndef is_anagram_2(A,B):\n    '''\n    Write a python function to check if two arrays are anagram or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    if len(A)<4:\n        return True\n    else:\n        A.sort()\n        B.sort()\n        if A==B:\n            return True\n        return False\ndef is_anagram_3(A,B):\n    '''\n    Write a python function to check if two arrays are anagram or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    if len(A)<4:\n        return True\n    else:\n        d1 = {}\n        d2 = {}\n        for i in A:\n            if i not in d1.keys():\n                d1[i]=1\n            else:\n                d1[i]+=1\n        for j in B:\n            if j not in d2.keys():\n                d2[j]=1\n            else:\n                d2[j]+=1\n        if d1==d2:\n            return True\n        else:\n            return False\ndef is_anagram_4(A,B):\n    '''\n    Write a python function to check if two arrays are anagram or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    if len(A)<4:\n        return True\n    else:\n        d1 = {}\n        d2 = {}\n        for i in A:\n            if i not in d1.keys():\n                d1[i]=1\n            else:\n                d1[i]+=1\n        for j in B:\n            if j not in d2.keys():\n                d2[j]=1\n            else:\n                d2[j]+=1\n        if d1==d2:\n            return True\n        else:\n            return False\ndef is_anagram_5(A,B):\n    '''\n    Write a python function to check if two arrays are anagram or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    if len(A)<4:\n        return True\n    else:\n        d1 = {}\n        d2 = {}\n        for i in A:\n            if i not in d1.keys():\n                d1[i]=1\n            else:\n                d1[i]+=1\n        for j in B:\n            if j not in d2.keys():\n                d2[j]=1\n            else:\n                d2[j]+=1\n        if d1==d2:\n            return True\n        else:\n            return False\ndef is_anagram_6(A,B):\n    '''\n    Write a python function to check if two arrays are anagram or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    if len(A)<4:\n        return True\n    else:\n        d1 = {}\n        d2 = {}\n        for i in A:\n            if i not in d1.keys():\n                d1[i]=1\n            else:\n                d1[i]+=1\n        for j in B:\n            if j not in d2.keys():\n                d2[j]=1\n            else:\n                d2[j]+=1\n        if d1==d2:\n            return True\n        else:\n            return False\ndef is_anagram_7(A,B):\n    '''\n    Write a python function to check if two arrays are anagram or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    if len(A)<4:\n        return True\n    else:\n        d1 = {}\n        d2 = {}\n        for i in A:\n            if i not in d1.keys():\n                d1[i]=1\n            else:\n                d1[i]+=1\n        for j in B:\n            if j not in d2.keys():\n                d2[j]=1\n            else:\n                d2[j]+=1\n        if d1==d2:\n            return True\n        else:\n            return False\ndef is_anagram_8(A,B):\n    '''\n    Write a python function to check if two arrays are anagram or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    if len("
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return 0\n    else:\n        return all(A[i] <= B[i] for i in range(0, len(B)))\n    \ndef is_Power_of_2(n):\n    '''\n    Write a python function to check whether a number is power of 2 or not.\n    '''\n    if (n & (n - 1) == 0) and n!= 0:\n        return True\n    else:\n        return False\n    \ndef is_Power_of_3(n):\n    '''\n    Write a python function to check whether a number is power of 3 or not.\n    '''\n    if (n & (n - 1) == 0) and (n & 0x55555555) == 0:\n        return True\n    else:\n        return False\n    \ndef is_Power_of_5(n):\n    '''\n    Write a python function to check whether a number is power of 5 or not.\n    '''\n    if (n & (n - 1) == 0) and (n & 0x33333333) == 0:\n        return True\n    else:\n        return False\n    \ndef is_Power_of_7(n):\n    '''\n    Write a python function to check whether a number is power of 7 or not.\n    '''\n    if (n & (n - 1) == 0) and (n & 0x7F7F7F7F) == 0:\n        return True\n    else:\n        return False\n    \ndef is_Prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Palindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\n    \ndef is_Sqrt_Number(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n < 0:\n        return False\n    else:\n        return (n ** 0.5 == int(n ** 0.5))\n    \ndef is_Half_Number(n):\n    '''\n    Write a python function to check whether a number is half number or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_Even(n):\n    '''\n    Write a python function to check whether a number is even or not.\n    '''\n    return (n % 2 == 0)\n    \ndef is_Odd(n):\n    '''\n    Write a python function to check whether a number is odd or not.\n    '''\n    return (n % 2!= 0)\n    \ndef is_Factorial(n):\n    '''\n    Write a python function to check whether a number is factorial or not.\n    '''\n    if n == 1:\n        return True\n    else:\n        return (n * is_Factorial(n - 1))\n    \ndef is_Binary(n):\n    '''\n    Write a python function to check whether a number is binary or not.\n    '''\n    s = str(bin(n))\n    if s[-2:] == '11':\n        return True\n    else:\n        return False\n    \ndef is_Hex(n):\n    '''\n    Write a python function to check whether a number is hexadecimal or not.\n    '''\n    s = str(hex(n))\n    if s[-2:] == 'xF':\n        return True\n    else:\n        return False\n    \ndef is_Oct(n):\n    '''\n    Write a python function to check whether a number is octal or not.\n    '''\n    s = str(oct(n))\n    if s[-2:] == '0oF':\n        return True\n    else:\n        return False\n    \ndef is_Roman(n):\n    '''\n    Write a python function to check whether a number is roman or not.\n    '''\n    s = str(n)\n    if s[0] == 'M':\n        if s[1] == 'X':\n            if s[2] == 'C':\n                if s[3] == 'M':\n                    return True\n                else:\n                    return False\n            elif s[2] == 'D':\n                if s[3] == 'C':\n                    return True\n                else:\n                    return False\n            elif s[2] == 'M':\n                return True\n            else:\n                return False\n        elif s[1] == 'C':\n            if s[2] == 'M':\n                return True\n            else:\n                return False\n        elif s[1] == 'X':\n            if s[2] == 'M':\n                return True\n            else:\n                return False\n        elif s[1] == 'I':\n            if s[2] == 'M':\n                return True\n            else:\n                return False\n        else:\n            return False\n    elif s[0] == 'V':\n        if s[1] == 'X':\n            if s[2] == 'C':\n                if s[3] == 'M':\n                    return True\n                else:\n                    return False\n            elif s[2] == 'D':\n                if s[3] == 'C':\n                    return True\n                else:\n                    return False\n            elif s[2] == 'M':\n                return True\n            else:\n                return False\n        elif s[1] == 'C':\n            if s[2] == 'M':\n                return True\n            else:\n                return False\n        elif s[1] == 'X':\n            if s[2] == 'M':\n                return True\n            else:\n                return False\n        elif s[1] == 'I':\n            if s[2] == 'M':\n                return True\n            else:\n                return False\n        else:\n            return False\n    elif s[0] == 'L':\n        if s[1] == 'X':\n            if s[2] == 'C':\n                if s[3] == 'M':\n                    return True\n                else:\n                    return False\n            elif s[2] == 'D':\n                if s[3] == 'C':\n                    return True\n                else:\n                    return False\n            elif s[2] == 'M':\n                return True\n            else:\n                return False\n        elif s[1] == 'C':\n            if s[2] == 'M':\n                return True\n            else:\n                return False\n        elif s[1] == 'X':\n            if s[2] == 'M':\n                return True\n            else:\n                return False\n        elif s[1] == 'I':\n            if s[2] == 'M':\n                return True\n            else:\n                return False\n        else:\n            return False\n    elif s[0] == 'D':\n        if s[1] == 'X':\n            if s[2] == 'C':\n                if s[3] == 'M':\n                    return True\n                else:\n                    return False\n            elif s[2] == 'D':\n                if s[3] == 'C':\n                    return True\n                else:\n                    return False\n            elif s[2] == 'M':\n                return True\n            else:\n                return False\n        elif s[1] == 'C':\n            if s[2] == 'M':\n                return True\n            else:\n                return False\n        elif s[1] == 'X':\n            if s[2] == 'M':\n                return True\n            else:\n                return False\n        elif s[1] == 'I':\n            if s[2] == 'M':\n                return True\n            else:\n                return False\n        else:\n            return False\n    elif s[0] == 'U':\n        if s[1] == 'X':\n            if s[2] == '"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    temp = B[:]\n    result = []\n    for ele in A:\n        if ele in temp:\n            temp.remove(ele)\n        else:\n            result.append(False)\n            break\n    else:\n        result.append(True)\n    return result\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return B in A \n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    if len(A) == len(B):\n        return True\n    i = 0\n    while i < len(B) and A[i] == B[i]:\n        i += 1\n    if i == len(B):\n        return True\n    return False\ndef is_Sub_Array_2(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if A[i] == B[i]:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(A)==list and type(B)==list:\n        if len(B)==0:\n            return True\n        if len(B)>len(A):\n            return False\n        else:\n            for i in range(len(B)):\n                if B[i]==A[i]:\n                    B.pop(i)\n                    continue\n                else:\n                    return False\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #Checks whether B is a sublist of A \n    if len(A) < len(B):\n        return False\n    i = 0\n    while i < len(A):\n        if A[i] == B[0]:\n            if A[i:len(B)] == B:\n                return True\n            i+=1\n        else:\n            i+=1\n    return False\n    \ndef Sub_List(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    while i < len(A):\n        if A[i] == B[0]:\n            if A[i:len(B)] == B:\n                return True\n            i+=1\n        else:\n            i+=1\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return 0\n    i=0\n    while i<len(A):\n        if A[i]==B[0]:\n            if B == A[i:i+len(B)]:\n                return 1\n            i+=1\n        else:\n            i+=1\n    return 0\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if B[i]!= A[i]:\n            return False\n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==1:\n        return 1\n    if n==0:\n        return 0\n    return last_Digit_Factorial(n-1) * (n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = n\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return last_Digit_Factorial(n-1)*n\n        \ndef generate_triangle(n):\n    '''\n    Write a python function to return the  \n    triangle of numbers upto n \n    '''\n    if n < 0:\n        return 0\n    else:\n        return generate_triangle(n-1)+[n]\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    a = n\n    factorial = 1\n    while (a > 0): \n        factorial = factorial * a\n        a = a - 1\n    last_digit = factorial % 10\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    f = 1\n    while f <= n:\n        f = f*n\n    return f/10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n%10*last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    count = 0\n    while n // 10!= 0: \n        n = n // 10\n        count += 1\n    return (n % 10)\n    \ndef Next_Digit_Factorial(n): \n    '''\n    Write a python function to find the next digit in factorial of a given number.\n    '''\n    count = 0\n    while n // 10!= 0: \n        n = n // 10\n        count += 1\n    return (n % 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    Factorial=1\n    if n<0:\n        return None\n    elif n==0:\n        return 1\n    else:\n        for i in range(1,n+1):\n            Factorial*=i\n        Factorial=str(Factorial)\n        return int(Factorial[-1])\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fac = 1\n    for i in range(1,n+1):\n        fac = fac*i\n    return fac%10\ndef Last_Digit_Sum_of_Digits(n): \n    '''\n    Write a python function to find the last digit in sum of digits of a given number.\n    '''\n    sum = 0\n    while n:\n        sum += n%10\n        n /= 10\n    return sum\ndef Last_Digit_Power_of_Digits(n): \n    '''\n    Write a python function to find the last digit in power of digits of a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n /= 10\n    return count\ndef Last_Digit_Power_of_Digits_with_exponent(n): \n    '''\n    Write a python function to find the last digit in power of digits of a given number with exponent.\n    '''\n    return 10**(Last_Digit_Power_of_Digits(n)-1)\ndef Last_Digit_Power_of_Digits_with_n(n): \n    '''\n    Write a python function to find the last digit in power of digits of a given number with n.\n    '''\n    return 10**n\ndef Last_Digit_Power_of_Digits_of_n(n): \n    '''\n    Write a python function to find the last digit in power of digits of a given number with n.\n    '''\n    sum = 0\n    while n:\n        sum += Last_Digit_Power_of_Digits(n)\n        n /= 10\n    return sum\ndef Last_Digit_Power_of_Digits_of_n_with_exponent(n): \n    '''\n    Write a python function to find the last digit in power of digits of a given number with n.\n    '''\n    return 10**(Last_Digit_Power_of_Digits_of_n(n)-1)\ndef Last_Digit_Power_of_Digits_of_n_with_n(n): \n    '''\n    Write a python function to find the last digit in power of digits of a given number with n.\n    '''\n    return 10**n\ndef Last_Digit_Power_of_Digits_of_n_with_n_with_exponent(n): \n    '''\n    Write a python function to find the last digit in power of digits of a given number with n.\n    '''\n    return 10**(Last_Digit_Power_of_Digits_of_n_with_n(n)-1)\ndef First_Digit_Power_of_Digits_of_n(n): \n    '''\n    Write a python function to find the first digit in power of digits of a given number with n.\n    '''\n    sum = 0\n    while n:\n        sum += First_Digit_Power_of_Digits(n)\n        n /= 10\n    return sum\ndef First_Digit_Power_of_Digits_of_n_with_n(n): \n    '''\n    Write a python function to find the first digit in power of digits of a given number with n.\n    '''\n    return First_Digit_Power_of_Digits_of_n(n*10)\ndef First_Digit_Power_of_Digits_of_n_with_n_with_exponent(n): \n    '''\n    Write a python function to find the first digit in power of digits of a given number with n.\n    '''\n    return First_Digit_Power_of_Digits_of_n_with_n(n*10)\ndef First_Digit_Power_of_Digits_of_n_with_n_with_n_with_exponent(n): \n    '''\n    Write a python function to find the first digit in power of digits of a given number with n.\n    '''\n    return First_Digit_Power_of_Digits_of_n_with_n_with_n(n*10)\ndef First_Digit_Power_of_Digits_of_n_with_n_with_n_with_n_with_exponent(n): \n    '''\n    Write a python function to find the first digit in power of digits of a given number with n.\n    '''\n    return First_Digit_Power_of_Digits_of_n_with_n_with_n_with_n(n*10)\ndef First_Digit_Power_of_Digits_of_n_with_n_with_n_with_n_with_n_with_exponent(n): \n    '''\n    Write a python function to find the first digit in power of digits of a given number with n.\n    '''\n    return First_Digit_Power_of_Digits_of_n_with_n_with_n_with_n(n*10)\ndef First_Digit_Power_of_Digits_of_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_exponent(n): \n    '''\n    Write a python function to find the first digit in power of digits of a given number with n.\n    '''\n    return First_Digit_Power_of_Digits_of_n_with_n_with_n_with_n_with_n(n*10)\ndef First_Digit_Power_of_Digits_of_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_exponent(n): \n    '''\n    Write a python function to find the first digit in power of digits of a given number with n.\n    '''\n    return First_Digit_Power_of_Digits_of_n_with_n_with_n_with_n_with_n(n*10)\ndef First_Digit_Power_of_Digits_of_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_exponent(n): \n    '''\n    Write a python function to find the first digit in power of digits of a given number with n.\n    '''\n    return First_Digit_Power_of_Digits_of_n_with_n_with_n_with_n_with_n(n*10)\ndef First_Digit_Power_of_Digits_of_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_with_n_wit"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [val1 + val2 + val3 for val1,val2,val3 in zip(list1,list2,list3)]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if not(len(list1) == len(list2) == len(list3)):\n        print \"Input lists are not of equal length\"\n        return\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for x in range(len(list1)):\n        new_list.append(list1[x])\n        new_list.append(list2[x])\n        new_list.append(list3[x])\n    return new_list\n    \ndef sort_list(unsorted_list):\n    '''\n    Write a function to sort a list by recursively sorting the first half of the list\n    and the second half and interleaving the two sorted sublists.\n    '''\n    length = len(unsorted_list)\n    \n    if length < 2:\n        return unsorted_list\n    else:\n        half = length / 2\n        first_half = sort_list(unsorted_list[:half])\n        second_half = sort_list(unsorted_list[half:])\n        new_list = interleave_lists(first_half,second_half,unsorted_list[:half])\n    return new_list\n    \ndef test_sort_list():\n    print sort_list([1,2,3,4,5,6,7,8,9])\n    print sort_list([1,2,3,4,5,6,7,8,9])\n    print sort_list([])\n    print sort_list([1,2,3,4,5,6,7,8,9])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([2,1,3,4,5,6,7,8,9,10])\n    print sort_list([2,3,1,4,5,6,7,8,9,10])\n    print sort_list([2,3,1,4,5,6,7,8,9,10])\n    print sort_list([10,9,8,7,6,5,4,3,2,1])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1,2,3,4,5,6,7,8,9,10])\n    print sort_list([1"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    out_list = []\n    for i in range(len(list1)):\n        out_list.append(list1[i])\n        out_list.append(list2[i])\n        out_list.append(list3[i])\n    return out_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #raise NotImplementedError\n    if len(list1)==len(list2) and len(list1)==len(list3):\n        return list1+list2+list3\n    else:\n        return 'wrong list'\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list=[]\n    for a,b,c in zip(list1,list2,list3):\n        new_list.extend([a,b,c])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #list1 = list1[:]\n    #list2 = list2[:]\n    #list3 = list3[:]\n    return [item1+item2+item3 for item1, item2, item3 in zip(list1, list2, list3)]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    output = []\n    for i in range(len(list1)):\n        output.append(list1[i])\n        output.append(list2[i])\n        output.append(list3[i])\n    return output\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # your code here\n    return [x for x in test_tup1 + test_tup2 if test_tup1[x]!= test_tup2[x]]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim_list = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissim_list.append(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            dissim_list.append(i)\n    return dissim_list\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1_len = len(test_tup1)\n    test_tup2_len = len(test_tup2)\n    i = 0\n    j = 0\n    result = []\n    while i < test_tup1_len and j < test_tup2_len:\n        if test_tup1[i]!= test_tup2[j]:\n            result.append(test_tup1[i])\n            result.append(test_tup2[j])\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # sorted_list1 = sorted(test_tup1)\n    # sorted_list2 = sorted(test_tup2)\n    # return list(set(sorted_list1) - set(sorted_list2))\n    # difference = list(set(sorted_list1) - set(sorted_list2))\n    # difference.sort()\n    # return difference\n    return set(test_tup1) - set(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim_elems1 = []\n    dissim_elems2 = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i]!= test_tup2[j]:\n                if test_tup1[i] not in dissim_elems1:\n                    dissim_elems1.append(test_tup1[i])\n                if test_tup2[j] not in dissim_elems2:\n                    dissim_elems2.append(test_tup2[j])\n    return dissim_elems1, dissim_elems2\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissim_list.append(test_tup1[i])\n    return dissim_list\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    x = test_tup1[0]\n    y = test_tup2[0]\n    return set(x) & set(y)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if (test_tup1[0] is not test_tup2[0]) and (test_tup1[1] is not test_tup2[1]) and (test_tup1[2] is not test_tup2[2]):\n        return \"There are no dissimilar elements\"\n    else:\n        if test_tup1[0] is test_tup2[0]:\n            return \"Dissimilar element in position 0\"\n        elif test_tup1[1] is test_tup2[1]:\n            return \"Dissimilar element in position 1\"\n        elif test_tup1[2] is test_tup2[2]:\n            return \"Dissimilar element in position 2\"\n        else:\n            return \"Dissimilar elements in other positions\""
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim_lst = []\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have equal length\")\n        return []\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissim_lst.append(test_tup1[i])\n    return dissim_lst\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(a for a in test_tup1 if a not in test_tup2)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    nested_tuple = tuple(test_tuple)\n    output = tuple(filter(even_fnc, nested_tuple))\n    return output\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for item in test_tuple: \n        if even_fnc(item):\n            new_tuple += (item,)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for item in test_tuple:\n        if even_fnc(item):\n            new_tuple = new_tuple + (item,)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple([*filter(even_fnc, test_tuple)])\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for elt in test_tuple:\n        if elt[1] % 2 == 0:\n            new_list.append(elt)\n    return tuple(new_list)\n    \ndef combine_tuple(test_tuple, even_fnc, odd_fnc): \n    '''\n    Write a function to combine the even elements and odd elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for elt in test_tuple:\n        if elt[1] % 2 == 0:\n            new_list.append(even_fnc(elt))\n        else:\n            new_list.append(odd_fnc(elt))\n    return tuple(new_list)\n    \ndef new_tuple(test_tuple, even_fnc, odd_fnc):\n    '''\n    Write a function to combine the even elements and odd elements in the nested mixed tuple.\n    '''\n    return even_fnc(test_tuple), odd_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # lambda is an anonymous function \n    # lambda even_fnc:...\n    #... \n    return tuple(even_fnc(test_tuple)) \n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for x in test_tuple:\n        if even_fnc(x):\n            new_list.append(x)\n    return tuple(new_list)\n    \n    "
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return_tuple = ()\n    for ele in test_tuple: \n        if even_fnc(ele): \n            return_tuple += (ele,)\n    return return_tuple\n    \ndef to_tuple(test_list): \n    return tuple(test_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        return tuple(filter(even_fnc, test_tuple))\n    else:\n        return test_tuple\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surfaceArea = (b*s) + ((b**2)/2)\n    return surfaceArea\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sa = b*(b + s)\n    return sa\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b * s\n    \ndef surface_Area(b,h):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b * h / 2\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_2(b,h):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*h)\n    \ndef surface_Area_3(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_4(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_5(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_6(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_7(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_8(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_9(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_10(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_11(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_12(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_13(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_14(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_15(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_16(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_17(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_18(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_19(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_20(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_21(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_22(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_23(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_24(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_25(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_26(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_27(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_28(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_29(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_30(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_31(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_32(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (b*s)\n    \ndef surface_Area_33(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b*b) + (s*s)\n    \ndef surface_Area_34(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge an"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2)*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = b*s**2/4\n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    b = float(b)\n    s = float(s)\n    area = (b*s)\n    print \"surface area is \" + str(area)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*6\ndef volume(b,h):\n    '''\n    Write a python function to find the volume of a cube with a given base and height.\n    '''\n    return b*h*h*6\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n    \ndef volume(b,h):\n    '''\n    Write a python function to find the volume of a cuboid with a given base edge and height.\n    '''\n    return b*h\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\ndef all_the_same(items):\n    '''\n    Given an iterable, return True if all the elements are the same, and False otherwise.\n    '''\n    if len(items) == 0:\n        return True\n    else:\n        x = items[0]\n        for item in items:\n            if x!= item:\n                return False\n        return True\ndef remove_adjacent(items):\n    '''\n    Given an iterable, remove adjacent duplicate values.\n    '''\n    if len(items) == 0:\n        return items\n    elif len(items) == 1:\n        return items\n    elif len(items) == 2:\n        if items[0] == items[1]:\n            return items\n        else:\n            return items\n    else:\n        i = 1\n        while i < len(items):\n            if items[i] == items[i-1]:\n                del items[i]\n            i += 1\n    return items\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        print 'Dict is empty'\n    else:\n        print 'Dict is not empty'\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('Empty')\n    else:\n        print('Not empty')\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n    \ndef merge_dict(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries. \n    '''\n    dict3=dict1.copy()\n    dict3.update(dict2)\n    return dict3\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1=={}\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return 2*num + catalan_number(num-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num - 1) * (num + 1) / 2\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        print \"No catalan number exists for negative numbers\"\n        return None\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    n = num + 1\n    catalan_list = [0] * n\n    catalan_list[0] = 1\n    catalan_list[1] = 1\n    for i in range(2,n):\n        catalan_list[i] = 0\n        for j in range(i):\n            catalan_list[i] += catalan_list[j] * catalan_list[i - j - 1]\n    return catalan_list[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, num + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def factorial(num):\n        if num <= 1:\n            return 1\n        return num*factorial(num-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    \n    # The first two Catalan numbers are 1 and 1.\n    count = [1, 1]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_num = [0] * (num + 1)\n    catalan_num[0] = 1\n    for i in range(1, num + 1):\n        catalan_num[i] = 0\n        for j in range(1, i + 1):\n            catalan_num[i] += catalan_num[j - 1] * catalan_num[i - j]\n    return catalan_num[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    import math\n    if num == 1:\n        return 1\n    catalan = [0]*(num+1)\n    catalan[1] = 1\n    for n in range(2,num+1):\n        catalan[n] = 0\n        for k in range(1,n):\n            catalan[n] += catalan[k]*catalan[n-k]\n        catalan[n] = catalan[n]*2\n    return catalan[num]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    positions = []\n    pattern = re.compile(r'[^aeiouAEIOU]ly$')\n    matches = pattern.finditer(text)\n    for match in matches:\n        positions.append(match.start())\n    if positions:\n        return positions\n    else:\n        return [-1]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    print re.search(r\"ly\", text)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    results = []\n    ly_pos = []\n    pos_after_ly = []\n    ly_pattern = re.compile(r'ly$')\n    ly_matches = ly_pattern.finditer(text)\n    for match in ly_matches:\n        ly_pos.append(match.start())\n    for i in range(len(ly_pos)):\n        pos_after_ly.append(ly_pos[i]+1)\n    adverb_pattern = re.compile(r'[A-Za-z]+ly')\n    adverbs = adverb_pattern.findall(text)\n    if len(adverbs)>0:\n        print(adverbs[0])\n        print(ly_pos)\n        print(pos_after_ly)\n        for i in range(len(adverbs)):\n            if pos_after_ly[i]>ly_pos[i]:\n                results.append([adverbs[i],ly_pos[i],pos_after_ly[i]])\n    return results\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #define the regular expression\n    ly_pattern = re.compile(r'.*ly$')\n    #find all matches of the pattern\n    ly_matches = ly_pattern.findall(text)\n    #print all the matches\n    for match in ly_matches:\n        print match\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    output = []\n    for word in text.split(' '):\n        if word.endswith('ly'):\n            output.append(word)\n    return output\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.compile(r'\\sly\\b')\n    for match in adverbs.finditer(text):\n        print 'The first adverb ending with ly is \"%s\" at position %s' % (match.group(), match.start())\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    find_ly = re.findall(r'ly$', text)\n    find_ly_positions = [i for i in range(len(find_ly))]\n    return zip(find_ly, find_ly_positions)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall('\\w+ly$', text)\ndef find_capitalised_words(text):\n    '''\n    Write a function that returns all the words that have at least two vowels (a, e, i, o, u) in the string.\n    '''\n    return re.findall('\\w*[aeiou]{2,}', text)\ndef find_quote_words(text):\n    '''\n    Write a function that returns the first word which is followed by a quote character (') and its positions in a given string.\n    '''\n    return re.findall('(\\w+)\\'', text)\ndef find_capitalised_pairs(text):\n    '''\n    Write a function that returns the first word which is followed by a quote character (') and its positions in a given string.\n    '''\n    return re.findall('(\\w+)\\'(\\w+)', text)\ndef find_number_of_words_in_a_sentence(text):\n    '''\n    Write a function that returns the number of words in a sentence. Ignore the spaces and punctuation.\n    '''\n    return len(re.findall('\\w+', text))\ndef find_number_of_words_in_a_sentence2(text):\n    '''\n    Write a function that returns the number of words in a sentence. Ignore the spaces and punctuation.\n    '''\n    return len(re.findall('\\w+', text, re.IGNORECASE))\ndef count_letters(text):\n    '''\n    Write a function that counts the number of letters in a given string. Ignore all spaces and punctuation.\n    '''\n    return len(re.findall('\\w+', text))\ndef count_letters2(text):\n    '''\n    Write a function that counts the number of letters in a given string. Ignore all spaces and punctuation.\n    '''\n    return len(re.findall('\\w+', text, re.IGNORECASE))\ndef get_number_of_words(text):\n    '''\n    Write a function that returns the number of words in a given string. Ignore all spaces and punctuation.\n    '''\n    return len(re.findall('\\w+', text))\ndef get_number_of_words2(text):\n    '''\n    Write a function that returns the number of words in a given string. Ignore all spaces and punctuation.\n    '''\n    return len(re.findall('\\w+', text, re.IGNORECASE))\ndef get_number_of_words3(text):\n    '''\n    Write a function that returns the number of words in a given string. Ignore all spaces and punctuation.\n    '''\n    return len(re.findall('\\w+', text, re.I))\ndef get_number_of_words4(text):\n    '''\n    Write a function that returns the number of words in a given string. Ignore all spaces and punctuation.\n    '''\n    return len(re.findall('\\w+', text, re.I))\ndef count_spaces(text):\n    '''\n    Write a function that counts the number of spaces in a given string.\n    '''\n    return len(re.findall('\\s+', text))\ndef count_spaces2(text):\n    '''\n    Write a function that counts the number of spaces in a given string.\n    '''\n    return len(re.findall('\\s+', text))\ndef count_punctuation(text):\n    '''\n    Write a function that counts the number of punctuation in a given string.\n    '''\n    return len(re.findall('\\W+', text))\ndef count_punctuation2(text):\n    '''\n    Write a function that counts the number of punctuation in a given string.\n    '''\n    return len(re.findall('\\W+', text))\ndef get_number_of_words_with_dictionary(text):\n    '''\n    Write a function that returns the number of words in a given string. Ignore all spaces and punctuation.\n    '''\n    d = {}\n    for i in re.findall('\\w+', text):\n        d[i] = d.get(i, 0) + 1\n    return d\ndef get_number_of_words_with_dictionary2(text):\n    '''\n    Write a function that returns the number of words in a given string. Ignore all spaces and punctuation.\n    '''\n    d = {}\n    for i in re.findall('\\w+', text, re.I):\n        d[i] = d.get(i, 0) + 1\n    return d\ndef get_number_of_words_with_dictionary3(text):\n    '''\n    Write a function that returns the number of words in a given string. Ignore all spaces and punctuation.\n    '''\n    d = {}\n    for i in re.findall('\\w+', text, re.I):\n        d[i] = d.get(i, 0) + 1\n    return d\ndef get_number_of_words_with_dictionary4(text):\n    '''\n    Write a function that returns the number of words in a given string. Ignore all spaces and punctuation.\n    '''\n    d = {}\n    for i in re.findall('\\w+', text, re.I):\n        d[i] = d.get(i, 0) + 1\n    return d\ndef get_number_of_words_with_dictionary5(text):\n    '''\n    Write a function that returns the number of words in a given string. Ignore all spaces and punctuation.\n    '''\n    d = {}\n    for i in re.findall('\\w+', text, re.I):\n        d[i] = d.get(i, 0) + 1\n    return d\ndef get_number_of_words_with_dictionary6(text):\n    '''\n    Write a function that returns the number of words in a given string. Ignore all spaces and punctuation.\n    '''\n    d = {}\n    for i in re.findall('\\w+', text, re.I):\n        d[i] = d.get(i, 0) + 1\n    return d\ndef count_vowels(text):\n    '''\n    Write a function that counts the number of vowels in a given string.\n    '''\n    return len(re.findall('\\w*[aeiou]{1,}', text))\ndef count_vowels2(text):\n    '''\n    Write a function that counts the number of vowels in a given string.\n    '''\n    return len(re.findall('\\w*[aeiou]{1,}', text))\ndef count_vowels3(text):\n    '''\n    Write a function that counts the number of vowels in a given string.\n    '''\n    return len(re.findall('[aeiou]', text))\ndef count_vowels4(text):\n    '''\n    Write a function that counts the number of vowels in a given string.\n    '''\n    return len(re.findall('[aeiou]', text, re.IGNORECASE))\ndef count_vowels5(text):\n    '''\n    Write a function that counts the number of vowels in a given string.\n    '''\n    return len(re.findall('[aeiou]', text, re.I))\ndef count_vowels6(text):\n    '''\n    Write a function that counts the number of vowels in a given string.\n    '''\n    return len(re.findall('[aeiou]', text, re.I))\ndef count_vowels7(text):\n    '''\n    Write a function that counts the number of vowels in a given string.\n    '''\n    return len(re.findall('[aeiou]', text, re.I))\ndef count_vowels8(text):\n    '''\n    Write a function that counts the number of vowels in a given string.\n    '''\n    return len(re.findall('[aeiou]', text, re.I))\ndef count_vowels9(text):\n    '''\n    Write a function that counts the number of vowels in a given string.\n    '''\n    return len(re.findal"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    r = re.compile(r'ly', re.IGNORECASE)\n    m = r.search(text)\n    if m:\n        print m.start()\n        print m.end()\n        print m.group()\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall('ly\\b', text)\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item,price in items:\n        heapq.heappush(heap,-price)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    #print(heap)\n    return [[item,price] for item,price in items if price==-heap[0]]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n, items,key=lambda x: x[1])\nprint(expensive_items([('a',100),('b',200),('c',300),('d',400),('e',200),('f',100),('g',2000)],2))\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # res = []\n    # for i in range(0,n):\n    #     for j in range(0,len(items)):\n    #         if items[j][1] > items[i][1]:\n    #             res.append(items[j])\n    #             break\n    # return res\n    # res = heapq.nlargest(n,items,key=lambda x:x[1])\n    # return res\n    res = heapq.nlargest(n,items,key=lambda x:x[1])\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #O(n log n)\n    #O(1)\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap,-items[i])\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap,items[i])\n    max_heap = heapq.nsmallest(n,max_heap)\n    final = []\n    for i in max_heap:\n        final.append(-i)\n    final = heapq.nsmallest(n,final)\n    return final\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if not items:\n        return []\n    items.sort(key=lambda x:x[1])\n    return items[-n:]\ndef smallest(numbers):\n    return min(numbers)\ndef largest(numbers):\n    return max(numbers)\ndef smallest_k(numbers,k):\n    return heapq.nsmallest(k,numbers)\ndef largest_k(numbers,k):\n    return heapq.nlargest(k,numbers)\ndef smallest_sum(numbers):\n    return sum(numbers)\ndef largest_sum(numbers):\n    return sum(numbers)\ndef min_subarray(numbers,target):\n    '''\n    Write a function to find the smallest subarray within an array which sums to a given value.\n    '''\n    start,end,target_sum,min_len = 0,0,0,float('inf')\n    for end in xrange(len(numbers)):\n        target_sum += numbers[end]\n        while target_sum >= target:\n            min_len = min(min_len,end - start + 1)\n            target_sum -= numbers[start]\n            start += 1\n    return min_len\ndef rotate_matrix(m):\n    '''\n    Write a function to rotate an NxN matrix 90 degrees clockwise\n    '''\n    if not m:\n        return m\n    n = len(m)\n    for layer in xrange(n/2):\n        first,last = layer,n-1-layer\n        for i in xrange(first,last):\n            offset = i - first\n            top = m[first][i]\n            left = [m[j][last-offset] for j in xrange(first,last)]\n            right = [m[j][first+offset] for j in xrange(first,last)]\n            bottom = m[last-offset][last]\n            for j in xrange(first,last):\n                m[j][first+offset] = m[j][last-offset]\n            for j in xrange(first,last):\n                m[j][last-offset] = m[j][i]\n            for j in xrange(first,last):\n                m[j][i] = left[j-first]\n            for j in xrange(first,last):\n                m[j][i] = top\n            m[first][last-offset] = bottom\n    return m\ndef rotate_matrix_2(m):\n    '''\n    Write a function to rotate an NxN matrix 90 degrees clockwise\n    '''\n    if not m:\n        return m\n    n = len(m)\n    for layer in xrange(n/2):\n        first,last = layer,n-1-layer\n        for i in xrange(first,last):\n            offset = i - first\n            top = m[first][i]\n            left = [m[j][last-offset] for j in xrange(first,last)]\n            right = [m[j][first+offset] for j in xrange(first,last)]\n            bottom = m[last-offset][last]\n            for j in xrange(first,last):\n                m[j][first+offset] = m[j][last-offset]\n            for j in xrange(first,last):\n                m[j][last-offset] = m[j][i]\n            for j in xrange(first,last):\n                m[j][i] = right[j-first]\n            for j in xrange(first,last):\n                m[j][i] = bottom\n        for i in xrange(first,last):\n            m[i][first] = m[i][last]\n            m[i][last] = m[first][last-i]\n            m[first][last-i] = m[last][first+i]\n            m[last][first+i] = m[first][i]\n    return m\ndef max_profit(prices):\n    if not prices:\n        return 0\n    max_profit = 0\n    for i in xrange(1,len(prices)):\n        max_profit = max(max_profit,prices[i]-prices[i-1])\n    return max_profit\ndef max_profit_2(prices):\n    if not prices:\n        return 0\n    max_profit = 0\n    min_price = prices[0]\n    for i in xrange(1,len(prices)):\n        max_profit = max(max_profit,prices[i]-min_price)\n        min_price = min(min_price,prices[i])\n    return max_profit\ndef smallest_diff(numbers):\n    if not numbers:\n        return None\n    numbers.sort()\n    return numbers[-1] - numbers[0]\ndef smallest_diff_2(numbers):\n    if not numbers:\n        return None\n    numbers.sort()\n    return numbers[-1] - numbers[0]\ndef bitwise_and(numbers):\n    return reduce(lambda x,y:x&y,numbers)\ndef bitwise_or(numbers):\n    return reduce(lambda x,y:x|y,numbers)\ndef bitwise_xor(numbers):\n    return reduce(lambda x,y:x^y,numbers)\ndef bitwise_not(numbers):\n    return reduce(lambda x,y:~(x^y),numbers)\ndef integer_break(n):\n    '''\n    Write a function that takes in a positive integer and returns the minimum number of positive integers that multiply to create the number.\n    '''\n    if not n:\n        return 1\n    # num = 1\n    # while n/num >= num:\n    #     num *= 10\n    # return int(n/num)\n    num = 1\n    while n/num > 1:\n        num *= 10\n    return n/num\ndef max_product(numbers):\n    '''\n    Write a function to find the maximum product of k numbers\n    '''\n    if not numbers:\n        return 0\n    numbers.sort()\n    return numbers[-1] * numbers[-2] * numbers[-3]\ndef max_product_2(numbers):\n    '''\n    Write a function to find the maximum product of k numbers\n    '''\n    if not numbers:\n        return 0\n    numbers.sort()\n    return reduce(lambda x,y:x*y,numbers[-3:])\ndef is_vowel(char):\n    return char in 'aeiou'\ndef is_vowel_2(char):\n    return char in 'aeiouy'\ndef is_vowel_3(char):\n    return char in 'aeiouy'\ndef is_vowel_4(char):\n    return char in 'aeiouy'\ndef num_splits(s,d):\n    '''\n    Write a function that takes in a string s and a character d and returns the number of times d appears in s\n    '''\n    if not s:\n        return 0\n    count,start,end = 0,0,0\n    while start < len(s):\n        if s[start] == d:\n            count += 1\n            start += 1\n        else:\n            end = start\n            while end < len(s) and s[end]!= d:\n                end += 1\n            count += (end-start)\n            start = end\n    return count\ndef num_splits_2(s,d):\n    '''\n    Write a function that takes in a string s and a character d and returns the number of times d appears in s\n    '''\n    if not s:\n        return 0\n    count,start,end = 0,0,0\n    while start < len(s):\n        if s[start] == d:\n            count += 1\n            start += 1\n        else:\n            end = start\n            while end < len(s) and s[end]!= d:\n                end += 1\n            count += (end-start)\n            start = end\n    return count\ndef remove_duplicates(numbers):\n    '''\n    Write a function that takes in a list of integers and removes all duplicates.\n    '''\n    if not numbers:\n        return []\n    numbers.sort()\n    res = [numbers[0]]\n    for i in xrange(1,len(numbers)):\n        if numbers[i"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n > len(items):\n        return []\n    items_index = []\n    for i in range(n):\n        heapq.heappush(items_index,(items[i][1],items[i][0]))\n    result = []\n    while len(items_index) > 0:\n        item = heapq.heappop(items_index)[1]\n        result.append(item)\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items)<n:\n        return 'error'\n    return heapq.nlargest(n,items,key=lambda x:x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = []\n    for item in items:\n        if len(result) == n:\n            return result\n        heapq.heappush(result,(item[1],item[0]))\n    return [heapq.heappop(result)[1] for i in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    '''\n    This question should be very tricky as the answer can be very expensive so \n    we need to heuristically solve this problem\n    '''\n    '''\n    h = []\n    for item,price in items:\n        heapq.heappush(h,price)\n    res = []\n    for i in range(n):\n        res.append(heapq.heappop(h))\n    return res\n    '''\n    def heap_items(items,n):\n        '''\n        Heapify the given items.\n        '''\n        for i in range(n):\n            heapq.heapify(items)\n        return items\n    return heap_items([item for item,price in items],n)\n    \ndef merge_lists(lists):\n    '''\n    Merge all the given lists.\n    '''\n    def merge(lists,index,left,right):\n        '''\n        Merge the left and right sublists together.\n        '''\n        i,j = 0,0\n        merged = []\n        while i<len(left) and j<len(right):\n            if left[i]<=right[j]:\n                merged.append(left[i])\n                i+=1\n            else:\n                merged.append(right[j])\n                j+=1\n        if i<len(left):\n            merged.extend(left[i:])\n        elif j<len(right):\n            merged.extend(right[j:])\n        return merged\n    def merge_sort(lists,left,right):\n        '''\n        Mergesort the given list of left and right sublists.\n        '''\n        if left==right:\n            return lists[left]\n        if left>right:\n            return lists[left]\n        if left==right-1:\n            return merge(lists,left,left,right)\n        mid = (left+right)/2\n        left_sorted = merge_sort(lists,left,mid)\n        right_sorted = merge_sort(lists,mid,right)\n        return merge(lists,left,left_sorted,right_sorted)\n    lists = merge_sort(lists,0,len(lists)-1)\n    return lists\n    \ndef k_largest(items,k):\n    '''\n    Find the k largest items in the dataset.\n    '''\n    h = []\n    for item,price in items:\n        heapq.heappush(h,(-price,item))\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(h)[1])\n    return res\n    \ndef k_largest_with_dup(items,k):\n    '''\n    Find the k largest items in the dataset.\n    '''\n    h = []\n    for item,price in items:\n        heapq.heappush(h,(item,price))\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(h)[0])\n    return res\n    \ndef k_smallest(items,k):\n    '''\n    Find the k smallest items in the dataset.\n    '''\n    h = []\n    for item,price in items:\n        heapq.heappush(h,price)\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(h))\n    return res\n    \ndef k_smallest_with_dup(items,k):\n    '''\n    Find the k smallest items in the dataset.\n    '''\n    h = []\n    for item,price in items:\n        heapq.heappush(h,price)\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(h))\n    return res\n    \ndef min_elem(items):\n    '''\n    Find the smallest element in the dataset.\n    '''\n    heapq.heapify(items)\n    return items[0]\n    \ndef min_elem_with_dup(items):\n    '''\n    Find the smallest element in the dataset.\n    '''\n    heapq.heapify(items)\n    return heapq.heappop(items)\n    \ndef max_elem(items):\n    '''\n    Find the largest element in the dataset.\n    '''\n    heapq.heapify(items)\n    return items[0]\n    \ndef max_elem_with_dup(items):\n    '''\n    Find the largest element in the dataset.\n    '''\n    heapq.heapify(items)\n    return heapq.heappop(items)\n    \ndef max_heap(items):\n    '''\n    Convert the given items into a max heap.\n    '''\n    for i in range(len(items)/2-1,-1,-1):\n        heapify(items,i)\n    return items\n    \ndef min_heap(items):\n    '''\n    Convert the given items into a min heap.\n    '''\n    for i in range(len(items)/2,0,-1):\n        heapify(items,i)\n    return items\n    \ndef heapify(items,i):\n    '''\n    Convert the given items into a max heap.\n    '''\n    l = 2*i+1\n    r = 2*i+2\n    if l<len(items) and items[l]>items[i]:\n        largest = l\n    else:\n        largest = i\n    if r<len(items) and items[r]>items[largest]:\n        largest = r\n    if largest!= i:\n        items[i],items[largest] = items[largest],items[i]\n        heapify(items,largest)\n    \ndef heappush(heap,item):\n    '''\n    Push the given item into the given heap.\n    '''\n    heap.append(item)\n    heapify(heap,len(heap)-1)\n    \ndef heappop(heap):\n    '''\n    Pop the item from the given heap and return it.\n    '''\n    if heap==[]:\n        return\n    item = heap[0]\n    heap[0] = heap[-1]\n    heap.pop()\n    heapify(heap,0)\n    return item\n    \ndef heappushpop(heap,item):\n    '''\n    Push the given item into the given heap and return the item popped out.\n    '''\n    if heap==[]:\n        return\n    heap[0] = item\n    heapify(heap,0)\n    return heappop(heap)\n    \ndef merge(list1,list2):\n    '''\n    Merge the given two lists into a single list.\n    '''\n    merged = []\n    while list1 or list2:\n        if list1==[]:\n            merged.append(list2.pop(0))\n        elif list2==[]:\n            merged.append(list1.pop(0))\n        else:\n            if list1[0]<=list2[0]:\n                merged.append(list1.pop(0))\n            else:\n                merged.append(list2.pop(0))\n    return merged\n    \ndef merge_sort(list1,list2):\n    '''\n    Merge sort the given lists.\n    '''\n    if not list1 and not list2:\n        return []\n    if not list1:\n        return list2\n    if not list2:\n        return list1\n    if list1[0]<list2[0]:\n        return [list1[0]]+merge_sort(list1[1:],list2)\n    else:\n        return [list2[0]]+merge_sort(list1,list2[1:])\n    \ndef merge_k_lists(lists):\n    '''\n    Merge k sorted lists into one sorted list.\n    '''\n    heap = []\n    for i in range(len(lists)):\n        heap.append((lists[i][0],i,lists[i]))\n    heapq.heapify(heap)\n    res = []\n    while heap:\n    "
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    print(\"items: \", items)\n    # Use a min heap to keep track of the expensive items\n    heapq.heapify(items)\n    # return the top n expensive items\n    return heapq.nsmallest(n,items)\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l_1 = l[:n]\n    l_2 = l[n:]\n    return l_1 + l_2\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:n+1] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    r = []\n    for i in range(0, len(l), n):\n        r.append(l[i:i+n])\n    return r\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    n = int(n)\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(n):\n        l.append(l.pop(0))\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    arr.append(l[:n])\n    arr.append(l[n:])\n    return arr\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple1 = tuple(listx)\n    print(tuple1)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    \n    def list_to_tuple(listx):\n        '''\n        Write a function to convert a list to a tuple.\n        '''\n        return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    x = tuple(listx)\n    return x\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    new_tuple = tuple(listx)\n    return new_tuple\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_num = min(nums)\n    max_num = max(nums)\n    return max_num - min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums)==0:\n        return 0\n    diff=abs(nums[0]-nums[-1])\n    for i in xrange(1, len(nums)):\n        diff=max(diff, abs(nums[i]-nums[i-1]))\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    print(nums[len(nums) - 1] - nums[0])\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = None\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if diff is None:\n                diff = nums[i] - nums[j]\n            else:\n                if nums[i] - nums[j] > diff:\n                    diff = nums[i] - nums[j]\n    return diff\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        return [x**2 for x in range(b, a+1) if x**2 <= b]\n    else:\n        return [x**2 for x in range(a, b+1) if x**2 <= a]"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for x in range(a, b):\n        if int(x**0.5)**2 == x:\n            squares.append(int(x**0.5))\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x for x in range(a,b+1) if x**.5 == int(x**.5)]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        min = a\n        max = b\n    else:\n        min = b\n        max = a\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return sum([x**2 for x in range(int(a**0.5), int(b**0.5))])\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b + 1):\n        # check if i is a perfect square\n        if i**.5 == int(i**.5):\n            squares.append(i)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return set([i**2 for i in range(max(a,b), min(a,b)+1) if i**2 <= max(a,b) and i**2 >= min(a,b)])\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sq = []\n    \n    for x in range(a,b):\n        if x*x == x:\n            sq.append(x)\n    \n    return sq\n    "
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a, b = int(a), int(b)\n    squares = []\n    for i in range(a, b+1):\n        if i*i == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # s = set()\n    # i = int(math.sqrt(a))\n    # while i <= b:\n    #     j = int(math.sqrt(i))\n    #     while j <= i:\n    #         s.add(i*i)\n    #         j += 1\n    #     i += 1\n    # return s\n    # # the above solution is also correct, but it uses list to store the set\n    # return [i*i for i in range(a, b+1) if i*i >= a and i*i <= b]\n    # the solution below is from the O(n) solution\n    # the idea is to use the fact that n*n <= b\n    # how to represent a range?\n    # the first, the range is in the form of a, b\n    # the second, is a tuple, in this case a, a-1, a-2,..., b\n    # the third, is a list\n    return [i*i for i in range(a, b+1) if i*i <= b]\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0:\n        if y==0:\n            return (0,0)\n        elif y>0:\n            return (0,y)\n        else:\n            return (x,-y)\n    elif x>0:\n        if y==0:\n            return (x,0)\n        elif y>0:\n            return (x,y)\n        else:\n            return (x,-y)\n    else:\n        if y==0:\n            return (x,-y)\n        elif y>0:\n            return (x,-y)\n        else:\n            return (x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    if x==0:\n        if y==0:\n            return (0,0)\n        elif y>0:\n            return (0,y)\n        else:\n            return (x,-y)\n    elif x>0:\n        if y==0:\n            return (x,0)\n        elif y>0:\n            return (x,y)\n        else:\n            return (x,-y)\n    else:\n        if y==0:\n            return (x,-y)\n        elif y>0:\n            return (x,-y)\n        else:\n            return (x,y)\ndef trig_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0:\n        if y==0:\n            return (0,0)\n        elif y>0:\n            return (0,y)\n        else:\n            return (x,-y)\n    elif x>0:\n        if y==0:\n            return (x,0)\n        elif y>0:\n            return (x,y)\n        else:\n            return (x,-y)\n    else:\n        if y==0:\n            return (x,-y)\n        elif y>0:\n            return (x,-y)\n        else:\n            return (x,y)\ndef rotate(origin, point, angle):\n    \"\"\"\n    Rotate a point counterclockwise by a given angle around a given origin.\n    The angle should be given in radians.\n    \"\"\"\n    ox, oy = origin\n    px, py = point\n    qx = ox + math.cos(angle) * (px - ox) - math.sin(angle) * (py - oy)\n    qy = oy + math.sin(angle) * (px - ox) + math.cos(angle) * (py - oy)\n    return qx, qy\ndef main():\n    '''\n    Write a program to implement Sierpinski Triangle.\n    '''\n    # a = 1.0\n    # b = 1.0\n    # c = 1.0\n    a,b,c = input().split()\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    i = float(1)\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*(i**3))/6\n        y = (b*(i**2))/4\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*(i**2))/4\n        y = (b*(i**3))/6\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*(i**2))/2\n        y = (b*(i**2))/2\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x = 0\n        y = 0\n        x = (a*i)\n        y = (b*i)\n        z = (c*i)\n        print(polar_rect(x,y))\n        i+=1\n    while i <= 1000:\n        x "
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_prime = x*(math.cos(y))\n    y_prime = x*(math.sin(y))\n    return (x_prime,y_prime)\ndef cart_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = (x**2+y**2)**.5\n    theta = math.atan2(y,x)\n    return (r,theta)\ndef polar_2d(p,r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*(math.cos(theta))\n    y = r*(math.sin(theta))\n    return (x,y)\ndef cart_2d(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = r*(math.cos(theta))\n    y = r*(math.sin(theta))\n    return (x,y)\ndef sin_cos(a):\n    '''\n    Write a function that returns the sine and cosine of a value in radians.\n    '''\n    s = math.sin(a)\n    c = math.cos(a)\n    return (s,c)\ndef f_part(a,b,c):\n    '''\n    Write a function to find the first part of an equation.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a)\ndef second_part(a,b,c):\n    '''\n    Write a function to find the second part of an equation.\n    '''\n    return (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef quadratic_roots(a,b,c):\n    '''\n    Write a function to find the roots of a quadratic equation\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a), (-b-cmath.sqrt(b**2-4*a*c))/(2*a)\ndef line_intersection(a,b,c,d):\n    '''\n    Write a function that takes two lines defined by points a,b and c,d as arguments and\n    returns the intersection point of the two lines.\n    '''\n    x_one = a[0]\n    y_one = a[1]\n    x_two = b[0]\n    y_two = b[1]\n    x_three = c[0]\n    y_three = c[1]\n    x_four = d[0]\n    y_four = d[1]\n    r1 = x_one*(y_two-y_three)-y_one*(x_two-x_three)\n    r2 = x_two*(y_four-y_three)-y_two*(x_four-x_three)\n    r3 = x_three*(y_four-y_one)-y_three*(x_four-x_one)\n    r4 = x_four*(y_one-y_two)-y_four*(x_one-x_two)\n    denom = (r1-r2)*(x_three-x_one)+(r3-r4)*(x_two-x_one)\n    x_intersect = (r1*(x_three-x_one)+(r3*(x_two-x_one)))/denom\n    y_intersect = (r1*(y_three-y_one)+(r3*(y_two-y_one)))/denom\n    return (x_intersect,y_intersect)\ndef midpoint(a,b):\n    '''\n    Write a function to find the midpoint of two values.\n    '''\n    x_one = a[0]\n    y_one = a[1]\n    x_two = b[0]\n    y_two = b[1]\n    return (x_one+x_two)/2, (y_one+y_two)/2\ndef angle_1(a,b):\n    '''\n    Write a function to find the angle of a point from the x-axis to another point.\n    '''\n    if a[0]==b[0]:\n        if a[1]>b[1]:\n            return math.pi/2\n        else:\n            return math.pi/2*3\n    if a[1]==b[1]:\n        if a[0]>b[0]:\n            return 0\n        else:\n            return math.pi\n    slope = b[1]/b[0]\n    angle = math.atan(slope)\n    if a[0]<b[0] and a[1]<b[1]:\n        return angle\n    if a[0]<b[0] and a[1]>b[1]:\n        return angle+math.pi\n    if a[0]>b[0] and a[1]>b[1]:\n        return angle+math.pi\n    if a[0]>b[0] and a[1]<b[1]:\n        return angle\n    if a[0]==b[0] and a[1]>b[1]:\n        return math.pi/2\n    if a[0]==b[0] and a[1]<b[1]:\n        return math.pi\ndef angle_2(a,b):\n    '''\n    Write a function to find the angle of a point from the x-axis to another point.\n    '''\n    if a[0]==b[0]:\n        if a[1]<b[1]:\n            return math.pi/2\n        else:\n            return math.pi/2*3\n    if a[1]==b[1]:\n        if a[0]<b[0]:\n            return 0\n        else:\n            return math.pi\n    slope = b[1]/b[0]\n    angle = math.atan(slope)\n    if a[0]<b[0] and a[1]<b[1]:\n        return angle\n    if a[0]<b[0] and a[1]>b[1]:\n        return angle+math.pi\n    if a[0]>b[0] and a[1]>b[1]:\n        return angle+math.pi\n    if a[0]>b[0] and a[1]<b[1]:\n        return angle\n    if a[0]==b[0] and a[1]>b[1]:\n        return math.pi/2\n    if a[0]==b[0] and a[1]<b[1]:\n        return math.pi\ndef line_length(a,b):\n    '''\n    Write a function to find the length of a line segment from the origin to another point.\n    '''\n    x_one = a[0]\n    y_one = a[1]\n    x_two = b[0]\n    y_two = b[1]\n    return ((x_two-x_one)**2+(y_two-y_one)**2)**.5\ndef line_angle(a,b):\n    '''\n    Write a function to find the angle of a line segment from the origin to another point.\n    '''\n    x_one = a[0]\n    y_one = a[1]\n    x_two = b[0]\n    y_two = b[1]\n    slope = (y_two-y_one)/(x_two-x_one)\n    return math.atan(slope)\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle from three sides.\n    '''\n    s_one = line_length(a,b)\n    s_two = line_length(b,c)\n    s_three = line_length(c,a)\n    return (s_one*s_two)/2\ndef are_rectangles_equal(a,b):\n    '''\n    Write a function to check if two rectangles are equal.\n    '''\n    if a[0]==b[0] and a[1]==b[1] and a[2]="
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import cmath\n    return cmath.rect(cmath.sqrt(x**2 + y**2),cmath.atan2(y,x))\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    angle = cmath.atan2(y,x)\n    return r, angle\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x == 0:\n        if y == 0:\n            return 0,0\n        else:\n            return 0,1\n    elif y == 0:\n        return 1,0\n    else:\n        return (x,y)\ndef min(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    def rect_form(r,theta):\n        '''\n        Write a function that converts polar coordinates to rectangular\n        coordinates.\n        '''\n        x = r*cos(theta)\n        y = r*sin(theta)\n        return x,y\n    return rect_form(x,y)\ndef polar_rot(x,y,theta):\n    '''\n    Write a function that rotates a point(x,y) counterclockwise by an angle theta.\n    '''\n    def rotate(x,y,theta):\n        '''\n        Write a function that rotates a point(x,y) counterclockwise by an angle theta.\n        '''\n        rotate_point = [x*cos(theta)-y*sin(theta),x*sin(theta)+y*cos(theta)]\n        return rotate_point\n    return rotate(x,y,theta)\ndef complex_exp(c,n):\n    '''\n    Write a function to compute exp(c*i*n).\n    '''\n    def exp(c,n):\n        '''\n        Write a function to compute exp(c*i*n).\n        '''\n        return cmath.exp(n*c)\n    return exp(c,n)\ndef complex_log(c,n):\n    '''\n    Write a function to compute log(c*i*n).\n    '''\n    def log(c,n):\n        '''\n        Write a function to compute log(c*i*n).\n        '''\n        return cmath.log(c*n)\n    return log(c,n)\ndef complex_sqrt(c,n):\n    '''\n    Write a function to compute sqrt(c*i*n).\n    '''\n    def sqrt(c,n):\n        '''\n        Write a function to compute sqrt(c*i*n).\n        '''\n        return cmath.sqrt(c*n)\n    return sqrt(c,n)\ndef unit_vector(x,y):\n    '''\n    Write a function that generates unit vectors with x,y as vector components.\n    '''\n    def unit_vector(x,y):\n        '''\n        Write a function that generates unit vectors with x,y as vector components.\n        '''\n        return x/cmath.sqrt(x**2+y**2),y/cmath.sqrt(x**2+y**2)\n    return unit_vector(x,y)\ndef dot_product(x,y):\n    '''\n    Write a function that computes the dot product of two vectors.\n    '''\n    def dot_product(x,y):\n        '''\n        Write a function that computes the dot product of two vectors.\n        '''\n        return x[0]*y[0]+x[1]*y[1]\n    return dot_product(x,y)\ndef c_plus_s(x,y):\n    '''\n    Write a function that computes the complex number x+y.\n    '''\n    def c_plus_s(x,y):\n        '''\n        Write a function that computes the complex number x+y.\n        '''\n        return x+y\n    return c_plus_s(x,y)\ndef c_times_s(x,y):\n    '''\n    Write a function that computes the complex number x+y.\n    '''\n    def c_times_s(x,y):\n        '''\n        Write a function that computes the complex number x+y.\n        '''\n        return x*y\n    return c_times_s(x,y)\ndef c_power_s(x,n):\n    '''\n    Write a function that computes the complex number x+y.\n    '''\n    def c_power_s(x,n):\n        '''\n        Write a function that computes the complex number x+y.\n        '''\n        return cmath.exp(n*cmath.log(x))\n    return c_power_s(x,n)\ndef polar_to_rect(r,theta):\n    '''\n    Write a function that converts polar coordinates to rectangular\n    coordinates.\n    '''\n    def rect_form(r,theta):\n        '''\n        Write a function that converts polar coordinates to rectangular\n        coordinates.\n        '''\n        x = r*cos(theta)\n        y = r*sin(theta)\n        return x,y\n    return rect_form(r,theta)\ndef rect_to_polar(x,y):\n    '''\n    Write a function that converts rectangular coordinates to polar\n    coordinates.\n    '''\n    def polar_form(x,y):\n        '''\n        Write a function that converts rectangular coordinates to polar\n        coordinates.\n        '''\n        r = sqrt(x**2+y**2)\n        theta = atan(y/x)\n        return r,theta\n    return polar_form(x,y)\ndef c_div_s(x,y):\n    '''\n    Write a function that computes the complex number x/y.\n    '''\n    def c_div_s(x,y):\n        '''\n        Write a function that computes the complex number x/y.\n        '''\n        return x/y\n    return c_div_s(x,y)\ndef c_mod_s(x,y):\n    '''\n    Write a function that computes the modulus of the complex number x/y.\n    '''\n    def c_mod_s(x,y):\n        '''\n        Write a function that computes the modulus of the complex number x/y.\n        '''\n        return abs(x/y)\n    return c_mod_s(x,y)\ndef polar_com_div_s(r,theta):\n    '''\n    Write a function that computes the complex number x/y.\n    '''\n    def c_div_s(r,theta):\n        '''\n        Write a function that computes the complex number x/y.\n        '''\n        return r*cos(theta),r*sin(theta)\n    return c_div_s(r,theta)\ndef polar_com_mod_s(r,theta):\n    '''\n    Write a function that computes the modulus of the complex number x/y.\n    '''\n    def c_mod_s(r,theta):\n        '''\n        Write a function that computes the modulus of the complex number x/y.\n        '''\n        return abs(r*cos(theta))\n    return c_mod_s(r,theta)\ndef rect_rot(x,y,theta):\n    '''\n    Write a function that rotates a point(x,y) counterclockwise by an angle theta.\n    '''\n    def rotate(x,y,theta):\n        '''\n        Write a function that rotates a point(x,y) counterclockwise by an angle theta.\n        '''\n        rotate_point = [x*cos(theta)-y*sin(theta),x*sin(theta)+y*cos(theta)]\n        return rotate_point\n    return rotate(x,y,theta)\ndef c_div_c(x,y):\n    '''\n    Write a function that computes the complex number x/y.\n    '''\n    def c_div_c(x,y):\n        '''\n        Write a function that computes the complex number x/y.\n        '''\n        return x/y\n    return c_div_c(x,y)\ndef c_mod_c(x,y):\n    '''\n    Write a function that computes the modulus of the complex number x/y.\n    '''\n    def c_mod_c(x,y):\n        '''\n        Write a function that computes the modulus of the complex number x/y.\n        '''\n        return abs(x/y)\n    return c_mod_c(x,y)\ndef c_conj(x):\n    '''\n    Write a function that computes the conjugate of a complex number x.\n    '''\n    def c_conj(x):\n        '''\n        Write a function that computes the conjugate of a complex numbe"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_rect=int(x*math.cos(y))\n    y_rect=int(x*math.sin(y))\n    return x_rect,y_rect\ndef convert_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    y_rect=int(math.sqrt((x**2)+(y**2)))\n    x_rect=int(math.sqrt((x**2)-(y**2)))\n    theta=math.atan(y/x)\n    return y_rect,x_rect,theta\ndef mod_of(a,b):\n    return cmath.sqrt(a**2+b**2)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=mod_of(x,y)\n    b=mod_of(y,x)\n    return a,b\ndef polar_to_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=r*math.cos(theta)\n    y=r*math.sin(theta)\n    return x,y\ndef mult_by_i(x,y):\n    return x*1j,y*1j\ndef add_by_i(x,y):\n    return x+y*1j,x-y*1j\ndef add_by_i_2(x,y):\n    return cmath.rect(x,y)+cmath.rect(y,x)\ndef add_by_i_3(x,y):\n    return cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)\ndef add_by_i_4(x,y):\n    return cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)\ndef add_by_i_5(x,y):\n    return cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)\ndef add_by_i_6(x,y):\n    return cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)\ndef add_by_i_7(x,y):\n    return cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)\ndef add_by_i_8(x,y):\n    return cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)\ndef add_by_i_9(x,y):\n    return cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)\ndef add_by_i_10(x,y):\n    return cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rect(y,x)+cmath.rect(x,y)+cmath.rec"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    #print(str(r))\n    angle = cmath.acos(y/r)\n    #print(str(angle))\n    if x>0 and y>0:\n        angle = angle + cmath.pi\n    elif x<0 and y>0:\n        angle = angle + cmath.pi\n    elif x<0 and y<0:\n        angle = angle + cmath.pi\n    elif x>0 and y<0:\n        angle = angle + cmath.pi\n    return round(r,2),round(angle,2)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    x = complex(x)\n    y = complex(y)\n    p = math.sqrt(x.real**2+y.real**2)\n    return str(p)+\"+\"+str(x.imag)+\"j\"+str(y.imag)\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size-1]\n    newList[size-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \n    \n    \ndef move_odd(newList):\n    '''\n    Write a python function to move an odd indexed element to the end of a list. \n    '''\n    odd = newList[1::2]\n    odd.extend(newList[0::2])\n    return odd\n    \n    \ndef first_last(newList):\n    '''\n    Write a python function to return the first element and last element of a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    return [first,last]\n    \n    \ndef make_list(newList):\n    '''\n    Write a python function to return the middle value of a list.\n    '''\n    mid = len(newList)/2\n    return newList[mid]\n    \n    \ndef remove_middle(newList):\n    '''\n    Write a python function to remove the middle value of a list.\n    '''\n    del newList[1:-1]\n    return newList\n    \n    \ndef odd_even(newList):\n    '''\n    Write a python function to return the second half of a list and the first half of a list.\n    '''\n    odd = newList[1::2]\n    even = newList[0::2]\n    return [odd,even]\n    \n    \ndef reverse(newList):\n    '''\n    Write a python function to return a list with the values in reversed order.\n    '''\n    return newList[::-1]\n    \n    \ndef binary_search(newList,target):\n    '''\n    Write a python function to perform a binary search on a sorted list and return the position.\n    '''\n    left = 0\n    right = len(newList)-1\n    while left <= right:\n        mid = (left+right)/2\n        if newList[mid] == target:\n            return mid\n        elif newList[mid] < target:\n            left = mid+1\n        else:\n            right = mid-1\n    return None\n    \n    \ndef binary_search_recursive(newList,target,left,right):\n    '''\n    Write a python function to perform a binary search on a sorted list and return the position.\n    '''\n    if left > right:\n        return None\n    else:\n        mid = (left+right)/2\n        if newList[mid] == target:\n            return mid\n        elif newList[mid] < target:\n            return binary_search_recursive(newList,target,mid+1,right)\n        else:\n            return binary_search_recursive(newList,target,left,mid-1)\n        \n        \ndef odd_list(newList):\n    '''\n    Write a python function to return a list of the odd numbers of a list.\n    '''\n    return [x for x in newList if x%2]\n    \n    \ndef even_list(newList):\n    '''\n    Write a python function to return a list of the even numbers of a list.\n    '''\n    return [x for x in newList if not x%2]\n    \n    \ndef is_palindrome(newList):\n    '''\n    Write a python function to return True if a list is a palindrome, False otherwise.\n    '''\n    return newList == newList[::-1]\n    \n    \ndef count_list(newList):\n    '''\n    Write a python function to return the count of a particular value in a list.\n    '''\n    return newList.count(3)\n    \n    \ndef count_even(newList):\n    '''\n    Write a python function to return the count of the even numbers in a list.\n    '''\n    return newList.count(2)\n    \n    \ndef reverse_count(newList):\n    '''\n    Write a python function to return the count of the reverse of a list.\n    '''\n    rev = newList[::-1]\n    return rev.count(3)\n    \n    \ndef middle_value(newList):\n    '''\n    Write a python function to return the average of the middle three numbers of a list.\n    '''\n    mid = len(newList)/2\n    return (newList[mid]+newList[mid+1]+newList[mid+2])/3\n    \n    \ndef middle_value_recursive(newList,left,right):\n    '''\n    Write a python function to return the average of the middle three numbers of a list.\n    '''\n    if left == right:\n        return newList[left]\n    else:\n        mid = (left+right)/2\n        return (newList[mid]+newList[mid+1]+newList[mid+2])/3\n        \n    \ndef max_value(newList):\n    '''\n    Write a python function to return the max value of a list.\n    '''\n    return max(newList)\n    \n    \ndef min_value(newList):\n    '''\n    Write a python function to return the min value of a list.\n    '''\n    return min(newList)\n    \n    \ndef rotate_list(newList):\n    '''\n    Write a python function to rotate a list to the right.\n    '''\n    return newList[-1:] + newList[:-1]\n    \n    \ndef reverse_rotate(newList):\n    '''\n    Write a python function to rotate a list to the right and return the new list.\n    '''\n    return newList[-1:] + newList[:-1]\n    \n    \ndef sum_all(newList):\n    '''\n    Write a python function to return the sum of all the values in a list.\n    '''\n    return sum(newList)\n    \n    \ndef sum_odd(newList):\n    '''\n    Write a python function to return the sum of all the odd values in a list.\n    '''\n    return sum([x for x in newList if x%2])\n    \n    \ndef sum_even(newList):\n    '''\n    Write a python function to return the sum of all the even values in a list.\n    '''\n    return sum([x for x in newList if not x%2])\n    \n    \ndef only_odd(newList):\n    '''\n    Write a python function to return the list of all the odd numbers in a list.\n    '''\n    return [x for x in newList if x%2]\n    \n    \ndef only_even(newList):\n    '''\n    Write a python function to return the list of all the even numbers in a list.\n    '''\n    return [x for x in newList if not x%2]\n    \n    \ndef contains_none(newList):\n    '''\n    Write a python function to return True if a list contains None, False otherwise.\n    '''\n    return newList.count(None) > 0\n    \n    \ndef contains_multiple_none(newList):\n    '''\n    Write a python function to return True if a list contains more than one None, False otherwise.\n    '''\n    return newList.count(None) > 1\n    \n    \ndef sum_of_none(newList):\n    '''\n    Write a python function to return the sum of all the numbers in a list.\n    '''\n    return sum([x for x in newList if x is None])\n    \n    \ndef none_sum(newList):\n    '''\n    Write a python function to return the sum of all the None values in a list.\n    '''\n    return sum([x for x in newList if x is None])\n    \n    \ndef contains_a_string(newList):\n    '''\n    Write a python function to return True if a list contains a string, False otherwise.\n    '''\n    return newList.count('string') > 0\n    \n    \ndef contains_a_number(newList):\n    '''\n    Write a python function to return True if a list contains a number, False otherwise.\n    '''\n    return newList.count(2) > 0\n    \n    \ndef contains_a_float(newList):\n    '''\n    Write a python function to return True if a list contains a float, False otherwise.\n    '''\n    return newList.coun"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #using swapping\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    "
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_coeff = [1,1]\n    for i in range(2,n+1):\n        binomial_coeff.append((binomial_coeff[-1]*i)//(i-1))\n    return binomial_coeff[n]//binomial_coeff[k]\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff=1\n    if k>n-k:\n        k=n-k\n    for i in range(0,k):\n        coeff=coeff*(n-i)\n        coeff=coeff//(i+1)\n    return coeff\n    \ndef binomial_list(n):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_list=[]\n    for i in range(0,n+1):\n        binomial_list.append(binomial_Coeff(n,i))\n    return binomial_list\n    \nprint(binomial_list(4))"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C=[[0 for x in range(k+1)] for x in range(n+1)] \n    for i in range(n+1): \n        for j in range(min(i,k)+1): \n            if j==0 or j==i: \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][k]\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(0,k):\n        res = res * (n-i)\n        res = res//(i+1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return reduce(lambda x,y:x*y, range(1,k+1))/reduce(lambda x,y:x*y, range(1,n-k+1))\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    C = []\n    C.append(0)\n    C.append(n)\n    for i in range(2,n):\n        C.append(C[i-1] + C[i-2])\n    result = 1\n    for i in range(n-k+1,n+1):\n        result *= C[i]\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Base Case\n    if k > n :\n        return 0\n    if k == 0:\n        return 1\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coefficient = 1\n    s = 0\n    for i in range(k):\n        coefficient = coefficient * (n-i)\n        s = s + coefficient/i\n    return s\ndef binomial_coefficient(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    bino_coeff = binomial_coefficient(n-1,k-1) + binomial_coefficient(n-1,k)\n    return bino_coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(1,k+1):\n        res = res*(n-i+1)/i\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==0 or k==0:\n        return 1\n    if k>n:\n        return 0\n    if k==n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n    \n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    for i in xrange(4):\n        if int(ip[i]) > 0:\n            ip[i] = str(int(ip[i]))\n            break\n    return '.'.join(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #ip = ip.strip()\n    #ip = ip.split('.')\n    #ip = '.'.join([x for x in ip if x!= '0'])\n    return re.sub('[0]+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        ip_num = ip.split('.')\n        for index, num in enumerate(ip_num):\n            if int(num) == 0:\n                ip_num.pop(index)\n            else:\n                return \".\".join(ip_num)\n    except:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return '.'.join([str(int(i)) for i in ip.split('.')])\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) == 0:\n        return\n    if not ip.startswith('0'):\n        return ip\n    else:\n        return removezero_ip(ip[1:])\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_ip=re.sub(r'0+','',ip)\n    return zero_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip('0')\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == '':\n        return ''\n    if ip[0] == '0':\n        return ip[1:]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0*','',ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^0+', re.M)\n    return pattern.sub('', ip)\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from a port.\n    '''\n    pattern = re.compile(r'^0+', re.M)\n    return pattern.sub('', port)\ndef check_ip_port_in_lines(lines, keyword):\n    '''\n    This function is used to identify the keyword in the lines of the file,\n    and return the index of the line, and the keyword index of that line.\n    '''\n    index = []\n    for line in lines:\n        if keyword in line:\n            index.append(lines.index(line))\n    return index\ndef num_of_lines(lines, keyword):\n    '''\n    This function is used to count the number of lines.\n    '''\n    count = 0\n    for line in lines:\n        if keyword in line:\n            count = count + 1\n    return count\ndef id_of_keyword(lines, keyword):\n    '''\n    This function is used to identify the index of the keyword in the file.\n    '''\n    index = []\n    for line in lines:\n        if keyword in line:\n            index.append(line.index(keyword))\n    return index\ndef is_ip_or_port_in_file(lines, keyword, keyword2):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    index1 = check_ip_port_in_lines(lines, keyword)\n    index2 = check_ip_port_in_lines(lines, keyword2)\n    if len(index1)!= len(index2):\n        return False\n    else:\n        return True\ndef check_ip_in_file(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    index1 = check_ip_port_in_lines(lines, keyword)\n    if len(index1) == 0:\n        return False\n    else:\n        return True\ndef keyword_in_lines(lines, keyword):\n    '''\n    This function is used to check the keyword in the lines.\n    '''\n    for line in lines:\n        if keyword in line:\n            return True\n    return False\ndef keyword_in_file(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword_in_lines(lines, keyword) == True:\n        return True\n    else:\n        return False\ndef keyword_in_file2(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword_in_lines(lines, keyword) == False:\n        return True\n    else:\n        return False\ndef keyword_in_file3(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    for line in lines:\n        if keyword in line:\n            return True\n    return False\ndef keyword_in_file4(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    return False\ndef keyword_in_file5(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file6(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file7(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file8(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file9(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file10(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file11(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file12(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file13(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file14(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file15(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file16(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file17(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file18(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file19(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file20(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file21(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file22(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file23(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file24(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file25(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file26(lines, keyword):\n    '''\n    This function is used to check the keyword in the file.\n    '''\n    if keyword in lines:\n        return True\n    else:\n        return False\ndef keyword_in_file27(lines, keyword):\n    '''\n    This function is used to check the keyword in the fil"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    count = 0\n    while True:\n        if count == len(list1):\n            break\n        if list1[count]%2 == 0:\n            break\n        count += 1\n    \n    return list1[count] - list1[count-1]\n    \n    \ndef get_element_by_index(list1, index):\n    '''\n    Write a function to find an element by its index from a given list.\n    '''\n    if index >= len(list1):\n        return None\n    return list1[index]\n    \n    \ndef get_random_number_in_range(range1, range2):\n    '''\n    Write a function to return a random number between range1 and range2.\n    '''\n    return random.randint(range1, range2)\n    \n    \ndef get_last_element(list1):\n    '''\n    Write a function to return the last element of a list.\n    '''\n    return list1[-1]\n    \n    \ndef is_list_in_list(list1, list2):\n    '''\n    Write a function to find if a list is in another list.\n    '''\n    return list1 in list2\n    \n    \ndef is_list_in_list_contains(list1, list2):\n    '''\n    Write a function to find if a list is in another list.\n    '''\n    return list1 in list2\n    \n    \ndef get_length_of_list(list1):\n    '''\n    Write a function to return the length of a list.\n    '''\n    return len(list1)\n    \n    \ndef sum_of_list(list1):\n    '''\n    Write a function to return the sum of all the elements in a list.\n    '''\n    return sum(list1)\n    \n    \ndef get_max_element_in_list(list1):\n    '''\n    Write a function to return the max value in a list.\n    '''\n    return max(list1)\n    \n    \ndef get_min_element_in_list(list1):\n    '''\n    Write a function to return the min value in a list.\n    '''\n    return min(list1)\n    \n    \ndef swap_elements_in_list(list1, index1, index2):\n    '''\n    Write a function to swap the elements in a list.\n    '''\n    list1[index1], list1[index2] = list1[index2], list1[index1]\n    \n    \ndef remove_element_from_list(list1, element):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    list1.remove(element)\n    \n    \ndef remove_element_by_index(list1, index):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    del list1[index]\n    \n    \ndef sort_list(list1):\n    '''\n    Write a function to sort a list.\n    '''\n    return sorted(list1)\n    \n    \ndef get_ascii_value_of_character(character):\n    '''\n    Write a function to return the ascii value of a character.\n    '''\n    return ord(character)\n    \n    \ndef get_string_length(string1):\n    '''\n    Write a function to return the length of a string.\n    '''\n    return len(string1)\n    \n    \ndef insert_element_at_index(list1, element, index):\n    '''\n    Write a function to insert an element at a particular index.\n    '''\n    list1.insert(index, element)\n    \n    \ndef sort_list_by_ascending_order(list1):\n    '''\n    Write a function to sort a list.\n    '''\n    return sorted(list1)\n    \n    \ndef get_ascii_value_of_string(string1):\n    '''\n    Write a function to return the ascii value of a string.\n    '''\n    return [ord(x) for x in string1]\n    \n    \ndef get_list_of_digits(num):\n    '''\n    Write a function to return the list of digits of a number.\n    '''\n    digits = []\n    while num > 0:\n        digits.insert(0, num%10)\n        num = num//10\n    return digits\n    \n    \ndef sum_of_digits(num):\n    '''\n    Write a function to return the sum of digits of a number.\n    '''\n    digits = get_list_of_digits(num)\n    return sum(digits)\n    \n    \ndef multiply_of_digits(num):\n    '''\n    Write a function to return the multiplication of digits of a number.\n    '''\n    digits = get_list_of_digits(num)\n    return reduce(lambda x, y: x * y, digits)\n    \n    \ndef get_number_of_distinct_characters(string1):\n    '''\n    Write a function to return the number of distinct characters in a string.\n    '''\n    distinct_characters = []\n    for character in string1:\n        if character not in distinct_characters:\n            distinct_characters.append(character)\n    return len(distinct_characters)\n    \n    \ndef get_ascii_value_of_string_by_index(string1, index):\n    '''\n    Write a function to return the ascii value of a string.\n    '''\n    return ord(string1[index])\n    \n    \ndef print_elements_of_list_in_descending_order(list1):\n    '''\n    Write a function to print elements of a list in descending order.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        print(list1[i])\n    \n    \ndef print_elements_of_list_in_ascending_order(list1):\n    '''\n    Write a function to print elements of a list in ascending order.\n    '''\n    for i in range(0, len(list1)):\n        print(list1[i])\n    \n    \ndef print_elements_of_list_in_given_order(list1, index_order):\n    '''\n    Write a function to print elements of a list in a given order.\n    '''\n    for i in index_order:\n        print(list1[i])\n    \n    \ndef get_first_element_of_list(list1):\n    '''\n    Write a function to return the first element of a list.\n    '''\n    return list1[0]\n    \n    \ndef get_last_element_of_list(list1):\n    '''\n    Write a function to return the last element of a list.\n    '''\n    return list1[-1]\n    \n    \ndef get_number_of_elements_in_list(list1):\n    '''\n    Write a function to return the number of elements in a list.\n    '''\n    return len(list1)\n    \n    \ndef get_last_element_of_list(list1):\n    '''\n    Write a function to return the last element of a list.\n    '''\n    return list1[-1]\n    \n    \ndef get_first_element_of_list(list1):\n    '''\n    Write a function to return the first element of a list.\n    '''\n    return list1[0]\n    \n    \ndef get_index_of_element_in_list(list1, element):\n    '''\n    Write a function to return the index of an element in a list.\n    '''\n    return list1.index(element)\n    \n    \ndef print_first_element_of_list(list1):\n    '''\n    Write a function to print the first element of a list.\n    '''\n    print(list1[0])\n    \n    \ndef print_last_element_of_list(list1):\n    '''\n    Write a function to print the last element of a list.\n    '''\n    print(list1[-1])\n    \n    \ndef get_first_element_of_list(list"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = list1[0] - list1[1]\n    if diff > 0:\n        print \"Odd number is greater than even number\"\n    elif diff == 0:\n        print \"Odd number is same as even number\"\n    else:\n        print \"Even number is greater than odd number\"\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[-1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    def first_even_odd(list2):\n        first_even = list2[0]\n        first_odd = list2[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i % 2 == 0:\n            list2.append(i)\n    return abs(list2[0] - list2[1])\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if list1 == []:\n        return 'empty list'\n    else:\n        return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = list1[0]\n    first_odd = list1[1]\n    return abs(first_even - first_odd)\n    \ndef find_missing_number(list1):\n    '''\n    Write a function to find the missing number in a given list\n    '''\n    count = len(list1)\n    for i in range(count):\n        list1[i] = list1[i]+1\n    print list1\n    missing = []\n    for i in range(count):\n        if list1[i] > count:\n            missing.append(i+1)\n    return missing\n    \ndef min_element(list1):\n    '''\n    Write a function to find the minimum number in a list\n    '''\n    min_num = min(list1)\n    return min_num\n    \ndef max_element(list1):\n    '''\n    Write a function to find the maximum number in a list\n    '''\n    max_num = max(list1)\n    return max_num\n    \ndef reverse_list(list1):\n    '''\n    Write a function to reverse a list\n    '''\n    return list1[::-1]\n    \ndef bubble_sort(list1):\n    '''\n    Write a function to sort a list using bubble sort\n    '''\n    list1 = list1[::-1]\n    length = len(list1)\n    for i in range(length):\n        for j in range(0,length-i-1):\n            if list1[j] > list1[j+1]:\n                list1[j],list1[j+1] = list1[j+1],list1[j]\n    return list1\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates in a list\n    '''\n    list1 = set(list1)\n    return list(list1)\n    \ndef palindrome(string1):\n    '''\n    Write a function to check if a string is a palindrome or not\n    '''\n    list1 = string1.split()\n    list1 = \"\".join(list1)\n    if list1 == list1[::-1]:\n        return True\n    else:\n        return False\n    \ndef compare_string(string1,string2):\n    '''\n    Write a function to compare two strings\n    '''\n    list1 = list(string1)\n    list2 = list(string2)\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            continue\n        else:\n            return False\n    return True\n    \ndef replace_all(string1,string2,string3):\n    '''\n    Write a function to replace all occurrences of string1 with string2 in string1\n    '''\n    return string1.replace(string1,string2)\n    \ndef repeat_string(string1,string2):\n    '''\n    Write a function to repeat a string for a given number of times\n    '''\n    return string1 * string2\n    \ndef rotate_letter(string1,string2):\n    '''\n    Write a function to replace all occurrences of string1 with string2 in string1\n    '''\n    list1 = list(string1)\n    for i in range(len(list1)):\n        if list1[i] == string2:\n            list1[i] = string2\n    return \"\".join(list1)\n    \ndef swap_letter(string1,string2):\n    '''\n    Write a function to swap the case of the characters in a string\n    '''\n    list1 = list(string1)\n    for i in range(len(list1)):\n        if list1[i].islower() is True:\n            list1[i] = list1[i].upper()\n        elif list1[i].isupper() is True:\n            list1[i] = list1[i].lower()\n        else:\n            continue\n    return \"\".join(list1)\n    \ndef get_string(string1):\n    '''\n    Write a function to get the characters in a string\n    '''\n    return string1[::-1]\n    \ndef get_alphabets(string1):\n    '''\n    Write a function to get all alphabets in a string\n    '''\n    list1 = []\n    for i in string1:\n        if i.isalpha() is True:\n            list1.append(i)\n    return list1\n    \ndef convert_to_integer(string1):\n    '''\n    Write a function to convert a string into integer\n    '''\n    return int(string1)\n    \ndef convert_to_string(number1):\n    '''\n    Write a function to convert a number into string\n    '''\n    return str(number1)\n    \ndef is_pallindrome(string1):\n    '''\n    Write a function to check if a string is a palindrome or not\n    '''\n    list1 = list(string1)\n    for i in range(len(list1)):\n        if list1[i]!= list1[len(list1)-i-1]:\n            return False\n    return True\n    \ndef is_isogram(string1):\n    '''\n    Write a function to check if a string is a isogram or not\n    '''\n    list1 = list(string1)\n    for i in range(len(list1)):\n        count = 0\n        for j in range(len(list1)):\n            if list1[i] == list1[j]:\n                count += 1\n        if count > 1:\n            return False\n    return True\n    \ndef is_pangram(string1):\n    '''\n    Write a function to check if a string is a pangram or not\n    '''\n    list1 = list(string1)\n    for i in range(len(list1)):\n        if list1[i] in string.punctuation:\n            list1[i] = \"\"\n    string1 = \"\".join(list1)\n    list1 = string1.split()\n    for i in range(len(list1)):\n        if list1[i] not in string.ascii_lowercase:\n            return False\n    return True\n    \ndef non_repeating_character(string1):\n    '''\n    Write a function to get the non repeating character in a string\n    '''\n    list1 = []\n    for i in string1:\n        list1.append(i)\n    set1 = set(list1)\n    return set1\n    \ndef find_nth_term(list1,n):\n    '''\n    Write a function to find the nth term of a polynomial\n    '''\n    return (n)*(n+1)/2\n    \ndef is_super_hundred(number1):\n    '''\n    Write a function to check if the number is a super hundre or not\n    '''\n    number1 = float(number1)\n    if number1 > 100:\n        return True\n    else:\n        return False\n    \ndef is_same_frequency(string1,string2):\n    '''\n    Write a function to check if the characters are same frequency\n    '''\n    list1 = list(string1)\n    list2 = list(string2)\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1.count(list1[i])!= list2.count(list2[i]):\n            return False\n    return True\n    \ndef find_first_non_repeating_letter(string1):\n    '''\n    Write a function to find the first non repeating letter in a string\n    '''\n    list1 = list(string1)\n    for i in range(len(list1)):\n        if list1.count(list1[i]) == 1:\n            return list1[i]\n    return \"\"\n    \ndef find_triple_digit(number1):\n    '''\n    Write a function to find the sum of the digits of a three digit number\n    '''\n    return (number1/100) + ((number1%100)/10) + (number1%10)\n    \ndef find_perfect_number(number1):\n    '''\n    Write a function to chec"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = list1[:]\n    for i in range(1, len(list1), 2):\n        list2[i] = list1[i] - list1[i-1]\n    return list2\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l = len(str1)\n    count = 0\n    i = 0\n    j = 0\n    while i < l:\n        if str1[i]!= str2[i]:\n            count += 1\n            index = i\n            while str1[index]!= str2[index] :\n                temp = str1[index]\n                str1[index] = str1[index + 1]\n                str1[index + 1] = temp\n                index += 1\n                count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # the string you'll use to convert a base 10 number to base 2\n    binary_table = \"01\"\n    \n    # the string you'll use to convert a base 10 number to base 16\n    hexadecimal_table = \"0123456789ABCDEF\"\n    \n    # convert the string into a list of integers\n    str1_int_list = []\n    \n    for i in str1 :\n        str1_int_list.append(ord(i))\n    \n    # convert the string into a list of integers\n    str2_int_list = []\n    \n    for i in str2 :\n        str2_int_list.append(ord(i))\n    \n    # base 10\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n    \n    # two pointers to traverse each string\n    str1_index = 0\n    str2_index = 0\n    \n    # counter for swaps\n    count = 0\n    \n    while str1_index < len_str1 and str2_index < len_str2 :\n        \n        # check if we have a match\n        if str1_int_list[str1_index]!= str2_int_list[str2_index] :\n            \n            # if not, swap the elements and increment the count\n            str1_int_list[str1_index],str2_int_list[str2_index] = str2_int_list[str2_index],str1_int_list[str1_index]\n            count += 1\n            \n        str1_index += 1\n        str2_index += 1\n    \n    return count\n    \ndef min_Swaps_recursive(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # the string you'll use to convert a base 10 number to base 2\n    binary_table = \"01\"\n    \n    # the string you'll use to convert a base 10 number to base 16\n    hexadecimal_table = \"0123456789ABCDEF\"\n    \n    # convert the string into a list of integers\n    str1_int_list = []\n    \n    for i in str1 :\n        str1_int_list.append(ord(i))\n    \n    # convert the string into a list of integers\n    str2_int_list = []\n    \n    for i in str2 :\n        str2_int_list.append(ord(i))\n    \n    # base 10\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n    \n    # two pointers to traverse each string\n    str1_index = 0\n    str2_index = 0\n    \n    # counter for swaps\n    count = 0\n    \n    # recursive call\n    def helper(str1_index,str2_index,count) :\n        \n        # check if we have a match\n        if str1_index >= len_str1 or str2_index >= len_str2 :\n            \n            return count\n        \n        # check if we have a match\n        if str1_int_list[str1_index]!= str2_int_list[str2_index] :\n            \n            # if not, swap the elements and increment the count\n            str1_int_list[str1_index],str2_int_list[str2_index] = str2_int_list[str2_index],str1_int_list[str1_index]\n            count += 1\n            \n        str1_index += 1\n        str2_index += 1\n        \n        return helper(str1_index,str2_index,count)\n    \n    # calling the helper\n    count = helper(str1_index,str2_index,count)\n    \n    return count\n    \ndef min_Swaps_recursive_optimized(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # the string you'll use to convert a base 10 number to base 2\n    binary_table = \"01\"\n    \n    # the string you'll use to convert a base 10 number to base 16\n    hexadecimal_table = \"0123456789ABCDEF\"\n    \n    # convert the string into a list of integers\n    str1_int_list = []\n    \n    for i in str1 :\n        str1_int_list.append(ord(i))\n    \n    # convert the string into a list of integers\n    str2_int_list = []\n    \n    for i in str2 :\n        str2_int_list.append(ord(i))\n    \n    # base 10\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n    \n    # two pointers to traverse each string\n    str1_index = 0\n    str2_index = 0\n    \n    # counter for swaps\n    count = 0\n    \n    # recursive call\n    def helper(str1_index,str2_index,count) :\n        \n        # check if we have a match\n        if str1_index >= len_str1 or str2_index >= len_str2 :\n            \n            return count\n        \n        # check if we have a match\n        if str1_int_list[str1_index]!= str2_int_list[str2_index] :\n            \n            # if not, swap the elements and increment the count\n            str1_int_list[str1_index],str2_int_list[str2_index] = str2_int_list[str2_index],str1_int_list[str1_index]\n            count += 1\n            \n        str1_index += 1\n        str2_index += 1\n        \n        return helper(str1_index,str2_index,count)\n    \n    # calling the helper\n    count = helper(str1_index,str2_index,count)\n    \n    return count\n    \ndef min_Swaps_iterative(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # the string you'll use to convert a base 10 number to base 2\n    binary_table = \"01\"\n    \n    # the string you'll use to convert a base 10 number to base 16\n    hexadecimal_table = \"0123456789ABCDEF\"\n    \n    # convert the string into a list of integers\n    str1_int_list = []\n    \n    for i in str1 :\n        str1_int_list.append(ord(i))\n    \n    # convert the string into a list of integers\n    str2_int_list = []\n    \n    for i in str2 :\n        str2_int_list.append(ord(i))\n    \n    # base 10\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n    \n    # two pointers to traverse each string\n    str1_index = 0\n    str2_index = 0\n    \n    # counter for swaps\n    count = 0\n    \n    # iterative\n    while str1_index < len_str1 and str2_index < len_str2 :\n        \n        # check if we have a match\n        if str1_int_list[str1_index]!= str2_int_list[str2_index] :\n            \n            # if not, swap the elements and increment the count\n            str1_int_list[str1_index],str2_int_list[str2_index] = str2_int_list[str2_index],str1_int_list[str1_index]\n            count += 1\n            \n        str1_index += 1\n        str2_index += 1\n    \n    return count\n    \ndef min_Swaps_iterative_optimized(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # the string you'll use to convert a base 10 number to base 2\n    binary_table = \"01\"\n    \n    # the string you'll use to convert a base 10 number to bas"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) :\n        return \"Error: Two numbers should be of same length\"\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            str2 = str2[:i]+str(1-int(str2[i]))+str2[i+1:]\n            count +=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    j = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[j] :\n            j = j + 1\n            #print(j)\n            if j >= len(str2) :\n                return -1\n    return j\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            count += 1\n    return count \n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    '''\n    The idea is to create an array with binary numbers as index and length of each binary number as value.\n    Now traverse the string1 and compare each letter of string1 with the corresponding element in array \n    '''\n    string1 = str1\n    string2 = str2\n    len1 = len(string1)\n    len2 = len(string2)\n    binary_array = []\n    for i in range(len1) :\n        a = string1[i]\n        b = string2[i]\n        if a == b :\n            binary_array.append(a)\n        else :\n            binary_array.append(b)\n    print binary_array\n    for i in range(1,len1) :\n        if binary_array[i] == '0' and binary_array[i-1] == '1' :\n            #print i\n            return (i-1)\n    if binary_array[0] == '0' :\n        return len1\n    return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # use str1.count(str2) for str1.count(str2) in str2\n    count=0\n    for i in str2:\n        if i not in str1:\n            count+=1\n    return count\n    \ndef check_permutation(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    for i in str1:\n        if i not in str2:\n            return False\n    return True\n    \ndef is_substring(s1,s2):\n    if s1.find(s2)!=-1:\n        return True\n    return False\n    \ndef is_interleaving(str1,str2,str3,m,n,p):\n    if m==0 and n==0:\n        return True\n    if m==0 or n==0:\n        return False\n    if str1[m-1]==str3[p+n-1]:\n        return is_interleaving(str1,str2,str3,m-1,n,p+1)\n    if str2[n-1]==str3[p+n-1]:\n        return is_interleaving(str1,str2,str3,m,n-1,p+1)\n    return False\n    \ndef is_subsequence(str1,str2,m,n):\n    if m==0 and n==0:\n        return True\n    if m==0:\n        return False\n    if n==0:\n        return True\n    if str1[m-1]==str2[n-1]:\n        return is_subsequence(str1,str2,m-1,n-1)\n    return is_subsequence(str1,str2,m-1,n)\n    \ndef is_palindrome(s):\n    if len(s)==0:\n        return True\n    if len(s)==1:\n        return True\n    return s[0]==s[-1] and is_palindrome(s[1:-1])\n    \ndef is_rotation(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    temp=str1+str1\n    if temp.find(str2)!=-1:\n        return True\n    return False\n    \ndef is_permutation(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    dict1={}\n    dict2={}\n    for i in str1:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]+=1\n    for i in str2:\n        if i not in dict2:\n            dict2[i]=1\n        else:\n            dict2[i]+=1\n    if dict1==dict2:\n        return True\n    return False\n    \ndef is_anagram(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    if sorted(str1)==sorted(str2):\n        return True\n    return False\n    \ndef is_contains(str1,str2):\n    if str2 in str1:\n        return True\n    return False\n    \ndef is_unique(str1):\n    if len(str1)!=len(set(str1)):\n        return False\n    return True\n    \ndef is_anagram_of_palindrome(str1):\n    if len(str1)==0:\n        return True\n    dict1={}\n    for i in str1:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]+=1\n    odd_count=0\n    for i in dict1:\n        if dict1[i]%2==1:\n            odd_count+=1\n    if odd_count>1:\n        return False\n    return True\n    \ndef is_interleaved_permutation(str1,str2,str3,n):\n    if len(str1)!=len(str2) or len(str2)!=len(str3):\n        return False\n    dict1={}\n    dict2={}\n    dict3={}\n    for i in str1:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]+=1\n    for i in str2:\n        if i not in dict2:\n            dict2[i]=1\n        else:\n            dict2[i]+=1\n    for i in str3:\n        if i not in dict3:\n            dict3[i]=1\n        else:\n            dict3[i]+=1\n    if dict1==dict2 and dict3==dict2:\n        return True\n    return False\n    \ndef is_rotated_subsequence(str1,str2,n):\n    if len(str1)!=len(str2):\n        return False\n    for i in range(len(str1)-n+1):\n        if str1[i:i+n]==str2:\n            return True\n    return False\n    \ndef is_rotated_permutation(str1,str2,n):\n    if len(str1)!=len(str2):\n        return False\n    if n==0:\n        return True\n    if n==1:\n        return str1[1:]==str2\n    if n==2:\n        return str1[2:]==str2\n    if str1[0]==str2[n-1] and str1[1]==str2[n-2] and str1[2]==str2[n-3]:\n        return is_rotated_permutation(str1[1:],str2,n-1)\n    return False\n    \ndef is_substring_permutation(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    dict1={}\n    dict2={}\n    for i in str1:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]+=1\n    for i in str2:\n        if i not in dict2:\n            dict2[i]=1\n        else:\n            dict2[i]+=1\n    if dict1==dict2:\n        return True\n    return False\n    \ndef is_permutation_without_duplicates(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    dict1={}\n    dict2={}\n    for i in str1:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]+=1\n    for i in str2:\n        if i not in dict2:\n            dict2[i]=1\n        else:\n            dict2[i]+=1\n    if dict1==dict2:\n        return True\n    return False\n    \ndef is_substring_with_concatenation_of_original(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    if str1==str2:\n        return True\n    for i in range(len(str1)-len(str2)+1):\n        if str1[i:i+len(str2)]==str2:\n            return True\n    return False\n    \ndef is_substring_with_concatenation_of_original_2(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    dict1={}\n    dict2={}\n    for i in str1:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]+=1\n    for i in str2:\n        if i not in dict2:\n            dict2[i]=1\n        else:\n            dict2[i]+=1\n    if dict1==dict2:\n        return True\n    return False\n    \ndef is_substring_with_concatenation_of_original_3(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    dict1={}\n    for i in str1:\n        if i not in dict1:\n            dict1[i]="
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    i,j = 0,0\n    while i < n and j < m:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            else:\n                j += 1\n        i += 1\n        j += 1\n    return abs(j-i)\ndef min_Swaps_2(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    i,j = 0,0\n    while i < n and j < m:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            else:\n                j += 1\n        i += 1\n        j += 1\n    return abs(j-i)\ndef min_Swaps_3(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    i,j = 0,0\n    while i < n and j < m:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            else:\n                j += 1\n        i += 1\n        j += 1\n    return abs(j-i)\ndef min_Swaps_4(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    i,j = 0,0\n    while i < n and j < m:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            else:\n                j += 1\n        i += 1\n        j += 1\n    return abs(j-i)\ndef min_Swaps_5(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    i,j = 0,0\n    while i < n and j < m:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            else:\n                j += 1\n        i += 1\n        j += 1\n    return abs(j-i)\ndef min_Swaps_6(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    i,j = 0,0\n    while i < n and j < m:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            else:\n                j += 1\n        i += 1\n        j += 1\n    return abs(j-i)\ndef min_Swaps_7(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    i,j = 0,0\n    while i < n and j < m:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            else:\n                j += 1\n        i += 1\n        j += 1\n    return abs(j-i)\ndef min_Swaps_8(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    i,j = 0,0\n    while i < n and j < m:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            else:\n                j += 1\n        i += 1\n        j += 1\n    return abs(j-i)\ndef min_Swaps_9(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    i,j = 0,0\n    while i < n and j < m:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            else:\n                j += 1\n        i += 1\n        j += 1\n    return abs(j-i)\ndef min_Swaps_10(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    i,j = 0,0\n    while i < n and j < m:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            else:\n                j += 1\n        i += 1\n        j += 1\n    return abs(j-i)\ndef min_Swaps_11(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    i,j = 0,0\n    while i < n and j < m:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            else:\n                j += 1\n        i += 1\n        j += 1\n    return abs(j-i)\ndef min_Swaps_12(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    i,j = 0,0\n    while i < n and j < m:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            else:\n                j += 1\n        i += 1\n        j += 1\n    return abs(j-i)\ndef min_Swaps_13(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return -1\n    i,j = 0,0\n    while i < n and j < m:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            else:\n                j += 1\n        i += 1\n        j += 1\n    return abs"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1==str2 :\n        return 0\n    count=0\n    for i in range(len(str1)) :\n        if str1[i]!=str2[i] :\n            if str1[i]=='0' :\n                str2=str2[0:i]+'1'+str2[i+1:]\n                count+=1\n            else :\n                str2=str2[0:i]+'0'+str2[i+1:]\n                count+=1\n    return count\ndef min_Swaps1(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1==str2 :\n        return 0\n    if len(str1)!=len(str2) :\n        return -1\n    swap_count=0\n    for i in range(len(str1)) :\n        if str1[i]!=str2[i] :\n            str2=str2[0:i]+str2[i+1:]\n            swap_count+=1\n    return swap_count\ndef permute(str1,pos) :\n    '''\n    Write a python function to generate all permutations of a string.\n    '''\n    if pos==len(str1)-1 :\n        print str1\n    else :\n        for i in range(pos,len(str1)) :\n            str1[pos],str1[i]=str1[i],str1[pos]\n            permute(str1,pos+1)\n            str1[pos],str1[i]=str1[i],str1[pos]\ndef permute_iter(str1,pos) :\n    '''\n    Write a python function to generate all permutations of a string.\n    '''\n    if pos==len(str1)-1 :\n        print str1\n    else :\n        for i in range(pos,len(str1)) :\n            str1[pos],str1[i]=str1[i],str1[pos]\n            permute_iter(str1,pos+1)\n            str1[pos],str1[i]=str1[i],str1[pos]\ndef to_decimal(num,base) :\n    '''\n    Write a python function to convert a number to base 10\n    '''\n    if num==0 :\n        return 0\n    else :\n        return (num%base)+to_decimal(num//base,base)\ndef to_binary(num) :\n    '''\n    Write a python function to convert a number to base 2\n    '''\n    if num==0 :\n        return ''\n    else :\n        return to_binary(num//2)+str(num%2)\ndef to_octal(num) :\n    '''\n    Write a python function to convert a number to base 8\n    '''\n    if num==0 :\n        return ''\n    else :\n        return to_octal(num//8)+str(num%8)\ndef to_hex(num) :\n    '''\n    Write a python function to convert a number to base 16\n    '''\n    if num==0 :\n        return ''\n    else :\n        if num<16 :\n            return to_hex(num//16)+str(num%16)\n        else :\n            if num<256 :\n                return to_hex(num//16)+chr(num%16+ord('a'))\n            else :\n                return to_hex(num//16)+chr(num%16+ord('a')+10)\ndef factorial(num) :\n    '''\n    Write a python function to calculate factorial of a number\n    '''\n    if num==0 :\n        return 1\n    else :\n        return num*factorial(num-1)\ndef lcm(a,b) :\n    '''\n    Write a python function to calculate lcm of two numbers\n    '''\n    return (a*b)//gcd(a,b)\ndef gcd(a,b) :\n    '''\n    Write a python function to calculate gcd of two numbers\n    '''\n    if a==0 :\n        return b\n    else :\n        return gcd(b%a,a)\ndef is_factor(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    for factor in factors :\n        if num%factor==0 :\n            return True\n    return False\ndef is_factor1(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    if num==0 :\n        return False\n    for factor in factors :\n        if num%factor==0 :\n            return True\n    return False\ndef is_factor2(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return num%factors==0\ndef is_factor3(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return len([factor for factor in factors if num%factor==0])>0\ndef is_factor4(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return len([factor for factor in factors if num%factor==0])>0\ndef is_factor5(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return len([factor for factor in factors if num%factor==0])>0\ndef is_factor6(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return len([factor for factor in factors if num%factor==0])>0\ndef is_factor7(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return len([factor for factor in factors if num%factor==0])>0\ndef is_factor8(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return len([factor for factor in factors if num%factor==0])>0\ndef is_factor9(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return len([factor for factor in factors if num%factor==0])>0\ndef is_factor10(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return len([factor for factor in factors if num%factor==0])>0\ndef is_factor11(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return len([factor for factor in factors if num%factor==0])>0\ndef is_factor12(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return len([factor for factor in factors if num%factor==0])>0\ndef is_factor13(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return len([factor for factor in factors if num%factor==0])>0\ndef is_factor14(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return len([factor for factor in factors if num%factor==0])>0\ndef is_factor15(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return len([factor for factor in factors if num%factor==0])>0\ndef is_factor16(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    return len([factor for factor in factors if num%factor==0])>0\ndef is_factor17(num,factors) :\n    '''\n    Write a python function to check if num is a factor of factors\n    '''\n    retur"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if (str1=='0' or str2=='0') :\n        return 0\n    c1 = 0\n    c2 = 0\n    if (len(str1)!= len(str2)) :\n        return -1\n    for i in range(len(str1)) :\n        if (str1[i]!=str2[i]) :\n            c1 = c1 + 1\n    for i in range(len(str1)) :\n        if (str1[i]==str2[i]) :\n            c2 = c2 + 1\n    return min(c1,c2)\n    \ndef generate_random_string(n) :\n    '''\n    Write a python function to generate a string of random numbers (between a range) of size n.\n    '''\n    import random\n    s = \"\"\n    for i in range(n) :\n        s = s + str(random.randint(0,9))\n    return s\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef find_min_max(tuple_list):\n    '''\n    Write a function to find the maximum and minimum values of the given tuple.\n    '''\n    max_list = []\n    min_list = []\n    for i in range(len(tuple_list)):\n        max_list.append(max(tuple_list[i]))\n        min_list.append(min(tuple_list[i]))\n    print(max_list)\n    print(min_list)\ndef find_odd_even(tuple_list):\n    '''\n    Write a function to find out whether a tuple is odd or even. \n    Note: a tuple is even when sum of all its elements is a multiple of 2.\n    '''\n    odd_count = 0\n    even_count = 0\n    for i in range(len(tuple_list)):\n        if sum(tuple_list[i])%2 == 0:\n            even_count+=1\n        else:\n            odd_count+=1\n    if odd_count > even_count:\n        print('Tuple is odd')\n    else:\n        print('Tuple is even')\ndef word_count(string):\n    '''\n    Write a function to count the occurence of each word in a string. \n    '''\n    list_string = string.split()\n    dictionary = {}\n    for word in list_string:\n        if word in dictionary.keys():\n            dictionary[word]+=1\n        else:\n            dictionary[word]=1\n    print(dictionary)\ndef is_anagram(string1,string2):\n    '''\n    Write a function to check whether two strings are anagram or not.\n    '''\n    dictionary = {}\n    for word in string1:\n        if word in dictionary.keys():\n            dictionary[word]+=1\n        else:\n            dictionary[word]=1\n    print(dictionary)\n    for word in string2:\n        if word in dictionary.keys():\n            dictionary[word]-=1\n        else:\n            return False\n    if all(value == 0 for value in dictionary.values()):\n        return True\n    else:\n        return False\ndef list_func(list_to_use):\n    '''\n    Write a function to find the max, min, average and sum of a list.\n    '''\n    max_list = []\n    min_list = []\n    sum_list = []\n    for i in range(len(list_to_use)):\n        max_list.append(max(list_to_use[i]))\n        min_list.append(min(list_to_use[i]))\n        sum_list.append(sum(list_to_use[i]))\n    print(max_list)\n    print(min_list)\n    print(sum_list)\n    print(sum(sum_list)/len(list_to_use))\ndef fibonacci(num):\n    '''\n    Write a function to find the nth value of the Fibonacci series.\n    '''\n    first = 0\n    second = 1\n    print(first)\n    print(second)\n    for i in range(num-1):\n        first,second = second,first+second\n        print(second)\ndef palindrome(string):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    print(string)\n    if string == string[::-1]:\n        return True\n    return False\ndef comp(list1,list2):\n    '''\n    Write a function to compare two lists.\n    '''\n    if list1 == list2:\n        return True\n    return False\ndef power(num1,num2):\n    '''\n    Write a function to find the power of a number.\n    '''\n    return num1**num2\ndef fibonacci_num(num):\n    '''\n    Write a function to find the nth number of the fibonacci series.\n    '''\n    fib_list = []\n    first = 0\n    second = 1\n    fib_list.append(first)\n    fib_list.append(second)\n    for i in range(num-2):\n        first,second = second,first+second\n        fib_list.append(second)\n    return fib_list[-1]\ndef anagram(string1,string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    dictionary = {}\n    for word in string1:\n        if word in dictionary.keys():\n            dictionary[word]+=1\n        else:\n            dictionary[word]=1\n    print(dictionary)\n    for word in string2:\n        if word in dictionary.keys():\n            dictionary[word]-=1\n        else:\n            return False\n    if all(value == 0 for value in dictionary.values()):\n        return True\n    else:\n        return False\ndef anagram2(string1,string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for word in string1:\n        if word in dict1.keys():\n            dict1[word]+=1\n        else:\n            dict1[word]=1\n    for word in string2:\n        if word in dict2.keys():\n            dict2[word]+=1\n        else:\n            dict2[word]=1\n    if dict1 == dict2:\n        return True\n    return False\ndef anagram_count(string1,string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for word in string1:\n        if word in dict1.keys():\n            dict1[word]+=1\n        else:\n            dict1[word]=1\n    for word in string2:\n        if word in dict2.keys():\n            dict2[word]+=1\n        else:\n            dict2[word]=1\n    if dict1 == dict2:\n        return True\n    return False\ndef prime(num):\n    '''\n    Write a function to find whether a number is prime or not.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if num%i == 0:\n                return False\n        return True\n    else:\n        return False\ndef count_to_10(num):\n    '''\n    Write a function to find the count to nth term in the Fibonacci series.\n    '''\n    count = 1\n    first = 0\n    second = 1\n    while count <= num:\n        first,second = second,first+second\n        count+=1\n    return second\ndef prime_num(num):\n    '''\n    Write a function to find whether a number is prime or not.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if num%i == 0:\n                return False\n        return True\n    else:\n        return False\ndef find_dup(list1):\n    '''\n    Write a function to find the duplicate number in the given list.\n    '''\n    dictionary = {}\n    for i in range(len(list1)):\n        if list1[i] in dictionary.keys():\n            dictionary[list1[i]]+=1\n        else:\n            dictionary[list1[i]]=1\n    print(dictionary)\n    for key in dictionary.keys():\n        if dictionary[key] > 1:\n            return key\n    return False\ndef anagram_3(string1,string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for word in string1:\n        if word in dict1.keys():\n            dict1[word]+=1\n        else:\n            dict1[word]=1\n    for word in string2:\n        if word in dict2.keys():\n            dict2[word]+=1\n        else:\n            dict2[word]=1\n    if dict1 == dict2:\n        return True\n    return False\ndef anagram_3_2(string1,string2):\n    '''\n    Writ"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    print size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_bytes = 0\n    for element in tuple_list:\n        total_bytes += sys.getsizeof(element)\n    return total_bytes\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    num = 0\n    for x in tuple_list:\n        num = num + sys.getsizeof(x)\n    return num\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total = 0\n    for i in range(len(tuple_list)):\n        total += sys.getsizeof(tuple_list[i])\n    return total\n    \ntuple_list = [(1,2,3,4),(4,5,6),(7,8,9)]\nprint(tuple_size(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n    \n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if i + j < k:\n                i += 1\n                j += 1\n            elif i + j > k:\n                i += 1\n            else:\n                return arr1[i]\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k < 0 or k > len(arr1) + len(arr2):\n        return None\n    \n    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    res = None\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if res is None or arr1[i] >= res:\n                res = arr1[i]\n                i += 1\n                if k == i:\n                    return res\n        elif arr1[i] > arr2[j]:\n            if res is None or arr2[j] >= res:\n                res = arr2[j]\n                j += 1\n                if k == j:\n                    return res\n        else:\n            i += 1\n            j += 1\n    return res\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n        if j == k:\n            return arr1[i - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1:\n        return arr2[k - 1]\n    if not arr2:\n        return arr1[k - 1]\n    if k <= len(arr1) and k <= len(arr2):\n        if arr1[len(arr1) / 2] == arr2[len(arr2) / 2]:\n            return arr1[len(arr1) / 2]\n        elif arr1[len(arr1) / 2] < arr2[len(arr2) / 2]:\n            return find_kth(arr1[len(arr1) / 2:], arr2, k - len(arr1) / 2)\n        else:\n            return find_kth(arr1, arr2[len(arr2) / 2:], k - len(arr2) / 2)\n    else:\n        if k > len(arr1):\n            return find_kth(arr1, arr2, k)\n        else:\n            return find_kth(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return kth(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx1 = 0\n    idx2 = 0\n    while k > 0:\n        if idx1 == len(arr1):\n            return arr2[idx2 + k - 1]\n        if idx2 == len(arr2):\n            return arr1[idx1 + k - 1]\n        if arr1[idx1] <= arr2[idx2]:\n            k -= 1\n            idx1 += 1\n        else:\n            k -= 1\n            idx2 += 1\n    return arr1[idx1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    \n    if k > len(arr1) + len(arr2):\n        return None\n    \n    if arr1[len(arr1)//2] == arr2[len(arr2)//2]:\n        if len(arr1) == 1:\n            return arr1[0]\n        if len(arr2) == 1:\n            return arr2[0]\n        if arr1[len(arr1)//2 - 1] == arr2[len(arr2)//2 - 1]:\n            return arr1[len(arr1)//2 - 1]\n        else:\n            if arr1[len(arr1)//2] > arr2[len(arr2)//2]:\n                return find_kth(arr1[len(arr1)//2:], arr2, k - len(arr1)//2 - 1)\n            else:\n                return find_kth(arr1, arr2[len(arr2)//2:], k - len(arr2)//2 - 1)\n    else:\n        if arr1[len(arr1)//2] > arr2[len(arr2)//2]:\n            return find_kth(arr1[len(arr1)//2:], arr2, k - len(arr1)//2 - 1)\n        else:\n            return find_kth(arr1, arr2[len(arr2)//2:], k - len(arr2)//2 - 1)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n        if i + j < k:\n            if j == len(arr2):\n                return arr1[i]\n            elif i == len(arr1):\n                return arr2[j]\n            else:\n                if arr1[i] < arr2[j]:\n                    i += 1\n                else:\n                    j += 1\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_size, arr2_size = len(arr1), len(arr2)\n    \n    if k > arr2_size:\n        return find_kth(arr2, arr1, k - arr2_size - 1)\n    \n    if k > arr1_size:\n        return -1\n    \n    if k == 0:\n        return arr1[0]\n    \n    if arr1[arr1_size/2] < arr2[arr2_size/2]:\n        if k > arr1_size/2:\n            return find_kth(arr2, arr1, k - arr1_size - 1)\n        else:\n            return find_kth(arr1, arr2, k)\n    else:\n        if k > arr2_size/2:\n            return find_kth(arr1, arr2, k - arr2_size - 1)\n        else:\n            return find_kth(arr2, arr1, k)\n    \ndef get_kth_element(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_size, arr2_size = len(arr1), len(arr2)\n    \n    if k > arr2_size:\n        return get_kth_element(arr2, arr1, k - arr2_size - 1)\n    \n    if k > arr1_size:\n        return -1\n    \n    if k == 0:\n        return arr1[0]\n    \n    if arr1[arr1_size/2] < arr2[arr2_size/2]:\n        if k > arr1_size/2:\n            return get_kth_element(arr2, arr1, k - arr1_size - 1)\n        else:\n            return get_kth_element(arr1, arr2, k)\n    else:\n        if k > arr2_size/2:\n            return get_kth_element(arr1, arr2, k - arr2_size - 1)\n        else:\n            return get_kth_element(arr2, arr1, k)\n    \ndef find_kth_element_recursive(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_size, arr2_size = len(arr1), len(arr2)\n    \n    if k > arr2_size:\n        return find_kth_element_recursive(arr2, arr1, k - arr2_size - 1)\n    \n    if k > arr1_size:\n        return -1\n    \n    if k == 0:\n        return arr1[0]\n    \n    if arr1[arr1_size/2] < arr2[arr2_size/2]:\n        if k > arr1_size/2:\n            return find_kth_element_recursive(arr2, arr1, k - arr1_size - 1)\n        else:\n            return find_kth_element_recursive(arr1, arr2, k)\n    else:\n        if k > arr2_size/2:\n            return find_kth_element_recursive(arr1, arr2, k - arr2_size - 1)\n        else:\n            return find_kth_element_recursive(arr2, arr1, k)\n    \ndef find_kth_element_iterative(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_size, arr2_size = len(arr1), len(arr2)\n    \n    if k > arr2_size:\n        return find_kth_element_iterative(arr2, arr1, k - arr2_size - 1)\n    \n    if k > arr1_size:\n        return -1\n    \n    if k == 0:\n        return arr1[0]\n    \n    if arr1[arr1_size/2] < arr2[arr2_size/2]:\n        if k > arr1_size/2:\n            return find_kth_element_iterative(arr2, arr1, k - arr1_size - 1)\n        else:\n            return find_kth_element_iterative(arr1, arr2, k)\n    else:\n        if k > arr2_size/2:\n            return find_kth_element_iterative(arr1, arr2, k - arr2_size - 1)\n        else:\n            return find_kth_element_iterative(arr2, arr1, k)\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #raise NotImplementedError(\"Create a function that checks whether the given number is armstrong or not.\")\n    return sum([int(i)**len(str(number)) for i in str(number)]) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = abs(int(number))\n    check = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        check += digit ** 3\n        temp //= 10\n    if check == number:\n        return True\n    else:\n        return False\n    \ndef pallindrome(number):\n    '''\n    Write a function to check whether the given number is palindrome or not.\n    '''\n    number = abs(int(number))\n    temp = number\n    reverse_number = 0\n    while temp > 0:\n        digit = temp % 10\n        reverse_number = reverse_number * 10 + digit\n        temp //= 10\n    if reverse_number == number:\n        return True\n    else:\n        return False\n    \ndef min_of_product_in_list(list_of_numbers):\n    '''\n    Write a function to return the smallest product of two integers from a given list of integers.\n    '''\n    list_of_numbers = list_of_numbers[:]\n    product = 0\n    for x in range(len(list_of_numbers)):\n        for y in range(x + 1, len(list_of_numbers)):\n            product = list_of_numbers[x] * list_of_numbers[y]\n            if product < product:\n                product = product\n            else:\n                product = product\n    return product\n    \ndef hamming_distance(number1, number2):\n    '''\n    Write a function to compute the hamming distance between two integers.\n    '''\n    number1 = abs(int(number1))\n    number2 = abs(int(number2))\n    temp = number1\n    distance = 0\n    while temp > 0:\n        digit = temp % 10\n        if digit!= number2 % 10:\n            distance += 1\n        temp //= 10\n    return distance\n    \ndef catalan(number):\n    '''\n    Write a function to compute the catalan number at the given position.\n    '''\n    number = abs(int(number))\n    catalan_number = 1\n    for x in range(2, number + 1):\n        catalan_number *= (2 * x - 1) // (x + 1)\n    return catalan_number\n    \ndef permutations_of_list(list_of_elements, number_of_permutations):\n    '''\n    Write a function to return the number of permutations of a given list of elements.\n    '''\n    list_of_elements = list_of_elements[:]\n    permutation_list = []\n    while len(list_of_elements) > 0:\n        element = list_of_elements.pop()\n        temp = [element]\n        for x in range(len(list_of_elements)):\n            temp.append(list_of_elements[x])\n        permutation_list.append(temp)\n    return permutation_list\n    \ndef delete_value_from_list(list_of_values, number):\n    '''\n    Write a function to delete a given value from a list.\n    '''\n    list_of_values = list_of_values[:]\n    for x in range(len(list_of_values)):\n        if list_of_values[x] == number:\n            list_of_values.pop(x)\n    return list_of_values\n    \ndef dict_compression(dict_of_string):\n    '''\n    Write a function to compress a given dictionary of strings using the frequency of characters.\n    '''\n    dict_of_string = dict_of_string.copy()\n    dict_of_string = sorted(dict_of_string.items(), key=lambda x: x[1])\n    return dict_of_string\n    \ndef subset_of_list(list_of_numbers, list_of_value):\n    '''\n    Write a function to check whether a given list is subset of another list.\n    '''\n    list_of_numbers = list_of_numbers[:]\n    list_of_value = list_of_value[:]\n    if len(list_of_numbers) < len(list_of_value):\n        return False\n    else:\n        for x in range(len(list_of_value)):\n            if list_of_numbers[x] not in list_of_value:\n                return False\n    return True\n    \ndef all_permutations(list_of_elements):\n    '''\n    Write a function to compute all permutations of a given list of elements.\n    '''\n    list_of_elements = list_of_elements[:]\n    permutation_list = []\n    for x in range(len(list_of_elements)):\n        temp = [list_of_elements[x]]\n        for y in range(len(list_of_elements)):\n            if list_of_elements[y]!= temp[0]:\n                temp.append(list_of_elements[y])\n        permutation_list.append(temp)\n    return permutation_list\n    \ndef remove_duplicates(list_of_numbers):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    list_of_numbers = list_of_numbers[:]\n    index = 0\n    while index < len(list_of_numbers):\n        value = list_of_numbers[index]\n        if value not in list_of_numbers[index + 1:]:\n            list_of_numbers.pop(index)\n        else:\n            index += 1\n    return list_of_numbers\n    \ndef dict_and_list_compare(dict_of_string, list_of_values):\n    '''\n    Write a function to compare the values of a dictionary with a list.\n    '''\n    dict_of_string = dict_of_string.copy()\n    list_of_values = list_of_values[:]\n    for x in range(len(list_of_values)):\n        if dict_of_string[list_of_values[x]]!= list_of_values[x]:\n            return False\n    return True\n    \ndef get_value_from_list_with_index(list_of_values, index):\n    '''\n    Write a function to return the value at the given index from a list.\n    '''\n    list_of_values = list_of_values[:]\n    return list_of_values[index]\n    \ndef first_n_smallest(list_of_numbers, n):\n    '''\n    Write a function to return the first n smallest values in a list.\n    '''\n    list_of_numbers = list_of_numbers[:]\n    list_of_numbers = sorted(list_of_numbers)\n    return list_of_numbers[:n]\n    \ndef common_element_in_list(list_of_numbers):\n    '''\n    Write a function to find the common element between two lists.\n    '''\n    list_of_numbers = list_of_numbers[:]\n    common_number = 0\n    for x in range(len(list_of_numbers)):\n        for y in range(x + 1, len(list_of_numbers)):\n            if list_of_numbers[x] == list_of_numbers[y]:\n                common_number += 1\n    return common_number\n    \ndef fibonacci_number(number):\n    '''\n    Write a function to return the fibonacci number at the given position.\n    '''\n    number = abs(int(number))\n    a = 0\n    b = 1\n    if number == 0:\n        return a\n    elif number == 1:\n        return b\n    else:\n        for x in range(number - 1):\n            temp = a + b\n            a = b\n            b = temp\n        return b\n    \ndef power_of_number(number, power):\n    '''\n    Write a function to compute the power of a number.\n    '''\n    number = abs(int(number))\n    power = abs(int(power))\n    result = 1\n    for x in range(power):\n        result *= number\n    return result\n    \ndef gcd_of_two_numbers(number1, number2):\n    '''\n    Write a function to comput"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # number = str(number)\n    length = len(str(number))\n    temp = number\n    sum = 0\n    while temp:\n        digit = temp%10\n        sum += pow(digit,length)\n        temp //= 10\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum_of_digits = 0\n    number = str(number)\n    for digit in number:\n        sum_of_digits += int(digit) ** len(number)\n    if sum_of_digits == int(number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    armstrong_number = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        armstrong_number += digit ** 3\n        temp //= 10\n    return armstrong_number == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return [int(x)**len(str(number)) for x in str(number)] == [int(i) for i in str(number)]\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    copy = number\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == copy:\n        print(\"%d is an armstrong number\" % copy)\n    else:\n        print(\"%d is not an armstrong number\" % copy)\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Hint: Use built-in function str() to convert an integer to string and use join() to convert a list to a string.\n    \n    summation = 0\n    \n    # traverse through the number and compute the summation\n    for digit in str(number):\n        summation += int(digit)**len(str(number))\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digits = []\n    while number > 0:\n        digits.append(number % 10)\n        number = number // 10\n    sum = 0\n    for num in digits:\n        sum += num ** 3\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if (sum(map(lambda x: int(x) ** len(str(number)), str(number))) == number):\n        return True\n    return False\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # sum_average = 0\n    # i = 0\n    # while i < number:\n    #     sum_average += i\n    #     i += 1\n    # print(sum_average)\n    # print(sum_average/number)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1, number + 1):\n        s += i\n    print(\"Sum is \" + str(s) + \" and average is \" + str(s / number))\n    return s / number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    print(sum/number)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n    total_sum = 0\n    total_average = 0\n    for i in range(n):\n        total_sum += i\n    total_average = total_sum / n\n    return total_sum, total_average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(number+1)) / number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # sum = 0\n    # for i in range(1, number + 1):\n    #     sum += i\n    # return sum, sum/number\n    return sum(range(1, number + 1)), sum(range(1, number + 1))/number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    average = 0\n    for i in range(1, number + 1):\n        total += i\n    average = total / number\n    return (total, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 0:\n        return \"Error\"\n    sum_value = 0\n    for x in range(1, number + 1):\n        sum_value += x\n    average = sum_value / number\n    return sum_value, average\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False \n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else :\n        return False\n    \ndef main() : \n    '''\n    Write a python function to find the gcd of 2 numbers using euclidean algorithm.\n    '''\n    \n    def gcd(a,b) :\n        '''\n        Write a python function to find the gcd of 2 numbers using euclidean algorithm.\n        '''\n        if a == 0 : \n            return b\n        elif b == 0 : \n            return a\n        elif is_Even(a) and is_Even(b) : \n            return gcd(a/2, b/2) * 2\n        elif is_Even(a) and not is_Even(b) : \n            return gcd(a/2, b)\n        elif not is_Even(a) and is_Even(b) : \n            return gcd(a, b/2) * 2\n        elif not is_Even(a) and not is_Even(b) : \n            return gcd(a, b)\n        \n    a = 12\n    b = 24\n    \n    print('The gcd of %d and %d is %d' % (a, b, gcd(a,b)))\n    \nif __name__ == '__main__' : \n    main("
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True \n    return False\n    \n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # If the number is not even, it will return False. If the number is even, it will return True.\n    # return (n%2) == 0\n    return True if (n%2) == 0 else False\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    # If the number is not odd, it will return False. If the number is odd, it will return True.\n    # return (n%2)!= 0\n    return True if (n%2)!= 0 else False\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    # It will return true if the number is prime and false if it is not.\n    if n > 1 : \n        if n == 2 : \n            return True\n        if n % 2 == 0 : \n            return False\n        for i in range(3,int(n**0.5)+1,2) : \n            if n%i == 0 : \n                return False\n        return True\n    return False\n    \ndef is_Perfect(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    # It will return true if the number is perfect and false if it is not.\n    s = 0\n    for i in range(1,n) : \n        if n%i == 0 : \n            s += i\n    return s == n\n    \ndef is_Power(n) : \n    '''\n    Write a python function to check whether the given number is power of 2 or not.\n    '''\n    # It will return true if the number is power of 2 and false if it is not.\n    return n and not(n&(n-1))\n    \ndef is_Power_of_2(n) : \n    '''\n    Write a python function to check whether the given number is power of 2 or not.\n    '''\n    # It will return true if the number is power of 2 and false if it is not.\n    return n and (n&(n-1)) == 0\n    \ndef is_Power_of_3(n) : \n    '''\n    Write a python function to check whether the given number is power of 3 or not.\n    '''\n    # It will return true if the number is power of 3 and false if it is not.\n    return n and (n&(n-1)) == 0 and (n&(n-2)) == 0\n    \ndef is_Power_of_4(n) : \n    '''\n    Write a python function to check whether the given number is power of 4 or not.\n    '''\n    # It will return true if the number is power of 4 and false if it is not.\n    return n and (n&(n-1)) == 0 and (n&(n-2)) == 0 and (n&(n-4)) == 0\n    \ndef is_Power_of_5(n) : \n    '''\n    Write a python function to check whether the given number is power of 5 or not.\n    '''\n    # It will return true if the number is power of 5 and false if it is not.\n    return n and (n&(n-1)) == 0 and (n&(n-2)) == 0 and (n&(n-4)) == 0 and (n&(n-8)) == 0\n    \ndef is_Power_of_6(n) : \n    '''\n    Write a python function to check whether the given number is power of 6 or not.\n    '''\n    # It will return true if the number is power of 6 and false if it is not.\n    return n and (n&(n-1)) == 0 and (n&(n-2)) == 0 and (n&(n-4)) == 0 and (n&(n-8)) == 0 and (n&(n-16)) == 0\n    \ndef is_Power_of_7(n) : \n    '''\n    Write a python function to check whether the given number is power of 7 or not.\n    '''\n    # It will return true if the number is power of 7 and false if it is not.\n    return n and (n&(n-1)) == 0 and (n&(n-2)) == 0 and (n&(n-4)) == 0 and (n&(n-8)) == 0 and (n&(n-16)) == 0 and (n&(n-32)) == 0\n    \ndef is_Power_of_8(n) : \n    '''\n    Write a python function to check whether the given number is power of 8 or not.\n    '''\n    # It will return true if the number is power of 8 and false if it is not.\n    return n and (n&(n-1)) == 0 and (n&(n-2)) == 0 and (n&(n-4)) == 0 and (n&(n-8)) == 0 and (n&(n-16)) == 0 and (n&(n-32)) == 0 and (n&(n-64)) == 0\n    \ndef is_Power_of_9(n) : \n    '''\n    Write a python function to check whether the given number is power of 9 or not.\n    '''\n    # It will return true if the number is power of 9 and false if it is not.\n    return n and (n&(n-1)) == 0 and (n&(n-2)) == 0 and (n&(n-4)) == 0 and (n&(n-8)) == 0 and (n&(n-16)) == 0 and (n&(n-32)) == 0 and (n&(n-64)) == 0 and (n&(n-128)) == 0\n    \ndef is_Power_of_10(n) : \n    '''\n    Write a python function to check whether the given number is power of 10 or not.\n    '''\n    # It will return true if the number is power of 10 and false if it is not.\n    return n and (n&(n-1)) == 0 and (n&(n-2)) == 0 and (n&(n-4)) == 0 and (n&(n-8)) == 0 and (n&(n-16)) == 0 and (n&(n-32)) == 0 and (n&(n-64)) == 0 and (n&(n-128)) == 0 and (n&(n-256)) == 0\n    \ndef is_Power_of_11(n) : \n    '''\n    Write a python function to check whether the given number is power of 11 or not.\n    '''\n    # It will return true if the number is power of 11 and false if it is not.\n    return n and (n&(n-1)) == 0 and (n&(n-2)) == 0 and (n&(n-4)) == 0 and (n&(n-8)) == 0 and (n&(n-16)) == 0 and (n&(n-32)) == 0 and (n&(n-64)) == 0 and (n&(n-128)) == 0 and (n&(n-256)) == 0 and (n&(n-512)) == 0\n    \ndef is_Power_of_12(n) : \n    '''\n    Write a python function to check whether the given number is power of 12 or not.\n    '''\n    # It will return true if the number is power of 12 and false if it is not.\n    return n and (n&(n-1)) == 0 and (n&(n-2)) == 0 and (n&(n-4)) == 0 and (n&(n-8)) == 0 and (n&(n-16)) == 0 and (n&(n-32)) == 0 and (n&(n-64)) == 0 and (n&(n-128)) == 0 and (n&(n-256)) == 0 and (n&(n-512)) == 0 and (n&(n-1024)) == 0\n    \ndef is_Power_of_13(n) : \n    '''\n    Write a python function to check whether the given number is power of 13 or not.\n    '''\n    # It will return true if the number is power of 13 and false if it is not.\n    return n and (n&(n-1)) == 0 and (n&(n-2)) == 0 and (n&("
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for c in str1:\n        if c in char_dict:\n            return c\n        char_dict[c] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return 'No repeated character found'\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for x in str1:\n        if str1.count(x)>1:\n            return x\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Write your solution here\n    char_map = {}\n    for char in str1:\n        if char in char_map:\n            return char\n        else:\n            char_map[char] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary with keys as character and values as the positions\n    # at which they appear in the string\n    d = {}\n    for i in range(len(str1)):\n        if str1[i] in d:\n            return str1[i]\n        d[str1[i]] = i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Convert str1 to list\n    # 1. Take a list of characters in str1\n    # 2. If the char already exists in the list, increment the count and move to next\n    # 3. Otherwise, return that char\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for char in str1:\n        dict1[char] = dict1.get(char,0) + 1\n    for key, value in dict1.items():\n        if value > 1:\n            return key\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == str1[i+1]:\n            return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    n = len(str1)\n    dup_char = set()\n    for i in range(n):\n        if str1[i] in dup_char:\n            return str1[i]\n        else:\n            dup_char.add(str1[i])\n    return None\n    \ndef first_repeated_char_01(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    n = len(str1)\n    for i in range(n):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    d = {}\n    for ch in str1:\n        if ch not in d:\n            d[ch] = 1\n        else:\n            d[ch] += 1\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ludic = [1, 2]\n    for i in range(3, n + 1):\n        ludic.append(ludic[i - 2] + ludic[i - 1])\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1, n + 1) if all(str(i).count(j) <= 2 for j in '01')]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    LUDIC = [1]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    if n == 1:\n        return [1]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    # 4^n numbers, with n in the range [0, 22], inclusive\n    # 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n    # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n    # 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n    # 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n    # 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n    # 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n    # 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n    # 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n    # 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n    # 9 10 11 12 13 14 15 16 17 18 19 20 21\n    # 10 11 12 13 14 15 16 17 18 19 20 21\n    # 11 12 13 14 15 16 17 18 19 20 21\n    # 12 13 14 15 16 17 18 19 20 21\n    # 13 14 15 16 17 18 19 20 21\n    # 14 15 16 17 18 19 20 21\n    # 15 16 17 18 19 20 21\n    # 16 17 18 19 20 21\n    # 17 18 19 20 21\n    # 18 19 20 21\n    # 19 20 21\n    # 20 21\n    # 21\n    for i in range(4 ** n):\n        lucid = []\n        for j in range(n):\n            lucid.append(str(i % 4))\n            i /= 4\n        lucid = ''.join(lucid[::-1])\n        lucid = int(lucid)\n        if not (lucid in lucids):\n            lucids.append(lucid)\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = [2, 4]\n    while n > 1:\n        if (n % 2) == 0:\n            n /= 2\n        elif (n % 3) == 0:\n            n /= 3\n        elif (n % 5) == 0:\n            n /= 5\n        else:\n            n -= 1\n        if n in ludic_nums:\n            return ludic_nums\n        ludic_nums.append(n)\n    return ludic_nums\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_set = set()\n    for i in xrange(10,n):\n        if '0' not in str(i):\n            lucid_set.add(i)\n    return list(lucid_set)\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 1:\n        return []\n    \n    # store ludics in an array\n    ludics = []\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        ludic.append(1)\n        if i * i < n:\n            ludic[i * i] += 1\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 0:\n        return []\n    ludic = []\n    for i in range(1,n):\n        temp = i\n        l = 0\n        while temp:\n            l += (temp%10)**3\n            temp = temp//10\n        if l == i:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip()\n    if not s:\n        return ''\n    s = s.split(' ')\n    s.reverse()\n    return''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    words = s.split(' ')\n    return''.join(reversed(words))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    word_list = s.split()\n    reversed_words = []\n    for word in word_list:\n        reversed_words.insert(0, word)\n    return''.join(reversed_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    list_of_words = s.split()\n    list_of_words.reverse()\n    return''.join(list_of_words)\n    \ndef palindrome_check(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    list_of_words = s.split()\n    if list_of_words == list_of_words[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split(\" \")))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    reverse_words = []\n    for word in words:\n        reverse_words.append(word[::-1])\n    return''.join(reverse_words)\n    \ndef reverse_words2(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split(' ')[::-1])\n    \n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    else:\n        for i in range(2,num):\n            if num%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    else:\n        for i in range(2, int(num**(1/2))+1):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, num, 2):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if (num%i)==0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree/180)*math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef distance(x1, y1, x2, y2):\n    '''\n    Write a function to compute the distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef perimeter(a, b, c):\n    '''\n    Write a function to compute the perimeter of a triangle\n    a,b,c are lengths of the sides of triangle.\n    '''\n    return a + b + c\ndef intersection(x1, y1, x2, y2, x3, y3, x4, y4):\n    '''\n    Write a function to compute the area of a regular polygon.\n    x1, y1, x2, y2, x3, y3, x4, y4 are the coordinates of the vertices of a polygon.\n    '''\n    return math.fabs((perimeter(x1, y1, x2) + perimeter(x2, y2, x3) + perimeter(x3, y3, x4) + perimeter(x4, y4, x1)) / 2)\ndef perimeter2(a, b, c):\n    '''\n    Write a function to compute the perimeter of a polygon, given the vertices.\n    '''\n    return a + b + c\ndef circumradius(a, b, c):\n    '''\n    Write a function to compute the circumradius of a circle.\n    '''\n    return (a + b + c) / 2\ndef area(a, b, c):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    return math.pi * circumradius(a, b, c)**2\ndef distance2(x1, y1, x2, y2):\n    '''\n    Write a function to compute the distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef perimeter3(a, b, c):\n    '''\n    Write a function to compute the perimeter of a circle, given the length of the sides.\n    '''\n    return perimeter2(a, b, c)\ndef intersection2(x1, y1, x2, y2, x3, y3, x4, y4):\n    '''\n    Write a function to compute the area of a regular polygon, given the vertices.\n    '''\n    return math.fabs((perimeter2(x1, y1, x2) + perimeter2(x2, y2, x3) + perimeter2(x3, y3, x4) + perimeter2(x4, y4, x1)) / 2)\ndef is_triangle(a, b, c):\n    '''\n    Write a function to check whether three points make a triangle\n    a, b, c are the three points of the triangle\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    return False\ndef is_rectangle(a, b, c, d):\n    '''\n    Write a function to check whether four points make a rectangle.\n    '''\n    if (a + b > c) and (a + c > d) and (b + d > a) and (c + d > b):\n        return True\n    return False\ndef intersection3(x1, y1, x2, y2, x3, y3, x4, y4):\n    '''\n    Write a function to compute the area of a regular polygon, given the vertices.\n    '''\n    if is_triangle(x1, x2, x3):\n        if is_triangle(y1, y2, y3):\n            if is_triangle(x1, y1, x2):\n                if is_triangle(x1, y1, x3):\n                    if is_triangle(x2, y2, x3):\n                        return area(x1, x2, x3)\n                    elif is_triangle(y1, y2, y3):\n                        return area(y1, y2, y3)\n            elif is_triangle(x1, y1, x4):\n                if is_triangle(x2, y2, x3):\n                    return area(x1, x2, x3)\n                elif is_triangle(x2, y2, x4):\n                    return area(x1, x2, x4)\n            elif is_triangle(x2, y2, x3):\n                if is_triangle(x3, y3, x4):\n                    return area(x1, x3, x4)\n                elif is_triangle(y2, y3, y4):\n                    return area(y2, y3, y4)\n            elif is_triangle(x3, y3, x4):\n                if is_triangle(x4, y4, x1):\n                    return area(x3, y3, x4)\n                elif is_triangle(x4, y4, x2):\n                    return area(x3, y3, x2)\n        elif is_triangle(x1, x2, y3):\n            if is_triangle(y1, y2, x3):\n                return area(y1, y2, x3)\n            elif is_triangle(y1, y2, x4):\n                return area(y1, y2, x4)\n            elif is_triangle(x2, y2, x3):\n                return area(x2, y2, x3)\n            elif is_triangle(x2, y2, x4):\n                return area(x2, y2, x4)\n        elif is_triangle(x1, x2, y4):\n            if is_triangle(y1, y2, x3):\n                return area(y1, y2, x3)\n            elif is_triangle(y1, y2, x4):\n                return area(y1, y2, x4)\n            elif is_triangle(x2, y2, x3):\n                return area(x2, y2, x3)\n            elif is_triangle(x2, y2, x4):\n                return area(x2, y2, x4)\n        elif is_triangle(x2, x3, x4):\n            if is_triangle(y1, y2, x3):\n                return area(y1, y2, x3)\n            elif is_triangle(y1, y2, x4):\n                return area(y1, y2, x4)\n            elif is_triangle(x1, y1, x3):\n                return area(x1, y1, x3)\n            elif is_triangle(x1, y1, x4):\n                return area(x1, y1, x4)\n    elif is_triangle(x1, x2, x3):\n        if is_triangle(y1, y2, y3):\n            if is_triangle(x1, y1, x2):\n                if is_triangle(x1, y1, x3):\n                    if is_triangle(x2, y2, x3):\n                        return area(x1, x2, x3)\n                    elif is_triangle(y1, y2, y3):\n                        return area(y1, y2, y3)\n            elif is_triangle(x1, y1, x4):\n                if is_triangle(x2, y2, x3):\n                    return area(x1, x2, x3)\n                elif is_triangle(x2, y2, x4):\n                    return area(x1, x2, x4)\n            elif is_triangle(x2, y2, x3):\n                if is_triangle(x3, y3, x4):\n                    return area(x1, x3, x4)\n                elif is_triangle(y2, y3, y4):\n                    return area(y2, y3, y4)\n            elif is_triangle(x3, y3, x4):\n                if is_triangle(x4, y4, x1):\n                    return area(x1, x3"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree*math.pi)/180\ndef cosine(x1,x2,y1,y2):\n    '''\n    Write a function to compute the cosine of a given angle.\n    '''\n    return (x1*x2+y1*y2)/((math.sqrt(x1*x1+y1*y1))*(math.sqrt(x2*x2+y2*y2)))\ndef calculate_distance(x1,x2,y1,y2):\n    '''\n    Write a function to compute the distance between two points (x1, y1) and (x2, y2).\n    '''\n    return math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))\ndef calculate_slope(x1,x2,y1,y2):\n    '''\n    Write a function to compute the slope of a line that goes through the two points (x1, y1) and (x2, y2).\n    '''\n    return (y2-y1)/(x2-x1)\ndef calculate_cosine_theta(x1,x2,y1,y2):\n    '''\n    Write a function to compute the cosine of an angle between a line going through two points (x1, y1) and (x2, y2)\n    and the horizontal line that goes through the points (x1, y1) and (x2, y2).\n    '''\n    return cosine(calculate_slope(x1,x2,y1,y2),(y1-y2)/(x2-x1),0,0)\ndef calculate_sine_theta(x1,x2,y1,y2):\n    '''\n    Write a function to compute the sine of an angle between a line going through two points (x1, y1) and (x2, y2)\n    and the horizontal line that goes through the points (x1, y1) and (x2, y2).\n    '''\n    return cosine(calculate_slope(x1,x2,y1,y2),(x1-x2)/(y2-y1),0,0)\ndef angle_between_two_lines(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to compute the angle between two lines that go through the points (x1, y1) and (x2, y2)\n    and the line that goes through the points (x3, y3).\n    '''\n    angle1 = calculate_cosine_theta(x1,x2,y1,y2)\n    angle2 = calculate_cosine_theta(x3,x2,y3,y2)\n    return abs(angle1-angle2)\ndef calculate_cosine_theta_1(x1,x2,y1,y2):\n    '''\n    Write a function to compute the cosine of an angle between a line going through two points (x1, y1) and (x2, y2)\n    and the horizontal line that goes through the points (x1, y1) and (x2, y2).\n    '''\n    return cosine(calculate_slope(x1,x2,y1,y2),(y1-y2)/(x2-x1),0,0)\ndef calculate_sine_theta_1(x1,x2,y1,y2):\n    '''\n    Write a function to compute the sine of an angle between a line going through two points (x1, y1) and (x2, y2)\n    and the horizontal line that goes through the points (x1, y1) and (x2, y2).\n    '''\n    return cosine(calculate_slope(x1,x2,y1,y2),(x1-x2)/(y2-y1),0,0)\ndef angle_between_two_lines_1(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to compute the angle between two lines that go through the points (x1, y1) and (x2, y2)\n    and the line that goes through the points (x3, y3).\n    '''\n    angle1 = calculate_cosine_theta_1(x1,x2,y1,y2)\n    angle2 = calculate_cosine_theta_1(x3,x2,y3,y2)\n    return abs(angle1-angle2)\ndef rectangle_area(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the area of a rectangle whose four vertices are (x1, y1), (x2, y2), (x3, y3) and (x4, y4).\n    '''\n    a = calculate_distance(x1,x2,y1,y2)\n    b = calculate_distance(x3,x4,y3,y4)\n    return a*b\ndef rectangle_perimeter(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the perimeter of a rectangle whose four vertices are (x1, y1), (x2, y2), (x3, y3) and (x4, y4).\n    '''\n    a = calculate_distance(x1,x2,y1,y2)\n    b = calculate_distance(x3,x4,y3,y4)\n    return 2*a+2*b\ndef triangle_area(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to compute the area of a triangle whose three vertices are (x1, y1), (x2, y2), (x3, y3)\n    '''\n    return calculate_distance(x1,x2,y1,y2)*calculate_distance(x1,x3,y1,y3)/2\ndef triangle_perimeter(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to compute the perimeter of a triangle whose three vertices are (x1, y1), (x2, y2), (x3, y3).\n    '''\n    return calculate_distance(x1,x2,y1,y2)+calculate_distance(x1,x3,y1,y3)+calculate_distance(x2,x3,y2,y3)\ndef rectangle_polar_angle(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the polar angle of a rectangle whose four vertices are (x1, y1), (x2, y2), (x3, y3) and (x4, y4).\n    '''\n    a = calculate_distance(x1,x2,y1,y2)\n    b = calculate_distance(x3,x4,y3,y4)\n    angle1 = calculate_cosine_theta(x1,x2,y1,y2)\n    angle2 = calculate_cosine_theta(x3,x4,y3,y4)\n    return math.acos(angle1*angle2)\ndef rectangle_polar_angle_1(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the polar angle of a rectangle whose four vertices are (x1, y1), (x2, y2), (x3, y3) and (x4, y4).\n    '''\n    a = calculate_distance(x1,x2,y1,y2)\n    b = calculate_distance(x3,x4,y3,y4)\n    angle1 = calculate_cosine_theta_1(x1,x2,y1,y2)\n    angle2 = calculate_cosine_theta_1(x3,x4,y3,y4)\n    return math.acos(angle1*angle2)\ndef rectangle_polar_angle_2(x1,y1,x2,"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef radian_degree_list(degree_list):\n    return [radian_degree(degree) for degree in degree_list]\ndef convert_map_to_list(map_obj):\n    return map_obj.map_list\ndef convert_map_to_string(map_obj):\n    return ''.join(map_obj.map_list)\ndef convert_map_to_tuple(map_obj):\n    return tuple(map_obj.map_list)\ndef convert_map_to_matrix(map_obj):\n    map_list = convert_map_to_list(map_obj)\n    return [map_list[x:x + map_obj.column_count] for x in range(0, len(map_list), map_obj.column_count)]\ndef convert_map_to_string_matrix(map_obj):\n    map_matrix = convert_map_to_matrix(map_obj)\n    return '\\n'.join([''.join(line) for line in map_matrix])\ndef convert_map_to_string_list(map_obj):\n    return [''.join(line) for line in convert_map_to_matrix(map_obj)]\ndef convert_map_to_tuple_matrix(map_obj):\n    map_matrix = convert_map_to_matrix(map_obj)\n    return tuple([tuple(line) for line in map_matrix])\ndef convert_map_to_tuple_list(map_obj):\n    return [tuple(line) for line in convert_map_to_matrix(map_obj)]\ndef convert_map_to_string_tuple_matrix(map_obj):\n    map_matrix = convert_map_to_matrix(map_obj)\n    return '\\n'.join([','.join(line) for line in map_matrix])\ndef convert_map_to_string_tuple_list(map_obj):\n    return [','.join(line) for line in convert_map_to_matrix(map_obj)]\ndef convert_map_to_tuple_tuple_matrix(map_obj):\n    map_matrix = convert_map_to_matrix(map_obj)\n    return tuple([tuple(line) for line in map_matrix])\ndef convert_map_to_tuple_tuple_list(map_obj):\n    return [tuple(line) for line in convert_map_to_matrix(map_obj)]\ndef convert_map_to_string_tuple_tuple_matrix(map_obj):\n    map_matrix = convert_map_to_matrix(map_obj)\n    return '\\n'.join([','.join(line) for line in map_matrix])\ndef convert_map_to_string_tuple_tuple_list(map_obj):\n    return [','.join(line) for line in convert_map_to_matrix(map_obj)]\ndef convert_map_to_list_of_list(map_obj):\n    return [list(line) for line in convert_map_to_matrix(map_obj)]\ndef convert_map_to_list_of_string(map_obj):\n    return [''.join(line) for line in convert_map_to_list_of_list(map_obj)]\ndef convert_map_to_string_list_of_string(map_obj):\n    return [','.join(line) for line in convert_map_to_list_of_string(map_obj)]\ndef convert_map_to_list_of_tuple(map_obj):\n    return [tuple(line) for line in convert_map_to_list_of_list(map_obj)]\ndef convert_map_to_string_list_of_tuple(map_obj):\n    return [','.join(line) for line in convert_map_to_list_of_tuple(map_obj)]\ndef convert_map_to_tuple_of_list(map_obj):\n    return tuple([list(line) for line in convert_map_to_matrix(map_obj)])\ndef convert_map_to_tuple_of_string(map_obj):\n    return tuple([''.join(line) for line in convert_map_to_tuple_of_list(map_obj)])\ndef convert_map_to_string_tuple_of_string(map_obj):\n    return ','.join(convert_map_to_tuple_of_string(map_obj))\ndef convert_map_to_tuple_of_tuple(map_obj):\n    return tuple([tuple(line) for line in convert_map_to_matrix(map_obj)])\ndef convert_map_to_tuple_of_string(map_obj):\n    return tuple([','.join(line) for line in convert_map_to_tuple_of_list(map_obj)])\ndef convert_map_to_list_of_list_of_int(map_obj):\n    return [list(line) for line in convert_map_to_list_of_list(map_obj)]\ndef convert_map_to_list_of_string_of_int(map_obj):\n    return [','.join(str(x) for x in line) for line in convert_map_to_list_of_list_of_int(map_obj)]\ndef convert_map_to_string_list_of_string_of_int(map_obj):\n    return [','.join(str(x) for x in line) for line in convert_map_to_list_of_string_of_int(map_obj)]\ndef convert_map_to_list_of_tuple_of_int(map_obj):\n    return [tuple(line) for line in convert_map_to_list_of_list_of_int(map_obj)]\ndef convert_map_to_string_list_of_tuple_of_int(map_obj):\n    return [','.join(str(x) for x in line) for line in convert_map_to_list_of_tuple_of_int(map_obj)]\ndef convert_map_to_tuple_of_list_of_int(map_obj):\n    return tuple([list(line) for line in convert_map_to_matrix(map_obj)])\ndef convert_map_to_tuple_of_string_of_int(map_obj):\n    return tuple([','.join(str(x) for x in line) for line in convert_map_to_tuple_of_list_of_int(map_obj)])\ndef convert_map_to_list_of_list_of_string(map_obj):\n    return [list(line) for line in convert_map_to_list_of_list(map_obj)]\ndef convert_map_to_list_of_string_of_string(map_obj):\n    return [','.join(line) for line in convert_map_to_list_of_list_of_string(map_obj)]\ndef convert_map_to_string_list_of_string_of_string(map_obj):\n    return [','.join(line) for line in convert_map_to_list_of_string_of_string(map_obj)]\ndef convert_map_to_tuple_of_list_of_string(map_obj):\n    return tuple([','.join(line) for line in convert_map_to_list_of_list_of_string(map_obj)])\ndef convert_map_to_tuple_of_string_of_string(map_obj):\n    return tuple([','.join(line) for line in convert_map_to_list_of_string_of_string(map_obj)])\ndef convert_map_to_list_of_tuple_of_int(map_obj):\n    return [tuple(line) for line in convert_map_to_matrix(map_obj)]\ndef convert_map_to_list_of_tuple_of_string(map_obj):\n    return [','.join(line) for line in convert_map_to_list_of_tuple_of_int(map_obj)]\ndef convert_map_to_string_list_of_tuple_of_string(map_obj):\n    return "
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef distance(x1,y1,x2,y2):\n    return ((x2-x1)**2+(y2-y1)**2)**0.5\ndef clockwise(x1,y1,x2,y2,x3,y3):\n    if y3-y2==0 and x3-x2==0:\n        return 0\n    elif x3-x2==0:\n        return y2-y1\n    elif x2-x1==0:\n        return -1*(y3-y1)\n    else:\n        return (y3-y2)/(x3-x2)\ndef sort_clockwise(x1,y1,x2,y2,x3,y3):\n    return clockwise(x1,y1,x2,y2,x3,y3)\ndef uniquify(seq):\n    # Get unique items in order as appear in list\n    seen = set()\n    seen_add = seen.add\n    return [ x for x in seq if x not in seen and not seen_add(x)]\ndef manhatten_distance(x1,y1,x2,y2):\n    return abs(x2-x1)+abs(y2-y1)\ndef slope(x1,y1,x2,y2):\n    return (y2-y1)/(x2-x1)\ndef line_intersection(x1,y1,x2,y2,x3,y3,x4,y4):\n    s1=(slope(x1,y1,x2,y2))\n    s2=(slope(x3,y3,x4,y4))\n    s=(s1+s2)/2\n    b1=(y1-slope(x1,y1,x2,y2)*x1)\n    b2=(y3-slope(x3,y3,x4,y4)*x3)\n    x=(s*s1*x1-b1-s2*x3+b2)/(s1-s2)\n    y=(s*s1*y1-b1-s2*y3+b2)/(s1-s2)\n    return (x,y)\ndef intersection(x1,y1,x2,y2,x3,y3,x4,y4):\n    s1=(slope(x1,y1,x2,y2))\n    s2=(slope(x3,y3,x4,y4))\n    s=(s1+s2)/2\n    b1=(y1-slope(x1,y1,x2,y2)*x1)\n    b2=(y3-slope(x3,y3,x4,y4)*x3)\n    x=(s*s1*x1-b1-s2*x3+b2)/(s1-s2)\n    y=(s*s1*y1-b1-s2*y3+b2)/(s1-s2)\n    return (x,y)\ndef compute_min_coverage_rectangle(starts, ends, points):\n    # Write your code here\n    if len(starts)==0:\n        return 0\n    curr_start=starts[0]\n    curr_end=ends[0]\n    end_to_start_slope=slope(curr_start[0], curr_start[1], curr_end[0], curr_end[1])\n    min_coverage=0\n    for point in points:\n        curr_start=point\n        curr_end=point\n        for i in range(len(starts)):\n            start=starts[i]\n            end=ends[i]\n            if starts[i]==curr_start and ends[i]==curr_end:\n                continue\n            end_to_start_slope=slope(curr_start[0], curr_start[1], curr_end[0], curr_end[1])\n            if end_to_start_slope==slope(start[0], start[1], end[0], end[1]):\n                if distance(curr_start[0], curr_start[1], start[0], start[1])>distance(curr_start[0], curr_start[1], end[0], end[1]):\n                    curr_start=start\n                    curr_end=end\n                else:\n                    if distance(curr_end[0], curr_end[1], start[0], start[1])>distance(curr_end[0], curr_end[1], end[0], end[1]):\n                        curr_end=end\n                    else:\n                        continue\n            else:\n                if line_intersection(curr_start[0], curr_start[1], end[0], end[1], curr_end[0], curr_end[1], start[0], start[1])==None:\n                    continue\n                else:\n                    if manhatten_distance(start[0], start[1], line_intersection(curr_start[0], curr_start[1], end[0], end[1], curr_end[0], curr_end[1], start[0], start[1])<distance(curr_start[0], curr_start[1], start[0], start[1]):\n                        curr_start=start\n                        curr_end=end\n                    else:\n                        continue\n        min_coverage+=distance(curr_start[0], curr_start[1], curr_end[0], curr_end[1])\n        curr_start=curr_end\n    return min_coverage\ndef compute_min_coverage_rectangle2(starts, ends, points):\n    # Write your code here\n    if len(starts)==0:\n        return 0\n    curr_start=starts[0]\n    curr_end=ends[0]\n    end_to_start_slope=slope(curr_start[0], curr_start[1], curr_end[0], curr_end[1])\n    min_coverage=0\n    for point in points:\n        curr_start=point\n        curr_end=point\n        for i in range(len(starts)):\n            start=starts[i]\n            end=ends[i]\n            if starts[i]==curr_start and ends[i]==curr_end:\n                continue\n            end_to_start_slope=slope(curr_start[0], curr_start[1], curr_end[0], curr_end[1])\n            if end_to_start_slope==slope(start[0], start[1], end[0], end[1]):\n                if distance(curr_start[0], curr_start[1], start[0], start[1])>distance(curr_start[0], curr_start[1], end[0], end[1]):\n                    curr_start=start\n                    curr_end=end\n                else:\n                    if distance(curr_end[0], curr_end[1], start[0], start[1])>distance(curr_end[0], curr_end[1], end[0], end[1]):\n                        curr_end=end\n                    else:\n                        continue\n            else:\n                if line_intersection(curr_start[0], curr_start[1], end[0], end[1], curr_end[0], curr_end[1], start[0], start[1])==None:\n                    continue\n                else:\n                    if manhatten_distance(start[0], start[1], line_intersection(curr_start[0], curr_start[1], end[0], end[1], curr_end[0], curr_end[1], start[0], start[1])<distance(curr_start[0], curr_start[1], start[0], start[1]):\n                        curr_start=start\n                        curr_end=end\n                    else:\n                        continue\n        min_coverage+=distance(curr_start[0], curr_start[1], curr_end[0], curr_en"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\ndef degree_to_radians(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * (180/math.pi)\ndef f1(x):\n    '''\n    Write a function that calculates a f1(x).\n    '''\n    return (math.exp(-x*x) * math.cos(2*x) * math.sin(x))\ndef f2(x):\n    '''\n    Write a function that calculates a f2(x).\n    '''\n    return (math.exp(-x*x) * math.cos(2*x) * math.sin(x))\ndef f3(x):\n    '''\n    Write a function that calculates a f3(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f4(x):\n    '''\n    Write a function that calculates a f4(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f5(x):\n    '''\n    Write a function that calculates a f5(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f6(x):\n    '''\n    Write a function that calculates a f6(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f7(x):\n    '''\n    Write a function that calculates a f7(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f8(x):\n    '''\n    Write a function that calculates a f8(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f9(x):\n    '''\n    Write a function that calculates a f9(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f10(x):\n    '''\n    Write a function that calculates a f10(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f11(x):\n    '''\n    Write a function that calculates a f11(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f12(x):\n    '''\n    Write a function that calculates a f12(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f13(x):\n    '''\n    Write a function that calculates a f13(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f14(x):\n    '''\n    Write a function that calculates a f14(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f15(x):\n    '''\n    Write a function that calculates a f15(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f16(x):\n    '''\n    Write a function that calculates a f16(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f17(x):\n    '''\n    Write a function that calculates a f17(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f18(x):\n    '''\n    Write a function that calculates a f18(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f19(x):\n    '''\n    Write a function that calculates a f19(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f20(x):\n    '''\n    Write a function that calculates a f20(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f21(x):\n    '''\n    Write a function that calculates a f21(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f22(x):\n    '''\n    Write a function that calculates a f22(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f23(x):\n    '''\n    Write a function that calculates a f23(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f24(x):\n    '''\n    Write a function that calculates a f24(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f25(x):\n    '''\n    Write a function that calculates a f25(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f26(x):\n    '''\n    Write a function that calculates a f26(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f27(x):\n    '''\n    Write a function that calculates a f27(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f28(x):\n    '''\n    Write a function that calculates a f28(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f29(x):\n    '''\n    Write a function that calculates a f29(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f30(x):\n    '''\n    Write a function that calculates a f30(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f31(x):\n    '''\n    Write a function that calculates a f31(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f32(x):\n    '''\n    Write a function that calculates a f32(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f33(x):\n    '''\n    Write a function that calculates a f33(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f34(x):\n    '''\n    Write a function that calculates a f34(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f35(x):\n    '''\n    Write a function that calculates a f35(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f36(x):\n    '''\n    Write a function that calculates a f36(x).\n    '''\n    return (math.exp(-x*x) * math.cos(x) * math.sin(x))\ndef f37(x):\n    '''"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi*degree/180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        return match.group()\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Write your code here.\n    def find_regex(text, pattern):\n        pos = 0\n        match = re.search(pattern, text)\n        if match:\n            return match.group()\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_list = re.findall(r'%s' % pattern, text)\n    if pattern_list:\n        return pattern_list[0]\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    found = re.findall(pattern, text)\n    if len(found) > 0:\n        return found[0], 0, len(found[0])\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.finditer(pattern,text)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    if m is None:\n        return None\n    else:\n        return m.group(), m.start(), m.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n    return match\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index = 0\n    end_index = 0\n    for index, char in enumerate(text):\n        if char == pattern[0]:\n            if pattern[1:] == text[index: index + len(pattern)]:\n                start_index = index\n                end_index = index + len(pattern)\n    return (start_index, end_index)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex_pattern = re.compile(pattern)\n    list_of_results = regex_pattern.findall(text)\n    return list_of_results\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return ((1/float(n))*((2**n)-1))\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n * (n + 1) / 2 \n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #TODO\n    count=0\n    a=1\n    b=1\n    while count<n:\n        a,b=b,a+b\n        count=count+1\n    return a\ndef fibonacci(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    #TODO\n    a=0\n    b=1\n    if n==1:\n        return a\n    elif n==2:\n        return b\n    else:\n        for i in range(2,n):\n            a,b=b,a+b\n        return b\ndef power(n,p):\n    '''\n    Write a python function to find nth power of a number.\n    '''\n    #TODO\n    count=1\n    res=1\n    while count<=p:\n        res=res*n\n        count=count+1\n    return res\ndef factorial(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    #TODO\n    res=1\n    for i in range(1,n+1):\n        res=res*i\n    return res\ndef count_letter(text,letter):\n    '''\n    Write a python function to count the letter in a text.\n    '''\n    #TODO\n    count=0\n    for i in text:\n        if i==letter:\n            count=count+1\n    return count\ndef factorial_factorial(n):\n    '''\n    Write a python function to find factorial of factorial of a number.\n    '''\n    #TODO\n    res=1\n    for i in range(1,n+1):\n        res=res*factorial(i)\n    return res\ndef check_armstrong(n):\n    '''\n    Write a python function to check whether a number is armstrong number or not.\n    '''\n    #TODO\n    temp=n\n    sum=0\n    while temp>0:\n        r=temp%10\n        sum=sum+power(r,3)\n        temp=temp/10\n    if n==sum:\n        return True\n    else:\n        return False\ndef number_of_digit(n):\n    '''\n    Write a python function to find number of digits in a number.\n    '''\n    #TODO\n    count=0\n    while n>0:\n        n=n//10\n        count=count+1\n    return count\ndef check_palindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    #TODO\n    temp=n\n    rev=0\n    while temp>0:\n        r=temp%10\n        rev=rev*10+r\n        temp=temp//10\n    if n==rev:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    #TODO\n    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef find_maximum(a,b):\n    '''\n    Write a python function to find maximum of two numbers.\n    '''\n    #TODO\n    if a>b:\n        return a\n    else:\n        return b\ndef sum_of_digit(n):\n    '''\n    Write a python function to find sum of digit of a number.\n    '''\n    #TODO\n    res=0\n    while n>0:\n        r=n%10\n        res=res+r\n        n=n//10\n    return res\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect number or not.\n    '''\n    #TODO\n    if n==sum_of_digit(n):\n        return True\n    else:\n        return False\ndef find_maximum(a,b):\n    '''\n    Write a python function to find maximum of two numbers.\n    '''\n    #TODO\n    if a>b:\n        return a\n    else:\n        return b\ndef power_of_number(n,p):\n    '''\n    Write a python function to find nth power of a number.\n    '''\n    #TODO\n    res=1\n    for i in range(0,p):\n        res=res*n\n    return res\ndef sum_of_digit(n):\n    '''\n    Write a python function to find sum of digit of a number.\n    '''\n    #TODO\n    res=0\n    while n>0:\n        r=n%10\n        res=res+r\n        n=n//10\n    return res\ndef find_maximum(a,b):\n    '''\n    Write a python function to find maximum of two numbers.\n    '''\n    #TODO\n    if a>b:\n        return a\n    else:\n        return b\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect number or not.\n    '''\n    #TODO\n    if n==sum_of_digit(n):\n        return True\n    else:\n        return False\ndef find_maximum(a,b):\n    '''\n    Write a python function to find maximum of two numbers.\n    '''\n    #TODO\n    if a>b:\n        return a\n    else:\n        return b\ndef sum_of_digit(n):\n    '''\n    Write a python function to find sum of digit of a number.\n    '''\n    #TODO\n    res=0\n    while n>0:\n        r=n%10\n        res=res+r\n        n=n//10\n    return res\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect number or not.\n    '''\n    #TODO\n    if n==sum_of_digit(n):\n        return True\n    else:\n        return False\ndef find_maximum(a,b):\n    '''\n    Write a python function to find maximum of two numbers.\n    '''\n    #TODO\n    if a>b:\n        return a\n    else:\n        return b\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect number or not.\n    '''\n    #TODO\n    if n==sum_of_digit(n):\n        return True\n    else:\n        return False\ndef is_armstrong(n):\n    '''\n    Write a python function to check whether a number is armstrong number or not.\n    '''\n    #TODO\n    temp=n\n    sum=0\n    while temp>0:\n        r=temp%10\n        sum=sum+power(r,3)\n        temp=temp//10\n    if n==sum:\n        return True\n    else:\n        return False\ndef find_maximum(a,b):\n    '''\n    Write a python function to find maximum of two numbers.\n    '''\n    #TODO\n    if a>b:\n        return a\n    else:\n        return b\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect number or not.\n    '''\n    #TODO\n    if n==sum_of_digit(n):\n        return True\n    else:\n        return False\ndef is_armstrong(n):\n    '''\n    Write a python function to check whether a number is armstrong number or not.\n    '''\n    #TODO\n    temp=n\n    sum=0\n    while temp>0:\n        r=temp%10\n        sum=sum+power(r,3)\n        temp=temp//10\n    if n==sum:\n        return True\n    else:\n        return False\ndef find_maximum(a,b):\n    '''\n    Write a python function to find maximum of two numbers.\n    '''\n    #TODO\n    if a>b:\n        return a\n    else:\n        return b\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect numbe"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # n = 0\n    # while True:\n    #     n += 1\n    #     bell = 1\n    #     for i in range(1,n+1):\n    #         bell = bell * (i+1)\n    #     print(bell)\n    #     if bell >= n:\n    #         break\n    n = int(n)\n    if n <= 0:\n        print(\"Sorry, but bell number should be atleast 1.\")\n    else:\n        bell = 1\n        for i in range(1,n+1):\n            bell = bell * (i+1)\n        print(bell)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[1 for i in range(0,n+1)] for j in range(0,n+1)]\n    for i in range(2,n+1): \n        for j in range(1,i): \n            bell[i][j] = bell[i-1][j-1] + bell[i-1][j]\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return 1 / (1 - 1/3**n)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n * (n+1) * (2*n + 1) / 6\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n<0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return bell_Number(n-1) + n\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1 or n==2:\n        return 1\n    else:\n        return n*bell_Number(n-1)\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [x for i, x in enumerate(list1) if i!= L]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    new_list = list1[:L]+list1[L+1:]\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    i = 0\n    while i<L:\n        list1.remove(list1[i])\n        i = i + 1\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[0:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L >= len(list1):\n        return 'k cannot be larger than list size'\n    return [list1[i] for i in range(L)] + [list1[i] for i in range(len(list1) - 1, L, -1)]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [element for element in list1 if element!= list1[L]]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1[0]]\n    else:\n        return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_nth_column = [float('-inf')] * len(test_list)\n    for row in test_list:\n        max_of_nth_column[row[N - 1]] = max(row[N - 1], max_of_nth_column[row[N - 1]])\n    return max_of_nth_column\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = []\n    for row in test_list:\n        max_col.append(row[N-1])\n    return max(max_col)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    test_list = list(zip(*test_list))\n    return max(test_list[N - 1])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N-1] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    for i in range(len(test_list)):\n        test_list[i].pop(N)\n    return max(test_list[i])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    col_list = []\n    for row in test_list:\n        col_list.append(row[N-1])\n    return max(col_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # print(\"max_of_nth()\")\n    # print(test_list)\n    max_val = -1\n    for row in test_list:\n        if N > len(row):\n            # print(\"max_of_nth() returning None, row index out of bounds.\")\n            return None\n        if max_val < row[N - 1]:\n            max_val = row[N - 1]\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    index = N\n    max = 0\n    for l in test_list:\n        if l[index] > max:\n            max = l[index]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not test_list:\n        return None\n    max = test_list[0][N-1]\n    for row in test_list:\n        if row[N-1] > max:\n            max = row[N-1]\n    return max\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    list_of_tuples = [tuple(item) for item in lst]\n    return [list(item[0]) for item in list_of_tuples], [list(item[1]) for item in list_of_tuples]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [ [x[0],x[1]] for x in lst ]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[],[]]\n    for i in lst:\n        result[0].append(i[0])\n        result[1].append(i[1])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0],i[1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for l in lst:\n        new_list.append(l[0])\n        new_list.append(l[1])\n    return new_list\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0],i[1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return lst\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + merge(lst[1:])\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    list_length = len(test_list)\n    list_sum = 0\n    for i in range(list_length):\n        list_sum = list_sum + test_list[i]\n    return list_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    for i in test_list:\n        sum_list.append(sum(test_list))\n    return sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return reduce(lambda x,y:x+y,test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [(sum(test_list[:i])) for i in range(1, len(test_list)+1)]\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    cumulative_list = []\n    cumulative_list.append(total)\n    for i in range(len(test_list)):\n        total += test_list[i]\n        cumulative_list.append(total)\n    return cumulative_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(1,len(test_list)):\n        test_list[i] = test_list[i] + test_list[i-1]\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum_list = [test_list[0]]\n    for i in range(1,len(test_list)):\n        cum_sum_list.append(cum_sum_list[i-1]+test_list[i])\n    return cum_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num_list = []\n    for num in nums:\n        num_list.append(sum(num)/len(num))\n    return num_list\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    ans = []\n    for i in range(len(nums)):\n        ans.append(nums[i][0])\n    return ans\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(i)/len(i)) for i in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [float(sum(x)) / len(x) for x in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums_lst = []\n    for i in nums:\n        nums_lst.append(sum(i) / len(i))\n    return nums_lst\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(elem)/len(elem) for elem in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #average_list = []\n    #for tup in nums:\n    #    average_list.append(sum(tup)/len(tup))\n    #return average_list\n    return [sum(tup)/len(tup) for tup in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        averages.append(average(i))\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        averages.append(sum(i)/len(i))\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num_list = []\n    for n in nums:\n        num_list.append(sum(n)/len(n))\n    return num_list\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n    else:\n        return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert isinstance(test_tup1, tuple)\n    assert isinstance(test_tup2, tuple)\n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple([i % j for i, j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'ERROR'\n    tup_result = []\n    for tup_idx in range(len(test_tup1)):\n        tup_result.append( ( test_tup1[tup_idx] % test_tup2[tup_idx] ) )\n    return tup_result\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1_len = len(test_tup1)\n    test_tup2_len = len(test_tup2)\n    if test_tup1_len == test_tup2_len:\n        if test_tup1_len == 0:\n            return\n        else:\n            result = []\n            for i in range(0, test_tup1_len):\n                result.append(test_tup1[i] % test_tup2[i])\n            return result\n    else:\n        return\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda tup1, tup2: tup1 % tup2, test_tup1, test_tup2))\n    "
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        modulo_tup = modulo_tup + (i % j,)\n    return modulo_tup\n    \ndef modulo_dict(test_dict1, test_dict2):\n    '''\n    Write a function which takes two dictionaries and performs the element wise modulo on the values of the dictionary.\n    '''\n    modulo_dict = {}\n    for key, value in zip(test_dict1.keys(), test_dict1.values()):\n        modulo_dict[key] = value % test_dict2[key]\n    return modulo_dict\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert type(test_tup1) == tuple and type(test_tup2) == tuple, 'Both tuples must be the same length'\n    assert len(test_tup1) == len(test_tup2), 'Both tuples must be the same length'\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return [modulo(x,y) for x,y in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Length of tuples do not match.')\n    else:\n        output = []\n        for i in range(len(test_tup1)):\n            output.append(test_tup1[i] % test_tup2[i])\n        return tuple(output)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #return (tuple(t1 % t2 for t1, t2 in zip(test_tup1, test_tup2)))\n    return (tuple(map(operator.mod, test_tup1, test_tup2)))\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    J = 0\n    n = len(steps)\n    pos = 0\n    while(pos < n):\n        if pos + steps[pos] < n and steps[pos+steps[pos]] == 0:\n            pos += steps[pos]\n            J += 1\n        else:\n            return -1\n    return J\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # if (steps <= 0): \n    #     return 0\n    \n    # # Base case\n    # if (steps == 1): \n    #     return 0\n    \n    # if (steps == 2): \n    #     return 1\n    \n    # # Create a visited array of size steps + 2\n    # # to indicate if a particular point has been visited or not.\n    # visited = [0] * (steps + 2)\n    \n    # # Initialize the visited array with zeros\n    # for i in range(0, steps + 2): \n    #     visited[i] = 0\n    \n    # # Initialize the start and end point\n    # start = 0\n    # end = 0\n    \n    # # Start from origin\n    # visited[0] = 1\n    # visited[steps + 1] = 1\n    \n    # # Traverse the array and find the minimum jump\n    # for i in range(1, steps + 1): \n    #     for j in range(1, i): \n    #         if (visited[j] == 1): \n    #             if (j + i >= d): \n    #                 end = j\n    #                 break\n    #             visited[i] = 1\n    #             break\n    \n    # # Recursive call of min_Jumps(n - end, d)\n    # result = min_Jumps(steps - end, d)\n    \n    # return result + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if len(steps) == 0 or steps[0] > d:\n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Steps required to reach a point \n    steps = [0] + steps \n    \n    # Find the minimum required jumps to reach a point \n    jumps = [-1] * (steps[-1] + 1) \n    jumps[0] = 0 \n    jumps[1] = 0 \n    \n    for i in range(2, len(jumps)): \n        if i < len(jumps) - 1: \n            jumps[i] = min(jumps[i - d] + 1, jumps[i - 1] + 1, jumps[i]) \n        else: \n            jumps[i] = min(jumps[i - d] + 1, jumps[i - 1] + 1) \n    \n    return jumps[-1] \n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d==0 or d==steps:\n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    table = [None] * steps\n    table[0] = (0,0)\n    table[1] = (d, 0)\n    table[2] = (0, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0 or steps == 0:\n        return 0\n    if d > steps:\n        return float('inf')\n    if d == steps:\n        return 1\n    if (d, steps - d) in memo:\n        return memo[(d, steps - d)]\n    else:\n        memo[(d, steps - d)] = min_Jumps(steps, d - 1) + min_Jumps(steps, d - 2) + min_Jumps(steps, d - 3)\n        return memo[(d, steps - d)]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: return 0\n    if steps == 1: return 1\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = [0 for i in range(steps + 1)]\n    jumps[0] = -1\n    jumps[1] = 1\n    jumps[2] = 0\n    for i in range(3, steps + 1):\n        jumps[i] = float('inf')\n        for j in range(1, i):\n            if d[j][0] == d[i - j][1] and d[j][0] > 0:\n                jump = steps - j\n                if jumps[i] > jumps[j] + jump:\n                    jumps[i] = jumps[j] + jump\n    print jumps\n    return jumps[steps]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    if len(nums1) < len(nums2):\n        return divide_list(nums1,nums2)\n    elif len(nums1) == len(nums2):\n        return [a/b for a,b in zip(nums1,nums2)]\n    else:\n        raise ValueError('lists not the same length')\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [(num1/num2) for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # for each element in nums1, find the equivalent element in nums2\n    return [x / y for x,y in zip(nums1, nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] /= nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list=[]\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]/nums2[i])\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return list(map(lambda a,b:a/b,nums1,nums2))\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l = []\n    for i in range(len(nums1)):\n        l.append(nums1[i]/nums2[i])\n    return l\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)==len(nums2):\n        new_list = []\n        for i in range(len(nums1)):\n            new_list.append(nums1[i]/nums2[i])\n        return new_list\n    else:\n        return 'the lists do not have equal length'\n        \n        \ndef dict_funct(nums):\n    '''\n    Write a function that takes a list of numbers and returns a dictionary that contains the following keys:\n    -sum: the sum of the list of numbers\n    -average: the average of the list of numbers\n    -minimum: the minimum value in the list of numbers\n    -maximum: the maximum value in the list of numbers\n    -length: the length of the list of numbers\n    '''\n    num_dict = {}\n    num_dict['sum'] = sum(nums)\n    num_dict['average'] = sum(nums)/len(nums)\n    num_dict['minimum'] = min(nums)\n    num_dict['maximum'] = max(nums)\n    num_dict['length'] = len(nums)\n    return num_dict\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # if len(nums1) > len(nums2):\n    #     nums1, nums2 = nums2, nums1\n    # else:\n    #     pass\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for i in range(len(test_str)):\n        if not test_str[i].isdigit():\n            test_str = test_str[:i] + test_str[i+1:] + test_str[i]\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    char_list = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            char_list.append(test_str[i])\n    for i in range(len(test_str)):\n        if not test_str[i].isdigit():\n            char_list.append(test_str[i])\n    return ''.join(char_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    try:\n        return ''.join(sorted(list(filter(str.isdigit,test_str))))\n    except TypeError:\n        return None\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n    return num_str + test_str.replace(num_str,'')\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    output_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            output_str += i\n    return output_str\n    \ndef move_num_rec(test_str):\n    '''\n    Recursive function to move all the numbers to the end of the given string.\n    '''\n    \n    if not test_str:\n        return \"\"\n    \n    elif test_str[0].isdigit():\n        return move_num_rec(test_str[1:]) + test_str[0]\n    else:\n        return move_num_rec(test_str[1:])\n    \ndef move_num_iter(test_str):\n    '''\n    Iterative function to move all the numbers to the end of the given string.\n    '''\n    \n    test_str = list(test_str)\n    \n    for i in test_str:\n        if not i.isdigit():\n            test_str.pop(test_str.index(i))\n            test_str.append(i)\n            \n    return \"\".join(test_str)\n    \ndef move_num_rec_iter(test_str):\n    '''\n    Iterative function to move all the numbers to the end of the given string.\n    '''\n    \n    test_str = list(test_str)\n    \n    def _move_num_rec_iter(test_str, output_str):\n        \n        if not test_str:\n            return output_str\n        \n        elif test_str[0].isdigit():\n            return _move_num_rec_iter(test_str[1:], output_str + test_str[0])\n        else:\n            return _move_num_rec_iter(test_str[1:], output_str)\n        \n    return _move_num_rec_iter(test_str, \"\")\n    \ndef move_alph(test_str):\n    '''\n    Write a function to move all the alphabetic characters to the end of the given string.\n    '''\n    \n    output_str = \"\"\n    for i in test_str:\n        if i.isalpha():\n            output_str += i\n    return output_str\n    \ndef move_alph_rec(test_str):\n    '''\n    Recursive function to move all the alphabetic characters to the end of the given string.\n    '''\n    \n    if not test_str:\n        return \"\"\n    \n    elif test_str[0].isalpha():\n        return move_alph_rec(test_str[1:]) + test_str[0]\n    else:\n        return move_alph_rec(test_str[1:])\n    \ndef move_alph_iter(test_str):\n    '''\n    Iterative function to move all the alphabetic characters to the end of the given string.\n    '''\n    \n    test_str = list(test_str)\n    \n    for i in test_str:\n        if not i.isalpha():\n            test_str.pop(test_str.index(i))\n            test_str.append(i)\n            \n    return \"\".join(test_str)\n    \ndef move_alph_rec_iter(test_str):\n    '''\n    Iterative function to move all the alphabetic characters to the end of the given string.\n    '''\n    \n    test_str = list(test_str)\n    \n    def _move_alph_rec_iter(test_str, output_str):\n        \n        if not test_str:\n            return output_str\n        \n        elif test_str[0].isalpha():\n            return _move_alph_rec_iter(test_str[1:], output_str + test_str[0])\n        else:\n            return _move_alph_rec_iter(test_str[1:], output_str)\n        \n    return _move_alph_rec_iter(test_str, \"\")\n    \ndef move_num_and_alph(test_str):\n    '''\n    Write a function to move all the alphabetic characters to the end of the given string.\n    '''\n    \n    output_str = \"\"\n    for i in test_str:\n        if i.isdigit() or i.isalpha():\n            output_str += i\n    return output_str\n    \ndef move_num_and_alph_rec(test_str):\n    '''\n    Recursive function to move all the alphabetic characters to the end of the given string.\n    '''\n    \n    if not test_str:\n        return \"\"\n    \n    elif test_str[0].isdigit() or test_str[0].isalpha():\n        return move_num_and_alph_rec(test_str[1:]) + test_str[0]\n    else:\n        return move_num_and_alph_rec(test_str[1:])\n    \ndef move_num_and_alph_iter(test_str):\n    '''\n    Iterative function to move all the alphabetic characters to the end of the given string.\n    '''\n    \n    test_str = list(test_str)\n    \n    for i in test_str:\n        if i.isdigit() or i.isalpha():\n            test_str.pop(test_str.index(i))\n            test_str.append(i)\n            \n    return \"\".join(test_str)\n    \ndef move_num_and_alph_rec_iter(test_str):\n    '''\n    Iterative function to move all the alphabetic characters to the end of the given string.\n    '''\n    \n    test_str = list(test_str)\n    \n    def _move_num_and_alph_rec_iter(test_str, output_str):\n        \n        if not test_str:\n            return output_str\n        \n        elif test_str[0].isdigit() or test_str[0].isalpha():\n            return _move_num_and_alph_rec_iter(test_str[1:], output_str + test_str[0])\n        else:\n            return _move_num_and_alph_rec_iter(test_str[1:], output_str)\n        \n    return _move_num_and_alph_rec_iter(test_str, \"\")\n    \ndef move_alph_and_num(test_str):\n    '''\n    Write a function to move all the alphabetic characters to the end of the given string.\n    '''\n    \n    output_str = \"\"\n    for i in test_str:\n        if i.isdigit() or i.isalpha():\n            output_str += i\n    return output_str\n    \ndef move_alph_and_num_rec(test_str):\n    '''\n    Recursive function to move all the alphabetic characters to the end of the given string.\n    '''\n    \n    if not test_str:\n        return \"\"\n    \n    elif test_str[0].isdigit() or test_str[0].isalpha():\n        return move_alph_and_num_rec(test_str[1:]) + test_str[0]\n    else:\n        return move_alph_and_num_rec(test_str[1:])\n    \ndef move_alph_and_num_iter(test_str):\n    '''\n    Iterative function to move all the alphabetic characters to the end of the given string.\n    '''\n    \n    test_str = list(test_str)\n    \n    for i in test_str:\n        if i.isdigit() or i.isalpha():\n            test_str.pop(test_str.index(i))\n            test_str.append(i)\n            \n    return \"\".join(test_str)\n    \ndef move_alph_and_num_rec_iter(test_str):\n    '''\n    Iterative function to move all the alphabetic characters to the end of the given string.\n    '''\n    \n    test_str = list(test_str)\n    \n    def _move_alph_and_num_rec_iter(test_str, output_str):\n        \n        if not test_str:\n            return output_str\n        \n        elif test_str[0].isdigit() or test_str[0].isalpha():"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isdigit():\n            i += 1\n        else:\n            temp = test_str[i]\n            test_str = test_str[:i] + test_str[i+1:] + temp\n            i += 1\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    others = []\n    for i in range(len(test_str)):\n        if test_str[i] in \"0123456789\":\n            nums.append(test_str[i])\n        else:\n            others.append(test_str[i])\n    ans = \"\".join(nums)\n    for i in others:\n        ans += i\n    return ans\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    letters = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n        else:\n            letters.append(i)\n    return ''.join(letters + nums)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for letter in test_str:\n        if letter.isdigit():\n            num_list.append(letter)\n    return ''.join(num_list + list(test_str.replace(''.join(num_list), '')))\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    ret = \"\"\n    for i in test_str:\n        if i in '0123456789':\n            ret += i\n    return ret\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def helper(a, n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if a[0] > a[1]:\n            return max(helper(a[:1], n-1), helper(a[1:], n-1))\n        elif a[0] < a[1]:\n            return max(helper(a[:1], n-1), helper(a[1:], n-1))\n        elif a[0] == a[1]:\n            return helper(a[1:], n-1)\n    a = [3,6,7,1,4]\n    print helper(a, len(a))\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    best_len = 0\n    best_l = []\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] % a[j] == 0:\n                a[j] = 0\n            if a[j] == 0:\n                if len(a) - i > best_len:\n                    best_len = len(a) - i\n                    best_l = a[i:len(a)]\n    return best_len, best_l\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # first check for the case when the given array is empty\n    if a == []:\n        return 0\n    # now sort the array, and iterate over the array to find the largest subset\n    a.sort()\n    max_size = 1\n    n = len(a)\n    # let a[i] be the first element of the list a\n    for i in range(n):\n        # check if the current element is divisible by all the elements before it\n        for j in range(i):\n            if a[i] % a[j]!= 0:\n                break\n        else:\n            # if the current element is divisible by all the elements before it, then increment the size by 1\n            max_size += 1\n    # return the size of the largest subset\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) <= 1:\n        return len(a)\n    if len(a) == 2:\n        if a[0]%a[1] == 0:\n            return len(a)\n        else:\n            return 1\n    subsets = []\n    for i in range(1, len(a)):\n        if a[i]%a[0] == 0:\n            subsets.append(a[i])\n    if len(subsets) > 1:\n        return len(subsets)\n    return 1\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # base case: all numbers are divisible\n    if len(a) == 0:\n        return 0\n    # check all pairs\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if a[i] % a[j]!= 0:\n                return max(largest_subset(a[:i]), largest_subset(a[i+1:]))\n    return len(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    divisors = {}\n    for i in a:\n        if i in divisors:\n            divisors[i] += 1\n        else:\n            divisors[i] = 1\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    divisors = []\n    for number in a:\n        divisors.append(number)\n    for number in a:\n        divisors.append(number)\n    return sum(divisors)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subset = []\n    for num in a:\n        for i in range(len(subset)):\n            if num%subset[i]==0:\n                break\n            if i == len(subset)-1:\n                subset.append(num)\n    return subset\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if len1 == 0:\n        return arr2[n//2]\n    if len2 == 0:\n        return arr1[n//2]\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    if n%2 == 1:\n        return min(get_median(arr1, arr2, n//2), get_median(arr1, arr2, n//2 + 1))\n    else:\n        return (get_median(arr1, arr2, n//2) + get_median(arr1, arr2, n//2 + 1))/2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Only 1 or 0 elements\n    if n == 1:\n        if arr1[0] < arr2[0]:\n            return arr1[0]\n        else:\n            return arr2[0]\n    # 2 or 3 elements\n    if n == 2:\n        if arr1[0] > arr2[0]:\n            return arr2[0]\n        else:\n            return arr1[0]\n    # 4 or more elements\n    if n%2 == 0:\n        median1 = get_median(arr1, arr2, n/2)\n        median2 = get_median(arr1, arr2, n/2)\n        if median1 < median2:\n            return median2\n        else:\n            return median1\n    else:\n        median1 = get_median(arr1, arr2, n/2)\n        median2 = get_median(arr1, arr2, (n/2)+1)\n        if median1 < median2:\n            return median2\n        else:\n            return median1\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if (n == 1):\n        return (arr1[0] + arr2[0])/2\n    elif (n == 2):\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1]))/2\n    else:\n        if (n % 2 == 0):\n            return get_median(arr1, arr2, n/2)\n        else:\n            return get_median(arr1, arr2, (n-1)/2)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return (arr1[0] + arr2[0])/2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1]))/2\n    if n == 3:\n        return (arr1[1] + arr2[2])/2\n    if n%2 == 1:\n        return arr1[n/2]\n    else:\n        return (arr1[n/2] + arr2[n/2-1])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2 == 0:\n        return (arr1[n/2-1] + arr1[n/2]) / 2.0\n    else:\n        return arr1[n/2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    total = n + n\n    if total % 2 == 0:\n        return (arr1[total/2] + arr2[total/2-1])/2\n    else:\n        return arr1[total/2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    index1 = 0\n    index2 = 0\n    res = []\n    while index1 < n and index2 < n:\n        if arr1[index1] < arr2[index2]:\n            res.append(arr1[index1])\n            index1 += 1\n        else:\n            res.append(arr2[index2])\n            index2 += 1\n    if index1 < n:\n        res += arr1[index1:]\n    if index2 < n:\n        res += arr2[index2:]\n    return res\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    if m < n:\n        return get_median(arr2, arr1, n)\n    if n == 0:\n        return -1\n    if m == 0:\n        return arr2[n//2]\n    if n == 1:\n        return (arr1[0] + arr2[0])//2\n    if m == 1:\n        return (arr1[0] + arr2[n//2])//2\n    return (get_median(arr1[:m//2], arr2[:n//2], n//2) + get_median(arr1[m//2:], arr2[n//2:], n//2))/2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    total_len = n + n\n    mid = total_len // 2\n    # print(mid)\n    # print(arr1, arr2)\n    if (total_len % 2 == 0):\n        return (arr1[mid] + arr2[mid]) / 2\n    else:\n        return arr1[mid]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    l = []\n    for i in nums:\n        l.append(i**n)\n    return l\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    pow_list = []\n    for i in nums:\n        pow_list.append(i**n)\n    return pow_list\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power=[]\n    for i in nums:\n        power.append(i**n)\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n    \ndef is_prime(num):\n    '''\n    Write a function to check if a given number is prime.\n    '''\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for x in nums:\n        res.append(x**n)\n    return res\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = ''\n    for i in string:\n        if ord(i) >= 65 and ord(i) <= 90:\n            new_string += chr(ord(i) - 32)\n        else:\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = ''\n    for i in string:\n        if i.isupper():\n            upper_string += i\n    return upper_string\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #Expected output: [5, 10, 2, 4, 6]\n    #Sample Input: [5, 10, 2, 4, 6]\n    #Sample Output: [6, 2, 4, 10, 5]\n    if len(newList)>2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #swapList=newList[-1:] + newList[1:-1]\n    return newList[-1:] + newList[1:-1]\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    tmp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = tmp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    newList[0],newList[size-1] = newList[size-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n    \ndef check_List(newList):\n    '''\n    Write a python function to check if a given list is sorted or not.\n    '''\n    \n    return newList == sorted(newList)\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    \n    newList.reverse()\n    return newList\n    \ndef merge_List(list1, list2):\n    '''\n    Write a python function to merge two lists.\n    '''\n    \n    mergedList = list1 + list2\n    return mergedList\n    \ndef sort_List(newList):\n    '''\n    Write a python function to sort a given list.\n    '''\n    \n    newList.sort()\n    return newList\n    \ndef copy_List(newList):\n    '''\n    Write a python function to copy a given list.\n    '''\n    \n    newCopyList = newList[:]\n    return newCopyList\n    \ndef compare_List(list1, list2):\n    '''\n    Write a python function to compare two given lists.\n    '''\n    \n    return list1 == list2\n    \ndef common_List(list1, list2):\n    '''\n    Write a python function to find common items in two given lists.\n    '''\n    \n    commonList = []\n    for i in list1:\n        if i in list2:\n            commonList.append(i)\n    return commonList\n    \ndef print_List(newList):\n    '''\n    Write a python function to print a given list.\n    '''\n    \n    for i in newList:\n        print i,\n    print\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3*r**2/(4*math.tan(math.pi/3))\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    s = math.pi * math.pow(r,2)/4\n    return s\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    from math import radians\n    from math import sqrt\n    \n    a = sqrt(3)\n    b = sqrt(2)\n    \n    angle = radians(45)\n    \n    area = (1/4)*pi*(r**2)\n    \n    print (area)\n    \n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import sqrt\n    from math import pi\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r >= 0 :\n        return (3*(r**2))**0.5/4\n    else :\n        return 0\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    return math.sqrt(r*r - (r-1)*(r-1))\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return  0.5 * r * r\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #given radius of circle = a\n    #so, radius of triangle = a/2\n    #r = a/2\n    #area = a*r*(r-a/2)\n    # r*(r-a/2) = a*(a-r)\n    #area = 0.5*a*(a-r)\n    #r = a/2\n    return 0.5*r*(r-a/2)\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    # The formula for area of a triangle is 1/2 * b * h\n    # where b is the base of the triangle and h is the height\n    # b = r^2\n    # h = r * math.sqrt(3) / 2\n    # find b and h\n    b = r * r\n    h = r * math.sqrt(3) / 2\n    # find area\n    return 0.5 * b * h\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Code here\n    import math\n    return math.pi*r**2/4\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return start\n    else:\n        pivot = array[end]\n        i = start\n        for j in range(start,end):\n            if array[j] == pivot:\n                i = i + 1\n                array[j],array[i] = array[i],array[j]\n        array[i],array[end] = array[end],array[i]\n        if array[i]!= array[end]:\n            return i\n        else:\n            return find_First_Missing(array,start,i-1)\n    return array[end]\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start == end:\n        return start+1\n    mid = (start + end)/2\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start > end:\n        return None\n    mid = (start + end) / 2\n    if array[mid] - array[start] == 1:\n        start += 1\n    elif array[mid] - array[end] == 1:\n        end -= 1\n    elif array[mid] - array[start] > 1:\n        return find_First_Missing(array,start,mid - 1)\n    elif array[mid] - array[end] > 1:\n        return find_First_Missing(array,mid + 1,end)\n    return array[mid] - 1\n    \ndef find_First_Missing2(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    for i in xrange(len(array) - 1):\n        if array[i] == array[i + 1] - 1:\n            continue\n        else:\n            return array[i] + 1\n    return array[-1] + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if array == []:\n        return 1\n    if array[start] == array[end-1]:\n        return find_First_Missing(array,start+1,end)\n    else:\n        return array[start] + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    if start>end:\n        return None\n    mid=(start+end)/2\n    if (array[mid]<array[mid+1] and array[mid]!=mid):\n        return mid+1\n    elif array[mid]>array[mid-1] and array[mid]!=mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid]>array[mid+1]:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid]<array[mid-1]:\n        return find_First_Missing(array,start,mid-1)\n    elif array[mid]==mid:\n        return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    while start<end:\n        if array[start]!=start:\n            return start\n        start+=1\n    return start\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start>=end:\n        return array[start]\n    mid = (start+end)//2\n    if mid > array[mid] and mid<len(array)-1:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)-1\n    if start>end:\n        return start\n    if array[start] == array[end]:\n        return find_First_Missing(array,start+1,end)\n    if array[start] == array[end]+1:\n        return find_First_Missing(array,start+1,end)\n    mid = start+(end-start)//2\n    if array[mid] == array[end]+2:\n        return find_First_Missing(array,start,mid-1)\n    return array[start]\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start==end:\n        return start\n    mid=(start+end)/2\n    if array[mid]==mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n    \nprint find_First_Missing([1,2,3,4,6,7,8,9,10])\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    result = ''\n    for char in string:\n        if char =='':\n            result += '%20'\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    if (string is None):\n        return None\n    \n    else:\n        return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split(' '))\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    import re\n    return re.sub(r\"\\s+\", \"%20\", string)\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    result = \"\"\n    for i in range(0, len(string)):\n        if string[i] == \" \":\n            result += \"%20\"\n        else:\n            result += string[i]\n    return result\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if string is None:\n        return string\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [num for num in list if num % 2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_number_list = [x for x in list if x % 2 == 0]\n    return even_number_list\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # To take input from the user \n    # my_list = [2, 4, 8, 10, 17, 19] \n    # print my_list\n    # print type(my_list)\n    # print \"The original list is : \" + str(my_list) \n    # print \"The list after removing even numbers : \" + str(my_list) \n    # print \"The list after removing even numbers : \" + str(list(filter(lambda x: (x%2!= 0), my_list)))\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for num in list:\n        if num % 2 == 0:\n            even.append(num)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    num_even = []\n    for i in list:\n        if i%2 == 0:\n            num_even.append(i)\n    return num_even\n    "
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_new = []\n    for i in list:\n        if i%2 == 0:\n            list_new.append(i)\n    return list_new\n    \nlist = [1,2,3,4,5,6]\nprint Split(list)\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x % 2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return [even_list, odd_list]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return filter(lambda x: x%2==0,list)\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0] + i, ele[1] + j) for i in (-1, 0, 1) for j in (-1, 0, 1) if i or j]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    print('Adjacent of {} : {}'.format(ele, list(zip(ele[0] + 1, ele[1], ele[2] + 1))))\n    return list(zip(ele[0] + 1, ele[1], ele[2] + 1))\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    r1 = ele[0]\n    r2 = ele[1]\n    if r1>0:\n        sub.append((r1-1, r2))\n    if r1<8:\n        sub.append((r1+1, r2))\n    if r2>0:\n        sub.append((r1, r2-1))\n    if r2<8:\n        sub.append((r1, r2+1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) < 2:\n        return sub\n    else:\n        sub.append(ele[1:])\n        return adjac(ele[:-1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] < 0 or ele[1] < 0:\n        print \"Input tuples should not have negative elements\"\n        return []\n    if ele[0] == 0:\n        return [(ele[0], ele[1] - 1), (ele[0], ele[1] + 1)]\n    if ele[1] == 0:\n        return [(ele[0] - 1, ele[1]), (ele[0] + 1, ele[1])]\n    return [(ele[0] - 1, ele[1]), (ele[0] + 1, ele[1]), (ele[0], ele[1] - 1), (ele[0], ele[1] + 1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    global tile\n    if ele[0] - 1 > 0 and tile[ele[0] - 1][ele[1]][0]!= '#':\n        sub.append((ele[0] - 1, ele[1]))\n    if ele[0] + 1 < row and tile[ele[0] + 1][ele[1]][0]!= '#':\n        sub.append((ele[0] + 1, ele[1]))\n    if ele[1] - 1 > 0 and tile[ele[0]][ele[1] - 1][0]!= '#':\n        sub.append((ele[0], ele[1] - 1))\n    if ele[1] + 1 < col and tile[ele[0]][ele[1] + 1][0]!= '#':\n        sub.append((ele[0], ele[1] + 1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    lst = []\n    x, y = ele\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if abs(i)!= abs(j):\n                lst.append((x+i, y+j))\n    return lst\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    neighbours = [(x, y+1), (x+1, y), (x, y-1), (x-1, y)]\n    return [neighbour for neighbour in neighbours if neighbour not in sub]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)):\n        if i == 0:\n            sub.append(ele[i])\n        elif i == 1:\n            sub.append((ele[i][0], ele[i][1] - 1))\n        elif i == 2:\n            sub.append((ele[i][0] - 1, ele[i][1]))\n        elif i == 3:\n            sub.append((ele[i][0] + 1, ele[i][1]))\n        elif i == 4:\n            sub.append((ele[i][0], ele[i][1] + 1))\n        elif i == 5:\n            sub.append((ele[i][0] - 1, ele[i][1] + 1))\n        elif i == 6:\n            sub.append((ele[i][0] + 1, ele[i][1] + 1))\n        elif i == 7:\n            sub.append((ele[i][0] - 1, ele[i][1] - 1))\n        elif i == 8:\n            sub.append((ele[i][0] + 1, ele[i][1] - 1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    tup = (ele[0], ele[1] + 1)\n    if tup not in sub: \n        sub.append(tup)\n    tup = (ele[0] + 1, ele[1])\n    if tup not in sub:\n        sub.append(tup)\n    tup = (ele[0], ele[1] - 1)\n    if tup not in sub:\n        sub.append(tup)\n    tup = (ele[0] - 1, ele[1])\n    if tup not in sub:\n        sub.append(tup)\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    chars = text.strip()\n    if chars.isspace():\n        return '_'\n    else:\n        return''\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    import re\n    return re.sub(r'\\s', '_', text)\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_string = ''\n    for c in text:\n        if c =='':\n            c = '_'\n        else:\n            c = c\n        new_string += c\n    return new_string\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    output = ''\n    \n    for i in range(len(text)):\n        \n        if text[i] =='':\n            output += '_'\n        else:\n            output += text[i]\n            \n    return output\n    \n    \n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text\n    for ch in new_text:\n        if ch =='':\n            new_text = new_text.replace(' ', '_')\n        elif ch == '_':\n            new_text = new_text.replace('_','')\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n    \ndef main():\n    print(replace_spaces('Hello World'))\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    #replace the spaces with a underscore and vice versa\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    tmp = text\n    for i in range(len(text)):\n        if text[i] =='':\n            tmp = tmp.replace(' ', '_')\n        else:\n            tmp = tmp.replace('_','')\n    return tmp\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if type(text) == str:\n        text = text.split()\n        return \"\".join([\"_\" if e == \" \" else \" \" for e in text])\n    else:\n        return \" \".join(text)\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    pos = 0\n    for i in range(n):\n        if num_list[i]!=0:\n            num_list[pos],num_list[i] = num_list[i],num_list[pos]\n            pos += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for item in num_list:\n        if item!= 0:\n            num_list[count] = item\n            count += 1\n    while count < len(num_list):\n        num_list[count] = 0\n        count += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in xrange(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            del num_list[i]\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for n in num_list:\n        if n == 0:\n            new_list.append(n)\n    for n in range(len(num_list) - len(new_list)):\n        new_list.append(0)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    list_of_zeros = []\n    for num in num_list:\n        if num == 0:\n            list_of_zeros.append(num)\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n            num_list.append(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create a new list of only the non-zero elements\n    new_list = [i for i in num_list if i!= 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index = 0\n    for i in num_list:\n        if i!= 0:\n            num_list[index] = i\n            index += 1\n    while index < len(num_list):\n        num_list[index] = 0\n        index += 1\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    temp = []\n    for i in num_list:\n        if i!= 0:\n            temp.append(i)\n    for i in range(len(num_list) - len(temp)):\n        temp.append(0)\n    return temp\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    non_zero_list = []\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n        else:\n            zero_list.append(num)\n    return non_zero_list + zero_list\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    return sum([x for x in arr])\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i]^arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    if len(arr) < 2:\n        return 0\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans + arr[i] ^ arr[j]\n    return ans\n    \ndef xor_pair(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_2(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans + arr[i] ^ arr[j]\n    return ans\n    \ndef xor_pair_2(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_3(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_3(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_4(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_4(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_5(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_5(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_6(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_6(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_7(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_7(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_8(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_8(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_9(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_9(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef pair_xor_Sum_10(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n    \ndef xor_pair_10(arr,n) : \n    '''\n    Write a python function to find the xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum=0\n    for i in arr :\n        xor_sum=xor_sum^i\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in xrange(n) : \n        for j in xrange(i+1,n) : \n            res += arr[i]^arr[j]\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res=0\n    for i in range(len(arr)-1):\n        res+=arr[i]^arr[i+1]\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] ^ arr[1] ^ pair_xor_Sum(arr[2:],n)\n    \ndef pair_xor_Sum_Rec(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] ^ arr[1] ^ pair_xor_Sum_Rec(arr[2:],n)\n    \ndef swap(arr,i,j) :\n    '''\n    Write a python function to swap the elements of the array arr at index i and j.\n    '''\n    arr[i], arr[j] = arr[j], arr[i]\n    return arr\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    S = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            S = S + (arr[i] ^ arr[j])\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return reduce(lambda x,y: x^y,arr)\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for val in iterable:\n        hq.heappush(h, val)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    res=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    while h:\n        res.append(hq.heappop(h))\n    return res\ndef merge_sort(iterable):\n    '''\n    Write a function that accepts an iterable and sorts the list.\n    '''\n    if len(iterable)==1:\n        return iterable\n    l,r=iterable[:len(iterable)//2],iterable[len(iterable)//2:]\n    return merge(merge_sort(l),merge_sort(r))\ndef merge(l,r):\n    '''\n    Merge two lists.\n    '''\n    res,i,j=list(),0,0\n    while i<len(l) and j<len(r):\n        if l[i]<r[j]:\n            res.append(l[i])\n            i+=1\n        else:\n            res.append(r[j])\n            j+=1\n    return res+l[i:]+r[j:]\ndef radix_sort(iterable,base=10):\n    '''\n    Write a function to sort the given iterable.\n    '''\n    count={}\n    digit=1\n    for i in range(base):\n        count[i]=[]\n    for i in iterable:\n        while i:\n            digit=(i%base)\n            count[digit].append(i)\n            i//=base\n    for i in count:\n        count[i]=heap_sort(count[i])\n    res=[]\n    for i in range(base):\n        res+=count[i]\n    return res\ndef binary_search(iterable,item):\n    '''\n    Write a function that accepts an iterable and a target value and \n    returns the index of the target value in the list.\n    '''\n    l,r=0,len(iterable)-1\n    while l<=r:\n        mid=(l+r)//2\n        if iterable[mid]==item:\n            return mid\n        elif iterable[mid]<item:\n            l=mid+1\n        else:\n            r=mid-1\n    return None\ndef bubble_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)-1,0,-1):\n        for j in range(i):\n            if iterable[j]>iterable[j+1]:\n                iterable[j],iterable[j+1]=iterable[j+1],iterable[j]\n    return iterable\ndef insertion_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(1,len(iterable)):\n        temp=iterable[i]\n        j=i\n        while j>0 and temp<iterable[j-1]:\n            iterable[j]=iterable[j-1]\n            j-=1\n        iterable[j]=temp\n    return iterable\ndef selection_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)-1):\n        for j in range(i+1,len(iterable)):\n            if iterable[i]>iterable[j]:\n                iterable[i],iterable[j]=iterable[j],iterable[i]\n    return iterable\ndef quick_sort(iterable,left=0,right=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    if right is None:\n        right=len(iterable)-1\n    if left>=right:\n        return\n    pivot=iterable[right]\n    i,j=left,left\n    while j<right:\n        if iterable[j]<pivot:\n            iterable[i],iterable[j]=iterable[j],iterable[i]\n            i+=1\n        j+=1\n    iterable[i],iterable[right]=iterable[right],iterable[i]\n    quick_sort(iterable,left,i-1)\n    quick_sort(iterable,i+1,right)\n    return iterable\ndef shell_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    d=n//2\n    while d:\n        for i in range(d,n):\n            temp=iterable[i]\n            j=i\n            while j>=d and temp<iterable[j-d]:\n                iterable[j]=iterable[j-d]\n                j-=d\n            iterable[j]=temp\n        d=d//2\n    return iterable\ndef heapsort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    res=[]\n    while h:\n        res.append(hq.heappop(h))\n    return res\ndef heapsort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,-i)\n    res=[]\n    while h:\n        res.append(-hq.heappop(h))\n    return res\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    res=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    while h:\n        res.append(hq.heappop(h))\n    return res\ndef heapify(arr,n,i):\n    l,r=i*2+1,i*2+2\n    max_i=i\n    if l<n and arr[l]>arr[max_i]:\n        max_i=l\n    if r<n and arr[r]>arr[max_i]:\n        max_i=r\n    if max_i!=i:\n        arr[i],arr[max_i]=arr[max_i],arr[i]\n        heapify(arr,n,max_i)\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    for i in range(n//2,-1,-1):\n        heapify(iterable,n,i)\n    for i in range(n-1,0,-1):\n        iterable[i],iterable[0]=iterable[0],iterable[i]\n        heapify(iterable,i,0)\n    return iterable\ndef kth_smallest(iterable,k):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    res=[]\n    for i in range(k):\n        res.append(hq.heappop(h))\n    return res\ndef partition(iterable,first,last):\n    pivot=iterable[last]\n    i=first-1\n    for j in range(first,last):\n        if iterable[j]<=pivot:\n            i+=1\n            iterable[i],iterable[j]=iterable[j],iterable[i]\n    iterable[i+1],iterable[last]=iterable[last],iterable[i+1]\n    return i+1\ndef quick_sort(iterable,first=0,last=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    if last is None:\n        last=len(iterable)-1\n    if first>=last:\n        return\n    pivot=partition(iterable,first,last)\n    quick_sort(iterable,first,pivot-1)\n    quick_sort(iterable,pivot+1,last)\n    return iterable\ndef select_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    ''"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in xrange(len(h))]\n    "
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    hq.heapify(iterable)\n    for i in xrange(len(iterable)-1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        hq.heapify(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    res = []\n    hq.heapify(res)\n    for val in iterable:\n        hq.heappush(res,val)\n    return [hq.heappop(res) for i in xrange(len(res))]\ndef bubble_sort(iterable):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    for i in xrange(len(iterable)):\n        for j in xrange(len(iterable)-1-i):\n            if iterable[j] > iterable[j+1]:\n                iterable[j],iterable[j+1] = iterable[j+1],iterable[j]\n    return iterable\ndef insertion_sort(iterable):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    for i in xrange(1,len(iterable)):\n        temp = iterable[i]\n        j = i\n        while j>0 and temp < iterable[j-1]:\n            iterable[j] = iterable[j-1]\n            j -= 1\n        iterable[j] = temp\n    return iterable\ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    return _merge_sort(iterable,0,len(iterable)-1)\ndef _merge_sort(iterable,first,last):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    if first < last:\n        mid = (first+last) / 2\n        _merge_sort(iterable,first,mid)\n        _merge_sort(iterable,mid+1,last)\n        _merge(iterable,first,mid,last)\n    return iterable\ndef _merge(iterable,first,mid,last):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    temp = []\n    i,j = first,mid+1\n    while i <= mid and j <= last:\n        if iterable[i] <= iterable[j]:\n            temp.append(iterable[i])\n            i += 1\n        else:\n            temp.append(iterable[j])\n            j += 1\n    while i <= mid:\n        temp.append(iterable[i])\n        i += 1\n    while j <= last:\n        temp.append(iterable[j])\n        j += 1\n    iterable[first:last+1] = temp[:]\n    return iterable\ndef quick_sort(iterable):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    return _quick_sort(iterable,0,len(iterable)-1)\ndef _quick_sort(iterable,first,last):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    if first < last:\n        p = _partition(iterable,first,last)\n        _quick_sort(iterable,first,p-1)\n        _quick_sort(iterable,p+1,last)\n    return iterable\ndef _partition(iterable,first,last):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    pivot = iterable[first]\n    left,right = first+1,last\n    while True:\n        while left <= right and iterable[left] <= pivot:\n            left += 1\n        while left <= right and iterable[right] >= pivot:\n            right -= 1\n        if left > right:\n            break\n        iterable[left],iterable[right] = iterable[right],iterable[left]\n    iterable[first],iterable[right] = iterable[right],iterable[first]\n    return right\ndef selection_sort(iterable):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    for i in xrange(len(iterable)-1):\n        smallest = i\n        for j in xrange(i+1,len(iterable)):\n            if iterable[smallest] > iterable[j]:\n                smallest = j\n        iterable[i],iterable[smallest] = iterable[smallest],iterable[i]\n    return iterable\ndef insertion_sort_optimized(iterable):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    for i in xrange(1,len(iterable)):\n        j = i\n        while j > 0 and iterable[j] < iterable[j-1]:\n            iterable[j],iterable[j-1] = iterable[j-1],iterable[j]\n            j -= 1\n    return iterable\ndef insertion_sort_optimized2(iterable):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    for i in xrange(1,len(iterable)):\n        temp = iterable[i]\n        j = i\n        while j > 0 and temp < iterable[j-1]:\n            iterable[j] = iterable[j-1]\n            j -= 1\n        iterable[j] = temp\n    return iterable\ndef selection_sort_optimized(iterable):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    for i in xrange(len(iterable)-1):\n        min_val = i\n        for j in xrange(i+1,len(iterable)):\n            if iterable[min_val] > iterable[j]:\n                min_val = j\n        iterable[i],iterable[min_val] = iterable[min_val],iterable[i]\n    return iterable\ndef selection_sort_optimized2(iterable):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    for i in xrange(len(iterable)-1):\n        min_val = i\n        for j in xrange(i+1,len(iterable)):\n            if iterable[min_val] > iterable[j]:\n                min_val = j\n        iterable[i],iterable[min_val] = iterable[min_val],iterable[i]\n    return iterable\ndef selection_sort_optimized3(iterable):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    for i in xrange(len(iterable)-1):\n        smallest = i\n        for j in xrange(i+1,len(iterable)):\n            if iterable[smallest] > iterable[j]:\n                smallest = j\n        iterable[i],iterable[smallest] = iterable[smallest],iterable[i]\n    return iterable\ndef bucket_sort(iterable):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    buckets = [[] for i in xrange(len(iterable))]\n    for val in iterable:\n        buckets[val].append(val)\n    for bucket in buckets:\n        for i in xrange(len(bucket)):\n            bucket[i] = 0\n        for i in xrange(len(bucket)):\n            bucket[i] = bucket[i] + 1\n    return [bucket.pop() for bucket in buckets]\ndef counting_sort(iterable):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    count = [0] * len(iterable)\n    for val in iterable:\n        count[val] += 1\n    for i in xrange(1,len(count)):\n        count[i] += count[i-1]\n    output = [0] * len(iterable)\n    for val in iterable:\n        output[count[val]-1] = val\n        count[val] -= 1\n    return output\ndef radix_sort(iterable):\n    '''\n    Write a function to sort the given list in-place.\n    '''\n    max_val = max(iterable)\n    exp = 1\n    while max_val/exp > 0:\n        count = [0] * 10\n        for val in iterable:\n            count"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # if len(iterable)<2:\n    #     return iterable\n    # else:\n    #     length = len(iterable)\n    #     if length%2==0:\n    #         half = length/2\n    #         a = iterable[:half]\n    #         b = iterable[half:]\n    #     else:\n    #         half = (length-1)/2\n    #         a = iterable[:half]\n    #         b = iterable[half+1:]\n    #     result = []\n    #     # \u6267\u884ca\u6392\u5e8f\n    #     result.extend(sorted(a))\n    #     # \u6267\u884cb\u6392\u5e8f\n    #     result.extend(sorted(b))\n    #     return result\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if iterable == []:\n        return []\n    h = [(val, idx) for idx, val in enumerate(iterable)]\n    hq.heapify(h)\n    sorted = [iterable[idx] for val, idx in h]\n    return sorted\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if iterable is None:\n        return None\n    l = len(iterable)\n    if l < 2:\n        return iterable\n    hq.heapify(iterable)\n    for i in range(0,l-1):\n        hq.heappop(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h, item)\n    return [x for x in h]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heap_sort_in_place(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    for i in range(len(h)):\n        hq.heappop(h)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heap_sort_in_place(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    for i in range(len(h)):\n        hq.heappop(h)\n    return [hq.heappop(h) for i in range(len(h))]\ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    while len(h) > 1:\n        v1 = hq.heappop(h)\n        v2 = hq.heappop(h)\n        hq.heappush(h,v1)\n        hq.heappush(h,v2)\n    return hq.heappop(h)\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    for i in range(len(h)):\n        hq.heappop(h)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heapsort(iterable):\n    h = []\n    fo"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost==sale_amount:\n        print(\"No profit or no loss\")\n    elif actual_cost>sale_amount:\n        print(\"Profit\")\n    else:\n        print(\"Loss\")\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == 0\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    ## Base case \n    if sale_amount == actual_cost:\n        return True\n    elif sale_amount < actual_cost:\n        return False\n    else:\n        return noprofit_noloss(actual_cost, sale_amount-actual_cost)\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # actual_cost = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n    # sale_amount = [5, 4, 3, 2, 1, 2, 3, 4, 5]\n    max_profit = 0\n    for i in xrange(len(actual_cost)):\n        if actual_cost[i] < sale_amount[i]:\n            max_profit += sale_amount[i] - actual_cost[i]\n        elif actual_cost[i] > sale_amount[i]:\n            max_profit -= sale_amount[i]\n        else:\n            pass\n    if max_profit == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return \"No Profit No Loss\"\n    elif actual_cost > sale_amount:\n        return \"Loss\"\n    elif actual_cost < sale_amount:\n        return \"Profit\"\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount>actual_cost:\n        print 'this is a loss'\n    else:\n        print 'this is a profit'\nnoprofit_noloss(100,100)\nnoprofit_noloss(10,50)\nnoprofit_noloss(5,10)\nnoprofit_noloss(50,50)\nnoprofit_noloss(10,100)\nnoprofit_noloss(5,150)\nnoprofit_noloss(50,400)\nnoprofit_noloss(10,1000)\nnoprofit_noloss(5,10000)\nnoprofit_noloss(50,5000)\nnoprofit_noloss(10,100001)\nnoprofit_noloss(50,50001)\nnoprofit_noloss(10,100000)\nnoprofit_noloss(5,100000)\nnoprofit_noloss(50,500000)\nnoprofit_noloss(10,1000000)\nnoprofit_noloss(5,1000000)\nnoprofit_noloss(50,5000000)\nnoprofit_noloss(10,10000000)\nnoprofit_noloss(5,10000000)\nnoprofit_noloss(50,50000000)\nnoprofit_noloss(10,100000000)\nnoprofit_noloss(5,100000000)\nnoprofit_noloss(50,500000000)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    A = 35.74\n    B = 0.6215\n    C = 35.75\n    D = 0.4275\n    return round(A*t + B*t**(1.16) + C*v + D*t**(1.16) - 40)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # TODO: Rewrite function to use math.sqrt() and round function\n    \n    # Converts wind velocity from km/h to m/s\n    wind_speed = v / 3.6\n    \n    # Calculates wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(wind_speed, 0.16)\n    \n    # Rounds wind chill index to an int\n    wind_chill_index = int(round(wind_chill_index))\n    return wind_chill_index\n    \n    \ndef wind_chill_index(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # TODO: Rewrite function to use math.sqrt() and round function\n    \n    # Converts wind velocity from km/h to m/s\n    wind_speed = v / 3.6\n    \n    # Calculates wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(wind_speed, 0.16)\n    \n    # Rounds wind chill index to an int\n    wind_chill_index = int(round(wind_chill_index))\n    return wind_chill_index\n    \n    \ndef wind_chill_index_2(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # TODO: Rewrite function to use math.sqrt() and round function\n    \n    # Converts wind velocity from km/h to m/s\n    wind_speed = v / 3.6\n    \n    # Calculates wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(wind_speed, 0.16)\n    \n    # Rounds wind chill index to an int\n    wind_chill_index = int(round(wind_chill_index))\n    return wind_chill_index\n    \n    \ndef wind_chill_index_3(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # TODO: Rewrite function to use math.sqrt() and round function\n    \n    # Converts wind velocity from km/h to m/s\n    wind_speed = v / 3.6\n    \n    # Calculates wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(wind_speed, 0.16)\n    \n    # Rounds wind chill index to an int\n    wind_chill_index = int(round(wind_chill_index))\n    return wind_chill_index\n    \n    \ndef wind_chill_index_4(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # TODO: Rewrite function to use math.sqrt() and round function\n    \n    # Converts wind velocity from km/h to m/s\n    wind_speed = v / 3.6\n    \n    # Calculates wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(wind_speed, 0.16)\n    \n    # Rounds wind chill index to an int\n    wind_chill_index = int(round(wind_chill_index))\n    return wind_chill_index\n    \n    \ndef wind_chill_index_5(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # TODO: Rewrite function to use math.sqrt() and round function\n    \n    # Converts wind velocity from km/h to m/s\n    wind_speed = v / 3.6\n    \n    # Calculates wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(wind_speed, 0.16)\n    \n    # Rounds wind chill index to an int\n    wind_chill_index = int(round(wind_chill_index))\n    return wind_chill_index\n    \n    \ndef wind_chill_index_6(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # TODO: Rewrite function to use math.sqrt() and round function\n    \n    # Converts wind velocity from km/h to m/s\n    wind_speed = v / 3.6\n    \n    # Calculates wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(wind_speed, 0.16)\n    \n    # Rounds wind chill index to an int\n    wind_chill_index = int(round(wind_chill_index))\n    return wind_chill_index\n    \n    \ndef wind_chill_index_7(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # TODO: Rewrite function to use math.sqrt() and round function\n    \n    # Converts wind velocity from km/h to m/s\n    wind_speed = v / 3.6\n    \n    # Calculates wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(wind_speed, 0.16)\n    \n    # Rounds wind chill index to an int\n    wind_chill_index = int(round(wind_chill_index))\n    return wind_chill_index\n    \n    \ndef wind_chill_index_8(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # TODO: Rewrite function to use math.sqrt() and round function\n    \n    # Converts wind velocity from km/h to m/s\n    wind_speed = v / 3.6\n    \n    # Calculates wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(wind_speed, 0.16)\n    \n    # Rounds wind chill index to an int\n    wind_chill_index = int(round(wind_chill_index))\n    return wind_chill_index\n    \n    \ndef wind_chill_index_9(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # TODO: Rewrite function to use math.sqrt() and round function\n    \n    # Converts wind velocity from km/h to m/s\n    wind_speed = v / 3.6\n    \n    # Calculates wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(wind_speed, 0.16)\n    \n    # Rounds wind chill index to an int\n    wind_chill_index = int(round(wind_chill_index))\n    return wind_chill_index\n    \n    \ndef wind_chill_index_10(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded t"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # If temperature is less than 0, return -30\n    if t < 0:\n        return -30\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return int(35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(v, 0.16))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        return \"Invalid\"\n    wci = 35.74 + 0.6215*t + (13.12 + 0.3965*t) * (v ** 0.16)\n    return int(math.ceil(wci))\ndef cel_to_fah(c):\n    '''\n    Write a function to convert a temperature from celsius to fahrenheit rounded to the next integer.\n    '''\n    if c < -273.15:\n        return \"Invalid\"\n    fah = (c * 9 / 5) + 32\n    return int(math.ceil(fah))\ndef fah_to_cel(f):\n    '''\n    Write a function to convert a temperature from fahrenheit to celsius rounded to the next integer.\n    '''\n    if f < -459.67:\n        return \"Invalid\"\n    cel = (f - 32) * 5 / 9\n    return int(math.ceil(cel))\ndef gph_to_mph(g):\n    '''\n    Write a function to convert a speed from m/s to mph rounded to the next integer.\n    '''\n    if g < 0:\n        return \"Invalid\"\n    mph = g * 2.23694\n    return int(math.ceil(mph))\ndef mph_to_gph(m):\n    '''\n    Write a function to convert a speed from mph to m/s rounded to the next integer.\n    '''\n    if m < 0:\n        return \"Invalid\"\n    gph = m * 0.44704\n    return int(math.ceil(gph))\ndef mph_to_kph(m):\n    '''\n    Write a function to convert a speed from mph to kph rounded to the next integer.\n    '''\n    if m < 0:\n        return \"Invalid\"\n    kph = m * 1.60934\n    return int(math.ceil(kph))\ndef kph_to_mph(k):\n    '''\n    Write a function to convert a speed from kph to mph rounded to the next integer.\n    '''\n    if k < 0:\n        return \"Invalid\"\n    mph = k * 2.23694\n    return int(math.ceil(mph))\ndef c_to_f(c):\n    '''\n    Write a function to convert a temperature from celsius to fahrenheit rounded to the next integer.\n    '''\n    if c < -459.67:\n        return \"Invalid\"\n    f = (c * 9 / 5) + 32\n    return int(math.ceil(f))\ndef f_to_c(f):\n    '''\n    Write a function to convert a temperature from fahrenheit to celsius rounded to the next integer.\n    '''\n    if f < -459.67:\n        return \"Invalid\"\n    c = (f - 32) * 5 / 9\n    return int(math.ceil(c))\ndef in_to_cm(in_):\n    '''\n    Write a function to convert inches to centimeters rounded to the next integer.\n    '''\n    if in_ < 0:\n        return \"Invalid\"\n    cm = in_ * 2.54\n    return int(math.ceil(cm))\ndef cm_to_in(cm):\n    '''\n    Write a function to convert centimeters to inches rounded to the next integer.\n    '''\n    if cm < 0:\n        return \"Invalid\"\n    in_ = cm * 0.3937\n    return int(math.ceil(in_))\ndef in_to_mm(in_):\n    '''\n    Write a function to convert inches to millimeters rounded to the next integer.\n    '''\n    if in_ < 0:\n        return \"Invalid\"\n    mm = in_ * 25.4\n    return int(math.ceil(mm))\ndef mm_to_in(mm):\n    '''\n    Write a function to convert millimeters to inches rounded to the next integer.\n    '''\n    if mm < 0:\n        return \"Invalid\"\n    in_ = mm * 0.03937\n    return int(math.ceil(in_))\ndef mph_to_kph(m):\n    '''\n    Write a function to convert a speed from mph to kph rounded to the next integer.\n    '''\n    if m < 0:\n        return \"Invalid\"\n    kph = m * 1.60934\n    return int(math.ceil(kph))\ndef kph_to_mph(k):\n    '''\n    Write a function to convert a speed from kph to mph rounded to the next integer.\n    '''\n    if k < 0:\n        return \"Invalid\"\n    mph = k * 0.44704\n    return int(math.ceil(mph))\ndef f_to_k(f):\n    '''\n    Write a function to convert a temperature from fahrenheit to kelvin rounded to the next integer.\n    '''\n    if f < -459.67:\n        return \"Invalid\"\n    k = (f - 32) * 5 / 9 + 273.15\n    return int(math.ceil(k))\ndef k_to_f(k):\n    '''\n    Write a function to convert a temperature from kelvin to fahrenheit rounded to the next integer.\n    '''\n    if k < -273.15:\n        return \"Invalid\"\n    f = (k - 273.15) * 9 / 5 + 32\n    return int(math.ceil(f))\ndef f_to_c(f):\n    '''\n    Write a function to convert a temperature from fahrenheit to celsius rounded to the next integer.\n    '''\n    if f < -459.67:\n        return \"Invalid\"\n    c = (f - 32) * 5 / 9\n    return int(math.ceil(c))\ndef c_to_f(c):\n    '''\n    Write a function to convert a temperature from celsius to fahrenheit rounded to the next integer.\n    '''\n    if c < -459.67:\n        return \"Invalid\"\n    f = (c * 9 / 5) + 32\n    return int(math.ceil(f))\ndef mm_to_in(mm):\n    '''\n    Write a function to convert millimeters to inches rounded to the next integer.\n    '''\n    if mm < 0:\n        return \"Invalid\"\n    in_ = mm * 0.03937\n    return int(math.ceil(in_))\ndef in_to_mm(in_):\n    '''\n    Write a function to convert inches to millimeters rounded to the next integer.\n    '''\n    if in_ < 0:\n        return \"Invalid\"\n    mm = in_ * 25.4\n    return int(math.ceil(mm))\ndef k_to_c(k):\n    '''\n    Write a function to convert a temperature from kelvin to celsius rounded to the next integer.\n    '''\n    if k < -273.15:\n        return \"Invalid\"\n    c = k - 273.15\n    return int(math.ceil(c))\ndef c_to_k(c):\n    '''\n    Write a function to convert a temperature from celsius to kelvin rounded to the next integer.\n    '''\n    if c < -273.15:\n        return \"Invalid\"\n    k = c + 273.15\n    return int(math.ceil(k))\ndef h_to_cel(h):\n    '''\n    Write a function to convert a humidity from % to celsius rounded to the next integer.\n    '''\n    if h < 0:\n        return \"Invalid\"\n    cel = h * 0.01\n    return int(math.ceil(cel))\ndef cel_to_h(cel):\n    '''\n    Write a function to convert a humidity from celsius to % rounded to the next integer.\n    '''\n    if cel < 0:\n        return \"Invalid\"\n    h = cel * 100\n    return int(math.ceil(h))\ndef m_to_in(m):\n    '''\n    Write a function to convert a distance from meters to inches rounded to the next integer.\n    '''\n    if m < 0:\n        return \"Invalid\"\n    in_ = m * 39.37\n    return int(math.ceil(in_))\ndef in_to_m(in_):\n    '''\n    Write "
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    A = 13.12\n    B = -35.74\n    C = 0.6215\n    return (A * t) + (B * t) + (C * v ** 0.16) + 35\n    \n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    f=32+0.6215*t+(5/9)*t*(v**2)\n    return int(math.ceil(f))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74 + 0.6215 * t\n    b = 35.75 + 0.6275 * t\n    wci = a + (b - t) * v**0.16\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 35.74 + (0.6215 * t) - (35.75 * math.pow(v,0.16)) + (0.4275 * t * math.pow(v,0.16))\n    return math.ceil(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    return round((a * t) + (b * t) + (c * v) + (d * v * v) - 55,2)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    l=[]\n    for name in sample_names:\n        if name[0].isupper():\n            l.append(name)\n    return len(l)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lengths = []\n    for name in sample_names:\n        if name[0] in 'abcdefghijklmnopqrstuvwxyz':\n            lengths.append(len(name))\n    return lengths\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if name[0].isupper() == False:\n            sum_len += len(name)\n    return sum_len\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    num = 0\n    for n in sample_names:\n        if n[0] == n[0].upper():\n            num += len(n)\n    return num\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s = 0\n    for name in sample_names:\n        if name[0].isupper():\n            s += len(name)\n    return s\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for sample in sample_names:\n        if sample[0] < 'z':\n            sample_names.remove(sample)\n    return sum(len(sample) for sample in sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(sample_name) for sample_name in sample_names if sample_name[0] >= 'a' and sample_name[0] <= 'z'])\n    \n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # import names_sample\n    names = names_sample.names\n    # names_l = names_sample.names_l\n    sample_names_l = sample_names\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names\n    list_of_names = []\n    for each_name in sample_names:\n        if each_name[0].isupper():\n            list_of_names.append(each_name)\n    print(list_of_names)\n    return sum([len(each_name) for each_name in list_of_names])\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    remove = []\n    for item in items:\n        item = item[1:-1]\n        remove.append(item)\n    return remove\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        new_items.append(re.sub('\\(.*?\\)', '', item))\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    p = re.compile(r'\\([^()]+\\)')\n    n = p.sub('', items)\n    return n\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items[0] == '(':\n        items.remove('(')\n    if items[-1] == ')':\n        items.remove(')')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #items = items.replace(\"()\",\"\")\n    items = items.replace('(','')\n    items = items.replace(')','')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_str=''\n    for i in items:\n        if i=='(':\n            i=''\n        elif i==')':\n            i=''\n        new_str+=i\n    return new_str\ndef list_to_str(items):\n    new_str=''\n    for i in items:\n        new_str+=i\n    return new_str\ndef valid(items):\n    '''\n    Valid parenthesis are either of the following:\n    1) ((())\n    2) (()())\n    3) (((())))\n    '''\n    new_str=''\n    for i in items:\n        if i=='(':\n            new_str+=')'\n        elif i==')':\n            new_str+=')'\n        new_str+=i\n    #print new_str\n    new_str=remove_parenthesis(new_str)\n    #print new_str\n    if new_str[0]=='(' and new_str[-1]==')':\n        #print \"true\"\n        return True\n    else:\n        #print \"false\"\n        return False\ndef no_of_opening_brackets(items):\n    new_str=''\n    for i in items:\n        if i=='(':\n            new_str+=')'\n    #print new_str\n    new_str=remove_parenthesis(new_str)\n    #print new_str\n    return new_str.count('(')\ndef no_of_closing_brackets(items):\n    new_str=''\n    for i in items:\n        if i==')':\n            new_str+=')'\n    #print new_str\n    new_str=remove_parenthesis(new_str)\n    #print new_str\n    return new_str.count(')')\ndef balance_parenthesis(items):\n    '''\n    This function checks if the parenthesis are balanced or not.\n    '''\n    opening=0\n    for i in items:\n        if i=='(':\n            opening+=1\n        elif i==')':\n            if opening>0:\n                opening-=1\n            else:\n                return False\n    if opening==0:\n        return True\n    else:\n        return False\ndef is_empty(items):\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return True\n    else:\n        return False\ndef max_depth(items):\n    '''\n    The max depth is the longest string that can be constructed using the characters of the given string.\n    '''\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return 0\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return 0\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return 0\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return 0\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return 0\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return 0\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return 0\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return 0\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return 0\n    return 1\ndef is_balanced(items):\n    '''\n    Given a string, your function should return whether or not it's balanced.\n    The string will only contain the characters (,),), and ).\n    An empty string is also considered balanced.\n    '''\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return True\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return True\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return True\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return True\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return True\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return True\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return True\n    new_str=remove_parenthesis(items)\n    #print new_str\n    if new_str=='':\n        return True\n    return False\ndef decode_pair(items):\n    '''\n    You are given an encoded string, and you are provided with a dictionary\n    that describes the encoding rules. Implement a function that decodes the string\n    and returns the original string.\n    '''\n    #print items\n    if items=='':\n        return items\n    new_str=''\n    a=0\n    while a<len(items):\n        if items[a]=='(':\n            if items[a+1]==')':\n                new_str+='('\n                a+=1\n            else:\n                new_str+=items[a+1]\n                a+=2\n        else:\n            new_str+=items[a]\n            a+=1\n    #print new_str\n    #print new_str\n    if valid(new_str):\n        return new_str\n    else:\n        return None\ndef decode_3(items):\n    '''\n    A valid encoding is any primitive expression that starts with an open\n    parenthesis, and ends with a close parenthesis. The primitive expression\n    can be anything from a single character to a primitive expression with\n    between two and four characters. The primitive expression is then followed\n    by a close parenthesis, and can be anything.\n    '''\n    new_str=''\n    new_str+=items[0]\n    a=1\n    while a<len(items):\n        if items[a]=='(':\n            if items[a+1]==')':\n                new_str+=items[a+1]\n                a+=2\n            else:\n                new_str+=items[a+1]\n                a+=3\n        else:\n            new_str+=items[a]\n            a+=1\n    #print new_str\n    #print new_str\n    if valid(new_str):\n        return new_str\n    else:\n        return None\ndef decode_4(items):\n    '''\n    A valid encoding is any primitive expression that starts with an open\n    parenthesis, and ends with a close parenthesis. The primitive expression\n    can be anything from a single character to a primitive expression with\n    between two and four characters. The primitive expression is then followed\n    by a close parenthesis, and can be anything.\n    '''\n    new_str=''\n    new_str+=items[0]\n    a=1\n    while a<len(items):\n        if items[a]=='(':\n            if items[a+1]==')':\n                new_str+=items[a+1]\n                a+=2\n            else:\n                new_str+=items[a+1]\n                a+=3\n        else:\n            new_str+=items[a]\n            a+=1\n    #print new_str\n    #print new_str\n    if valid(new_str):\n        return new_str\n    else:\n        return None\ndef decode_5(items):\n    '''\n    A valid encoding is any primitive expression that starts with an open\n    parenthesis, and ends with a close parenthesis. The primitive expression\n    can be anything from a single character to a primitive expression with\n    between two and four characters. The primitive expression is then followed\n    by a close parenthesis, and can be anything"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if (len(item)>0):\n            item=item.strip()\n            if item[0]=='(' and item[-1]==')':\n                item=item.strip('()')\n            elif item[0]=='[' and item[-1]==']':\n                item=item.strip('[]')\n            elif item[0]=='{' and item[-1]=='}':\n                item=item.strip('{}')\n            elif item[0]=='<' and item[-1]=='>':\n                item=item.strip('<>')\n            else:\n                pass\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #O(n)\n    stack = []\n    for i, item in enumerate(items):\n        if item == ')':\n            stack.pop()\n        else:\n            stack.append(item)\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if not isinstance(items, str):\n        return items\n    items = items[1:-1]\n    items = re.sub('[\\n,\\s]+', '', items)\n    items = items.replace('\\n', '').replace('\\r', '').replace('\\t', '')\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return (n - 1) * (n - 2) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return (2*n-1)*(n-1) + (n-1)**2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # First nonagonal number is 1\n    num = 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n * 2 - 1) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return n + 1\n    else:\n        return n + 3\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    num = 1\n    while i <= n:\n        num += i\n        i += 1\n    return num\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 1) // 2 + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 1) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def _is_nonagonal(num,n):\n        return _is_nonagonal(num/3,n-1) or _is_nonagonal(num/2,n-1)\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = (n*(n+1))/2\n    return n\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # print(text)\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    # print(text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle2(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle3(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle4(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle5(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle6(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle7(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle8(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle9(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle10(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle11(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle12(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle13(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle14(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle15(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle16(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle17(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle18(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle19(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle20(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle21(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle22(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle23(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle24(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle25(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle26(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle27(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')==-1:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle28(text):\n    text=text.lower()\n    text=re.sub('[^a-zA-Z0-9 ]', '', text)\n    if text.find('z')="
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    start = 0\n    end = len(text) - 1\n    while start < end:\n        if not text[start] == 'z' and not text[end] == 'z':\n            return False\n        start += 1\n        end -= 1\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.search(r'z{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('Not found')\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(len(text)<2):\n        return False\n    if(text[0]=='z' or text[-1]=='z'):\n        return False\n    if(len(text)==2):\n        return False\n    if(text[1]=='z'):\n        return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text.count('z') >= 1:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text.startswith('z'):\n        text = text[1:]\n    if text.endswith('z'):\n        text = text[:-1]\n    if text.count('z') >= 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #to remove characters like space at the beginning and end of the word\n    #text=re.sub(r'\\s','',text)\n    #text=re.sub(r'\\s','',text)\n    #text=text.lower()\n    text=text.lower()\n    #to remove characters like space at the beginning and end of the word\n    text=re.sub(r'\\s','',text)\n    text=re.sub(r'\\s','',text)\n    #print text\n    if len(text)<=1:\n        return False\n    else:\n        #print text[0]\n        #print text[-1]\n        #print text[1]\n        #print text[-2]\n        #print text[2]\n        if text[0]=='z' and text[-1]=='z' and text[1]=='z' and text[-2]=='z':\n            return True\n        else:\n            return False\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a string ends with 'z', except at the start and end of the word.\n    '''\n    #to remove characters like space at the beginning and end of the word\n    #text=re.sub(r'\\s','',text)\n    #text=re.sub(r'\\s','',text)\n    #text=text.lower()\n    text=text.lower()\n    #to remove characters like space at the beginning and end of the word\n    text=re.sub(r'\\s','',text)\n    text=re.sub(r'\\s','',text)\n    if len(text)<=1:\n        return False\n    else:\n        #print text[0]\n        #print text[-1]\n        #print text[1]\n        #print text[-2]\n        #print text[2]\n        if text[0]=='z' and text[-1]=='z' and text[1]=='z' and text[-2]=='z':\n            return True\n        else:\n            return False\ndef text_match_wordz_begin(text):\n    '''\n    Write a function that checks if a string begins with 'z', except at the start and end of the word.\n    '''\n    #to remove characters like space at the beginning and end of the word\n    #text=re.sub(r'\\s','',text)\n    #text=re.sub(r'\\s','',text)\n    #text=text.lower()\n    text=text.lower()\n    #to remove characters like space at the beginning and end of the word\n    text=re.sub(r'\\s','',text)\n    text=re.sub(r'\\s','',text)\n    if len(text)<=1:\n        return False\n    else:\n        #print text[0]\n        #print text[-1]\n        #print text[1]\n        #print text[-2]\n        #print text[2]\n        if text[0]=='z' and text[-1]=='z' and text[1]=='z' and text[-2]=='z':\n            return True\n        else:\n            return False\ndef text_match_wordz_all(text):\n    '''\n    Write a function that checks if a string contains all 'z' character.\n    '''\n    #to remove characters like space at the beginning and end of the word\n    #text=re.sub(r'\\s','',text)\n    #text=re.sub(r'\\s','',text)\n    #text=text.lower()\n    text=text.lower()\n    #to remove characters like space at the beginning and end of the word\n    text=re.sub(r'\\s','',text)\n    text=re.sub(r'\\s','',text)\n    if len(text)<=1:\n        return False\n    else:\n        #print text[0]\n        #print text[-1]\n        #print text[1]\n        #print text[-2]\n        #print text[2]\n        if text[0]=='z' and text[-1]=='z' and text[1]=='z' and text[-2]=='z':\n            return True\n        else:\n            return False\ndef text_match_wordz_alphabet(text):\n    '''\n    Write a function that checks if a string contains all alphabets character.\n    '''\n    #to remove characters like space at the beginning and end of the word\n    #text=re.sub(r'\\s','',text)\n    #text=re.sub(r'\\s','',text)\n    #text=text.lower()\n    text=text.lower()\n    #to remove characters like space at the beginning and end of the word\n    text=re.sub(r'\\s','',text)\n    text=re.sub(r'\\s','',text)\n    if len(text)<=1:\n        return False\n    else:\n        #print text[0]\n        #print text[-1]\n        #print text[1]\n        #print text[-2]\n        #print text[2]\n        if text[0]=='z' and text[-1]=='z' and text[1]=='z' and text[-2]=='z':\n            return True\n        else:\n            return False\ndef text_match_wordz_numerals(text):\n    '''\n    Write a function that checks if a string contains all numerals character.\n    '''\n    #to remove characters like space at the beginning and end of the word\n    #text=re.sub(r'\\s','',text)\n    #text=re.sub(r'\\s','',text)\n    #text=text.lower()\n    text=text.lower()\n    #to remove characters like space at the beginning and end of the word\n    text=re.sub(r'\\s','',text)\n    text=re.sub(r'\\s','',text)\n    if len(text)<=1:\n        return False\n    else:\n        #print text[0]\n        #print text[-1]\n        #print text[1]\n        #print text[-2]\n        #print text[2]\n        if text[0]=='z' and text[-1]=='z' and text[1]=='z' and text[-2]=='z':\n            return True\n        else:\n            return False\ndef text_match_wordz_letters(text):\n    '''\n    Write a function that checks if a string contains all letters character.\n    '''\n    #to remove characters like space at the beginning and end of the word\n    #text=re.sub(r'\\s','',text)\n    #text=re.sub(r'\\s','',text)\n    #text=text.lower()\n    text=text.lower()\n    #to remove characters like space at the beginning and end of the word\n    text=re.sub(r'\\s','',text)\n    text=re.sub(r'\\s','',text)\n    if len(text)<=1:\n        return False\n    else:\n        #print text[0]\n        #print text[-1]\n        #print text[1]\n        #print text[-2]\n        #print text[2]\n        if text[0]=='z' and text[-1]=='z' and text[1]=='z' and text[-2]=='z':\n            return True\n        else:\n            return False\ndef text_match_wordz_special(text):\n    '''\n    Write a function that checks if a string contains all special characters character.\n    '''\n    #to remove characters like space at the beginning and end of the word\n    #text=re.sub(r'\\s','',text)\n    #text=re.sub(r'\\s','',text)\n    #text=text.lower()\n    text=text.lower()\n    #to remove characters like space at the beginning and end of the word\n    text=re.sub(r'\\s','',text)\n    text=re.sub(r'\\s','',text)\n    i"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'z',text)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == \"\":\n        return False\n    if text[0] == 'z':\n        return False\n    if text[-1] == 'z':\n        return False\n    for i in range(1, len(text) - 1):\n        if text[i] == 'z':\n            return False\n    return True\n    \ndef text_match_wordz_middle_re(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == \"\":\n        return False\n    if text[0] == 'z':\n        return False\n    if text[-1] == 'z':\n        return False\n    return re.search(r'z', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z' and text[-1]!= 'z':\n        return False\n    elif text[0]!= 'z' and text[-1] == 'z':\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = re.sub('z','',text)\n    text = re.sub('z','',text)\n    return text\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k] + list(reversed(input[k:]))\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Time Complexity = O(n)\n    # Space Complexity = O(1)\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[-k::]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0:\n        print \"Invalid K input\"\n        return\n    if k > len(input):\n        print \"Invalid K input\"\n        return\n    else:\n        new_array = []\n        for i in range(k, len(input)+1):\n            new_array.append(input[len(input)-i])\n        return new_array\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    return input[0:k]\n    \ndef reverse_Array_From_K_to_Last(input, k):\n    '''\n    Write a python function to reverse an array from the given position to last.\n    '''\n    input.reverse()\n    return input[k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    if k > len(input):\n        print(\"Invalid Input\")\n    else:\n        input[:k] = input[:k-1:-1]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not isinstance(input, list):\n        print \"argument must be of type array\"\n        return None\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == 0:\n        return input\n    elif k == 1:\n        return [input[-1]]\n    else:\n        return [input[-1]]+reverse_Array_Upto_K(input[:-1],k-1)\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0:\n        print \"Invalid Input\"\n        return\n    elif k == 0:\n        return input\n    else:\n        return input[k:] + input[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Base Case\n    if k == 0:\n        return input\n    # Recursive Case\n    else:\n        return reverse_Array_Upto_K(input[0:k], k-1) + input[k:len(input)]\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if not test_tup:\n        return tuple([test_dict])\n    else:\n        return tuple(test_tup[0] + tuple([test_dict]))\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #define the return tuple\n    ret_tup = ()\n    \n    #make sure the dictionary is not empty\n    if test_dict:\n        #check that the dictionary is not a string\n        if isinstance(test_dict, str):\n            #raise an error if the dictionary is a string\n            raise ValueError(\"Dictionary must be a dictionary!\")\n        else:\n            #if the dictionary is not a string then get the length of the dictionary\n            for key, value in test_dict.items():\n                #make a tuple with the length of the dictionary and the key/value pair\n                ret_tup += (len(test_dict), key, value)\n            \n    #return the final tuple\n    return ret_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.items())\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #print test_tup, test_dict\n    #print type(test_tup), type(test_dict)\n    new_tup = (test_tup[0] + 1, test_tup[1] + 1, test_dict)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + (test_dict,))\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup_len = len(test_tup)\n    for key, value in test_dict.iteritems():\n        test_tup = test_tup[:tup_len] + (value,) + test_tup[tup_len:]\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup = test_tup\n    for item in test_dict.keys():\n        tup = tup + (test_dict[item],)\n    return tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    output = test_tup[:]\n    for key in test_dict:\n        if key in output:\n            output[output.index(key)] = test_dict[key]\n        else:\n            output.append(test_dict[key])\n    return tuple(output)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def maxAvg(i,j,maxSoFar,currentCost,cost,row,col, visited):\n        if (i,j) in visited:\n            return maxSoFar\n        if i >= len(cost) or j >= len(cost[0]) or i < 0 or j < 0:\n            return maxSoFar\n        visited.add((i,j))\n        if i == row-1 and j == col-1:\n            return currentCost+cost[i][j]\n        maxAvgSoFar = max(maxAvgSoFar, maxAvg(i+1, j, maxSoFar, currentCost+cost[i][j], cost, row, col, visited))\n        maxAvgSoFar = max(maxAvgSoFar, maxAvg(i, j+1, maxSoFar, currentCost+cost[i][j], cost, row, col, visited))\n        visited.remove((i,j))\n        return maxAvgSoFar\n    \n    if len(cost) == 0:\n        return 0\n    maxSoFar = 0\n    for row in range(len(cost)):\n        for col in range(len(cost[0])):\n            maxSoFar = max(maxSoFar, maxAvg(0, 0, 0, 0, cost, row, col, set()))\n    return maxSoFar/len(cost)\n    \ndef twoSum(arr, target):\n    '''\n    Given an array of integers and a number S, find two numbers such that they add up to S and return them in an array.\n    '''\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] in d:\n            return [d[arr[i]],i]\n        else:\n            d[target-arr[i]] = i\n    return []\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def helper(cost, r, c, path, res, max_):\n        # base case\n        if r == len(cost) or c == len(cost[0]):\n            return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    # Let the number of paths to be the number of rows\n    num_paths = m\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    dp = [[0 for i in xrange(len(cost[0]))] for j in xrange(len(cost))]\n    dp[0][0] = cost[0][0]\n    for i in xrange(1,len(cost)):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n    for i in xrange(1,len(cost[0])):\n        dp[0][i] = cost[0][i] + dp[0][i-1]\n    for i in xrange(1,len(cost)):\n        for j in xrange(1,len(cost[0])):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j],dp[i][j-1])\n    return dp[-1][-1]/(len(cost)-1)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0 or len(cost[0]) == 0:\n        return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    if m == 0:\n        return 0\n    n = len(cost[0])\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    visited = [[0 for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                visited[i][j] = cost[i][j]\n            elif i == 0:\n                visited[i][j] = visited[i][j-1] + cost[i][j]\n            elif j == 0:\n                visited[i][j] = visited[i-1][j] + cost[i][j]\n            else:\n                visited[i][j] = min(visited[i-1][j], visited[i][j-1]) + cost[i][j]\n    return visited[rows-1][cols-1]/float(rows*cols)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #Since we have 2^n possible paths and 2^(n+1) possible paths. Thus we can make a 2^n by 2^n matrix of all paths.\n    #Time Complexity : O(n**2)\n    maxAvg = 0\n    for i in range(1, 2**n):\n        for j in range(1, 2**n):\n            currAvg = 0\n            for k in range(1, n+1):\n                currAvg += cost[k-1][(i-1)%n][(j-1)%n]\n            maxAvg = max(maxAvg, currAvg/k)\n    return maxAvg\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    cost = list(map(lambda x: list(map(int, x)), cost))\n    # iterate over each row, and for each cell, use a stack to keep track of the cells we're looking at\n    # for each cell, compute the max cost possible using that cell, and compute the max of all the cell values\n    # at the end, compute the average and return it\n    dp = [[0 for _ in range(len(cost))] for _ in range(len(cost))]\n    # dp = [[0 for _ in range(len(cost) + 1)] for _ in range(len(cost) + 1)]\n    for i in range(len(cost)):\n        dp[i][0] = cost[i][0]\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row, col = len(cost), len(cost[0])\n    \n    # create matrix to store the cost at every cell\n    dp = [[0 for i in xrange(col)] for j in xrange(row)]\n    \n    # the cost of a path is the sum of the cost in the path\n    for i in xrange(row):\n        for j in xrange(col):\n            if i==0 and j==0:\n                dp[i][j] = cost[i][j]\n            elif i==0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j==0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = []\n    for student in students:\n        if (student[1][0] > h and student[1][1] > w):\n            result.append(student)\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result_students = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            result_students[student] = students[student]\n    return result_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {}\n    for student, values in students.iteritems():\n        if values[0] > h and values[1] > w:\n            filtered_data[student] = values\n    return filtered_data\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    out = []\n    for s in students:\n        if students[s][0] > h and students[s][1] > w:\n            out.append(s)\n    return out\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    out = {}\n    for name,val in students.items():\n        if val[0] > h and val[1] > w:\n            out[name] = val\n    return out\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0] > h and v[1] > w}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result=[]\n    for student in students:\n        if student[1][0]>h and student[1][1]>w:\n            result.append(student)\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[name] = value\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, student_height_weight in students.items():\n        if student_height_weight[0] > h and student_height_weight[1] > w:\n            filtered_students[student] = student_height_weight\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for name,value in students.items():\n        if value[0] > h and value[1] > w:\n            new_students[name] = value\n    return new_students\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums = {}\n    for i in range(len(nums1)):\n        nums[nums1[i]] = 0\n        nums[nums2[i]] = 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums[nums1[i]] == nums[nums2[i]]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in xrange(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    index_list = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if eq(nums1[i], nums2[j]):\n                index_list.append(i)\n                index_list.append(j)\n                break\n    print index_list\n    return index_list\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return False\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef find_longest_common_prefix(strs):\n    '''\n    The input is defined as a list of strings. Write a function to find the longest common prefix in the list of strings.\n    '''\n    if len(strs) == 0:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        if strs[0] == strs[1]:\n            return strs[0]\n        else:\n            return ''\n    prefix = ''\n    for i in range(len(strs[0])):\n        for j in range(1, len(strs)):\n            if i == len(strs[j]) or strs[0][i]!= strs[j][i]:\n                return prefix\n        prefix += strs[0][i]\n    return prefix\ndef find_longest_common_prefix_2(strs):\n    '''\n    The input is defined as a list of strings. Write a function to find the longest common prefix in the list of strings.\n    '''\n    if len(strs) == 0:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        if strs[0] == strs[1]:\n            return strs[0]\n        else:\n            return ''\n    for i in range(len(strs[0])):\n        prefix = strs[0][:i+1]\n        for j in range(1, len(strs)):\n            if i == len(strs[j]) or strs[0][i]!= strs[j][i]:\n                return prefix\n    return prefix\ndef find_longest_common_prefix_3(strs):\n    if len(strs) == 0:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        if strs[0] == strs[1]:\n            return strs[0]\n        else:\n            return ''\n    for i in range(len(strs[0])):\n        prefix = strs[0][:i+1]\n        for j in range(1, len(strs)):\n            if i == len(strs[j]) or strs[0][i]!= strs[j][i]:\n                return prefix\n    return prefix\ndef find_longest_common_prefix_4(strs):\n    '''\n    The input is defined as a list of strings. Write a function to find the longest common prefix in the list of strings.\n    '''\n    if len(strs) == 0:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        if strs[0] == strs[1]:\n            return strs[0]\n        else:\n            return ''\n    prefix = ''\n    for i in range(len(strs[0])):\n        for j in range(1, len(strs)):\n            if i == len(strs[j]) or strs[0][i]!= strs[j][i]:\n                return prefix\n        prefix += strs[0][i]\n    return prefix\ndef find_longest_common_prefix_5(strs):\n    if len(strs) == 0:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        if strs[0] == strs[1]:\n            return strs[0]\n        else:\n            return ''\n    for i in range(len(strs[0])):\n        prefix = strs[0][:i+1]\n        for j in range(1, len(strs)):\n            if i == len(strs[j]) or strs[0][i]!= strs[j][i]:\n                return prefix\n    return prefix\ndef find_longest_common_prefix_6(strs):\n    '''\n    The input is defined as a list of strings. Write a function to find the longest common prefix in the list of strings.\n    '''\n    if len(strs) == 0:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        if strs[0] == strs[1]:\n            return strs[0]\n        else:\n            return ''\n    for i in range(len(strs[0])):\n        prefix = strs[0][:i+1]\n        for j in range(1, len(strs)):\n            if i == len(strs[j]) or strs[0][i]!= strs[j][i]:\n                return prefix\n    return prefix\ndef find_longest_common_prefix_7(strs):\n    '''\n    The input is defined as a list of strings. Write a function to find the longest common prefix in the list of strings.\n    '''\n    if len(strs) == 0:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        if strs[0] == strs[1]:\n            return strs[0]\n        else:\n            return ''\n    for i in range(len(strs[0])):\n        prefix = strs[0][:i+1]\n        for j in range(1, len(strs)):\n            if i == len(strs[j]) or strs[0][i]!= strs[j][i]:\n                return prefix\n    return prefix\ndef is_substring(str1, str2):\n    '''\n    The input is defined as two strings. Write a function to determine whether the string str1 is a substring of str2.\n    '''\n    return str1 in str2\ndef is_substring_2(str1, str2):\n    '''\n    The input is defined as two strings. Write a function to determine whether the string str1 is a substring of str2.\n    '''\n    if len(str1) == 0:\n        return True\n    if len(str2) == 0:\n        return False\n    if len(str1) > len(str2):\n        return False\n    for i in range(len(str2)):\n        if str1 == str2[i:i+len(str1)]:\n            return True\n    return False\ndef is_substring_3(str1, str2):\n    '''\n    The input is defined as two strings. Write a function to determine whether the string str1 is a substring of str2.\n    '''\n    if len(str1) == 0:\n        return True\n    if len(str2) == 0:\n        return False\n    if len(str1) > len(str2):\n        return False\n    return str2.find(str1) >= 0\ndef is_substring_4(str1, str2):\n    '''\n    The input is defined as two strings. Write a function to determine whether the string str1 is a substring of str2.\n    '''\n    if len(str1) == 0:\n        return True\n    if len(str2) == 0:\n        return False\n    if len(str1) > len(str2):\n        return False\n    return str2.find(str1)!= -1\ndef is_substring_5(str1, str2):\n    '''\n    The input is defined as two strings. Write a function to determine whether the string str1 is a substring of str2.\n    '''\n    if len(str1) == 0:\n        return True\n    if len(str2) == 0:\n        return False\n    if len(str1) > len(str2):\n        return False\n    return str2.find(str1)!= -1\ndef is_substring_6(str1, str2):\n    '''"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i,n1 in enumerate(nums1):\n        for j,n2 in enumerate(nums2):\n            if n1 == n2 and i!=j:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    hashmap = {}\n    for i in xrange(len(nums1)):\n        if nums1[i] in hashmap:\n            hashmap[nums1[i]] += 1\n        else:\n            hashmap[nums1[i]] = 1\n    count = 0\n    for i in xrange(len(nums2)):\n        if nums2[i] in hashmap:\n            count += hashmap[nums2[i]]\n    return count\ndef rotate_string(s, k):\n    '''\n    Given a string s and a number k, write a function to return the smallest substring in s that contains k unique characters.\n    For example, given \"abcabc\", and k = 4, your function should return \"abc\", as the output contains 4 characters.\n    '''\n    if k > len(s):\n        return s\n    index1 = 0\n    index2 = 0\n    hashmap = {}\n    hashmap2 = {}\n    while index2 < len(s):\n        if s[index2] not in hashmap:\n            hashmap[s[index2]] = 1\n        else:\n            hashmap[s[index2]] += 1\n        if len(hashmap) <= k:\n            index2 += 1\n        else:\n            while len(hashmap) > k:\n                if s[index1] in hashmap2:\n                    hashmap2[s[index1]] -= 1\n                    if hashmap2[s[index1]] == 0:\n                        del hashmap2[s[index1]]\n                else:\n                    hashmap2[s[index1]] = 0\n                if hashmap2[s[index1]] == 0:\n                    del hashmap2[s[index1]]\n                hashmap[s[index1]] -= 1\n                index1 += 1\n    return s[index1:index2+1]\ndef set_bit(n, index):\n    return n | (1<<index)\ndef get_bit(n, index):\n    return n & (1<<index)\ndef sum_of_bits(n):\n    ans = 0\n    while n > 0:\n        ans += n & 1\n        n >>= 1\n    return ans\ndef reverse_bits(n):\n    ans = 0\n    for i in xrange(32):\n        ans += n & 1\n        n >>= 1\n    return ans\ndef find_missing_number(nums):\n    '''\n    Given a list of numbers 1 to N, find the missing number.\n    For example:\n    Input: [4, 3, 1, 2, 8, 7, 6, 5, 9]\n    Output: 9\n    '''\n    hashmap = {}\n    ans = 0\n    for i in xrange(len(nums)):\n        if nums[i] not in hashmap:\n            hashmap[nums[i]] = 1\n        else:\n            hashmap[nums[i]] += 1\n    for i in xrange(len(nums)):\n        if nums[i] not in hashmap:\n            ans = nums[i]\n        else:\n            hashmap[nums[i]] -= 1\n    return ans\ndef rotate_left(nums, k):\n    '''\n    Given a list of numbers, return the list rotated k times to the left.\n    For example:\n    Input: [1, 2, 3, 4, 5, 6, 7, 8, 9], 2\n    Output: [9, 1, 2, 3, 4, 5, 6, 7, 8]\n    '''\n    if len(nums) == 0:\n        return nums\n    if k == 0:\n        return nums\n    k %= len(nums)\n    return nums[-k:] + nums[:-k]\ndef find_missing_numbers(nums):\n    '''\n    Given a list of integers, find the indices for all missing numbers.\n    For example:\n    Input: [3, 0, 1]\n    Output: [2, 4]\n    '''\n    ans = []\n    hashmap = {}\n    for i in xrange(len(nums)):\n        if nums[i] not in hashmap:\n            hashmap[nums[i]] = i\n        else:\n            ans.append(i)\n            ans.append(hashmap[nums[i]])\n    return ans\ndef add_binary(a, b):\n    if len(a) > len(b):\n        return add_binary(b, a)\n    return add_binary_helper(a, b, 0)\ndef add_binary_helper(a, b, carry):\n    if len(a) == 0:\n        return b, carry\n    if len(b) == 0:\n        return a, carry\n    if a[-1] == b[-1]:\n        return add_binary_helper(a[:-1], b[:-1], 0)\n    else:\n        return add_binary_helper(a[:-1], b[:-1], 1)\ndef find_factors(n):\n    '''\n    Given a number, find all its factors.\n    For example:\n    Input: 25\n    Output: [5, 5]\n    '''\n    ans = []\n    if n % 2 == 0:\n        ans.append(2)\n        while n % 2 == 0:\n            n /= 2\n    for i in xrange(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            ans.append(i)\n            while n % i == 0:\n                n /= i\n    if n > 2:\n        ans.append(n)\n    return ans\ndef is_subsequence(s, t):\n    '''\n    Given a string, determine if it is a subsequence of a larger string.\n    For example:\n    Input: \"abc\", \"ahbgdc\"\n    Output: True\n    '''\n    if len(s) == 0:\n        return True\n    if len(t) == 0:\n        return False\n    s_idx = 0\n    t_idx = 0\n    while s_idx < len(s) and t_idx < len(t):\n        if s[s_idx] == t[t_idx]:\n            s_idx += 1\n            t_idx += 1\n        else:\n            t_idx += 1\n    return s_idx == len(s)\ndef find_duplicates(nums):\n    '''\n    Given a list of numbers, find all duplicates.\n    For example:\n    Input: [1, 4, 4, 3, 5, 5, 2, 1]\n    Output: [4, 5]\n    '''\n    ans = []\n    hashmap = {}\n    for i in xrange(len(nums)):\n        if nums[i] not in hashmap:\n            hashmap[nums[i]] = 1\n        else:\n            ans.append(nums[i])\n    return ans\ndef sort_numbers(nums):\n    '''\n    Given a list of numbers, sort them in ascending order.\n    For example:\n    Input: [1, 4, 3, 2, 5]\n    Output: [1, 2, 3, 4, 5]\n    '''\n    for i in xrange(len(nums)):\n        for j in xrange(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\ndef is_palindrome(s):\n    '''\n    Given a string, determine if it is a palindrome.\n    For example:\n    Input: \"aba\"\n    Output: True\n    '''\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if s[0] == s[-1]:\n        return is_palindrome(s[1:-1])\n    return False\ndef is_valid_palindrome(s, i, j):\n    '''\n    Given a string and two indices, determine if the substring starting at i and ending at j is a palindrome.\n    For example:\n    Input: \"abcba\", 1, 2\n    Output: True\n    '''\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    for index, num in enumerate(nums1):\n        if num!= nums2[index]:\n            return index\n    return len(nums1)\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    total = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            total += 1\n    return total\ndef num_of_sorted_arrays(arrays):\n    '''\n    Given a list of arrays of distinct integers, determine the number of sorted arrays that can be created from the arrays\n    '''\n    total = 0\n    for array in arrays:\n        if is_sorted(array):\n            total += 1\n    return total\ndef is_sorted(array):\n    '''\n    Given an array of integers, determine whether the array is sorted in ascending order.\n    '''\n    for i in range(1, len(array)):\n        if array[i] < array[i-1]:\n            return False\n    return True\ndef count_total_ways(n):\n    '''\n    There are a total of n! ways to partition n elements into two subsets. For example, if n = 4,\n    there are 2**4 = 16 ways to partition them into two subsets.\n    The order of the subsets is not important. You can use the same element more than once\n    '''\n    total = 1\n    for i in range(1, n+1):\n        total *= i\n    return total\ndef string_to_integer_list(s):\n    '''\n    Given a string, we'll say that the front is the first 3 chars of the string. If the string length is less than 3,\n    the front is whatever is there. Return a list of ints.\n    '''\n    if len(s) >= 3:\n        front = s[0:3]\n    else:\n        front = s\n    return [int(front)] + string_to_integer_list(s[3:])\ndef integer_to_string(arr):\n    '''\n    Given a list of ints, return a string.\n    '''\n    if len(arr) == 0:\n        return ''\n    else:\n        return str(arr[0]) + integer_to_string(arr[1:])\ndef base_change(b1, b2):\n    '''\n    We can change any base from base 10 to any other base. Given the start and the end base, return the sum of their\n    base 10 values.\n    '''\n    if b1 == 10:\n        return b2\n    elif b2 == 10:\n        return b1\n    else:\n        return (base_change(b1, b2-1) + b1)\ndef is_sum_of_squares(n):\n    '''\n    Given a number n, return true if it is the sum of two squares, otherwise return false. A number n is said to\n    be the sum of two squares if n = a2 + b2, where a2 and b2 are integers and a2, b2 >= 0.\n    '''\n    sqrt_n = int(n ** 0.5)\n    sqrt_n2 = sqrt_n ** 2\n    if sqrt_n2 == n:\n        return True\n    sqrt_n2_2 = sqrt_n2 + sqrt_n2\n    if sqrt_n2_2 == n:\n        return True\n    return False\ndef is_valid_grid(rows, cols, grid):\n    '''\n    Given the number of rows, columns, and grid, return true if the grid is valid. A grid is valid if each row\n    and each column is valid.\n    '''\n    if rows <= 0 or cols <= 0:\n        return False\n    else:\n        for row in grid:\n            if len(row)!= cols:\n                return False\n        return True\ndef knapsack_without_repetition(n, items, w):\n    '''\n    You are given a knapsack with a capacity of w. Given a list of items, where each item has a weight and value,\n    write a function that returns the maximum value that can be stored in the knapsack.\n    '''\n    #max_value = [[0 for j in range(w+1)] for i in range(n+1)]\n    max_value = [[0 for j in range(w+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, w+1):\n            if items[i-1][0] > j:\n                max_value[i][j] = max_value[i-1][j]\n            else:\n                max_value[i][j] = max(max_value[i-1][j], max_value[i-1][j-items[i-1][0]]+items[i-1][1])\n    return max_value[n][w]\ndef knapsack_with_repetition(n, items, w):\n    '''\n    Given a knapsack with a capacity of w. Given a list of items, where each item has a weight and value,\n    write a function that returns the maximum value that can be stored in the knapsack.\n    '''\n    #max_value = [[0 for j in range(w+1)] for i in range(n+1)]\n    max_value = [[0 for j in range(w+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, w+1):\n            if items[i-1][0] > j:\n                max_value[i][j] = max_value[i-1][j]\n            else:\n                max_value[i][j] = max(max_value[i-1][j], max_value[i-1][j-items[i-1][0]]+items[i-1][1])\n    return max_value[n][w]\ndef knapsack_with_repetition_with_counts(n, items, w):\n    '''\n    Given a knapsack with a capacity of w. Given a list of items, where each item has a weight and value,\n    write a function that returns the maximum value that can be stored in the knapsack.\n    '''\n    #max_value = [[0 for j in range(w+1)] for i in range(n+1)]\n    max_value = [[0 for j in range(w+1)] for i in range(n+1)]\n    counts = [[0 for j in range(w+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, w+1):\n            if items[i-1][0] > j:\n                max_value[i][j] = max_value[i-1][j]\n                counts[i][j] = counts[i-1][j]\n            else:\n                max_value[i][j] = max(max_value[i-1][j], max_value[i-1][j-items[i-1][0]]+items[i-1][1])\n                counts[i][j] = counts[i-1][j-items[i-1][0]]\n                if max_value[i-1][j] == max_value[i-1][j-items[i-1][0]] + items[i-1][1]:\n                    counts[i][j] += 1\n    return (max_value[n][w], counts[n][w])\ndef longest_increasing_subsequence(arr):\n    '''\n    Given a list of integers, write a function that returns the longest increasing subsequence in the list.\n    The subsequence does not necessarily have to be contiguous.\n    '''\n    n = len(arr)\n    max_sequence_lengths = [[0 for j in range(n)] for i in range(n)]\n    longest_sequence = []\n    for i in range(n):\n        max_sequence_lengths[i][i] = 1\n        longest_sequence.append(arr[i])\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if arr[i] < arr[j] and max_sequence_lengths[i+1][j-1] + 1 > max_sequence_lengths[i][j]:\n                max_sequence_lengths[i][j] = max_sequence"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    def helper(x,y):\n        i = 0\n        while i < len(x):\n            if x[i]!= y[i]:\n                return False\n            i += 1\n        return True\n    return sum([helper(x,y) for x,y in zip(nums1,nums2)])\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    #start with a base\n    num = base\n    for i in range(0, power):\n        num = num * base\n        #print(num)\n        power_sum += num\n        #remove the rightmost base\n        num = num // base\n    return power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = int(base)\n    power = int(power)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power <= 0:\n        return 0\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert isinstance(base, int)\n    assert isinstance(power, int)\n    if power < 0:\n        return None\n    result = 0\n    for i in str(base ** power):\n        result += int(i)\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i)**power for i in str(base)])\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(x)**power for x in str(base))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # base = int(input(\"Enter a number:\"))\n    # power = int(input(\"Enter a power:\"))\n    total = 0\n    while power > 0:\n        total += base\n        power -= 1\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(map(lambda x: int(x)**power, str(base)))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(digit)**power for digit in str(base)])\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = int(base)\n    power = int(power)\n    total = 0\n    while power > 0:\n        total += (base ** power) % 10\n        power -= 1\n    return total\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # regex to extract the words within the quotation marks\n    #quotation_regex = re.compile(r'\"[^\"\\n]*\"|\\'[^\\'\\n]*\\'')\n    #quotation_regex = re.compile(r'\"[^\"\\n]*\"|\\'[^\\'\\n]*\\'')\n    quotation_regex = re.compile(r'[^\"\\']+')\n    text2 = text1\n    while True:\n        quotation = quotation_regex.findall(text2)\n        if quotation:\n            text2 = quotation_regex.sub('', text2, 1)\n        else:\n            break\n    return quotation\n    \n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1\n    #find all the double quotes\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    quotes = pattern.findall(text)\n    #find all the double quotes\n    pattern = re.compile(r'\\'(.*?)\\'')\n    quotes = pattern.findall(text)\n    #find all the values between the quotes\n    values = []\n    #for each value in quotes\n    for quote in quotes:\n        #find all the values between the quotes\n        pattern = re.compile(r'\\\"(.*?)\\\"')\n        value = pattern.findall(quote)\n        values.append(value)\n    return values\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # v = re.search(\"\\\"(.*)\\\"\", text1)\n    # print v.group(1)\n    if re.search('\"',text1):\n        return re.findall('\"[^\"]*\"',text1)\n    return re.findall('\"[^\"]*\"',text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text1 = \"You can't handle the truth of numbers so well you should stop being a lazy ass and go with numbers.\"\n    #text1 = \"The closest thing to Heaven is the closest way to heaven\"\n    text1 = text1.split()\n    text1 = [re.findall(\"\\\"[^\\\"]*\\\"\", word) for word in text1]\n    text1 = [word[0].strip(\"\\\"\") for word in text1]\n    #print(text1)\n    print(text1)\n    '''\n    print('Quotation:')\n    for word in text1:\n        if len(word) == 2:\n            print(word)\n    print(\"\\n\")\n    print('Quotation ends here\\n')\n    '''\ndef remove_all_quotation(text):\n    text = text.split()\n    text = [re.findall(\"\\\"[^\\\"]*\\\"\", word) for word in text]\n    text = [word[0].strip(\"\\\"\") for word in text]\n    return text\ndef extract_contractions(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text = \"I can't believe that this book is impossible to find.\"\n    text = text.split()\n    text = [re.findall(\"\\'[^\\']*\\'\", word) for word in text]\n    text = [word[0].strip(\"\\'\") for word in text]\n    #print(text)\n    return text\ndef remove_all_contractions(text):\n    text = text.split()\n    text = [re.findall(\"\\'[^\\']*\\'\", word) for word in text]\n    text = [word[0].strip(\"\\'\") for word in text]\n    return text\ndef extract_single_quotes(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text.split()\n    text = [re.findall(\"\\'[^\\']*\\'\", word) for word in text]\n    text = [word[0].strip(\"\\'\") for word in text]\n    #print(text)\n    return text\ndef remove_all_single_quotes(text):\n    text = text.split()\n    text = [re.findall(\"\\'[^\\']*\\'\", word) for word in text]\n    text = [word[0].strip(\"\\'\") for word in text]\n    return text\ndef extract_urls(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text.split()\n    text = [re.findall(\"http[^\\s]*\", word) for word in text]\n    text = [word[0].strip(\"http\") for word in text]\n    #print(text)\n    return text\ndef remove_all_urls(text):\n    text = text.split()\n    text = [re.findall(\"http[^\\s]*\", word) for word in text]\n    text = [word[0].strip(\"http\") for word in text]\n    return text\ndef extract_numbers(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text.split()\n    text = [re.findall(\"\\d+\", word) for word in text]\n    text = [word[0] for word in text]\n    #print(text)\n    return text\ndef remove_all_numbers(text):\n    text = text.split()\n    text = [re.findall(\"\\d+\", word) for word in text]\n    text = [word[0] for word in text]\n    return text\ndef extract_words(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text.split()\n    text = [re.findall(\"\\w+\", word) for word in text]\n    text = [word[0] for word in text]\n    #print(text)\n    return text\ndef remove_all_words(text):\n    text = text.split()\n    text = [re.findall(\"\\w+\", word) for word in text]\n    text = [word[0] for word in text]\n    return text\ndef extract_long_words(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text.split()\n    text = [re.findall(\"\\w{3,}\", word) for word in text]\n    text = [word[0] for word in text]\n    #print(text)\n    return text\ndef remove_all_long_words(text):\n    text = text.split()\n    text = [re.findall(\"\\w{3,}\", word) for word in text]\n    text = [word[0] for word in text]\n    return text\ndef remove_punctuation_marks(text):\n    text = text.split()\n    text = [re.findall(\"[^\\s]\", word) for word in text]\n    text = [word[0] for word in text]\n    return text\ndef remove_numerics(text):\n    text = text.split()\n    text = [re.findall(\"[^\\d]\", word) for word in text]\n    text = [word[0] for word in text]\n    return text\ndef remove_space(text):\n    text = text.split()\n    text = [re.findall(\"\\s\", word) for word in text]\n    text = [word[0] for word in text]\n    return text\ndef extract_capital_words(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text.split()\n    text = [re.findall(\"[A-Z][^A-Z]*\", word) for word in text]\n    text = [word[0] for word in text]\n    #print(text)\n    return text\ndef extract_small_words(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text.split()\n    text = [re.findall(\"[a-z][^a-z]*\", word) for word in text]\n    text = [word[0] for word in text]\n    #print(text)\n    return text\ndef extract_last_words(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text.split()\n    text = [re.findall(\"[^\\s]*[\\w]+$\", word) for word in text]\n    text = [word[0] for word in text]\n    #print(text)\n    return text\ndef extract_numerics_words(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text.split()\n    text = [re.findall(\"\\d+\", word) for word in text]\n    text = [word[0] for word in text]\n    #print(text)\n    return text\ndef remove_stop_words(text):\n    stopwords = ['i','me','my','myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself','she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through'"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\"([^\"]*)\"',text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    patt = re.compile(r'\\\"(.*?)\\\"')\n    quotation = re.findall(patt, text1)\n    print(quotation)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    res=[]\n    regex = r'\"([^\"]*)\"'\n    l = re.findall(regex,text1)\n    for i in l:\n        res.append(i)\n    return res\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1=text1.replace('?','\"? \"')\n    text1=text1.replace('!','\"! \"')\n    text1=text1.replace('.','\". ')\n    text1=text1.replace(',','\",\"')\n    text1=text1.replace('-','\"- ')\n    #print text1\n    if '\"' in text1:\n        index=text1.index('\"')\n        text1=text1[:index]+' \"'+text1[index+1:]\n    #print text1\n    text1=re.sub('\\s\"\\s','\"\"',text1)\n    text1=text1.split('\"')\n    text1.pop(0)\n    text1.pop(-1)\n    #print text1\n    text1=[s.strip('\"\"') for s in text1]\n    #print text1\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\\\"(.*?)\\\"', text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    x = re.search('\\\"(.*)\\\"',text1)\n    print x.group(0)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # test_tup = tuple(map(int, test_tup))\n    n = len(test_tup)\n    out = ()\n    for i in range(n-1):\n        out += (test_tup[i],)\n    out += (test_tup[n-1],)\n    return out\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    a = ()\n    for i in test_tup:\n        a = a + (i,)\n    print(a)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    for index in range(len(test_tup)):\n        test_tup[index] *= test_tup[index+1]\n    return test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_list = list(test_tup)\n    return tuple(t_list[i] * t_list[i+1] for i in range(len(t_list) - 1))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i * j for i, j in zip(test_tup, test_tup[1:])])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([t_i * t_j for t_i, t_j in zip(test_tup[:-1], test_tup[1:])])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    tup = test_tup\n    if tup:\n        return (tup[0] * tup[1],) + multiply_elements(tup[1:])\n    return ()\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    return tuple(i*j for i, j in zip(test_tup[:-1], test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    elements = tuple(map(lambda x: x * 2, test_tup))\n    return elements\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda x,y: x*y, test_tup[:-1], test_tup[1:]))\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1) == len(lst2)\n    return [x + y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1)==len(lst2)\n    sum_list = []\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i]+lst2[i])\n    return sum_list\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    if len(lst1)!= len(lst2):\n        return \"Inputs not of equal length\"\n    \n    return [lst1[i] + lst2[i] for i in range(len(lst1))]\n    \n    "
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(len(lst1)):\n        lst1[i]+=lst2[i]\n    return lst1\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return False\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1)==len(lst2)\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    summation = []\n    i = 0\n    while i < len(lst1):\n        summation.append(lst1[i] + lst2[i])\n        i += 1\n    return summation\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for i,k in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = list(set(nums))\n    # print(nums)\n    if len(nums) < 2:\n        return nums\n    nums.sort()\n    # print(nums)\n    i = 1\n    while i < len(nums):\n        if nums[i-1] == nums[i]:\n            nums.pop(i)\n        else:\n            i += 1\n    # print(nums)\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    i = 0\n    while i < len(nums):\n        if i == 0 or nums[i]!= nums[i-1]:\n            result.append(nums[i])\n        i += 1\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        yield key, len(list(group))\ndef consecutive_duplicates2(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    for i, (k, g) in enumerate(groupby(nums)):\n        if i == 0:\n            yield k, len(list(g))\n        elif k!= nums[i-1]:\n            yield k, len(list(g))\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, v in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    for k, g in groupby(enumerate(nums), lambda x:x[0] - x[1]):\n        l = map(lambda x:x[1]+1, g)\n        res.append(l[0])\n    return res\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, _ in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # result = []\n    # for i in range(len(nums)):\n    #     if i == 0:\n    #         result.append(nums[i])\n    #     elif nums[i] == nums[i-1]:\n    #         continue\n    #     else:\n    #         result.append(nums[i])\n    # return result\n    return list(k for i,k in groupby(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n        else:\n            result.append(num)\n            result = result[1:]\n    return result\ndef find_the_duplicate(nums):\n    '''\n    Write a function to find the duplicate number in a list of integers\n    '''\n    if nums[0] == nums[1]:\n        return nums[0]\n    else:\n        return consecutive_duplicates(nums)[0]\ndef partition(nums, left, right):\n    '''\n    Write a function to partition a list around a value x.\n    The partion function should be similar to the partition function in the quick sort algorithm\n    '''\n    left = 0\n    pivot = nums[right]\n    for i in range(left, right):\n        if nums[i] <= pivot:\n            nums[left], nums[i] = nums[i], nums[left]\n            left += 1\n    nums[left], nums[right] = nums[right], nums[left]\n    return left\ndef quick_sort(nums):\n    '''\n    Write a function to sort a list of integers.\n    The partion function should be similar to the partition function in the quick sort algorithm\n    '''\n    def _quick_sort(nums, left, right):\n        if left < right:\n            pivot = partition(nums, left, right)\n            _quick_sort(nums, left, pivot - 1)\n            _quick_sort(nums, pivot + 1, right)\n    _quick_sort(nums, 0, len(nums) - 1)\ndef find_missing_number(nums):\n    '''\n    Write a function to find the missing number in an unsorted array.\n    Assume all array elements are in the range from 1 to n.\n    '''\n    i = 0\n    while i < len(nums):\n        j = nums[i] - 1\n        if nums[i]!= nums[j]:\n            nums[i], nums[j] = nums[j], nums[i]\n        else:\n            i += 1\n    for i in range(len(nums)):\n        if nums[i]!= i + 1:\n            return i + 1\n    return len(nums) + 1\ndef find_duplicates(nums):\n    '''\n    Write a function that takes in an unsorted array of integers and returns an array of the same length,\n    where each element in the output array is the number of times that the corresponding element appears in the original array.\n    '''\n    result = []\n    for num in nums:\n        if nums[num] == num:\n            result.append(num)\n    return result\ndef merge(nums1, nums2):\n    '''\n    Write a function that merges two sorted arrays into one sorted array.\n    Assume that each array is sorted and the elements are distinct\n    '''\n    i, j = 0, 0\n    sorted_nums = []\n    while i < len(nums1) or j < len(nums2):\n        if i == len(nums1):\n            sorted_nums.append(nums2[j])\n            j += 1\n        elif j == len(nums2):\n            sorted_nums.append(nums1[i])\n            i += 1\n        elif nums1[i] < nums2[j]:\n            sorted_nums.append(nums1[i])\n            i += 1\n        else:\n            sorted_nums.append(nums2[j])\n            j += 1\n    return sorted_nums\ndef search(nums, target):\n    '''\n    Write a function that takes in a sorted array of integers and a target integer and returns the index of the target integer if it is present in the array.\n    If it is not present, return the index where it would be if it were inserted in order.\n    '''\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            return mid\n        elif target < nums[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\ndef three_sum(nums):\n    '''\n    Write a function that takes in a sorted array of integers and returns a list of lists of three integers,\n    where each list of three integers is the three integers such that the sum of the three integers is 0.\n    Each number in the array should only be used once and numbers should be returned in ascending order.\n    '''\n    results = []\n    i = 0\n    while i < len(nums):\n        j = i + 1\n        while j < len(nums):\n            k = j + 1\n            while k < len(nums):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    results.append([nums[i], nums[j], nums[k]])\n                k += 1\n            j += 1\n        i += 1\n    return results\ndef is_unique(s):\n    '''\n    Write a function to check if all the characters in a string are unique.\n    '''\n    result = True\n    for i in range(len(s)):\n        if s.count(s[i]) > 1:\n            result = False\n    return result\ndef reverse_words(s):\n    '''\n    Write a function to reverse words in a string.\n    '''\n    i, j = 0, len(s) - 1\n    while i < j:\n        s[i], s[j] = s[j], s[i]\n        i += 1\n        j -= 1\n    left = 0\n    right = 0\n    while left < len(s):\n        right = left\n        while right < len(s) and s[right]!='':\n            right += 1\n        reverse(s, left, right - 1)\n        left = right + 1\ndef reverse(s, left, right):\n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left += 1\n        right -= 1\ndef is_anagram(s, t):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether the two strings are anagrams.\n    '''\n    if len(s)!= len(t):\n        return False\n    for i in range(len(s)):\n        if s[i] in t:\n            t = t.replace(s[i], '', 1)\n        else:\n            return False\n    return True\ndef is_permutation(s, t):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether the two strings are permutations of each other.\n    Assume that the strings are the same length\n    '''\n    if len(s)!= len(t):\n        return False\n    return sorted(s) == sorted(t)\ndef subsets(nums):\n    '''\n    Write a function to find all subsets of a set.\n    '''\n    result = [[]]\n    for num in nums:\n        result = result + [subset + [num] for subset in result]\n    return result\ndef binary_search(nums, target):\n    '''\n    Write a function that takes in a sorted array of integers and a target integer and returns the index of the target integer if it is present in the array.\n    If it is not present, return the index where it would be if it were inserted in order.\n    '''\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            return mid\n        elif target < nums[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\ndef valid_subsets(nums):\n    '''\n    Write a function that takes in a sorted array of integers and returns a list of lists,\n    where each list consists of all the elements in the array that are smaller than the element at the index of the list.\n    '''\n    results = []\n    for i i"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            count += 1\n            if count == 1:\n                nums.pop(i)\n    return nums\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Use the fact that for a cone, the lateral surface area of a cone is half the area of the base plus the area of the\n    # circle that is inscribed in the base.\n    a = math.pi * (r**2)\n    b = math.pi * (r**2)\n    s = (a/2) + b\n    return s\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    # Use the fact that for a cylinder, the lateral surface area of a cylinder is 2*pi*r*(r+h)\n    s = 2 * math.pi * r * (r + h)\n    return s\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    # Use the fact that for a sphere, the lateral surface area of a sphere is 4*pi*(r**2)\n    s = 4 * math.pi * (r**2)\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r = float(r)\n    h = float(h)\n    a = math.pi * (r**2)\n    s = a * h\n    print(s)\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (3.14159265359)*(r**2)*(math.sin(math.pi*(r**2)/(h**2)))\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and height h.\n    '''\n    return 3.14159265359*(r**2)*h\ndef box_volume(l,w,h):\n    '''\n    Write a function to find the volume of a box given length l, width w and height h.\n    '''\n    return l*w*h\ndef get_volume(dim):\n    '''\n    Write a function to find the volume of a box given the dimension of the box.\n    '''\n    l=float(input(\"Enter length of box:\"))\n    w=float(input(\"Enter width of box:\"))\n    h=float(input(\"Enter height of box:\"))\n    if dim=='l':\n        return l*w*h\n    elif dim=='w':\n        return l*w*h\n    else:\n        return l*w*h\ndef get_angle(a,b,c):\n    '''\n    Write a function to find the angle between three sides of a triangle.\n    '''\n    if a==b==c:\n        return \"Equilateral\"\n    elif a==b or a==c or b==c:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\"\ndef get_tip(a):\n    '''\n    Write a function to find the tip of a die given the number on the die.\n    '''\n    t=int(input(\"Enter number of faces of die:\"))\n    s=float(input(\"Enter a side length:\"))\n    tip=t*s\n    return tip\ndef get_slope(a,b):\n    '''\n    Write a function to find the slope of a line given the two endpoints.\n    '''\n    return ((b[1]-a[1])/(b[0]-a[0]))\ndef get_triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle given three sides.\n    '''\n    s=(a+b+c)/2\n    area=(s*(s-a)*(s-b)*(s-c))**0.5\n    return area\ndef get_trapezoid_area(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid given three sides and the height.\n    '''\n    area=0.5*((a+b)*h)\n    return area\ndef get_rect_area(l,b):\n    '''\n    Write a function to find the area of a rectangle given length and breadth.\n    '''\n    area=l*b\n    return area\ndef get_circle_area(r):\n    '''\n    Write a function to find the area of a circle given radius.\n    '''\n    area=3.14159265359*(r**2)\n    return area\ndef get_cube_area(l):\n    '''\n    Write a function to find the area of a cube given length.\n    '''\n    area=6*l**2\n    return area\ndef get_sphere_area(r):\n    '''\n    Write a function to find the area of a sphere given radius.\n    '''\n    area=4*(3.14159265359)*(r**2)\n    return area\ndef get_sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere given radius.\n    '''\n    area=4*(3.14159265359)*(r**3)\n    return area\ndef get_rect_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle given length and breadth.\n    '''\n    perimeter=2*(l+b)\n    return perimeter\ndef get_circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle given radius.\n    '''\n    circumference=2*(3.14159265359)*r\n    return circumference\ndef get_cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius and height.\n    '''\n    volume=(3.14159265359)*(r**2)*h\n    return volume\ndef get_cylinder_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given radius and height.\n    '''\n    area=2*(3.14159265359)*(r**2)*h\n    return area\ndef get_sphere_radius(area):\n    '''\n    Write a function to find the radius of a sphere given the area of the sphere.\n    '''\n    r=((area/3.14159265359)**0.5)\n    return r\ndef get_sphere_surface_area(r):\n    '''\n    Write a function to find the surface area of a sphere given radius.\n    '''\n    area=4*(3.14159265359)*(r**2)\n    return area\ndef get_box_volume(l,w,h):\n    '''\n    Write a function to find the volume of a box given length, width and height.\n    '''\n    return l*w*h\ndef get_box_surface_area(l,w,h):\n    '''\n    Write a function to find the surface area of a box given length, width and height.\n    '''\n    area=2*(l*w)+(w*h)+(l*h)\n    return area\ndef get_sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere given radius.\n    '''\n    volume=((4/3)*(3.14159265359)*(r**3))\n    return volume\ndef get_triangle_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle given three sides.\n    '''\n    perimeter=(a+b+c)\n    return perimeter\ndef get_triangle_side(a,b,c):\n    '''\n    Write a function to find the side of a triangle given three sides.\n    '''\n    s=(a+b+c)/2\n    return s\ndef get_triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle given three sides.\n    '''\n    area=(s*(s-a)*(s-b)*(s-c))**0.5\n    return area\ndef get_parallelogram_area(b,h):\n    '''\n    Write a function to find the area of a parallelogram given base and height.\n    '''\n    area=b*h\n    return area\ndef get_equilateral_triangle_area(r):\n    '''\n    Write a function to find the area of an equilateral triangle given side length.\n    '''\n    area=(3.14159265359)*(r**2)\n    return area\ndef get_right_triangle_area(b,h):\n    '''\n    Write a function to find the area of a right triangle given base and height.\n    '''\n    area=b*h\n    return area\ndef get_rhombus_area(b,h):\n    '''\n    Write a function to find the area of a rhombus given base and height.\n    '''\n    area=(b*h)/2\n    return area\ndef get_rhombus_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a rhombus given base and height.\n    '''\n    perimeter=(b+h)*2\n    return perimeter\ndef get_rhombus_diagonal(b,h):\n    '''\n    Write a function to find the diagonal of a rhombus given base and height.\n    '''\n    diagonal=(b**2+h**2)**0.5\n    return diagonal\ndef get_rhombus_hypotenuse(b,h):\n    '''\n    Write a function to find the hypotenuse of a rhombus given base and height.\n    '''\n    hypotenuse=(b**2+h**2)**0.5\n    retur"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r**2*h/3\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #return math.pi*r**2 + math.pi*r*h + math.pi*(r**2)*math.sin(math.pi/2)\n    return math.pi*r**2 + math.pi*r*h + math.pi*(r**2)*math.sin(math.pi/2)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>=0 and r<=h:\n        return math.pi*r*(r+math.sqrt(r*r+h*h))\n    else:\n        return \"Invalid values\"\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = math.pi * r**2\n    b = math.pi * r**2 + 2 * math.pi * r * h\n    c = math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2\n    d = math.pi * r**2 + 2 * math.pi * r * h + 4 * math.pi * r**2\n    e = math.pi * r**2 + 2 * math.pi * r * h + 6 * math.pi * r**2\n    f = math.pi * r**2 + 2 * math.pi * r * h + 8 * math.pi * r**2\n    return a + b + c + d + e + f\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    L=math.pi*(r**2)+(math.pi*(r**2))*(math.tan(math.pi*h/2))\n    return L\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    # Calculate the lateral surface area of a cone\n    \n    # Calculate the lateral surface area of a cone\n    "
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2+math.pi*r*math.sqrt(h**2+r**2)\n    return s\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    s=2*math.pi*r*h+2*math.pi*r**2\n    return s\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    s=4*math.pi*r**2\n    return s\ndef perimsurface_cone(r,h):\n    '''\n    Write a function to find the perimeter surface area of a cone given radius r and the height h.\n    '''\n    p=2*math.pi*r+2*math.pi*r*math.sqrt(h**2+r**2)\n    return p\ndef perimsurface_cylinder(r,h):\n    '''\n    Write a function to find the perimeter surface area of a cylinder given radius r and the height h.\n    '''\n    p=2*math.pi*r*2+2*math.pi*r**2\n    return p\ndef perimsurface_sphere(r):\n    '''\n    Write a function to find the perimeter surface area of a sphere given radius r.\n    '''\n    p=4*math.pi*r\n    return p\ndef conssurface_cone(r,h):\n    '''\n    Write a function to find the circumference surface area of a cone given radius r and the height h.\n    '''\n    c=2*math.pi*r*math.sqrt(h**2+r**2)\n    return c\ndef conssurface_cylinder(r,h):\n    '''\n    Write a function to find the circumference surface area of a cylinder given radius r and the height h.\n    '''\n    c=2*math.pi*r*2+2*math.pi*r**2\n    return c\ndef conssurface_sphere(r):\n    '''\n    Write a function to find the circumference surface area of a sphere given radius r.\n    '''\n    c=2*math.pi*r\n    return c\ndef rimsurface_cone(r,h):\n    '''\n    Write a function to find the rim surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    return s\ndef rimsurface_cylinder(r,h):\n    '''\n    Write a function to find the rim surface area of a cylinder given radius r and the height h.\n    '''\n    s=math.pi*r*h\n    return s\ndef rimsurface_sphere(r):\n    '''\n    Write a function to find the rim surface area of a sphere given radius r.\n    '''\n    s=math.pi*r**2\n    return s\ndef topsurface_cone(r,h):\n    '''\n    Write a function to find the top surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2+math.pi*r*math.sqrt(h**2+r**2)\n    return s\ndef topsurface_cylinder(r,h):\n    '''\n    Write a function to find the top surface area of a cylinder given radius r and the height h.\n    '''\n    s=2*math.pi*r*h+2*math.pi*r**2\n    return s\ndef topsurface_sphere(r):\n    '''\n    Write a function to find the top surface area of a sphere given radius r.\n    '''\n    s=4*math.pi*r**2\n    return s\ndef bottomsurface_cone(r,h):\n    '''\n    Write a function to find the bottom surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2-math.pi*r*math.sqrt(h**2+r**2)\n    return s\ndef bottomsurface_cylinder(r,h):\n    '''\n    Write a function to find the bottom surface area of a cylinder given radius r and the height h.\n    '''\n    s=2*math.pi*r*h\n    return s\ndef bottomsurface_sphere(r):\n    '''\n    Write a function to find the bottom surface area of a sphere given radius r.\n    '''\n    s=4*math.pi*r\n    return s\ndef contop_cone(r,h):\n    '''\n    Write a function to find the top perimeter of a cone given radius r and the height h.\n    '''\n    p=2*math.pi*r*math.sqrt(h**2+r**2)\n    return p\ndef contop_cylinder(r,h):\n    '''\n    Write a function to find the top perimeter of a cylinder given radius r and the height h.\n    '''\n    p=2*math.pi*r*h\n    return p\ndef contop_sphere(r):\n    '''\n    Write a function to find the top perimeter of a sphere given radius r.\n    '''\n    p=4*math.pi*r\n    return p\ndef conbtm_cone(r,h):\n    '''\n    Write a function to find the bottom perimeter of a cone given radius r and the height h.\n    '''\n    p=2*math.pi*r*math.sqrt(h**2+r**2)\n    return p\ndef conbtm_cylinder(r,h):\n    '''\n    Write a function to find the bottom perimeter of a cylinder given radius r and the height h.\n    '''\n    p=2*math.pi*r*h\n    return p\ndef conbtm_sphere(r):\n    '''\n    Write a function to find the bottom perimeter of a sphere given radius r.\n    '''\n    p=4*math.pi*r\n    return p\ndef consbtm_cone(r,h):\n    '''\n    Write a function to find the bottom circumference of a cone given radius r and the height h.\n    '''\n    c=2*math.pi*r*math.sqrt(h**2+r**2)\n    return c\ndef consbtm_cylinder(r,h):\n    '''\n    Write a function to find the bottom circumference of a cylinder given radius r and the height h.\n    '''\n    c=2*math.pi*r*h\n    return c\ndef consbtm_sphere(r):\n    '''\n    Write a function to find the bottom circumference of a sphere given radius r.\n    '''\n    c=2*math.pi*r\n    return c\ndef contop_cylinder(r,h):\n    '''\n    Write a function to find the top perimeter of a cylinder given radius r and the height h.\n    '''\n    p=2*math.pi*r*h\n    return p\ndef contop_sphere(r):\n    '''\n    Write a function to find the top perimeter of a sphere given radius r.\n    '''\n    p=4*math.pi*r\n    return p\ndef conbtm_cylinder(r,h):\n    '''\n    Write a function to find the bottom perimeter of a cylinder given radius r and the height h.\n    '''\n    p=2*math.pi*r*h\n    return p\ndef conbtm_sphere(r):\n    '''\n    Write a function to find the bottom perimeter of a sphere given radius r.\n    '''\n    p=4*math.pi*r\n    return p\ndef conbtm_cone(r,h):\n    '''\n    Write a function to find the bottom circumference of a cone given radius r and the height h.\n    '''\n    c=2*math.pi*r*math.sqrt(h**2+r**2)\n    return c\ndef rimbtm_cylinder(r,h):\n    '''\n    Write a function to find the bottom rim of a cylinder given radius r and the height h.\n    '''\n    s=math.pi*r*h\n    return s\ndef rimbtm_sphere"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub('[\\s,\\.]','',text)\n    return new_text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    temp = re.sub(r'\\s',':',text)\n    temp = re.sub(r'\\,',':',temp)\n    temp = re.sub(r'\\.',':',temp)\n    return temp\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('\\s', ':', text)\n    text = re.sub('\\s*,', ':', text)\n    text = re.sub('\\s\\.\\s', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    s = re.sub(r'[,.]',':', text)\n    return s\n    \n    \ndef get_items(text):\n    '''\n    Write a function to remove and return any text that is not letters or numbers.\n    '''\n    s = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return s\n    \n    \ndef modify_date(text):\n    '''\n    Write a function to convert a date string into a datetime.\n    '''\n    return datetime.datetime.strptime(text, '%Y-%m-%d')\n    \n    \ndef modify_count(text):\n    '''\n    Write a function to convert a count string into an int.\n    '''\n    return int(text)\n    \n    \ndef replace_punctuation(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    return re.sub('[^0-9a-zA-Z]+','', text)\n    \n    \ndef replace_characters(text):\n    '''\n    Write a function to remove specific characters from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+', '', text)\n    \n    \ndef replace_number(text):\n    '''\n    Write a function to remove numbers from a string.\n    '''\n    return re.sub('[0-9]+', '', text)\n    \n    \ndef modify_text(text):\n    '''\n    Write a function to remove spaces, tabs, and newlines from a string.\n    '''\n    return re.sub('\\s+','', text)\n    \n    \ndef get_first_name(text):\n    '''\n    Write a function to extract the first name from a string.\n    '''\n    return re.findall('[a-zA-Z]*', text)[0]\n    \n    \ndef modify_text(text):\n    '''\n    Write a function to remove spaces, tabs, and newlines from a string.\n    '''\n    return re.sub('\\s+','', text)\n    \n    \ndef get_number_of_words(text):\n    '''\n    Write a function to extract the number of words from a string.\n    '''\n    return len(re.findall('[a-zA-Z]+', text))\n    \n    \ndef get_last_name(text):\n    '''\n    Write a function to extract the last name from a string.\n    '''\n    return re.findall('[a-zA-Z]+', text)[-1]\n    \n    \ndef find_word(text, word):\n    '''\n    Write a function to find the location of a word in a string.\n    '''\n    return re.findall(word, text)\n    \n    \ndef get_type(text):\n    '''\n    Write a function to extract the type of a word from a string.\n    '''\n    return re.findall('\\w+(?=\\s\\d)', text)[0]\n    \n    \ndef get_numbers(text):\n    '''\n    Write a function to extract all the numbers from a string.\n    '''\n    return re.findall('[0-9]+', text)\n    \n    \ndef find_number(text, number):\n    '''\n    Write a function to find the location of a number in a string.\n    '''\n    return re.findall('[0-9]+', text)[int(number)]\n    \n    \ndef find_number_in_list(text, numbers):\n    '''\n    Write a function to find the location of a number in a list of numbers.\n    '''\n    for number in numbers:\n        if number in text:\n            return number\n    return None\n    \n    \ndef get_number_at_end(text, start, end):\n    '''\n    Write a function to extract a number from a string.\n    '''\n    return re.findall('[0-9]*' + start + '[0-9]+', text)[int(end)]\n    \n    \ndef get_last_number(text):\n    '''\n    Write a function to extract the last number from a string.\n    '''\n    return re.findall('[0-9]+', text)[-1]\n    \n    \ndef format_number(number):\n    '''\n    Write a function to format a number as an integer or float.\n    '''\n    if number % 1 == 0:\n        return int(number)\n    else:\n        return float(number)\n    \n    \ndef convert_number(number):\n    '''\n    Write a function to convert a number to an integer or float.\n    '''\n    if type(number) == int:\n        return number\n    else:\n        return float(number)\n    \n    \ndef convert_string(text):\n    '''\n    Write a function to convert a string to uppercase.\n    '''\n    return text.upper()\n    \n    \ndef lowercase_string(text):\n    '''\n    Write a function to convert a string to lowercase.\n    '''\n    return text.lower()\n    \n    \ndef remove_duplicates(text):\n    '''\n    Write a function to remove duplicates from a string.\n    '''\n    return re.sub('[^0-9a-zA-Z]+','', text)\n    \n    \ndef remove_duplicate_words(text):\n    '''\n    Write a function to remove duplicates from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', text)\n    \n    \ndef get_single_quote(text):\n    '''\n    Write a function to extract a single quote from a string.\n    '''\n    return re.findall('\\'', text)[0]\n    \n    \ndef get_double_quote(text):\n    '''\n    Write a function to extract a double quote from a string.\n    '''\n    return re.findall('\"', text)[0]\n    \n    \ndef get_word_with_single_quote(text):\n    '''\n    Write a function to extract a word with a single quote from a string.\n    '''\n    return re.findall('[a-zA-Z]+\\'', text)\n    \n    \ndef get_word_with_double_quote(text):\n    '''\n    Write a function to extract a word with a double quote from a string.\n    '''\n    return re.findall('[a-zA-Z]+\\\"', text)\n    \n    \ndef get_word_with_dot(text):\n    '''\n    Write a function to extract a word with a dot from a string.\n    '''\n    return re.findall('[a-zA-Z]+\\.(?!\\'|\\\")', text)\n    \n    \ndef replace_with_dot(text):\n    '''\n    Write a function to replace a word with a dot from a string.\n    '''\n    return re.sub('\\s+', '.', text)\n    \n    \ndef remove_word(text, word):\n    '''\n    Write a function to remove a word from a string.\n    '''\n    return re.sub(word, '', text)\n    \n    \ndef remove_word_with_dot(text, word):\n    '''\n    Write a function to remove a word with a dot from a string.\n    '''\n    return re.sub(word + '\\.(?!\\'|\"|\\'\\'|\\\"\\\"|,|\\s)', '', text)\n    \n    \ndef remove_word_with_dot_if_last(text, word):\n    '''\n    Write a function to remove a word with a dot from a string.\n    '''\n    return re.sub(word + '\\.(?!\\'|\"|\\'\\'|\\\"\\\"|,|\\s)$', '', text)\n    \n    \ndef remove_words_with_dot(text, words):\n    '''\n    Write a function to remove a list of words with a dot from a string.\n    '''\n    for word in words:\n        text = re.sub(word + '\\.(?!\\'|\"|\\'\\'|\\\"\\\"|,|\\s)', '', text"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.?!]',':',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[.,]', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile('[\\s,\\.\\?\\!\\\\\\&\\s]')\n    text = pattern.sub(':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_char = re.compile('[. ]+')\n    text_space = special_char.sub('', text)\n    text_comma = text_space.replace(',', ':')\n    text_dot = text_comma.replace('.', ':')\n    text_comma_space = text_dot.replace('  ', ':')\n    return text_comma_space\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[ ][,][.]',':',text)\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    if x > A[r] or x < A[l]:\n        return -1\n    else:\n        while (r-l) >= 1:\n            mid = l + ((r-l) >> 1)\n            if A[mid] == x:\n                return mid\n            elif A[mid] < x:\n                l = mid\n            else:\n                r = mid\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first_occurrence = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n        elif A[i] > x:\n            break\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x > A[-1]:\n        return -1\n    first_occurence = -1\n    last_occurence = len(A)\n    while (last_occurence - first_occurence) > 1:\n        mid = (first_occurence + last_occurence) // 2\n        if x > A[mid]:\n            first_occurence = mid\n        else:\n            last_occurence = mid\n    if A[first_occurence] == x:\n        return first_occurence\n    else:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    L = 0\n    R = len(A)\n    while L < R:\n        mid = (L + R) // 2\n        if x == A[mid]:\n            return mid\n        elif x < A[mid]:\n            R = mid\n        elif x > A[mid]:\n            L = mid + 1\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    \n    l, r = 0, len(A)\n    while l < r:\n        m = (l+r)/2\n        if x > A[m]:\n            l = m+1\n        elif x < A[m]:\n            r = m\n        else:\n            return m\n    \n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first = -1\n    last = len(A)\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = len(A)\n    if l == 0:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    if A[0] == x:\n        return 0\n    l, r = 0, len(A)\n    while l < r:\n        m = (l + r) // 2\n        if A[m] == x:\n            return m\n        elif A[m] > x:\n            r = m\n        else:\n            l = m + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    N = len(A)\n    left, right = 0, N-1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            if mid == 0 or A[mid-1]!= A[mid]:\n                return mid\n            else:\n                right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A) - 1\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if A[mid] == x:\n            hi = mid\n        elif A[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    if A[lo] == x:\n        return lo\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    dp = []\n    for i in xrange(len(arr)):\n        dp.append([])\n        dp[i].append(arr[i])\n        dp[i].append(1)\n    \n    for i in xrange(1, len(arr)):\n        for j in xrange(i):\n            dp[i][0] += dp[j][0] * arr[i]\n            dp[i][1] += dp[j][0]\n    \n    return dp[len(arr)-1][1]\n    \ndef get_Ans(arr):\n    '''\n    Write a python function to find the number of subarray with given sum. https://www.geeksforgeeks.org/number-of-subarray-with-given-sum/\n    '''\n    s = sum_Of_Subarray_Prod(arr)\n    count = 0\n    for i in xrange(len(arr)):\n        if s - arr[i] in arr:\n            count += 1\n    return count\n    \nif __name__ == '__main__':\n    arr = [2, 4, 5, 2, 3, 1, 5, 1, 3, 1, 7]\n    print get_Ans(arr)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = [1 for i in range(len(arr))]\n    \n    for i in range(1,len(arr)):\n        for j in range(i):\n            res[i] = res[i]*(arr[j]*arr[i-j-1])\n    print res\n    return sum(res)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            lst = arr[i:j+1]\n            total += lst[0] * lst[len(lst)-1]\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    \n    # Sum of subarrays = Sum of products of subarrays\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sum += arr[j]*product\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    max_p = arr[0]\n    min_p = arr[0]\n    res = arr[0]\n    for i in range(len(arr)):\n        max_p = max(arr[i], max_p * arr[i])\n        min_p = min(arr[i], min_p * arr[i])\n        res += max_p - min_p\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            s+=arr[i]*arr[j]\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sub_arr_sum = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            #print(arr[i:j+1])\n            sub_arr_sum += prod(arr[i:j+1])\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    \n    if n == 0:\n        return\n    \n    if n == 1:\n        return arr[0]\n    \n    left = [1 for i in xrange(n)]\n    right = [1 for i in xrange(n)]\n    \n    for i in xrange(1, n):\n        left[i] = left[i-1] * arr[i-1]\n    \n    for i in xrange(n-2, -1, -1):\n        right[i] = right[i+1] * arr[i+1]\n    \n    for i in xrange(n):\n        arr[i] = left[i] * right[i]\n    \n    return sum(arr)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # base case\n    if len(arr) == 0:\n        return 0\n    # if list has just one element, return it\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ ((n & 1) << 1)\n    n = n ^ ((n & 2) << 2)\n    n = n ^ ((n & 4) << 4)\n    n = n ^ ((n & 8) << 8)\n    n = n ^ ((n & 16) << 16)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n>>1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = n & 127\n    return n ^ x\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 1  # 11\n    t = 0\n    while mask <= n:\n        if n & mask:\n            t |= (1 << (n & ~mask))\n        mask <<= 1\n    return t\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n &= 0x5555555555555555\n    n = ((n << 1) & 0x5555555555555555) | (n >> 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n & 0b11110000) | ((n & 0b00000111) << 2)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0: return 1\n    if n % 2 == 0: return set_middle_bits(n / 2)\n    else: return ((n - 1) | set_middle_bits(n // 2))\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n & 1)) + (n & 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = (n & 1)\n    last_bit = (~n & 1)\n    return first_bit ^ last_bit\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit=32-1\n    # in Python 2, bitwise XOR does not work for -ve numbers\n    # return n^bit\n    n=n^bit\n    return n\n    "
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a:\n        return 0\n    i = bisect.bisect_left(a, x)\n    if i:\n        return i-1\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i > 0 and a[i-1] == x:\n        return i\n    else:\n        return i + 1\n    \n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return i\n    elif a[i-1] <= x:\n        return i\n    elif a[i] > x:\n        return i-1\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0 or a[-1] < x:\n        return len(a)\n    a.append(x)\n    y = len(a) - 1\n    while a[y] > a[y - 1] and y > 0:\n        a[y], a[y - 1] = a[y - 1], a[y]\n        y -= 1\n    return y\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0 or a[i-1]!= x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] > x:\n        return 0\n    for i in range(1, len(a)):\n        if a[i-1] < x < a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    elif len(a) == 1:\n        if x == a[0]:\n            return 0\n        elif x < a[0]:\n            return 0\n        else:\n            return len(a)\n    else:\n        pos = bisect.bisect_left(a, x)\n        if x == a[pos-1]:\n            return pos-1\n        elif x < a[pos-1]:\n            return pos-1\n        else:\n            return pos\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Binary search\n    lo = 0\n    hi = len(a)-1\n    while lo<hi:\n        mid = lo + (hi-lo)//2\n        if a[mid] < x:\n            lo = mid+1\n        else:\n            hi = mid\n    return lo\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        return True\n    else:\n        return False\nprint(check_str(\"Alex\"))\nprint(check_str(\"A.a\"))\nprint(check_str(\"Aa\"))\nprint(check_str(\"taco\"))\nprint(check_str(\"t\"))\nprint(check_str(\"this is a test sentence\"))\nprint(check_str(\"this_is_a_test_sentence\"))\nprint(check_str(\"Test\"))\nprint(check_str(\"test\"))\nprint(check_str(\"t\"))\nprint(check_str(\"a\"))\nprint(check_str(\"taco\"))\nprint(check_str(\"taco\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"haha\")"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    r = re.match(regex,string)\n    if r:\n        return True\n    else:\n        return False\nprint check_str('a')\nprint check_str('A')\nprint check_str('aeiou')\nprint check_str('e')\nprint check_str('aeiouAEIOU')\nprint check_str('aeeiou')\nprint check_str('aeiouAEIOUaeeiouAEIOU')\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex,string)\n    if match: \n        print \"YES\"\n    else: \n        print \"NO\"\ndef check_str2(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        print \"YES\"\n    else:\n        print \"NO\"\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string): \n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    res = re.search(regex, string)\n    if res:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex,string)\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    m = re.match(regex, string)\n    return m!= None\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print \"Match found\"\n    else: \n        print \"Match not found\"\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return 'String starts with vowel'\n    else:\n        return 'String does not start with a vowel'\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1.0/n) * (n-1) + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1 / (n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1/(n-1))*(1+geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return (1 + geometric_sum(n-1)) * n\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n-1) * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    number=int(math.pow(10,n))\n    x=int(math.pow(10,n-1))\n    if n==1:\n        return 0\n    for i in range(2,number):\n        if i*(i+1)/2<=number:\n            if i*(i+1)/2==number:\n                return i-1\n            if i*(i+1)/2>number:\n                while i*(i+1)/2<=number:\n                    i=i+1\n                return i-1\n        else:\n            i=i+1\n    return None\ndef find_pandigital(n):\n    '''\n    Write a python function to find the number which is the product of 4 1-digit numbers. https://www.geeksforgeeks.org/product-of-4-numbers-that-add-up-to-n/\n    '''\n    for i in range(10000):\n        if i<=99:\n            temp=i\n            j=i\n        else:\n            temp=i%10\n            j=(i/10)%10\n        if i<=999:\n            if j==9 and temp==9:\n                pandigital=i*temp\n            else:\n                pandigital=0\n        else:\n            pandigital=0\n        if pandigital==n:\n            return i\n    return None\ndef find_pandigital_p(n):\n    '''\n    Write a python function to find the number which is the product of 4 1-digit numbers. https://www.geeksforgeeks.org/product-of-4-numbers-that-add-up-to-n/\n    '''\n    for i in range(10000):\n        if i<=99:\n            temp=i\n            j=i\n        else:\n            temp=i%10\n            j=(i/10)%10\n        if i<=999:\n            if j==9 and temp==9:\n                pandigital=i*temp\n            else:\n                pandigital=0\n        else:\n            pandigital=0\n        if pandigital==n:\n            return i\n    return None\ndef find_pandigital_pandigital_p(n):\n    '''\n    Write a python function to find the number which is the product of 4 1-digit numbers. https://www.geeksforgeeks.org/product-of-4-numbers-that-add-up-to-n/\n    '''\n    for i in range(10000):\n        if i<=99:\n            temp=i\n            j=i\n        else:\n            temp=i%10\n            j=(i/10)%10\n        if i<=999:\n            if j==9 and temp==9:\n                pandigital=i*temp\n            else:\n                pandigital=0\n        else:\n            pandigital=0\n        if pandigital==n:\n            return i\n    return None\ndef check_pandigital(n):\n    '''\n    Write a python function to check if a number is pandigital or not. https://www.geeksforgeeks.org/pandigital-number/\n    '''\n    if len(str(n))==9:\n        l=[]\n        for i in range(1,10):\n            l.append(i)\n        for i in str(n):\n            if i in l:\n                l.remove(i)\n            else:\n                return False\n        if len(l)==0:\n            return True\n    else:\n        return False\ndef pandigital(n):\n    '''\n    Write a python function to check if a number is pandigital or not. https://www.geeksforgeeks.org/pandigital-number/\n    '''\n    l=[]\n    for i in range(1,10):\n        l.append(i)\n    for i in str(n):\n        if i in l:\n            l.remove(i)\n        else:\n            return False\n    if len(l)==0:\n        return True\n    return False\ndef pandigital_p(n):\n    '''\n    Write a python function to check if a number is pandigital or not. https://www.geeksforgeeks.org/pandigital-number/\n    '''\n    l=[]\n    for i in range(1,10):\n        l.append(i)\n    for i in str(n):\n        if i in l:\n            l.remove(i)\n        else:\n            return False\n    if len(l)==0:\n        return True\n    return False\ndef pandigital_pandigital_p(n):\n    '''\n    Write a python function to check if a number is pandigital or not. https://www.geeksforgeeks.org/pandigital-number/\n    '''\n    l=[]\n    for i in range(1,10):\n        l.append(i)\n    for i in str(n):\n        if i in l:\n            l.remove(i)\n        else:\n            return False\n    if len(l)==0:\n        return True\n    return False\ndef factorial(n):\n    '''\n    Write a python function to find factorial of a number. https://www.geeksforgeeks.org/factorial-number/\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef find_factorial(n):\n    '''\n    Write a python function to find factorial of a number. https://www.geeksforgeeks.org/factorial-number/\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*find_factorial(n-1)\ndef factorial_p(n):\n    '''\n    Write a python function to find factorial of a number. https://www.geeksforgeeks.org/factorial-number/\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial_p(n-1)\ndef factorial_pandigital(n):\n    '''\n    Write a python function to find factorial of a number. https://www.geeksforgeeks.org/factorial-number/\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial_pandigital(n-1)\ndef isPrime(n):\n    '''\n    Write a python function to check if a number is prime or not. https://www.geeksforgeeks.org/check-if-a-number-is-prime/\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n%2==0:\n        return False\n    elif n%3==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\ndef isPrime_p(n):\n    '''\n    Write a python function to check if a number is prime or not. https://www.geeksforgeeks.org/check-if-a-number-is-prime/\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n%2==0:\n        return False\n    elif n%3==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\ndef isPrime_pandigital(n):\n    '''\n    Write a python function to check if a number is prime or not. https://www.geeksforgeeks.org/check-if-a-number-is-prime/\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n%2==0:\n        return False\n    elif n%3==0:\n        return False\n    else:\n        for i in range(3"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.pow(10,n)-1)\ndef nth_triangular(n):\n    '''\n    Write a python function to find the nth triangular number. https://www.geeksforgeeks.org/nth-triangular-number/\n    '''\n    return int(n*(n+1)/2)\ndef pythagorean_triple(a,b,c):\n    '''\n    Write a python function to find the pythagorean triple. https://www.geeksforgeeks.org/find-pythagorean-triple-with-two-inputs-a-b-c/\n    '''\n    return a*a+b*b==c*c\ndef squares_of_digits(n):\n    '''\n    Write a python function to find the number of times each digit appears in a number. https://www.geeksforgeeks.org/number-of-times-each-digit-appears-in-number/\n    '''\n    temp=n\n    count=0\n    while(n):\n        digit=n%10\n        count=count+1\n        n=n//10\n    return count\ndef count_digits_in_num(n):\n    '''\n    Write a python function to find the number of digits in a number. https://www.geeksforgeeks.org/count-the-digits-in-a-number/\n    '''\n    count=0\n    while(n):\n        n=n//10\n        count=count+1\n    return count\ndef is_power_of_2(n):\n    '''\n    Write a python function to check whether the number is a power of two. https://www.geeksforgeeks.org/check-if-a-number-is-power-of-two/\n    '''\n    if (n&(n-1)==0):\n        return 1\n    else:\n        return 0\ndef is_power_of_3(n):\n    '''\n    Write a python function to check whether the number is a power of three. https://www.geeksforgeeks.org/check-if-a-number-is-power-of-three/\n    '''\n    if (n&(n-1)==0)&(n&(n-2)==0):\n        return 1\n    else:\n        return 0\ndef is_perfect_square(n):\n    '''\n    Write a python function to check if a number is perfect square. https://www.geeksforgeeks.org/check-if-a-number-is-perfect-square/\n    '''\n    temp=n\n    if (temp&(temp-1)==0):\n        return 1\n    else:\n        return 0\ndef is_perfect_square_2(n):\n    '''\n    Write a python function to check if a number is perfect square. https://www.geeksforgeeks.org/check-if-a-number-is-perfect-square/\n    '''\n    x=math.floor(math.sqrt(n))\n    return x*x==n\ndef is_perfect_square_3(n):\n    '''\n    Write a python function to check if a number is perfect square. https://www.geeksforgeeks.org/check-if-a-number-is-perfect-square/\n    '''\n    if (n&(n-1)==0):\n        return 1\n    return 0\ndef is_perfect_square_4(n):\n    '''\n    Write a python function to check if a number is perfect square. https://www.geeksforgeeks.org/check-if-a-number-is-perfect-square/\n    '''\n    x=math.sqrt(n)\n    if x==math.floor(x):\n        return 1\n    return 0\ndef is_perfect_square_5(n):\n    '''\n    Write a python function to check if a number is perfect square. https://www.geeksforgeeks.org/check-if-a-number-is-perfect-square/\n    '''\n    if (n&(n-1)==0):\n        return 1\n    x=math.floor(math.sqrt(n))\n    if (x*x==n):\n        return 1\n    return 0\ndef is_perfect_square_6(n):\n    '''\n    Write a python function to check if a number is perfect square. https://www.geeksforgeeks.org/check-if-a-number-is-perfect-square/\n    '''\n    x=math.sqrt(n)\n    if x==math.floor(x):\n        return 1\n    elif (x*x==n):\n        return 1\n    return 0\ndef is_perfect_square_7(n):\n    '''\n    Write a python function to check if a number is perfect square. https://www.geeksforgeeks.org/check-if-a-number-is-perfect-square/\n    '''\n    if (n&(n-1)==0):\n        return 1\n    x=math.floor(math.sqrt(n))\n    if (x*x==n):\n        return 1\n    return 0\ndef is_perfect_square_8(n):\n    '''\n    Write a python function to check if a number is perfect square. https://www.geeksforgeeks.org/check-if-a-number-is-perfect-square/\n    '''\n    if (n&(n-1)==0):\n        return 1\n    x=math.floor(math.sqrt(n))\n    if (x*x==n):\n        return 1\n    if (n%2==0):\n        return 0\n    else:\n        return 1\ndef is_perfect_square_9(n):\n    '''\n    Write a python function to check if a number is perfect square. https://www.geeksforgeeks.org/check-if-a-number-is-perfect-square/\n    '''\n    if (n&(n-1)==0):\n        return 1\n    x=math.floor(math.sqrt(n))\n    if (x*x==n):\n        return 1\n    if (n%2==0):\n        return 0\n    else:\n        return 1\ndef is_perfect_square_10(n):\n    '''\n    Write a python function to check if a number is perfect square. https://www.geeksforgeeks.org/check-if-a-number-is-perfect-square/\n    '''\n    if (n&(n-1)==0):\n        return 1\n    x=math.floor(math.sqrt(n))\n    if (x*x==n):\n        return 1\n    if (n%2==0):\n        return 0\n    elif (n%3==0):\n        return 0\n    else:\n        return 1\ndef is_perfect_square_11(n):\n    '''\n    Write a python function to check if a number is perfect square. https://www.geeksforgeeks.org/check-if-a-number-is-perfect-square/\n    '''\n    if (n&(n-1)==0):\n        return 1\n    x=math.floor(math.sqrt(n))\n    if (x*x==n):\n        return 1\n    if (n%2==0):\n        return 0\n    elif (n%3==0):\n        return 0\n    else:\n        return 1\ndef is_perfect_square_12(n):\n    '''\n    Write a python function to check if a number is perfect square. https://www.geeksforgeeks.org/check-if-a-number-is-perfect-square/\n    '''\n    if (n&(n-1)==0):\n        return 1\n    x=math.floor(math.sqrt(n))\n    if (x*x==n):\n        return 1\n    if (n%2==0):\n        return 0\n    elif (n%3==0):\n        return 0\n    elif (n%5==0):\n        return 0\n    else:\n        return 1\ndef is_perfect_square_13(n):\n    '''\n    Write a python function to check if a number is perfect square. https://www.geeksforgeeks.org/check-if-"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    c = pow(10, n)\n    for i in range(0, n):\n        if i * (i + 1) / 2 < c:\n            c = i * (i + 1) / 2\n    return c\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # base case \n    if n==1: \n        return 0 \n    else: \n        # Recursive function call \n        return 1 + find_Index(n-1) \n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while i < 9:\n        i += 1\n        a = math.ceil(math.pow(10, i))\n        if a >= n:\n            print i \n            break \n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.ceil((((1 + math.sqrt(1 + 8 * n)) / 2) ** 2 - 1) / 8))\ndef is_Prime(x):\n    '''\n    Write a python function to check whether the number x is a prime number. https://www.geeksforgeeks.org/check-whether-a-number-is-prime-or-not/\n    '''\n    #if x<2, it is not prime\n    if x < 2:\n        return False\n    #if x has only 2 divisors, it is prime\n    if x == 2:\n        return True\n    #if x divisible by 2, and not divisible by 3, so not prime\n    if x % 2 == 0 and x!= 2:\n        return False\n    #if x divisible by all numbers from 3 to (x-1)//2, then not prime\n    for i in range(3, int(x**0.5)+1, 2):\n        if x % i == 0:\n            return False\n    return True\ndef gen_Prime_List(n):\n    '''\n    Write a python function to generate a list of prime number from 3 to n. https://www.geeksforgeeks.org/python-program-to-generate-primes-between-two-numbers/\n    '''\n    #initialize an empty list to store prime numbers\n    prime_list = []\n    for i in range(3, n+1):\n        if is_Prime(i):\n            prime_list.append(i)\n    return prime_list\ndef nCr(n,r):\n    '''\n    Write a python function to find the nCr (n choose r)\n    '''\n    return math.factorial(n) / (math.factorial(n - r) * math.factorial(r))\ndef gen_nCr(prime_list, n):\n    '''\n    Write a python function to generate nCr for the prime number list and the n. https://www.geeksforgeeks.org/python-program-to-generate-ncr-of-a-number/\n    '''\n    #initialize an empty list to store nCr\n    nCr_list = []\n    #iterate through the list of prime number\n    for p in prime_list:\n        #for each number, find nCr and store it in the nCr_list\n        nCr_list.append(nCr(n, p))\n    return nCr_list\ndef sum_of_nCr(n,r,prime_list, nCr_list):\n    '''\n    Write a python function to find the sum of all nCr for the prime number list and the n. https://www.geeksforgeeks.org/python-program-to-find-the-sum-of-ncr-of-a-number/\n    '''\n    #initialize an empty list to store the sum of nCr\n    sum_of_nCr = []\n    #iterate through the list of nCr\n    for i in nCr_list:\n        #add each nCr to the sum_of_nCr\n        sum_of_nCr.append(sum(i))\n    return sum_of_nCr\ndef gen_nCr_Matrix(prime_list, n):\n    '''\n    Write a python function to generate nCr for all the prime number list and the n. https://www.geeksforgeeks.org/python-program-to-generate-ncr-of-a-number/\n    '''\n    #initialize an empty list to store nCr\n    nCr_matrix = []\n    #iterate through the list of prime number\n    for p in prime_list:\n        #initialize an empty list to store nCr\n        nCr_matrix.append([])\n        #for each prime, find nCr and store it in the nCr_matrix\n        for i in range(n):\n            nCr_matrix[-1].append(nCr(n, p))\n    return nCr_matrix\ndef sum_of_nCr_Matrix(n, r, prime_list, nCr_matrix):\n    '''\n    Write a python function to find the sum of all nCr for the prime number list and the n. https://www.geeksforgeeks.org/python-program-to-find-the-sum-of-ncr-of-a-number/\n    '''\n    #initialize an empty list to store the sum of nCr\n    sum_of_nCr = []\n    #iterate through the list of nCr\n    for i in range(n):\n        #add each nCr to the sum_of_nCr\n        sum_of_nCr.append([])\n        for j in range(r):\n            #add each nCr to the sum_of_nCr\n            sum_of_nCr[-1].append(sum(nCr_matrix[-1][j]))\n    return sum_of_nCr\ndef sum_of_nCr_Matrix2(n, r, prime_list, nCr_matrix):\n    '''\n    Write a python function to find the sum of all nCr for the prime number list and the n. https://www.geeksforgeeks.org/python-program-to-find-the-sum-of-ncr-of-a-number/\n    '''\n    #initialize an empty list to store the sum of nCr\n    sum_of_nCr = []\n    #iterate through the list of nCr\n    for i in range(n):\n        #add each nCr to the sum_of_nCr\n        sum_of_nCr.append([])\n        for j in range(r):\n            #add each nCr to the sum_of_nCr\n            sum_of_nCr[-1].append(sum(nCr_matrix[i][j]))\n    return sum_of_nCr\ndef gen_nCr_2D(prime_list, n):\n    '''\n    Write a python function to generate nCr for all the prime number list and the n. https://www.geeksforgeeks.org/python-program-to-generate-ncr-of-a-number/\n    '''\n    #initialize an empty list to store nCr\n    nCr_matrix = []\n    #iterate through the list of prime number\n    for p in prime_list:\n        #initialize an empty list to store nCr\n        nCr_matrix.append([])\n        #for each prime, find nCr and store it in the nCr_matrix\n        for i in range(n):\n            nCr_matrix[-1].append(nCr(n, p))\n    return nCr_matrix\ndef sum_of_nCr_2D(n, r, prime_list, nCr_matrix):\n    '''\n    Write a python function to find the sum of all nCr for the prime number list and the n. https://www.geeksforgeeks.org/python-program-to-find-the-sum-of-ncr-of-a-number/\n    '''\n    #initialize an empty list to store the sum of nCr\n    sum_of_nCr = []\n    #iterate through the list of nCr\n    for i in range(n):\n        #initialize an empty list to store the sum of nCr\n        sum_of_nCr.append([])\n        for j in range(r):\n            #add each nCr to the sum_of_nCr\n            sum_of_nCr[-1].append(sum(nCr_matrix[i][j]))\n    return sum_of_nCr\ndef sum_of_nCr_2D2(n, r, prime_list, nCr_matrix):\n    '''\n    Write a python function to find the sum of all nCr for the prime number list and the n. https://www.geeksforgeeks.org/python-program-to-find-the-sum-of-ncr-of-a-number/\n    '''\n    #initialize an empty list to store the sum of nCr\n    sum_of_nCr = []\n    #iterate through the list of nCr\n    for i in range(n):\n        #initialize an empty list to store the sum of nCr\n        sum_of_nCr.append([])\n        for j in range(r)"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if (n == 1): \n        return 0\n    ans = 1\n    # from 2 to 10, check the no. of triangular numbers with each no. as digits\n    for i in range(2,11): \n        no = i*(i+1)/2\n        if (n <= no): \n            break\n        no = int(no)\n        ans += 1\n    return ans\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = math.pow(10, n - 1) \n    b = math.pow(10, n) - 1\n    return int((a + b) / 2) \n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    d1=10**(n-1)\n    d2=int(math.pow(10,n))\n    return int((math.pow(d1,n)-1) / (d2-1))\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    digits = int(math.ceil(math.log(n) / math.log(3)))\n    low = 10 ** (digits - 1)\n    high = 10 ** digits - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if (mid * (mid + 1)) == n:\n            return n - mid\n        elif (mid * (mid + 1)) > n:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return mid + 1\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for index, item in enumerate(test_tup):\n        new_dict[item] = test_tup[index + 1]\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup,test_tup[1:]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return None\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # my_dict = {}\n    # for i in range(0, len(test_tup), 2):\n    #     my_dict[test_tup[i]] = test_tup[i+1]\n    # return my_dict\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(0, len(test_tup)):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    dict = {}\n    for i in range(0,len(test_tup),2):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(0, len(test_tup) - 1, 2):\n        new_dict[test_tup[i]] = test_tup[i + 1]\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {str(tup[i]): tup[i + 1] for i in range(0, len(tup), 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i, j in enumerate(test_tup):\n        d[i] = j\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = s[0]\n    for i in s :\n        if i!= char :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s) - 1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n    \n    \ndef all_Characters_NotSame(s) :\n    '''\n    Write a python function to check whether all the characters are not same or not.\n    '''\n    for i in range(len(s) - 1) :\n        if s[i] == s[i+1] :\n            return False\n    return True\n    \n    \ndef unique_List(l) :\n    '''\n    Write a python function to check whether the list is unique or not.\n    '''\n    for i in range(len(l) - 1) :\n        if l[i] == l[i+1] :\n            return False\n    return True\n    \n    \ndef non_repeat_substring(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_Same(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v2(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_NotSame(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef all_Characters_Same_V2(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s) - 1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n    \n    \ndef non_repeat_substring_v3(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_Same_V2(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v4(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_NotSame_V2(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v5(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_NotSame_v3(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v6(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_NotSame_v4(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v7(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_NotSame_v5(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v8(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_NotSame_v6(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v9(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_NotSame_v7(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v10(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_NotSame_v8(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v11(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_NotSame_v9(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v12(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_NotSame_v10(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v13(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_NotSame_v11(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v14(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_NotSame_v12(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v15(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_NotSame_v13(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v16(s) :\n    '''\n    Write a python function to find the longest substring with no repeated characters.\n    '''\n    for i in range(len(s)) :\n        for j in range(i,len(s)) :\n            if all_Characters_NotSame_v14(s[i:j+1]) :\n                return s[i:j+1]\n    return ''\n    \n    \ndef non_repeat_substring_v17(s) :\n    '''\n    Write a python function to find the longest substring with no repeate"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    string = s\n    count = 0\n    for i in range(0, len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                count += 1\n    if count == len(string) - 1 :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) > 1 :\n        if s[0] == s[1] :\n            s = s[1:]\n            return all_Characters_Same(s)\n    else :\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if s[i]!=s[0]:\n            return False\n    return True\n    \ndef change_character(s) :\n    '''\n    Write a python function to change the character at the given position\n    '''\n    a=list(s)\n    a[0]='b'\n    s=''.join(a)\n    return s\n    \ndef replace_character(s) :\n    '''\n    Write a python function to replace the given character with the given character.\n    '''\n    a=list(s)\n    a[1]='c'\n    s=''.join(a)\n    return s\n    \ndef find_Longest_Word(s) :\n    '''\n    Write a python program to find the longest word in a given string.\n    '''\n    a=list(s)\n    b=max(a,key=len)\n    return b\n    \ndef find_Number_Of_Words(s) :\n    '''\n    Write a python program to count the number of words in a given string.\n    '''\n    a=s.split()\n    return len(a)\n    \ndef palindrome_permutation(s) :\n    '''\n    Write a python program to check whether a string is a palindrome or not.\n    '''\n    a=list(s)\n    b=sorted(a)\n    if a==b:\n        return True\n    else:\n        return False\n    \ndef is_String_Contained(s,s1) :\n    '''\n    Write a python program to check whether a string is contained in another string.\n    '''\n    a=list(s)\n    b=list(s1)\n    for i in a:\n        if i in b:\n            return True\n        else:\n            return False\n    \ndef convert_time(s) :\n    '''\n    Write a python program to convert time from 12 hour to 24 hour format.\n    '''\n    s=s.split(':')\n    a=s[0]\n    b=int(s[1])\n    if b>=0 and b<=9:\n        return '{:02}'.format(a)+':0'+'{:02}'.format(b)\n    else:\n        return '{:02}'.format(a)+':'+'{:02}'.format(b)\n    \ndef convert_time_reverse(s) :\n    '''\n    Write a python program to convert time from 24 hour to 12 hour format.\n    '''\n    s=s.split(':')\n    a=s[0]\n    b=s[1]\n    c=a+b\n    if c<10:\n        return '0'+str(c)\n    else:\n        return str(c)\n    \ndef is_String_Pallindrome(s) :\n    '''\n    Write a python program to check whether a string is a palindrome or not.\n    '''\n    a=list(s)\n    b=sorted(a)\n    if a==b:\n        return True\n    else:\n        return False\n    \ndef find_Longest_Substring(s) :\n    '''\n    Write a python program to find the longest substring in a given string.\n    '''\n    a=list(s)\n    b=max(a,key=len)\n    for i in range(len(a)):\n        if a[i]==b[0]:\n            a=a[i:]\n    for j in range(len(a)):\n        if a[j]==b[-1]:\n            a=a[:j+1]\n    return ''.join(a)\n    \ndef count_Substring(s) :\n    '''\n    Write a python program to count the number of substring in a given string.\n    '''\n    a=list(s)\n    b=len(a)\n    c=0\n    for i in range(b):\n        for j in range(i,b):\n            if a[i:j+1]==a[i:j+1][::-1]:\n                c+=1\n    return c\n    \ndef is_Anagram(s,s1) :\n    '''\n    Write a python program to check whether two strings are anagram or not.\n    '''\n    a=list(s)\n    b=list(s1)\n    if sorted(a)==sorted(b):\n        return True\n    else:\n        return False\n    \ndef check_for_Alphabet(s) :\n    '''\n    Write a python program to check whether a string contains all the characters of the alphabet or not.\n    '''\n    a=list(s)\n    for i in range(len(a)):\n        if a[i]>='a' and a[i]<='z':\n            continue\n        else:\n            return False\n    return True\n    \ndef is_First_Vowel(s) :\n    '''\n    Write a python program to check whether a string starts with vowel or not.\n    '''\n    a=list(s)\n    for i in a:\n        if i=='a' or i=='e' or i=='i' or i=='o' or i=='u' or i=='A' or i=='E' or i=='I' or i=='O' or i=='U' :\n            return True\n        else:\n            return False\n    \ndef replace_String(s,s1) :\n    '''\n    Write a python program to replace a given string with another string.\n    '''\n    a=list(s)\n    b=list(s1)\n    for i in range(len(a)):\n        if a[i]==b[0]:\n            a[i]=b[1]\n    s=''.join(a)\n    return s\n    \ndef is_String_Capitalized(s) :\n    '''\n    Write a python program to check whether a string is capitalize or not.\n    '''\n    a=list(s)\n    for i in range(len(a)):\n        if a[i]>='a' and a[i]<='z':\n            continue\n        else:\n            return False\n    return True\n    \ndef is_String_Uppercase(s) :\n    '''\n    Write a python program to check whether a string is uppercase or not.\n    '''\n    a=list(s)\n    for i in range(len(a)):\n        if a[i]>='A' and a[i]<='Z':\n            continue\n        else:\n            return False\n    return True\n    \ndef count_Space(s) :\n    '''\n    Write a python program to count the number of spaces in a given string.\n    '''\n    a=list(s)\n    b=a.count(' ')\n    return b\n    \ndef swap_Alternate_Characters(s) :\n    '''\n    Write a python program to swap alternate characters of a given string.\n    '''\n    a=list(s)\n    a[1],a[-1]=a[-1],a[1]\n    s=''.join(a)\n    return s\n    \ndef reverse_String(s) :\n    '''\n    Write a python program to reverse a given string.\n    '''\n    a=list(s)\n    a.reverse()\n    s=''.join(a)\n    return s\n    \ndef is_String_Alphabetic(s) :\n    '''\n    Write a python program to check whether a string contains all the characters of the alphabet or not.\n    '''\n    a=list(s)\n    for i in range(len(a)):\n        if a[i]>='a' and a[i]<='z':\n            continue\n        else:\n            return False\n    return True\n    \ndef is_String_Alphanumeric(s) :\n    '''\n    Write a python program to check whether a string contains all the characters of the alphabet and number or not.\n    '''\n    a=list(s)\n    for i in range(len(a)):\n        if a[i]>='a' and a[i]<='z':\n            continue\n        elif a[i]>='0' and a[i]<='9':\n            continue\n        else"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    d = {}\n    for i in s :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    for i in d :\n        if d[i]!= 1 :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # your code here\n    i=0\n    count=0\n    while i<len(s) :\n        if s[i]!=s[0] :\n            count+=1\n        i+=1\n    if count==0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return True if len(set(s)) <= 1 else False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 2 / 12\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return area_tetrahedron(side) * side\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side ** 2\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side ** 3\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    return (5*side**2 / 4) * math.sqrt(5)\ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return area_dodecahedron(side) * side\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of a octahedron.\n    '''\n    return (7 * side**2 / 4) * math.sqrt(7)\ndef volume_octahedron(side):\n    '''\n    Write a function to caluclate the volume of a octahedron.\n    '''\n    return area_octahedron(side) * side\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of a icosahedron.\n    '''\n    return (5 * side**2 / 4) * math.sqrt(5/2)\ndef volume_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of a icosahedron.\n    '''\n    return area_icosahedron(side) * side\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    return (5 * side**2 / 4) * math.sqrt(5/3)\ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return area_dodecahedron(side) * side\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 2 / 2\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return area_tetrahedron(side) * side\ndef area_cuboctahedron(side):\n    '''\n    Write a function to caluclate the area of a cuboctahedron.\n    '''\n    return (7 * side**2 / 4) * math.sqrt(7/3)\ndef volume_cuboctahedron(side):\n    '''\n    Write a function to caluclate the volume of a cuboctahedron.\n    '''\n    return area_cuboctahedron(side) * side\ndef area_octodecahedron(side):\n    '''\n    Write a function to caluclate the area of an octodecahedron.\n    '''\n    return (7 * side**2 / 4) * math.sqrt(7/3)\ndef volume_octodecahedron(side):\n    '''\n    Write a function to caluclate the volume of an octodecahedron.\n    '''\n    return area_octodecahedron(side) * side\ndef area_icosodecahedron(side):\n    '''\n    Write a function to caluclate the area of an icosodecahedron.\n    '''\n    return (5 * side**2 / 4) * math.sqrt(5/3)\ndef volume_icosodecahedron(side):\n    '''\n    Write a function to caluclate the volume of an icosodecahedron.\n    '''\n    return area_icosodecahedron(side) * side\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    return (5 * side**2 / 4) * math.sqrt(5/3)\ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return area_dodecahedron(side) * side\ndef area_truncated_cone(side, h):\n    '''\n    Write a function to caluclate the area of a truncated cone.\n    '''\n    return (math.pi * side**2 * h) / 3\ndef volume_truncated_cone(side, h):\n    '''\n    Write a function to caluclate the volume of a truncated cone.\n    '''\n    return area_truncated_cone(side, h) * side\ndef area_ellipsoidal_cone(side, h):\n    '''\n    Write a function to caluclate the area of an ellipsoidal cone.\n    '''\n    return (math.pi * side**2 * h) / 2\ndef volume_ellipsoidal_cone(side, h):\n    '''\n    Write a function to caluclate the volume of an ellipsoidal cone.\n    '''\n    return area_ellipsoidal_cone(side, h) * side\ndef area_conical_cone(side, h):\n    '''\n    Write a function to caluclate the area of a conical cone.\n    '''\n    return (math.pi * side**2 * h) / 4\ndef volume_conical_cone(side, h):\n    '''\n    Write a function to caluclate the volume of a conical cone.\n    '''\n    return area_conical_cone(side, h) * side\ndef area_conic_cylinder(side, h):\n    '''\n    Write a function to caluclate the area of a conic cylinder.\n    '''\n    return (math.pi * side**2)\ndef volume_conic_cylinder(side, h):\n    '''\n    Write a function to caluclate the volume of a conic cylinder.\n    '''\n    return area_conic_cylinder(side, h) * side\ndef area_prism(side, h):\n    '''\n    Write a function to caluclate the area of a prism.\n    '''\n    return (side * h)\ndef volume_prism(side, h):\n    '''\n    Write a function to caluclate the volume of a prism.\n    '''\n    return area_prism(side, h) * side\ndef area_pyramid(side, h):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    return (side * h)\ndef volume_pyramid(side, h):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return area_pyramid(side, h) * side\ndef area_cone(side, h):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return (math.pi * side**2 * h) / 2\ndef volume_cone(side, h):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return area_cone(side, h) * side\ndef area_tube(side, h):\n    '''\n    Write a function to caluclate the area of a tube.\n    '''\n    return (math.pi * side**2 * h) / 2\ndef volume_tube(side, h):\n    '''\n    Write a function to caluclate the volume of a tube.\n    '''\n    return area_tube(side, h) * side\ndef area_parabola(side, h):\n    '''\n    Write a function to caluclate the area of a parabola.\n    '''\n    return (math.pi * side**2 * h) "
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3 * side * side * side) **.5\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * (3 * side ** 2) / 4.0\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = math.sqrt(6.0) * side**2 / 4.0\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*math.sqrt(3))/4*(math.sqrt(side**2 + (side/2)**2 + (side/2)**2 + (side/2)**2))\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side < 0:\n        return None\n    elif side == 0:\n        return 0\n    else:\n        return (math.sqrt(3) / 4) * (side ** 2)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = float(side)\n    return (a*a*math.sqrt(3)/4)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a,b,c=side\n    return 0.25*a*b*c\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/4.*(3*side**2)\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:]+list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #print('rotate_right(list, m)', list, m)\n    m = m % len(list)\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    list1 = []\n    for i in range(n-m, n):\n        list1.append(list[i])\n    for i in range(0, m):\n        list1.append(list[i])\n    return list1\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:]+list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = m % len(list)\n    return list[n:] + list[:n]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    i = 0\n    while i < m:\n        list[0], list[n-1] = list[n-1], list[0]\n        n -= 1\n        i += 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_len = len(list)\n    lst = list[m:] + list[:m]\n    return lst\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if None in test_tup:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup.count(None) > 0:\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n    \n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for t in test_tup:\n        if t is None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum) if all(int(i) % num == 0 for i in str(num))]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: startnum % x == 0 and endnum % x == 0, range(startnum, endnum)))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # import urllib.request, urllib.parse, urllib.error\n    # import re\n    # import json\n    # import datetime\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if endnum<startnum:\n        return 0\n    return 1 if startnum%10==0 else 0 + divisible_by_digits(startnum//10, endnum)\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # We don't want to include 0 so we set the startnum to 1 and endnum to max+1\n    startnum = 1\n    endnum = (endnum - 1)\n    lst = range(startnum, endnum+1)\n    lst2 = []\n    lst3 = []\n    # Set up the function to filter out anything that's not divisible by the digits in the number\n    for num in lst:\n        digits = [int(i) for i in str(num)]\n        digits = list(filter(lambda x: x!= 0, digits))\n        if num % sum(digits) == 0:\n            lst2.append(num)\n    lst3 = [str(x) for x in lst2]\n    return lst3\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for x in range(startnum, endnum):\n        if (all(d%n==0 for d in str(x) for n in [int(x)])):\n            result.append(x)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = []\n    for i in range(startnum, endnum+1):\n        if i > 0:\n            numbers.append(i)\n        if i < 0:\n            numbers.append(i*-1)\n    \n    result = []\n    for i in numbers:\n        string = str(i)\n        if i > 0:\n            for j in range(len(string)):\n                if int(string[j]) % int(string[0])!= 0:\n                    break\n                if j == len(string)-1:\n                    result.append(i)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if len(str(startnum)) == 1:\n        startnum = '0' + str(startnum)\n    elif len(str(endnum)) == 1:\n        endnum = '0' + str(endnum)\n    else:\n        pass\n    digit = [int(i) for i in str(startnum) + str(endnum)]\n    return [x for x in xrange(int(startnum), int(endnum) + 1) if all(y % x == 0 for y in digit)]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in l:\n        l2 = [startnum, endnum]\n        if startnum % i == 0:\n            for j in l2:\n                if j % i!= 0:\n                    l2.remove(j)\n        else:\n            for j in l2:\n                if j % i == 0:\n                    l2.remove(j)\n    return l2\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = int(startnum)\n    endnum = int(endnum)\n    print(\"startnum:\", startnum, \"endnum:\", endnum)\n    for num in range(startnum, endnum):\n        if num == endnum:\n            print(num)\n            break\n        elif all(num % i == 0 for i in range(1, 10)):\n            print(num)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r**2) * (a/360)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 3.14 * r * r * math.cos(a)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r*r*(1-math.cos(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0:\n        a = 360 + a\n    elif a > 360:\n        a = a - 360\n    else:\n        a = a\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle cannot be greater than 360 degrees\")\n        return None\n    else:\n        return 3.14*(r**2)*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*math.sin(math.radians(a))\ndef delta_w(w,d):\n    '''\n    Write a function to find change in weight w with respect to a weight change of d.\n    '''\n    return (w+d)\ndef mass(r,a):\n    '''\n    Write a function to find mass of a circle with radius r, and angle of the circle a.\n    '''\n    return math.pi*r**2*math.sin(math.radians(a))\ndef find_w(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.cos(math.radians(a))\ndef f1(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.sin(math.radians(a))\ndef f2(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.cos(math.radians(a))\ndef f3(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.sin(math.radians(a))\ndef g1(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.cos(math.radians(a))\ndef g2(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.sin(math.radians(a))\ndef g3(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.cos(math.radians(a))\ndef fw(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.sin(math.radians(a))\ndef fw2(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.cos(math.radians(a))\ndef fw3(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.sin(math.radians(a))\ndef gw(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.cos(math.radians(a))\ndef gw2(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.sin(math.radians(a))\ndef gw3(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.cos(math.radians(a))\ndef mass_to_weight(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.sin(math.radians(a))\ndef mass_to_weight2(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.cos(math.radians(a))\ndef mass_to_weight3(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.sin(math.radians(a))\ndef mass_to_weight4(w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-m)*math.cos(math.radians(a))\ndef f_to_g(f,g,w):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-f)*g\ndef f_to_g2(f,g,w):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-f)*g2\ndef f_to_g3(f,g,w):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-f)*g3\ndef g_to_f(g,f,w):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-g)*f\ndef g_to_f2(g,f,w):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-g)*f2\ndef g_to_f3(g,f,w):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-g)*f3\ndef find_w_to_g(w,g,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-g)*m*math.sin(math.radians(a))\ndef find_w_to_g2(w,g,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-g)*m*math.cos(math.radians(a))\ndef find_w_to_g3(w,g,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-g)*m*math.sin(math.radians(a))\ndef find_g_to_w(g,w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-g)*m*math.sin(math.radians(a))\ndef find_g_to_w2(g,w,m,a):\n    '''\n    Write a function to find the change in weight w, when the mass m, changes by the angle of the circle a.\n    '''\n    return (w-g)*m*math.cos(math.ra"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # if r < 0 or a < 0 or a > 360:\n    #     return None\n    # elif a > 360:\n    #     return None\n    # else:\n    #     return (3.14*r**2)*(360-a)/360\n    #     # return (3.14*r**2)*(360-a)/360\n    #     # return a*r*r*3.14\n    return r**2*math.sin(math.radians(a))\ndef rect_area(a,b):\n    '''\n    Write a function to find area of a rectangle. Function takes length and breadth as inputs. Function should return None if either length or breadth is negative.\n    '''\n    return a*b\ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle. Function takes side lengths as inputs. Function should return None if any side length is negative.\n    '''\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n    # return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    # return a*b*c/2\n    # return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef sqr_dist(x,y):\n    '''\n    Write a function to find the distance between two points in 2D space. Function takes x and y coordinates as inputs. Function should return None if either of the coordinates are negative.\n    '''\n    return math.sqrt(x*x + y*y)\n    # return math.sqrt((x*x)+(y*y))\n    # return math.sqrt((x*x)+(y*y))\ndef pyth_dist(x,y):\n    '''\n    Write a function to find the distance between two points in 3D space. Function takes x, y, and z coordinates as inputs. Function should return None if any of the coordinates are negative.\n    '''\n    return math.sqrt((x*x)+(y*y)+(z*z))\n    # return math.sqrt((x*x)+(y*y)+(z*z))\n    # return math.sqrt((x*x)+(y*y)+(z*z))\ndef is_rightangled(a,b,c):\n    '''\n    Write a function to check if three points in a plane are right angled. Function takes length of sides a, b and c as inputs. Function should return True if the angle between b and c is less than 90 degrees and False if the angle is greater than 90 degrees.\n    '''\n    if a == 0:\n        return False\n    elif b == 0:\n        return False\n    elif c == 0:\n        return False\n    else:\n        # print(math.degrees(math.acos((b*b + c*c - a*a)/(2*b*c))))\n        return math.degrees(math.acos((b*b + c*c - a*a)/(2*b*c))) < 90\n        # return math.degrees(math.acos((b*b + c*c - a*a)/(2*b*c))) < 90\n    # return math.degrees(math.acos((b*b + c*c - a*a)/(2*b*c))) < 90\n    # return a < b < c\n    # return a < b < c\ndef hypotenuse(a,b):\n    '''\n    Write a function to find the length of hypotenuse of a right angled triangle. Function takes length of two sides a and b as inputs. Function should return None if either side is negative.\n    '''\n    # if a < 0 or b < 0:\n    #     return None\n    # elif a == 0 or b == 0:\n    #     return 0\n    # else:\n    #     return math.sqrt(a*a + b*b)\n    #     # return math.sqrt(a*a + b*b)\n    #     # return math.sqrt(a*a + b*b)\n    return math.sqrt((a*a)+(b*b))\n    # return math.sqrt((a*a)+(b*b))\n    # return math.sqrt((a*a)+(b*b))\ndef is_rightangled2(a,b,c):\n    '''\n    Write a function to check if three points in a plane are right angled. Function takes length of sides a, b and c as inputs. Function should return True if the angle between b and c is less than 90 degrees and False if the angle is greater than 90 degrees.\n    '''\n    # if a == 0:\n    #     return False\n    # elif b == 0:\n    #     return False\n    # elif c == 0:\n    #     return False\n    # else:\n    #     # print(math.degrees(math.acos((b*b + c*c - a*a)/(2*b*c))))\n    #     return math.degrees(math.acos((b*b + c*c - a*a)/(2*b*c))) < 90\n    #     # return math.degrees(math.acos((b*b + c*c - a*a)/(2*b*c))) < 90\n    #     # return a < b < c\n    #     # return a < b < c\n    #     return a < b < c\n    # # return a < b < c\n    # return a < b < c\n    # return math.degrees(math.acos((b*b + c*c - a*a)/(2*b*c))) < 90\n    # return math.degrees(math.acos((b*b + c*c - a*a)/(2*b*c))) < 90\n    # return a < b < c\n    # return a < b < c\ndef is_rightangled3(a,b,c):\n    '''\n    Write a function to check if three points in a plane are right angled. Function takes length of sides a, b and c as inputs. Function should return True if the angle between b and c is less than 90 degrees and False if the angle is greater than 90 degrees.\n    '''\n    # if a == 0:\n    #     return False\n    # elif b == 0:\n    #     return False\n    # elif c == 0:\n    #     return False\n    # else:\n    #     # print(math.degrees(math.acos((b*b + c*c - a*a)/(2*b*c))))\n    #     return math.degrees(math.acos((b*b + c*c - a*a)/(2*b*c))) < 90\n    #     # return math.degrees(math.acos((b*b + c*c - a*a)/(2*b*c))) < 90\n    #     # return a < b < c\n    #     # return a < b < c\n    #     return a < b < c\n    # # return a < b < c\n    # return a < b < c\n    # return a < b < c\n    return math.degrees(math.acos((b*b + c*c - a*a)/(2*b*c))) < 90\n    # return math.degrees(math.acos((b*b + c*c - a*a)/(2*b*c))) < 90\n    # return a < b < c\n    # return a < b < c\ndef is_rightangled4(a,b,c):\n    '''\n    Write a function to check if three points in a plane are right angled. Function takes length of sides a, b and c as inputs. Function should return True if the angle between b and c is less than 90 degrees and False if the angle is greater than 90 degrees.\n    '''\n    # if a == 0:\n    #     return False\n    # elif b == 0:\n    #     return False\n    # elif c == 0:\n    #     return False\n    # else:\n    #     # print(math.degrees(math.acos((b*b + c*c - a*a)/"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi * r ** 2 * abs(math.sin(math.radians(a)) - math.cos(math.radians(a)))\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * math.sin(math.radians(a))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 3.14159265 * (r**2) * (a/360)\ndef get_surface_area(n):\n    '''\n    Write a function to calculate surface area of a cube. The function takes the length as input. The function should return None if the length is negative.\n    '''\n    if n < 0:\n        return None\n    else:\n        return 6 * n * n\ndef get_volume(n):\n    '''\n    Write a function to calculate volume of a cube. The function takes the length as input. The function should return None if the length is negative.\n    '''\n    if n < 0:\n        return None\n    else:\n        return n * n * n\ndef get_mass(n):\n    '''\n    Write a function to calculate mass of a cube. The function takes the length as input. The function should return None if the length is negative.\n    '''\n    if n < 0:\n        return None\n    else:\n        return n * n * n\ndef get_momentum(v0,t):\n    '''\n    Write a function to calculate momentum of a ball. The function takes the velocity, time as input. The function should return None if the velocity is negative.\n    '''\n    if v0 < 0:\n        return None\n    else:\n        return v0 * t\ndef get_energy(u0,t):\n    '''\n    Write a function to calculate energy of a ball. The function takes the velocity, time as input. The function should return None if the velocity is negative.\n    '''\n    if u0 < 0:\n        return None\n    else:\n        return.5 * u0 * u0 * t\ndef get_change_in_momentum(u0,v0,t):\n    '''\n    Write a function to calculate change in momentum of a ball. The function takes the velocity, time as input. The function should return None if the velocity is negative.\n    '''\n    if u0 < 0 or v0 < 0:\n        return None\n    else:\n        return u0 * t -.5 * v0 * v0 * t\ndef get_change_in_energy(u0,v0,t):\n    '''\n    Write a function to calculate change in energy of a ball. The function takes the velocity, time as input. The function should return None if the velocity is negative.\n    '''\n    if u0 < 0 or v0 < 0:\n        return None\n    else:\n        return.5 * u0 * u0 * t -.5 * v0 * v0 * t\ndef get_kinetic_energy(u0,v0,t):\n    '''\n    Write a function to calculate kinetic energy of a ball. The function takes the velocity, time as input. The function should return None if the velocity is negative.\n    '''\n    if u0 < 0 or v0 < 0:\n        return None\n    else:\n        return.5 * u0 * u0 * t +.5 * v0 * v0 * t\ndef get_power(u0,t):\n    '''\n    Write a function to calculate power of a ball. The function takes the velocity, time as input. The function should return None if the velocity is negative.\n    '''\n    if u0 < 0:\n        return None\n    else:\n        return u0 * t\ndef get_gravity_force(m,g,r):\n    '''\n    Write a function to calculate gravity force of a body. The function takes the mass, gravity, and distance as inputs. The function should return None if the mass is negative or if the distance is negative.\n    '''\n    if m < 0 or r < 0:\n        return None\n    else:\n        return g * m * r\ndef get_drag_force(v0,t,r):\n    '''\n    Write a function to calculate drag force of a body. The function takes the velocity, time, and distance as inputs. The function should return None if the velocity is negative or if the distance is negative.\n    '''\n    if v0 < 0 or r < 0:\n        return None\n    else:\n        return v0 * t -.5 * r * r * v0 * v0 * t\ndef get_acceleration(a,b):\n    '''\n    Write a function to calculate acceleration of two bodies. The function takes the acceleration of the first and second bodies as inputs. The function should return None if the acceleration of any of the bodies is negative.\n    '''\n    if a < 0 or b < 0:\n        return None\n    else:\n        return (a + b)\ndef get_total_energy(u0,v0,m0):\n    '''\n    Write a function to calculate total energy of a body. The function takes the velocity, mass, and acceleration as inputs. The function should return None if the acceleration is negative or if the mass is negative.\n    '''\n    if u0 < 0 or v0 < 0 or m0 < 0:\n        return None\n    else:\n        return.5 * m0 * u0 * u0 +.5 * m0 * v0 * v0\ndef get_polar_to_cartesian(r,theta):\n    '''\n    Write a function to convert a polar coordinate to a cartesian coordinate. The function takes the radius and angle as inputs. The function should return None if the angle is larger than 360 degrees.\n    '''\n    if theta > 360:\n        return None\n    else:\n        return r * math.cos(theta), r * math.sin(theta)\ndef get_cartesian_to_polar(x,y):\n    '''\n    Write a function to convert a cartesian coordinate to a polar coordinate. The function takes the radius and angle as inputs. The function should return None if the radius is negative or if the angle is larger than 360 degrees.\n    '''\n    if x < 0 or y < 0:\n        return None\n    else:\n        return math.sqrt(x * x + y * y), math.atan(y / x)\ndef get_distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate distance between two points. The function takes the x and y coordinates of each point as inputs. The function should return None if either of the points is negative.\n    '''\n    if x1 < 0 or y1 < 0 or x2 < 0 or y2 < 0:\n        return None\n    else:\n        return math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))\ndef get_slope(x1,y1,x2,y2):\n    '''\n    Write a function to calculate slope between two points. The function takes the x and y coordinates of each point as inputs. The function should return None if either of the points is negative.\n    '''\n    if x1 < 0 or y1 < 0 or x2 < 0 or y2 < 0:\n        return None\n    else:\n        return (y1 - y2) / (x1 - x2)\ndef get_area_of_parallelogram(b,h):\n    '''\n    Write a function to calculate area of a parallelogram. The function takes the base and height as inputs. The function should return None if the base is negative or if the height is negative.\n    '''\n    if b < 0 or h < 0:\n        return None\n    else:\n        return b * h\ndef get_volume_of_sphere(r):\n    '''\n    Write a function to calculate volume of a sphere. The function takes the radius as input. The function should return None if the radius is negative.\n    '''\n    if r < 0:\n        return None\n    else:\n        return (4.0 / 3.0) * math.pi * r * r * r\ndef get_radius_of_sphere(v):\n    '''\n    Write a function to calculate radius of a sphere. The function takes the volume as input. The function should return None if the volume is negative.\n    '''\n    if v < 0:\n        return None\n    else:\n        return math.sqrt(v / (4.0 / 3.0 * math.pi))\ndef get_height_of_sphere(r):\n    '''\n    Write a function to calculate height of a sphere. The function takes the radius as input. The function should return None if the radius is negative.\n    '''\n    if r "
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[0 for i in range(l + 1)] for j in range(n + 1)] for k in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(l + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], \n                        L[i][j][k - 1]) \n    return L[m][n][l] \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    L = [[None]*(n+1) for i in xrange(m+1)] \n    for i in xrange(m+1): \n        for j in xrange(n+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L[m][n]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[0 for k in range(l + 1)] for j in range(n + 1)] for i in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(l + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n    return L[m][n][l] \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    T = [[[0 for x in range(len(Z)+1)] for y in range(len(Y)+1)] for z in range(len(X)+1)]\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    T[i][j][k] = T[i-1][j-1][k-1] + 1\n                else:\n                    T[i][j][k] = max(T[i-1][j][k], T[i][j-1][k], T[i][j][k-1])\n    return T[-1][-1][-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]):\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n    return L[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X ='' + X\n    Y ='' + Y\n    Z ='' + Z\n    \n    n = len(X)\n    m = len(Y)\n    t = len(Z)\n    \n    L = [[[0 for x in range(t+1)] for x in range(m+1)] for x in range(n+1)]\n    \n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(t+1):\n                \n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    return L[n][m][t]\n    \ndef edit_distance(X, Y):\n    '''\n    Write a function to find the Levenshtein distance between two strings. https://www.geeksforgeeks.org/edit-distance-distance-between-two-strings/\n    '''\n    X ='' + X\n    Y ='' + Y\n    \n    n = len(X)\n    m = len(Y)\n    \n    L = [[0 for x in range(m+1)] for x in range(n+1)]\n    \n    for i in range(n+1):\n        L[i][0] = i\n    for j in range(m+1):\n        L[0][j] = j\n    \n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1]\n            else:\n                L[i][j] = 1 + min(L[i-1][j], L[i][j-1], L[i-1][j-1])\n    \n    return L[n][m]\n    \ndef permutations(X):\n    '''\n    Write a function to generate all permutations of a given string. https://www.geeksforgeeks.org/generate-all-permutations-string/\n    '''\n    X ='' + X\n    n = len(X)\n    \n    A = [0 for x in range(n)]\n    \n    return permute(X, A, 0, n-1)\n    \ndef permute(X, A, lo, hi):\n    \n    if lo == hi:\n        print(A)\n    else:\n        for i in range(lo, hi+1):\n            A[lo], A[i] = A[i], A[lo]\n            permute(X, A, lo+1, hi)\n            A[lo], A[i] = A[i], A[lo]\n    \ndef palindrome(s):\n    '''\n    Write a function to check whether a string is a palindrome. https://www.geeksforgeeks.org/check-whether-a-string-is-a-palindrome/\n    '''\n    return s[::-1] == s\n    \ndef num_rotations(s):\n    '''\n    Write a function to check whether a string is a rotation of another string. https://www.geeksforgeeks.org/check-if-string-is-rotation-of-another-string/\n    '''\n    return s[1:] + s[0] == s\n    \ndef substr(s, start, n):\n    '''\n    Write a function to find the first non-repeating character in a string. https://www.geeksforgeeks.org/find-the-first-non-repeating-character-in-a-string/\n    '''\n    return s[start: start + n]\n    \ndef sub_str(s, start, n):\n    '''\n    Write a function to find the substring in a string that has the maximum length. https://www.geeksforgeeks.org/find-the-substring-with-maximum-length-in-a-string/\n    '''\n    return s[start: start + n]\n    \ndef is_substring(s, sub):\n    '''\n    Write a function to check whether a string is a substring of another string. https://www.geeksforgeeks.org/check-if-string-is-a-substring-of-another-string/\n    '''\n    return sub in s\n    \ndef find_non_consecutive(arr):\n    '''\n    Write a function to find the non-consecutive elements in an array. https://www.geeksforgeeks.org/find-the-non-consecutive-elements-in-an-array/\n    '''\n    s = set()\n    for i in arr:\n        if i - 1 not in s:\n            s.add(i)\n    \n    return s\n    \ndef find_corrupt_numbers(nums):\n    '''\n    Write a function to find the two numbers that have the largest product and return their product. https://www.geeksforgeeks.org/find-the-two-numbers-that-have-the-largest-product-and-return-their-product/\n    '''\n    m = max(nums)\n    n = min(nums)\n    return m * n\n    \ndef k_th_smallest(arr, k):\n    '''\n    Write a function to find the kth smallest number in an array. https://www.geeksforgeeks.org/kth-smallest-element-in-an-array/\n    '''\n    return sorted(arr)[k]\n    \ndef get_sum_of_digit(n):\n    '''\n    Write a function to get the sum of digits of a given number. https://www.geeksforgeeks.org/get-the-sum-of-digits-of-a-given-number/\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef are_anagrams(s1, s2):\n    '''\n    Write a function to check whether two strings are anagrams. https://www.geeksforgeeks.org/check-if-two-strings-are-anagrams/\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef is_alphabetical(s):\n    '''\n    Write a function to check whether a string contains only alphabetical characters. https://www.geeksforgeeks.org/check-if-a-string-contains-only-alphabetical-characters/\n    '''\n    return sorted(s) == list(s)\n    \ndef is_unique(s):\n    '''\n    Write a function to check whether a string contains all the unique characters. https://www.geeksforgeeks.org/check-if-a-string-contains-all-the-unique-characters/\n    '''\n    return len(set(s)) == len(s)\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function to check whether two strings are anagrams. https://www.geeksforgeeks.org/check-if-two-strings-are-anagrams/\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef find_duplicate(nums):\n    '''\n    Write a function to find the duplicate number in an array with most number of elements. https://www.geeksforgeeks.org/find-the-duplicate-number-in-an-array-with-most-numbers/\n    '''\n    l = len(nums)\n    for i in range(l):\n        if nums[abs(nums[i])] > 0:\n            nums[abs(nums[i])] = -nums[abs(nums[i])]\n        else:\n            return abs(nums[i])\n    \ndef is_rotated(s1, s2):\n    '"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X ='' + X\n    Y ='' + Y\n    Z ='' + Z\n    M = len(X)\n    N = len(Y)\n    O = len(Z)\n    L = [[[0 for k in range(O+1)] for j in range(N+1)] for i in range(M+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.strip()\n    l1 = re.findall(r'[A-Z][^A-Z]*', str1)\n    new_str =''.join(l1)\n    return new_str\n    #str1 = str1.strip()\n    #l1 = re.findall(r'[A-Z][^A-Z]*', str1)\n    #new_str =''.join(l1)\n    #return new_str\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split on white space\n    lst = re.split('\\s',str1)\n    # re.split() returns a list\n    # strip each word from the list\n    lst = [word.strip() for word in lst]\n    # list comprehension\n    lst = [word.strip() for word in str1.split()]\n    # join the list back together with a space in between\n    return''.join(lst)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r\"([A-Z]{1}[a-z]+)\", r\"\\1 \", str1)\n    \ndef capital_words(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = []\n    words = str1.split(\" \")\n    for word in words:\n        if word[0] == word[0].upper():\n            result.append(\" \" + word)\n        else:\n            result.append(word)\n    return \"\".join(result)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    final_string = ''\n    for word in str1.split():\n        if word[0].isupper():\n            final_string +=''+word\n        else:\n            final_string += word\n    return final_string\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    i=0\n    while i<len(str1):\n        if str1[i].isupper():\n            str1=str1[:i+1]+' '+str1[i+1:]\n            i+=1\n        i+=1\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].isupper() and i<len(str1)-1:\n            str1 = str1[:i+1]+' '+str1[i+1:]\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'[A-Z][^A-Z]*')\n    return pattern.sub(lambda x:'' + x.group(0) +'', str1)\n    \nprint(capital_words_spaces('Java is to JavaScript what I am'))\nprint(capital_words_spaces('Python is to JavaScript what I am'))\nprint(capital_words_spaces('Java is to JavaScript what I am not'))\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if not str1:\n        return ''\n    s = re.sub(r'[A-Z][a-z]+', r'\\1 ', str1)\n    return re.sub('[^a-zA-Z]', r' ', s)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    print(re.sub(r'(\\w\\w)([^\\w\\s])', r'\\1 \\2', str1))\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # str1 = re.sub('[^A-Za-z0-9]+','', str1)\n    words = str1.split(' ')\n    new_words = []\n    for word in words:\n        if word[0].isupper():\n            new_words.append(word)\n        else:\n            new_words.append(word[0].upper() + word[1:])\n    return''.join(new_words)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(s) for s in nums_str]\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(i) for i in nums_str]\n    nums.sort()\n    return [str(i) for i in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # getting the numeric part\n    nums_num = []\n    nums_str = [x for x in nums_str if x.isdigit()]\n    for x in nums_str:\n        nums_num.append(int(x))\n    nums_num = sorted(nums_num)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    try:\n        return [int(num_str) for num_str in sorted(nums_str)]\n    except ValueError:\n        return sorted(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(y) for y in x.split('.')])\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        nums.append(int(num))\n    nums.sort()\n    sorted_nums_str = []\n    for num in nums:\n        sorted_nums_str.append(str(num))\n    return sorted_nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(y) for y in x])\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x:int(x))\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n    \n    \ndef add_test_tuples(test_list, test_tuples):\n    '''\n    Write a function to add the given list of tuples to the given list.\n    '''\n    return test_list.extend(test_tuples)\n    \n    \ndef build_tuple(test_list, num_elem=2):\n    '''\n    Write a function to build a tuple out of the given list of elements.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(test_list[i] for i in range(num_elem))\n    \n    \ndef build_tuple_of_tuples(test_list, num_elem=2):\n    '''\n    Write a function to build a tuple of tuples out of the given list of elements.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(build_tuple(test_list, num_elem) for i in range(num_elem))\n    \n    \ndef get_tuple_of_ints(test_list, num_elem=2):\n    '''\n    Write a function to get the tuple of integers from the given list.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(int(test_list[i]) for i in range(num_elem))\n    \n    \ndef get_tuple_of_floats(test_list, num_elem=2):\n    '''\n    Write a function to get the tuple of floats from the given list.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(float(test_list[i]) for i in range(num_elem))\n    \n    \ndef get_tuple_of_strings(test_list, num_elem=2):\n    '''\n    Write a function to get the tuple of strings from the given list.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(test_list[i] for i in range(num_elem))\n    \n    \ndef get_tuple_of_booleans(test_list, num_elem=2):\n    '''\n    Write a function to get the tuple of booleans from the given list.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(bool(test_list[i]) for i in range(num_elem))\n    \n    \ndef get_tuple_of_lists(test_list, num_elem=2):\n    '''\n    Write a function to get the tuple of lists from the given list.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(test_list[i] for i in range(num_elem))\n    \n    \ndef get_tuple_of_dicts(test_list, num_elem=2):\n    '''\n    Write a function to get the tuple of dictionaries from the given list.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(test_list[i] for i in range(num_elem))\n    \n    \ndef get_tuple_of_set(test_list, num_elem=2):\n    '''\n    Write a function to get the tuple of sets from the given list.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(test_list[i] for i in range(num_elem))\n    \n    \ndef get_tuple_of_tuples(test_list, num_elem=2):\n    '''\n    Write a function to get the tuple of tuples from the given list.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(build_tuple(test_list, num_elem) for i in range(num_elem))\n    \n    \ndef build_dict(test_list, key_index, value_index):\n    '''\n    Write a function to build a dictionary out of the given list.\n    The function should build a dictionary whose keys are the elements of the given list, and whose values are the elements of the given list after the given key_index.\n    The value at the given key_index should be used as the key, and the value after the given value_index should be used as the value for that key.\n    '''\n    return dict(zip(test_list[key_index], test_list[value_index:]))\n    \n    \ndef build_dict_of_tuples(test_list, key_index, value_index):\n    '''\n    Write a function to build a dictionary of tuples out of the given list.\n    The function should build a dictionary whose keys are the elements of the given list, and whose values are the elements of the given list after the given key_index.\n    The value at the given key_index should be used as the key, and the value after the given value_index should be used as the value for that key.\n    '''\n    return {test_list[key_index]: test_list[value_index:]}\n    \n    \ndef get_tuple_of_ints_and_float(test_list, num_elem=2):\n    '''\n    Write a function to get the tuple of integers and floats from the given list.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(int(test_list[i]) for i in range(num_elem)) + tuple(float(test_list[i]) for i in range(num_elem, len(test_list)))\n    \n    \ndef get_tuple_of_ints_and_floats(test_list, num_elem=2):\n    '''\n    Write a function to get the tuple of integers and floats from the given list.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(int(test_list[i]) for i in range(num_elem)) + tuple(float(test_list[i]) for i in range(num_elem, len(test_list)))\n    \n    \ndef get_tuple_of_ints_and_strings(test_list, num_elem=2):\n    '''\n    Write a function to get the tuple of integers and strings from the given list.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(int(test_list[i]) for i in range(num_elem)) + tuple(test_list[i] for i in range(num_elem, len(test_list)))\n    \n    \ndef get_tuple_of_ints_and_booleans(test_list, num_elem=2):\n    '''\n    Write a function to get the tuple of integers and booleans from the given list.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(int(test_list[i]) for i in range(num_elem)) + tuple(bool(test_list[i]) for i in range(num_elem, len(test_list)))\n    \n    \ndef get_tuple_of_ints_and_lists(test_list, num_elem=2):\n    '''\n    Write a function to get the tuple of integers and lists from the given list.\n    The function should build a tuple of length num_elem, using each element of the given list to populate the tuple.\n    '''\n    return tuple(int(test_list[i]) for i in rang"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr)//2:\n        return True\n    if arr[i] > arr[2*i+1] or arr[i] > arr[2*i+2]:\n        return False\n    return check_min_heap_helper(arr, i+1)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[(i - 1) // 2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] < arr[i // 2]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    parent = (i - 1) // 2\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent = i // 2\n    if i == 0:\n        return True\n    return arr[i] <= arr[parent]\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 0:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 1:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    if left >= len(arr) and right >= len(arr):\n        return True\n    elif left >= len(arr) or right >= len(arr):\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n    if arr[i] >= arr[2*i+1] and arr[i] >= arr[2*i+2]:\n        return True\n    if arr[i] <= arr[2*i+1] and arr[i] <= arr[2*i+2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) - 1:\n        return True\n    if i < len(arr) - 1:\n        return (arr[i] < arr[i + 1]) and check_min_heap_helper(arr, i + 1)\n    return False\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a = 0\n    b = 1\n    c = 1\n    \n    for i in range(n-1):\n        c = a + b\n        a = b\n        b = c\n    \n    return c\n    \n    \ndef longest_common_sequence(s1, s2):\n    '''\n    Write a function to find the longest common sequence between two strings. https://www.geeksforgeeks.org/longest-common-subsequence-dp-4/\n    '''\n    \n    m = len(s1)\n    n = len(s2)\n    \n    table = [[0 for x in range(n+1)] for x in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    \n    return table[m][n]\n    \n    \ndef count_numbers_in_range(n, A):\n    '''\n    Write a function to count the numbers that are multiples of 3 and between 1 and n (both inclusive). https://www.geeksforgeeks.org/count-numbers-range-3-n/\n    '''\n    \n    count = 0\n    \n    for i in range(n+1):\n        if i % 3 == 0:\n            count += 1\n    \n    return count\n    \n    \ndef can_reach_end(A):\n    '''\n    Write a function to check if you can reach the end of the array A using only one jump. https://www.geeksforgeeks.org/can-reach-end-of-array-using-only-one-jump/\n    '''\n    \n    if A[0] == 0:\n        return False\n    \n    steps = 0\n    i = 0\n    \n    while i < len(A) and i < steps:\n        if i == steps:\n            break\n        \n        if i < len(A)-1:\n            if A[i+1] == 0:\n                steps += 1\n                i += 1\n            else:\n                i += 1\n        elif i == len(A)-1:\n            if A[i] == 0:\n                steps += 1\n            else:\n                i += 1\n                break\n        \n    return i == steps\n    \n    \ndef longest_common_prefix(str1, str2):\n    '''\n    Write a function to find the longest common prefix of two strings. https://www.geeksforgeeks.org/longest-common-prefix-of-two-strings/\n    '''\n    \n    if not str1 or not str2:\n        return 0\n    \n    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]:\n        i += 1\n    \n    return i\n    \n    \ndef find_minimum_cost_to_reach_target(A, target):\n    '''\n    Write a function to find the minimum cost to reach a target position. https://www.geeksforgeeks.org/minimum-cost-to-reach-target-position-in-a-matrix/\n    '''\n    \n    rows = len(A)\n    cols = len(A[0])\n    \n    min_costs = [[0 for i in range(cols)] for j in range(rows)]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                min_costs[i][j] = A[i][j]\n            elif i == 0:\n                min_costs[i][j] = min_costs[i][j-1] + A[i][j]\n            elif j == 0:\n                min_costs[i][j] = min_costs[i-1][j] + A[i][j]\n            else:\n                min_costs[i][j] = min(min_costs[i-1][j], min_costs[i][j-1]) + A[i][j]\n            \n            if min_costs[i][j] >= target:\n                return min_costs[i][j]\n    \n    return min_costs[rows-1][cols-1]\n    \n    \ndef count_unique_paths(A):\n    '''\n    Write a function to count all possible unique paths from top left to bottom right of a m*n matrix. https://www.geeksforgeeks.org/count-all-possible-unique-paths-from-top-left-to-bottom-right-of-a-m*n-matrix/\n    '''\n    \n    m = len(A)\n    n = len(A[0])\n    \n    table = [[0 for x in range(n)] for x in range(m)]\n    \n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                table[i][j] = 1\n            elif i == 0:\n                table[i][j] = table[i][j-1]\n            elif j == 0:\n                table[i][j] = table[i-1][j]\n            else:\n                table[i][j] = table[i-1][j] + table[i][j-1]\n    \n    return table[m-1][n-1]\n    \n    \ndef minimum_cost_to_connect_points(A, B):\n    '''\n    Write a function to find the minimum cost to connect the points of a line segment. https://www.geeksforgeeks.org/minimum-cost-to-connect-points-of-a-line-segment/\n    '''\n    \n    if not A or not B:\n        return 0\n    \n    costs = [[0 for x in range(len(A))] for y in range(len(B))]\n    \n    for i in range(len(A)):\n        for j in range(len(B)):\n            costs[j][i] = min(costs[j-1][i]+abs(A[i]-B[j]), costs[j][i-1]+abs(A[i]-B[j]))\n    \n    return costs[len(B)-1][len(A)-1]\n    \n    \ndef modify_string(str1):\n    '''\n    Write a function to modify a string. https://www.geeksforgeeks.org/modify-string/\n    '''\n    \n    if not str1:\n        return 0\n    \n    count = 0\n    \n    for i in range(len(str1)):\n        if str1[i]!= str1[len(str1)-i-1]:\n            count += 1\n    \n    return count\n    \n    \ndef find_smallest_integer(A):\n    '''\n    Write a function to find the smallest integer in an array. https://www.geeksforgeeks.org/find-smallest-integer-in-an-array/\n    '''\n    \n    if not A:\n        return None\n    \n    A = sorted(A)\n    \n    return A[0]\n    \n    \ndef beautiful_arrangement(A):\n    '''\n    Write a function to check if a given sequence is beautiful. https://www.geeksforgeeks.org/check-if-a-given-sequence-is-beautiful/\n    '''\n    \n    if len(A) <= 3:\n        return True\n    \n    for i in range(2, len(A)):\n        if A[i] - A[i-1]!= A[i-1] - A[i-2]:\n            return False\n    \n    return True\n    \n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    if n == 3: \n        return 2\n    jacobsthal_num = 1 \n    for i in range(3, n + 1):\n        jacobsthal_num += 2 * jacobsthal_num \n    return jacobsthal_num\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j = [0, 1]\n    if n == 0 or n == 1:\n        return j[n]\n    else:\n        for i in range(2, n+1):\n            j.append(j[i-2] + j[i-1])\n        return j[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # if n is 1, then jacobsthal number is 1\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 0\n    b = 1\n    #List of jacobsthal numbers\n    jacobsthal = [0, 1]\n    #Calculate jacobsthal for n-2, n-1, and n\n    for i in range(n-2):\n        c = a + b\n        a = b\n        b = c\n        jacobsthal.append(c)\n    return jacobsthal[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    n -= 3\n    p0, p1 = 1, 3\n    for i in range(n-1):\n        p0, p1 = p1, p0 + p1\n    return p1\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #assert(is_prime(n))\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 2\n    a, b = 0, 1\n    for i in range(2, n+1):\n        a, b = b, (a+b)%(1000000007)\n    return b\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 2\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 1:\n        return -1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    tuple_list = list(test_list)\n    n = len(tuple_list)\n    min_k_records = []\n    count = 0\n    \n    if n == K:\n        return tuple_list\n    elif n < K:\n        return tuple_list\n    \n    while count < K:\n        min_record = tuple_list[0]\n        for i in range(n):\n            if min_record[1] > tuple_list[i][1]:\n                min_record = tuple_list[i]\n                \n        min_k_records.append(min_record)\n        tuple_list.remove(min_record)\n        count += 1\n    \n    return min_k_records\n    \n    \ndef min_k_list(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    tuple_list = list(test_list)\n    n = len(tuple_list)\n    min_k_records = []\n    count = 0\n    \n    if n == K:\n        return tuple_list\n    elif n < K:\n        return tuple_list\n    \n    while count < K:\n        min_record = tuple_list[0]\n        for i in range(n):\n            if min_record[1] > tuple_list[i][1]:\n                min_record = tuple_list[i]\n                \n        min_k_records.append(min_record)\n        tuple_list.remove(min_record)\n        count += 1\n    \n    return min_k_records\n    \n    \ndef find_largest_value(test_list):\n    '''\n    Write a function to find the largest value from tuple list. https://www.geeksforgeeks.org/python-find-largest-value-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    tuple_list = list(test_list)\n    n = len(tuple_list)\n    \n    largest_value = tuple_list[0][1]\n    \n    for i in range(n):\n        if largest_value < tuple_list[i][1]:\n            largest_value = tuple_list[i][1]\n            \n    return largest_value\n    \n    \ndef find_largest_value_list(test_list):\n    '''\n    Write a function to find the largest value from tuple list. https://www.geeksforgeeks.org/python-find-largest-value-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    tuple_list = list(test_list)\n    n = len(tuple_list)\n    \n    largest_value = tuple_list[0][1]\n    \n    for i in range(n):\n        if largest_value < tuple_list[i][1]:\n            largest_value = tuple_list[i][1]\n            \n    return largest_value\n    \n    \ndef find_largest_value_list_ver2(test_list):\n    '''\n    Write a function to find the largest value from tuple list. https://www.geeksforgeeks.org/python-find-largest-value-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    tuple_list = list(test_list)\n    n = len(tuple_list)\n    \n    largest_value = 0\n    \n    for i in range(n):\n        if tuple_list[i][1] > largest_value:\n            largest_value = tuple_list[i][1]\n            \n    return largest_value\n    \n    \ndef find_value_from_list(test_list, value):\n    '''\n    Write a function to find a record from tuple list. https://www.geeksforgeeks.org/python-find-a-record-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    tuple_list = list(test_list)\n    n = len(tuple_list)\n    \n    found = False\n    \n    for i in range(n):\n        if tuple_list[i][1] == value:\n            found = True\n            \n    if found:\n        return tuple_list[i]\n    else:\n        return None\n    \n    \ndef find_value_from_list_ver2(test_list, value):\n    '''\n    Write a function to find a record from tuple list. https://www.geeksforgeeks.org/python-find-a-record-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    tuple_list = list(test_list)\n    n = len(tuple_list)\n    \n    found = False\n    \n    for i in range(n):\n        if tuple_list[i][1] == value:\n            found = True\n            \n    if found:\n        return tuple_list[i]\n    else:\n        return None\n    \n    \ndef list_duplicates(test_list):\n    '''\n    Write a function to find duplicates from tuple list. https://www.geeksforgeeks.org/python-find-duplicates-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    tuple_list = list(test_list)\n    n = len(tuple_list)\n    \n    found = []\n    \n    for i in range(n):\n        if tuple_list[i] in tuple_list[i+1:]:\n            if tuple_list[i] not in found:\n                found.append(tuple_list[i])\n                \n    return found\n    \n    \ndef find_duplicates(test_list):\n    '''\n    Write a function to find duplicates from tuple list. https://www.geeksforgeeks.org/python-find-duplicates-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    tuple_list = list(test_list)\n    n = len(tuple_list)\n    \n    found = []\n    \n    for i in range(n):\n        if tuple_list[i] in tuple_list[i+1:]:\n            if tuple_list[i] not in found:\n                found.append(tuple_list[i])\n                \n    return found\n    \n    \ndef find_duplicates_list(test_list):\n    '''\n    Write a function to find duplicates from tuple list. https://www.geeksforgeeks.org/python-find-duplicates-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    tuple_list = list(test_list)\n    n = len(tuple_list)\n    \n    found = []\n    \n    for i in range(n):\n        if tuple_list[i] in tuple_list[i+1:]:\n            if tuple_list[i] not in found:\n                found.append(tuple_list[i])\n                \n    return found\n    \n    \ndef get_max_index(test_list, value):\n    '''\n    Write a function to find the index of max value from tuple list. https://www.geeksforgeeks.org/python-find-the-index-of-max-value-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    tuple_list = list(test_list)\n    n = len(tuple_list)\n    \n    max_index = 0\n    \n    for i in range(n):\n        if tuple_list[i][1] == value:\n            max_index = i\n            \n    return max_index\n    \n    \ndef get_max_index_list(test_list, value):\n    '''\n    Write a function to find the index o"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list_1 = sorted(test_list)\n    for i in range(len(test_list_1)):\n        if test_list_1[i][1] < K:\n            K -= test_list_1[i][1]\n        else:\n            print test_list_1[i][0]\n            break\n    return K\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Input: list of tuple, K\n    # Output: the tuple with minimum Kth record\n    res = []\n    min_list = test_list[:K]\n    min_list.sort()\n    res.append(min_list[0])\n    return res\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return\n    \n    #sort the list by the first value of each tuple\n    sorted_list = sorted(test_list, key = lambda tup: tup[0])\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k_list = []\n    for x in range(len(test_list)):\n        if x < K:\n            min_k_list.append(test_list[x])\n        elif x == K:\n            min_k_list.append(test_list[x])\n            break\n        else:\n            min_k_list.append(min(test_list[x-K:x]))\n    return min_k_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) <= K:\n        return test_list\n    test_list = sorted(test_list, key = lambda x: x[1])\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_tuple = sorted(test_list, key = lambda x: x[1])[:K]\n    return [x[0] for x in min_tuple]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return None\n    if len(test_list) < K:\n        return None\n    return min(test_list, key = lambda x: x[0])\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list, key = lambda x: x[K])[0]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    def find_common_elements(l1, l2, l3):\n        common_elements = []\n        index_map = {}\n        for i in range(len(l1)):\n            index_map[l1[i]] = i\n        for i in range(len(l2)):\n            if l2[i] in index_map:\n                common_elements.append(l2[i])\n        for i in range(len(l3)):\n            if l3[i] in index_map:\n                common_elements.append(l3[i])\n        return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    list_c = []\n    for x, y in zip(l1, l2):\n        if x == y:\n            list_c.append(x)\n    for x, y in zip(l1, l3):\n        if x == y:\n            list_c.append(x)\n    for x, y in zip(l2, l3):\n        if x == y:\n            list_c.append(x)\n    return list_c\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if l1 == l2 == l3:\n        return l1\n    l1_l2 = []\n    for l1_elem in l1:\n        if l1_elem in l2:\n            l1_l2.append(l1_elem)\n    for l2_elem in l2:\n        if l2_elem in l1:\n            l1_l2.append(l2_elem)\n    for l3_elem in l3:\n        if l3_elem in l1:\n            l1_l2.append(l3_elem)\n    return l1_l2\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1.sort()\n    l2.sort()\n    l3.sort()\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    indices = [l1.index(i) for i in l1 if i in l2]\n    indices = [indices[i] for i in range(len(indices)) if indices[i] == indices[i-1]]\n    indices = [l3.index(i) for i in l3 if i in l2]\n    indices = [indices[i] for i in range(len(indices)) if indices[i] == indices[i-1]]\n    return indices\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    common_elements.append(l1[i])\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in range(len(l1)) if l1[i] in l2 and l1[i] in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if l1 == l2 == l3:\n        return l1\n    return [i for i in l1 if i in l2 and i in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    a = set(l1)\n    b = set(l2)\n    c = set(l3)\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in a and l2[i] in b and l3[i] in c:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    minimum_number = min(numbers)\n    new_list = []\n    for x in numbers:\n        if x!= minimum_number:\n            new_list.append(x)\n    return min(new_list)\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    min1 = min2 = None\n    for x in numbers:\n        if min1 is None or x < min1:\n            min2 = min1\n            min1 = x\n        elif min2 is None or x < min2:\n            min2 = x\n    return min2\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers = sorted(numbers)\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    min_num = min(numbers)\n    second_min_num = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i]!= min_num and numbers[i]!= second_min_num:\n            second_min_num = numbers[i]\n    return second_min_num\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    first = second = float('inf')\n    for i in numbers:\n        if i < first:\n            second, first = first, i\n        elif i < second and i!= first:\n            second = i\n    return second\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 1:\n        return None\n    else:\n        first = None\n        second = None\n        for x in numbers:\n            if first == None:\n                first = x\n            elif first > x:\n                second = first\n                first = x\n            elif second == None:\n                second = x\n            elif second > x:\n                second = x\n        return second\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if numbers == []:\n        return None\n    smallest = second_smallest = numbers[0]\n    for i in numbers[1:]:\n        if i < smallest:\n            second_smallest = smallest\n            smallest = i\n        elif i < second_smallest:\n            second_smallest = i\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    min_num = min(numbers)\n    sorted_nums = sorted(numbers)\n    \n    second_min_num = sorted_nums[1]\n    \n    return second_min_num\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    print pattern.findall(text)\ndef text_match_zero_one_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+',re.IGNORECASE)\n    print pattern.findall(text)\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*')\n    print pattern.findall(text)\ndef text_match_one_or_more_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*',re.IGNORECASE)\n    print pattern.findall(text)\ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a+')\n    print pattern.findall(text)\ndef text_match_zero_or_more_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a+',re.IGNORECASE)\n    print pattern.findall(text)\ndef text_match_one_or_more_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a*')\n    print pattern.findall(text)\ndef text_match_one_or_more_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a*',re.IGNORECASE)\n    print pattern.findall(text)\ndef text_match_zero_or_more_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a?')\n    print pattern.findall(text)\ndef text_match_zero_or_more_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a?',re.IGNORECASE)\n    print pattern.findall(text)\ndef text_match_zero_or_more_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a+?')\n    print pattern.findall(text)\ndef text_match_zero_or_more_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a+?',re.IGNORECASE)\n    print pattern.findall(text)\ndef text_match_a_or_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b' or an 'b' followed by 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab|ba')\n    print pattern.findall(text)\ndef text_match_a_or_b_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b' or an 'b' followed by 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab|ba',re.IGNORECASE)\n    print pattern.findall(text)\ndef text_match_a_or_b_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b' or an 'b' followed by 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'(ab)|(ba)')\n    print pattern.findall(text)\ndef text_match_a_or_b_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b' or an 'b' followed by 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab|ba',re.IGNORECASE)\n    print pattern.findall(text)\ndef text_match_a_or_b_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b' or an 'b' followed by 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'(a|b)*',re.IGNORECASE)\n    print pattern.findall(text)\ndef text_match_a_or_b_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b' or an 'b' followed by 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'(a|b)*',re.IGNORECASE)\n    print pattern.findall(text)\ndef text_match_a_or_b_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 'b' or an 'b' followed by 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'(a|b)*',re.I)\n    print pattern.findall(text)\ndef text_match_a_or_b_8(text):\n    '''\n    Write "
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab*'\n    if re.match(pattern,text):\n        print('match')\n    else:\n        print('not match')\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r\"\\ba+b\\b\", text)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    return True if re.search(pattern, text) is not None else False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #regex = re.compile(r'ab*')\n    #match = regex.match(text)\n    #if match:\n    #    return match.group()\n    #else:\n    #    return None\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern, text):\n        print('Match found')\n    else:\n        print('No match found')\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match('.*a\\w*b',text)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r'a+b',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a(.*?)b')\n    match_object = re.match(pattern, text)\n    if match_object:\n        print match_object.group()\n    else:\n        print \"No match found!\"\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #count = 0\n    #for x in range(len(test_list)):\n    #    if test_list[x][::-1] in test_list:\n    #        count += 1\n    #return count\n    return len([x for x in test_list if x[::-1] in test_list])\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return len([i for i in test_list if i[::-1] in test_list])\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    rev_list = []\n    for word in test_list:\n        rev_list.append(word[::-1])\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    rev_list = []\n    for elem in test_list:\n        rev_list.append(elem[::-1])\n    count = 0\n    for i in range(len(rev_list)):\n        for j in range(i+1,len(rev_list)):\n            if rev_list[i] == rev_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[len(test_list) - 1 - i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if (test_list[i] == test_list[j][::-1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict_of_pairs = {}\n    for string in test_list:\n        string_reversed = reverse_string(string)\n        if string_reversed in dict_of_pairs:\n            dict_of_pairs[string_reversed] += 1\n        else:\n            dict_of_pairs[string_reversed] = 1\n    return sum(dict_of_pairs.values())\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #Make sure list is a list type\n    if isinstance(list1, list):\n        #initialize empty dictionary\n        result = {}\n        #Iterate over list\n        for x in list1:\n            #If the list is a list\n            if isinstance(x, list):\n                #if the dictionary does not contain the list, add it to the dictionary\n                if x not in result:\n                    result[tuple(x)] = 1\n                #else, increment the value\n                else:\n                    result[tuple(x)] += 1\n        return result\n    #If list1 is not a list, return None\n    else:\n        return None\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = map(tuple, list1)\n    return {k: list1.count(k) for k in set(list1)}\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in list1:\n        sub_list = []\n        for j in i:\n            sub_list.append(j)\n        sub_list = tuple(sub_list)\n        if sub_list in d:\n            d[sub_list] += 1\n        else:\n            d[sub_list] = 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    lists_dict = {}\n    for i in list1:\n        t = tuple(i)\n        if t in lists_dict:\n            lists_dict[t] += 1\n        else:\n            lists_dict[t] = 1\n    return lists_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in list1:\n        sub = tuple(i)\n        if sub in d:\n            d[sub] += 1\n        else:\n            d[sub] = 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def count(list):\n        '''\n        Return the list of tuples where each tuple contains the tuple itself and the number of occurences in the list\n        '''\n        return zip(list, [list.count(i) for i in list])\n    return dict(count(i) for i in list1)\nprint(unique_sublists([1,2,2,1,3]))\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return [tuple(i) for i in set([tuple(i) for i in list1])]\n    # return {list(i) for i in set([tuple(i) for i in list1])}\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in list1:\n        t = tuple(i)\n        if t in d:\n            d[t] += 1\n        else:\n            d[t] = 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dicti = {}\n    for i in list1:\n        if tuple(i) in dicti.keys():\n            dicti[tuple(i)] += 1\n        else:\n            dicti[tuple(i)] = 1\n    return dicti\nprint unique_sublists([1,2,3,[1,2,3]])\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # TODO: write a function to count unique sublists in a list\n    dict = {}\n    for i in range(len(list1)):\n        dict.setdefault(tuple(list1[i]),[]).append(i)\n    return dict\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.count('.') == 1 and num.find('.')!= num.rfind('.')\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    return bool(re.match('^[0-9]{1,}\\.{0,1}[0-9]{0,}$', num))\n    \ndef is_anagram(s, t):\n    '''\n    Write a function to check whether two strings are anagrams of each other.\n    '''\n    import collections\n    return collections.Counter(s) == collections.Counter(t)\n    \ndef calculate_primes(limit):\n    '''\n    Write a function to calculate all the prime numbers less than or equal to a given limit.\n    '''\n    if limit < 1:\n        raise ValueError('limit must be greater than 1')\n    primes = []\n    for num in range(2, limit):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n    \ndef is_prime(num):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for divisor in range(2, num):\n        if num % divisor == 0:\n            return False\n    return True\n    \ndef remove_duplicates(input_list):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    if input_list is None or len(input_list) < 1:\n        raise ValueError('input list is empty')\n    result = []\n    for num in input_list:\n        if num not in result:\n            result.append(num)\n    return result\n    \ndef first_n_smallest(input_list, n):\n    '''\n    Write a function to find the n smallest elements in a given list.\n    '''\n    if input_list is None or len(input_list) < 1:\n        raise ValueError('input list is empty')\n    if n < 1:\n        raise ValueError('n must be greater than 1')\n    if n > len(input_list):\n        return input_list\n    result = []\n    for i in range(n):\n        result.append(min(input_list))\n        input_list.remove(min(input_list))\n    return result\n    \ndef first_n_largest(input_list, n):\n    '''\n    Write a function to find the n largest elements in a given list.\n    '''\n    if input_list is None or len(input_list) < 1:\n        raise ValueError('input list is empty')\n    if n < 1:\n        raise ValueError('n must be greater than 1')\n    if n > len(input_list):\n        return input_list\n    result = []\n    for i in range(n):\n        result.append(max(input_list))\n        input_list.remove(max(input_list))\n    return result\n    \ndef first_n_smallest_pair(input_list, n):\n    '''\n    Write a function to find the n smallest elements in a given list.\n    '''\n    if input_list is None or len(input_list) < 1:\n        raise ValueError('input list is empty')\n    if n < 1:\n        raise ValueError('n must be greater than 1')\n    if n > len(input_list):\n        return input_list\n    result = []\n    for i in range(n):\n        temp = min(input_list)\n        result.append(temp)\n        input_list.remove(temp)\n    return result\n    \ndef first_n_largest_pair(input_list, n):\n    '''\n    Write a function to find the n largest elements in a given list.\n    '''\n    if input_list is None or len(input_list) < 1:\n        raise ValueError('input list is empty')\n    if n < 1:\n        raise ValueError('n must be greater than 1')\n    if n > len(input_list):\n        return input_list\n    result = []\n    for i in range(n):\n        temp = max(input_list)\n        result.append(temp)\n        input_list.remove(temp)\n    return result\n    \ndef remove_nth_element(input_list, n):\n    '''\n    Write a function to remove the nth element in a given list.\n    '''\n    if input_list is None or len(input_list) < 1:\n        raise ValueError('input list is empty')\n    if n < 0 or n >= len(input_list):\n        raise ValueError('n must be between 0 and length of input list')\n    result = input_list[:n] + input_list[n+1:]\n    return result\n    \ndef remove_duplicates_from_list(input_list):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    if input_list is None or len(input_list) < 1:\n        raise ValueError('input list is empty')\n    result = []\n    for num in input_list:\n        if num not in result:\n            result.append(num)\n    return result\n    \ndef flatten_list(input_list):\n    '''\n    Write a function to flatten a given list.\n    '''\n    if input_list is None or len(input_list) < 1:\n        raise ValueError('input list is empty')\n    result = []\n    for item in input_list:\n        if type(item) is list:\n            result.extend(item)\n        else:\n            result.append(item)\n    return result\n    \ndef reverse_list(input_list):\n    '''\n    Write a function to reverse a given list.\n    '''\n    if input_list is None or len(input_list) < 1:\n        raise ValueError('input list is empty')\n    result = []\n    for i in range(len(input_list)-1, -1, -1):\n        result.append(input_list[i])\n    return result\n    \ndef remove_duplicates_from_list_with_order(input_list):\n    '''\n    Write a function to remove duplicates from a given list with order preservation.\n    '''\n    if input_list is None or len(input_list) < 1:\n        raise ValueError('input list is empty')\n    result = []\n    for num in input_list:\n        if num not in result:\n            result.append(num)\n    return result\n    \ndef find_duplicates_in_list(input_list):\n    '''\n    Write a function to find duplicates in a given list.\n    '''\n    if input_list is None or len(input_list) < 1:\n        raise ValueError('input list is empty')\n    result = []\n    for num in input_list:\n        if input_list.count(num) > 1:\n            if num not in result:\n                result.append(num)\n    return result\n    \ndef find_all_duplicates(input_list):\n    '''\n    Write a function to find all the duplicates in a given list.\n    '''\n    if input_list is None or len(input_list) < 1:\n        raise ValueError('input list is empty')\n    result = []\n    for num in input_list:\n        if input_list.count(num) > 1 and num not in result:\n            result.append(num)\n    return result\n    \ndef count_occurrences_in_list(input_list, num):\n    '''\n    Write a function to count the occurrences of a given number in a given list.\n    '''\n    if input_list is None or len(input_list) < 1:\n        raise ValueError('input list is empty')\n    if num is None or len(num) < 1:\n        raise ValueError('num is empty')\n    result = 0\n    for item in input_list:\n        if item == num:\n            result += 1\n    return result\n    \ndef sum_of_squares_of_numbers(input_list):\n    '''\n    Write a function to calculate the sum of the squares of numbers in a given list.\n    '''\n    if input_list is None or len(input_list) < 1:\n        raise ValueError('input list is empty')\n    result = 0\n    for item in input_list:\n        result += item*item\n    return result\n    \ndef swap_elements(input_lis"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if num.count('.') > 1:\n        return False\n    if 'e' in num:\n        return False\n    for i in num:\n        if i not in '1234567890':\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    from decimal import *\n    #x = Decimal('1.1')\n    x = getcontext()\n    x.prec = 2\n    #decimal.getcontext().prec = 2\n    return x.is_normal(num)\n    #return x == Decimal(num)\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    if re.match(r'[+-]?\\d+(.\\d+)?', num):\n        return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return len(num) == 3 and num[0] == '.' and num[1].isalpha() and num[2].isdigit()\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    def is_decimal_num(num):\n        if type(num) == float:\n            if num == int(num):\n                return True\n        return False\n    \n    if num == '0' or num == 0:\n        return True\n    elif len(num) == 1:\n        return True if is_decimal_num(num) else False\n    elif len(num) == 2:\n        return True if is_decimal_num(num) else False\n    else:\n        if is_decimal_num(num[:-1]) and is_decimal_num(num[-1]):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) <= 1:\n        return True\n    else:\n        s = set(arr)\n        if len(s) == len(arr):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # first, we will convert the list to a set, as sets are faster for lookup\n    set_arr = set(arr)\n    \n    # second, we will convert the set back to a list, this will contain the unique elements\n    unique_arr = list(set_arr)\n    \n    # we will check if the list has only one element\n    if len(unique_arr) == 1:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    temp = arr[:]\n    temp.sort()\n    for i in range(len(temp)-1):\n        if temp[i] == temp[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set_arr = set(arr)\n    for i in set_arr:\n        if arr.count(i)>1:\n            return False\n    return True\n    \n    \ndef unique_Element2(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr)==len(set(arr))\n    \n    \ndef Unique_element_Dict(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    d = {}\n    for i in arr:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\n    \n    \n    \ndef Unique_element_Dict2(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\n    \n    \ndef Unique_element_Dict3(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d[i]=d.get(i,0)+1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\n    \n    \ndef Unique_element_Dict4(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n    \n    \ndef Unique_element_Dict5(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d.setdefault(i,0)+1\n    return d\n    \n    \ndef Unique_element_Dict6(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d[i]=d.get(i,0)+1\n    return d\n    \n    \ndef Unique_element_Dict7(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d[i]=d.get(i,0)+1\n    return len(d)==len(arr)\n    \n    \ndef Unique_element_Dict8(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d[i]=d.get(i,0)+1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\n    \n    \ndef Unique_element_Dict9(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d[i]=d.get(i,0)+1\n    return len(d)==len(arr)\n    \n    \ndef Unique_element_Dict10(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d[i]=d.get(i,0)+1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\n    \n    \ndef Unique_element_Dict11(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d[i]=d.get(i,0)+1\n    return len(d)==len(arr)\n    \n    \ndef Unique_element_Dict12(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d.setdefault(i,0)+1\n    return d\n    \n    \ndef Unique_element_Dict13(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d.setdefault(i,0)+1\n    return len(d)==len(arr)\n    \n    \ndef Unique_element_Dict14(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d.setdefault(i,0)+1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\n    \n    \ndef Unique_element_Dict15(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d[i]=d.get(i,0)+1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\n    \n    \ndef Unique_element_Dict16(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d.setdefault(i,0)+1\n    return len(d)==len(arr)\n    \n    \ndef Unique_element_Dict17(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d.setdefault(i,0)+1\n    return len(d)==len(arr)\n    \n    \ndef Unique_element_Dict18(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d.get(i,0)+1\n    return len(d)==len(arr)\n    \n    \ndef Unique_element_Dict19(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d.get(i,0)+1\n    return len(d)==len(arr)\n    \n    \ndef Unique_element_Dict20(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d[i]=d.get(i,0)+1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\n    \n    \ndef Unique_element_Dict21(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d.get(i,0)+1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\n    \n    \ndef Unique_element_Dict22(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        d.ge"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for ele in arr:\n        if ele in arr:\n            if arr.index(ele) == arr.count(ele):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    l = list(set(arr))\n    if len(l) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    dict = {}\n    for i in range(len(arr)):\n        if arr[i] in dict:\n            return False\n        else:\n            dict[arr[i]] = arr[i]\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if arr==[]:\n        return False\n    else:\n        if len(arr)==1:\n            return True\n        else:\n            arr=set(arr)\n            if len(arr)==1:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) > 1:\n        arr.sort()\n        if arr[0] == arr[1]:\n            return False\n        else:\n            return True\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return True\n    if monthnum3 == 2:\n        return True\n    if monthnum3 == 3:\n        return True\n    if monthnum3 == 4:\n        return True\n    if monthnum3 == 5:\n        return True\n    if monthnum3 == 6:\n        return True\n    if monthnum3 == 7:\n        return True\n    if monthnum3 == 8:\n        return True\n    if monthnum3 == 9:\n        return True\n    if monthnum3 == 10:\n        return True\n    if monthnum3 == 11:\n        return True\n    if monthnum3 == 12:\n        return True\n    if monthnum3 == 13:\n        return False\n    if monthnum3 == 14:\n        return False\n    if monthnum3 == 15:\n        return False\n    if monthnum3 == 16:\n        return False\n    if monthnum3 == 17:\n        return False\n    if monthnum3 == 18:\n        return False\n    if monthnum3 == 19:\n        return False\n    if monthnum3 == 20:\n        return False\n    if monthnum3 == 21:\n        return False\n    if monthnum3 == 22:\n        return False\n    if monthnum3 == 23:\n        return False\n    if monthnum3 == 24:\n        return False\n    if monthnum3 == 25:\n        return False\n    if monthnum3 == 26:\n        return False\n    if monthnum3 == 27:\n        return False\n    if monthnum3 == 28:\n        return False\n    if monthnum3 == 29:\n        return False\n    if monthnum3 == 30:\n        return True\n    if monthnum3 == 31:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_list = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if 1 <= monthnum3 <= 12:\n        return True\n    else:\n        return False\ndef get_year_day(monthnum3):\n    '''\n    Write a function to get the first and last day of the month for the given month number.\n    '''\n    if check_monthnumber_number(monthnum3):\n        if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n            return [31]\n        elif monthnum3 in [4, 6, 9, 11]:\n            return [30]\n        else:\n            return [29, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    else:\n        return None\ndef get_week_day(monthnum3):\n    '''\n    Write a function to get the first and last day of the week for the given month number.\n    '''\n    if check_monthnumber_number(monthnum3):\n        if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n            return ['Sunday', 'Saturday']\n        elif monthnum3 in [4, 6, 9, 11]:\n            return ['Sunday', 'Monday']\n        else:\n            return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    else:\n        return None\ndef find_day(year, monthnum3, daynum3):\n    '''\n    Write a function to find the first and last day of the month for the given month number and year.\n    '''\n    if check_monthnumber_number(monthnum3) and check_year_number(year):\n        if year < 0:\n            return None\n        else:\n            if 1 <= monthnum3 <= 12:\n                return [daynum3, get_year_day(monthnum3)[daynum3 - 1] + 1]\n            else:\n                return None\n    else:\n        return None\ndef get_month_day(monthnum3):\n    '''\n    Write a function to get the first and last day of the month for the given month number.\n    '''\n    if check_monthnumber_number(monthnum3):\n        return [1, get_year_day(monthnum3)[0] + 1]\n    else:\n        return None\ndef find_weekday(year, monthnum3, daynum3):\n    '''\n    Write a function to find the first and last day of the week for the given month number and year.\n    '''\n    if check_monthnumber_number(monthnum3) and check_year_number(year):\n        if year < 0:\n            return None\n        else:\n            firstday = get_week_day(monthnum3)[0]\n            lastday = get_week_day(monthnum3)[-1]\n            if firstday == 'Sunday' and daynum3 >= 1:\n                return [daynum3, lastday + 1]\n            elif firstday == 'Monday' and daynum3 <= 1:\n                return [daynum3, lastday + 1]\n            elif firstday == 'Tuesday' and daynum3 <= 2:\n                return [daynum3, lastday + 1]\n            elif firstday == 'Wednesday' and daynum3 <= 3:\n                return [daynum3, lastday + 1]\n            elif firstday == 'Thursday' and daynum3 <= 4:\n                return [daynum3, lastday + 1]\n            elif firstday == 'Friday' and daynum3 <= 5:\n                return [daynum3, lastday + 1]\n            elif firstday == 'Saturday' and daynum3 <= 6:\n                return [daynum3, lastday + 1]\n            else:\n                return None\n    else:\n        return None\ndef is_leapyear(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if check_year_number(year):\n        if year % 400 == 0:\n            return True\n        elif year % 100 == 0:\n            return False\n        elif year % 4 == 0:\n            return True\n        else:\n            return False\n    else:\n        return None\ndef find_next_day(year, monthnum3, daynum3):\n    '''\n    Write a function to find the first and last day of the month for the given month number and year.\n    '''\n    if check_monthnumber_number(monthnum3) and check_year_number(year):\n        if year < 0:\n            return None\n        else:\n            if 1 <= monthnum3 <= 12:\n                if daynum3 > get_year_day(monthnum3)[-1]:\n                    if is_leapyear(year):\n                        return [1, get_year_day(monthnum3 + 1)[0] + 1]\n                    else:\n                        return [1, get_year_day(monthnum3 + 1)[0] + 1]\n                else:\n                    return [daynum3, get_year_day(monthnum3)[daynum3 - 1] + 1]\n            else:\n                return None\n    else:\n        return None\ndef find_previous_day(year, monthnum3, daynum3):\n    '''\n    Write a function to find the first and last day of the month for the given month number and year.\n    '''\n    if check_monthnumber_number(monthnum3) and check_year_number(year):\n        if year < 0:\n            return None\n        else:\n            if 1 <= monthnum3 <= 12:\n                if daynum3 == get_year_day(monthnum3)[0]:\n                    return [daynum3, 1]\n                else:\n                    return [daynum3 - 1, get_year_day(monthnum3)[daynum3 - 1] - 1]\n            else:\n                return None\n    else:\n        return None\ndef find_first_day(year, monthnum3):\n    '''\n    Write a function to find the first day of the month for the given month number and year.\n    '''\n    if check_monthnumber_number(monthnum3) and check_year_number(year):\n        if year < 0:\n            return None\n        else:\n            return [1, get_year_day(monthnum3)[0] - 1]\n    else:\n        return None\ndef find_last_day(year, monthnum3):\n    '''\n    Write a function to find the last day of the month for the given month number and year.\n    '''\n    if check_monthnumber_number(monthnum3) and check_year_number(year):\n        if year < 0:\n            return None\n        else:\n            return [get_year_day(monthnum3)[-1], 365]\n    else:\n        return None\ndef is_valid_date(year, monthnum3, daynum3):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if check_monthnumber_number(monthnum3) and check_year_number(year):\n        if year < 0:\n            return False\n        else:\n            if 1 <= monthnum3 <= 12:\n                if 1 <= daynum3 <= get_year_day(monthnum3)[-1]:\n                    return True\n                elif get_year_day(monthnum3)[-1] - daynum3 == 1:\n                    if is_leapyear(year):\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n    else:\n        return None\ndef find_next_date(year, monthnum3, daynum3):\n    '''\n    Write a function to find the first and last day of the month for the given month number and year.\n    '''\n    if check_monthnumber_number(monthnum3) and check_year_number(year):\n        if year < 0:\n            return None\n        else:\n            if 1 <= monthnum3 <= 12:\n                if daynum3 > get_year_day(monthnum3)[-1]:\n                    if is_leapyear(year):\n                        return [1, get_year_day(monthnum3 + 1)[0] + 1]\n                    else:\n                        retur"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3) > 12 or int(monthnum3) < 1:\n        return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print('30 days')\n    elif monthnum3 == 2:\n        print('29 days')\n    else:\n        print('Not a valid month')\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return(True)\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return(True)\n    else:\n        return(False)\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        print 'wrong month number'\n    elif monthnum3 == 12:\n        print 'December'\n    elif monthnum3 == 1:\n        print 'January'\n    elif monthnum3 == 2:\n        print 'February'\n    elif monthnum3 == 3:\n        print 'March'\n    elif monthnum3 == 4:\n        print 'April'\n    elif monthnum3 == 5:\n        print 'May'\n    elif monthnum3 == 6:\n        print 'June'\n    elif monthnum3 == 7:\n        print 'July'\n    elif monthnum3 == 8:\n        print 'August'\n    elif monthnum3 == 9:\n        print 'September'\n    elif monthnum3 == 10:\n        print 'October'\n    elif monthnum3 == 11:\n        print 'November'\n    elif monthnum3 == 12:\n        print 'December'\n    return\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n        return True\n    elif (monthnum3 == 2):\n        if (yearnum3 % 400 == 0):\n            return True\n        elif (yearnum3 % 4 == 0 and yearnum3 % 100!= 0):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # inplace sorting\n    arr.sort()\n    min_diff = 9999\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    i = 0\n    j = len(arr)-1\n    result = arr[j] - arr[i]\n    while i < j:\n        if abs(arr[i] - arr[j]) < result:\n            result = abs(arr[i] - arr[j])\n        if arr[i] < arr[j]:\n            i+=1\n        else:\n            j-=1\n    return result\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff == 0:\n            print arr[i],arr[i+1]\n        elif diff < 0:\n            print arr[i],arr[i+1]\n        elif diff > 0:\n            print arr[i+1],arr[i]\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    minimum = arr[n-1] - arr[0]\n    for i in range(0,n-1):\n        minimum = min(minimum, arr[i+1] - arr[i])\n    return minimum\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    arr_len = len(arr)\n    max_range = arr_len-1\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n < 2:\n        return -1\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    res = arr[1] - arr[0]\n    for i in range(1,n-1):\n        res = min(res, arr[i] - arr[i-1])\n    return res\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        curr_diff = arr[i+1] - arr[i]\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1:\n        return 0\n    arr.sort()\n    if n % 2 == 0:\n        return (arr[n//2] - arr[n//2 - 1])\n    else:\n        return (arr[n//2] - arr[n//2 - 1])\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    \n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n        \n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n    \nprint(number_ctr(\"1234\"))\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n    \nprint number_ctr('d2r5')\nprint number_ctr('12345')\nprint number_ctr('r2')\nprint number_ctr('s')\nprint number_ctr('R2')\nprint number_ctr('rd2')\nprint number_ctr('d12345')\nprint number_ctr('ab123')\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\nnumber_ctr('1234')\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # count = 0\n    # for i in str:\n    #     if i.isdigit():\n    #         count = count + 1\n    # return count\n    return len([char for char in str if char.isdigit()])\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    print \"Number of digits in %s is %d\" % (str, len(str))\n    return\nnumber_ctr('python')\nnumber_ctr('I love python')\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n % 2 == 0: \n        return False\n    else: \n        if n == 1:\n            return False\n        else: \n            a = [1] * (n + 1) \n            a[2] = 2\n            for i in range(3, n + 1): \n                for j in range(2, int(i**0.5 + 1)): \n                    if i % j == 0: \n                        a[i] = 0\n                        break\n            return sum(a)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_list = []\n    polite_list.append(1)\n    polite_list.append(0)\n    for i in range(2,n+1):\n        #print(i)\n        if(is_polite_helper(i)):\n            polite_list.append(i)\n    return polite_list[n]\ndef is_polite_helper(n):\n    if(n == 1):\n        return 1\n    if(n == 2):\n        return 0\n    if(n % 2 == 0):\n        return 0\n    if(n % 3 == 0):\n        return 1\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if(n % i == 0):\n            return 0\n    return 1"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 4\n    else:\n        # If n is odd, n + 1 is the nth prime\n        if n % 2 == 1: \n            return n + 1\n        # If n is even, the nth prime is 2 * n * (n + 1) / 2\n        else:\n            return 2 * n * (n + 1) / 2\n    \ndef prime_sum(n): \n    '''\n    Write a function to find sum of all primes below n. geeksforgeeks.org/sum-of-all-primes-below-n/\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else:\n        return n + prime_sum(n - 1)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #Cannot have more than 2 digits\n    if n>9:\n        return \"Please give a number less than or equal to 9\"\n    #0 is not a polite number\n    if n==0:\n        return 0\n    #Calculate the length of number\n    l=len(str(n))\n    #Store the count of zeros\n    c=0\n    #Multiply the factorial of n\n    for i in range(1,n+1):\n        fact=math.factorial(i)\n        c+=fact//math.factorial(i)%10\n        #1 is a polite number\n        if i==1:\n            return 1\n        #If c is equal to l, number is polite\n        if c==l:\n            return 1\n    return 0\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2*is_polite(n-1) - is_polite(n-2) + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    import math\n    #for any n\n    # 1+2+...+n = n(n+1)/2\n    # n = sqrt(n(n+1)/2)\n    #n(n+1)/2 = n^2 + n\n    #n = int(math.sqrt(n*(n+1)/2))\n    #when n is even \n    # n^2 - n = 1\n    # when n is odd \n    # n^2 - n + 1 = 0\n    #n^2 - n = -1\n    n = int(math.sqrt(n*(n+1)/2))\n    #when n is even \n    if n%2 == 0:\n        n = n/2\n        i = 1\n        while i <= n:\n            if (i*(i+1)/2) == n:\n                return True\n            i += 1\n        return False\n    #when n is odd \n    elif n%2!= 0:\n        i = 1\n        while i <= n:\n            if (i*(i+1)/2) == n:\n                return True\n            i += 1\n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1: \n        return 1\n    if n==2: \n        return 2\n    if n==3: \n        return 3\n    polite=[]\n    for i in range(1,n+1): \n        l=len(polite)\n        for j in range(1,l+1): \n            if (i%j==0): \n                polite.append(i)\n                break\n        if (i%j!=0) and (i>=polite[-1]): \n            polite.append(i)\n    return polite[-1]\ndef is_polite2(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1: \n        return 1\n    if n==2: \n        return 2\n    if n==3: \n        return 3\n    i=1\n    while(True):\n        for j in range(2,int(math.sqrt(i))+1): \n            if (i%j==0): \n                break\n        else:\n            if(i>=n): \n                return i\n        i+=1\ndef prime_factorization(n): \n    '''\n    Returns prime factorization of n.\n    '''\n    factors = {}\n    i = 2\n    while i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            if i not in factors:\n                factors[i] = 0\n            factors[i] += 1\n    return factors\ndef nth_polite(n):\n    '''\n    Return nth polite number.\n    '''\n    factors = prime_factorization(n)\n    max = 0\n    for key in factors:\n        if factors[key] > max:\n            max = factors[key]\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        ans=[]\n        for key in factors:\n            if factors[key]==max:\n                ans.append(key)\n        return int(math.prod(ans))\ndef nth_polite2(n):\n    '''\n    Returns nth polite number.\n    '''\n    factors = prime_factorization(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        ans=[]\n        for key in factors:\n            if factors[key]==max(factors.values()):\n                ans.append(key)\n        return int(math.prod(ans))\ndef nth_polite3(n):\n    '''\n    Returns nth polite number.\n    '''\n    factors = prime_factorization(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        ans=[]\n        for key in factors:\n            if factors[key]==max(factors.values()):\n                ans.append(key)\n        return int(math.prod(ans))\ndef nth_polite4(n):\n    '''\n    Returns nth polite number.\n    '''\n    factors = prime_factorization(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        ans=[]\n        for key in factors:\n            if factors[key]==max(factors.values()):\n                ans.append(key)\n        return int(math.prod(ans))\ndef nth_polite5(n):\n    '''\n    Returns nth polite number.\n    '''\n    factors = prime_factorization(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        ans=[]\n        for key in factors:\n            if factors[key]==max(factors.values()):\n                ans.append(key)\n        return int(math.prod(ans))\ndef nth_polite6(n):\n    '''\n    Returns nth polite number.\n    '''\n    factors = prime_factorization(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        ans=[]\n        for key in factors:\n            if factors[key]==max(factors.values()):\n                ans.append(key)\n        return int(math.prod(ans))\ndef nth_polite7(n):\n    '''\n    Returns nth polite number.\n    '''\n    factors = prime_factorization(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        ans=[]\n        for key in factors:\n            if factors[key]==max(factors.values()):\n                ans.append(key)\n        return int(math.prod(ans))\ndef nth_polite8(n):\n    '''\n    Returns nth polite number.\n    '''\n    factors = prime_factorization(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        ans=[]\n        for key in factors:\n            if factors[key]==max(factors.values()):\n                ans.append(key)\n        return int(math.prod(ans))\ndef nth_polite9(n):\n    '''\n    Returns nth polite number.\n    '''\n    factors = prime_factorization(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        ans=[]\n        for key in factors:\n            if factors[key]==max(factors.values()):\n                ans.append(key)\n        return int(math.prod(ans))\ndef nth_polite10(n):\n    '''\n    Returns nth polite number.\n    '''\n    factors = prime_factorization(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        ans=[]\n        for key in factors:\n            if factors[key]==max(factors.values()):\n                ans.append(key)\n        return int(math.prod(ans))\ndef nth_polite11(n):\n    '''\n    Returns nth polite number.\n    '''\n    factors = prime_factorization(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        ans=[]\n        for key in factors:\n            if factors[key]==max(factors.values()):\n                ans.append(key)\n        return int(math.prod(ans))\ndef nth_polite12(n):\n    '''\n    Returns nth polite number.\n    '''\n    factors = prime_factorization(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        ans=[]\n        for key in factors:\n            if factors[key]==max(factors.values()):\n                ans.append(key)\n        return int(math.prod(ans))\ndef nth_polite13(n):\n    '''\n    Returns nth polite number.\n    '''\n    factors = prime_factorization(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0 or n == 1: \n        return True\n    if n == 2: \n        return False\n    return ((n % 2 == 0)!= (n % 3 == 0)) \n    \ndef roman_to_int(str):\n    '''\n    Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n    Symbol       Value\n    I             1\n    V             5\n    X             10\n    L             50\n    C             100\n    D             500\n    M             1000\n    \n    For example, two is written as II in Roman numeral, just two one's added together.\n    Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII,\n    which is XX + V + II.\n    \n    Roman numerals are usually written largest to smallest from left to right. \n    However, the numeral for four is not IIII. Instead, the number four is written as IV.\n    Because the one is before the five we subtract it making four. \n    The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n    \n    I can be placed before V (5) and X (10) to make 4 and 9. \n    X can be placed before L (50) and C (100) to make 40 and 90. \n    C can be placed before D (500) and M (1000) to make 400 and 900.\n    \n    Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.\n    \n    Example 1:\n    \n    Input: \"III\"\n    Output: 3\n    \n    Example 2:\n    \n    Input: \"IV\"\n    Output: 4\n    \n    Example 3:\n    \n    Input: \"IX\"\n    Output: 9\n    \n    Example 4:\n    \n    Input: \"LVIII\"\n    Output: 58\n    Explanation: L = 50, V= 5, III = 3.\n    \n    Example 5:\n    \n    Input: \"MCMXCIV\"\n    Output: 1994\n    Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n    \n    \n    Notes:\n    The number of symbols used is within the range [1, 3999].\n    '''\n    # Convert romans to numbers using dictionaries\n    roman_numeral_int = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n    \n    # Initiate to hold the result\n    int_num = 0\n    \n    # loop over the string\n    for i in xrange(len(str)):\n        if roman_numeral_int[str[i]] >= roman_numeral_int[str[i-1]]:\n            int_num += roman_numeral_int[str[i]]\n        else:\n            int_num -= roman_numeral_int[str[i]]\n    \n    return int_num\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = []\n    polite_number = 1\n    #first polite number is 1\n    for i in range(1,n):\n        polite_number += i\n        polite_numbers.append(polite_number)\n    #returns index of the polite number\n    return polite_numbers.index(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    k = 2\n    count = 1\n    while count<n:\n        flag = 0\n        if math.factorial(k)>=n:\n            break\n        for i in range(1,k+1):\n            if n%i == 0:\n                flag = 1\n                break\n        if flag == 0:\n            count += 1\n        k += 1\n    return k\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # L1 = l1[::2]\n    # L2 = l1[1::2]\n    # return zip(L1,L2)\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Iterate over list in a single pass\n    out = []\n    for x, y in zip(l1, l1[1:]):\n        out.append([x, y])\n    return out\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2=[]\n    for i in range(0,len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1)%2==0:\n        return [l1[i]+l1[i+1] for i in range(0,len(l1),2)]\n    else:\n        return [l1[i]+l1[i+1] for i in range(0,len(l1)-1,2)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = l1[:]\n    for item in l:\n        l.append(item)\n    res = []\n    for item in range(1,len(l)):\n        res.append([l[item],l[item-1]])\n    return res\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    l1.append(l1[-1])\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return l2\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    dict = {}\n    for i in range(0, len(arr)):\n        if sum - arr[i] in dict:\n            return [dict[sum - arr[i]], i]\n        else:\n            dict[arr[i]] = i\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # arr = [1, 5, 7, -1, 5, 4]\n    # sum = 10\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    mapper = {}\n    for num in arr:\n        if mapper.get(num):\n            mapper[num] += 1\n        else:\n            mapper[num] = 1\n    \n    count = 0\n    for num in arr:\n        if (sum - num) in mapper and mapper.get(sum - num):\n            count += mapper.get(sum - num)\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pass\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return len(arr) * (len(arr) - 1) // 2\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        if (sum - arr[i]) in arr:\n            pairs_count = pairs_count + 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                count+=1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    d = {}\n    for i in xrange(len(arr)):\n        if sum-arr[i] in d:\n            return (d[sum-arr[i]]+1, i)\n        d[arr[i]] = i\n    return (-1, -1)\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [item for item in li1 + li2 if item not in li1 or item not in li2]\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [li1[i] for i in range(len(li1)) if li1[i] not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n    \ndef WriteToFile(filename,header,rows,delimiter=','):\n    '''\n    Write a python function to write data to a file\n    '''\n    f = open(filename,'w')\n    f.write(header)\n    f.write(delimiter)\n    for i in rows:\n        f.write(str(i))\n        f.write(delimiter)\n    f.close()\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [i for i in li1 if i not in li2]\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    li_dif = []\n    for i in li1:\n        if i not in li2:\n            li_dif.append(i)\n    for i in li2:\n        if i not in li1:\n            li_dif.append(i)\n    return li_dif\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= n :\n        i = i + 2\n        sum = sum + (i**4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    numbers = []\n    while n : \n        numbers.append(n)\n        n -= 2\n    return sum(map(lambda x : x ** 4, numbers))\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # return n**4 + (n-1)**4\n    return n*(n**4+n**3)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 :\n        print \"Enter a positive number\"\n        return\n    sum = 0\n    for i in range(n) :\n        if i%2!= 0 :\n            sum = sum + i**4\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0: \n        return 0\n    else:\n        return (n**4) + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    i=0\n    num=1\n    summ=0\n    while i<=n :\n        if num%2==1 :\n            summ = summ + num**4\n        i=i+1\n        num=num+1\n    return summ\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    return (n*(n+1)*(2*n+1))/6\n    \nprint odd_num_sum(100)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    assert n>=1\n    sum = 0\n    for i in range(n) :\n        if (i+1)%2!= 0 :\n            sum += (i+1)**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(x**4 for x in range(1, n, 2))\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            sum = sum + i**4\n    return sum\n    \n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    left_par = ['(', '{', '[']\n    right_par = [')', '}', ']']\n    \n    par_count = {'(': 0, '{': 0, '[': 0}\n    \n    for i in range(len(exp)):\n        if exp[i] in left_par:\n            par_count[exp[i]] += 1\n        elif exp[i] in right_par:\n            if par_count[exp[i]] == 0:\n                return False\n            par_count[exp[i]] -= 1\n    \n    for item in par_count:\n        if par_count[item]!= 0:\n            return False\n    \n    return True\n    \n    \ndef swap_adjacent(exp):\n    '''\n    Write a function to convert a given expression to infix expression to an expression that has the same result. https://www.geeksforgeeks.org/swap-adjacent-nodes-expression-tree/\n    '''\n    \n    if exp == '':\n        return exp\n    \n    new_exp = ''\n    \n    for i in range(len(exp)):\n        if exp[i] == '+' or exp[i] == '-':\n            new_exp += exp[i]\n            new_exp += exp[i+1]\n        else:\n            new_exp += exp[i]\n    \n    return new_exp\n    \n    \ndef infix_to_postfix(infix):\n    '''\n    Write a function to convert a given infix expression to postfix expression\n    '''\n    \n    \n    operator = ['+', '-', '*', '/', '^']\n    \n    exp = deque()\n    \n    for i in range(len(infix)):\n        if infix[i] not in operator:\n            exp.append(infix[i])\n        elif infix[i] == '-':\n            if infix[i-1] == '(' or infix[i-1] == ')' or infix[i-1] == '{' or infix[i-1] == '}':\n                exp.append(infix[i])\n            else:\n                j = i-1\n                while infix[j]!= '(' and infix[j]!= ')' and infix[j]!= '{' and infix[j]!= '}':\n                    exp.append(infix[j])\n                    j -= 1\n                exp.append(infix[i])\n        elif infix[i] == '+':\n            if infix[i-1] == '(' or infix[i-1] == ')' or infix[i-1] == '{' or infix[i-1] == '}':\n                exp.append(infix[i])\n            else:\n                j = i-1\n                while infix[j]!= '(' and infix[j]!= ')' and infix[j]!= '{' and infix[j]!= '}':\n                    exp.append(infix[j])\n                    j -= 1\n                exp.append(infix[i])\n        elif infix[i] == '*':\n            if infix[i-1] == '(' or infix[i-1] == ')' or infix[i-1] == '{' or infix[i-1] == '}':\n                exp.append(infix[i])\n            else:\n                j = i-1\n                while infix[j]!= '(' and infix[j]!= ')' and infix[j]!= '{' and infix[j]!= '}':\n                    exp.append(infix[j])\n                    j -= 1\n                exp.append(infix[i])\n        elif infix[i] == '/':\n            if infix[i-1] == '(' or infix[i-1] == ')' or infix[i-1] == '{' or infix[i-1] == '}':\n                exp.append(infix[i])\n            else:\n                j = i-1\n                while infix[j]!= '(' and infix[j]!= ')' and infix[j]!= '{' and infix[j]!= '}':\n                    exp.append(infix[j])\n                    j -= 1\n                exp.append(infix[i])\n        elif infix[i] == '^':\n            if infix[i-1] == '(' or infix[i-1] == ')' or infix[i-1] == '{' or infix[i-1] == '}':\n                exp.append(infix[i])\n            else:\n                j = i-1\n                while infix[j]!= '(' and infix[j]!= ')' and infix[j]!= '{' and infix[j]!= '}':\n                    exp.append(infix[j])\n                    j -= 1\n                exp.append(infix[i])\n    \n    result = ''\n    for i in range(len(exp)):\n        result += exp[i]\n    \n    return result\n    \n    \ndef infix_to_prefix(infix):\n    '''\n    Write a function to convert a given infix expression to prefix expression\n    '''\n    \n    operator = ['+', '-', '*', '/', '^']\n    \n    exp = deque()\n    \n    for i in range(len(infix)):\n        if infix[i] not in operator:\n            exp.append(infix[i])\n        elif infix[i] == '-':\n            if infix[i+1] == '(':\n                exp.append(infix[i])\n            else:\n                j = i+1\n                while infix[j]!= ')' and infix[j]!= '(':\n                    exp.append(infix[j])\n                    j += 1\n                exp.append(infix[i])\n        elif infix[i] == '+':\n            if infix[i-1] == '(':\n                exp.append(infix[i])\n            else:\n                j = i-1\n                while infix[j]!= ')' and infix[j]!= '(':\n                    exp.append(infix[j])\n                    j -= 1\n                exp.append(infix[i])\n        elif infix[i] == '*':\n            if infix[i+1] == '(':\n                exp.append(infix[i])\n            else:\n                j = i+1\n                while infix[j]!= ')' and infix[j]!= '(':\n                    exp.append(infix[j])\n                    j += 1\n                exp.append(infix[i])\n        elif infix[i] == '/':\n            if infix[i+1] == '(':\n                exp.append(infix[i])\n            else:\n                j = i+1\n                while infix[j]!= ')' and infix[j]!= '(':\n                    exp.append(infix[j])\n                    j += 1\n                exp.append(infix[i])\n        elif infix[i] == '^':\n            if infix[i-1] == '(':\n                exp.append(infix[i])\n            else:\n                j = i-1\n                while infix[j]!= ')' and infix[j]!= '(':\n                    exp.append(infix[j])\n                    j -= 1\n                exp.append(infix[i])\n    \n    result = ''\n    for i in range(len(exp)):\n        result += exp[i]\n    \n    return result\n    \n    \ndef infix_to_postfix_reverse(infix):\n    '''\n    Write a function to convert a given infix expression to postfix expression to reverse order of operations. https://www.geeksforgeeks.org/reverse-order-of-operations/\n    '''\n    \n    operator = ['+', '-', '*', '/', '^']\n    \n    exp = deque()\n    \n    for i in range(len(infix)):\n        if infix[i] not in operator:\n            exp.append(infix[i])\n        elif infix"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = []\n    for i in exp:\n        if i in ['(','{','[']:\n            s.append(i)\n        else:\n            if not s:\n                return False\n            else:\n                if i == ')':\n                    if s[-1]!= '(':\n                        return False\n                    s.pop()\n                if i == '}':\n                    if s[-1]!= '{':\n                        return False\n                    s.pop()\n                if i == ']':\n                    if s[-1]!= '[':\n                        return False\n                    s.pop()\n    if not s:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    bracket = []\n    for c in exp:\n        if c == '(':\n            bracket.append('(')\n        elif c == ')':\n            if len(bracket) == 0:\n                return False\n            bracket.pop()\n    return True if len(bracket) == 0 else False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return False\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if not exp:\n        return True\n    stack = []\n    for c in exp:\n        if c == ')' and not stack or c == '(' and stack[-1]!= '(':\n            return False\n        elif c == ')' and stack[-1] == '(':\n            stack.pop()\n        else:\n            stack.append(c)\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        elif char == '}':\n            if stack and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_brackets = ['{', '(', '[']\n    close_brackets = ['}', ')', ']']\n    for item in exp:\n        if item in open_brackets:\n            stack.append(item)\n        elif item in close_brackets:\n            pos = close_brackets.index(item)\n            if len(stack) > 0 and open_brackets[pos] == stack[-1]:\n                stack.pop()\n            else:\n                return False\n    return True if len(stack) == 0 else False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_list = ['(', '{', '[']\n    close_list = [')', '}', ']']\n    stack = []\n    for i in exp:\n        if i in open_list:\n            stack.append(i)\n        elif i in close_list:\n            pos = close_list.index(i)\n            if ((len(stack) > 0) and\n                (open_list[pos] == stack[len(stack)-1])):\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    '''\n    if len(exp) == 0:\n        return True\n    \n    stack = []\n    for i in exp:\n        if i in '({[':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            if i == ')' and stack[-1]!= '(':\n                return False\n            if i == '}' and stack[-1]!= '{':\n                return False\n            if i == ']' and stack[-1]!= '[':\n                return False\n            stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n    '''\n    \n    '''\n    if len(exp) == 0:\n        return True\n    stack = []\n    for i in exp:\n        if i == '(' or i == '{' or i == '[':\n            stack.append(i)\n        if i == ')' and i == ']' and i == '}':\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '(' and (i!= ')' or i!= ']' or i!= '}'):\n                return False\n            if stack[-1] == '{' and (i!= '}' or i!= ']'):\n                return False\n            if stack[-1] == '[' and (i!= ']'):\n                return False\n            stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n    '''\n    \n    # simplified version of above\n    if len(exp) == 0:\n        return True\n    stack = []\n    for i in exp:\n        if i == '(' or i == '{' or i == '[':\n            stack.append(i)\n        if i == ')' and i == ']' and i == '}':\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '(' and (i!= ')' or i!= ']' or i!= '}'):\n                return False\n            if stack[-1] == '{' and (i!= '}' or i!= ']'):\n                return False\n            if stack[-1] == '[' and (i!= ']'):\n                return False\n            stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    open_bracket = ['(', '{', '[']\n    close_bracket = [')', '}', ']']\n    for bracket in exp:\n        if bracket in open_bracket:\n            stack.append(bracket)\n        elif bracket in close_bracket:\n            pos = close_bracket.index(bracket)\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if not(open_bracket[pos] == top):\n                    return False\n    if len(stack)!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str is None:\n        return\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in range(len(test_str)):\n        if len(test_str[i:i+K]) == K:\n            test_str = test_str.replace(test_str[i:i+K], \"\")\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_list = test_str.split(' ')\n    for i in range(len(str_list)):\n        if len(str_list[i]) == K:\n            str_list[i] = ''\n    \n    for i in range(len(str_list)):\n        if str_list[i] == '':\n            str_list.remove('')\n    \n    for i in range(len(str_list)):\n        if str_list[i] == '':\n            str_list.remove('')\n    \n    return''.join(str_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return''.join(words)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    test_str = test_str.split(' ')\n    res = []\n    for word in test_str:\n        if len(word) == K:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    k_length_words = []\n    \n    words = test_str.split()\n    \n    for word in words:\n        if len(word) == K:\n            k_length_words.append(word)\n    \n    return''.join(k_length_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # code here\n    test_str = ''.join(i for i in test_str if not i.isdigit())\n    words = test_str.split(' ')\n    res = []\n    for word in words:\n        if len(word)!= K:\n            res.append(word)\n    return''.join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join([word for word in test_str.split() if len(word)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split()\n    for word in test_list:\n        if len(word) == K:\n            test_str = test_str.replace(word, '')\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    p = test_str.split()\n    for word in p:\n        if len(word) == K:\n            p.remove(word)\n    return \" \".join(p)\n    \nif __name__ == '__main__':\n    test_str = \"I like apples, I like fruits, I like doctors\"\n    print(remove_length(test_str, 4))\n    print(remove_length(test_str, 6))\n    \n    \n'''\nResult:\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index_list = []\n    for i in range(0, len(text)):\n        if text[i:].startswith(pattern):\n            index_list.append(i)\n    if index_list:\n        print(\"{0} is found at {1}\".format(pattern, index_list))\n    else:\n        print(\"{0} is not found\".format(pattern))\n        "
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text_list = re.findall(pattern,text)\n    if text_list:\n        for match in text_list:\n            print match\n        print \"\\n\"\n    else:\n        print \"None\"\n        print \"\\n\"\n        \noccurance_substring('This is a string!','This')\noccurance_substring('This is a string!','this')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','is')\noccurance_substring('This is a string!','is')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','is')\noccurance_substring('This is a string!','is')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','a')\noccurance_substring('This is a string!','string')\noccurance_substring('This is a string!','string')\noccurance_su"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurances=re.findall(pattern,text)\n    if len(occurances)==0:\n        return None\n    else:\n        return occurances\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result=[]\n    pos=0\n    size=len(pattern)\n    while pos < len(text):\n        if text[pos:pos+size] == pattern:\n            result.append(pos)\n            pos=pos+size\n        else:\n            pos+=1\n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    import re\n    if text == '' or pattern == '':\n        return None\n    index_list = []\n    search_results = re.search(pattern,text)\n    if search_results!= None:\n        for match in search_results.groups():\n            index_list.append(text.find(match))\n        return index_list\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.subn(pattern,r'\\1',text)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not isinstance(text,str) or not isinstance(pattern,str):\n        return None\n    m = re.search(pattern,text)\n    if m is not None:\n        return m.start(),m.end(),m.span()\n    else:\n        return None\ndef split_string_by_characters(text,characters):\n    '''\n    Write a function to split a string into groups based on certain characters. If the input string contains these characters, we have to split the string into several substrings.\n    e.g.\n    Input: 'A string like this one A. split on.', 'Characters to split on', '.'\n    Output
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern,text)\n    if m:\n        return(m.start(),m.end())\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_list=[]\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            occurance_list.append(i)\n    return occurance_list\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    text = text.lower()\n    pattern_len = len(pattern)\n    text_len = len(text)\n    if pattern_len > text_len:\n        return None\n    for i in range(text_len - pattern_len + 1):\n        if text[i:i+pattern_len] == pattern:\n            return (i,i+pattern_len)\n    return None\ndef wrap(string,max_width):\n    '''\n    Given a string and a width, wrap the string to the width\n    '''\n    if len(string) <= max_width:\n        return [string]\n    else:\n        return_list = []\n        t_list = wrap(string[1:],max_width)\n        for t in t_list:\n            return_list.append(''+ t)\n        t_list = wrap(string[1:],max_width+1)\n        for t in t_list:\n            return_list.append(t)\n        return return_list\ndef wrap_with_newline(string,max_width):\n    '''\n    Given a string and a width, wrap the string to the width, but always insert a new line at the end.\n    '''\n    if len(string) <= max_width:\n        return string\n    else:\n        return_list = []\n        string = string[1:]\n        while string:\n            return_list.append(string[:max_width])\n            string = string[max_width:]\n        return_list.append('\\n')\n        return ''.join(return_list)\ndef wrap_with_newline_2(string,max_width):\n    '''\n    Given a string and a width, wrap the string to the width, but always insert a new line at the end.\n    '''\n    if len(string) <= max_width:\n        return string\n    else:\n        return_list = []\n        string = string[1:]\n        while string:\n            return_list.append(string[:max_width])\n            string = string[max_width:]\n        return_list.append('\\n')\n        return ''.join(return_list)\ndef wrap_with_newline_3(string,max_width):\n    '''\n    Given a string and a width, wrap the string to the width, but always insert a new line at the end.\n    '''\n    if len(string) <= max_width:\n        return string\n    else:\n        return_list = []\n        string = string[1:]\n        while string:\n            return_list.append(string[:max_width])\n            string = string[max_width:]\n        return '\\n'.join(return_list)\ndef reverse(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    new_list = []\n    for i in string:\n        new_list.append(i)\n    new_list = new_list[::-1]\n    return ''.join(new_list)\ndef reverse_2(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return ''.join(string[::-1])\ndef reverse_3(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_4(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_5(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_6(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_7(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_8(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_9(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_10(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_11(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_12(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_13(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_14(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_15(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_16(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_17(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_18(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_19(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_20(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_21(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_22(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_23(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_24(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_25(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_26(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_27(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_28(string):\n    '''\n    Write a function to reverse a string. The input string is given as an array of characters.\n    '''\n    return string[::-1]\ndef reverse_29(string):\n    '''\n    Write a function to reverse a string"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) % 2 == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    n = len(nums)\n    for i in range(n):\n        if i%2==1:\n            if nums[i]%2==1:\n                return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(num % 2 == 1 for num in nums[1::2])\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if(nums[i]%2!=0):\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(map(lambda x: x % 2 == 1, nums))\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    \n    if len(nums) == 0:\n        return \"List is empty\"\n    if len(nums) == 1:\n        return False\n    if len(nums) == 2:\n        return nums[1] % 2 == 1\n    \n    return nums[1] % 2 == 1 and odd_position(nums[1:])\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 0:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2!= 0:\n            if nums[i]%2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    for i in xrange(1, len(nums), 2):\n        if i > len(nums):\n            return False\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_counter = 0\n    for i,j in enumerate(test_str):\n        if j in 'aeiouAEIOU':\n            if test_str[i-1] in 'aeiouAEIOU':\n                vowels_counter += 1\n            if test_str[i+1] in 'aeiouAEIOU':\n                vowels_counter += 1\n    return vowels_counter\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for i in range(0, len(test_str)):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n            if i - 1 >= 0 and test_str[i - 1] == 'a' or test_str[i - 1] == 'e' or test_str[i - 1] == 'i' or test_str[i - 1] == 'o' or test_str[i - 1] == 'u':\n                vowels += 1\n            elif i + 1 <= len(test_str) - 1 and test_str[i + 1] == 'a' or test_str[i + 1] == 'e' or test_str[i + 1] == 'i' or test_str[i + 1] == 'o' or test_str[i + 1] == 'u':\n                vowels += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    result = 0\n    for idx, ele in enumerate(test_str):\n        if ele in vowels:\n            if (idx-1)>=0 and test_str[idx-1] in vowels:\n                result += 1\n            if (idx+1)<len(test_str) and test_str[idx+1] in vowels:\n                result += 1\n    return result\n    \nassert count_vowels(\"test\") == 2\nassert count_vowels(\"testing\") == 4\nassert count_vowels(\"tus\") == 0\nassert count_vowels(\"eexxanmnesx\") == 3\nassert count_vowels(\"beautiful\") == 5\nassert count_vowels(\"stars\") == 1\nassert count_vowels(\"world\") == 0\nassert count_vowels(\"1234567\") == 0\nassert count_vowels(\"bbba\") == 1\nassert count_vowels(\"bbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == 12\nassert count_vowels(\"zzzzzzzzzzzzzzzzzzzz\") == 2\nassert count_vowels(\"babababa\") == 0\nassert count_vowels(\"bbbb\") == 0\nassert count_vowels(\"b\") == 0\nassert count_vowels(\"a\") == 0\nassert count_vowels(\"\") == 0\nassert count_vowels(\"love\") == 2\nassert count_vowels(\"love is the best language\") == 4\nassert count_vowels(\"the quick brown fox jumps over the lazy dog\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog.\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog \") == 8\nassert count_vowels(\"\") == 0\nassert count_vowels(\"eexxanmnesx\") == 3\nassert count_vowels(\"beautiful\") == 5\nassert count_vowels(\"stars\") == 1\nassert count_vowels(\"world\") == 0\nassert count_vowels(\"1234567\") == 0\nassert count_vowels(\"bbba\") == 1\nassert count_vowels(\"bbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == 12\nassert count_vowels(\"zzzzzzzzzzzzzzzzzzzz\") == 2\nassert count_vowels(\"babababa\") == 0\nassert count_vowels(\"bbbb\") == 0\nassert count_vowels(\"b\") == 0\nassert count_vowels(\"a\") == 0\nassert count_vowels(\"\") == 0\nassert count_vowels(\"love\") == 2\nassert count_vowels(\"love is the best language\") == 4\nassert count_vowels(\"the quick brown fox jumps over the lazy dog\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog.\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog \") == 8\nassert count_vowels(\"\") == 0\nassert count_vowels(\"eexxanmnesx\") == 3\nassert count_vowels(\"beautiful\") == 5\nassert count_vowels(\"stars\") == 1\nassert count_vowels(\"world\") == 0\nassert count_vowels(\"1234567\") == 0\nassert count_vowels(\"bbba\") == 1\nassert count_vowels(\"bbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == 12\nassert count_vowels(\"zzzzzzzzzzzzzzzzzzzz\") == 2\nassert count_vowels(\"babababa\") == 0\nassert count_vowels(\"bbbb\") == 0\nassert count_vowels(\"b\") == 0\nassert count_vowels(\"a\") == 0\nassert count_vowels(\"\") == 0\nassert count_vowels(\"love\") == 2\nassert count_vowels(\"love is the best language\") == 4\nassert count_vowels(\"the quick brown fox jumps over the lazy dog\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog.\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog \") == 8\nassert count_vowels(\"\") == 0\nassert count_vowels(\"eexxanmnesx\") == 3\nassert count_vowels(\"beautiful\") == 5\nassert count_vowels(\"stars\") == 1\nassert count_vowels(\"world\") == 0\nassert count_vowels(\"1234567\") == 0\nassert count_vowels(\"bbba\") == 1\nassert count_vowels(\"bbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == 12\nassert count_vowels(\"zzzzzzzzzzzzzzzzzzzz\") == 2\nassert count_vowels(\"babababa\") == 0\nassert count_vowels(\"bbbb\") == 0\nassert count_vowels(\"b\") == 0\nassert count_vowels(\"a\") == 0\nassert count_vowels(\"\") == 0\nassert count_vowels(\"love\") == 2\nassert count_vowels(\"love is the best language\") == 4\nassert count_vowels(\"the quick brown fox jumps over the lazy dog\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog.\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog \") == 8\nassert count_vowels(\"\") == 0\nassert count_vowels(\"eexxanmnesx\") == 3\nassert count_vowels(\"beautiful\") == 5\nassert count_vowels(\"stars\") == 1\nassert count_vowels(\"world\") == 0\nassert count_vowels(\"1234567\") == 0\nassert count_vowels(\"bbba\") == 1\nassert count_vowels(\"bbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == 12\nassert count_vowels(\"zzzzzzzzzzzzzzzzzzzz\") == 2\nassert count_vowels(\"babababa\") == 0\nassert count_vowels(\"bbbb\") == 0\nassert count_vowels(\"b\") == 0\nassert count_vowels(\"a\") == 0\nassert count_vowels(\"\") == 0\nassert count_vowels(\"love\") == 2\nassert count_vowels(\"love is the best language\") == 4\nassert count_vowels(\"the quick brown fox jumps over the lazy dog\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog.\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog \") == 8\nassert count_vowels(\"\") == 0\nassert count_vowels(\"eexxanmnesx\") == 3\nassert count_vowels(\"beautiful\") == 5\nassert count_vowels(\"stars\") == 1\nassert count_vowels(\"world\") == 0\nassert count_vowels(\"1234567\") == 0\nassert count_vowels(\"bbba\") == 1\nassert count_vowels(\"bbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == 12\nassert count_vowels(\"zzzzzzzzzzzzzzzzzzzz\") == 2\nassert count_vowels(\"babababa\") == 0\nassert count_vowels(\"bbbb\") == 0\nassert count_vowels(\"b\") == 0\nassert count_vowels(\"a\") == 0\nassert count_vowels(\"\") == 0\nassert count_vowels(\"love\") == 2\nassert count_vowels(\"love is the best language\") == 4\nassert count_vowels(\"the quick brown fox jumps over the lazy dog\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog\") == 8\nassert count_vowels(\"the quick brown fox jumped over the lazy dog.\") == 8\nassert count_vowels(\"the quick brown fox jumped ove"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a','e','i','o','u'])\n    vowels_in_str = 0\n    i = 0\n    while i < len(test_str)-1:\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            vowels_in_str += 1\n        i += 1\n    return vowels_in_str\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    return sum(test_str[i-1] in vowels and test_str[i+1] in vowels for i in range(1, len(test_str)-1))\n    \n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    \n    \n    total_count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            total_count += 1\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            print (test_str[i])\n            \ncount_vowels('text')"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in xrange(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_map = {'a':0, 'e':0, 'i':0, 'o':0, 'u':0, 'A':0, 'E':0, 'I':0, 'O':0, 'U':0}\n    for i in range(len(test_str)):\n        if test_str[i] in vowel_map:\n            vowel_map[test_str[i]] += 1\n    print vowel_map\n    return vowel_map\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = set()\n    sum = 0\n    for i in arr:\n        if i not in s:\n            s.add(i)\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for element in arr:\n        if arr.count(element) == 1:\n            total += element\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(arr)\n    arr_sum = 0\n    for i in range(0,len(arr)):\n        arr_sum += arr[i]\n    return arr_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    current = arr[0]\n    current_sum = 0\n    for i in range(1, len(arr)):\n        if arr[i]!= current:\n            current_sum += current\n            current = arr[i]\n    return current_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum+i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_sum = 0\n    for i in arr:\n        non_repeated_sum = non_repeated_sum + i\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] not in arr[i+1:n]:\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr: \n        if arr.count(i) == 1:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    my_sum = 0\n    my_dict = {}\n    for i in arr:\n        if i not in my_dict:\n            my_dict[i] = 1\n        else:\n            my_dict[i] += 1\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum([i for i in arr if arr.count(i) == 1])\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def get_duplicates(input_list):\n        duplicate_groups = groupby(input_list)\n        output = []\n        for key, group in duplicate_groups:\n            output.append(list(group))\n        return output\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist = []\n    count = 0\n    for k, g in groupby(enumerate(list1), lambda (i, x): i - x):\n        l1 = map(lambda (j, y): y, g)\n        count += len(l1)\n        sublist.append(l1)\n    return count, sublist\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        l = list(g)\n        result.append((len(l), l[0]))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Sort the list\n    list1.sort()\n    res = []\n    # Initialize variables\n    # Element at the current position\n    element = list1[0]\n    # List of elements\n    l = []\n    # Variable to store the position of the element\n    pos = 0\n    for i in list1:\n        # If the element at the current position is not the same as the previous element, append the previous element to the list\n        if i!= element:\n            l.append(element)\n            res.append(l)\n            pos += 1\n        # If the element at the current position is the same as the previous element, increment the position by 1 and append the previous element to the list\n        else:\n            pos += 1\n        element = i\n    # Append the last element to the list\n    res.append(l)\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) == 0:\n        return list1\n    for i,j in groupby(list1):\n        list1[list1.index(i):list1.index(j)] = [list(j)]\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    output_list = []\n    for key, group in groupby(list1):\n        group = list(group)\n        if len(group) > 1:\n            output_list.append([key] + group)\n        else:\n            output_list.append(group)\n    return output_list\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = [(k, len(list(g))) for k, g in groupby(list1)]\n    return [{k:g} for k,g in groups]\n    \ndef find_max_subarray(A):\n    max_ending_here = max_so_far = 0\n    for i in range(len(A)):\n        max_ending_here = max_ending_here + A[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        result.append(list(g))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for k, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist = []\n    result = []\n    for i,j in groupby(list1):\n        sublist.append(list(j))\n    for k in sublist:\n        if len(k) > 1:\n            result.append(k)\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for sublist in list1:\n        for sublist2 in list1:\n            if sublist == sublist2:\n                dict1[(sublist,sublist2)] = 1\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # from itertools import groupby\n    # for key, value in groupby(list1):\n    #     print key, len(list(value))\n    \n    \n    result = {}\n    for i in range(0, len(list1)):\n        result[tuple(list1[i])] = result.get(tuple(list1[i]), 0) + 1\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    for item in list1:\n        if type(item) == list:\n            tuple_item = tuple(item)\n            if tuple_item in list_dict:\n                list_dict[tuple_item] += 1\n            else:\n                list_dict[tuple_item] = 1\n    return list_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    for sublist in list1:\n        if tuple(sublist) in list_dict:\n            list_dict[tuple(sublist)] += 1\n        else:\n            list_dict[tuple(sublist)] = 1\n    return list_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # your code goes here\n    num_of_lists = len(list1)\n    unique_tuple = (tuple(set(list1)), num_of_lists)\n    return unique_tuple\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #your code here\n    def unique_tuple(tup):\n        res = []\n        for i in tup:\n            if i not in res:\n                res.append(i)\n        return tuple(res)\n    \n    return {unique_tuple(i):list1.count(i) for i in list1}\n    \n    \n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    tuples = []\n    count = {}\n    for element in list1:\n        if element not in tuples:\n            tuples.append(tuple(element))\n            count[tuple(element)] = 1\n        else:\n            count[tuple(element)] += 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    new_list = []\n    for l in list1:\n        new_list.append(tuple(l))\n    new_list = sorted(set(new_list))\n    new_list = [list(x) for x in new_list]\n    #print new_list\n    dict_new = {}\n    for l in new_list:\n        key = tuple(l)\n        if key in dict_new.keys():\n            dict_new[key] += 1\n        else:\n            dict_new[key] = 1\n    return dict_new\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = list(list1)\n    list3 = []\n    for element in list1:\n        if element not in list3:\n            list3.append(element)\n    dict1 = {}\n    for element in list3:\n        value = list1.count(element)\n        dict1[tuple(element)] = value\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    for item in list1:\n        if item not in list_dict:\n            list_dict[item] = 1\n        else:\n            list_dict[item] += 1\n    return list_dict\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result_list = []\n    for i in range(1, len(test_list)+1):\n        result_list.extend(combinations(test_list, i))\n    return result_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,2))\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = [(1,2), (1,3), (1,4), (2,3), (2,4), (3,4), (1,2,3), (1,2,4), (1,3,4), (2,3,4), (1,2,3,4)]\n    comb = []\n    for tup in test_list:\n        t = sum(tup)\n        if t in comb:\n            print(t)\n        comb.append(t)\n    print(comb)\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    for i in range(1, len(test_list)):\n        all_combinations += combinations(test_list, i)\n    return all_combinations\n    "
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    list_len = len(test_list)\n    return list(combinations(test_list,2))\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combination_list=[]\n    for x in combinations(test_list,2):\n        combination_list.append(x)\n    return combination_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuple_list = [tuple(item) for item in test_list]\n    combs = list(combinations(tuple_list,2))\n    return [x[0]+x[1] for x in combs]\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in test_list:\n        res.extend(combinations(i,2))\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ans = []\n    for i in range(1, len(test_list)):\n        ans += list(combinations(test_list, i))\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = []\n    # traverse the list \n    for i in range(1, len(test_list)): \n        for j in combinations(test_list, i):\n            temp_sum = sum(j)\n            sums.append(temp_sum)\n    sums = list(set(sums))\n    return sums\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            divisors.append(i)\n            divisors.append(n/i)\n    return len(divisors)\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 : \n        return n\n    divisors = [] \n    for i in range(2,int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            if n/i == i : \n                divisors.append(i)\n            else : \n                divisors.extend([i,n/i])\n    return sum(divisors)\n    \ndef divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 : \n        return n\n    divisors = [] \n    for i in range(2,int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            if n/i == i : \n                divisors.append(i)\n            else : \n                divisors.extend([i,n/i])\n    return sum(divisors)\n    \ndef perfect_number(n) : \n    '''\n    Write a python function to check whether a number is a perfect number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return n == divisors(n)\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 1\n    for i in range(2,int(math.sqrt(n)) + 1) : \n        if (n % i == 0) :\n            divisor_count = divisor_count + 2\n            if (i!= n / i) :\n                divisor_count = divisor_count + 1\n    return divisor_count\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to calculate sum of divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n)) + 1) : \n        if (n % i == 0) :\n            sum = sum + i\n            if (i!= n / i) :\n                sum = sum + (n / i)\n    return sum\ndef count_prime_numbers(n) : \n    '''\n    Write a python function to count the count of prime numbers smaller than given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    prime_count = 0\n    for i in range(2, n + 1) :\n        if (count_divisors(i) == 2) : \n            prime_count = prime_count + 1\n    return prime_count\ndef sum_of_prime_numbers(n) : \n    '''\n    Write a python function to calculate sum of prime numbers smaller than given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    prime_sum = 0\n    for i in range(2, n + 1) :\n        if (count_divisors(i) == 2) : \n            prime_sum = prime_sum + i\n    return prime_sum\ndef find_max_prime_factor(n) : \n    '''\n    Write a python function to find the max prime factor of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    max_factor = 1\n    for i in range(2, n + 1) :\n        if (n % i == 0) :\n            if (max_factor < i) :\n                max_factor = i\n    return max_factor\ndef sum_of_prime_factors(n) : \n    '''\n    Write a python function to calculate sum of prime factors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    prime_sum = 0\n    for i in range(2, n + 1) :\n        if (n % i == 0) :\n            if (count_divisors(i) == 2) : \n                prime_sum = prime_sum + i\n    return prime_sum\ndef sum_of_square_numbers(n) : \n    '''\n    Write a python function to calculate sum of square numbers smaller than given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    square_sum = 0\n    for i in range(1, n) :\n        square_sum = square_sum + (i * i)\n    return square_sum\ndef find_perfect_square_less_than(n) : \n    '''\n    Write a python function to find the perfect square less than a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    perfect_square_list = []\n    perfect_square_list.append(1)\n    perfect_square_list.append(2)\n    perfect_square_list.append(4)\n    perfect_square_list.append(6)\n    perfect_square_list.append(8)\n    perfect_square_list.append(10)\n    perfect_square_list.append(12)\n    perfect_square_list.append(14)\n    perfect_square_list.append(16)\n    perfect_square_list.append(18)\n    perfect_square_list.append(20)\n    perfect_square_list.append(22)\n    perfect_square_list.append(24)\n    perfect_square_list.append(26)\n    perfect_square_list.append(28)\n    perfect_square_list.append(30)\n    perfect_square_list.append(32)\n    perfect_square_list.append(34)\n    perfect_square_list.append(36)\n    perfect_square_list.append(38)\n    perfect_square_list.append(40)\n    perfect_square_list.append(42)\n    perfect_square_list.append(44)\n    perfect_square_list.append(46)\n    perfect_square_list.append(48)\n    perfect_square_list.append(50)\n    perfect_square_list.append(52)\n    perfect_square_list.append(54)\n    perfect_square_list.append(56)\n    perfect_square_list.append(58)\n    perfect_square_list.append(60)\n    perfect_square_list.append(62)\n    perfect_square_list.append(64)\n    perfect_square_list.append(66)\n    perfect_square_list.append(68)\n    perfect_square_list.append(70)\n    perfect_square_list.append(72)\n    perfect_square_list.append(74)\n    perfect_square_list.append(76)\n    perfect_square_list.append(78)\n    perfect_square_list.append(80)\n    perfect_square_list.append(82)\n    perfect_square_list.append(84)\n    perfect_square_list.append(86)\n    perfect_square_list.append(88)\n    perfect_square_list.append(90)\n    perfect_square_list.append(92)\n    perfect_square_list.append(94)\n    perfect_square_list.append(96)\n    perfect_square_list.append(98)\n    perfect_square_list.append(100)\n    perfect_square_list.append(102)\n    perfect_square_list.append(104)\n    perfect_square_list.append(106)\n    perfect_square_list.append(108)\n    perfect_square_list.append(110)\n    perfect_square_list.append(112)\n    perfect_square_list.append(114)\n    perfect_square_list.append(116)\n    perfect_square_list.append(118)\n    perfect_square_list.append(120)\n    perfect_square_list.append(122)\n    perfect_square_list.append(124)\n    perfect_square_list.append(126)\n    perfect_square_list.append(128)\n    perfect_square_list.append(130)\n    perfect_square_list.append(132)\n    perfect_square_list.append(134)\n    perfect_square_list.append(136)\n    perfect_square_list.append(138)\n    perfect_square_list.append(140)\n    perfect_square_list.append(142)\n    perfect_square_list.append(144)\n    perfect_square_list.append(146)\n    perfect_square_list.append(148)\n    perfect_square_list.append(150)\n    perfect_square_list.append(152)\n    perfect_square_list.append(154)\n    perfect_square_list.append(156)\n    perfect_square_list.append(158)\n    perfect_square_list.append(160)\n    perfect_square_list.append(162)\n    perfect_square_list.append(164)\n    perfect_square_list.append(166)\n    perfect_square_list.append(168)\n    perfect_square_list.append(170)\n    perfect_square_list.append(17"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            divisors_count += 1\n    if divisors_count % 2 == 0 :\n        return True\n    else :\n        return False\ndef reverse_digits(num) :\n    '''\n    Write a python function to check whether a number is a palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    digits = []\n    while num > 0 :\n        digits.append(num % 10)\n        num = num // 10\n    l = len(digits)\n    for i in range(l / 2) :\n        if digits[i]!= digits[l - 1 - i] :\n            return False\n    return True\ndef is_pandigital(num) :\n    '''\n    Write a python function to check whether a number is a pandigital number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    digits = []\n    while num > 0 :\n        digits.append(num % 10)\n        num = num // 10\n    if len(digits)!= len(set(digits)) :\n        return False\n    if len(digits) == 9 :\n        return True\n    else :\n        return False\ndef get_factors(num) :\n    '''\n    Write a python function to get factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(num)) + 1) :\n        if num % i == 0 :\n            factors.append(i)\n            factors.append(num // i)\n    return factors\ndef sum_of_factors(num) :\n    '''\n    Write a python function to calculate the sum of the even factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    sum = 0\n    for i in get_factors(num) :\n        if i % 2 == 0 :\n            sum += i\n    return sum\ndef f(x) :\n    '''\n    Write a python function to calculate the value of the function, f(x) = (x**2 - x - 40)**2 + 1. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    return (x**2 - x - 40)**2 + 1\ndef f1(x) :\n    '''\n    Write a python function to calculate the value of the function, f(x) = (2*x - 2)**4 + 1. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    return (2*x - 2)**4 + 1\ndef sum_of_squares(n) :\n    '''\n    Write a python function to calculate the sum of squares of the first n numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    sum = 0\n    for i in range(1, n + 1) :\n        sum += i**2\n    return sum\ndef sum_of_squares_recursive(n) :\n    '''\n    Write a python function to calculate the sum of squares of the first n numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if n == 1 :\n        return 1\n    else :\n        return n**2 + sum_of_squares_recursive(n - 1)\ndef sum_of_squares_iterative(n) :\n    '''\n    Write a python function to calculate the sum of squares of the first n numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    sum = 0\n    for i in range(1, n + 1) :\n        sum += i**2\n    return sum\ndef sum_of_squares_recursive_iterative(n) :\n    '''\n    Write a python function to calculate the sum of squares of the first n numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if n == 1 :\n        return 1\n    else :\n        return n**2 + sum_of_squares_recursive_iterative(n - 1)\ndef sum_of_squares_recursive_iterative_using_dict(n) :\n    '''\n    Write a python function to calculate the sum of squares of the first n numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    # initialize a dictionary\n    lookup = {}\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 :\n        return 1\n    else :\n        divisors = 0\n        for i in range(1,int(math.sqrt(n))+1) :\n            if n%i == 0 :\n                divisors += 2\n        if divisors%2 == 0 :\n            return True\n        else :\n            return False\ndef gcd(a,b) :\n    '''\n    Write a python function to return the GCD of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-20.php\n    '''\n    if a==0:\n        return b\n    elif b==0:\n        return a\n    else :\n        return gcd(b,a%b)\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 1) : \n        return 1\n    else : \n        count = 2 \n        for i in range(2,n) : \n            if (n % i == 0) : \n                count = count + 1\n        return count\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 2 :\n        return False\n    divisors = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            divisors = divisors + 1\n    if divisors % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # n = int(n)\n    counter = 0\n    # print(\"n is: \", n)\n    # print(\"type n is: \", type(n))\n    # print(\"type n is: \", type(int(n)))\n    # print(\"type n is: \", type(n/2))\n    # print(\"type n is: \", type(n/2))\n    # print(\"type n is: \", type(n/2))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n    # print(\"type n is: \", type(int(n/2)))\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n/i == i:\n                count += 1\n            else:\n                count += 2\n        i += 1\n    return count\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    # else\n    res = sum(arr)\n    i = 1\n    while i < len(arr):\n        arr[i] += arr[i-1]\n        arr[i-1] = 0\n        res += arr[i]\n        i += 1\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + odd_length_sum(arr[1:])\n    "
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr),2):\n            ans += sum(arr[i:j+1])\n    return ans\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr),2):\n            s=s+arr[j]\n    return s\ndef find_max_sum(arr):\n    '''\n    Write a python function to find the maximum sum of any non-empty subarray\n    '''\n    if len(arr)==0:\n        return 0\n    max_so_far=arr[0]\n    curr_max=arr[0]\n    for i in range(1,len(arr)):\n        curr_max=max(arr[i],curr_max+arr[i])\n        max_so_far=max(max_so_far,curr_max)\n    return max_so_far\ndef longest_sub_array_with_sum_equal_to_k(arr,k):\n    '''\n    Write a python function to find the longest sub array of size equal to given sum and return that sub array.\n    https://www.geeksforgeeks.org/find-longest-sub-array-with-sum-equal-to-k-in-an-array/\n    '''\n    if len(arr)==0:\n        return []\n    n=len(arr)\n    i=0\n    j=0\n    s=0\n    curr_sum=arr[0]\n    max_len=1\n    start=0\n    end=0\n    while j<n:\n        if curr_sum==k:\n            max_len=max(max_len,j-i+1)\n            end=j\n        if s+arr[j]<k:\n            curr_sum=curr_sum+arr[j]\n            j=j+1\n            continue\n        else:\n            curr_sum=curr_sum-arr[i]\n            i=i+1\n    return arr[start:end+1]\ndef find_largest_occurence(arr):\n    '''\n    Write a python function to find the largest occurrence of an element in array.\n    https://www.geeksforgeeks.org/find-largest-occurrence-of-an-element-in-an-array/\n    '''\n    max_so_far=0\n    max_index=0\n    for i in range(len(arr)):\n        if arr[i]>max_so_far:\n            max_so_far=arr[i]\n            max_index=i\n    return max_index\ndef factorial(n):\n    '''\n    Write a python function to find factorial of a given number.\n    '''\n    if n==0 or n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef is_palindrome(arr):\n    '''\n    Write a python function to check if array is a palindrome.\n    '''\n    if len(arr)==0:\n        return True\n    else:\n        return arr[0]==arr[-1] and is_palindrome(arr[1:-1])\ndef subsets(arr):\n    '''\n    Write a python function to find all subsets of an array.\n    https://www.geeksforgeeks.org/find-all-subsets-of-an-array/\n    '''\n    if len(arr)==0:\n        return []\n    elif len(arr)==1:\n        return [[arr[0]]]\n    else:\n        subset=subsets(arr[1:])\n        subset_now=[]\n        for i in subset:\n            subset_now.append([arr[0]]+i)\n        for i in subset:\n            subset_now.append(i)\n        return subset_now\ndef permutation(arr):\n    '''\n    Write a python function to find all permutations of an array.\n    https://www.geeksforgeeks.org/find-permutations-array/\n    '''\n    if len(arr)==0:\n        return []\n    elif len(arr)==1:\n        return [arr]\n    else:\n        subset=permutation(arr[1:])\n        subset_now=[]\n        for i in subset:\n            for j in range(len(i)+1):\n                subset_now.append(i[:j]+[arr[0]]+i[j:])\n        return subset_now\ndef find_factors(arr):\n    '''\n    Write a python function to find the factors of a given number.\n    https://www.geeksforgeeks.org/find-factors-of-a-number-in-an-array/\n    '''\n    if len(arr)==0:\n        return []\n    elif len(arr)==1:\n        return arr\n    else:\n        return [arr[0]]+find_factors(arr[1:])\ndef super_string(arr):\n    '''\n    Write a python function to find the string formed by concatenating all the concatenations of given arrays.\n    https://www.geeksforgeeks.org/find-string-formed-by-concatenating-all-concatenations-of-given-arrays/\n    '''\n    if len(arr)==0:\n        return []\n    elif len(arr)==1:\n        return arr[0]\n    else:\n        return super_string(arr[1:])+arr[0]\ndef is_anagram(str1,str2):\n    '''\n    Write a python function to check if two strings are anagrams.\n    '''\n    if len(str1)==len(str2) and sorted(str1)==sorted(str2):\n        return True\n    else:\n        return False\ndef number_of_rotations(arr):\n    '''\n    Write a python function to find the number of rotations in a given array.\n    '''\n    if len(arr)==0:\n        return 0\n    elif len(arr)==1:\n        return 0\n    else:\n        return 1+number_of_rotations(arr[1:])\ndef is_rotation(str1,str2):\n    '''\n    Write a python function to check if a string is a rotation of other string.\n    '''\n    if len(str1)==len(str2):\n        return number_of_rotations(str1)==number_of_rotations(str2)\n    else:\n        return False\ndef max_product_subarray(arr):\n    '''\n    Write a python function to find the maximum product of a subarray with size 3.\n    '''\n    if len(arr)==0:\n        return 0\n    elif len(arr)==1:\n        return arr[0]\n    elif len(arr)==2:\n        return arr[0]*arr[1]\n    else:\n        return max(max(arr[0]*arr[1],arr[0]*arr[-1]),max(arr[-1]*arr[-2],arr[-1]*arr[0]))\ndef circular_permutation(arr):\n    '''\n    Write a python function to find the next permutation of array.\n    https://www.geeksforgeeks.org/find-the-next-permutation-of-an-array/\n    '''\n    if len(arr)==0:\n        return []\n    elif len(arr)==1:\n        return [arr[0]]\n    else:\n        for i in range(len(arr)-1,-1,-1):\n            if arr[i]>arr[i-1]:\n                break\n        if i==0:\n            return arr[::-1]\n        else:\n            for j in range(len(arr)-1,-1,-1):\n                if arr[j]>arr[i-1]:\n                    break\n            arr[i-1],arr[j]=arr[j],arr[i-1]\n            arr[i:]=arr"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr),2):\n            s += sum(arr[i:j+1])\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += sum(arr[i:i+3])\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_arr = [0]*len(arr)\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            sum_arr[i] = sum(arr[i:])\n    return sum_arr\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if arr is None or len(arr) == 0:\n        return None\n    total = sum(arr[::2])\n    return total\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    c_max = max(r, g, b)\n    c_min = min(r, g, b)\n    delta = c_max - c_min\n    if delta == 0:\n        h = 0\n    elif c_max == r:\n        h = (g - b)/delta\n    elif c_max == g:\n        h = 2 + (b - r)/delta\n    elif c_max == b:\n        h = 4 + (r - g)/delta\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    R = r / 255.0\n    G = g / 255.0\n    B = b / 255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    c_max = max(r, g, b)\n    c_min = min(r, g, b)\n    delta = c_max - c_min\n    if delta == 0:\n        h = 0\n    elif c_max == r:\n        h = (60 * (((g - b)/delta) % 6))\n    elif c_max == g:\n        h = (60 * (((b - r)/delta) + 2))\n    elif c_max == b:\n        h = (60 * (((r - g)/delta) + 4))\n    if c_max == 0:\n        s = 0\n    else:\n        s = delta/c_max\n    v = c_max\n    return [h,s,v]\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    c_max = max(r, g, b)\n    c_min = min(r, g, b)\n    delta = c_max - c_min\n    v = c_max\n    s = 0\n    if delta == 0:\n        h = 0\n    elif c_max == r:\n        h = (g - b) / delta % 6\n    elif c_max == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    if c_max == 0:\n        s = 0\n    else:\n        s = delta / v\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    maximum = max(r, g, b)\n    minimum = min(r, g, b)\n    delta = maximum - minimum\n    v = maximum\n    if delta == 0:\n        h = 0\n    elif maximum == r:\n        h = (g - b) / delta % 6\n    elif maximum == g:\n        h = (b - r) / delta + 2\n    elif maximum == b:\n        h = (r - g) / delta + 4\n    if h < 0:\n        h += 6\n    h = h / 6\n    return [h, v, delta]\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if maxc == minc:\n        return 0.0, 0.0, v\n    ds = maxc-minc\n    s = ds/maxc\n    if maxc == r:\n        h = (g-b)/ds\n    elif maxc == g:\n        h = 2.0 + (b-r)/ds\n    else:\n        h = 4.0 + (r-g)/ds\n    h *= 60\n    if h < 0.0:\n        h += 360.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    high = max(r, g, b)\n    low = min(r, g, b)\n    diff = high - low\n    if high == low:\n        h = 0\n    elif high == r:\n        h = (60 * ((g-b)/diff) + 360) % 360\n    elif high == g:\n        h = (60 * ((b-r)/diff) + 120) % 360\n    elif high == b:\n        h = (60 * ((r-g)/diff) + 240) % 360\n    if high == 0:\n        s = 0\n    else:\n        s = diff / high\n    v = high\n    return [h, s, v]\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    \n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    \n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif cmax == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif cmax == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n    \n    if cmax == 0:\n        s = 0\n    else:\n        s = (diff / cmax)\n    \n    v = cmax\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g-b)/(max_val-min_val)\n    elif max_val == g:\n        h = 2 + (b-r)/(max_val-min_val)\n    elif max_val == b:\n        h = 4 + (r-g)/(max_val-min_val)\n    if max_val == 0:\n        s = 0\n    else:\n        s = (max_val-min_val)/max_val\n    v = max_val\n    return [h, s, v]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return [even_product,odd_product]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd=1\n    for i in list1:\n        if i%2==0:\n            odd=odd*i\n    even=1\n    for i in list1:\n        if i%2!=0:\n            even=even*i\n    return even*odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in list1:\n        if i%2 == 0:\n            even *= i\n        else:\n            odd *= i\n    print even, odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for i in list1:\n        if i%2==0:\n            even_product = even_product*i\n        else:\n            odd_product = odd_product*i\n    return (even_product, odd_product)\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_even = 1\n    product_odd = 1\n    for num in list1:\n        if num%2 == 0:\n            product_even = product_even*num\n        else:\n            product_odd = product_odd*num\n    return [product_even, product_odd]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for item in list1:\n        if item % 2 == 0:\n            result *= item\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    new_list = []\n    for i in list1:\n        if i % 2 == 0:\n            new_list.append(i * 2)\n        else:\n            new_list.append(i * 3)\n    return new_list\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if list1 == []:\n        return None\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return even[0] * odd[0]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i % 2 == 0:\n            list2.append(i)\n        else:\n            list2.append(i)\n    list2 = np.prod(list2)\n    return list2\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for number in list1:\n        if number%2 == 0:\n            even_product = even_product * number\n        else:\n            odd_product = odd_product * number\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.strip()\n    test_str = test_str.replace(' ', '')\n    tuple_list = list(test_str)\n    for i in range(len(tuple_list)):\n        if tuple_list[i] in '()':\n            tuple_list[i] = ''\n    tuple_list = filter(None, tuple_list)\n    tuple_list = list(map(int, tuple_list))\n    return tuple_list\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_test_str = map(int, test_str.split(','))\n    return tuple(int_test_str)\n    \ndef tuple_int_str(test_tuple):\n    '''\n    Write a function to convert integer tuple to tuple string.\n    '''\n    test_str = ','.join(str(e) for e in test_tuple)\n    return test_str\n    \ndef tuple_range(test_tuple):\n    '''\n    Write a function to convert tuple to range.\n    '''\n    test_range = range(test_tuple[0], test_tuple[1] + 1)\n    return test_range\n    \ndef tuple_len(test_tuple):\n    '''\n    Write a function to get length of tuple.\n    '''\n    len_test_tuple = len(test_tuple)\n    return len_test_tuple\n    \ndef tuple_all(test_tuple):\n    '''\n    Write a function to return True if all elements of tuple are same.\n    '''\n    if test_tuple[0] == test_tuple[1] == test_tuple[2]:\n        return True\n    return False\n    \ndef tuple_any(test_tuple):\n    '''\n    Write a function to return True if any elements of tuple are same.\n    '''\n    if test_tuple[0] == test_tuple[1] == test_tuple[2]:\n        return True\n    return False\n    \ndef tuple_min(test_tuple):\n    '''\n    Write a function to get minimum value of tuple.\n    '''\n    min_test_tuple = min(test_tuple)\n    return min_test_tuple\n    \ndef tuple_max(test_tuple):\n    '''\n    Write a function to get maximum value of tuple.\n    '''\n    max_test_tuple = max(test_tuple)\n    return max_test_tuple\n    \ndef tuple_sum(test_tuple):\n    '''\n    Write a function to get sum of tuple.\n    '''\n    sum_test_tuple = sum(test_tuple)\n    return sum_test_tuple\n    \ndef tuple_avg(test_tuple):\n    '''\n    Write a function to get average of tuple.\n    '''\n    avg_test_tuple = float(sum(test_tuple)) / float(tuple_len(test_tuple))\n    return avg_test_tuple\n    \ndef tuple_sort(test_tuple):\n    '''\n    Write a function to sort tuple in ascending order.\n    '''\n    sorted_test_tuple = sorted(test_tuple)\n    return sorted_test_tuple\n    \ndef tuple_sort2(test_tuple):\n    '''\n    Write a function to sort tuple in descending order.\n    '''\n    sorted_test_tuple = sorted(test_tuple, reverse=True)\n    return sorted_test_tuple\n    \ndef tuple_reverse(test_tuple):\n    '''\n    Write a function to reverse tuple.\n    '''\n    reversed_test_tuple = test_tuple[::-1]\n    return reversed_test_tuple\n    \ndef tuple_shuffle(test_tuple):\n    '''\n    Write a function to shuffle tuple randomly.\n    '''\n    shuffle_test_tuple = shuffle(test_tuple)\n    return shuffle_test_tuple\n    \ndef tuple_partition(test_tuple, num_partition):\n    '''\n    Write a function to partition tuple into two parts.\n    '''\n    partition_test_tuple = partition(test_tuple, num_partition)\n    return partition_test_tuple\n    \ndef tuple_partition2(test_tuple, num_partition):\n    '''\n    Write a function to partition tuple into two parts.\n    '''\n    partition_test_tuple = partition2(test_tuple, num_partition)\n    return partition_test_tuple\n    \ndef tuple_combine(test_tuple, num_partition):\n    '''\n    Write a function to combine two parts of tuple.\n    '''\n    combine_test_tuple = combine(test_tuple, num_partition)\n    return combine_test_tuple\n    \ndef tuple_combine2(test_tuple, num_partition):\n    '''\n    Write a function to combine two parts of tuple.\n    '''\n    combine_test_tuple = combine2(test_tuple, num_partition)\n    return combine_test_tuple\n    \ndef tuple_range2(test_tuple):\n    '''\n    Write a function to convert tuple to range.\n    '''\n    test_range = range(test_tuple[0], test_tuple[1] + 1)\n    return test_range\n    \ndef tuple_range_ex(test_tuple):\n    '''\n    Write a function to convert tuple to range.\n    '''\n    test_range = range(test_tuple[0], test_tuple[1] + 1)\n    test_range = list(test_range)\n    return test_range\n    \ndef tuple_reverse2(test_tuple):\n    '''\n    Write a function to reverse tuple.\n    '''\n    reversed_test_tuple = test_tuple[::-1]\n    return reversed_test_tuple\n    \ndef tuple_sorted(test_tuple):\n    '''\n    Write a function to sort tuple in ascending order.\n    '''\n    sorted_test_tuple = sorted(test_tuple)\n    return sorted_test_tuple\n    \ndef tuple_sorted2(test_tuple):\n    '''\n    Write a function to sort tuple in descending order.\n    '''\n    sorted_test_tuple = sorted(test_tuple, reverse=True)\n    return sorted_test_tuple\n    \ndef tuple_min_ex(test_tuple):\n    '''\n    Write a function to get minimum value of tuple.\n    '''\n    min_test_tuple = min(test_tuple)\n    return min_test_tuple\n    \ndef tuple_max_ex(test_tuple):\n    '''\n    Write a function to get maximum value of tuple.\n    '''\n    max_test_tuple = max(test_tuple)\n    return max_test_tuple\n    \ndef tuple_sum_ex(test_tuple):\n    '''\n    Write a function to get sum of tuple.\n    '''\n    sum_test_tuple = sum(test_tuple)\n    return sum_test_tuple\n    \ndef tuple_avg_ex(test_tuple):\n    '''\n    Write a function to get average of tuple.\n    '''\n    avg_test_tuple = float(sum(test_tuple)) / float(tuple_len(test_tuple))\n    return avg_test_tuple\n    \ndef tuple_sort_ex(test_tuple):\n    '''\n    Write a function to sort tuple in ascending order.\n    '''\n    sorted_test_tuple = sorted(test_tuple)\n    return sorted_test_tuple\n    \ndef tuple_sort2_ex(test_tuple):\n    '''\n    Write a function to sort tuple in descending order.\n    '''\n    sorted_test_tuple = sorted(test_tuple, reverse=True)\n    return sorted_test_tuple\n    \ndef tuple_reverse_ex(test_tuple):\n    '''\n    Write a function to reverse tuple.\n    '''\n    reversed_test_tuple = test_tuple[::-1]\n    return reversed_test_tuple\n    \ndef tuple_shuffle_ex(test_tuple):\n    '''\n    Write a function to shuffle tuple randomly.\n    '''\n    shuffle_test_tuple = shuffle(test_tuple)\n    return shuffle_test_tuple\n    \ndef tuple_partition_ex(test_tuple, num_partition):\n    '''\n    Write a function to partition tuple into two parts.\n    '''\n    partition_test_tuple = partition(test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    split_str = test_str.split(',')\n    int_tuple = []\n    for value in split_str:\n        int_tuple.append(int(value))\n    return tuple(int_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    ret = []\n    for item in test_str.split(','):\n        ret.append(int(item))\n    return tuple(ret)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = []\n    for i in test_str:\n        if i!= ',':\n            str_list.append(i)\n    str_list.remove('(')\n    str_list.remove(')')\n    str_list.remove(' ')\n    res = []\n    for i in str_list:\n        res.append(int(i))\n    return tuple(res)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.replace('(', '').replace(')', '').split(',')))\n    \n    \ndef int_tuple_str(test_int):\n    '''\n    Write a function to convert integer tuple to tuple string.\n    '''\n    return str(tuple(map(str, test_int)))[1:-1]\n    \n    \ndef is_triangle_number(test_triangle):\n    '''\n    Write a function to determine whether a number is a triangle number or not.\n    '''\n    return sum(test_triangle[:2]) == test_triangle[-1]\n    \n    \ndef triangle_number_generator():\n    '''\n    Write a generator to yield the first n triangular numbers, where n is a parameter\n    '''\n    yield 1\n    \n    \ndef is_right_angle(test_angle):\n    '''\n    Write a function to determine whether an angle is a right angle or not.\n    '''\n    return round(test_angle[0] ** 2 + test_angle[1] ** 2, 3) == round(test_angle[2] ** 2, 3)\n    \n    \ndef is_right_angle_triangle(test_triangle):\n    '''\n    Write a function to determine whether a right angle triangle is valid or not.\n    '''\n    return is_right_angle(test_triangle[0]) and is_right_angle(test_triangle[1]) and is_right_angle(test_triangle[2])\n    \n    \ndef is_right_angle_generator(test_generator):\n    '''\n    Write a generator to yield the first n right angle triangles, where n is a parameter.\n    '''\n    yield (2, 2, 2)\n    yield (3, 4, 5)\n    yield (4, 3, 5)\n    yield (5, 3, 4)\n    \n    \ndef is_right_angle_triangle_generator(test_triangle_generator):\n    '''\n    Write a generator to yield the first n right angle triangles, where n is a parameter.\n    '''\n    return map(is_right_angle_triangle, test_triangle_generator)\n    \n    \ndef is_right_angle_triangle_generator_yield_generator(test_triangle_generator):\n    '''\n    Write a generator to yield the first n right angle triangles, where n is a parameter.\n    '''\n    return (is_right_angle_triangle(test_triangle) for test_triangle in test_triangle_generator)\n    \n    \ndef is_triangle(test_triangle):\n    '''\n    Write a function to determine whether a triangle is valid or not.\n    '''\n    return is_triangle_number(test_triangle) and is_right_angle_triangle(test_triangle)\n    \n    \ndef is_triangle_generator(test_triangle_generator):\n    '''\n    Write a generator to yield the first n valid triangles, where n is a parameter.\n    '''\n    return (is_triangle(test_triangle) for test_triangle in test_triangle_generator)\n    \n    \ndef is_triangle_generator_yield_generator(test_triangle_generator):\n    '''\n    Write a generator to yield the first n valid triangles, where n is a parameter.\n    '''\n    return (is_triangle(test_triangle) for test_triangle in test_triangle_generator_yield_generator)\n    \n    \ndef is_triangle_triangle_generator(test_triangle_generator):\n    '''\n    Write a generator to yield the first n valid triangles, where n is a parameter.\n    '''\n    return (is_triangle(test_triangle) for test_triangle in is_triangle_triangle_generator_yield_generator(test_triangle_generator))\n    \n    \ndef is_triangle_triangle_generator_yield_generator(test_triangle_generator):\n    '''\n    Write a generator to yield the first n valid triangles, where n is a parameter.\n    '''\n    return (is_triangle_triangle(test_triangle) for test_triangle in test_triangle_generator)\n    \n    \ndef test_is_triangle_number():\n    '''\n    Write a test function to test the is_triangle_number function.\n    '''\n    assert is_triangle_number((3, 4, 5)) == True\n    assert is_triangle_number((5, 5, 5)) == False\n    assert is_triangle_number((7, 6, 9)) == True\n    assert is_triangle_number((1, 2, 3)) == False\n    assert is_triangle_number((-3, -3, 3)) == True\n    assert is_triangle_number((-3, -3, -3)) == False\n    assert is_triangle_number((0, 0, 0)) == False\n    assert is_triangle_number((0, -1, 2)) == False\n    assert is_triangle_number((0, -1, -2)) == False\n    assert is_triangle_number((-1, 1, 2)) == False\n    assert is_triangle_number((-1, 1, -2)) == False\n    assert is_triangle_number((1, 1, 2)) == False\n    assert is_triangle_number((1, 1, -2)) == False\n    assert is_triangle_number((-1, 1, -2)) == False\n    assert is_triangle_number((-1, -1, -2)) == False\n    assert is_triangle_number((-1, -1, 1)) == False\n    assert is_triangle_number((-1, 1, 1)) == False\n    assert is_triangle_number((-1, 1, 0)) == False\n    \n    \ndef test_tuple_str_int():\n    '''\n    Write a test function to test the tuple_str_int function.\n    '''\n    assert tuple_str_int('(3, 4, 5)') == (3, 4, 5)\n    assert tuple_str_int('(5, 5, 5)') == (5, 5, 5)\n    assert tuple_str_int('(7, 6, 9)') == (7, 6, 9)\n    assert tuple_str_int('(1, 2, 3)') == (1, 2, 3)\n    assert tuple_str_int('(-3, -3, 3)') == (-3, -3, 3)\n    assert tuple_str_int('(-3, -3, -3)') == (-3, -3, -3)\n    assert tuple_str_int('(0, 0, 0)') == (0, 0, 0)\n    assert tuple_str_int('(0, -1, 2)') == (0, -1, 2)\n    assert tuple_str_int('(0, -1, -2)') == (0, -1, -2)\n    assert tuple_str_int('(-1, 1, 2)') == (-1, 1, 2)\n    assert tuple_str_int('(-1, 1, -2)') == (-1, 1, -2)\n    assert tuple_str_int('(1, 1, 2)') == (1, 1, 2)\n    assert tuple_str_int('(1, 1, -2)') == (1, 1, -2)\n    assert tuple_str_int('(-1, 1, -2)') == (-1, 1, -2)\n    assert tuple_str_int('(-1, -1, -2)') == (-1, -1, -2)\n    assert tuple_str_int('(-1, -1, 1)') == (-1, -1, 1)\n    assert tuple_str_int('(-1, 1, 1)') == (-1, 1, 1)\n    assert tuple_str_int('(-1, 1, 0)') == (-1, 1, 0)\n    \n    \ndef test_int_tuple_str():\n    '''\n    Write a test function to test the int_tuple_str function.\n    '''\n    assert int_tuple_str((3, 4, 5)) == '(3, 4, 5)'\n    assert int_tupl"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str[1:-1].split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = test_str.strip('()').split(',')\n    res = tuple(int(x) for x in test_tuple)\n    return res\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    if test_str:\n        result = list(map(int, test_str.split(',')))\n    else:\n        result = tuple()\n    return result\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    my_list = test_str.split(',')\n    new_list = []\n    for i in my_list:\n        new_list.append(int(i))\n    return tuple(new_list)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == 0 or a[i-1]!= x:\n        return i\n    else:\n        return i + 1\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i - 1\ndef test_insertion():\n    assert right_insertion([1,2,3,4,5], 5) == 4\n    assert left_insertion([1,2,3,4,5], 5) == 4\n    assert right_insertion([1,2,3,4,5], 1) == 0\n    assert left_insertion([1,2,3,4,5], 1) == 0\n    assert right_insertion([1,2,3,4,5], 5) == 4\n    assert left_insertion([1,2,3,4,5], 5) == 4\n    assert right_insertion([5,6,7,8,9], 4) == 3\n    assert left_insertion([5,6,7,8,9], 4) == 3\n    assert right_insertion([5,6,7,8,9], 5) == 4\n    assert left_insertion([5,6,7,8,9], 5) == 4\ndef test_insertion1():\n    assert right_insertion([5,6,7,8,9], 4) == 3\n    assert left_insertion([5,6,7,8,9], 4) == 3\n    assert right_insertion([5,6,7,8,9], 5) == 4\n    assert left_insertion([5,6,7,8,9], 5) == 4\ndef test_insertion2():\n    assert right_insertion([5,6,7,8,9], 4) == 3\n    assert left_insertion([5,6,7,8,9], 4) == 3\n    assert right_insertion([5,6,7,8,9], 5) == 4\n    assert left_insertion([5,6,7,8,9], 5) == 4\n    assert right_insertion([5,6,7,8,9], 6) == 5\n    assert left_insertion([5,6,7,8,9], 6) == 5\ndef test_insertion3():\n    assert right_insertion([5,6,7,8,9], 4) == 3\n    assert left_insertion([5,6,7,8,9], 4) == 3\n    assert right_insertion([5,6,7,8,9], 5) == 4\n    assert left_insertion([5,6,7,8,9], 5) == 4\n    assert right_insertion([5,6,7,8,9], 6) == 5\n    assert left_insertion([5,6,7,8,9], 6) == 5\n    assert right_insertion([5,6,7,8,9], 7) == 6\n    assert left_insertion([5,6,7,8,9], 7) == 6\ndef test_insertion4():\n    assert right_insertion([5,6,7,8,9], 4) == 3\n    assert left_insertion([5,6,7,8,9], 4) == 3\n    assert right_insertion([5,6,7,8,9], 5) == 4\n    assert left_insertion([5,6,7,8,9], 5) == 4\n    assert right_insertion([5,6,7,8,9], 6) == 5\n    assert left_insertion([5,6,7,8,9], 6) == 5\n    assert right_insertion([5,6,7,8,9], 7) == 6\n    assert left_insertion([5,6,7,8,9], 7) == 6\n    assert right_insertion([5,6,7,8,9], 8) == 7\n    assert left_insertion([5,6,7,8,9], 8) == 7\ndef test_insertion5():\n    assert right_insertion([5,6,7,8,9], 4) == 3\n    assert left_insertion([5,6,7,8,9], 4) == 3\n    assert right_insertion([5,6,7,8,9], 5) == 4\n    assert left_insertion([5,6,7,8,9], 5) == 4\n    assert right_insertion([5,6,7,8,9], 6) == 5\n    assert left_insertion([5,6,7,8,9], 6) == 5\n    assert right_insertion([5,6,7,8,9], 7) == 6\n    assert left_insertion([5,6,7,8,9], 7) == 6\n    assert right_insertion([5,6,7,8,9], 8) == 7\n    assert left_insertion([5,6,7,8,9], 8) == 7\n    assert right_insertion([5,6,7,8,9], 9) == 8\n    assert left_insertion([5,6,7,8,9], 9) == 8\ndef test_insertion6():\n    assert right_insertion([5,6,7,8,9], 4) == 3\n    assert left_insertion([5,6,7,8,9], 4) == 3\n    assert right_insertion([5,6,7,8,9], 5) == 4\n    assert left_insertion([5,6,7,8,9], 5) == 4\n    assert right_insertion([5,6,7,8,9], 6) == 5\n    assert left_insertion([5,6,7,8,9], 6) == 5\n    assert right_insertion([5,6,7,8,9], 7) == 6\n    assert left_insertion([5,6,7,8,9], 7) == 6\n    assert right_insertion([5,6,7,8,9], 8) == 7\n    assert left_insertion([5,6,7,8,9], 8) == 7\n    assert right_insertion([5,6,7,8,9], 9) == 8\n    assert left_insertion([5,6,7,8,9], 9) == 8\ndef test_insertion7():\n    assert right_insertion([5,6,7,8,9], 4) == 3\n    assert left_insertion([5,6,7,8,9], 4) == 3\n    assert right_insertion([5,6,7,8,9], 5) == 4\n    assert left_insertion([5,6,7,8,9], 5) == 4\n    assert right_insertion([5,6,7,8,9], 6) == 5\n    assert left_insertion([5,6,7,8,9], 6) == 5\n    assert right_insertion([5,6,7,8,9], 7) == 6\n    assert left_insertion([5,6,7,8,9], 7) == 6\n    assert right_insertion([5,6,7,8,9], 8) == 7\n    assert left_insertion([5,6,7,8,9], 8) == 7\n    assert right_insertion([5,6,7,8,9], 9) == 8\n    assert left_insertion([5,6,7,8,9], 9) == 8\n    assert right_insertion([5,6,7,8,9], 10) == 9\n    assert left_insertion([5,6,7,8,9], 10) == 9\ndef test_insertion8():\n    assert right_insertion([5,6,7,8,9], 4) == 3\n    assert left_insertion([5,6,7,8,9], 4) == 3\n    assert right_insertion([5,6,7,8,9], 5) == 4\n    assert left_insertion([5,6,7,8,9], 5) == 4\n    assert right_insertion([5,6,7,8,9], 6) == 5\n    assert left_insertion([5,6,7,8,9], 6) == 5"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = len(a)\n    j = i-1\n    while i>=1:\n        if a[j] < x:\n            break\n        j -= 1\n    a.insert(j+1,x)\n    return a\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        a.insert(i, x)\n    return a\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    i = bisect.bisect_right(a, x)\n    if i == n:\n        return i\n    elif i == 0:\n        return 0\n    else:\n        if a[i] == x:\n            return i\n        else:\n            return i+1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    bisect.insort_right(a, x)\n    return a.index(x)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect(a, x)\n    # i = bisect.bisect_right(a, x)\n    # return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a)\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    print '{0} is at position {1}'.format(x, i)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # use binary search to find the insertion point\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if x <= a[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i:\n        if a[i-1] == x:\n            return i-1\n        else:\n            return i\n    else:\n        return 0\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = 'a.*b+'\n    if re.match(pattern,text):\n        print('Match')\n    else:\n        print('No match')\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('ab{3}', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r'ab{3}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(r'a(.)b{3}', text)\ndef text_match_three_groups(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'. \n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)b{3}', text).groups()\ndef text_match_three_groups_group_names(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)b{3}', text).group()\ndef text_match_three_groups_group_names_without_group(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)b{3}', text).groups()[0]\ndef text_match_one_or_more_b(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match(r'a(.)b*', text)\ndef text_match_one_or_more_b_groups(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)b*', text).groups()\ndef text_match_one_or_more_b_group_names(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)b*', text).group()\ndef text_match_one_or_more_b_group_names_without_group(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)b*', text).groups()[0]\ndef text_match_two_or_more_b(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more 'b'.\n    '''\n    return re.match(r'a(.)b{2,}', text)\ndef text_match_two_or_more_b_groups(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more 'b'.\n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)b{2,}', text).groups()\ndef text_match_two_or_more_b_group_names(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more 'b'.\n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)b{2,}', text).group()\ndef text_match_two_or_more_b_group_names_without_group(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more 'b'.\n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)b{2,}', text).groups()[0]\ndef text_match_not_b(text):\n    '''\n    Write a function that matches a string that has an a followed by anything but 'b'.\n    '''\n    return re.match(r'a(.)\\B', text)\ndef text_match_not_b_groups(text):\n    '''\n    Write a function that matches a string that has an a followed by anything but 'b'.\n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)\\B', text).groups()\ndef text_match_not_b_group_names(text):\n    '''\n    Write a function that matches a string that has an a followed by anything but 'b'.\n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)\\B', text).group()\ndef text_match_not_b_group_names_without_group(text):\n    '''\n    Write a function that matches a string that has an a followed by anything but 'b'.\n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)\\B', text).groups()[0]\ndef text_match_n_b(text):\n    '''\n    Write a function that matches a string that has an a followed by exactly n 'b'.\n    '''\n    return re.match(r'a(.)b{1}', text)\ndef text_match_n_b_groups(text):\n    '''\n    Write a function that matches a string that has an a followed by exactly n 'b'.\n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)b{1}', text).groups()\ndef text_match_n_b_group_names(text):\n    '''\n    Write a function that matches a string that has an a followed by exactly n 'b'.\n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)b{1}', text).group()\ndef text_match_n_b_group_names_without_group(text):\n    '''\n    Write a function that matches a string that has an a followed by exactly n 'b'.\n    The function should return a list of three elements:\n    the first element is the entire match, and the second and third elements are the\n    substrings that matched the substitution respectively.\n    '''\n    return re.match(r'a(.)b{1}', text).groups()[0]\ndef text_match_n_b_or_more_b(text):\n    '''\n    Write a function that matches a string that has an a followed by at least n 'b'.\n    '''\n    return re.match(r'a(.)b{1,}', text)\ndef text_match_n_b_or_more_b_groups(text):\n    '''\n    Write a function that matches a string that has an a followed by at least n 'b'.\n    The function should return a list of three elements:\n    the first element i"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = re.compile(r'ab{3}')\n    if regex.search(text):\n        return True\n    return False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    if re.search(pattern,text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.match(r'.*a{3}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by exactly four 'b'.\n    '''\n    if re.match(r'.*a{4}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    if re.match(r'.*a{5}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    if re.match(r'.*a{6}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    if re.match(r'.*a{7}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    if re.match(r'.*a{8}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b'.\n    '''\n    if re.match(r'.*a{9}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by zero 'b'.\n    '''\n    if re.match(r'.*a{0}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_once(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    if re.match(r'.*a{1}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_double(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b'.\n    '''\n    if re.match(r'.*a{2}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_triple(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.match(r'.*a{3}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_quint(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    if re.match(r'.*a{5}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_sext(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    if re.match(r'.*a{6}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_sept(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    if re.match(r'.*a{7}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_oct(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    if re.match(r'.*a{8}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_non(text):\n    '''\n    Write a function that matches a string that has an a followed by non 'b'.\n    '''\n    if re.match(r'.*a{9}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    if re.match(r'.*a{1,}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_one_or_none(text):\n    '''\n    Write a function that matches a string that has an a followed by one or none 'b'.\n    '''\n    if re.match(r'.*a{0,}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more 'b'.\n    '''\n    if re.match(r'.*a{2,}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_or_none(text):\n    '''\n    Write a function that matches a string that has an a followed by two or none 'b'.\n    '''\n    if re.match(r'.*a{0,}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    if re.match(r'.*a{0,}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_zero_or_none(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or none 'b'.\n    '''\n    if re.match(r'.*a{0,}b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_one_or_more_l(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    if re.match(r'.*a.*b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_one_or_none_l(text):\n    '''\n    Write a function that matches a string that has an a followed by one or none 'b'.\n    '''\n    if re.match(r'.*a.*b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_or_more_l(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more 'b'.\n    '''\n    if re.match(r'.*a.*b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_or_none_l(text):\n    '''\n    Write a function that matches a string that has an a followed by two or none 'b'.\n    '''\n    if re.match(r'.*a.*b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_zero_or_more_l(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    if re.match(r'.*a.*b.*',text):\n        return True\n    else:\n        return False\n    \ndef text_match_zero_or_none_l(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or none 'b'.\n    '''\n    if re.match(r'.*a.*b.*',text):\n        return True\n    else:\n        return False\n    \ndef tex"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    matches = pattern.findall(text)\n    print matches\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search(r'(?<=\\A)a{3}(?=\\B)', text):\n        return True\n    return False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_3(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_1(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_2(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_4(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b' in a row.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_5(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b' in a row.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_6(text):\n    '''\n    Write a function that matches a string that has an a followed by three to five 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_7(text):\n    '''\n    Write a function that matches a string that has an a followed by three to five 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_8(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    pattern = re.compile(r'ab{5}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_9(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    pattern = re.compile(r'ab{5,}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_10(text):\n    '''\n    Write a function that matches a string that has an a followed by two to three 'b' in a row.\n    '''\n    pattern = re.compile(r'ab{2,3}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_11(text):\n    '''\n    Write a function that matches a string that has an a followed by two to three 'b' in a row.\n    '''\n    pattern = re.compile(r'ab{2,3}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_12(text):\n    '''\n    Write a function that matches a string that has an a followed by three to five 'b'.\n    '''\n    pattern = re.compile(r'ab{2,5}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_13(text):\n    '''\n    Write a function that matches a string that has an a followed by three to five 'b'.\n    '''\n    pattern = re.compile(r'ab{2,5}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_14(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    pattern = re.compile(r'ab{5}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_15(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    pattern = re.compile(r'ab{5,}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_16(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    pattern = re.compile(r'ab{4}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_17(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    pattern = re.compile(r'ab{4,}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_18(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b' followed by five 'b'.\n    '''\n    pattern = re.compile(r'ab{3}b{5}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_19(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b' followed by five 'b'.\n    '''\n    pattern = re.compile(r'ab{3}b{5,}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_20(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b' followed by five 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}b{5}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_21(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    pattern = re.compile(r'ab{5}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_22(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    pattern = re.compile(r'ab{5,}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_23(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b' followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}b{3}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_24(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b' followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}b{3,}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_25(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b' followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}b{3,}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_26(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b' followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}b{3,}')\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_27(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'."
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    if test_list == []:\n        return str(test_list)\n    else:\n        return '(' + new_tuple(test_list[1:], test_str) + ','+ test_str + ')'\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = ()\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            test_tuple += (test_list[i],)\n        else:\n            test_tuple += (test_str[i],)\n    return test_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    i = test_list.index(test_str)\n    a = test_list[:i]\n    b = test_list[i+1:]\n    print a, b\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i)\n    new_list.append(test_str)\n    return tuple(new_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = test_list[1:]\n    return (test_list[0], new_list, test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple([x for x in test_list if x!= test_str])\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    print('new_tuple: ',test_list, test_str)\n    # This will create a new tuple and return the new tuple.\n    return tuple([test_list, test_str])\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    try:\n        new_tuple = tuple(test_list)\n        new_tuple += (test_str,)\n        return new_tuple\n    except Exception as e:\n        print('ERROR: ', e)\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    def check(nums,i):\n        #checking whether the value at index i is even\n        return nums[i] % 2 == 0\n    #checking whether the length of the list is even\n    if len(nums) % 2 == 0:\n        #checking every even index\n        for i in range(0,len(nums),2):\n            if not check(nums,i):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(x%2==0 for x in nums[0::2])\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(nums[i]%2 == 0 for i in range(len(nums)) if i%2 == 0)\n    \ndef even_position_2(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(i%2 == 0 for i in nums)\n    \nprint even_position_2([1,3,4,5,6,7,8])\nprint even_position_2([1,3,4,5,6])\nprint even_position_2([1,3,4,5]"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(nums[i]%2==0 for i in range(len(nums)) if i%2==0)\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in xrange(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if i%2 == 0:\n            new_list.append(nums[i])\n    return new_list\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(x%2 == 0 for x in nums[0::2])\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for val in test_tup:\n        if not isinstance(val, tuple):\n            new_tup = new_tup + (val,)\n        else:\n            new_tup = new_tup + remove_nested(val)\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    ans = []\n    for t in test_tup:\n        if not isinstance(t, tuple):\n            ans.append(t)\n        else:\n            ans.extend(remove_nested(t))\n    return tuple(ans)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x: x not in test_tup, test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for _ in range(2):\n        test_tup = test_tup[0]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            new_tup += (elem,)\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for tup in test_tup:\n        if isinstance(tup, tuple):\n            new_tup = new_tup + remove_nested(tup)\n        else:\n            new_tup = new_tup + (tup,)\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if type(i) is not tuple:\n            new_tup = new_tup + (i,)\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Filter out tuples that are nested.\n    return tuple(\n        filter(\n            lambda x: type(x)!= tuple,\n            test_tup\n        )\n    )\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    l=[]\n    for x in test_tup:\n        if type(x) is not tuple:\n            l.append(x)\n        else:\n            l.extend(remove_nested(x))\n    return tuple(l)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #You can remove tuples in Python by converting them to Lists\n    #and then use the del keyword.\n    #convert to list\n    lst = list(test_tup)\n    for index,tup in enumerate(lst):\n        if type(tup) is tuple:\n            del lst[index]\n    #convert to tuple\n    test_tup = tuple(lst)\n    return test_tup\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if isinstance(x, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list == []:\n        return 1\n    else:\n        return 1 + count_list(input_list[1:])\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if len(input_list) == 0:\n        return 0\n    else:\n        return 1 + count_list(input_list[1:])\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    if type(input_list) == list:\n        return 1 + count_list(input_list[1:])\n    else:\n        return 0\n    \nprint count_list([1,2,3,[4,5,6,[7,[8,9]]]])\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == type([]):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for input_list in input_list: \n        if type(input_list) == list: \n            count += 1 \n    return count \n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_of_list = input_list.count(input_list)\n    return num_of_list\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return input_list.count([])\n    # result = 0\n    # for item in input_list:\n    #     if isinstance(item,list):\n    #         result += 1\n    # return result\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if arr[0] == x:\n        return 0\n    if arr[-1] == x:\n        return len(arr) - 1\n    return last(arr[1:],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=len(arr)\n    last_pos=0\n    while i>0:\n        if arr[i-1]>x:\n            last_pos=i\n            i-=1\n        i-=1\n    return last_pos\ndef find_element(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    first_pos=0\n    i=0\n    while i<len(arr):\n        if arr[i]<x:\n            first_pos=i\n            i+=1\n        i+=1\n    return first_pos\ndef print_range(arr,start,end):\n    '''\n    Write a python function to print all elements in a range.\n    '''\n    for i in range(start,end+1):\n        print arr[i]\ndef binary_search(arr,x):\n    '''\n    Write a python function to find the element in a sorted array using binary search.\n    '''\n    mid=len(arr)//2\n    if len(arr)==1:\n        if arr[0]==x:\n            return 1\n        else:\n            return 0\n    else:\n        if arr[mid]==x:\n            return 1\n        elif arr[mid]>x:\n            return binary_search(arr[:mid],x)\n        else:\n            return binary_search(arr[mid:],x)\ndef partition(arr,start,end):\n    '''\n    Write a python function to partition a array such that all elements\n    less than the pivot is to the left of the pivot and all elements\n    greater than the pivot are to the right of the pivot.\n    '''\n    i=start\n    pivot=arr[end]\n    for j in range(start,end):\n        if arr[j]<pivot:\n            temp=arr[j]\n            arr[j]=arr[i]\n            arr[i]=temp\n            i+=1\n    temp=arr[end]\n    arr[end]=arr[i]\n    arr[i]=temp\n    return i\ndef quick_sort(arr,start,end):\n    '''\n    Write a python function to sort an array using quicksort.\n    '''\n    if start>=end:\n        return\n    else:\n        pivot_pos=partition(arr,start,end)\n        quick_sort(arr,start,pivot_pos-1)\n        quick_sort(arr,pivot_pos+1,end)\ndef quick_sort_iterative(arr):\n    '''\n    Write a python function to sort an array using quicksort in an iterative manner.\n    '''\n    stack=[]\n    stack.append(0)\n    stack.append(len(arr))\n    while len(stack)>1:\n        end=stack.pop()\n        start=stack.pop()\n        pivot_pos=partition(arr,start,end)\n        if start<pivot_pos-1:\n            stack.append(start)\n            stack.append(pivot_pos-1)\n        if pivot_pos+1<end:\n            stack.append(pivot_pos+1)\n            stack.append(end)\ndef bubble_sort(arr):\n    '''\n    Write a python function to sort an array using bubble sort.\n    '''\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j]>arr[j+1]:\n                temp=arr[j]\n                arr[j]=arr[j+1]\n                arr[j+1]=temp\ndef print_arr(arr):\n    for i in range(len(arr)):\n        print arr[i]\ndef compare_arr(arr1,arr2):\n    '''\n    Write a python function to compare the two array elements.\n    '''\n    for i in range(len(arr1)):\n        if arr1[i]==arr2[i]:\n            pass\n        else:\n            return 0\n    return 1\ndef find_next_num(arr,x):\n    '''\n    Write a python function to find the next larger number in an array.\n    '''\n    next_num=0\n    for i in range(len(arr)):\n        if x>arr[i]:\n            next_num=arr[i]\n    return next_num\ndef sum_of_array(arr):\n    '''\n    Write a python function to return the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum+=arr[i]\n    return sum\ndef sum_of_array_recursive(arr,start,end):\n    if start>=end:\n        return 0\n    else:\n        return arr[start]+sum_of_array_recursive(arr,start+1,end)\ndef multiply(arr):\n    '''\n    Write a python function to multiply two arrays.\n    '''\n    result=[]\n    for i in range(len(arr)):\n        temp=arr[i]\n        for j in range(i):\n            temp*=arr[j]\n        result.append(temp)\n    return result\ndef multiply_recursive(arr,start,end):\n    '''\n    Write a python function to multiply two arrays in a recursive manner.\n    '''\n    if start>=end:\n        return 1\n    else:\n        return arr[start]*multiply_recursive(arr,start+1,end)\ndef multiply_iterative(arr1,arr2):\n    '''\n    Write a python function to multiply two arrays in an iterative manner.\n    '''\n    result=[]\n    i=0\n    for j in range(len(arr2)):\n        temp=arr2[j]\n        for k in range(j):\n            temp*=arr2[k]\n        result.append(temp)\n    i=0\n    for i in range(len(arr1)):\n        result[i]*=arr1[i]\n    return result\ndef sum_of_squares(arr):\n    '''\n    Write a python function to find the sum of squares of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum+=arr[i]**2\n    return sum\ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove duplicates from an array.\n    '''\n    next_pos=0\n    for i in range(len(arr)):\n        if arr[i]!=arr[next_pos]:\n            arr[next_pos]=arr[i]\n            next_pos+=1\n    return next_pos\ndef find_inversion(arr):\n    '''\n    Write a python function to find the inversion in a sorted array.\n    '''\n    inversion=0\n    if len(arr)==1:\n        return 0\n    else:\n        mid=len(arr)//2\n        if len(arr)%2==0:\n            if arr[mid]>arr[mid-1]:\n                inversion+=1\n            inversion+=find_inversion(arr[:mid])\n            inversion+=find_inversion(arr[mid:])\n        else:\n            if arr[mid]>arr[mid-1]:\n                inversion+=1\n            inversion+=find_inversion(arr[:mid])\n            inversion+=find_inversion(arr[mid+1:])\n    return inversion\ndef find_inversion_recursive(arr,start,end):\n    '''\n    Write a python function to find the inversion in a sorted array in a recursive manner.\n    '''\n    if start>=end:\n        return 0\n    else:\n        mid=start+(end-start)//2\n        if mid<end and arr[mid]>arr[mid+1]:\n            return 1+find_inversion_recursive(arr,start,mid)+find_inversion_recursive(arr,mid+1,end)\n        elif mid>start and arr[mid]<arr[mid-1]:\n            return 1+find_inversion_recursive(arr,mid+1,end)+find_inversion_recursive(arr,start,mid-1)\n        else:\n            return 0+find_inversion_recursive(arr,mid+1,end)+find_inversio"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    index=0\n    for i in range(0,len(arr)):\n        if arr[i]==x:\n            index=i\n        else:\n            continue\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) < 1:\n        return None\n    if len(arr) == 1:\n        return 0 if arr[0] == x else None\n    if arr[0] == x:\n        return 0\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start+end)/2\n        if arr[mid] < x:\n            start = mid+1\n        elif arr[mid] > x:\n            end = mid-1\n        else:\n            return mid\n    return None\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[-1] == x:\n        return len(arr)-1\n    else:\n        low = 0\n        high = len(arr)-1\n        while low <= high:\n            mid = (low + high)/2\n            if arr[mid] < x:\n                low = mid + 1\n            elif arr[mid] > x:\n                high = mid - 1\n            else:\n                return mid\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    for i in range(len(arr)-1,0,-1):\n        if arr[i] == x:\n            return i\n        \n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Base Case\n    if len(arr)==1:\n        if arr[0]==x:\n            return 0\n        else:\n            return -1\n    \n    # Recursive Case\n    mid = len(arr)//2\n    if arr[mid]==x:\n        return mid\n    elif arr[mid]>x:\n        return last(arr[:mid],x)\n    else:\n        return last(arr[mid+1:],x)+mid+1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)-1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr==[]:\n        return -1\n    if arr[-1]==x:\n        return len(arr)-1\n    smaller=last(arr[:-1],x)\n    if smaller!=-1:\n        return smaller\n    else:\n        return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search(r'a(.*?)b',text)\n    return result.group(1)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b$')\n    if pattern.match(text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start_text = re.match('^.*a.*b$',text)\n    return start_text\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*b$',re.I)\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*b$')\n    matches = pattern.search(text)\n    print(text)\n    return matches\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search('^a.*b$', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    def match(s):\n        if re.search('a.*b',s):\n            return True\n        else:\n            return False\n    return match\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a_pattern = re.compile(r'a.*?b')\n    mo = a_pattern.search(text)\n    return mo.group()\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_11(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_12(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_13(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_14(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_15(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_16(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_17(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex.search(text)\ndef text_starta_endb_noncapture_18(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    It should not match 'ba' or 'ab'.\n    '''\n    text_regex = re.compile(r'(?<=a)(.*?)(?=b)', re.DOTALL)\n    return text_regex"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum = sum + dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    '''\n    return sum([v for k,v in dict.items()])\n    '''\n    # OR\n    '''\n    return sum(dict.values())\n    '''\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k, v in dict.items():\n        sum += v\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s = 0\n    for each in dict.values():\n        s += each\n    return s\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    result = 0\n    for k,v in dict.items():\n        result += v\n    return result\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s = 0\n    for i in dict:\n        s += dict[i]\n    return s\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_all_items = 0\n    for key in dict:\n        sum_of_all_items += dict[key]\n    return sum_of_all_items\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(1, n+1, 2))\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(n+1)[1::2])\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n % 2!= 0:\n        return n\n    else:\n        return sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([x for x in range(n, r+1) if x % 2!= 0])\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd_sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            odd_sum += i\n    return odd_sum\n    \ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    even_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            even_sum += i\n    return even_sum\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    if n%2 == 1:\n        total += n\n    else:\n        pass\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(l,r+1) if i%2==1])\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    res = 0\n    for i in range(l,r+1):\n        if i%2==1:\n            res+=i\n    return res\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<1:\n        return\n    if n%2==1:\n        sum_odd(n-1)\n    else:\n        print n\n        sum_odd(n-1)\n    \ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    if n<1:\n        return\n    if n%2==0:\n        sum_even(n-1)\n    else:\n        print n\n        sum_even(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    sum = 0\n    for i in range(l, r+1):\n        if i%2 == 1:\n            sum += i\n    return sum\n    "
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    tot=0\n    for i in range(len(arr)):\n        tot+=arr[i]\n    return tot\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return reduce(lambda x,y:x+y,arr)\n    "
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \ndef _sort(arr):\n    '''\n    Write a python function to sort the array in increasing order.\n    '''\n    arr.sort()\n    return arr\n    \ndef _prod(arr):\n    '''\n    Write a python function to find the product of all the elements in the array.\n    '''\n    return reduce(lambda x,y: x*y, arr)\n    \ndef _max(arr):\n    '''\n    Write a python function to find the max element in an array.\n    '''\n    return max(arr)\n    \ndef _min(arr):\n    '''\n    Write a python function to find the min element in an array.\n    '''\n    return min(arr)\n    \ndef _reverse(arr):\n    '''\n    Write a python function to reverse the elements in the array.\n    '''\n    arr.reverse()\n    return arr\n    \ndef _slice(arr, start, end):\n    '''\n    Write a python function to slice the elements in an array.\n    '''\n    return arr[start:end]\n    \ndef _concat(arr1, arr2):\n    '''\n    Write a python function to concatenate two arrays.\n    '''\n    return arr1+arr2\n    \ndef _split(arr, n):\n    '''\n    Write a python function to split the array into n equal parts.\n    '''\n    for i in range(0,len(arr),n):\n        yield arr[i:i+n]\n        \ndef _count(arr, elem):\n    '''\n    Write a python function to count the number of elements in an array.\n    '''\n    return arr.count(elem)\n    \ndef _apply(func, arr):\n    '''\n    Write a python function to apply a function to each element of the array.\n    '''\n    for i in arr:\n        yield func(i)\n    \ndef _filter(func, arr):\n    '''\n    Write a python function to filter the elements of the array.\n    '''\n    for i in arr:\n        if func(i):\n            yield i\n    \ndef _reduce(func, arr):\n    '''\n    Write a python function to reduce the elements of the array.\n    '''\n    return reduce(func, arr)\n    \ndef _sorted(arr):\n    '''\n    Write a python function to sort the elements of the array.\n    '''\n    return sorted(arr)\n    \ndef _reversed(arr):\n    '''\n    Write a python function to reverse the elements of the array.\n    '''\n    arr.reverse()\n    return arr\n    \ndef _range(start, end):\n    '''\n    Write a python function to get the range of an array.\n    '''\n    return range(start, end)\n    \ndef _zip(arr1, arr2):\n    '''\n    Write a python function to zip two arrays.\n    '''\n    return zip(arr1, arr2)\n    \ndef _enumerate(arr):\n    '''\n    Write a python function to enumerate the elements of the array.\n    '''\n    for i, elem in enumerate(arr):\n        yield (i, elem)\n    \ndef _any(arr):\n    '''\n    Write a python function to check whether any element is true.\n    '''\n    for i in arr:\n        if i:\n            return True\n    return False\n    \ndef _all(arr):\n    '''\n    Write a python function to check whether all elements are true.\n    '''\n    for i in arr:\n        if not i:\n            return False\n    return True\n    \ndef _map(func, arr):\n    '''\n    Write a python function to map the function on the array.\n    '''\n    for i in arr:\n        yield func(i)\n        \ndef _reduce_with(func, arr):\n    '''\n    Write a python function to reduce the elements of the array using the function.\n    '''\n    return reduce(func, arr)\n    \ndef _filter_with(func, arr):\n    '''\n    Write a python function to filter the elements of the array using the function.\n    '''\n    for i in arr:\n        if func(i):\n            yield i\n    \ndef _map_with(func, arr):\n    '''\n    Write a python function to map the function on the elements of the array.\n    '''\n    for i in arr:\n        yield func(i)\n    \ndef _zip_with(func, arr1, arr2):\n    '''\n    Write a python function to zip two arrays using the function.\n    '''\n    for i, j in zip(arr1, arr2):\n        yield (func(i, j), i, j)\n    \ndef _reduce_with_with(func, arr):\n    '''\n    Write a python function to reduce the elements of the array using the function.\n    '''\n    return reduce(func, arr)\n    \ndef _filter_with_with(func, arr):\n    '''\n    Write a python function to filter the elements of the array using the function.\n    '''\n    for i in arr:\n        if func(i):\n            yield i\n    \ndef _map_with_with(func, arr):\n    '''\n    Write a python function to map the function on the elements of the array.\n    '''\n    for i in arr:\n        yield func(i)\n    \ndef _apply_with(func, arr):\n    '''\n    Write a python function to apply the function on the array.\n    '''\n    for i in arr:\n        yield func(i)\n    \ndef _reduce_with_with_with(func, arr):\n    '''\n    Write a python function to reduce the elements of the array using the function.\n    '''\n    return reduce(func, arr)\n    \ndef _filter_with_with_with(func, arr):\n    '''\n    Write a python function to filter the elements of the array using the function.\n    '''\n    for i in arr:\n        if func(i):\n            yield i\n    \ndef _map_with_with_with(func, arr):\n    '''\n    Write a python function to map the function on the elements of the array.\n    '''\n    for i in arr:\n        yield func(i)\n    \ndef _zip_with_with(func, arr1, arr2):\n    '''\n    Write a python function to zip two arrays using the function.\n    '''\n    for i, j in zip(arr1, arr2):\n        yield (func(i, j), i, j)\n    \ndef _reduce_with_with_with(func, arr):\n    '''\n    Write a python function to reduce the elements of the array using the function.\n    '''\n    return reduce(func, arr)\n    \ndef _filter_with_with_with(func, arr):\n    '''\n    Write a python function to filter the elements of the array using the function.\n    '''\n    for i in arr:\n        if func(i):\n            yield i\n    \ndef _map_with_with_with(func, arr):\n    '''\n    Write a python function to map the function on the elements of the array.\n    '''\n    for i in arr:\n        yield func(i)\n    \ndef _sum_with(func, arr):\n    '''\n    Write a python function to calculate the sum of an array using the function.\n    '''\n    return sum(func(arr))\n    \ndef _prod_with(func, arr):\n    '''\n    Write a python function to calculate the product of an array using the function.\n    '''\n    return reduce(func, arr)\n    \ndef _max_with(func, arr):\n    '''\n    Write a python function to calculate the max element of an array using the function.\n    '''\n    return max(func(arr))\n    \ndef _min_with(func, arr):\n    '''\n    Write a python function to calculate the min element of an array using the function.\n    '''\n    return min(func(arr))\n    \ndef _reverse_with(func, arr):\n    '''\n    Write a python function to reverse the elements of the array using the function.\n    '''\n    return fun"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr:  \n        return 0  \n    else:  \n        return arr[0] + _sum(arr[1:])  \n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #print(arr)\n    return sum(arr)\n    #return sum(map(int,arr))\ndef sumofdigits(arr):\n    return sum([int(i) for i in arr])\ndef _sumofdigits(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #print(arr)\n    return sum(map(int,arr))\ndef sumofdigits(arr):\n    return sum([int(i) for i in arr])\ndef _sumofdigits(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #print(arr)\n    return sum(map(int,arr))\ndef _prod(arr):\n    '''\n    Write a python function to find the product of an array.\n    '''\n    return prod(arr)\ndef _prod(arr):\n    '''\n    Write a python function to find the product of an array.\n    '''\n    return prod(arr)\ndef prodofdigits(arr):\n    return prod(map(int,arr))\ndef _prodofdigits(arr):\n    '''\n    Write a python function to find the product of an array.\n    '''\n    return prod(map(int,arr))\ndef _min(arr):\n    '''\n    Write a python function to find the minimum of an array.\n    '''\n    return min(arr)\ndef _max(arr):\n    '''\n    Write a python function to find the maximum of an array.\n    '''\n    return max(arr)\ndef _min(arr):\n    '''\n    Write a python function to find the minimum of an array.\n    '''\n    return min(arr)\ndef _max(arr):\n    '''\n    Write a python function to find the maximum of an array.\n    '''\n    return max(arr)\ndef _median(arr):\n    '''\n    Write a python function to find the median of an array.\n    '''\n    return median(arr)\ndef _median(arr):\n    '''\n    Write a python function to find the median of an array.\n    '''\n    return median(arr)\ndef _mean(arr):\n    '''\n    Write a python function to find the mean of an array.\n    '''\n    return mean(arr)\ndef _variance(arr):\n    '''\n    Write a python function to find the variance of an array.\n    '''\n    return var(arr)\ndef _std(arr):\n    '''\n    Write a python function to find the standard deviation of an array.\n    '''\n    return std(arr)\ndef _count(arr):\n    '''\n    Write a python function to count the number of occurrences of an element in an array.\n    '''\n    return len(arr)\ndef _count(arr):\n    '''\n    Write a python function to count the number of occurrences of an element in an array.\n    '''\n    return len(arr)\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the most frequent element in an array.\n    '''\n    return Counter(arr).most_common(1)[0][0]\ndef _most_frequent(arr):\n    '''\n    Write a python function to find the mos"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for i in arr:\n        result += i\n    return result\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d | n >> (32-d)) & 0xffffffff\ndef ror(x, n):\n    return ((x >> n) | (x << (32-n))) & 0xffffffff\ndef p64(s):\n    return struct.pack(\"<Q\",s)\ndef k(a,b,c,d):\n    return (b & c) | ((~b) & d)\ndef xor(a,b):\n    return a^b\ndef left_rotate(n,d):\n    return (n << d | n >> (32-d)) & 0xffffffff\ndef ch(s,pos):\n    return ((s >> (8*pos)) & 0x000000ff)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef shuffle(a,b,c):\n    temp = a & b\n    a = b\n    b = temp\n    a = (a << 7) & 0xffffffff\n    a = a ^ c\n    b = (b << 7) & 0xffffffff\n    b = b ^ c\n    a = (a << 7) & 0xffffffff\n    return (a,b)\ndef hash(data):\n    return sha1(sha1(data).digest()).digest()\ndef sha1(data):\n    return sha.new(data)\ndef chmul(a,b):\n    return (a*b)\ndef chmul(a,b):\n    return (a*b)\ndef chmul(a,b):\n    return (a*b)\ndef chmul(a,b):\n    return (a*b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chxor(a,b):\n    return (a^b)\ndef chmul(a,b):\n    return (a*b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef shuffle(a,b,c):\n    temp = a & b\n    a = b\n    b = temp\n    a = (a << 7) & 0xffffffff\n    a = a ^ c\n    b = (b << 7) & 0xffffffff\n    b = b ^ c\n    a = (a << 7) & 0xffffffff\n    return (a,b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef shuffle(a,b,c):\n    temp = a & b\n    a = b\n    b = temp\n    a = (a << 7) & 0xffffffff\n    a = a ^ c\n    b = (b << 7) & 0xffffffff\n    b = b ^ c\n    a = (a << 7) & 0xffffffff\n    return (a,b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chmul(a,b):\n    return (a*b)\ndef chmul(a,b):\n    return (a*b)\ndef chmul(a,b):\n    return (a*b)\ndef chmul(a,b):\n    return (a*b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef cadd(a,b):\n    return (a+b)\ndef chmul(a,b):\n    return (a*b)\ndef chxor(a,b):\n    return (a^b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef shuffle(a,b,c):\n    temp = a & b\n    a = b\n    b = temp\n    a = (a << 7) & 0xffffffff\n    a = a ^ c\n    b = (b << 7) & 0xffffffff\n    b = b ^ c\n    a = (a << 7) & 0xffffffff\n    return (a,b)\ndef cadd(a,b):\n    return (a+b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef shuffle(a,b,c):\n    temp = a & b\n    a = b\n    b = temp\n    a = (a << 7) & 0xffffffff\n    a = a ^ c\n    b = (b << 7) & 0xffffffff\n    b = b ^ c\n    a = (a << 7) & 0xffffffff\n    return (a,b)\ndef xor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chmul(a,b):\n    return (a*b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chxor(a,b):\n    return (a^b)\ndef chxor(a,b):\n    return (a^b)\ndef chunk(data,sz):\n    return [data[i:i+sz] for i in range(0,len(data),sz)]\ndef chmul(a,b):\n    return (a*b)\ndef shuffle(a,b,c):\n    temp = a & b\n    a = b\n    "
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    return ((n << d) | (n >> (32 - d))) & mask\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    bits = 32\n    bitmask = 2**bits - 1\n    return ((n << d) | ((n & bitmask) >> (bits - d)))\n    \ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    bits = 32\n    bitmask = 2**bits - 1\n    return ((n >> d) | ((n & bitmask) << (bits - d)))\n    \ndef A(s,t,k,r):\n    '''\n    Write a function that performs a one-way hash on the concatenation of strings s and t.\n    '''\n    for i in range(0,r):\n        s = (s + t) % 2**k\n    return s\n    \ndef B(s,t,k,r):\n    '''\n    Write a function that performs a two-way hash on the concatenation of strings s and t.\n    '''\n    for i in range(0,r):\n        s = (s + A(t,i,k,r)) % 2**k\n        t = (t + A(s,i,k,r)) % 2**k\n    return s\n    \ndef test_A():\n    '''\n    Test the correctness of the A function.\n    '''\n    print(\"Testing the A function...\")\n    s = int(0xacf1113b7f4e8eb8e4914cbe1f3b51c27c7cf05a95d5fc5cacfcba7ba7a0f9c,16)\n    t = int(0x5cacfcba7ba7a0f9c5cacfcba7ba7a0f9cacf1113b7f4e8eb8e4914cbe1,16)\n    k = 6\n    r = 6\n    s1 = A(s,t,k,r)\n    s2 = B(s,t,k,r)\n    s3 = A(s,t,k,r)\n    s4 = B(s,t,k,r)\n    assert s1 == s2\n    assert s2 == s3\n    assert s3 == s4\n    print(\"Passed.\")\n    \ndef test_B():\n    '''\n    Test the correctness of the B function.\n    '''\n    print(\"Testing the B function...\")\n    s = int(0xacf1113b7f4e8eb8e4914cbe1f3b51c27c7cf05a95d5fc5cacfcba7ba7a0f9c,16)\n    t = int(0x5cacfcba7ba7a0f9c5cacfcba7ba7a0f9cacf1113b7f4e8eb8e4914cbe1,16)\n    k = 6\n    r = 6\n    s1 = A(s,t,k,r)\n    s2 = B(s,t,k,r)\n    s3 = A(s,t,k,r)\n    s4 = B(s,t,k,r)\n    assert s1 == s2\n    assert s2 == s3\n    assert s3 == s4\n    print(\"Passed.\")\n    \ntest_A()\ntest_B()\n    "
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    m = n<<d\n    return (m&0xffffffff) | (m>>32)\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0: return 0\n    if n & 1 == 0:\n        return left_rotate((n >> 1), d)\n    return (n >> d) | (left_rotate((n & 1) << (32 - d), d) << 1)\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff\ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n >> d) | ((n & (1 << d)) << (32 - d))\ndef xor_strings(str1,str2):\n    '''\n    Write a function to that do XOR operations on two strings of the same size and return the result.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    return ''.join(chr(ord(x)^ord(y)) for x,y in zip(str1,str2))\ndef hash_string(string):\n    '''\n    Write a function to that returns the hash of a string.\n    '''\n    # O(n)\n    hash = 0\n    for i in range(len(string)):\n        hash = left_rotate(hash,ord(string[i]) + i)\n    return hash & 0xffffffff\ndef hash_block(block):\n    '''\n    Write a function to that returns the hash of a block of data.\n    '''\n    # O(n)\n    hash = 0\n    for i in range(len(block)):\n        hash = left_rotate(hash,ord(block[i]) + i)\n    return hash & 0xffffffff\ndef sha1(string):\n    '''\n    Write a function to compute the sha1 hash of a string.\n    '''\n    # O(n)\n    hash = 0x67452301\n    for i in range(0,len(string),64):\n        block = string[i:i+64]\n        hash = left_rotate(hash,hash_block(block))\n    return hash & 0xffffffff\ndef sha1_string(string):\n    '''\n    Write a function to compute the sha1 hash of a string.\n    '''\n    # O(n)\n    hash = 0x67452301\n    for i in range(0,len(string),64):\n        block = string[i:i+64]\n        hash = left_rotate(hash,hash_block(block))\n    return hex(hash)[2:-1]\ndef sha1_hex(string):\n    '''\n    Write a function to compute the sha1 hash of a string.\n    '''\n    # O(n)\n    hash = 0x67452301\n    for i in range(0,len(string),64):\n        block = string[i:i+64]\n        hash = left_rotate(hash,hash_block(block))\n    return hex(hash)[2:-1]\ndef sha1_file(filename):\n    '''\n    Write a function to compute the sha1 hash of a file.\n    '''\n    hash = 0x67452301\n    with open(filename,\"r\") as f:\n        for line in f:\n            for i in range(0,len(line),64):\n                block = line[i:i+64]\n                hash = left_rotate(hash,hash_block(block))\n    return hex(hash)[2:-1]\ndef sha1_file_hex(filename):\n    '''\n    Write a function to compute the sha1 hash of a file.\n    '''\n    hash = 0x67452301\n    with open(filename,\"r\") as f:\n        for line in f:\n            for i in range(0,len(line),64):\n                block = line[i:i+64]\n                hash = left_rotate(hash,hash_block(block))\n    return hex(hash)[2:-1]\ndef sha1_string_hex(string):\n    '''\n    Write a function to compute the sha1 hash of a string.\n    '''\n    # O(n)\n    hash = 0x67452301\n    for i in range(0,len(string),64):\n        block = string[i:i+64]\n        hash = left_rotate(hash,hash_block(block))\n    return hex(hash)[2:-1]\ndef sha1_string_file(string,filename):\n    '''\n    Write a function to compute the sha1 hash of a string.\n    '''\n    # O(n)\n    hash = 0x67452301\n    with open(filename,\"r\") as f:\n        for line in f:\n            for i in range(0,len(line),64):\n                block = line[i:i+64]\n                hash = left_rotate(hash,hash_block(block))\n    return hex(hash)[2:-1]\ndef sha1_file_string(filename,string):\n    '''\n    Write a function to compute the sha1 hash of a string.\n    '''\n    # O(n)\n    hash = 0x67452301\n    with open(filename,\"r\") as f:\n        for line in f:\n            for i in range(0,len(line),64):\n                block = line[i:i+64]\n                hash = left_rotate(hash,hash_block(block))\n    return hex(hash)[2:-1]\ndef sha1_file_string_hex(filename,string):\n    '''\n    Write a function to compute the sha1 hash of a string.\n    '''\n    # O(n)\n    hash = 0x67452301\n    with open(filename,\"r\") as f:\n        for line in f:\n            for i in range(0,len(line),64):\n                block = line[i:i+64]\n                hash = left_rotate(hash,hash_block(block))\n    return hex(hash)[2:-1]\ndef sha1_hex_string(string):\n    '''\n    Write a function to compute the sha1 hash of a string.\n    '''\n    # O(n)\n    hash = 0x67452301\n    for i in range(0,len(string),64):\n        block = string[i:i+64]\n        hash = left_rotate(hash,hash_block(block))\n    return hex(hash)[2:-1]\ndef sha1_hex_string_file(string,filename):\n    '''\n    Write a function to compute the sha1 hash of a string.\n    '''\n    # O(n)\n    hash = 0x67452301\n    with open(filename,\"r\") as f:\n        for line in f:\n            for i in range(0,len(line),64):\n                block = line[i:i+64]\n                hash = left_rotate(hash,hash_block(block))\n    return hex(hash)[2:-1]\ndef sha1_hex_string_file_hex(string,filename):\n    '''\n    Write a function to compute the sha1 hash of a string.\n    '''\n    # O(n)\n    hash = 0x67452301\n    with open(filename,\"r\") as f:\n        for line in f:\n            for i in range(0,len(line),64):\n                block = line[i:i+64]\n                hash = left_rotate(hash,hash_block(block))\n    return hex(hash)[2:-1]\ndef sha1_string_file_hex(string,filename):\n    '''\n    Write a function to compute the sha1 hash of a string.\n    '''\n    # O(n)\n    hash = 0x67452301\n    with open(filename,\"r\") as f:\n        for line in f:\n            for i in range(0,len(line),64):\n                block = line[i:i+64]\n                hash = left_rotate(hash,hash_block(block))\n    return hex(hash)[2:-1]\ndef sha1_string_file_string_hex(string,filename):\n    '''\n    Write a function to compute the sha1 hash of a string.\n    '''\n    # O(n)\n    hash = 0x67452301\n    with open(filename,\"r\") as f:\n        for line in f:\n            for i in range(0,len(line),64):\n                block = line"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | n >> (32-d)\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n >> d | n << (32-d)\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp=n>>d\n    return (n<<d)^temp\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    if not text:\n        return text\n    elif type(text)!= str:\n        print(\"this function only works on strings\")\n        return\n    else:\n        text = text.replace(' ', '')\n        return text\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    new_text = text.strip()\n    return new_text\ndef case_change(text):\n    '''\n    Write a function that will case change the first letter of a string to upper case.\n    '''\n    new_text = text[0].upper() + text[1:]\n    return new_text\ndef find_longest_word(words):\n    '''\n    Write a function that takes a list of words and returns the longest one.\n    '''\n    max_len = -1\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\ndef is_pangram(text):\n    '''\n    Write a function that will check if a string is panagram or not.\n    A pangram (Greek:\u03c0\u03b1\u03bd \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1, panagram) is a sentence using every letter of the alphabet at least once.\n    For example, the sentence \"The quick brown fox jumps over the lazy dog\" is a pangram,\n    while \"I like cats and dogs\" is not, because letters from the alphabet are missing.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in text.lower():\n            return False\n    return True\ndef is_isogram(text):\n    '''\n    Write a function that will check if a string is an isogram or not.\n    An isogram (Greek:\u03b9\u03b1\u03bb\u03ce\u03bc\u03b1\u03c2, isogram) is a word or phrase without spaces that can be\n    transformed to the same form when its letters are rearranged.\n    For example, \"treat\" is an isogram, while \"goat\" is not,\n    because it can be rearranged into \"gotta\".\n    '''\n    text_lower = text.lower()\n    text_list = list(text_lower)\n    is_isogram = True\n    for index in range(len(text_list)):\n        if text_list[index] in text_list[index+1:]:\n            is_isogram = False\n            break\n    return is_isogram\ndef get_longest_diverse_word(sentence):\n    '''\n    Write a function that takes a string and returns the word with the most unique characters.\n    If two words have the same number of unique characters, return the word that comes first.\n    '''\n    text_list = sentence.split()\n    max_len = -1\n    max_word = \"\"\n    for word in text_list:\n        word_len = len(word)\n        unique_characters = []\n        for letter in word:\n            if letter not in unique_characters:\n                unique_characters.append(letter)\n        if unique_characters:\n            if word_len > max_len:\n                max_len = word_len\n                max_word = word\n            elif word_len == max_len:\n                if word < max_word:\n                    max_word = word\n    return max_word\ndef get_words_in_alphabetical_order(sentence):\n    '''\n    Write a function that takes a string and returns the list of words sorted alphabetically in\n    ascending order.\n    '''\n    text_list = sentence.split()\n    return sorted(text_list)\ndef is_palindrome(text):\n    '''\n    Write a function that takes a string and returns True if it's a palindrome,\n    otherwise False.\n    '''\n    return text == text[::-1]\ndef is_abecedarian(text):\n    '''\n    Write a function that takes a string and returns True if the letters in the string are\n    in alphabetical order, otherwise False.\n    '''\n    text_lower = text.lower()\n    text_list = list(text_lower)\n    for index in range(len(text_list)-1):\n        if text_list[index] > text_list[index+1]:\n            return False\n    return True\ndef get_longest_abecedarian_words(sentence):\n    '''\n    Write a function that takes a string and returns a list of the longest words that are\n    in alphabetical order.\n    '''\n    text_list = sentence.split()\n    max_len = -1\n    max_words = []\n    for word in text_list:\n        if is_abecedarian(word):\n            if len(word) > max_len:\n                max_len = len(word)\n                max_words = [word]\n            elif len(word) == max_len:\n                max_words.append(word)\n    return max_words\ndef word_splitter(text):\n    '''\n    Write a function that takes a string and returns a list of words that can be made from the\n    string by splitting the string on spaces.\n    '''\n    return text.split()\ndef most_common_word(text):\n    '''\n    Write a function that takes a string and returns the most common word.\n    '''\n    text_list = text.split()\n    max_len = -1\n    max_word = \"\"\n    for word in text_list:\n        if word.lower() not in text.lower():\n            continue\n        word_len = len(word)\n        if word_len > max_len:\n            max_len = word_len\n            max_word = word\n    return max_word\ndef is_abbrev(text):\n    '''\n    Write a function that takes a string and returns True if it is a valid abbreviation,\n    otherwise False.\n    '''\n    text_lower = text.lower()\n    pattern = re.compile('^(.*[a-zA-Z]){1,2}(.*)$')\n    return pattern.match(text_lower)!= None\ndef is_valid_abbrev(text):\n    '''\n    Write a function that takes a string and returns True if it is a valid abbreviation,\n    otherwise False.\n    '''\n    text_lower = text.lower()\n    pattern = re.compile('^(.*[a-zA-Z]){1,3}(.*)$')\n    return pattern.match(text_lower)!= None\ndef is_palindrome_permutation(text):\n    '''\n    Write a function that takes a string and returns True if it is a permutation of a palindrome,\n    otherwise False.\n    '''\n    text_list = list(text)\n    text_list.sort()\n    text_lower = text.lower()\n    for index in range(len(text_list)):\n        if text_list[index]!= text_lower[index]:\n            return False\n    return True\ndef get_longest_abbrev(text):\n    '''\n    Write a function that takes a string and returns the longest abbreviation for the string.\n    '''\n    max_len = -1\n    max_abbrev = \"\"\n    for word in text.split():\n        word_len = len(word)\n        if is_valid_abbrev(word):\n            if word_len > max_len:\n                max_len = word_len\n                max_abbrev = word\n    return max_abbrev\ndef all_vowels(text):\n    '''\n    Write a function that takes a string and returns True if all the characters in the string are\n    vowels, otherwise False.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    text_list = list(text)\n    for index in range(len(text_list)):\n        if text_list[index] not in vowels:\n            return False\n    return True\ndef is_abecedarian_permutation(text):\n    '''\n    Write a function that takes a string and returns True if the characters in the string are\n    in alphabetical order, otherwise False.\n    '''\n    text_list = list(text)\n    text_list.sort()\n    text_lower = text.lower()\n    for index in range(len(text_list)):\n        if text_list[index]!= text_lower[index]:\n            return False\n    return True\ndef get_longest_abecedarian_permutation(text):\n    '''\n    Write a function that takes a string an"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    \n    return ''.join(text.split())\n    \ndef count_spaces(text):\n    '''\n    Write a function to count the number of spaces in a string.\n    '''\n    \n    return text.count(' ')\n    \ndef has_digit(text):\n    '''\n    Write a function that takes a string and returns a Boolean if there are\n    any digits in the string.\n    '''\n    \n    return any(ch.isdigit() for ch in text)\n    \ndef has_alphabet(text):\n    '''\n    Write a function that takes a string and returns a Boolean if there are\n    any alphabet characters in the string.\n    '''\n    \n    return any(ch.isalpha() for ch in text)\n    \ndef has_alphanumeric(text):\n    '''\n    Write a function that takes a string and returns a Boolean if there are\n    any alphanumeric characters in the string.\n    '''\n    \n    return any(ch.isalnum() for ch in text)\n    \ndef has_lowercase(text):\n    '''\n    Write a function that takes a string and returns a Boolean if there are\n    any lowercase characters in the string.\n    '''\n    \n    return any(ch.islower() for ch in text)\n    \ndef has_uppercase(text):\n    '''\n    Write a function that takes a string and returns a Boolean if there are\n    any uppercase characters in the string.\n    '''\n    \n    return any(ch.isupper() for ch in text)\n    \ndef has_lower_and_upper(text):\n    '''\n    Write a function that takes a string and returns a Boolean if there are\n    any lowercase and uppercase characters in the string.\n    '''\n    \n    return any(ch.isupper() for ch in text) and any(ch.islower() for ch in text)\n    \ndef is_pangram(text):\n    '''\n    Write a function that takes a string and returns a Boolean if the string\n    is a pangram or not.\n    '''\n    \n    return len(set(text)) == 26\n    \ndef is_panagram(text):\n    '''\n    Write a function that takes a string and returns a Boolean if the string\n    is a panagram or not.\n    '''\n    \n    return len(set(text)) == 26 and any(ch.isalpha() for ch in text)\n    \ndef is_palindrome(text):\n    '''\n    Write a function that takes a string and returns a Boolean if the string\n    is a palindrome or not.\n    '''\n    \n    return text[::-1] == text\n    \ndef is_pangram_hindi(text):\n    '''\n    Write a function that takes a string and returns a Boolean if the string\n    is a pangram or not.\n    '''\n    \n    return len(set(text)) == 26 and any(ch.isalpha() for ch in text)\n    \ndef is_palindrome_hindi(text):\n    '''\n    Write a function that takes a string and returns a Boolean if the string\n    is a palindrome or not.\n    '''\n    \n    return text[::-1] == text\n    \ndef rotate_string(text, num):\n    '''\n    Write a function that takes a string and an integer and returns a new\n    string that is num positions to the right of the original string.\n    '''\n    \n    return text[num:] + text[:num]\n    \ndef reverse(text):\n    '''\n    Write a function that takes a string and returns the string in reverse\n    order.\n    '''\n    \n    return text[::-1]\n    \ndef is_rotation(text1, text2):\n    '''\n    Write a function that takes two strings and returns a Boolean if the first\n    string is a rotation of the second string.\n    '''\n    \n    return rotate_string(text1, len(text2)) == text2\n    \ndef max_consecutive_characters(text):\n    '''\n    Write a function that takes a string and returns the max number of consecutive\n    characters in the string.\n    '''\n    \n    return max([len(group) for group in re.findall(r'(\\w)\\1*', text)])\n    \ndef max_consecutive_non_alphanumeric(text):\n    '''\n    Write a function that takes a string and returns the max number of consecutive\n    non-alphanumeric characters in the string.\n    '''\n    \n    return max([len(group) for group in re.findall(r'(\\W)\\1*', text)])\n    \ndef has_pair(text, char):\n    '''\n    Write a function that takes a string and a character and returns a Boolean\n    if there is at least one occurrence of the character in the string.\n    '''\n    \n    return any(i[0] == char for i in re.findall(r'{}([\\w]{2,})'.format(char), text))\n    \ndef is_anagram(text1, text2):\n    '''\n    Write a function that takes two strings and returns a Boolean if the strings\n    are anagrams or not.\n    '''\n    \n    return sorted(text1.lower()) == sorted(text2.lower())\n    \ndef is_anagram_hindi(text1, text2):\n    '''\n    Write a function that takes two strings and returns a Boolean if the strings\n    are anagrams or not.\n    '''\n    \n    return sorted(text1.lower()) == sorted(text2.lower())\n    \ndef is_anagram_hindi_2(text1, text2):\n    '''\n    Write a function that takes two strings and returns a Boolean if the strings\n    are anagrams or not.\n    '''\n    \n    return sorted(text1.lower()) == sorted(text2.lower()) and text1.lower()!= text2.lower()\n    \ndef get_anagrams(text, word):\n    '''\n    Write a function that takes a string and a word and returns a list of the\n    anagrams of the word in the string.\n    '''\n    \n    return [w for w in text.split() if sorted(w.lower()) == sorted(word.lower())]\n    \ndef get_anagrams_hindi(text, word):\n    '''\n    Write a function that takes a string and a word and returns a list of the\n    anagrams of the word in the string.\n    '''\n    \n    return [w for w in text.split() if sorted(w.lower()) == sorted(word.lower())]\n    \ndef get_anagrams_hindi_2(text, word):\n    '''\n    Write a function that takes a string and a word and returns a list of the\n    anagrams of the word in the string.\n    '''\n    \n    return [w for w in text.split() if sorted(w.lower()) == sorted(word.lower()) and w.lower()!= word.lower()]\n    \ndef get_anagrams_hindi_3(text, word):\n    '''\n    Write a function that takes a string and a word and returns a list of the\n    anagrams of the word in the string.\n    '''\n    \n    return [w for w in text.split() if sorted(w.lower()) == sorted(word.lower())]\n    \ndef is_anagram_of_english_word(text, word):\n    '''\n    Write a function that takes a string and a word and returns a Boolean if the\n    word is an anagram of a valid english word.\n    '''\n    \n    return word.lower() in [w.lower() for w in text.split()]\n    \ndef is_anagram_of_english_word_hindi(text, word):\n    '''\n    Write a function that takes a string and a word and returns a Boolean if the\n    word is an anagram of a valid english word.\n    '''\n    \n    return word.lower() in [w.lower() for w in text.split()] and word.lower()!= text.lower()\n    \ndef is_anagram_of_english_word_hindi_2(text, word):\n    '''\n    Write a function that takes a string and a word and returns a Boolean if the"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s','',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ', '')\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\nprint test_three_equal(0,0,0)\nprint test_three_equal(0,1,1)\nprint test_three_equal(1,1,1)\nprint test_three_equal(1,2,3)\nprint test_three_equal(0,0,1)\nprint test_three_equal(1,1,2)\nprint test_three_equal(2,2,2)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    if x==y:\n        return 2\n    if x==z:\n        return 2\n    if y==z:\n        return 2\n    return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or y==z or x==z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    \n    if x == y == z:\n        return 3\n    if x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and x == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x_y_z_list = [x,y,z]\n    x_y_z_list.sort()\n    if x_y_z_list[0] == x_y_z_list[1]:\n        return x_y_z_list[2] - x_y_z_list[1] - 1\n    elif x_y_z_list[1] == x_y_z_list[2]:\n        return x_y_z_list[0] - x_y_z_list[1] - 1\n    elif x_y_z_list[0] == x_y_z_list[2]:\n        return x_y_z_list[1] - x_y_z_list[2] - 1\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n        \ndef test_function():\n    '''\n    Write a python function that accepts an arbitrary number of arguments and returns a list with the arguments and their count as tuples.\n    '''\n    args = sys.argv\n    args_list = list(args)\n    args_list.pop(0)\n    dict_of_args = {}\n    for arg in args_list:\n        if arg not in dict_of_args:\n            dict_of_args[arg] = 1\n        else:\n            dict_of_args[arg] += 1\n    for arg in dict_of_args:\n        print arg, dict_of_args[arg]"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    mid = n // 2\n    arr_1 = arr[0:mid]\n    arr_2 = arr[mid:]\n    if arr_1 == sorted(arr_1) and arr_2 == sorted(arr_2):\n        return 0\n    else:\n        count_rot = 0\n        for i in range(len(arr)):\n            if arr_1 == sorted(arr_1) and arr_2 == sorted(arr_2):\n                return count_rot\n            else:\n                arr_1.append(arr_1.pop(0))\n                arr_2.append(arr_2.pop(0))\n                count_rot += 1\n    return count_rot\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)):\n        if arr[i] > arr[(i + 1) % len(arr)]:\n            return i\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return i\n    \n    return n\n    \n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    l = len(arr)\n    ans = 0\n    for i in range(l-1):\n        if arr[i] > arr[i+1]:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    low = 0\n    high = len(arr) - 1\n    result = 0\n    while low <= high:\n        mid = (high + low) / 2\n        if arr[mid] > arr[mid + 1]:\n            result = mid + 1\n            break\n        if arr[mid] > arr[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if arr == arr[::-1]:\n        return 0\n    for i in range(1, len(arr)):\n        if arr[i-1] >= arr[i]:\n            return i\n    return i\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr)<2:\n        return 0\n    if arr[0] > arr[-1]:\n        return 0\n    elif arr[0] < arr[-1]:\n        return 1\n    for i in xrange(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return i+1\n    return len(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    if arr==sorted(arr): \n        return 0 \n    for i in range(len(arr)-1,0,-1):\n        if arr[i]>arr[i-1]:\n            break\n    count=i-1\n    for j in range(i-1,len(arr)):\n        if arr[j]<arr[i-1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n < 0:\n        return False\n    i = 1\n    while (i*i) < n:\n        i += 1\n    if i*i == n:\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1 :\n        return True\n    else :\n        return n == (int)(sqrt(n))**2\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # first convert it into int\n    if (n>0) :\n        n = int(n)\n    # check if n is perfect square\n    if (n*n == n) :\n        return 1\n    else :\n        return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    if (x == 1) :\n        return True\n    \n    # check if divisible by 4\n    if (x%4 == 0) :\n        return is_perfect_square(x/4)\n    \n    if (x%2 == 0) :\n        return True\n    \n    i = 3\n    while (i*i <= x) :\n        if (x%i == 0) :\n            return is_perfect_square(x/i)\n        i = i + 2\n    \n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n**(0.5)\n    return int(x) * int(x) == n\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n == int(sqrt(n)) ** 2\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    r = math.sqrt(n)\n    if int(r) == r :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 :\n        return True\n    else :\n        x = int(math.sqrt(n))\n        if (x * x == n) :\n            return True\n        else :\n            return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    # If the given number is a perfect square,\n    # it is a perfect square if its square root is an integer\n    sqrt = int(math.sqrt(n))\n    if sqrt * sqrt == n :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product*i\n    if product%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product = product * num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    p = 1\n    for i in arr:\n        p *= i\n    return p%2 == 0\n    \n    \ndef get_permutations(sequence): \n    '''\n    Given a string, write a function to get all permutations of the string.\n    '''\n    permutations = []\n    if len(sequence) == 1:\n        permutations.append(sequence)\n    else:\n        first = sequence[0]\n        rest = sequence[1:]\n        for p in get_permutations(rest):\n            for i in range(len(p)+1):\n                new_perm = p[:i] + first + p[i:]\n                permutations.append(new_perm)\n    return permutations\n    \n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    l = len(arr)\n    flag = 1\n    for i in range(l):\n        if arr[i] % 2!= 0:\n            flag = 0\n            break\n    return flag\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)==1:\n        return True\n    else:\n        product=1\n        for i in arr:\n            product*=i\n        if product%2==0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    temp = 1\n    for item in arr:\n        temp *= item\n    if temp % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    arr = [i for i in arr if i>0]\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Given a list of ints, return True if the product of the ints is even.\n    product = 1\n    for num in arr:\n        product *= num\n    return (product % 2 == 0)\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    return max_sum_helper(lists, 0, len(lists) - 1)\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    res = []\n    for list in lists:\n        s = sum(list)\n        if len(res) == 0:\n            res.append(s)\n        else:\n            if s > res[0]:\n                res.pop()\n                res.append(s)\n    return res\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    m = len(lists)\n    n = len(lists[0])\n    for i in range(1, m):\n        for j in range(n):\n            if lists[i][j] > lists[i-1][j]:\n                lists[i][j] += lists[i-1][j]\n    return lists[m-1]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    final_list = []\n    for list_ in lists:\n        if sum(list_) > sum(final_list):\n            final_list = list_\n    return final_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    max_list = max_sum_list_rec(lists,0,len(lists)-1)\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n    elif len(lists) == 1:\n        return lists[0]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return None\n    length = len(lists)\n    results = []\n    sums = []\n    for i in range(0, length):\n        sums.append(0)\n    for i in range(0, length):\n        for j in range(0, length):\n            sums[i] = sums[i] + lists[j][i]\n    max_sum = sums[0]\n    max_index = 0\n    for i in range(0, length):\n        if max_sum < sums[i]:\n            max_sum = sums[i]\n            max_index = i\n    results.append(max_index)\n    results.append(max_sum)\n    return results\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = []\n    for list in lists:\n        sum = 0\n        for element in list:\n            sum += element\n        if sum > max_sum:\n            max_sum = sum\n            max_sum_list = list\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            j = i\n            count = 0\n            while j < len(test_str) and test_str[j].isupper():\n                count += 1\n                j += 1\n            if count > max_run:\n                max_run = count\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max = 0\n    for i in range(len(test_str)):\n        k = 1\n        j = i\n        while j < len(test_str):\n            if test_str[j].isupper():\n                k += 1\n                j += 1\n            else:\n                break\n        if k > max:\n            max = k\n    return max\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        curr = 1\n        for j in range(i+1,len(test_str)):\n            if test_str[j].isupper():\n                curr += 1\n            else:\n                break\n        max_run = max(max_run,curr)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    prev_i = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 0\n    if curr_run > max_run:\n        max_run = curr_run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(map(len, re.findall(r'[A-Z]', test_str)))\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max = 0\n    curr = 0\n    for i in xrange(len(test_str)):\n        if test_str[i].isupper():\n            curr += 1\n        else:\n            max = max if max > curr else curr\n            curr = 0\n    return max\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(map(len, re.findall(r'[A-Z]', test_str)))\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    longest_run, count = 0, 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 0\n        longest_run = max(longest_run, count)\n    return longest_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    cur_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            cur_run += 1\n            max_run = max(cur_run, max_run)\n        else:\n            cur_run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in xrange(len(test_str)):\n        current = 1\n        for j in xrange(i+1,len(test_str)):\n            if test_str[j].isupper():\n                current += 1\n            else:\n                break\n        if current > max_run:\n            max_run = current\n    return max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    if nums[0] % 2 == 0:\n        return nums[0]\n    else:\n        for i in range(1, len(nums)):\n            if nums[i] % 2!= 0:\n                return nums[i]\n        return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if nums:\n        for num in nums:\n            if num % 2 == 1:\n                return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2 == 1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if nums is None:\n        return None\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!=0:\n            return num\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup[0]) == K\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Check if the K tuples are available\n    k_tuples = []\n    for tup in test_tup:\n        if len(tup) == K:\n            k_tuples.append(tup)\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup) == K\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    result = False\n    if test_tup[1] == K:\n        result = True\n    return result\n    \ndef check_k_list(test_list, k):\n    '''\n    Write a function to check if the given list contains K or not.\n    '''\n    result = False\n    for tup in test_list:\n        if tup[1] == k:\n            result = True\n    return result\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(K):\n        if not test_tup[i]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0]==K or test_tup[1]==K\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    assert isinstance(test_tup, tuple)\n    assert isinstance(K, int)\n    assert K <= len(test_tup)\n    return True if len(test_tup) == K else False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K <= len(test_tup):\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    pass\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    a, b, c = test_tup\n    if(a + b == c):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return True\n        elif test_tup1[i] > test_tup2[i]:\n            return False\n        else:\n            continue\n    return False\n    \nprint check_smaller((1, 2, 3, 4), (1, 2, 4, 3))\nprint check_smaller((1, 2, 3), (1, 2, 3))\nprint check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5))\nprint check_smaller((1, 2, 3, 4), (5, 4, 3, 2, 1))\nprint check_smaller((1, 2, 3), (5, 4, 3, 2, 1))\nprint check_smaller((5, 4, 3, 2, 1), (1, 2, 3))\nprint check_smaller((5, 4, 3, 2, 1), (1, 2, 3, 4))\nprint check_smaller((5, 4, 3, 2, 1), (1, 2, 3, 4, 5))"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for idx, val in enumerate(test_tup1):\n        if val > test_tup2[idx]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple(x < y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1 == test_tup2:\n        return True\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return True\n        elif test_tup1[i] > test_tup2[i]:\n            return False\n        else:\n            continue\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"Tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            raise Exception(\"Tuple 1 is not smaller than tuple 2.\")\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # first tuple element-wise comparison\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    # second tuple element-wise comparison\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(x < y for x, y in zip(test_tup1, test_tup2))\n"
    }
]